{"version":3,"file":"static/js/64.0d3aef08.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-wallboard-ui/../../packages/lib-tailwind-classnames/src/tcn.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/constants.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useDomainAuthorizationPopup.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useInstallationRequiredPopup.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useOutdatedBrowserExtensionPopup.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useOutdatedClientNotification.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/usePhoneOutOfServiceNotification.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/hooks.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useOfflineNotification.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useSipServerDisconnectedNotification.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useSlowNetworkNotification.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-system-notifications/src/system/useUnauthorizedDomainNotification.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/AuthorizedConnectorsConsumers.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-login-ui/src/components/ForceLogout.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/UnauthorizedUI.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/AuthorizationUIRouter.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/BaseConnectorsConsumers.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/TopLevelProviders.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/lib-authorization-module/src/AuthorizationModule.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/constants.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/core/ApiError.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/core/CancelablePromise.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/core/OpenAPI.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/core/request.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/services/SupervisorWidgetsApiServices.ts","webpack://@bpinc/web-wallboard-ui/../../packages/lib-widgets-urls/src/api-service/services/WallboardApiServices.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/modals/LogoutModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/query-keys.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useSelectedWallboardQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useServicesQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useTeamsQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useWallboardsQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/selectors.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/ui-context/UIContext.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/modals/NewWallboardModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useWallboardTemplatesQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/modals/PullFromGlobalModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/modals/WallboardRotationModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/context/RouterContext.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/utils.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useCreateWallboardCopyMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/editing-context/convertWidgets.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useDeleteWallboardMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useToggleGlobalMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useUpdateWallboardNameMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useUpdateWallboardWidgetsMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/editing-context/EditingContextProvider.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/mutations/useCreateWallboardMutation.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Agenda/AgendaWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/barChartOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/gaugeChartOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/pieChartOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/BreakTime/BreakTimeWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/DateTime/DateTimeWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/atoms.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/stats/helpers.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/stats/config.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/stats/types.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/stats/useGetStatsConfig.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Gauge/GaugeWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Grid/utils.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Grid/GridWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/MyStats/useMyStatsOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/formatters.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/MyStats/MyStatsWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Satisfaction/SatisfactionChart.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Satisfaction/useSatisfactionOption.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/solidGaugeOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Single/WithNoAvailable.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Single/SingleWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/TimeSeries/TimeSeriesWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Unknown/Unknown.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/WidgetResolver.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Empty/EmptyWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Image/ImageWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/News/NewsWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Text/TextWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Summary/SummaryWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useTenantConfigQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Dispositions/DispositionsWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/widgets/Satisfaction/SatisfactionWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useAgendaQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useTimeSeriesDataQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/charts/splineChartOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/AudioAlert/AudioAlert.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/helpers.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/stats/useStatsOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/GridFormsComponents/ColumnsField/ColumnFieldRow.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/GridFormsComponents/ColumnsField/ColumnField.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/GridFormsComponents/ColumnsField/utils.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/GridFormsComponents/ColumnsField/ColumnsField.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/AgentStatesModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TeamsSelectModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/AgentGridModal/AgentsSelect.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/AgentGridModal/AgentGridModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/CopyWidget/CopyWidget.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/CopyWidget/useGetWidgetsToCopy.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ImageSettingsModal/ImageStyleSelect.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ImageSettingsModal/getFileDataUrl.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ImageSettingsModal/SelectImage.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ImageSettingsModal/ImageSettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/NewsSettingsModal/NewsSettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ServicesSelectModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ServiceGridModal/ServicesSelect.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/ServiceGridModal/ServiceGridModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TextSettingsModal/TextSettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/FormLabel.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/shared/GridRow.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TimeSeriesModal/SeriesType.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TimeSeriesModal/Statistics.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TimeSeriesModal/TimeRange.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/TimeSeriesModal/TimeSeriesModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/useHandleCancelWidgetModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/SelectUserModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useAgentsQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useAgendaWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useBreakTimeWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useCreateTimeWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useDispositionsWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useMyStatsWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useSatisfactionWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/SingleOrGaugeSettingsModal/SingleOrGaugeSettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useSingleOrGaugeWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/SummarySettingsModal/SummarySettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useSummaryWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/useHandleWidgetSelect.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Option/Option.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/agenda.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/breakTime.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/copy.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/datetime.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/dispositions.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/gauge.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/grid.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/image.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/news.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/satisfaction.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/singleStatistic.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/stateSummary.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/stats.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/text.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/images/timeSeries.svg","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/optionsList.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/WidgetOptionsGroup.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/Options/Options.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/EmptyWidgetSettingsModal/EmptyWidgetSettingsModal.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/useRemoveWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/Content.module.less?4e46","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/Content.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/queries/useWidgetsSubscriptionQuery.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/useCreateEmptyWidget.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/content/useOpenWidgetSettings.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/HeaderButton.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/types.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/useChangeUserWidgets.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/settings-modals/useWidgetOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/WallboardSelect.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/BaseHeaderContent.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/useSelectWallboard.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/useMenuOptions.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/FontScale/FontScale.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/EditHeaderContent.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/header/Header.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/page/page.module.less?c5a2","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/page/PageEffects.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/useWallboardRotationEffect.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/layout/useDocumentTitleEffect.ts","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/page/PagePreloader.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/page/WallboardPage.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/app/App.tsx","webpack://@bpinc/web-wallboard-ui/../../packages/wallboard-ui/src/app/FullscreenWallboardApp.tsx"],"sourcesContent":["import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n","\r\nexport const DOMAIN_AUTH_URL = 'http://localhost:9897'\r\nconst DOMAIN_PARAM = 'domain'\r\n\r\nconst linkUrl = new URL(DOMAIN_AUTH_URL)\r\nlinkUrl.searchParams.append(DOMAIN_PARAM, location.hostname)\r\n\r\nexport const CURRENT_DOMAIN_AUTH_URL = linkUrl.toString()\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nconst DOMAIN_AUTHORIZATION_MODAL_ID = 'bpClient/onShowDomainAuthorizationDialog'\r\n\r\n\r\nexport const useDomainAuthorizationPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal, closeModal} = useModalsStateMethods()\r\n    const t = useLocalizationState('t')\r\n\r\n    const onShowDomainAuthorizationDialog = useEvent(() => {\r\n        openModal({\r\n            id: DOMAIN_AUTHORIZATION_MODAL_ID,\r\n            title: t.INSTALLATION_PROCESS.bp_client_not_authorized_header(),\r\n            body: (\r\n                <>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part1()}\r\n                    </span>\r\n                    <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {t.ERROR_MESSAGES.domainAuthentificationErrorAnchor()}\r\n                    </a>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part2()}\r\n                    </span>\r\n                </>\r\n            ),\r\n            actions: ({closeModal: closeThisModal}) => (\r\n                <SmButton onClick={closeThisModal}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    const onHideDomainAuthorizationDialog = useEvent(() => {\r\n        closeModal(DOMAIN_AUTHORIZATION_MODAL_ID)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({\r\n            onShowDomainAuthorizationDialog,\r\n            onHideDomainAuthorizationDialog,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowDomainAuthorizationDialog, onHideDomainAuthorizationDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState, useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInstallationMethods} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nconst linkClass = 'cursor-pointer text-primary-legacy'\r\n\r\nconst EXTENSION_ID = 'ext-link'\r\nconst EXTENSION_ID_FF = 'ext-link-firefox'\r\nconst PLUGIN_ID = 'plugin-link'\r\n\r\ntype ModalContentProps = {\r\n    isExtAvailable: boolean\r\n    install: boolean\r\n}\r\n\r\nconst ModalContent: React.FC<ModalContentProps> = ({isExtAvailable, install}) => {\r\n    const {t: {INSTALLATION_PROCESS: i18n}} = useLocalizationState()\r\n    const {\r\n        installChromeExtension,\r\n        installFirefoxExtension,\r\n        installBPClientPlugin,\r\n    } = useInstallationMethods()\r\n\r\n    /* Set click handler after the modal is rendered or translations are changed */\r\n    useEffect(() => {\r\n        const chromeLink = document.getElementById(EXTENSION_ID)\r\n        const firefoxLink = document.getElementById(EXTENSION_ID_FF)\r\n        const pluginLink = document.getElementById(PLUGIN_ID)\r\n\r\n        chromeLink?.addEventListener('click', installChromeExtension)\r\n        firefoxLink?.addEventListener('click', installFirefoxExtension)\r\n        pluginLink?.addEventListener('click', installBPClientPlugin)\r\n\r\n        return () => {\r\n            chromeLink?.removeEventListener('click', installChromeExtension)\r\n            firefoxLink?.removeEventListener('click', installFirefoxExtension)\r\n            pluginLink?.removeEventListener('click', installBPClientPlugin)\r\n        }\r\n    }, [installChromeExtension, installFirefoxExtension, installBPClientPlugin])\r\n\r\n    let content: string = i18n.install_updateHeader(PLUGIN_ID, linkClass)\r\n\r\n    if (install) {\r\n        if (platformInfo.browser === 'chrome') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderChrome(EXTENSION_ID, PLUGIN_ID, linkClass)\r\n\r\n        } else if (platformInfo.browser === 'firefox') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderFirefox(EXTENSION_ID_FF, PLUGIN_ID, linkClass)\r\n\r\n        } else {\r\n            content = i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n        }\r\n    }\r\n\r\n    return <div dangerouslySetInnerHTML={{__html: content}} />\r\n}\r\n\r\nexport const useInstallationRequiredPopup = () => {\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const isExtensionAvailable = useBpClientState('isExtensionAvailable')\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onInstallationRequired = useEvent((install: boolean) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent\r\n                    install={install}\r\n                    isExtAvailable={isExtensionAvailable}\r\n                />\r\n            ),\r\n            actions: {\r\n                ok: {\r\n                    title: i18n.window_buttonOk(),\r\n                },\r\n            },\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onInstallationRequired})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onInstallationRequired])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {URL_EXTENSION_INSTALLER_CHROME, URL_EXTENSION_INSTALLER_FIREFOX, URL_MAC_PLUGIN} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype Props = {\r\n    browserName: string\r\n}\r\n\r\nconst ModalContent: React.FC<Props> = ({browserName}) => {\r\n    const {INSTALLATION_PROCESS: i18n} = useLocalizationState('t')\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    const isChrome = platformInfo.browser === 'chrome'\r\n    const isFirefox = platformInfo.browser === 'firefox'\r\n    const isSafari = platformInfo.browser === 'safari'\r\n    let linkHref = ''\r\n\r\n    if (isChrome) {\r\n        linkHref = URL_EXTENSION_INSTALLER_CHROME\r\n    } else if (isFirefox) {\r\n        linkHref = serverOrigin + URL_EXTENSION_INSTALLER_FIREFOX\r\n    } else if (isSafari) {\r\n        linkHref = serverOrigin + URL_MAC_PLUGIN\r\n    }\r\n    return (\r\n        <>\r\n            <span>\r\n                {i18n.bp_client_old_extension_version(browserName)}\r\n            </span>\r\n            {(isChrome || isFirefox || isSafari) && (\r\n                <>\r\n                    <br />\r\n                    <br />\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part1()}\r\n                    </span>\r\n                    <a href={linkHref} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {i18n.bp_client_update_extension_text()}\r\n                    </a>\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part2()}\r\n                    </span>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useOutdatedBrowserExtensionPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onShowExtensionIsOldDialog = useEvent((browserName: string) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent browserName={browserName} />\r\n            ),\r\n            actions: ({closeModal}) => (\r\n                <SmButton onClick={closeModal}>\r\n                    {i18n.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onShowExtensionIsOldDialog})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowExtensionIsOldDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst reloadPage = () => location.reload()\r\n\r\nexport function useOutdatedClientNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isClientOutdated = useAppConfigState('isClientOutdated')\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (isClientOutdated) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OutdatedClientAppError,\r\n                message: (\r\n                    <>\r\n                        <span>{i18n.reload_confirm_new_msg_part1()}</span>\r\n                        <a href=\"#\" onClick={reloadPage}>\r\n                            {i18n.reload_confirm_action_button_text()}\r\n                        </a>\r\n                        <span>{i18n.reload_confirm_new_msg_part2()}</span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.OutdatedClientAppError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isClientOutdated\r\n    }, [isClientOutdated, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState, useSessionStateConnector} from '@bpinc/ad-session-context'\r\nimport type {PhoneCapabilities, ServerErrorSource} from '@bpinc/ad-session-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst PHONE_OUT_OF_SERVICE_ERROR_DELAY = 5000\r\n\r\nexport const usePhoneOutOfServiceNotification = () => {\r\n    const sessionStateConnector = useSessionStateConnector()\r\n    const isHelperAppInstanceCreated = useBpClientState('isHelperAppInstanceCreated')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneType = useSessionState('phoneType')\r\n    const t = useLocalizationState('t')\r\n\r\n    const onUpdateCapabilities = useEvent((caps: PhoneCapabilities) => {\r\n        if (!caps.canDial && phoneType !== 'phone_type_none') {\r\n            bpLogger.warn('SIP phone or external line is out of service')\r\n\r\n            let message: string | undefined\r\n            switch (phoneType) {\r\n                case 'phone_type_nailed':\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_virtual_phone_not_available()\r\n                    break\r\n                case 'phone_type_soft_secure':\r\n                case 'phone_type_soft_unsecure':\r\n                    if (isHelperAppInstanceCreated) {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n                    } else {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_helper_app_not_available()\r\n                    }\r\n                    break\r\n                default:\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n            }\r\n\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message,\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        } else {\r\n            bpLogger.info('SIP phone or external line is in service')\r\n            hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n        }\r\n    })\r\n\r\n    const onServerError = useEvent((source: ServerErrorSource, errorCode: number) => {\r\n        if (source === 'agentServer' && errorCode === 4) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message: t.ERROR_MESSAGES.phoneIsNotRegistered(),\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        }\r\n    })\r\n\r\n    const onThreePCCServerGone = useEvent(() => {\r\n        showNotification({\r\n            type: 'warning',\r\n            id: Notifications.PhoneOutOfServiceError,\r\n            message: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_3pcc_server_connectionLost(),\r\n            closable: false,\r\n            showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n        })\r\n    })\r\n\r\n    const onThreePCCServerReady = useEvent(() => {\r\n        hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = sessionStateConnector.dispenser.subscribe({\r\n            onUpdateCapabilities,\r\n            onServerError,\r\n            onThreePCCServerGone,\r\n            onThreePCCServerReady,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [\r\n        onUpdateCapabilities,\r\n        onServerError,\r\n        onThreePCCServerGone,\r\n        onThreePCCServerReady,\r\n        sessionStateConnector,\r\n    ])\r\n}\r\n","import {useEmiErrorsNotifications} from './interaction/useEmiErrorsNotifications'\r\nimport {useFailedCallNotification} from './interaction/useFailedCallNotification'\r\nimport {useFavoritesLimitReachedError} from './interaction/useFavoritesLimitReachedError'\r\nimport {useInteractionNotAcceptedNotification} from './interaction/useInteractionNotAcceptedNotification'\r\nimport {usePhoneDeviceNotDetectedNotification} from './interaction/usePhoneDeviceNotDetectedNotification'\r\nimport {usePhoneTypeErrorNotification} from './interaction/usePhoneTypeErrorNotification'\r\nimport {\r\n    useReservedForIncomingInteractionNotification,\r\n} from './interaction/useReservedForIncomingInteractionNotification'\r\nimport {useWebRtcCallInChatErrorNotifications} from './interaction/useWebRtcCallInChatErrorNotifications'\r\nimport {useDomainAuthorizationPopup} from './system/useDomainAuthorizationPopup'\r\nimport {useInstallationRequiredPopup} from './system/useInstallationRequiredPopup'\r\nimport {useOfflineNotification} from './system/useOfflineNotification'\r\nimport {useOutdatedBrowserExtensionPopup} from './system/useOutdatedBrowserExtensionPopup'\r\nimport {useOutdatedClientNotification} from './system/useOutdatedClientNotification'\r\nimport {usePhoneOutOfServiceNotification} from './system/usePhoneOutOfServiceNotification'\r\nimport {useSipServerDisconnectedNotification} from './system/useSipServerDisconnectedNotification'\r\nimport {useSlowNetworkNotification} from './system/useSlowNetworkNotification'\r\nimport {useUnauthorizedDomainNotification} from './system/useUnauthorizedDomainNotification'\r\n\r\n\r\n/**\r\n * Top-level notifications which should be shown for application WITH COMM.PANEL ONLY\r\n */\r\nexport function useInteractionNotifications() {\r\n    useEmiErrorsNotifications()\r\n    useFailedCallNotification()\r\n    useInteractionNotAcceptedNotification()\r\n    usePhoneDeviceNotDetectedNotification()\r\n    usePhoneTypeErrorNotification()\r\n    useReservedForIncomingInteractionNotification()\r\n    useWebRtcCallInChatErrorNotifications()\r\n    useFavoritesLimitReachedError()\r\n}\r\n\r\n/**\r\n * Top-level notifications which should be shown in ANY application of AD framework (standalone KB, for instance)\r\n */\r\nexport function useSystemNotifications() {\r\n    useDomainAuthorizationPopup()\r\n    useInstallationRequiredPopup()\r\n    useOfflineNotification()\r\n    useOutdatedBrowserExtensionPopup()\r\n    useOutdatedClientNotification()\r\n    usePhoneOutOfServiceNotification()\r\n    useSipServerDisconnectedNotification()\r\n    useSlowNetworkNotification()\r\n    useUnauthorizedDomainNotification()\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {\r\n    useIsOffline,\r\n    useOfflineErrorMessages,\r\n    useOfflineStateDataShowOfflineAlert,\r\n    useOfflineStateMethods,\r\n} from '@bpinc/ad-offline-state-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\nexport function useOfflineNotification() {\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const showOfflineAlert = useOfflineStateDataShowOfflineAlert()\r\n    const offlineErrorMessages = useOfflineErrorMessages()\r\n    const isOffline = useIsOffline()\r\n\r\n    useEffect(() => {\r\n        if (showOfflineAlert) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OfflineStateError,\r\n                content: offlineErrorMessages.isOffline,\r\n                closable: true,\r\n                duration: 5000,\r\n                onHide: () => setShowOfflineAlert(false),\r\n            })\r\n        }\r\n    }, [\r\n        offlineErrorMessages.isOffline,\r\n        setShowOfflineAlert,\r\n        showNotification,\r\n        showOfflineAlert,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (!isOffline) {\r\n            setShowOfflineAlert(false)\r\n        }\r\n    }, [isOffline, setShowOfflineAlert])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent, usePreviousValueRef} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSipServerDisconnectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const sipServer = useSessionState('sipServer')\r\n    const prevSipServerRef = usePreviousValueRef(sipServer)\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (sipServer) {\r\n            hideNotificationById(Notifications.SipServerConnectionError)\r\n        } else if (prevSipServerRef.current) {\r\n            // we had SIP server, but not anymore\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.SipServerConnectionError,\r\n                message: i18n.window_messages_3pcc_server_connectionLost(),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track sipServer change only\r\n    }, [sipServer, updateNotification])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst CHECK_INTERVAL = 5000\r\nconst SLOW_THRESHOLD = 800\r\n\r\n/**\r\n * This hook periodically checks the user's connection speed by fetching root of the current host.\r\n * and shows a notification if the connection is slow.\r\n * Connection is considered slow based on the predefined threshold (SLOW_THRESHOLD),\r\n * When the connection speed improves, it hides the notification.\r\n */\r\nexport function useSlowNetworkNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const startTime = useRef(0)\r\n\r\n    const checkConnectionSpeed = useEvent(() => {\r\n        const isRequestAlreadyInProgress = startTime.current !== 0\r\n\r\n        if (isRequestAlreadyInProgress || process.env.NODE_ENV === 'development') {\r\n            return\r\n        }\r\n\r\n        startTime.current = new Date().getTime()\r\n\r\n        fetch('/', {\r\n            method: 'HEAD',\r\n            cache: 'no-store',\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(() => {\r\n                const endTime = new Date().getTime()\r\n                const duration = endTime - startTime.current\r\n\r\n                startTime.current = 0\r\n\r\n                if (duration > SLOW_THRESHOLD) {\r\n                    const message = i18n.slow_connection()\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.SlowNetworkConnectionError,\r\n                        message,\r\n                    })\r\n                    bpLogger.warn(`Slow connection detected`)\r\n                } else {\r\n                    hideNotificationById(Notifications.SlowNetworkConnectionError)\r\n                }\r\n            })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(checkConnectionSpeed, CHECK_INTERVAL)\r\n        return () => clearInterval(interval)\r\n    }, [checkConnectionSpeed])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nexport function useUnauthorizedDomainNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isDomainAuthorized = useBpClientState('isDomainAuthorized')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isDomainAuthorized) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.DomainNotAuthorizedForBPClientError,\r\n                closable: false,\r\n                message: (\r\n                    <>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part1()}\r\n                        </span>\r\n                        <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            {i18n.domainAuthentificationErrorAnchor()}\r\n                        </a>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part2()}\r\n                        </span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.DomainNotAuthorizedForBPClientError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isDomainAuthorized\r\n    }, [isDomainAuthorized, updateNotification])\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {useSystemNotifications} from '@bpinc/lib-system-notifications'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    authorizedConnectors: AuthorizedConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizedConnectorsConsumers: React.FC<Props> = ({baseConnectors, authorizedConnectors, children}) => {\r\n    useSystemNotifications()\r\n    return <>{children(baseConnectors, authorizedConnectors)}</>\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {incomingErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {SmButton, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const ForceLogout: React.FC = () => {\r\n    const forceLogoutInfo = useSessionState('forceLogoutInfo')\r\n    const {closeForceLogout} = useSessionStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n\r\n    assertDefined(forceLogoutInfo)\r\n    const loggedOutBy = formatFullName(forceLogoutInfo.firstName, forceLogoutInfo.lastName)\r\n    const loggedOutTime = formatDate(forceLogoutInfo.timestamp)\r\n\r\n    const getContent = () => {\r\n        switch (forceLogoutInfo.errorCode) {\r\n            case incomingErrorMessageCodes.forced_logout_by_another_session: {\r\n                return t.ERROR_MESSAGES.sessionWasOverwritten()\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_supervisor: {\r\n                return t.ERROR_MESSAGES.forcedLogout(loggedOutBy, loggedOutTime)\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_tenant:\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_user: {\r\n                return t.ERROR_MESSAGES.account_has_been_disabled()\r\n            }\r\n        }\r\n        return forceLogoutInfo.forceLogoutReason\r\n    }\r\n\r\n    return (\r\n        <SmSegment\r\n            padded\r\n            className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\r\n                overflow-hidden rounded-none border-none bg-transparent shadow-none\"\r\n            id=\"login\"\r\n        >\r\n            <Modal\r\n                isOpen\r\n                size=\"small\"\r\n                className=\"max-w-[570px]\"\r\n                aria-describedby=\"forceLogoutDialogDescription\"\r\n                data-testid=\"forced-logout-modal\"\r\n            >\r\n                <Modal.Header>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_information()}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description id=\"forceLogoutDialogDescription\">\r\n                        <p>{getContent()}</p>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <SmButton onClick={closeForceLogout} primary data-testid=\"ok-button\">\r\n                        {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                    </SmButton>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </SmSegment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useCurrentTabRole} from '@bpinc/ad-current-tab-data-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ForceLogin, LoginPage} from '@bpinc/lib-login-ui'\r\nimport {ForceLogout} from '@bpinc/lib-login-ui/src/components/ForceLogout'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const UnauthorizedUI: React.FC = () => {\r\n    const tabRole = useCurrentTabRole()\r\n    const {\r\n        authChecked,\r\n        isLoggedIn,\r\n        showLoginDialog,\r\n        offerForceLogin,\r\n        forceLogoutInfo,\r\n    } = useSessionState(['authChecked', 'isLoggedIn', 'showLoginDialog', 'offerForceLogin', 'forceLogoutInfo'])\r\n    const language = useLocalizationState('language')\r\n\r\n    const showAppLoader = !language || (tabRole === 'undecided' && !authChecked)\r\n    const showLoginPage = !showAppLoader && (showLoginDialog || !isLoggedIn)\r\n    const showForceLogout = !!forceLogoutInfo && showLoginPage\r\n    const showForceLogin = offerForceLogin && !forceLogoutInfo && showLoginPage\r\n\r\n    return (\r\n        <div className=\"mx-auto h-full w-[496px]\">\r\n            {showAppLoader && <Loader active size=\"huge\" color=\"primary\" />}\r\n            {showLoginPage && <LoginPage />}\r\n            {showForceLogout && <ForceLogout />}\r\n            {showForceLogin && <ForceLogin />}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {AuthorizedProviders} from '@bpinc/ad-local-providers'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {AuthorizedConnectorsConsumers} from './AuthorizedConnectorsConsumers'\r\nimport {UnauthorizedUI} from './UnauthorizedUI'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizationUIRouter: React.FC<Props> = React.memo(({\r\n    baseConnectors,\r\n    children,\r\n}) => {\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <AuthorizedProviders baseConnectors={baseConnectors}>\r\n                {authorizedConnectors => (\r\n                    <AuthorizedConnectorsConsumers\r\n                        baseConnectors={baseConnectors}\r\n                        authorizedConnectors={authorizedConnectors}\r\n                    >\r\n                        {children}\r\n                    </AuthorizedConnectorsConsumers>\r\n                )}\r\n            </AuthorizedProviders>\r\n        )\r\n    }\r\n    return <UnauthorizedUI />\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const BaseConnectorsConsumers: React.FC<Props> = ({\r\n    baseConnectors,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n}) => {\r\n\r\n    if (BaseConnectorsConsumer) {\r\n        return (\r\n            <BaseConnectorsConsumer baseConnectors={baseConnectors}>\r\n                {children}\r\n            </BaseConnectorsConsumer>\r\n        )\r\n    }\r\n    return children\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {BaseProviders} from '@bpinc/ad-local-providers'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport {Tooltip} from '@bpinc/lib-jskit-ui'\r\nimport {NotificationsStateProvider} from '@bpinc/lib-notifications-context'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\nimport {BaseConnectorsConsumers} from './BaseConnectorsConsumers'\r\n\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (baseConnectors: BaseConnectors) => ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const TopLevelProviders: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    BaseConnectorsConsumer,\r\n    children,\r\n}) => {\r\n    return (\r\n        <BaseProviders platformSpecific={platformSpecific} app={app}>\r\n            {baseConnectors => (\r\n                <BaseConnectorsConsumers\r\n                    baseConnectors={baseConnectors}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    <Tooltip.Provider>\r\n                        <NotificationsStateProvider>\r\n                            {children(baseConnectors)}\r\n                        </NotificationsStateProvider>\r\n                    </Tooltip.Provider>\r\n                </BaseConnectorsConsumers>\r\n            )}\r\n        </BaseProviders>\r\n    )\r\n}\r\n","import type {PropsWithChildren, ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport type {RemoteName} from '@bpinc/lib-remotes-configs'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AppStyleSelector} from '@bpinc/lib-ui-elements'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport {AuthorizationUIRouter} from './AuthorizationUIRouter'\r\nimport {TopLevelProviders} from './TopLevelProviders'\r\n\r\n\r\nexport type BaseConnectorsConsumerComponent = React.FC<PropsWithChildren<{baseConnectors: BaseConnectors}>>\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n    className?: string\r\n    appRemoteName: RemoteName\r\n}\r\n\r\nexport const AuthorizationModule: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n    className,\r\n    appRemoteName,\r\n}) => {\r\n    return (\r\n        <AppStyleSelector app={appRemoteName}>\r\n            <div className={tcn('h-full', className)}>\r\n                <TopLevelProviders\r\n                    app={app}\r\n                    platformSpecific={platformSpecific}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    {baseConnectors => (\r\n                        <AuthorizationUIRouter baseConnectors={baseConnectors}>\r\n                            {children}\r\n                        </AuthorizationUIRouter>\r\n                    )}\r\n                </TopLevelProviders>\r\n            </div>\r\n        </AppStyleSelector>\r\n    )\r\n}\r\n","export const MIN_CARD_SIZE = {width: 2, height: 2}\r\nexport const GRID_SIZE = {width: 12, height: 12}\r\nexport const NEW_WALLBOARD_ID = 'new'\r\n\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    readonly [Symbol.toStringTag]!: string;\n\n    private _isResolved: boolean;\n    private _isRejected: boolean;\n    private _isCancelled: boolean;\n    private readonly _cancelHandlers: (() => void)[];\n    private readonly _promise: Promise<T>;\n    private _resolve?: (value: T | PromiseLike<T>) => void;\n    private _reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this._isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this._isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this._isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this._promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this._promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n}\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string>;\n    USERNAME?: string | Resolver<string>;\n    PASSWORD?: string | Resolver<string>;\n    HEADERS?: Headers | Resolver<Headers>;\n    ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: '',\n    VERSION: '1.0.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nconst isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nconst base64 = (str: string): string => {\n    try {\n        return btoa(str);\n    } catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString('base64');\n    }\n};\n\nconst getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n    })\n        .filter(([_, value]) => isDefined(value))\n        .reduce((headers, [key, value]) => ({\n            ...headers,\n            [key]: String(value),\n        }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return new Headers(headers);\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body) {\n        if (options.mediaType?.includes('/json')) {\n            return JSON.stringify(options.body)\n        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n            return options.body;\n        } else {\n            return JSON.stringify(options.body);\n        }\n    }\n    return undefined;\n};\n\nexport const sendRequest = async (\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Headers,\n    onCancel: OnCancel\n): Promise<Response> => {\n    const controller = new AbortController();\n\n    const request: RequestInit = {\n        headers,\n        body: body ?? formData,\n        method: options.method,\n        signal: controller.signal,\n    };\n\n    if (config.WITH_CREDENTIALS) {\n        request.credentials = config.CREDENTIALS;\n    }\n\n    onCancel(() => controller.abort());\n\n    return await fetch(url, request);\n};\n\nconst getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nconst getResponseBody = async (response: Response): Promise<any> => {\n    if (response.status !== 204) {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                const isJSON = contentType.toLowerCase().startsWith('application/json');\n                if (isJSON) {\n                    return await response.json();\n                } else {\n                    return await response.text();\n                }\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        throw new ApiError(options, result, 'Generic Error');\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = await getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                resolve(result.body);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AgendaResponse } from '../models/AgendaResponse';\nimport type { StatsAPIAgent } from '../models/StatsAPIAgent';\nimport type { StatsAPIService } from '../models/StatsAPIService';\nimport type { StatsAPITeam } from '../models/StatsAPITeam';\nimport type { StatsAPITimeSeriesData } from '../models/StatsAPITimeSeriesData';\nimport type { SupervisorWidgetsSubscriptionData } from '../models/SupervisorWidgetsSubscriptionData';\nimport type { SupervisorWidgetsSubscriptionRequest } from '../models/SupervisorWidgetsSubscriptionRequest';\nimport type { TenantAgentConfiguration } from '../models/TenantAgentConfiguration';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\n\nexport class SupervisorWidgetsApiServices {\n\n    /**\n     * Get a collection of team names and IDs\n     * Returns a collection of team names and IDs for all teams in the system.\n     * @returns StatsAPITeam OK\n     * @throws ApiError\n     */\n    public static getTeams(): CancelablePromise<Array<StatsAPITeam>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/teams',\n        });\n    }\n\n    /**\n     * Delete supervisor widgets subscription\n     * @throws ApiError\n     */\n    public static deleteSupervisorWidgetsSubscription(): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/statsapi/subscription/active',\n        });\n    }\n\n    /**\n     * Retrieve user's agenda\n     * @returns AgendaResponse OK\n     * @throws ApiError\n     */\n    public static getAgenda({\nrequestBody,\n}: {\n/**\n * List of user IDs\n */\nrequestBody: Array<string>,\n}): CancelablePromise<AgendaResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/statsapi/subscription/agenda',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Create supervisor widgets subscription\n     * @throws ApiError\n     */\n    public static createSupervisorWidgetsSubscription({\nrequestBody,\n}: {\nrequestBody: SupervisorWidgetsSubscriptionRequest,\n}): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/statsapi/subscription',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Get supervisor widgets subscription data\n     * @returns SupervisorWidgetsSubscriptionData Wallboard subscription data\n     * @throws ApiError\n     */\n    public static getSupervisorWidgetsSubscriptionData(): CancelablePromise<SupervisorWidgetsSubscriptionData> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/subscription/data',\n        });\n    }\n\n    /**\n     * @returns any \n     * @throws ApiError\n     */\n    public static getTenantConfiguration(): CancelablePromise<{\nagentConfiguration: TenantAgentConfiguration;\n}> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/tenant_configuration',\n        });\n    }\n\n    /**\n     * @returns StatsAPIAgent List of agents\n     * @throws ApiError\n     */\n    public static getAgents(): CancelablePromise<Array<StatsAPIAgent>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/agents',\n        });\n    }\n\n    /**\n     * @returns StatsAPIService List of services\n     * @throws ApiError\n     */\n    public static getServices(): CancelablePromise<Array<StatsAPIService>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/services',\n        });\n    }\n\n    /**\n     * @returns StatsAPITimeSeriesData Time series widget data\n     * @throws ApiError\n     */\n    public static getTimeSeriesData({\nmeasurement,\nstatistic,\nstart,\nend,\ntimeInterval,\n}: {\nmeasurement: string,\nstatistic: string,\nstart: string,\nend: string,\ntimeInterval: string,\n}): CancelablePromise<StatsAPITimeSeriesData> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/timeseries/{measurement}?statistic={statistic}&start={start}&end={end}&interval={timeInterval}',\n            path: {\n                'measurement': measurement,\n                'statistic': statistic,\n                'start': start,\n                'end': end,\n                'timeInterval': timeInterval,\n            },\n        });\n    }\n\n}\r\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { WallboardConfig } from '../models/WallboardConfig';\nimport type { WallboardConfigType } from '../models/WallboardConfigType';\nimport type { WallboardInfo } from '../models/WallboardInfo';\nimport type { WallboardNewConfig } from '../models/WallboardNewConfig';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\n\nexport class WallboardApiServices {\n\n    /**\n     * @returns any \n     * @throws ApiError\n     */\n    public static getWallboards(): CancelablePromise<{\nwallboards: Array<WallboardInfo>;\n}> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/wallboards',\n        });\n    }\n\n    /**\n     * @returns any \n     * @throws ApiError\n     */\n    public static createWallboard({\nrequestBody,\n}: {\nrequestBody: WallboardNewConfig,\n}): CancelablePromise<{\nid: string;\n}> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/statsapi/cfg/wallboards',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * @returns WallboardConfig \n     * @throws ApiError\n     */\n    public static getWallboardDetails({\nwallboardId,\n}: {\nwallboardId: string,\n}): CancelablePromise<WallboardConfig> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/statsapi/cfg/wallboards/{wallboardId}',\n            path: {\n                'wallboardId': wallboardId,\n            },\n        });\n    }\n\n    /**\n     * @throws ApiError\n     */\n    public static deleteWallboard({\nwallboardId,\n}: {\nwallboardId: string,\n}): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/statsapi/cfg/wallboards/{wallboardId}',\n            path: {\n                'wallboardId': wallboardId,\n            },\n        });\n    }\n\n    /**\n     * @throws ApiError\n     */\n    public static updateWallboardIsGlobal({\nwallboardId,\nrequestBody,\n}: {\nwallboardId: string,\nrequestBody: {\nis_global: boolean;\n},\n}): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/statsapi/cfg/wallboards/{wallboardId}/is_global',\n            path: {\n                'wallboardId': wallboardId,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * @throws ApiError\n     */\n    public static updateWallboardConfig({\nwallboardId,\nrequestBody,\n}: {\nwallboardId: string,\nrequestBody: {\nconfig: WallboardConfigType;\n},\n}): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/statsapi/cfg/wallboards/{wallboardId}/config',\n            path: {\n                'wallboardId': wallboardId,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * @throws ApiError\n     */\n    public static updateWallboardName({\nwallboardId,\nrequestBody,\n}: {\nwallboardId: string,\nrequestBody: {\nname: string;\n},\n}): CancelablePromise<void> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/statsapi/cfg/wallboards/{wallboardId}/name',\n            path: {\n                'wallboardId': wallboardId,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\r\n","import React, {useRef} from 'react'\r\n\r\nimport {useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {useFocusElement} from '@bpinc/lib-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\nexport const LogoutModal: React.FC<CommonModalProps> = ({onClose: closeLogoutModal, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n    const {logout} = useSessionStateMethods()\r\n\r\n    const buttonRef = useRef<HTMLButtonElement>(null)\r\n\r\n    useFocusElement(buttonRef, {timeout: 0})\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            onClose={closeLogoutModal}\r\n            size=\"small\"\r\n            className=\"max-w-full\"\r\n            aria-labelledby=\"logoutModalHeader\"\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"logoutModalHeader\">\r\n                { t.LOGOUT_DIALOG.sign_out_text()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                {t.LOGOUT_DIALOG.body_text()}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => logout()} primary ref={buttonRef}>\r\n                    {t.LOGOUT_DIALOG.sign_out_text()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import type {SupervisorWidgetsSubscriptionRequest} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\nconst addExtraKeys = (key: string, ...extraKeys: unknown[]) => {\r\n    const resultKeys = [key]\r\n    extraKeys.forEach(extraKey => {\r\n        if (extraKey !== undefined && extraKey !== null) {\r\n            resultKeys.push(String(extraKey))\r\n        }\r\n    })\r\n    return resultKeys\r\n}\r\n\r\nexport const queryKey = {\r\n    agents: () => ['agents'],\r\n    services: () => ['services'],\r\n    subscribe: (\r\n        subscriptionData?:\r\n        | Record<number, SupervisorWidgetsSubscriptionRequest>\r\n        | undefined,\r\n    ) =>\r\n        subscriptionData\r\n            ? [\r\n                'subscribe',\r\n                //This is a hack to make sure that the query key is unique for each subscription\r\n                //The subscription data is an object with the widget id as the key and the subscription data as the value\r\n                //If subscription data hasn't changed, the query key will be the same and the query won't be refetched\r\n                Object.entries(subscriptionData || {}).reduce(\r\n                    (acc, [key, value]) => acc + key + JSON.stringify(value),\r\n                    '',\r\n                ),\r\n            ]\r\n            : ['subscribe'],\r\n    subscribe_data: () => ['subscribe-data'],\r\n    tenant_config: () => ['tenant-config'],\r\n    agenda: () => ['agenda'],\r\n    teams: () => ['teams'],\r\n    time_series: (statType: string, interval: string) => addExtraKeys('time_series', statType, interval),\r\n    wallboard: (wallboardId?: string) => addExtraKeys('wallboard', wallboardId),\r\n    wallboards: () => ['wallboards'],\r\n    wallboard_templates: () => ['wallboard-templates'],\r\n}\r\n","import {useParams} from 'react-router-dom'\r\nimport {useQuery} from '@tanstack/react-query'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {NEW_WALLBOARD_ID} from '../constants'\r\nimport {queryKey} from './query-keys'\r\n\r\n\r\nexport function useSelectedWallboardQuery() {\r\n    const {wallboardId} = useParams()\r\n    assertDefined(wallboardId)\r\n\r\n    return useQuery({\r\n        queryKey: queryKey.wallboard(wallboardId),\r\n        queryFn() {\r\n            return WallboardApiServices.getWallboardDetails({wallboardId})\r\n        },\r\n        enabled: wallboardId !== NEW_WALLBOARD_ID,\r\n    })\r\n}\r\n\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useServicesQuery() {\r\n    return useQuery({\r\n        queryKey: queryKey.services(),\r\n        queryFn: SupervisorWidgetsApiServices.getServices,\r\n        staleTime: MS_IN_MINUTE * 5,\r\n    })\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useTeamsQuery() {\r\n    return useQuery({\r\n        queryKey: queryKey.teams(),\r\n        queryFn: SupervisorWidgetsApiServices.getTeams,\r\n    })\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_SECOND} from '@bpinc/lib-helpers'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './query-keys'\r\n\r\n\r\nexport function useWallboardsQuery() {\r\n    return useQuery({\r\n        queryKey: queryKey.wallboards(),\r\n        queryFn() {\r\n            return WallboardApiServices.getWallboards().then(data => data.wallboards)\r\n        },\r\n        gcTime: MS_IN_SECOND * 10,\r\n        staleTime: MS_IN_SECOND * 10,\r\n    })\r\n}\r\n","import {cloneDeep, uniq} from 'lodash-es'\r\nimport {createSelector} from 'reselect'\r\n\r\nimport type {SupervisorWidget, SupervisorWidgetsSubscriptionRequest, WallboardConfig} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\nconst getWallboardConfig = (wallboard: Pick<WallboardConfig, 'config'> | undefined) => wallboard?.config\r\n\r\nexport const getWallboardWidgets = createSelector(\r\n    getWallboardConfig,\r\n    (wallboardConfig: WallboardConfig['config'] | undefined) =>\r\n        wallboardConfig?.widgets.map(widget => widget.config) || [],\r\n)\r\n\r\nexport const getWallboardConfigFontScale = createSelector(\r\n    getWallboardConfig,\r\n    (wallboardConfig: WallboardConfig['config'] | undefined) => wallboardConfig?.style?.fontScaleValue || 1,\r\n)\r\nexport const getWidgetsSubscriptionData = createSelector(\r\n    (widgets: SupervisorWidget[]) => widgets,\r\n    widgets => widgets.reduce<Record<string, SupervisorWidgetsSubscriptionRequest>>((result, widget) => {\r\n        const subscription = createSubscriptionRequest(widget)\r\n        if (subscription) {\r\n            result[widget.id] = subscription\r\n        }\r\n        return result\r\n    }, {}),\r\n)\r\n\r\nfunction createSubscriptionRequest(config: SupervisorWidget) {\r\n    if (!('subscription' in config) || !config.subscription || !config.subscription.type) {\r\n        return\r\n    }\r\n\r\n    const widgetSubscription: SupervisorWidgetsSubscriptionRequest = {}\r\n\r\n    switch (config.subscription.type) {\r\n        case 'stats_total': {\r\n            widgetSubscription.stats_totals = uniq(config.subscription.req)\r\n            widgetSubscription.stats_totals_service_ids = config.subscription.service_ids\r\n            widgetSubscription.stats_totals_dispositions = config.subscription.dispositions\r\n            break\r\n        }\r\n        case 'agent_grid':\r\n        case 'break_time':\r\n        case 'dispositions':\r\n        case 'my_stats':\r\n        case 'satisfaction':\r\n        case 'summary': {\r\n            widgetSubscription.agent_grids = []\r\n\r\n            const tempAgent = cloneDeep(config.subscription.req)\r\n            tempAgent.limit = 1000\r\n\r\n            let totalContactsIndex = -1\r\n            tempAgent.columns.forEach((column, i) => {\r\n                removeRedundantData(column)\r\n\r\n                if (column.statName == 'name') {\r\n                    column.statName = 'first_last_name'\r\n                }\r\n                if (column.statName == 'total_contacts') {\r\n                    column.statName = 'in_calls_handled_per_day'\r\n                    totalContactsIndex = i\r\n                }\r\n            })\r\n\r\n            if (config.type === 'grid') {\r\n                tempAgent.my_subteam_only = config.limit?.subteam\r\n                tempAgent.logged_in_agents_only = config.limit?.logged_in_only\r\n            }\r\n            if (totalContactsIndex != -1) {\r\n                addColumn(\r\n                    tempAgent.columns,\r\n                    totalContactsIndex + 1,\r\n                    {\r\n                        id: (totalContactsIndex + 2).toString(),\r\n                        statName: 'out_calls_handled_per_day',\r\n                    },\r\n                )\r\n            }\r\n\r\n            addColumn(\r\n                tempAgent.columns,\r\n                tempAgent.columns.length - 1,\r\n                {\r\n                    id: (tempAgent.columns.length + 1).toString(),\r\n                    statName: 'acd_state',\r\n                },\r\n            )\r\n\r\n            widgetSubscription.agent_grids.push(tempAgent)\r\n\r\n            if (config.subscription.type === 'my_stats') {\r\n                widgetSubscription['teams_stats'] = [\r\n                    'team_success_ratio_per_day',\r\n                    'in_calls_handled_per_day',\r\n                    'out_calls_handled_per_day',\r\n                    'calls_average_handling_time_per_day',\r\n                ]\r\n            }\r\n\r\n            break\r\n        }\r\n        case 'service_grid': {\r\n            widgetSubscription.service_grids = []\r\n\r\n            const tempService = cloneDeep(config.subscription.req)\r\n            tempService.limit = 1000\r\n\r\n            let indexCallsHandledPerDay = -1\r\n            tempService.columns.forEach(column => {\r\n                removeRedundantData(column)\r\n\r\n                if (column.statName === 'calls_handled_per_day') {\r\n                    indexCallsHandledPerDay = parseInt(column.id || '0')\r\n                    column.statName = 'in_calls_handled_per_day'\r\n                }\r\n            })\r\n\r\n            if (indexCallsHandledPerDay > -1) {\r\n                addColumn(\r\n                    tempService.columns,\r\n                    tempService.columns.length - 1,\r\n                    {\r\n                        id: (tempService.columns.length + 1).toString(),\r\n                        statName: 'out_calls_handled_per_day',\r\n                    },\r\n                )\r\n            }\r\n\r\n            widgetSubscription.service_grids.push(tempService)\r\n            break\r\n        }\r\n        case 'chat_messages': {\r\n            widgetSubscription.chat_messages = config.subscription.req\r\n            break\r\n        }\r\n    }\r\n    return widgetSubscription\r\n}\r\n\r\nfunction addColumn<T>(columns: T[], index: number, column: T) {\r\n    columns.splice(index + 1, 0, column)\r\n}\r\n\r\nfunction removeRedundantData<T extends object>(column: T) {\r\n    if ('dir' in column) {\r\n        delete column.dir\r\n    }\r\n\r\n    if ('coltitle' in column) {\r\n        delete column.coltitle\r\n    }\r\n\r\n    if ('order' in column) {\r\n        delete column.order\r\n    }\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\nimport {noop} from 'lodash-es'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport {useLocalStorageForState} from '@bpinc/ad-local-settings-context'\r\nimport type {BooleanManager} from '@bpinc/lib-helpers'\r\nimport {initialBooleanManager, useBoolean} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {WallboardPageConfig, WallboardRotationType} from '../types'\r\n\r\n\r\ninterface UIContext {\r\n    config?: WallboardPageConfig\r\n    darkTheme: BooleanManager\r\n    editMode: BooleanManager\r\n    showTitleBar: BooleanManager\r\n    rotation: {\r\n        value: WallboardRotationType\r\n        setValue: StateSetter<WallboardRotationType>\r\n    }\r\n}\r\n\r\nconst initialValue: UIContext = {\r\n    config: undefined,\r\n    darkTheme: initialBooleanManager(),\r\n    editMode: initialBooleanManager(),\r\n    showTitleBar: initialBooleanManager(true),\r\n    rotation: {\r\n        value: {\r\n            enabled: false,\r\n            period: 0,\r\n            wallboards: [],\r\n        },\r\n        setValue: noop,\r\n    },\r\n}\r\nconst UIContext = createContext<UIContext>(initialValue)\r\n\r\nUIContext.displayName = 'WallboardUIContext'\r\n\r\ntype UIProviderProps = {\r\n    children: ReactElement\r\n}\r\n\r\nexport const UIProvider: React.FC<UIProviderProps> = ({\r\n    children,\r\n}) => {\r\n    const darkTheme = useBoolean()\r\n    const editMode = useBoolean()\r\n    const showTitleBar = useBoolean(true)\r\n    const [rotationValue, setRotationValue] = useState<WallboardRotationType>(initialValue.rotation.value)\r\n    const rotation = useMemo<UIContext['rotation']>(() => ({value: rotationValue, setValue: setRotationValue}), [rotationValue])\r\n\r\n    const value = useMemo<UIContext>(() => ({\r\n        darkTheme,\r\n        editMode,\r\n        showTitleBar,\r\n        rotation,\r\n    }), [darkTheme, editMode, rotation, showTitleBar])\r\n\r\n    useLocalStorageForState(\r\n        darkTheme.value,\r\n        'adWallboardDarkTheme',\r\n        darkTheme.toggle,\r\n        window.matchMedia?.('(prefers-color-scheme: dark)').matches,\r\n    )\r\n\r\n    useLocalStorageForState(\r\n        editMode.value,\r\n        'adWallboardEditMode',\r\n        editMode.toggle,\r\n        initialValue.editMode.value,\r\n    )\r\n\r\n    useLocalStorageForState(\r\n        showTitleBar.value,\r\n        'adWallboardShowTitleBar',\r\n        showTitleBar.toggle,\r\n        initialValue.showTitleBar.value,\r\n    )\r\n\r\n    useLocalStorageForState(\r\n        rotation.value,\r\n        'adWallboardShowRotation',\r\n        rotation.setValue,\r\n        initialValue.rotation.value,\r\n    )\r\n\r\n    return (\r\n        <UIContext.Provider value={value}>\r\n            {children}\r\n        </UIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useDarkTheme = () => useContextSelector(UIContext, value => value.darkTheme)\r\nexport const usePageConfig = () => useContextSelector(UIContext, value => value.config)\r\nexport const useEditMode = () => useContextSelector(UIContext, value => value.editMode)\r\nexport const useShowTitleBar = () => useContextSelector(UIContext, value => value.showTitleBar)\r\nexport const useWallboardRotation = () => useContextSelector(UIContext, value => value.rotation)\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownItemProps, DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown, Loader, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useSetFontScale, useSetName, useSetWidgets} from '../editing-context'\r\nimport {useGoToNewWallboard} from '../layout/context/RouterContext'\r\nimport {useWallboardTemplatesQuery} from '../queries'\r\nimport {getWallboardWidgets} from '../selectors'\r\nimport {useEditMode} from '../ui-context/UIContext'\r\n\r\n\r\nexport const NewWallboardModal: React.FC<CommonModalProps> = ({\r\n    onClose: closeNewWallboardModal,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const goToNewWallboard = useGoToNewWallboard()\r\n    const [selectedTemplateIndex, setSelectedTemplateIndex] = useState(0)\r\n    const editMode = useEditMode()\r\n    const setWidgets = useSetWidgets()\r\n    const setName = useSetName()\r\n    const setFontScale = useSetFontScale()\r\n\r\n    const {data: templates, isLoading} = useWallboardTemplatesQuery()\r\n\r\n    const addNewWallboard = useCallback(() => {\r\n        assertDefined(templates)\r\n        editMode.setTrue()\r\n        setName(templates[selectedTemplateIndex].name)\r\n        setWidgets(getWallboardWidgets(templates[selectedTemplateIndex]))\r\n        setFontScale(1)\r\n        goToNewWallboard()\r\n        closeNewWallboardModal()\r\n    }, [closeNewWallboardModal, editMode, selectedTemplateIndex, setFontScale, setName, setWidgets, templates, goToNewWallboard])\r\n\r\n    const options: DropdownItemProps[] = useMemo(() => {\r\n        return templates?.map((template, index) => ({\r\n            value: index,\r\n            text: template.name,\r\n        })) || []\r\n    }, [templates])\r\n\r\n    const handleSelectChange = useCallback((_evt: SyntheticEvent, {value}: DropdownProps) => {\r\n        if (typeof value === 'number') {\r\n            setSelectedTemplateIndex(value)\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            onClose={closeNewWallboardModal}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            aria-labelledby=\"newWallboardModalHeader\"\r\n            data-testid=\"new-wallboard-modal\"\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"newWallboardModalHeader\">\r\n                {t.WALLBOARD.new_wallboard()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <label className=\"mr-4\">{t.WALLBOARD.new_wallboard_type()}</label>\r\n                {isLoading ? (\r\n                    <Loader active color=\"primary\" size=\"medium\" />\r\n                ) : (\r\n                    <Dropdown options={options} value={selectedTemplateIndex} onChange={handleSelectChange} />\r\n                )}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => closeNewWallboardModal()} enabledInOffline>\r\n                    {t.GLOBAL.cancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={addNewWallboard} primary disabled={!templates} data-testid=\"new-wallboard-ok\">\r\n                    {t.GLOBAL.ok()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_DAY} from '@bpinc/lib-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './query-keys'\r\nimport wallboardTemplates from './wallboard-templates.json'\r\n\r\n\r\ntype WallboardTemplates = {\r\n    name: string\r\n    config: {\r\n        widgets: {\r\n            config: SupervisorWidget\r\n        }[]\r\n    }\r\n}[]\r\n\r\nexport function useWallboardTemplatesQuery() {\r\n    return useQuery({\r\n        queryFn: () => wallboardTemplates as WallboardTemplates,\r\n        queryKey: queryKey.wallboard_templates(),\r\n        gcTime: MS_IN_DAY,\r\n        staleTime: MS_IN_DAY,\r\n    })\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useCreateWallboardCopyMutation, useToggleGlobalMutation} from '../mutations'\r\nimport {useSelectedWallboardQuery} from '../queries'\r\n\r\n\r\nexport const PullFromGlobalModal: React.FC<CommonModalProps> = ({onClose, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n    const {data: wallboard} = useSelectedWallboardQuery()\r\n    const {mutate: toggleGlobal} = useToggleGlobalMutation()\r\n    const {mutate: createWallboardCopy} = useCreateWallboardCopyMutation()\r\n\r\n    const pullFromGlobal = useCallback(() => {\r\n        assertDefined(wallboard)\r\n        toggleGlobal({wallboardId: wallboard?.id, isGlobal: false})\r\n        onClose()\r\n    }, [onClose, wallboard, toggleGlobal])\r\n\r\n    const handleDuplicate = useCallback(() => {\r\n        assertDefined(wallboard)\r\n        createWallboardCopy({wallboardId: wallboard?.id, isGlobal: false})\r\n        onClose()\r\n    }, [createWallboardCopy, onClose, wallboard])\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            aria-labelledby=\"pullFromGlobalModalHeader\"\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"pullFromGlobalModalHeader\">\r\n                { t.WALLBOARD.pull_from_global_modal_title()}\r\n            </Modal.Header>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={pullFromGlobal}>\r\n                    {t.WALLBOARD.pull()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={handleDuplicate}>\r\n                    {t.WALLBOARD.duplicate()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={() => onClose()} primary enabledInOffline>\r\n                    {t.WALLBOARD.cancel()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nimport {CheckboxField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useWallboardsQuery} from '../queries'\r\nimport type {WallboardRotationType} from '../types'\r\nimport {useWallboardRotation} from '../ui-context/UIContext'\r\n\r\n\r\ntype WallboardRotationFormData = Pick<WallboardRotationType, 'enabled' | 'period'> & {\r\n    wallboards: Record<string, boolean>\r\n}\r\n\r\nexport const WallboardRotationModal: React.FC<CommonModalProps> = ({\r\n    onClose,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const rotation = useWallboardRotation()\r\n    const {data: wallboards} = useWallboardsQuery()\r\n\r\n    const {control, handleSubmit} = useForm<WallboardRotationFormData>({\r\n        defaultValues: {\r\n            enabled: rotation.value.enabled,\r\n            period: rotation.value.period,\r\n            wallboards: (wallboards || []).reduce<Record<string, boolean>>((res, {id}) => {\r\n                res[id] = rotation.value.wallboards.includes(id)\r\n                return res\r\n            }, {}),\r\n        },\r\n    })\r\n\r\n    const onSave = useMemo(() => handleSubmit(async formData => {\r\n        rotation.setValue({\r\n            enabled: formData.enabled,\r\n            period: formData.period,\r\n            wallboards: Object.entries(formData.wallboards)\r\n                .filter(([_, value]) => value)\r\n                .map(([id]) => id),\r\n        })\r\n\r\n        onClose()\r\n    }), [handleSubmit, onClose, rotation])\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            onClose={onClose}\r\n            size=\"mini\"\r\n            className=\"max-w-full\"\r\n            aria-labelledby=\"rotateWallboardsModalHeader\"\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"rotateWallboardsModalHeader\">\r\n                {t.WALLBOARD.rotation_setting()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <div className=\"grid grid-cols-6 items-center gap-4\">\r\n                    <label className=\"col-span-2\">{t.WALLBOARD.rotation_enabled()}</label>\r\n                    <CheckboxField control={control} name=\"enabled\" className=\"col-span-4 mb-0\" />\r\n                    <label className=\"col-span-2 self-start\">{t.WALLBOARD.rotation_wallboards()}</label>\r\n                    <div className=\"col-span-4 self-end pt-5\">\r\n                        {\r\n                            wallboards?.map(({id, name}) => (\r\n                                <CheckboxField\r\n                                    key={id}\r\n                                    control={control}\r\n                                    name={`wallboards.${id}`}\r\n                                    label={name}\r\n                                    className=\"mb-2\"\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <label className=\"col-span-2\">{t.WALLBOARD.rotation_interval()}</label>\r\n                    <TextField control={control} name=\"period\" className=\"col-span-4\" type=\"number\" />\r\n                </div>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} enabledInOffline>\r\n                    {t.GLOBAL.cancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={onSave} primary disabled={!wallboards?.length}>\r\n                    {t.GLOBAL.ok()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useCallback, useEffect} from 'react'\r\nimport {useNavigate, useParams} from 'react-router-dom'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {NEW_WALLBOARD_ID} from '../../constants'\r\nimport {NewWallboardModal} from '../../modals'\r\nimport {useWallboardsQuery} from '../../queries'\r\nimport {getNewWallboardRoute, getWallboardRoute} from '../../utils'\r\n\r\n\r\ninterface RouterContextValue{\r\n    setNewWallboardTemplatesSelected: () => void\r\n    goFromRemovedWallboard: (wallboardId: string) => void\r\n    goToWallboard: (wallboardId: string) => void\r\n    goToNewWallboard: () => void\r\n    loading: boolean\r\n}\r\n\r\nlet RouterContext: Context<RouterContextValue>\r\n\r\nexport const RouterContextProvider: FCWithChildren<ReactElement> = ({children}) => {\r\n    const navigate = useNavigate()\r\n    const {wallboardId} = useParams()\r\n    const openNewWallboardModal = useModalComponentOpener(NewWallboardModal)\r\n\r\n    const {value: newWallboardTemplatesSelected, setTrue: setNewWallboardTemplatesSelected, setFalse: setNewWallboardTemplatesUnselected} = useBoolean(false)\r\n\r\n    const {status: wallboardStatus, data: wallboards} = useWallboardsQuery()\r\n\r\n    const goToWallboard = (newWallboardId: string) => {\r\n        navigate(getWallboardRoute(newWallboardId))\r\n        setNewWallboardTemplatesUnselected()\r\n    }\r\n\r\n    const goToNewWallboard = useCallback(() => {\r\n        setNewWallboardTemplatesSelected()\r\n        navigate(getNewWallboardRoute())\r\n    }, [setNewWallboardTemplatesSelected, navigate])\r\n\r\n    useEffect(() => {\r\n        if (wallboardStatus === 'pending') {\r\n            return\r\n        }\r\n        if (!wallboards) {\r\n            return\r\n        }\r\n        if (!wallboardId) {\r\n            const defaultWallboard = wallboards?.find(w => w.is_default) || wallboards?.[0]\r\n            if (defaultWallboard) {\r\n                navigate(getWallboardRoute(defaultWallboard.id))\r\n            } else {\r\n                navigate(getNewWallboardRoute())\r\n            }\r\n            return\r\n        }\r\n        if (wallboardId === NEW_WALLBOARD_ID && !newWallboardTemplatesSelected) {\r\n            openNewWallboardModal()\r\n            return\r\n        }\r\n        if (wallboardId !== NEW_WALLBOARD_ID) {\r\n            const selectedWallboard = wallboards?.find(w => w.id === wallboardId)\r\n            if (!selectedWallboard) {\r\n                openNewWallboardModal()\r\n                goToNewWallboard()\r\n            }\r\n        }\r\n    }, [wallboardId, wallboards, navigate, newWallboardTemplatesSelected, openNewWallboardModal, goToNewWallboard, wallboardStatus])\r\n\r\n    const goFromRemovedWallboard = useCallback((deletedWallboardId: string) => {\r\n        assertDefined(wallboards)\r\n        if (deletedWallboardId === wallboardId) {\r\n            const wallboardIndex = wallboards?.findIndex(w => w.id === deletedWallboardId)\r\n\r\n            const wallboardToGo = wallboards[(wallboardIndex === wallboards.length - 1) ? 0 : wallboardIndex + 1]\r\n            if (wallboardToGo) {\r\n                navigate(getWallboardRoute(wallboardToGo.id))\r\n            } else {\r\n                navigate(getNewWallboardRoute())\r\n            }\r\n        }\r\n    }, [wallboards, navigate, wallboardId])\r\n\r\n    const contextValue = {\r\n        setNewWallboardTemplatesSelected,\r\n        goFromRemovedWallboard,\r\n        goToWallboard,\r\n        goToNewWallboard,\r\n        loading: wallboardStatus === 'pending',\r\n    }\r\n\r\n    if (!RouterContext) {\r\n        RouterContext = createContext<RouterContextValue>(contextValue)\r\n        RouterContext.displayName = 'RouterContext'\r\n    }\r\n\r\n    return (\r\n        <RouterContext.Provider value={contextValue}>\r\n            {children}\r\n        </RouterContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useGoFromRemovedWallboard = () => useContextSelector(RouterContext, value => value.goFromRemovedWallboard)\r\nexport const useGoToWallboard = () => useContextSelector(RouterContext, value => value.goToWallboard)\r\nexport const useGoToNewWallboard = () => useContextSelector(RouterContext, value => value.goToNewWallboard)\r\nexport const useIsLoading = () => useContextSelector(RouterContext, value => value.loading)\r\n","import {NEW_WALLBOARD_ID} from './constants'\r\n\r\n\r\nexport function getWallboardRoute(wallboardId: string) {\r\n    return `../${wallboardId}`\r\n}\r\n\r\nexport function getNewWallboardRoute() {\r\n    return getWallboardRoute(NEW_WALLBOARD_ID)\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {WallboardConfig} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {useGoToWallboard} from '../layout/context/RouterContext'\r\nimport {queryKey} from '../queries'\r\n\r\n\r\ninterface CreateWallboardCopy {\r\n    wallboardId: string\r\n    isGlobal?: boolean\r\n}\r\n\r\nexport function useCreateWallboardCopyMutation() {\r\n    const queryClient = useQueryClient()\r\n    const goToWallboard = useGoToWallboard()\r\n    return useMutation({\r\n        async mutationFn({wallboardId, isGlobal}: CreateWallboardCopy) {\r\n            const existingWallboard = queryClient.getQueryData<WallboardConfig>(queryKey.wallboard(wallboardId))\r\n\r\n            if (!existingWallboard) {\r\n                return\r\n            }\r\n\r\n            return WallboardApiServices.createWallboard({\r\n                requestBody: {\r\n                    ...existingWallboard,\r\n                    name: `${existingWallboard.name}(1)`,\r\n                    is_global: isGlobal ?? existingWallboard?.is_global,\r\n                },\r\n            })\r\n        },\r\n        onSuccess(newWallboard) {\r\n            assertDefined(newWallboard)\r\n\r\n            queryClient.invalidateQueries({queryKey: queryKey.wallboards()}).then(() => {\r\n                goToWallboard(newWallboard?.id)\r\n            })\r\n\r\n        },\r\n\r\n    })\r\n}\r\n","import type {SupervisorWidget, WallboardConfigType} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\nexport function convertClientWidgetsToServer(widgets: SupervisorWidget[]): WallboardConfigType['widgets'] {\r\n    return widgets.map(w => ({config: w}))\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\nimport produce from 'immer'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {WallboardInfo} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {useGoFromRemovedWallboard} from '../layout/context/RouterContext'\r\nimport {queryKey} from '../queries'\r\n\r\n\r\nexport function useDeleteWallboardMutation() {\r\n    const queryClient = useQueryClient()\r\n    const goFromRemovedWallboard = useGoFromRemovedWallboard()\r\n    return useMutation({\r\n        mutationFn: WallboardApiServices.deleteWallboard,\r\n        onMutate({wallboardId}) {\r\n            queryClient.removeQueries({queryKey: queryKey.wallboard(wallboardId), exact: true})\r\n\r\n            queryClient.setQueryData<WallboardInfo[]>(queryKey.wallboards(), produce(draft => {\r\n                assertDefined(draft)\r\n\r\n                const wallboardIndex = draft?.findIndex(w => w.id === wallboardId)\r\n\r\n                if (wallboardIndex === -1) {\r\n                    return\r\n                }\r\n\r\n                draft.splice(wallboardIndex, 1)\r\n                goFromRemovedWallboard(wallboardId)\r\n            }))\r\n        },\r\n    })\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\nimport produce from 'immer'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {WallboardConfig, WallboardInfo} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from '../queries'\r\n\r\n\r\ninterface ToggleGlobal {wallboardId: string; isGlobal: boolean}\r\n\r\nexport function useToggleGlobalMutation() {\r\n    const queryClient = useQueryClient()\r\n    return useMutation({\r\n        mutationFn({wallboardId, isGlobal}: ToggleGlobal) {\r\n            return WallboardApiServices.updateWallboardIsGlobal({wallboardId, requestBody: {is_global: isGlobal}})\r\n        },\r\n        onMutate({wallboardId, isGlobal}) {\r\n            queryClient.setQueryData<WallboardInfo[]>(queryKey.wallboards(), produce(draft => {\r\n                assertDefined(draft)\r\n\r\n                const wallboardIndex = draft?.findIndex(w => w.id === wallboardId)\r\n\r\n                draft[wallboardIndex].is_global = isGlobal\r\n            }))\r\n            queryClient.setQueryData<WallboardConfig>(queryKey.wallboard(wallboardId), produce(draft => {\r\n                assertDefined(draft)\r\n                draft.is_global = isGlobal\r\n            }))\r\n        },\r\n    })\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport type {WallboardConfig} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from '../queries'\r\n\r\n\r\ntype MutationArguments = {\r\n    wallboardId: string\r\n    name: string\r\n}\r\n\r\nexport function useUpdateWallboardNameMutation() {\r\n    const queryClient = useQueryClient()\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            wallboardId,\r\n            name,\r\n        }: MutationArguments) => WallboardApiServices.updateWallboardName({\r\n            wallboardId,\r\n            requestBody: {\r\n                name,\r\n            },\r\n        }),\r\n        onMutate({\r\n            wallboardId,\r\n            name,\r\n        }) {\r\n            queryClient.setQueryData<WallboardConfig | undefined>(\r\n                queryKey.wallboard(wallboardId),\r\n                current => {\r\n                    if (!current) {\r\n                        return current\r\n                    }\r\n\r\n                    return {\r\n                        ...current,\r\n                        name,\r\n                    }\r\n                },\r\n            )\r\n        },\r\n    })\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport type {SupervisorWidget, WallboardConfig, WallboardStyle} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from '../queries'\r\n\r\n\r\ntype MutationArguments = {\r\n    wallboardId: string\r\n    updatedWallboardWidgets: SupervisorWidget[]\r\n    updatedStyle?: WallboardStyle\r\n}\r\n\r\nconst toServerWidgets = (widgets: SupervisorWidget[]) => widgets.map(\r\n    widgetConfigItem => ({\r\n        config: widgetConfigItem,\r\n    }),\r\n)\r\n\r\nexport function useUpdateWallboardWidgetsMutation() {\r\n    const queryClient = useQueryClient()\r\n    return useMutation({\r\n        mutationFn: async ({\r\n            wallboardId,\r\n            updatedWallboardWidgets,\r\n            updatedStyle,\r\n        }: MutationArguments) => {\r\n            return WallboardApiServices.updateWallboardConfig({\r\n                wallboardId,\r\n                requestBody: {\r\n                    config: {\r\n                        widgets: toServerWidgets(updatedWallboardWidgets),\r\n                        style: updatedStyle,\r\n                    },\r\n                },\r\n            })\r\n        },\r\n        onMutate({\r\n            wallboardId,\r\n            updatedWallboardWidgets,\r\n            updatedStyle,\r\n        }) {\r\n            queryClient.setQueryData<WallboardConfig | undefined>(\r\n                queryKey.wallboard(wallboardId),\r\n                current => {\r\n                    if (!current) {\r\n                        return current\r\n                    }\r\n                    return {\r\n                        ...current,\r\n                        config: {\r\n                            widgets: toServerWidgets(updatedWallboardWidgets),\r\n                            style: updatedStyle,\r\n                        },\r\n                    }\r\n                },\r\n            )\r\n        },\r\n        onSuccess(_, {wallboardId}) {\r\n            queryClient.invalidateQueries({queryKey: queryKey.wallboard(wallboardId)})\r\n        },\r\n    })\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport produce from 'immer'\r\nimport {isEqual} from 'lodash-es'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport type {FCWithChildren, StateSetter} from '@bpinc/lib-types-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {NEW_WALLBOARD_ID} from '../constants'\r\nimport {\r\n    useCreateWallboardMutation,\r\n    useUpdateWallboardNameMutation,\r\n    useUpdateWallboardWidgetsMutation,\r\n} from '../mutations'\r\nimport {useSelectedWallboardQuery} from '../queries'\r\nimport {getWallboardConfigFontScale, getWallboardWidgets} from '../selectors'\r\nimport {useEditMode} from '../ui-context/UIContext'\r\n\r\n\r\ninterface EditingContextValue {\r\n    name: string\r\n    setName: (newName: string) => void\r\n    fontScale: number\r\n    setFontScale: StateSetter<number>\r\n    widgets: SupervisorWidget[]\r\n    isSaving: boolean\r\n    updateWidget: (updatedWidgetConfig: SupervisorWidget) => void\r\n    addWidget: (newWidgetConfig: SupervisorWidget) => void\r\n    removeWidget: (removingWidgetId: string) => void\r\n    setWidgets: StateSetter<SupervisorWidget[]>\r\n    save: () => void\r\n}\r\n\r\nlet EditingContext: Context<EditingContextValue>\r\n\r\nexport const EditingContextProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const {data: selectedWallboard} = useSelectedWallboardQuery()\r\n    const [name, setName] = useState('')\r\n    const [fontScale, setFontScale] = useState(1)\r\n    const {wallboardId} = useParams()\r\n    const isNewWallboard = wallboardId === NEW_WALLBOARD_ID\r\n\r\n    const [widgets, setWidgets] = useState<SupervisorWidget[]>([])\r\n\r\n    const editMode = useEditMode()\r\n\r\n    useEffect(() => {\r\n        if (selectedWallboard) {\r\n            setWidgets(getWallboardWidgets(selectedWallboard))\r\n            setName(selectedWallboard.name)\r\n            setFontScale(getWallboardConfigFontScale(selectedWallboard))\r\n        }\r\n    }, [\r\n        editMode,\r\n        selectedWallboard,\r\n    ])\r\n\r\n    const addWidget = useCallback((newWidgetConfig: SupervisorWidget) => {\r\n        setWidgets(currentWidgets => [\r\n            ...currentWidgets,\r\n            newWidgetConfig,\r\n        ])\r\n    }, [])\r\n\r\n    const updateWidget = useCallback((updatedWidgetConfig: SupervisorWidget) => {\r\n        setWidgets(produce(draft => {\r\n            const widgetIndex = draft.findIndex(\r\n                w => w.id === updatedWidgetConfig.id,\r\n            ) ?? -1\r\n\r\n            if (widgetIndex === -1) {\r\n                return\r\n            }\r\n\r\n            const currentWidget = draft[widgetIndex]\r\n\r\n            if (!currentWidget) {\r\n                return\r\n            }\r\n\r\n            Object.assign(currentWidget, updatedWidgetConfig)\r\n        }))\r\n    }, [])\r\n\r\n    const removeWidget = useCallback((removingWidgetId: string) => {\r\n        setWidgets(currentWidgets => currentWidgets.filter(\r\n            w => w.id !== removingWidgetId,\r\n        ))\r\n    }, [setWidgets])\r\n\r\n    const {\r\n        mutateAsync: updateWallboardConfig,\r\n        isPending: isSavingWidgets,\r\n    } = useUpdateWallboardWidgetsMutation()\r\n\r\n    const updateWidgets = useCallback(async () => {\r\n        assertDefined(selectedWallboard)\r\n\r\n        await updateWallboardConfig({\r\n            wallboardId: selectedWallboard.id,\r\n            updatedWallboardWidgets: widgets,\r\n            updatedStyle: {\r\n                ...(selectedWallboard.config.style || {}),\r\n                fontScaleValue: fontScale,\r\n            },\r\n        })\r\n\r\n        editMode.setFalse()\r\n\r\n    }, [selectedWallboard, updateWallboardConfig, widgets, fontScale, editMode])\r\n\r\n    const {\r\n        mutateAsync: updateWallboardName,\r\n        isPending: isSavingName,\r\n    } = useUpdateWallboardNameMutation()\r\n\r\n    const {mutate: createWallboard} = useCreateWallboardMutation()\r\n\r\n    const updateName = useCallback(async () => {\r\n        assertDefined(selectedWallboard)\r\n\r\n        await updateWallboardName({\r\n            wallboardId: selectedWallboard.id,\r\n            name,\r\n        })\r\n    }, [selectedWallboard, updateWallboardName, name])\r\n\r\n    const save = useCallback(async () => {\r\n        if (isNewWallboard) {\r\n            createWallboard({\r\n                name,\r\n                widgets,\r\n            })\r\n        } else {\r\n            //First array item is a condition, second is a promise to run if condition is true\r\n            const promisesConfig = [[widgetsWereChanged, updateWidgets], [nameWasChanged, updateName]] as const\r\n\r\n            const promisesToRun = promisesConfig.filter(([shouldRun]) => shouldRun()).map(([, promise]) => promise())\r\n\r\n            await Promise.allSettled(promisesToRun)\r\n        }\r\n\r\n        editMode.setFalse()\r\n\r\n        function widgetsWereChanged() {\r\n            return !isEqual(getWallboardWidgets(selectedWallboard), widgets) || getWallboardConfigFontScale(selectedWallboard) !== fontScale\r\n        }\r\n\r\n        function nameWasChanged() {\r\n            return selectedWallboard?.name !== name\r\n        }\r\n\r\n    }, [isNewWallboard, fontScale, editMode, createWallboard, name, widgets, selectedWallboard, updateWidgets, updateName])\r\n\r\n    const isSaving = useMemo(() => isSavingWidgets || isSavingName, [\r\n        isSavingWidgets,\r\n        isSavingName,\r\n    ])\r\n\r\n    const contextValue = useMemo<EditingContextValue>(\r\n        () => ({\r\n            name,\r\n            setName,\r\n            fontScale,\r\n            setFontScale,\r\n            widgets,\r\n            setWidgets,\r\n            isSaving,\r\n            updateWidget,\r\n            addWidget,\r\n            removeWidget,\r\n            save,\r\n        }),\r\n        [\r\n            name,\r\n            fontScale,\r\n            widgets,\r\n            isSaving,\r\n            addWidget,\r\n            updateWidget,\r\n            removeWidget,\r\n            save,\r\n        ],\r\n    )\r\n\r\n    if (!EditingContext) {\r\n        EditingContext = createContext<EditingContextValue>(contextValue)\r\n        EditingContext.displayName = 'EditingContext'\r\n    }\r\n\r\n    return (\r\n        <EditingContext.Provider value={contextValue}>\r\n            {children}\r\n        </EditingContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useUpdateWidget = () => useContextSelector(EditingContext, value => value.updateWidget)\r\nexport const useAddWidget = () => useContextSelector(EditingContext, value => value.addWidget)\r\nexport const useRemoveWidget = () => useContextSelector(EditingContext, value => value.removeWidget)\r\nexport const useSave = () => useContextSelector(EditingContext, value => value.save)\r\nexport const useIsSaving = () => useContextSelector(EditingContext, value => value.isSaving)\r\nexport const useWidgets = () => useContextSelector(EditingContext, value => value.widgets)\r\nexport const useName = () => useContextSelector(EditingContext, value => value.name)\r\nexport const useSetName = () => useContextSelector(EditingContext, value => value.setName)\r\nexport const useFontScale = () => useContextSelector(EditingContext, value => value.fontScale)\r\nexport const useSetFontScale = () => useContextSelector(EditingContext, value => value.setFontScale)\r\nexport const useSetWidgets = () => useContextSelector(EditingContext, value => value.setWidgets)\r\n\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {convertClientWidgetsToServer} from '../editing-context/convertWidgets'\r\nimport {useGoToWallboard} from '../layout/context/RouterContext'\r\nimport {queryKey} from '../queries'\r\n\r\n\r\nexport function useCreateWallboardMutation() {\r\n    const queryClient = useQueryClient()\r\n    const goToWallboard = useGoToWallboard()\r\n    return useMutation({\r\n        mutationFn: ({name, widgets}: {name: string; widgets: SupervisorWidget[]}) => {\r\n            return WallboardApiServices.createWallboard({\r\n                requestBody: {\r\n                    is_default: false,\r\n                    is_global: false,\r\n                    name,\r\n                    config: {widgets: convertClientWidgetsToServer(widgets)},\r\n                },\r\n            })\r\n        },\r\n        onSuccess(newWallboard) {\r\n            assertDefined(newWallboard)\r\n\r\n            queryClient.invalidateQueries({queryKey: queryKey.wallboards()}).then(() => {\r\n                goToWallboard(newWallboard?.id)\r\n            })\r\n        },\r\n\r\n    })\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {formatDate, isSame, MS_IN_HOUR, MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {StatsAPICalendarEvent, SupervisorWidgetConfigAgenda} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {useAgendaQuery} from '../../queries'\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nconst EVENT_AMOUNT_LIMIT = 6\r\n\r\nfunction getEventColor(startTime: number) {\r\n    if (aboutToStartOrInProgress()) {\r\n        return 'bg-[--wallboard-agenda-in-progress-event-color]'\r\n    }\r\n\r\n    if (twoHoursToStart()) {\r\n        return 'bg-[--wallboard-agenda-soon-event-color]'\r\n    }\r\n\r\n    return 'bg-[--wallboard-agenda-future-event-color]'\r\n\r\n    function aboutToStartOrInProgress() {\r\n        return startTime - Date.now() < 10 * MS_IN_MINUTE\r\n    }\r\n\r\n    function twoHoursToStart() {\r\n        return startTime - Date.now() < 2 * MS_IN_HOUR\r\n    }\r\n}\r\n\r\nexport const AgendaWidget: FC<WidgetProps<SupervisorWidgetConfigAgenda>> = ({\r\n    config,\r\n}) => {\r\n    const {data: agenda} = useAgendaQuery(config.user_id)\r\n\r\n    const eventsList = useMemo(() => {\r\n        return agenda?.[config.user_id]?.slice(0, EVENT_AMOUNT_LIMIT) ?? []\r\n    }, [agenda, config.user_id])\r\n\r\n    const eventsListByDates = useMemo(() => {\r\n        return eventsList.reduce<Record<string, StatsAPICalendarEvent[]>>(\r\n            (acc, event) => {\r\n                const formattedDate = formatDate(\r\n                    event.startTime,\r\n                    'dddd, MMMM D',\r\n                )\r\n\r\n                if (!acc[formattedDate]) {\r\n                    acc[formattedDate] = []\r\n                }\r\n                acc[formattedDate].push(event)\r\n                return acc\r\n            },\r\n            {},\r\n        )\r\n    }, [eventsList])\r\n\r\n    return (\r\n        <WithNoData\r\n            noData={!eventsList.length}\r\n            className=\"!justify-start !overflow-auto\"\r\n        >\r\n            {Object.entries(eventsListByDates).map(([date, events]) => (\r\n                <div key={date} className=\"flex w-full flex-col\">\r\n                    <div className=\"mx-5 mb-2.5 mt-5 text-[1.5vmin] text-[--wallboard-text-secondary]\">\r\n                        {date}\r\n                    </div>\r\n                    {events.map((event, index) => {\r\n                        const sameDayEvent = isSame(\r\n                            new Date(event.startTime),\r\n                            new Date(event.endTime),\r\n                            'day',\r\n                        )\r\n                        return (\r\n                            <div\r\n                                key={event.id}\r\n                                className={tcn('flex flex-auto', {\r\n                                    'bg-[--wallboard-table-odd-row-bg]': (index + 1) % 2,\r\n                                    'bg-[--wallboard-table-even-row-bg:]': !((index + 1) % 2),\r\n                                })}\r\n                            >\r\n                                <div className=\"w-2/5 py-1 pl-5\">\r\n                                    <div>\r\n                                        {formatDate(event.startTime, sameDayEvent\r\n                                            ? 'hh:mm'\r\n                                            : 'MMM DD, hh:mm')}\r\n                                    </div>\r\n                                    <div>\r\n                                        {formatDate(\r\n                                            event.endTime,\r\n                                            sameDayEvent\r\n                                                ? 'hh:mm'\r\n                                                : 'MMM DD, hh:mm',\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                                <div\r\n                                    className={tcn(\r\n                                        getEventColor(event.startTime),\r\n                                        'h-full w-[5px]',\r\n                                    )}\r\n                                />\r\n                                <div className=\"flex grow items-center px-2.5 py-1\">\r\n                                    {event.title}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            ))}\r\n        </WithNoData>\r\n    )\r\n}\r\n","import {isArray, mergeWith} from 'lodash-es'\r\n\r\n\r\ninterface Options {\r\n    data: {value: number; name: string; color?: string; formatter?: Highcharts.FormatterCallbackFunction<Highcharts.AxisLabelsFormatterContextObject>}[]\r\n    dataName: string\r\n}\r\n\r\nfunction mergeCustomizer<T>(srcValue: T, objValue: T): T | undefined {\r\n    if (isArray(srcValue)) {\r\n        return objValue\r\n    }\r\n}\r\n\r\n\r\nexport function barOptions({data, dataName}: Options, options?: Partial<Highcharts.Options>): Highcharts.Options {\r\n    return mergeWith({\r\n        chart: {\r\n            type: 'bar',\r\n            backgroundColor: 'transparent',\r\n            width: null,\r\n            height: null,\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                pointPadding: 0.01,\r\n                groupPadding: 0.01,\r\n                borderColor: 'transparent',\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    style: {\r\n                        color: 'var(--wallboard-text-secondary)',\r\n                        fontSize: '14px',\r\n                        fontWeight: 'normal',\r\n                        textOutline: '0',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        title: {\r\n            text: '',\r\n            margin: 0,\r\n        },\r\n        xAxis: {\r\n            categories: data.map(({name}) => name),\r\n            title: {\r\n                text: '',\r\n            },\r\n            labels: {\r\n                style: {\r\n                    color: 'var(--wallboard-text-secondary)',\r\n                    fontSize: '14px',\r\n                    fontWeight: 'normal',\r\n                },\r\n            },\r\n            lineColor: 'transparent',\r\n            tickColor: 'transparent',\r\n            gridLineColor: 'transparent',\r\n        },\r\n        yAxis: {\r\n            title: {text: ''},\r\n            lineColor: 'transparent',\r\n            gridLineColor: 'transparent',\r\n            labels: {format: ' '},\r\n        },\r\n        credits: {\r\n            enabled: false,\r\n        },\r\n        colors: ['#BAD027'],\r\n        legend: {\r\n            enabled: false,\r\n        },\r\n        series: [\r\n            {\r\n                name: dataName,\r\n                data: data.map(({value, color}) => ({y: value, color})),\r\n            },\r\n        ],\r\n    }, options, mergeCustomizer)\r\n}\r\n","import type {SupervisorWidgetConfigGauge} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\ninterface Options {\r\n    value: number\r\n    config: SupervisorWidgetConfigGauge\r\n    inverted: boolean\r\n    getFormattedValue: (value: number) => string\r\n}\r\nexport function gaugeChartOptions({value, config, inverted, getFormattedValue}: Options): Highcharts.Options {\r\n    return {\r\n        chart: {\r\n            type: 'solidgauge',\r\n            animation: false,\r\n            backgroundColor: undefined,\r\n        },\r\n        title: {\r\n            text: `<span id=\"gaugeValue\" style=\"font-size:25px;color: var(--wallboard-widget-gauge-color)\">${getFormattedValue(value)}</span>`,\r\n            align: 'center',\r\n            verticalAlign: 'middle',\r\n        },\r\n        pane: {\r\n            center: ['50%', '60%'],\r\n            size: '100%',\r\n            startAngle: -120,\r\n            endAngle: 120,\r\n            background: [{\r\n                backgroundColor: '#EEE',\r\n                innerRadius: '85%',\r\n                outerRadius: '100%',\r\n                shape: 'arc',\r\n            }],\r\n\r\n        },\r\n        tooltip: {\r\n            enabled: false,\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            max: getMaxPositions(config, inverted),\r\n            title: {\r\n                y: -70,\r\n                text: undefined,\r\n            },\r\n            stops: getGaugeStops(config, inverted),\r\n            lineWidth: 0,\r\n            minorTickInterval: null,\r\n            tickAmount: 2,\r\n            tickPositions: getTickPositions(config, inverted),\r\n            endOnTick: false,\r\n            labels: {\r\n                y: 25,\r\n                style: {\r\n                    color: 'var(--wallboard-widget-gauge-color)',\r\n                },\r\n                padding: 5,\r\n                formatter: function(this: Highcharts.AxisLabelsFormatterContextObject) {\r\n                    return getFormattedValue(this.value)\r\n                },\r\n            },\r\n        },\r\n        credits: {\r\n            enabled: false,\r\n        },\r\n        plotOptions: {\r\n            solidgauge: {\r\n                dataLabels: {\r\n                    y: -30,\r\n                    borderWidth: 0,\r\n                    useHTML: true,\r\n                    allowOverlap: true,\r\n                },\r\n                innerRadius: '85%',\r\n            },\r\n        },\r\n        series: [{\r\n            type: 'solidgauge',\r\n            data: [value],\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n\r\n        }],\r\n        exporting: {enabled: false},\r\n    }\r\n}\r\n\r\n\r\nfunction getGaugeStops({alertThreshold, warningThreshold, maxThreshold}: SupervisorWidgetConfigGauge, inverted: boolean): [number, string][] {\r\n    if (inverted) {\r\n        return [\r\n            [alertThreshold / warningThreshold, '#DF5353'], // red\r\n            [alertThreshold / warningThreshold + (1 - alertThreshold / warningThreshold) / 2, '#DDDF0D'], // yellow\r\n            [1, '#55BF3B'], // green\r\n        ]\r\n    }\r\n    return [\r\n        [(warningThreshold / maxThreshold) / 2, '#55BF3B'], // green\r\n        [warningThreshold / maxThreshold, '#DDDF0D'], // yellow\r\n        [alertThreshold / maxThreshold, '#DF5353'], // red\r\n    ]\r\n}\r\n\r\nfunction getTickPositions(config: SupervisorWidgetConfigGauge, inverted: boolean) {\r\n    return inverted ? [0, config.warningThreshold] : [0, config.maxThreshold]\r\n}\r\n\r\nfunction getMaxPositions(config: SupervisorWidgetConfigGauge, inverted: boolean) {\r\n    return inverted ? config.warningThreshold : config.maxThreshold\r\n}\r\n\r\n","import {isArray, mergeWith} from 'lodash-es'\r\n\r\n\r\ninterface PieChartOptions {\r\n    names: string[]\r\n    values: number[]\r\n    formatter?: (this: Highcharts.TooltipFormatterContextObject) => string\r\n    colors?: string[]\r\n    enableDataLabels?: boolean\r\n    options?: Partial<Highcharts.Options>\r\n}\r\n\r\nfunction mergeCustomizer<T>(srcValue: T, objValue: T): T | undefined {\r\n    if (isArray(srcValue)) {\r\n        return objValue\r\n    }\r\n}\r\n\r\n\r\nexport function pieChartOptions({\r\n    names,\r\n    values,\r\n    formatter,\r\n    enableDataLabels = false,\r\n    options = {},\r\n}: PieChartOptions): Highcharts.Options {\r\n    return mergeWith({\r\n        chart: {type: 'pie', backgroundColor: 'transparent'},\r\n        exporting: {enabled: false},\r\n        plotOptions: {\r\n            pie: {\r\n                allowPointSelect: false,\r\n                cursor: 'pointer',\r\n                innerSize: '60%',\r\n                borderColor: 'tranparent',\r\n                dataLabels: {\r\n                    enabled: enableDataLabels,\r\n                    distance: 20,\r\n                    style: {\r\n                        fontWeight: 'normal',\r\n                        fontSize: '1.5vmin',\r\n                        color: 'var(--wallboard-text-secondary)',\r\n                        fontFamily:\r\n                            'Lato, Helvetica Neue, Arial, Helvetica, sans-serif',\r\n                        textOutline: '0',\r\n                    },\r\n                    formatter,\r\n                },\r\n                showInLegend: true,\r\n            },\r\n        },\r\n        title: {text: '', margin: 0},\r\n        credits: {enabled: false},\r\n        colors: ['#BAD027', '#00A6E6'],\r\n        legend: {\r\n            itemStyle: {\r\n                fontWeight: 'normal',\r\n                fontSize: '1.5vmin',\r\n                color: 'var(--wallboard-chart-legend-color)',\r\n            },\r\n            itemHoverStyle: {\r\n                color: 'var(--wallboard-chart-legend-color-hover)',\r\n            },\r\n        },\r\n        tooltip: {\r\n            formatter,\r\n        },\r\n        series: [\r\n            {\r\n                data: names.map((v, i) => ({name: v, y: values[i]})),\r\n                type: 'pie',\r\n            },\r\n        ],\r\n    }, options, mergeCustomizer)\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigBreakTime} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {pieChartOptions} from '../../charts'\r\nimport {useTenantConfigQuery} from '../../queries'\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const BreakTimeWidget: FC<WidgetProps<SupervisorWidgetConfigBreakTime>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const breakTimeData = useMemo(() => {\r\n        if (!subscriptionData) {\r\n            return undefined\r\n        }\r\n        const breakTimeSubscriptionConfig =\r\n            config.subscription?.req.columns.find(\r\n                c => c.statName === 'agent_total_break_time',\r\n            )\r\n\r\n        if (!breakTimeSubscriptionConfig?.id) {\r\n            return undefined\r\n        }\r\n\r\n        return Number(\r\n            subscriptionData?.agent_grids?.[0].values?.[0]?.[\r\n                +breakTimeSubscriptionConfig.id\r\n            ] ?? 0,\r\n        )\r\n    }, [config.subscription?.req.columns, subscriptionData])\r\n\r\n    const {data: tenantConfig} = useTenantConfigQuery()\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const options: Highcharts.Options = useMemo(() => {\r\n        const agentDailyBreakTime = tenantConfig?.agentConfiguration.agentDailyBreaktime ?? 0\r\n        const usedTimeout = Math.min(Math.round((breakTimeData ?? 0) / 60), agentDailyBreakTime)\r\n        const remainingBreak = Math.max(agentDailyBreakTime - usedTimeout, 0)\r\n\r\n        const dataNames: string[] = [\r\n            t.WALLBOARD_BREAK_TIME_WIDGET.remaining(),\r\n            t.WALLBOARD_BREAK_TIME_WIDGET.used(),\r\n        ]\r\n        const dataValues: number[] = [remainingBreak, usedTimeout]\r\n\r\n        function formatter(\r\n            this: Highcharts.TooltipFormatterContextObject,\r\n        ): string {\r\n            const value = this.y\r\n            const category = this.key\r\n            if (typeof value === 'undefined' || typeof category === 'undefined') {\r\n                return ''\r\n            }\r\n\r\n            return t.WALLBOARD_BREAK_TIME_WIDGET.minutes_label(\r\n                `${value}`,\r\n                `${category}`,\r\n            )\r\n        }\r\n\r\n        return pieChartOptions({\r\n            names: dataNames,\r\n            values: dataValues,\r\n            formatter,\r\n            enableDataLabels: true,\r\n        })\r\n    }, [\r\n        breakTimeData,\r\n        t.WALLBOARD_BREAK_TIME_WIDGET,\r\n        tenantConfig?.agentConfiguration.agentDailyBreaktime,\r\n    ])\r\n\r\n    return (\r\n        <WithNoData noData={breakTimeData === undefined}>\r\n            <Chart options={options} />\r\n        </WithNoData>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport dayjs from 'dayjs'\r\n\r\n\r\nexport const DateTimeWidget: React.FC = () => {\r\n    const [now, setNow] = useState(Date.now())\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setNow(Date.now())\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n    }, [])\r\n\r\n    const date = dayjs(now).format('D MMMM YYYY')\r\n    const time = dayjs(now).format('HH:mm:ss')\r\n\r\n\r\n    return (\r\n        <div className=\"flex h-full w-full flex-col justify-center text-center text-[4vmin]\">\r\n            <div>\r\n                {date}\r\n                <br />\r\n                {time}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {atom} from 'jotai'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\ntype AlertNotifyType = {\r\n    start: () => { stop: () => void }\r\n}\r\n\r\nexport const audioNotifyAtom = atom<AlertNotifyType | null>(null)\r\nexport const updatingWidgetDataAtom = atom<{\r\n    widget: SupervisorWidget | null\r\n    updateWidget: (widget: SupervisorWidget) => void\r\n}>({\r\n            widget: null,\r\n            updateWidget: noop,\r\n        })\r\n","import {getMomentUTC, MS_IN_DAY, MS_IN_HOUR, MS_IN_SECOND} from '@bpinc/lib-helpers'\r\n\r\nimport type {StatsFormatType} from './types'\r\n\r\n\r\nexport function formatStatValue(value: string | number | undefined, format: StatsFormatType | undefined) {\r\n    if (!format) {\r\n        return value?.toString() || ''\r\n    }\r\n    switch (format) {\r\n        case 'percent':\r\n            return presentFormatter(value)\r\n        case 'duration': {\r\n            return durationFormatter(value)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction durationFormatter(value: string | number | undefined) {\r\n    if (!value || value === '') {\r\n        return ''\r\n    }\r\n\r\n    const resultInMs = parseInt(value.toString()) * MS_IN_SECOND\r\n    if (resultInMs >= MS_IN_DAY) {\r\n        return `${Math.floor(resultInMs / MS_IN_DAY)}d ${getMomentUTC(resultInMs, 'HH:mm:ss')}`\r\n    } else if (resultInMs >= MS_IN_HOUR) {\r\n        return getMomentUTC(resultInMs, 'HH:mm:ss')\r\n    } else {\r\n        return getMomentUTC(resultInMs, 'mm:ss')\r\n    }\r\n}\r\n\r\nfunction presentFormatter(value: string | number | undefined = 0) {\r\n    if (!value || value === '') {\r\n        return ''\r\n    }\r\n    const numberValue = parseInt(value.toString())\r\n\r\n    if (numberValue > 0 && numberValue < 1) {\r\n        return `${numberValue * 100}%`\r\n    }\r\n    return `${numberValue}%`\r\n}\r\n","import type {StatsConfigType} from './types'\r\n\r\n\r\nexport const STATS_CONFIG: StatsConfigType = {\r\n    statsSingle: {\r\n        agent_cm1: {\r\n            localizationKey: 'agent_cm1_name',\r\n        },\r\n        agent_cm2: {\r\n            localizationKey: 'agent_cm2_name',\r\n        },\r\n        agent_csat: {\r\n            localizationKey: 'agent_csat_name',\r\n        },\r\n        agent_fcr: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_fcr_name',\r\n        },\r\n        agent_nps: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_nps_name',\r\n        },\r\n        agent_average_idle_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_idle_time_name',\r\n        },\r\n        agent_average_preview_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_preview_time_name',\r\n        },\r\n        agent_occupancy: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_occupancy_name',\r\n        },\r\n        agents_busy: {\r\n            localizationKey: 'agents_busy_name',\r\n        },\r\n        agents_busy_on_service: {\r\n            localizationKey: 'agents_busy_on_service_name',\r\n        },\r\n        agents_logged: {\r\n            localizationKey: 'agents_logged_name',\r\n        },\r\n        agents_not_ready: {\r\n            localizationKey: 'agents_not_ready_name',\r\n        },\r\n        agents_ready: {\r\n            localizationKey: 'agents_ready_name',\r\n        },\r\n        agents_in_wrap_up: {\r\n            localizationKey: 'agents_in_wrap_up_name',\r\n        },\r\n        calls_average_handling_time_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'calls_average_handling_time_per_day_name',\r\n        },\r\n        calls_dispositions_per_day: {\r\n            localizationKey: 'calls_dispositions_per_day_name',\r\n        },\r\n        calls_dispositions_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'calls_dispositions_ratio_per_day_name',\r\n        },\r\n        in_calls_received_per_day: {\r\n            localizationKey: 'in_calls_received_per_day_name',\r\n        },\r\n        in_calls_ringing: {\r\n            localizationKey: 'in_calls_ringing_name',\r\n        },\r\n        in_average_speed_of_answer: {\r\n            format: 'duration',\r\n            localizationKey: 'in_average_speed_of_answer_name',\r\n        },\r\n        in_callbacks_requested_per_day: {\r\n            localizationKey: 'in_callbacks_requested_per_day_name',\r\n        },\r\n        in_callbacks_waiting: {\r\n            localizationKey: 'in_callbacks_waiting_name',\r\n        },\r\n        in_calls_abandoned_in_ivr_per_day: {\r\n            localizationKey: 'in_calls_abandoned_in_ivr_per_day_name',\r\n        },\r\n        in_calls_abandoned_in_queue_per_day: {\r\n            localizationKey: 'in_calls_abandoned_in_queue_per_day_name',\r\n        },\r\n        in_calls_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        in_calls_abandoned_percent_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_abandoned_percent_per_day_name',\r\n        },\r\n        in_calls_abandoned_ringing_per_day: {\r\n            localizationKey: 'in_calls_abandoned_ringing_per_day_name',\r\n        },\r\n        in_calls_abandoned_total_per_day: {\r\n            localizationKey: 'in_calls_abandoned_total_per_day_name',\r\n        },\r\n        in_calls_active_on_agents: {\r\n            localizationKey: 'in_calls_active_on_agents_name',\r\n        },\r\n        in_calls_disconnected_talking_per_day: {\r\n            localizationKey: 'in_calls_disconnected_talking_per_day_name',\r\n        },\r\n        in_calls_dropped_in_ivr_per_day: {\r\n            localizationKey: 'in_calls_dropped_in_ivr_per_day_name',\r\n        },\r\n        in_calls_dropped_in_queue_per_day: {\r\n            localizationKey: 'in_calls_dropped_in_queue_per_day_name',\r\n        },\r\n        in_calls_dropped_ringing_per_day: {\r\n            localizationKey: 'in_calls_dropped_ringing_per_day_name',\r\n        },\r\n        in_calls_dropped_talking_per_day: {\r\n            localizationKey: 'in_calls_dropped_talking_per_day_name',\r\n        },\r\n        in_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_average_per_day_name',\r\n        },\r\n        in_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_total_per_day_name',\r\n        },\r\n        in_calls_first_time_handled_per_day: {\r\n            localizationKey: 'in_calls_first_time_handled_per_day_name',\r\n        },\r\n        in_calls_first_time_queued_per_day: {\r\n            localizationKey: 'in_calls_first_time_queued_per_day_name',\r\n        },\r\n        in_calls_handled_per_day: {\r\n            localizationKey: 'in_calls_handled_per_day_name',\r\n        },\r\n        in_calls_handled_percent_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_handled_percent_per_day_name',\r\n        },\r\n        in_calls_in_ivr: {\r\n            localizationKey: 'in_calls_in_ivr_name',\r\n        },\r\n        in_calls_in_progress: {\r\n            localizationKey: 'in_calls_in_progress_name',\r\n        },\r\n        in_calls_first_time_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_first_time_put_on_hold_per_day_name',\r\n        },\r\n        in_calls_queued_per_day: {\r\n            localizationKey: 'in_calls_queued_per_day_name',\r\n        },\r\n        in_calls_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_put_on_hold_per_day_name',\r\n        },\r\n        in_calls_rejected_per_day: {\r\n            localizationKey: 'in_calls_rejected_per_day_name',\r\n        },\r\n        in_calls_routed_per_day: {\r\n            localizationKey: 'in_calls_routed_per_day_name',\r\n        },\r\n        in_calls_self_serviced_per_day: {\r\n            localizationKey: 'in_calls_self_serviced_per_day_name',\r\n        },\r\n        in_calls_short_abandoned_in_queue_per_day: {\r\n            localizationKey: 'in_calls_short_abandoned_in_queue_per_day_name',\r\n        },\r\n        in_calls_short_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_short_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        in_calls_transferred_per_day: {\r\n            localizationKey: 'in_calls_transferred_per_day_name',\r\n        },\r\n        in_email_carried_over: {\r\n            localizationKey: 'in_email_carried_over_name',\r\n        },\r\n        in_email_handled_new_per_day: {\r\n            localizationKey: 'in_email_handled_new_per_day_name',\r\n        },\r\n        in_email_processed_noreply_per_day: {\r\n            localizationKey: 'in_email_processed_noreply_per_day_name',\r\n        },\r\n        in_email_processed_replied_per_day: {\r\n            localizationKey: 'in_email_processed_replied_per_day_name',\r\n        },\r\n        in_email_received_new_per_day: {\r\n            localizationKey: 'in_email_received_new_per_day_name',\r\n        },\r\n        in_email_rejected_per_day: {\r\n            localizationKey: 'in_email_rejected_per_day_name',\r\n        },\r\n        in_email_waiting_in_personal_queues: {\r\n            localizationKey: 'in_email_waiting_in_personal_queues_name',\r\n        },\r\n        in_emails_joined_existing_cases: {\r\n            localizationKey: 'in_emails_joined_existing_cases_name',\r\n        },\r\n        in_ewt: {\r\n            format: 'duration',\r\n            localizationKey: 'in_ewt_name',\r\n        },\r\n        in_max_wait_time: {\r\n            format: 'duration',\r\n            localizationKey: 'in_max_wait_time_name',\r\n        },\r\n        in_service_change_received_per_day: {\r\n            localizationKey: 'in_service_change_received_per_day_name',\r\n        },\r\n        in_service_changed_per_day: {\r\n            localizationKey: 'in_service_changed_per_day_name',\r\n        },\r\n        in_transfers_received_per_day: {\r\n            localizationKey: 'in_transfers_received_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_ivr_per_day: {\r\n            localizationKey: 'out_calls_abandoned_in_ivr_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_ivr_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_in_ivr_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_queue_per_day: {\r\n            localizationKey: 'out_calls_abandoned_in_queue_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_per_day: {\r\n            localizationKey: 'out_calls_abandoned_per_day_name',\r\n        },\r\n        out_calls_abandoned_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_ringing_per_day: {\r\n            localizationKey: 'out_calls_abandoned_ringing_per_day_name',\r\n        },\r\n        out_calls_active_on_agents: {\r\n            localizationKey: 'out_calls_active_on_agents_name',\r\n        },\r\n        out_calls_answered_per_day: {\r\n            localizationKey: 'out_calls_answered_per_day_name',\r\n        },\r\n        out_calls_answered_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_answered_ratio_per_day_name',\r\n        },\r\n        out_calls_current_call_rate: {\r\n            localizationKey: 'out_calls_current_call_rate_name',\r\n        },\r\n        out_calls_disconnected_talking_per_day: {\r\n            localizationKey: 'out_calls_disconnected_talking_per_day_name',\r\n        },\r\n        out_calls_dropped_in_ivr_per_day: {\r\n            localizationKey: 'out_calls_dropped_in_ivr_per_day_name',\r\n        },\r\n        out_calls_dropped_in_queue_per_day: {\r\n            localizationKey: 'out_calls_dropped_in_queue_per_day_name',\r\n        },\r\n        out_calls_dropped_ringing_per_day: {\r\n            localizationKey: 'out_calls_dropped_ringing_per_day_name',\r\n        },\r\n        out_calls_dropped_talking_per_day: {\r\n            localizationKey: 'out_calls_dropped_talking_per_day_name',\r\n        },\r\n        out_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_average_per_day_name',\r\n        },\r\n        out_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_total_per_day_name',\r\n        },\r\n        out_calls_failed_per_day: {\r\n            localizationKey: 'out_calls_failed_per_day_name',\r\n        },\r\n        out_calls_handled_per_day: {\r\n            localizationKey: 'out_calls_handled_per_day_name',\r\n        },\r\n        out_calls_in_ivr: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_in_ivr_name',\r\n        },\r\n        out_calls_in_progress: {\r\n            localizationKey: 'out_calls_in_progress_name',\r\n        },\r\n        out_calls_placed_per_day: {\r\n            localizationKey: 'out_calls_placed_per_day_name',\r\n        },\r\n        out_calls_queued_per_day: {\r\n            localizationKey: 'out_calls_queued_per_day_name',\r\n        },\r\n        out_calls_rejected_per_day: {\r\n            localizationKey: 'out_calls_rejected_per_day_name',\r\n        },\r\n        out_calls_ringing: {\r\n            localizationKey: 'out_calls_ringing_name',\r\n        },\r\n        out_calls_routed_per_day: {\r\n            localizationKey: 'out_calls_routed_per_day_name',\r\n        },\r\n        out_calls_self_serviced_per_day: {\r\n            localizationKey: 'out_calls_self_serviced_per_day_name',\r\n        },\r\n        out_calls_transferred_per_day: {\r\n            localizationKey: 'out_calls_transferred_per_day_name',\r\n        },\r\n        out_calls_unattended_per_day: {\r\n            localizationKey: 'out_calls_unattended_per_day_name',\r\n        },\r\n        out_calls_unattended_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_unattended_ratio_per_day_name',\r\n        },\r\n        out_calls_waiting: {\r\n            localizationKey: 'out_calls_waiting_name',\r\n        },\r\n        out_campaign_duration_forecast: {\r\n            format: 'duration',\r\n            localizationKey: 'out_campaign_duration_forecast_name',\r\n        },\r\n        records_accepted_per_day: {\r\n            localizationKey: 'records_accepted_per_day_name',\r\n        },\r\n        records_attempted_per_day: {\r\n            localizationKey: 'records_attempted_per_day_name',\r\n        },\r\n        records_attempted_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_attempted_ratio_per_day_name',\r\n        },\r\n        records_completed: {\r\n            localizationKey: 'records_completed_name',\r\n        },\r\n        records_completed_per_day: {\r\n            localizationKey: 'records_completed_per_day_name',\r\n        },\r\n        records_completed_ratio: {\r\n            format: 'percent',\r\n            localizationKey: 'records_completed_ratio_name',\r\n        },\r\n        records_completed_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_completed_ratio_per_day_name',\r\n        },\r\n        records_dialable: {\r\n            localizationKey: 'records_dialable_name',\r\n            alertInverted: true,\r\n        },\r\n        records_in_dnc: {\r\n            localizationKey: 'records_in_dnc_name',\r\n        },\r\n        records_out_of_quota: {\r\n            localizationKey: 'records_out_of_quota_name',\r\n        },\r\n        records_remaining: {\r\n            localizationKey: 'records_remaining_name',\r\n        },\r\n        records_skipped_per_day: {\r\n            localizationKey: 'records_skipped_per_day_name',\r\n        },\r\n        records_skipped_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_skipped_ratio_per_day_name',\r\n        },\r\n        records_total: {\r\n            localizationKey: 'records_total_name',\r\n        },\r\n        records_with_assigned_agents_completed: {\r\n            localizationKey: 'records_with_assigned_agents_completed_name',\r\n        },\r\n        records_with_assigned_agents_remaining: {\r\n            localizationKey: 'records_with_assigned_agents_remaining_name',\r\n        },\r\n        service_level: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_name',\r\n        },\r\n        service_level_target: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_target_name',\r\n        },\r\n        service_level_threshold_time: {\r\n            localizationKey: 'service_level_threshold_time_name',\r\n        },\r\n        service_level_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_per_day_name',\r\n        },\r\n        in_calls_waiting: {\r\n            localizationKey: 'in_calls_waiting_name',\r\n        },\r\n    },\r\n    statsAgent: {\r\n        acd_next_state: {\r\n            align: 'left',\r\n            localizationKey: 'acd_next_state_name',\r\n        },\r\n        acd_state: {\r\n            align: 'left',\r\n            localizationKey: 'acd_state_name',\r\n        },\r\n        active_item_direction: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_direction_name',\r\n        },\r\n        active_item_hold_duration: {\r\n            format: 'duration',\r\n            localizationKey: 'active_item_hold_duration_name',\r\n        },\r\n        active_item_is_flagged: {\r\n            localizationKey: 'active_item_is_flagged_name',\r\n        },\r\n        active_item_media_type: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_media_type_name',\r\n        },\r\n        active_item_party_name: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_party_name_name',\r\n        },\r\n        active_item_qm_monitor_mode: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_qm_monitor_mode_name',\r\n        },\r\n        active_item_sentiment: {\r\n            localizationKey: 'active_item_sentiment_name',\r\n        },\r\n        active_item_service_name: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_service_name_name',\r\n        },\r\n        active_item_state: {\r\n            align: 'left',\r\n            localizationKey: 'active_item_state_name',\r\n        },\r\n        active_item_talk_duration: {\r\n            format: 'duration',\r\n            localizationKey: 'active_item_talk_duration_name',\r\n        },\r\n        agent_cm1: {\r\n            localizationKey: 'agent_cm1_name',\r\n        },\r\n        agent_cm2: {\r\n            localizationKey: 'agent_cm2_name',\r\n        },\r\n        agent_csat: {\r\n            localizationKey: 'agent_csat_name',\r\n        },\r\n        agent_fcr: {\r\n            localizationKey: 'agent_fcr_name',\r\n        },\r\n        agent_nps: {\r\n            localizationKey: 'agent_nps_name',\r\n        },\r\n        agent_average_idle_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_idle_time_name',\r\n        },\r\n        agent_average_preview_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_preview_time_name',\r\n        },\r\n        agent_calendar_overdue: {\r\n            localizationKey: 'agent_calendar_overdue_name',\r\n        },\r\n        agent_calendar_pending: {\r\n            localizationKey: 'agent_calendar_pending_name',\r\n        },\r\n        agent_occupancy: {\r\n            localizationKey: 'agent_occupancy_name',\r\n        },\r\n        agent_preview_duration: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_preview_duration_name',\r\n        },\r\n        agent_success_ratio_per_day: {\r\n            localizationKey: 'agent_success_ratio_per_day_name',\r\n        },\r\n        agent_total_break_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_total_break_time_name',\r\n        },\r\n        calls_average_handling_time_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'calls_average_handling_time_per_day_name',\r\n        },\r\n        calls_dispositions_per_day: {\r\n            localizationKey: 'calls_dispositions_per_day_name',\r\n        },\r\n        calls_dispositions_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'calls_dispositions_ratio_per_day_name',\r\n        },\r\n        extension: {\r\n            localizationKey: 'extension_name',\r\n        },\r\n        first_last_name: {\r\n            align: 'left',\r\n            localizationKey: 'first_last_name_name',\r\n        },\r\n        in_calls_active_on_agents: {\r\n            localizationKey: 'in_calls_active_on_agents_name',\r\n        },\r\n        in_calls_dropped_talking_per_day: {\r\n            localizationKey: 'in_calls_dropped_talking_per_day_name',\r\n        },\r\n        in_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_average_per_day_name',\r\n        },\r\n        in_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_total_per_day_name',\r\n        },\r\n        in_calls_first_time_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_first_time_put_on_hold_per_day_name',\r\n        },\r\n        in_calls_handled_per_day: {\r\n            localizationKey: 'in_calls_handled_per_day_name',\r\n        },\r\n        in_calls_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_put_on_hold_per_day_name',\r\n        },\r\n        in_calls_rejected_per_day: {\r\n            localizationKey: 'in_calls_rejected_per_day_name',\r\n        },\r\n        in_calls_transferred_per_day: {\r\n            localizationKey: 'in_calls_transferred_per_day_name',\r\n        },\r\n        in_email_handled_new_per_day: {\r\n            localizationKey: 'in_email_handled_new_per_day_name',\r\n        },\r\n        in_email_offered_per_day: {\r\n            localizationKey: 'in_email_offered_per_day_name',\r\n        },\r\n        in_email_processed_noreply_per_day: {\r\n            localizationKey: 'in_email_processed_noreply_per_day_name',\r\n        },\r\n        in_email_processed_replied_per_day: {\r\n            localizationKey: 'in_email_processed_replied_per_day_name',\r\n        },\r\n        in_email_pulled_per_day: {\r\n            localizationKey: 'in_email_pulled_per_day_name',\r\n        },\r\n        in_email_rejected_per_day: {\r\n            localizationKey: 'in_email_rejected_per_day_name',\r\n        },\r\n        in_email_waiting_in_personal_queues: {\r\n            localizationKey: 'in_email_waiting_in_personal_queues_name',\r\n        },\r\n        in_service_changed_per_day: {\r\n            localizationKey: 'in_service_changed_per_day_name',\r\n        },\r\n        in_transfers_received_per_day: {\r\n            localizationKey: 'in_transfers_received_per_day_name',\r\n        },\r\n        last_first_name: {\r\n            align: 'left',\r\n            localizationKey: 'last_first_name_name',\r\n        },\r\n        login_time: {\r\n            format: 'duration',\r\n            localizationKey: 'login_time_name',\r\n        },\r\n        next_reason: {\r\n            align: 'left',\r\n            localizationKey: 'next_reason_name',\r\n        },\r\n        out_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_average_per_day_name',\r\n        },\r\n        out_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_total_per_day_name',\r\n        },\r\n        out_calls_handled_per_day: {\r\n            localizationKey: 'out_calls_handled_per_day_name',\r\n        },\r\n        out_calls_rejected_per_day: {\r\n            localizationKey: 'out_calls_rejected_per_day_name',\r\n        },\r\n        out_email_waiting_in_personal_queues: {\r\n            localizationKey: 'out_email_waiting_in_personal_queues_name',\r\n        },\r\n        reason: {\r\n            align: 'left',\r\n            localizationKey: 'reason_name',\r\n        },\r\n        records_accepted_per_day: {\r\n            localizationKey: 'records_accepted_per_day_name',\r\n        },\r\n        records_skipped_per_day: {\r\n            localizationKey: 'records_skipped_per_day_name',\r\n        },\r\n        records_skipped_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_skipped_ratio_per_day_name',\r\n        },\r\n        state_duration: {\r\n            format: 'duration',\r\n            localizationKey: 'state_duration_name',\r\n        },\r\n        team_name: {\r\n            align: 'left',\r\n            localizationKey: 'team_name_name',\r\n        },\r\n        agent_idle_time: {\r\n            align: 'left',\r\n            localizationKey: 'agent_idle_time_name',\r\n        },\r\n        calls_average_acw_time_per_day: {\r\n            align: 'left',\r\n            localizationKey: 'calls_average_acw_time_per_day_name',\r\n        },\r\n    },\r\n    statsService: {\r\n        agent_cm1: {\r\n            localizationKey: 'agent_cm1_name',\r\n        },\r\n        agent_cm2: {\r\n            localizationKey: 'agent_cm2_name',\r\n        },\r\n        agent_csat: {\r\n            localizationKey: 'agent_csat_name',\r\n        },\r\n        agent_fcr: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_fcr_name',\r\n        },\r\n        agent_nps: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_nps_name',\r\n        },\r\n        agent_average_idle_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_idle_time_name',\r\n        },\r\n        agent_average_preview_time: {\r\n            format: 'duration',\r\n            localizationKey: 'agent_average_preview_time_name',\r\n        },\r\n        agent_occupancy: {\r\n            format: 'percent',\r\n            localizationKey: 'agent_occupancy_name',\r\n        },\r\n        agents_busy: {\r\n            localizationKey: 'agents_busy_name',\r\n        },\r\n        agents_busy_on_service: {\r\n            localizationKey: 'agents_busy_on_service_name',\r\n        },\r\n        agents_logged: {\r\n            localizationKey: 'agents_logged_name',\r\n        },\r\n        agents_not_ready: {\r\n            localizationKey: 'agents_not_ready_name',\r\n        },\r\n        agents_ready: {\r\n            localizationKey: 'agents_ready_name',\r\n        },\r\n        agents_in_wrap_up: {\r\n            localizationKey: 'agents_in_wrap_up_name',\r\n        },\r\n        calls_average_handling_time_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'calls_average_handling_time_per_day_name',\r\n        },\r\n        calls_dispositions_per_day: {\r\n            localizationKey: 'calls_dispositions_per_day_name',\r\n        },\r\n        calls_dispositions_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'calls_dispositions_ratio_per_day_name',\r\n        },\r\n        in_average_speed_of_answer: {\r\n            format: 'duration',\r\n            localizationKey: 'in_average_speed_of_answer_name',\r\n        },\r\n        in_calls_first_time_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_first_time_put_on_hold_per_day_name',\r\n        },\r\n        in_callbacks_requested_per_day: {\r\n            localizationKey: 'in_callbacks_requested_per_day_name',\r\n        },\r\n        in_callbacks_waiting: {\r\n            localizationKey: 'in_callbacks_waiting_name',\r\n        },\r\n        in_calls_abandoned_in_ivr_per_day: {\r\n            localizationKey: 'in_calls_abandoned_in_ivr_per_day_name',\r\n        },\r\n        in_calls_abandoned_in_queue_per_day: {\r\n            localizationKey: 'in_calls_abandoned_in_queue_per_day_name',\r\n        },\r\n        in_calls_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        in_calls_abandoned_percent_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_abandoned_percent_per_day_name',\r\n        },\r\n        in_calls_abandoned_ringing_per_day: {\r\n            localizationKey: 'in_calls_abandoned_ringing_per_day_name',\r\n        },\r\n        in_calls_abandoned_total_per_day: {\r\n            localizationKey: 'in_calls_abandoned_total_per_day_name',\r\n        },\r\n        in_calls_active_on_agents: {\r\n            localizationKey: 'in_calls_active_on_agents_name',\r\n        },\r\n        in_calls_disconnected_talking_per_day: {\r\n            localizationKey: 'in_calls_disconnected_talking_per_day_name',\r\n        },\r\n        in_calls_dropped_in_ivr_per_day: {\r\n            localizationKey: 'in_calls_dropped_in_ivr_per_day_name',\r\n        },\r\n        in_calls_dropped_in_queue_per_day: {\r\n            localizationKey: 'in_calls_dropped_in_queue_per_day_name',\r\n        },\r\n        in_calls_dropped_ringing_per_day: {\r\n            localizationKey: 'in_calls_dropped_ringing_per_day_name',\r\n        },\r\n        in_calls_dropped_talking_per_day: {\r\n            localizationKey: 'in_calls_dropped_talking_per_day_name',\r\n        },\r\n        in_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_average_per_day_name',\r\n        },\r\n        in_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'in_calls_duration_total_per_day_name',\r\n        },\r\n        in_calls_first_time_handled_per_day: {\r\n            localizationKey: 'in_calls_first_time_handled_per_day_name',\r\n        },\r\n        in_calls_first_time_queued_per_day: {\r\n            localizationKey: 'in_calls_first_time_queued_per_day_name',\r\n        },\r\n        in_calls_handled_per_day: {\r\n            localizationKey: 'in_calls_handled_per_day_name',\r\n        },\r\n        in_calls_handled_percent_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_handled_percent_per_day_name',\r\n        },\r\n        in_calls_in_ivr: {\r\n            localizationKey: 'in_calls_in_ivr_name',\r\n        },\r\n        in_calls_in_progress: {\r\n            localizationKey: 'in_calls_in_progress_name',\r\n        },\r\n        in_calls_put_on_hold_per_day: {\r\n            localizationKey: 'in_calls_put_on_hold_per_day_name',\r\n        },\r\n        in_calls_queued_per_day: {\r\n            localizationKey: 'in_calls_queued_per_day_name',\r\n        },\r\n        in_calls_received_per_day: {\r\n            localizationKey: 'in_calls_received_per_day_name',\r\n        },\r\n        in_calls_rejected_per_day: {\r\n            localizationKey: 'in_calls_rejected_per_day_name',\r\n        },\r\n        in_calls_ringing: {\r\n            localizationKey: 'in_calls_ringing_name',\r\n        },\r\n        in_calls_routed_per_day: {\r\n            localizationKey: 'in_calls_routed_per_day_name',\r\n        },\r\n        in_calls_self_serviced_per_day: {\r\n            localizationKey: 'in_calls_self_serviced_per_day_name',\r\n        },\r\n        in_calls_short_abandoned_in_queue_per_day: {\r\n            localizationKey: 'in_calls_short_abandoned_in_queue_per_day_name',\r\n        },\r\n        in_calls_short_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'in_calls_short_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        in_calls_transferred_per_day: {\r\n            localizationKey: 'in_calls_transferred_per_day_name',\r\n        },\r\n        in_calls_waiting: {\r\n            localizationKey: 'in_calls_waiting_name',\r\n        },\r\n        in_email_carried_over: {\r\n            localizationKey: 'in_email_carried_over_name',\r\n        },\r\n        in_email_carried_over_new: {\r\n            localizationKey: 'in_email_carried_over_new_name',\r\n        },\r\n        in_email_handled_new_per_day: {\r\n            localizationKey: 'in_email_handled_new_per_day_name',\r\n        },\r\n        in_email_processed_noreply_per_day: {\r\n            localizationKey: 'in_email_processed_noreply_per_day_name',\r\n        },\r\n        in_email_processed_replied_per_day: {\r\n            localizationKey: 'in_email_processed_replied_per_day_name',\r\n        },\r\n        in_email_received_new_per_day: {\r\n            localizationKey: 'in_email_received_new_per_day_name',\r\n        },\r\n        in_email_rejected_per_day: {\r\n            localizationKey: 'in_email_rejected_per_day_name',\r\n        },\r\n        in_email_waiting_in_personal_queues: {\r\n            localizationKey: 'in_email_waiting_in_personal_queues_name',\r\n        },\r\n        in_emails_joined_existing_cases: {\r\n            localizationKey: 'in_emails_joined_existing_cases_name',\r\n        },\r\n        in_ewt: {\r\n            format: 'duration',\r\n            localizationKey: 'in_ewt_name',\r\n        },\r\n        in_max_wait_time: {\r\n            format: 'duration',\r\n            localizationKey: 'in_max_wait_time_name',\r\n        },\r\n        in_service_changed_per_day: {\r\n            localizationKey: 'in_service_changed_per_day_name',\r\n        },\r\n        in_transfers_received_per_day: {\r\n            localizationKey: 'in_transfers_received_per_day_name',\r\n        },\r\n        name: {\r\n            align: 'left',\r\n            localizationKey: 'name_name',\r\n        },\r\n        out_calls_abandoned_in_ivr_per_day: {\r\n            localizationKey: 'out_calls_abandoned_in_ivr_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_ivr_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_in_ivr_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_queue_per_day: {\r\n            localizationKey: 'out_calls_abandoned_in_queue_per_day_name',\r\n        },\r\n        out_calls_abandoned_in_queue_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_in_queue_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_per_day: {\r\n            localizationKey: 'out_calls_abandoned_per_day_name',\r\n        },\r\n        out_calls_abandoned_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_abandoned_ratio_per_day_name',\r\n        },\r\n        out_calls_abandoned_ringing_per_day: {\r\n            localizationKey: 'out_calls_abandoned_ringing_per_day_name',\r\n        },\r\n        out_calls_active_on_agents: {\r\n            localizationKey: 'out_calls_active_on_agents_name',\r\n        },\r\n        out_calls_answered_per_day: {\r\n            localizationKey: 'out_calls_answered_per_day_name',\r\n        },\r\n        out_calls_answered_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_answered_ratio_per_day_name',\r\n        },\r\n        out_calls_current_call_rate: {\r\n            localizationKey: 'out_calls_current_call_rate_name',\r\n        },\r\n        out_calls_disconnected_talking_per_day: {\r\n            localizationKey: 'out_calls_disconnected_talking_per_day_name',\r\n        },\r\n        out_calls_dropped_in_ivr_per_day: {\r\n            localizationKey: 'out_calls_dropped_in_ivr_per_day_name',\r\n        },\r\n        out_calls_dropped_in_queue_per_day: {\r\n            localizationKey: 'out_calls_dropped_in_queue_per_day_name',\r\n        },\r\n        out_calls_dropped_ringing_per_day: {\r\n            localizationKey: 'out_calls_dropped_ringing_per_day_name',\r\n        },\r\n        out_calls_dropped_talking_per_day: {\r\n            localizationKey: 'out_calls_dropped_talking_per_day_name',\r\n        },\r\n        out_calls_duration_average_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_average_per_day_name',\r\n        },\r\n        out_calls_duration_total_per_day: {\r\n            format: 'duration',\r\n            localizationKey: 'out_calls_duration_total_per_day_name',\r\n        },\r\n        out_calls_failed_per_day: {\r\n            localizationKey: 'out_calls_failed_per_day_name',\r\n        },\r\n        out_calls_handled_per_day: {\r\n            localizationKey: 'out_calls_handled_per_day_name',\r\n        },\r\n        out_calls_in_ivr: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_in_ivr_name',\r\n        },\r\n        out_calls_in_progress: {\r\n            localizationKey: 'out_calls_in_progress_name',\r\n        },\r\n        out_calls_placed_per_day: {\r\n            localizationKey: 'out_calls_placed_per_day_name',\r\n        },\r\n        out_calls_queued_per_day: {\r\n            localizationKey: 'out_calls_queued_per_day_name',\r\n        },\r\n        out_calls_rejected_per_day: {\r\n            localizationKey: 'out_calls_rejected_per_day_name',\r\n        },\r\n        out_calls_ringing: {\r\n            localizationKey: 'out_calls_ringing_name',\r\n        },\r\n        out_calls_routed_per_day: {\r\n            localizationKey: 'out_calls_routed_per_day_name',\r\n        },\r\n        out_calls_self_serviced_per_day: {\r\n            localizationKey: 'out_calls_self_serviced_per_day_name',\r\n        },\r\n        out_calls_transferred_per_day: {\r\n            localizationKey: 'out_calls_transferred_per_day_name',\r\n        },\r\n        out_calls_unattended_per_day: {\r\n            localizationKey: 'out_calls_unattended_per_day_name',\r\n        },\r\n        out_calls_unattended_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'out_calls_unattended_ratio_per_day_name',\r\n        },\r\n        out_calls_waiting: {\r\n            localizationKey: 'out_calls_waiting_name',\r\n        },\r\n        out_campaign_duration_forecast: {\r\n            format: 'duration',\r\n            localizationKey: 'out_campaign_duration_forecast_name',\r\n        },\r\n        records_accepted_per_day: {\r\n            localizationKey: 'records_accepted_per_day_name',\r\n        },\r\n        records_attempted_per_day: {\r\n            localizationKey: 'records_attempted_per_day_name',\r\n        },\r\n        records_attempted_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_attempted_ratio_per_day_name',\r\n        },\r\n        records_completed: {\r\n            localizationKey: 'records_completed_name',\r\n        },\r\n        records_completed_per_day: {\r\n            localizationKey: 'records_completed_per_day_name',\r\n        },\r\n        records_completed_ratio: {\r\n            format: 'percent',\r\n            localizationKey: 'records_completed_ratio_name',\r\n        },\r\n        records_completed_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_completed_ratio_per_day_name',\r\n        },\r\n        records_dialable: {\r\n            localizationKey: 'records_dialable_name',\r\n            alertInverted: true,\r\n        },\r\n        records_in_dnc: {\r\n            localizationKey: 'records_in_dnc_name',\r\n        },\r\n        records_out_of_quota: {\r\n            localizationKey: 'records_out_of_quota_name',\r\n        },\r\n        records_remaining: {\r\n            localizationKey: 'records_remaining_name',\r\n        },\r\n        records_skipped_per_day: {\r\n            localizationKey: 'records_skipped_per_day_name',\r\n        },\r\n        records_skipped_ratio_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'records_skipped_ratio_per_day_name',\r\n        },\r\n        records_total: {\r\n            localizationKey: 'records_total_name',\r\n        },\r\n        records_with_assigned_agents_completed: {\r\n            localizationKey: 'records_with_assigned_agents_completed_name',\r\n        },\r\n        records_with_assigned_agents_remaining: {\r\n            localizationKey: 'records_with_assigned_agents_remaining_name',\r\n        },\r\n        service_level: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_name',\r\n        },\r\n        service_level_target: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_target_name',\r\n        },\r\n        service_level_threshold_time: {\r\n            localizationKey: 'service_level_threshold_time_name',\r\n        },\r\n        service_level_per_day: {\r\n            format: 'percent',\r\n            localizationKey: 'service_level_per_day_name',\r\n        },\r\n        calls_average_acw_time_per_day: {\r\n            localizationKey: 'calls_average_acw_time_per_day_name',\r\n        },\r\n    },\r\n    custom: {\r\n        handled: {localizationKey: 'handled'},\r\n        averageHandlingTime: {localizationKey: 'average_handling_time'},\r\n        successfulInteraction: {localizationKey: 'successful_interaction'},\r\n    },\r\n    timeSeriesServices: {\r\n        in_calls_waiting: {\r\n            localizationKey: 'in_calls_waiting',\r\n        },\r\n        in_calls_in_progress: {\r\n            localizationKey: 'in_calls_in_progress',\r\n        },\r\n        service_level: {\r\n            localizationKey: 'service_level',\r\n        },\r\n        in_calls_in_ivr: {\r\n            localizationKey: 'in_calls_in_ivr',\r\n        },\r\n        in_calls_received_per_day: {\r\n            localizationKey: 'in_calls_received_per_day',\r\n        },\r\n        in_calls_abandoned_total_per_day: {\r\n            localizationKey: 'in_calls_abandoned_total_per_day',\r\n        },\r\n    },\r\n    timeSeriesTeams: {\r\n        agents_busy: {\r\n            localizationKey: 'agents_busy',\r\n        },\r\n        agents_logged: {\r\n            localizationKey: 'agents_logged',\r\n        },\r\n        agents_ready: {\r\n            localizationKey: 'agents_ready',\r\n        },\r\n        agents_not_ready: {\r\n            localizationKey: 'agents_not_ready',\r\n        },\r\n        agent_occupancy: {\r\n            localizationKey: 'agent_occupancy',\r\n        },\r\n    },\r\n}\r\n","import type {\r\n    AgentStatsType,\r\n    ServiceStatsType,\r\n    TimeSeriesStatsServices,\r\n    TimeSeriesStatsTeams,\r\n    TotalStatsType,\r\n} from '@bpinc/lib-widgets-urls'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\n\r\n\r\ntype CustomUserStatType = 'handled' | 'averageHandlingTime' | 'successfulInteraction'\r\ntype AllStatsType = TotalStatsType | AgentStatsType | ServiceStatsType | CustomUserStatType\r\nexport type StatsFormatType = 'duration' | 'percent'\r\n\r\nexport type StatsConfigType = {\r\n    statsSingle: StatsType<TotalStatsType, MessagesDeclaration['WALLBOARD_STATS_SINGLE']>\r\n    statsAgent: StatsType<AgentStatsType, MessagesDeclaration['WALLBOARD_STATS_AGENT']>\r\n    statsService: StatsType<ServiceStatsType, MessagesDeclaration['WALLBOARD_STATS_SERVICE']>\r\n    custom: StatsType<CustomUserStatType, MessagesDeclaration['WALLBOARD_STATS_CUSTOM']>\r\n    timeSeriesServices: StatsType<TimeSeriesStatsServices, MessagesDeclaration['WALLBOARD_STATS_TIME_SERIES_SERVICES']>\r\n    timeSeriesTeams: StatsType<TimeSeriesStatsTeams, MessagesDeclaration['WALLBOARD_STATS_TIME_SERIES_TEAMS']>\r\n}\r\n\r\nexport type StatsConfigTypeKeys = keyof StatsConfigType\r\n\r\n\r\ntype StatsType<StatKind extends AllStatsType, LocalizationPart extends MessagesDeclaration[keyof MessagesDeclaration]> =\r\n    Record<StatKind, StatsDataType<LocalizationPart >>\r\n\r\nexport type StatsDataType<LocalizationPart extends MessagesDeclaration[keyof MessagesDeclaration]> = {\r\n    localizationKey: keyof LocalizationPart\r\n    format?: StatsFormatType\r\n    align?: 'left'\r\n    alertInverted?: boolean\r\n}\r\n\r\nexport type StatsMessagesDeclarationTypeMapper<StatKey extends StatsConfigTypeKeys> =\r\n    StatKey extends 'statsSingle' ? MessagesDeclaration['WALLBOARD_STATS_SINGLE'] :\r\n    StatKey extends 'statsAgent' ? MessagesDeclaration['WALLBOARD_STATS_AGENT'] :\r\n    StatKey extends 'statsService' ? MessagesDeclaration['WALLBOARD_STATS_SERVICE'] :\r\n    StatKey extends 'timeSeriesTeams' ? MessagesDeclaration['WALLBOARD_STATS_TIME_SERIES_TEAMS'] :\r\n    StatKey extends 'timeSeriesServices' ? MessagesDeclaration['WALLBOARD_STATS_TIME_SERIES_SERVICES'] :\r\n    StatKey extends 'custom' ? MessagesDeclaration['WALLBOARD_STATS_CUSTOM'] :\r\n    never\r\n\r\nexport const STAT_LOCALIZATION_MAP: Record<\r\n    StatsConfigTypeKeys,\r\n    keyof Pick<MessagesDeclaration,\r\n      'WALLBOARD_STATS_SINGLE' |\r\n      'WALLBOARD_STATS_AGENT' |\r\n      'WALLBOARD_STATS_SERVICE' |\r\n      'WALLBOARD_STATS_CUSTOM' |\r\n      'WALLBOARD_STATS_TIME_SERIES_TEAMS' |\r\n      'WALLBOARD_STATS_TIME_SERIES_SERVICES'\r\n    >\r\n> = {\r\n    statsSingle: 'WALLBOARD_STATS_SINGLE',\r\n    statsAgent: 'WALLBOARD_STATS_AGENT',\r\n    statsService: 'WALLBOARD_STATS_SERVICE',\r\n    custom: 'WALLBOARD_STATS_CUSTOM',\r\n    timeSeriesTeams: 'WALLBOARD_STATS_TIME_SERIES_TEAMS',\r\n    timeSeriesServices: 'WALLBOARD_STATS_TIME_SERIES_SERVICES',\r\n} as const\r\n\r\n","import {useCallback} from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {STATS_CONFIG} from './config'\r\nimport type {StatsConfigType, StatsConfigTypeKeys, StatsDataType, StatsMessagesDeclarationTypeMapper} from './types'\r\nimport {STAT_LOCALIZATION_MAP} from './types'\r\n\r\n\r\nexport function useGetStatsConfig() {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback(\r\n        <ConfigType extends StatsConfigTypeKeys, Stat extends keyof StatsConfigType[ConfigType]>\r\n        (type: ConfigType, stat: Stat) => {\r\n            const localizationPart = getLocalizationPart()\r\n            const statData = getStatData()\r\n            return {\r\n                format: statData?.format,\r\n                align: statData?.align,\r\n                alertInverted: statData?.alertInverted,\r\n                name: localizationPart[statData?.localizationKey],\r\n            }\r\n\r\n            function getLocalizationPart() {\r\n                const part = t[STAT_LOCALIZATION_MAP[type]]\r\n\r\n                return part as StatsMessagesDeclarationTypeMapper<ConfigType>\r\n            }\r\n\r\n            function getStatData() {\r\n                return STATS_CONFIG[type][stat] as unknown as StatsDataType<StatsMessagesDeclarationTypeMapper<ConfigType>>\r\n            }\r\n        }, [t])\r\n}\r\n\r\n","import React, {useEffect, useMemo} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigGauge} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {audioNotifyAtom} from '../../atoms'\r\nimport {gaugeChartOptions} from '../../charts'\r\nimport {formatStatValue} from '../../stats/helpers'\r\nimport {useGetStatsConfig} from '../../stats/useGetStatsConfig'\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const GaugeWidget: React.FC<WidgetProps<SupervisorWidgetConfigGauge>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const getStatsConfig = useGetStatsConfig()\r\n    const audioAlert = useAtomValue(audioNotifyAtom)\r\n\r\n    const statConfig = useMemo(() => {\r\n        if (!config.subscription?.req) {\r\n            return undefined\r\n        }\r\n        return getStatsConfig('statsSingle', config.subscription.req[0])\r\n    }, [config.subscription?.req, getStatsConfig])\r\n\r\n\r\n    const gaugeValue = useMemo(() => {\r\n        if (!subscriptionData || !config.subscription) {\r\n            return undefined\r\n        }\r\n\r\n        const stat = config.subscription.req[0]\r\n        const value = subscriptionData.stats_totals?.[stat]\r\n        return Number(value ?? 0)\r\n    }, [config.subscription, subscriptionData])\r\n\r\n    useEffect(() => {\r\n        if (!config.warning_sound) {\r\n            return\r\n        }\r\n        const inverted = statConfig?.alertInverted || false\r\n        const value = gaugeValue || 0\r\n        const shouldNotify =\r\n            (!inverted && value >= config.alertThreshold) ||\r\n            (inverted && value <= config.alertThreshold)\r\n\r\n        if (!shouldNotify || !audioAlert) {\r\n            return\r\n        }\r\n\r\n        const {stop} = audioAlert.start()\r\n\r\n        return () => {\r\n            stop()\r\n        }\r\n    }, [audioAlert, config.alertThreshold, config.warning_sound, gaugeValue, statConfig?.alertInverted])\r\n\r\n    const options: Highcharts.Options | undefined = useMemo(() => {\r\n        if (gaugeValue === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return gaugeChartOptions({\r\n            value: gaugeValue,\r\n            config,\r\n            inverted: statConfig?.alertInverted || false,\r\n            getFormattedValue: value => {\r\n                return formatStatValue(value, statConfig?.format)\r\n            },\r\n        })\r\n    }, [config, gaugeValue, statConfig])\r\n\r\n    return (\r\n        <WithNoData noData={options === undefined} className=\"h-full\">\r\n            <Chart options={options} />\r\n        </WithNoData>\r\n    )\r\n}\r\n","import {cloneDeep} from 'lodash-es'\r\n\r\nimport type {AcdState} from '@bpinc/ad-transport-types'\r\nimport {acdStates} from '@bpinc/ad-transport-types'\r\nimport {toHHMMSS} from '@bpinc/lib-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport type {\r\n    AgentGridValuesColumn,\r\n    AgentStatsType,\r\n    ServiceStatsType,\r\n    SupervisorWidgetConfigGrid,\r\n} from '@bpinc/lib-widgets-urls'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\n\r\nimport type {StatsConfigType, StatsConfigTypeKeys} from '../../stats/types'\r\n\r\n\r\nfunction mapAcdState(state: string, t: MessagesDeclaration) {\r\n    switch (state) {\r\n        case 'busy':\r\n            return t.WALLBOARD_WIDGETS_GRIDS.state_busy()\r\n        case 'ready':\r\n            return t.WALLBOARD_WIDGETS_GRIDS.state_ready()\r\n        case 'after_call_work':\r\n            return t.WALLBOARD_WIDGETS_GRIDS.state_after_call_work()\r\n        case 'not_ready':\r\n            return t.WALLBOARD_WIDGETS_GRIDS.state_not_ready()\r\n        default:\r\n            return t.WALLBOARD_WIDGETS_GRIDS.state_default()\r\n    }\r\n}\r\ntype StatType<\r\n    ConfigType extends StatsConfigTypeKeys,\r\n    Stat extends keyof StatsConfigType[ConfigType]\r\n> = (\r\n    type: ConfigType,\r\n    stat: Stat\r\n) => {\r\n    format?: 'duration' | 'percent' | undefined\r\n    align?: 'left'\r\n    alertInverted?: boolean\r\n}\r\ntype GridData = {\r\n    value: string\r\n    id: string\r\n}[][]\r\n\r\ntype ProcessGridDataPrams = {\r\n    config: SupervisorWidgetConfigGrid\r\n    dataGrids: AgentGridValuesColumn[] | undefined\r\n    t: MessagesDeclaration\r\n    getStatsConfig: StatType<'statsService', ServiceStatsType> & StatType<'statsAgent', AgentStatsType>\r\n}\r\n\r\nexport function processGridData({config, dataGrids: dataGridsRaw, getStatsConfig, t}: ProcessGridDataPrams): GridData | undefined {\r\n    const type = config.subscription.type\r\n    const {columns: configuredColumns, limit: maxItemsToShow, id: reqId} = cloneDeep(config.subscription.req)\r\n    const dataGrids = cloneDeep(dataGridsRaw || [])\r\n    const targetDataGrid = dataGrids.find(grid => grid?.id === reqId)\r\n\r\n    const currentData = dataGrids.filter(item => item.id === reqId)[0]\r\n    if (type == 'service_grid' && currentData && Array.isArray(currentData.values)) {\r\n        currentData.values = currentData.values.slice(0, maxItemsToShow)\r\n    }\r\n    if (type == 'agent_grid' && currentData && Array.isArray(currentData.values)) {\r\n        const stateCol = configuredColumns.length + 1\r\n        let currentValues = currentData.values.filter(item => {\r\n            const state = item[stateCol] as AcdState\r\n            return acdStates.includes(state)\r\n        })\r\n        currentValues = currentValues.map(item => {\r\n            delete item[stateCol]\r\n            return item\r\n        })\r\n        currentValues = currentValues.slice(0, maxItemsToShow)\r\n\r\n        const totalContacts = configuredColumns.find(column => column.statName === 'total_contacts')\r\n        if (totalContacts) {\r\n            currentValues.forEach(value => {\r\n                const id = parseInt(totalContacts?.id ? totalContacts.id : '0')\r\n                const v1 = value[id]\r\n                const v2 = value[id + 1]\r\n                value[id] = '' + parseInt(v1) + parseInt(v2)\r\n                delete value[id + 1]\r\n            })\r\n        }\r\n        currentData.values = currentValues\r\n    }\r\n\r\n    configuredColumns.forEach(column => {\r\n        const statsConfig = type === 'service_grid' ?\r\n            getStatsConfig('statsService', column.statName as ServiceStatsType) :\r\n            getStatsConfig('statsAgent', column.statName as AgentStatsType)\r\n\r\n        const tempId = parseInt(column?.id || '')\r\n        const widgetSubscriptionType = type\r\n        if (\r\n            (widgetSubscriptionType === 'agent_grid' && column.statName && statsConfig === undefined) ||\r\n            (widgetSubscriptionType === 'service_grid' && column.statName && statsConfig === undefined)\r\n        ) {\r\n            console.warn('Widget: \\'' + config.title + '\\' uses unknown statistic name: ' + column.statName)\r\n            return\r\n        }\r\n\r\n        if (\r\n            (widgetSubscriptionType === 'agent_grid' && column.statName && statsConfig.format === 'duration') ||\r\n            (widgetSubscriptionType === 'service_grid' && column.statName && statsConfig.format === 'duration')\r\n        ) {\r\n            targetDataGrid?.values?.forEach(val => {\r\n                if (val[tempId] === null) {\r\n                    val[tempId] = '0'\r\n                }\r\n                val[tempId] = toHHMMSS(Number(val[tempId]))\r\n            })\r\n        }\r\n\r\n        if (\r\n            (widgetSubscriptionType == 'agent_grid' && statsConfig.format == 'percent') ||\r\n            (widgetSubscriptionType == 'service_grid' && statsConfig.format == 'percent')\r\n        ) {\r\n            targetDataGrid?.values?.forEach(val => {\r\n                if (val[tempId] == null) {\r\n                    val[tempId] = '0'\r\n                }\r\n                val[tempId] = val[tempId] + ' %'\r\n            })\r\n        }\r\n\r\n        if (\r\n            (widgetSubscriptionType === 'agent_grid' && statsConfig.align) ||\r\n            (widgetSubscriptionType === 'service_grid' && statsConfig.align)\r\n        ) {\r\n            targetDataGrid?.values?.forEach(val => {\r\n                if (val[tempId] === null || val[tempId] === '0') {\r\n                    val[tempId] = ''\r\n                }\r\n            })\r\n        }\r\n\r\n        if (column.statName === 'acd_state') {\r\n            targetDataGrid?.values?.forEach(val => {\r\n                val[Number(column.id)] = mapAcdState(val[Number(column.id)], t)\r\n            })\r\n        }\r\n    })\r\n\r\n    const result = targetDataGrid?.values?.map(obj => {\r\n        return Object.values(obj).map(prop => {\r\n            return {value: prop == null ? '0' : prop, id: uuid()}\r\n        })\r\n    })\r\n\r\n    return result\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigGrid} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useGetStatsConfig} from '../../stats/useGetStatsConfig'\r\nimport type {WidgetProps} from '../../types'\r\nimport {processGridData} from './utils'\r\n\r\n\r\nfunction tdClassName(isEven = true) {\r\n    return tcn(\r\n        'px-[5px] py-1 first:sticky first:left-0 first:z-10',\r\n        isEven\r\n            ? 'bg-[--wallboard-table-even-row-bg:]'\r\n            : 'bg-[--wallboard-table-odd-row-bg]',\r\n    )\r\n}\r\n\r\nexport const GridWidget: React.FC<WidgetProps<SupervisorWidgetConfigGrid>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const getStatsConfig = useGetStatsConfig()\r\n    const subscriptionType = config.subscription.type\r\n\r\n    const columnsList = useMemo(() => {\r\n        if (!subscriptionData) return\r\n\r\n        switch (subscriptionType) {\r\n            case 'agent_grid':\r\n                return processGridData({\r\n                    config,\r\n                    t,\r\n                    getStatsConfig,\r\n                    dataGrids: subscriptionData?.agent_grids,\r\n                })\r\n            case 'service_grid':\r\n                return processGridData({\r\n                    config,\r\n                    t,\r\n                    getStatsConfig,\r\n                    dataGrids: subscriptionData?.service_grids,\r\n                })\r\n        }\r\n    }, [subscriptionData, subscriptionType, config, t, getStatsConfig])\r\n    return (\r\n        <WithNoData\r\n            noData={!columnsList?.length}\r\n            className=\"!justify-start\"\r\n        >\r\n            <div className=\"h-full w-full overflow-auto\">\r\n                <table className=\"w-full border-t border-[--wallboard-grid-border] text-left text-[1.7vm]\">\r\n                    <thead>\r\n                        {config.columtitle && (\r\n                            <tr className=\"border-b border-[--wallboard-grid-border] px-[5px] font-bold text-[1.7vm]\">\r\n                                {config.subscription.req.columns.map(\r\n                                    ({coltitle, id}) => (\r\n                                        <th\r\n                                            className={tdClassName()}\r\n                                            key={id}\r\n                                        >\r\n                                            {coltitle}\r\n                                        </th>\r\n                                    ),\r\n                                )}\r\n                            </tr>\r\n                        )}\r\n                    </thead>\r\n                    <tbody>\r\n                        {columnsList?.map((elems, i) => (\r\n                            <tr\r\n                                key={elems[0].id}\r\n                            >\r\n                                {elems.map(data => (\r\n                                    <td\r\n                                        className={tdClassName(i % 2 === 1)}\r\n                                        key={data.id}\r\n                                    >\r\n                                        {data.value}\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </WithNoData>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {SupervisorWidgetConfigMyStats, SupervisorWidgetsSubscriptionDataItem} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {FormatType} from '../../charts'\r\nimport {barOptions, formatSeries, formatTooltip} from '../../charts'\r\n\r\n\r\nconst chartColors = {myStats: '#BAD027', teamStats: '#00A6E6'}\r\n\r\nconst myStatsChartOptions = (\r\n    title: string,\r\n    height: number,\r\n    formatType?: FormatType,\r\n): Partial<Highcharts.Options> => {\r\n    function labelsFormatter(\r\n        this: Highcharts.SeriesDataLabelsFormatterContextObject,\r\n    ) {\r\n        return formatSeries(this, formatType)\r\n    }\r\n\r\n    function tooltipFormatter(this: Highcharts.TooltipFormatterContextObject) {\r\n        return formatTooltip(this, formatType)\r\n    }\r\n\r\n    return {\r\n        chart: {\r\n            height,\r\n            width: undefined,\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                dataLabels: {\r\n                    overflow: undefined,\r\n                    crop: false,\r\n                    formatter: labelsFormatter,\r\n                },\r\n            },\r\n        },\r\n        title: {\r\n            align: 'left',\r\n            useHTML: true,\r\n            margin: 8,\r\n            x: 5,\r\n            style: {\r\n                fontSize: '14px',\r\n                fontWeight: 'normal',\r\n                whiteSpace: 'nowrap',\r\n            },\r\n            text: title,\r\n        },\r\n        xAxis: {\r\n            labels: {\r\n                enabled: false,\r\n            },\r\n        },\r\n        tooltip: {\r\n            formatter: tooltipFormatter,\r\n        },\r\n        colors: Object.values(chartColors),\r\n    }\r\n}\r\n\r\n\r\nfunction calculateChartHeight(cardHeight: number, legendHeight: number) {\r\n    return (cardHeight - legendHeight) * 0.5\r\n}\r\n\r\ntype MyStatsData = {\r\n    inCalls: { agentValue: number; teamValue: number }\r\n    outCalls: { agentValue: number; teamValue: number }\r\n    successRatio: { agentValue: number; teamValue: number }\r\n    averageHandlingTime: { agentValue: number; teamValue: number }\r\n}\r\n\r\nconst myStatsDefaultData = {\r\n    inCalls: {agentValue: 0, teamValue: 0},\r\n    outCalls: {agentValue: 0, teamValue: 0},\r\n    successRatio: {agentValue: 0, teamValue: 0},\r\n    averageHandlingTime: {agentValue: 0, teamValue: 0},\r\n}\r\n\r\ninterface MyStatsOptions {\r\n    subscriptionData: SupervisorWidgetsSubscriptionDataItem | undefined\r\n    config: SupervisorWidgetConfigMyStats\r\n    cardHeight: number\r\n}\r\n\r\nexport function useMyStatsOptions({subscriptionData, config, cardHeight}: MyStatsOptions) {\r\n    const {t} = useLocalizationState()\r\n    const myStatsData = useMemo(() => {\r\n        if (!subscriptionData) {\r\n            return undefined\r\n        }\r\n\r\n        return (config.subscription?.req.columns ?? []).reduce<MyStatsData>(\r\n            (result, column) => {\r\n                const agentValue = Number(\r\n                    subscriptionData?.agent_grids?.[0].values?.[0]?.[\r\n                        Number(column.id ?? 0)\r\n                    ] ?? 0,\r\n                )\r\n\r\n                switch (column.statName) {\r\n                    case 'in_calls_handled_per_day': {\r\n                        const teamValue = Number(\r\n                            subscriptionData?.team_stats\r\n                                ?.in_calls_handled_per_day ?? 0,\r\n                        )\r\n                        result.inCalls = {agentValue, teamValue}\r\n                        break\r\n                    }\r\n                    case 'out_calls_handled_per_day': {\r\n                        const teamValue = Number(\r\n                            subscriptionData?.team_stats\r\n                                ?.out_calls_handled_per_day ?? 0,\r\n                        )\r\n                        result.outCalls = {agentValue, teamValue}\r\n                        break\r\n                    }\r\n                    case 'agent_success_ratio_per_day': {\r\n                        const teamValue = Number(\r\n                            subscriptionData?.team_stats\r\n                                ?.team_success_ratio_per_day ?? 0,\r\n                        )\r\n                        result.successRatio = {agentValue, teamValue}\r\n                        break\r\n                    }\r\n                    case 'calls_average_handling_time_per_day': {\r\n                        const teamValue = Number(\r\n                            subscriptionData?.team_stats\r\n                                ?.calls_average_handling_time_per_day ?? 0,\r\n                        )\r\n                        result.averageHandlingTime = {agentValue, teamValue}\r\n                        break\r\n                    }\r\n                }\r\n\r\n                return result\r\n            },\r\n            {...myStatsDefaultData},\r\n        )\r\n    }, [config.subscription?.req.columns, subscriptionData])\r\n\r\n\r\n    return useMemo(() => {\r\n        if (!myStatsData) {\r\n            return undefined\r\n        }\r\n\r\n        const handledTitle = t.WALLBOARD_MY_STATS_WIDGET.handled()\r\n        const averageHandlingTimeTitle =\r\n        t.WALLBOARD_MY_STATS_WIDGET.average_handling_time()\r\n        const successRatioTitle =\r\n        t.WALLBOARD_MY_STATS_WIDGET.successful_interactions()\r\n\r\n        return {\r\n            handled: barOptions(\r\n                {\r\n                    dataName: handledTitle,\r\n                    data: [\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.my_stats(),\r\n                            color: chartColors.myStats,\r\n                            value:\r\n                            myStatsData.inCalls.agentValue +\r\n                            myStatsData.outCalls.agentValue,\r\n                        },\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.teams_stats(),\r\n                            color: chartColors.teamStats,\r\n                            value:\r\n                            myStatsData.inCalls.teamValue +\r\n                            myStatsData.outCalls.teamValue,\r\n                        },\r\n                    ],\r\n                },\r\n                myStatsChartOptions(handledTitle, calculateChartHeight(cardHeight, 17)),\r\n            ),\r\n            averageHandlingTime: barOptions(\r\n                {\r\n                    dataName: averageHandlingTimeTitle,\r\n                    data: [\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.my_stats(),\r\n                            color: chartColors.myStats,\r\n                            value: myStatsData.averageHandlingTime.agentValue,\r\n                        },\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.teams_stats(),\r\n                            color: chartColors.teamStats,\r\n                            value: myStatsData.averageHandlingTime.teamValue,\r\n                        },\r\n                    ],\r\n                },\r\n                myStatsChartOptions(averageHandlingTimeTitle, calculateChartHeight(cardHeight, 17), 'minutes_seconds'),\r\n            ),\r\n            successRatio: barOptions(\r\n                {\r\n                    dataName: successRatioTitle,\r\n                    data: [\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.my_stats(),\r\n                            color: chartColors.myStats,\r\n                            value: myStatsData.successRatio.agentValue,\r\n                        },\r\n                        {\r\n                            name: t.WALLBOARD_MY_STATS_WIDGET.teams_stats(),\r\n                            color: chartColors.teamStats,\r\n                            value: myStatsData.successRatio.teamValue,\r\n                        },\r\n                    ],\r\n                },\r\n                myStatsChartOptions(successRatioTitle, calculateChartHeight(cardHeight, 17), 'percent'),\r\n            ),\r\n            legend: [\r\n                {\r\n                    name: t.WALLBOARD_MY_STATS_WIDGET.my_stats(),\r\n                    color: chartColors.myStats,\r\n                },\r\n                {\r\n                    name: t.WALLBOARD_MY_STATS_WIDGET.teams_stats(),\r\n                    color: chartColors.teamStats,\r\n                },\r\n            ],\r\n        }\r\n    }, [cardHeight, myStatsData, t.WALLBOARD_MY_STATS_WIDGET])\r\n\r\n}\r\n","import {toMMSS} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport type FormatType = 'percent' | 'minutes_seconds'\r\n\r\nexport function formatSeries(context: Highcharts.SeriesDataLabelsFormatterContextObject, formatType?: FormatType) {\r\n    switch (formatType) {\r\n        case 'percent':\r\n            return `${context.y}%`\r\n        case 'minutes_seconds':\r\n            return toMMSS(context.y)\r\n        default:\r\n            return `${context.y}`\r\n    }\r\n}\r\n\r\nexport function formatTooltip(context: Highcharts.TooltipFormatterContextObject, formatType?: FormatType) {\r\n    switch (formatType) {\r\n        case 'percent':\r\n            return `${context.x}: ${context.y}%`\r\n        case 'minutes_seconds':\r\n            return `${context.x}: ${toMMSS(context.y)}`\r\n        default:\r\n            return `${context.x}: ${context.y}`\r\n    }\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useState} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {Chart, ChartLegend} from '@bpinc/lib-highcharts'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigMyStats} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {WidgetProps} from '../../types'\r\nimport {useMyStatsOptions} from './useMyStatsOptions'\r\n\r\n\r\nconst legendClassName = 'h-[17px]'\r\n\r\nexport const MyStatsWidget: FC<WidgetProps<SupervisorWidgetConfigMyStats>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const [cardContent, setCardContent] = useState<HTMLElement | null>(null)\r\n    const resizeObserver = useResizeObserver(cardContent)\r\n    const cardHeight = resizeObserver?.contentRect.height ?? 0\r\n\r\n    const options = useMyStatsOptions({config, subscriptionData, cardHeight})\r\n\r\n    return (\r\n        <WithNoData\r\n            noData={!options}\r\n            className=\"flex flex-auto flex-col !items-start\"\r\n        >\r\n            <section ref={setCardContent} className=\"mb-2 h-full w-full\">\r\n                <div className=\"relative flex flex-auto justify-center\">\r\n                    <Chart\r\n                        options={options?.handled}\r\n                        className=\"relative !h-auto w-1/2\"\r\n                    />\r\n                    <Chart\r\n                        options={options?.averageHandlingTime}\r\n                        className=\"relative !h-auto w-1/2\"\r\n                    />\r\n                </div>\r\n                <Chart\r\n                    options={options?.successRatio}\r\n                    className=\"relative !h-auto w-1/2 flex-auto\"\r\n                />\r\n                <div className=\"flex w-full justify-center\">\r\n                    <ChartLegend options={options?.legend} className={legendClassName} />\r\n                </div>\r\n            </section>\r\n        </WithNoData>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {highcharts} from '@bpinc/lib-highcharts'\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface SatisfactionChartProps {\r\n    options: highcharts.Options\r\n    className?: string\r\n}\r\nexport const SatisfactionChart = ({options, className}: SatisfactionChartProps) => {\r\n    return (\r\n        <div\r\n            className={tcn('absolute flex h-1/2 w-1/2 flex-col items-center justify-center overflow-hidden', className)}\r\n        >\r\n            <Chart options={options} />\r\n        </div>\r\n    )\r\n\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {AgentGridValuesColumn, SupervisorWidgetConfigSatisfaction} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {solidGaugeChartOptions} from '../../charts'\r\nimport {formatStatValue} from '../../stats/helpers'\r\nimport {useGetStatsConfig} from '../../stats/useGetStatsConfig'\r\n\r\n\r\ntype StatName = 'agent_fcr' | 'agent_nps' | 'agent_csat'\r\n\r\ninterface StatOptions {\r\n    minValue: number\r\n    maxValue: number\r\n    getFormattedMinMax: (value: number) => string\r\n}\r\nconst satisfactionOption: Record<StatName, StatOptions> = {\r\n    agent_fcr: {\r\n        minValue: 0,\r\n        maxValue: 100,\r\n        getFormattedMinMax: (value: number) => `${value}%`,\r\n    },\r\n    agent_nps: {\r\n        minValue: -100,\r\n        maxValue: 100,\r\n        getFormattedMinMax: (value: number) => `${value}%`,\r\n    },\r\n    agent_csat: {\r\n        minValue: 0,\r\n        maxValue: 10,\r\n        getFormattedMinMax: (value: number) => `${value}`,\r\n    },\r\n}\r\n\r\nexport const useSatisfactionOption = (\r\n    statName: StatName,\r\n    config: SupervisorWidgetConfigSatisfaction,\r\n    grids: AgentGridValuesColumn[] | undefined,\r\n    title: string,\r\n) => {\r\n    const getStatsConfig = useGetStatsConfig()\r\n    const {columns: configuredColumns, id: reqId} = config.subscription.req\r\n    const targetCol = configuredColumns?.find(c => c.statName === statName)?.id\r\n    const targetDataGrid = grids?.find(grid => grid?.id === reqId)\r\n    const value = Number(targetDataGrid?.values?.[0][Number(targetCol)] ?? 0)\r\n\r\n    return useMemo(() => {\r\n        return solidGaugeChartOptions({\r\n            value,\r\n            maxValue: satisfactionOption[statName].maxValue,\r\n            minValue: satisfactionOption[statName].minValue,\r\n            getFormattedMinMax: satisfactionOption[statName].getFormattedMinMax,\r\n            getFormattedValue: (rawValue: string | number | undefined) => {\r\n                return formatStatValue(rawValue, getStatsConfig('statsAgent', statName)?.format)\r\n            },\r\n            title,\r\n        })\r\n    }, [value, statName, title, getStatsConfig])\r\n}\r\n","interface Options {\r\n    value: number\r\n    getFormattedValue: (value: number) => string | undefined\r\n    minValue: number | undefined\r\n    maxValue: number | undefined\r\n    getFormattedMinMax: (value: number) => string\r\n    title: string\r\n}\r\n\r\nexport function solidGaugeChartOptions({\r\n    value,\r\n    getFormattedValue,\r\n    minValue,\r\n    maxValue,\r\n    getFormattedMinMax,\r\n    title,\r\n}: Options): Highcharts.Options {\r\n    return {\r\n        chart: {\r\n            type: 'solidgauge',\r\n            animation: false,\r\n            backgroundColor: undefined,\r\n        },\r\n        title: {\r\n            text: `<span id=\"gaugeValue\" style=\"font-size:1.5vmin;color: var(--wallboard-widget-gauge-color)\">${title}</span>`,\r\n            align: 'center',\r\n            verticalAlign: 'top',\r\n        },\r\n        subtitle: {\r\n            text: `<span id=\"solidGaugeValue-${title}\" style=\"font-size:16px;color: var(--wallboard-widget-gauge-color)\">${getFormattedValue(\r\n                value,\r\n            )}</span>`,\r\n            align: 'center',\r\n            verticalAlign: 'bottom',\r\n            style: {\r\n                transform: 'translateY(-25%)',\r\n            },\r\n        },\r\n        pane: {\r\n            center: ['50%', '85%'],\r\n            size: '100%',\r\n            startAngle: -90,\r\n            endAngle: 90,\r\n            background: [\r\n                {\r\n                    backgroundColor: '#EEE',\r\n                    innerRadius: '60%',\r\n                    outerRadius: '100%',\r\n                    shape: 'arc',\r\n                },\r\n            ],\r\n        },\r\n        tooltip: {\r\n            enabled: false,\r\n        },\r\n        yAxis: {\r\n            min: minValue,\r\n            max: maxValue,\r\n            title: {\r\n                y: -70,\r\n                text: undefined,\r\n            },\r\n            lineWidth: 0,\r\n            minorTickInterval: null,\r\n            tickAmount: 2,\r\n            tickPositions:\r\n                minValue && maxValue ? [minValue, maxValue] : undefined,\r\n            endOnTick: false,\r\n            labels: {\r\n                y: 16,\r\n                distance: -10,\r\n                style: {\r\n                    color: 'var(--wallboard-widget-gauge-color)',\r\n                    fontSize: '14px',\r\n                },\r\n                padding: 5,\r\n                formatter: function(\r\n                    this: Highcharts.AxisLabelsFormatterContextObject,\r\n                ) {\r\n                    return getFormattedMinMax(this.value)\r\n                },\r\n            },\r\n        },\r\n        credits: {\r\n            enabled: false,\r\n        },\r\n        plotOptions: {\r\n            solidgauge: {\r\n                dataLabels: {\r\n                    y: 5,\r\n                    borderWidth: 0,\r\n                    useHTML: true,\r\n                },\r\n            },\r\n        },\r\n        colors: ['#BAD027'],\r\n        series: [\r\n            {\r\n                type: 'solidgauge',\r\n                data: [value],\r\n                dataLabels: {\r\n                    enabled: false,\r\n                },\r\n            },\r\n        ],\r\n        exporting: {enabled: false},\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const WithNoAvailable: FCWithChildren = ({\r\n    children,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !children ? t.WALLBOARD.no_available() : children\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {\r\n    useEffect,\r\n    useLayoutEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\nimport {isUndefined} from 'lodash-es'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigGauge} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {audioNotifyAtom} from '../../atoms'\r\nimport {formatStatValue} from '../../stats/helpers'\r\nimport {useGetStatsConfig} from '../../stats/useGetStatsConfig'\r\nimport type {WidgetProps} from '../../types'\r\nimport {WithNoAvailable} from './WithNoAvailable'\r\n\r\n\r\nexport const SingleWidget: React.FC<WidgetProps<SupervisorWidgetConfigGauge>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const getStatsConfig = useGetStatsConfig()\r\n    const audioAlert = useAtomValue(audioNotifyAtom)\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const [cardStyle, setCardStyle] = useState<CSSProperties>({fontSize: `${ref.current?.clientHeight}%`})\r\n    const resizeObserverEntry = useResizeObserver(ref)\r\n\r\n    useLayoutEffect(() => {\r\n        if (!resizeObserverEntry) {\r\n            setCardStyle(state => ({...state, fontSize: `${ref.current?.clientHeight}%`}))\r\n            return\r\n        }\r\n        setCardStyle(state => ({...state, fontSize: `${resizeObserverEntry.contentRect.height}%`}))\r\n    }, [resizeObserverEntry])\r\n\r\n    const valueStatConfig = useMemo(() => {\r\n        if (!config.subscription?.req) {\r\n            return undefined\r\n        }\r\n        return getStatsConfig('statsSingle', config.subscription.req[0])\r\n    }, [config.subscription?.req, getStatsConfig])\r\n\r\n    const value = useMemo(() => {\r\n        if (!subscriptionData || !config.subscription?.req[0]) {\r\n            return undefined\r\n        }\r\n\r\n        const stat = config.subscription.req[0]\r\n        return subscriptionData.stats_totals?.[stat]\r\n    }, [config.subscription?.req, subscriptionData])\r\n\r\n    useEffect(() => {\r\n        if (!config.warning_sound || !value) {\r\n            return\r\n        }\r\n        const inverted = valueStatConfig?.alertInverted || false\r\n        const parsedValue = parseInt(value)\r\n        const shouldNotify =\r\n            (!inverted && parsedValue >= config.alertThreshold) ||\r\n            (inverted && parsedValue <= config.alertThreshold)\r\n\r\n        if (!shouldNotify || !audioAlert) {\r\n            return\r\n        }\r\n\r\n        const {stop} = audioAlert.start()\r\n\r\n        return () => {\r\n            stop()\r\n        }\r\n    }, [\r\n        audioAlert,\r\n        config.alertThreshold,\r\n        config.warning_sound,\r\n        value,\r\n        valueStatConfig?.alertInverted,\r\n    ])\r\n\r\n    const valueFormatted = useMemo(() => {\r\n        if (!value) {\r\n            return undefined\r\n        }\r\n\r\n        return formatStatValue(value, valueStatConfig?.format)\r\n    }, [value, valueStatConfig?.format])\r\n\r\n    const optValueFormatted = useMemo(() => {\r\n        if (!subscriptionData || !config.subscription?.req[1]) {\r\n            return undefined\r\n        }\r\n\r\n        const stat = config.subscription.req[1]\r\n        const statConfig = getStatsConfig('statsSingle', stat)\r\n        return formatStatValue(\r\n            subscriptionData.stats_totals?.[stat],\r\n            statConfig.format,\r\n        )\r\n    }, [config.subscription, getStatsConfig, subscriptionData])\r\n\r\n    const noData = isUndefined(value && optValueFormatted)\r\n\r\n    return (\r\n        <div ref={ref} style={cardStyle} className=\"h-full w-full\">\r\n            <WithNoData\r\n                noData={noData}\r\n                className={tcn({'justify-start': !noData})}\r\n            >\r\n                <div className=\"flex h-4/5 w-full flex-col\">\r\n                    <ValueParagraph bigText>\r\n                        {valueFormatted}\r\n                    </ValueParagraph>\r\n                    <ValueParagraph>\r\n                        {optValueFormatted}\r\n                    </ValueParagraph>\r\n                </div>\r\n            </WithNoData>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ValueParagraphProps {\r\n    children: string | undefined\r\n    bigText?: boolean\r\n}\r\n\r\nconst ValueParagraph: React.FC<ValueParagraphProps> = ({\r\n    children,\r\n    bigText,\r\n}) => {\r\n    return (\r\n        <p\r\n            className={tcn(\r\n                {\r\n                    [`text-[250%]`]: bigText,\r\n                    [`text-[150%]`]: !bigText,\r\n                },\r\n                'm-0 shrink-0 truncate text-center',\r\n            )}\r\n            title={children}\r\n        >\r\n            <WithNoAvailable>{children}</WithNoAvailable>\r\n        </p>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {MS_IN_HOUR, MS_IN_MINUTE, useBoolean} from '@bpinc/lib-helpers'\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigTimeSeries} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {DataType} from '../../charts/splineChartOptions'\r\nimport {getChartConfig} from '../../charts/splineChartOptions'\r\nimport {useTimeSeriesDataQuery} from '../../queries'\r\n\r\n\r\ninterface TimeSeriesProps {\r\n    config: SupervisorWidgetConfigTimeSeries\r\n}\r\n\r\nfunction getTimeInterval(timeRange: number) {\r\n    let timeInterval = '20s'\r\n    if (timeRange >= MS_IN_HOUR) timeInterval = '1m'\r\n    if (timeRange >= MS_IN_HOUR * 3) timeInterval = '5m'\r\n    if (timeRange >= MS_IN_HOUR * 12) timeInterval = '10m'\r\n    if (timeRange >= MS_IN_HOUR * 12 * 7) timeInterval = '30m'\r\n    return timeInterval\r\n}\r\n\r\nconst DEFAULT_RANGE_MS = 1000000\r\n\r\nfunction calcQueryParams(config: SupervisorWidgetConfigTimeSeries) {\r\n    const timeRangeEnd = new Date().getTime()\r\n    const seriesType = config.series_type\r\n    const statistic = config.value\r\n    const timeRangeStart = timeRangeEnd - parseInt(config.timeRange)\r\n\r\n    return {\r\n        measurement: seriesType,\r\n        statistic: statistic,\r\n        start: String(timeRangeStart * DEFAULT_RANGE_MS),\r\n        end: String(timeRangeEnd * DEFAULT_RANGE_MS),\r\n        timeInterval: getTimeInterval(Number(config.timeRange)),\r\n    }\r\n}\r\n\r\nexport const TimeSeriesWidget: React.FC<TimeSeriesProps> = ({\r\n    config,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: yGridVisible, toggle: toggleYGrid} = useBoolean(true)\r\n    const {value: xGridVisible, toggle: toggleXGrid} = useBoolean(true)\r\n\r\n    const params = calcQueryParams(config)\r\n    const {data: timeSeriesData} = useTimeSeriesDataQuery(params)\r\n\r\n    const parsedData = useMemo(() => {\r\n        if (timeSeriesData && timeSeriesData.results && timeSeriesData.results.length && timeSeriesData.results[0].series) {\r\n            const tempResult: { [key: string]: { x: number; y: number }[] } = {}\r\n            const series = timeSeriesData.results[0].series\r\n            series.forEach(function(s) {\r\n                const name = s.tags?.name || ''\r\n                tempResult[name] = []\r\n                s.values.forEach(function(row) {\r\n                    if (row[1] !== null) {\r\n                        const date = new Date(row[0])\r\n                        const correctTime = date.getTime() - (date.getTimezoneOffset() * MS_IN_MINUTE)\r\n                        tempResult[name].push({x: correctTime, y: row[1]})\r\n                    }\r\n                })\r\n            })\r\n\r\n            const resultArr: DataType = []\r\n            for (const key in tempResult) {\r\n                const d = tempResult[key]\r\n                const value = {name: key, data: d}\r\n                resultArr.push(value)\r\n            }\r\n\r\n            return resultArr\r\n        }\r\n    }, [timeSeriesData])\r\n\r\n\r\n    const options = useMemo(() => {\r\n        if (parsedData === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return getChartConfig(parsedData, yGridVisible, xGridVisible)\r\n    }, [parsedData, yGridVisible, xGridVisible])\r\n\r\n\r\n    return (\r\n        <WithNoData noData={!parsedData?.length}>\r\n            <Chart options={options} />\r\n            <div className=\"flex w-8/12 justify-around\">\r\n                <label htmlFor={`xGridSwitch-${config.id}`} className=\"flex\">\r\n                    <span>{t.WALLBOARD_WIDGET_TIME_SERIES.show_x_grid()}</span>\r\n                    <input className=\"ml-[5px] self-center\" checked={xGridVisible} id={`xGridSwitch-${config.id}`} type=\"checkbox\" onChange={toggleXGrid} />\r\n                </label>\r\n                <label htmlFor={`yGridSwitch-${config.id}`} className=\"flex\">\r\n                    <span>{t.WALLBOARD_WIDGET_TIME_SERIES.show_y_grid()}</span>\r\n                    <input className=\"ml-[5px] self-center\" checked={yGridVisible} id={`yGridSwitch-${config.id}`} type=\"checkbox\" onChange={toggleYGrid} />\r\n                </label>\r\n            </div>\r\n        </WithNoData>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {SupervisorWidgetConfigBase} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const Unknown: React.FC<WidgetProps<SupervisorWidgetConfigBase>> = ({\r\n    config,\r\n}) => {\r\n    return (\r\n        <div className=\"h-full overflow-auto p-2\">\r\n                Unknown widget type\r\n            <pre>{JSON.stringify(config, null, 2)}</pre>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\nimport type {BpWallboardWidgetResolverEditProps, BpWallboardWidgetResolverViewProps} from '@servicepattern/jskit'\r\n\r\nimport {IconTrash} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidget, SupervisorWidgetsSubscriptionDataItem} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {SupervisorWidgetTypes} from '../types'\r\nimport {AgendaWidget} from './Agenda'\r\nimport {BreakTimeWidget} from './BreakTime'\r\nimport {DateTimeWidget} from './DateTime'\r\nimport {DispositionsWidget} from './Dispositions'\r\nimport {EmptyWidget} from './Empty'\r\nimport {GaugeWidget} from './Gauge'\r\nimport {GridWidget} from './Grid'\r\nimport {ImageWidget} from './Image'\r\nimport {MyStatsWidget} from './MyStats'\r\nimport {NewsWidget} from './News'\r\nimport {SatisfactionWidget} from './Satisfaction'\r\nimport {SingleWidget} from './Single'\r\nimport {SummaryWidget} from './Summary'\r\nimport {TextWidget} from './Text'\r\nimport {TimeSeriesWidget} from './TimeSeries'\r\nimport {Unknown} from './Unknown'\r\n\r\n\r\nconst WIDGETS_CONFIG: Record<SupervisorWidgetTypes, React.FC<any>> = {\r\n    grid: GridWidget,\r\n    datetime: DateTimeWidget,\r\n    empty: EmptyWidget,\r\n    gauge: GaugeWidget,\r\n    image: ImageWidget,\r\n    news: NewsWidget,\r\n    single: SingleWidget,\r\n    text: TextWidget,\r\n    summary: SummaryWidget,\r\n    break_time: BreakTimeWidget,\r\n    dispositions: DispositionsWidget,\r\n    my_stats: MyStatsWidget,\r\n    satisfaction: SatisfactionWidget,\r\n    agenda: AgendaWidget,\r\n    time_series: TimeSeriesWidget,\r\n}\r\n\r\nexport function EditWidgetResolver(\r\n    props: BpWallboardWidgetResolverEditProps<SupervisorWidget>,\r\n) {\r\n    const {Card, config, subscriptionData, removeWidget} = props\r\n\r\n    const {type} = config\r\n    const Widget = WIDGETS_CONFIG[type] || Unknown\r\n    const cardStyles = useCardStyles(props)\r\n\r\n    return (\r\n        <Card {...props} className={cardStyles} header={<WidgetHeaderView config={config} removeWidget={removeWidget} />}>\r\n            <Widget config={config} subscriptionData={subscriptionData} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport function ViewWidgetResolver(\r\n    props: BpWallboardWidgetResolverViewProps<SupervisorWidget>,\r\n) {\r\n    const {Card, config, subscriptionData} = props\r\n\r\n    const {type} = config\r\n    const Widget = WIDGETS_CONFIG[type] || Unknown\r\n\r\n    const cardStyles = useCardStyles(props)\r\n\r\n\r\n    return (\r\n        <Card {...props} className={cardStyles} header={<WidgetHeaderView config={config} />}>\r\n            <Widget config={config} subscriptionData={subscriptionData} />\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nfunction WidgetHeaderView({\r\n    removeWidget,\r\n    config,\r\n}: {\r\n    config: SupervisorWidget\r\n    removeWidget?: (config: SupervisorWidget) => void\r\n}) {\r\n    const buttonClassName = tcn('flex h-6 w-6 items-center justify-center opacity-0',\r\n        'transition-all duration-300 hover:!opacity-100',\r\n        'group-focus-within:opacity-70 group-hover:opacity-70')\r\n    return (\r\n        <div className=\"flex w-full items-center justify-between gap-4\">\r\n            <div className=\"text-xl\">{config.title}</div>\r\n            {removeWidget && (\r\n                <div className=\"flex items-center gap-1\">\r\n                    <Button\r\n                        transparent\r\n                        onClick={() => removeWidget(config)}\r\n                        className={buttonClassName}\r\n                    >\r\n                        <IconTrash className=\"h-5\" />\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction useCardStyles<W extends SupervisorWidget>({\r\n    config,\r\n    subscriptionData,\r\n}:\r\n| BpWallboardWidgetResolverViewProps<W>\r\n| BpWallboardWidgetResolverEditProps<W>) {\r\n    const isAlertedSingle = useMemo(() => {\r\n        if (config.type !== 'single') {\r\n            return false\r\n        }\r\n\r\n        if (\r\n            !config.alertThreshold ||\r\n            !subscriptionData ||\r\n            !config.subscription?.req[0]\r\n        ) {\r\n            return false\r\n        }\r\n        const subscription: SupervisorWidgetsSubscriptionDataItem = subscriptionData\r\n\r\n        const value = parseInt(\r\n            subscription.stats_totals?.[config.subscription.req[0]] || '0',\r\n        )\r\n        return value >= config.alertThreshold\r\n    }, [config, subscriptionData])\r\n\r\n    return useMemo(() => {\r\n        switch (config.type) {\r\n            case 'single':\r\n                if (isAlertedSingle) {\r\n                    return tcn('group [&>div]:border-[--wallboard-alerted-border] [&>div]:bg-[--wallboard-alerted-background]')\r\n                }\r\n        }\r\n        return tcn('group')\r\n    }, [isAlertedSingle, config.type])\r\n}\r\n\r\n","import React from 'react'\r\n\r\n\r\nexport const EmptyWidget: React.FC = () => {\r\n    return (\r\n        <div className=\"flex h-full w-full items-center justify-center\" />\r\n    )\r\n}\r\n\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport type {SupervisorWidgetConfigImage} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const ImageWidget: React.FC<WidgetProps<SupervisorWidgetConfigImage>> = ({\r\n    config,\r\n}) => {\r\n    const style = useMemo<CSSProperties>(() => ({\r\n        backgroundImage: `url(${config.imageUrl})`,\r\n        backgroundSize: config.style,\r\n    }), [config.imageUrl, config.style])\r\n\r\n    return (\r\n        <div\r\n            className=\"h-full bg-center bg-no-repeat\"\r\n            style={style}\r\n        />\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\nimport type {SupervisorWidgetConfigNews} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const NewsWidget: React.FC<WidgetProps<SupervisorWidgetConfigNews>> = ({\r\n    subscriptionData,\r\n}) => {\r\n    return (\r\n        <div className=\"h-full overflow-y-auto p-2\">\r\n            {subscriptionData?.chat_messages?.map(msgItem => (\r\n                <div\r\n                    key={msgItem.id}\r\n                    dangerouslySetInnerHTML={{__html: sanitizeHtml(msgItem.content)}}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {SupervisorWidgetConfigText} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const TextWidget: React.FC<WidgetProps<SupervisorWidgetConfigText>> = ({\r\n    config,\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"h-full overflow-y-auto p-2\">\r\n            {config.text}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigSummary} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {pieChartOptions} from '../../charts'\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\nexport const SummaryWidget: React.FC<WidgetProps<SupervisorWidgetConfigSummary>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const summaryData = useMemo(() => {\r\n        if (!subscriptionData) {\r\n            return undefined\r\n        }\r\n\r\n        const summaryConfigId = config.subscription.req.columns.find(\r\n            c => c.statName === 'acd_state',\r\n        )?.id\r\n\r\n        if (!summaryConfigId) {\r\n            return undefined\r\n        }\r\n\r\n        const states = subscriptionData?.agent_grids?.[0].values?.map(\r\n            value => value[+summaryConfigId],\r\n        )\r\n\r\n        const keys = ['busy', 'ready', 'after_call_work', 'not_ready'] as const\r\n\r\n        const values = states?.reduce<number[]>(\r\n            (acc, state) => {\r\n                const index = keys.findIndex(key => key === state)\r\n                if (index !== -1) {\r\n                    acc[index] = acc[index] + 1\r\n                }\r\n                return acc\r\n            },\r\n            Array.from({length: keys.length}, () => 0),\r\n        )\r\n\r\n        if (!values?.length) {\r\n            return undefined\r\n        }\r\n\r\n        return {\r\n            values,\r\n            names: keys.map(key => t.WALLBOARD_AGENT_STATES[key]()),\r\n        }\r\n    }, [\r\n        config.subscription.req.columns,\r\n        subscriptionData,\r\n        t.WALLBOARD_AGENT_STATES,\r\n    ])\r\n\r\n    const options = useMemo(() => {\r\n        if (!summaryData) {\r\n            return undefined\r\n        }\r\n\r\n        return pieChartOptions({\r\n            names: summaryData.names,\r\n            values: summaryData.values,\r\n            options: {\r\n                legend: {\r\n                    align: 'right',\r\n                    verticalAlign: 'middle',\r\n                    labelFormat: '{y} {name}',\r\n                    layout: 'vertical',\r\n                },\r\n                colors: [\r\n                    'var(--wallboard-agent-busy-state-color)',\r\n                    'var(--wallboard-agent-ready-state-color)',\r\n                    'var(--wallboard-agent-acw-state-color)',\r\n                    'var(--wallboard-agent-not-ready-state-color)',\r\n                ],\r\n                tooltip: {\r\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.name} {point.y}',\r\n                    headerFormat: '',\r\n                },\r\n            },\r\n        })\r\n    }, [summaryData])\r\n\r\n\r\n    return (\r\n        <WithNoData noData={!summaryData?.values.length}>\r\n            <Chart options={options} />\r\n        </WithNoData>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_DAY} from '@bpinc/lib-helpers'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useTenantConfigQuery() {\r\n    return useQuery({\r\n        queryKey: queryKey.tenant_config(),\r\n        queryFn: SupervisorWidgetsApiServices.getTenantConfiguration,\r\n        gcTime: MS_IN_DAY,\r\n        staleTime: MS_IN_DAY,\r\n    })\r\n\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {Chart} from '@bpinc/lib-highcharts'\r\nimport type {KVArray} from '@bpinc/lib-transport-conversion'\r\nimport {convertKVArray} from '@bpinc/lib-transport-conversion'\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigDispositions} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {barOptions} from '../../charts'\r\nimport type {WidgetProps} from '../../types'\r\n\r\n\r\ntype DispositionsData = KVArray<DispositionItem>\r\n\r\ntype DispositionItem = {\r\n    count: number\r\n    name: string\r\n}\r\nexport const DispositionsWidget: FC<WidgetProps<SupervisorWidgetConfigDispositions>> = ({\r\n    config,\r\n    subscriptionData,\r\n}) => {\r\n    const dispositionsData = useMemo(() => {\r\n        if (!subscriptionData) {\r\n            return undefined\r\n        }\r\n\r\n        const dispositionsSubscriptionConfig =\r\n            config.subscription?.req.columns.find(\r\n                c => c.statName === 'top_dispositions_per_day',\r\n            )\r\n\r\n        if (!dispositionsSubscriptionConfig?.id) {\r\n            return undefined\r\n        }\r\n\r\n        const stringifiedData =\r\n            subscriptionData?.agent_grids?.[0].values?.[0]?.[\r\n                +dispositionsSubscriptionConfig.id\r\n            ]\r\n\r\n        if (!stringifiedData) {\r\n            return undefined\r\n        }\r\n\r\n        try {\r\n            const parsedData: DispositionsData = JSON.parse(stringifiedData)\r\n            return convertKVArray(parsedData, (item: DispositionItem) => ({\r\n                name: item.name,\r\n                value: Number(item.count),\r\n            }))\r\n        } catch (error) {\r\n            return undefined\r\n        }\r\n    }, [config.subscription?.req.columns, subscriptionData])\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const options = useMemo(() => {\r\n        if (!dispositionsData?.length) {\r\n            return undefined\r\n        }\r\n\r\n        return barOptions({\r\n            dataName: t.WALLBOARD_DISPOSITION_WIDGET.count(),\r\n            data: dispositionsData,\r\n        })\r\n    }, [dispositionsData, t.WALLBOARD_DISPOSITION_WIDGET])\r\n\r\n\r\n    return (\r\n        <WithNoData noData={!options} >\r\n            <Chart options={options} />\r\n        </WithNoData>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {WithNoData} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigSatisfaction} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {WidgetProps} from '../../types'\r\nimport {SatisfactionChart} from './SatisfactionChart'\r\nimport {useSatisfactionOption} from './useSatisfactionOption'\r\n\r\n\r\nexport const SatisfactionWidget: React.FC<WidgetProps<SupervisorWidgetConfigSatisfaction>> = (\r\n    {\r\n        config,\r\n        subscriptionData,\r\n    },\r\n) => {\r\n    const {t} = useLocalizationState()\r\n    const resolutionOptions = useSatisfactionOption('agent_fcr', config, subscriptionData?.agent_grids, t.WALLBOARD_STATS_SINGLE.agent_fcr_name())\r\n    const netPromoterScoreOptions = useSatisfactionOption('agent_nps', config, subscriptionData?.agent_grids, t.WALLBOARD_STATS_SINGLE.agent_nps_name())\r\n    const demeanorOptions = useSatisfactionOption('agent_csat', config, subscriptionData?.agent_grids, t.WALLBOARD_STATS_SINGLE.agent_csat_name())\r\n\r\n    return (\r\n        <WithNoData\r\n            className=\"h-full\"\r\n            noData={!subscriptionData}\r\n        >\r\n            <SatisfactionChart\r\n                options={resolutionOptions}\r\n                className=\"left-0 top-1/2\"\r\n            />\r\n            <SatisfactionChart\r\n                options={netPromoterScoreOptions}\r\n                className=\"left-1/2 top-1/2\"\r\n            />\r\n            <SatisfactionChart\r\n                options={demeanorOptions}\r\n                className=\"bottom-1/4 left-1/4 top-0\"\r\n            />\r\n        </WithNoData>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_SECOND} from '@bpinc/lib-helpers'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useAgendaQuery(userId: string) {\r\n    return useQuery({\r\n        queryKey: queryKey.agenda(),\r\n        queryFn: () => SupervisorWidgetsApiServices.getAgenda({requestBody: [userId]}),\r\n        refetchInterval: 5 * MS_IN_SECOND,\r\n    })\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\ntype Params = {\r\n    measurement: string\r\n    statistic: string\r\n    start: string\r\n    end: string\r\n    timeInterval: string\r\n}\r\n\r\nexport function useTimeSeriesDataQuery(params: Params) {\r\n    return useQuery({\r\n        queryKey: queryKey.time_series(params.statistic, params.timeInterval),\r\n        queryFn: () => SupervisorWidgetsApiServices.getTimeSeriesData(params),\r\n        refetchInterval: MS_IN_MINUTE,\r\n    })\r\n}\r\n","import {highcharts} from '@bpinc/lib-highcharts'\r\n\r\n\r\nexport type DataType = Array<{ name: string; data: Array<{x: number; y: number}> }>\r\n\r\nexport function getChartConfig(data: DataType, yGridVisible: boolean, xGridVisible: boolean) {\r\n    return {\r\n        chart: {\r\n            type: 'spline',\r\n            // @ts-expect-error: For some reason \"svg\" property is missing in highcharts typings but exists in the implementation\r\n            animation: highcharts.svg, // don't animate in old IE\r\n            marginRight: 10,\r\n            backgroundColor: '',\r\n        },\r\n        title: {\r\n            text: '',\r\n        },\r\n        xAxis: {\r\n            gridLineWidth: xGridVisible ? 1 : 0,\r\n            gridLineColor: '#808080',\r\n            type: 'datetime',\r\n            tickPixelInterval: 150,\r\n        },\r\n        yAxis: {\r\n            allowDecimals: false,\r\n            gridLineWidth: yGridVisible ? 1 : 0,\r\n            gridLineColor: '#808080',\r\n            title: {\r\n                text: 'Value',\r\n            },\r\n            plotLines: [{\r\n                value: 0,\r\n                width: 1,\r\n                color: '#808080',\r\n            }],\r\n        },\r\n        tooltip: {\r\n            formatter: function(this: any) {\r\n                return '<b>' + this.series.name + '</b><br/>' +\r\n                    highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\r\n                    highcharts.numberFormat(this.y, 2)\r\n            },\r\n        },\r\n        legend: {\r\n            enabled: true,\r\n            itemStyle: {\r\n                'fontFamily': 'Muli',\r\n                'color': 'var(--wallboard-text-secondary)',\r\n            },\r\n        },\r\n        exporting: {\r\n            enabled: false,\r\n        },\r\n        plotOptions: {\r\n            series: {\r\n                marker: {\r\n                    enabled: false,\r\n                },\r\n                turboThreshold: 5000, //larger threshold or set to 0 to disable\r\n            },\r\n        },\r\n        credits: {enabled: false},\r\n        series: data,\r\n    }\r\n}\r\n","import React, {useEffect, useMemo, useRef} from 'react'\r\nimport {useSetAtom} from 'jotai'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {audioNotifyAtom} from '../../../atoms'\r\nimport notificationMp3 from './sounds/notification.mp3'\r\nimport notificationWav from './sounds/notification.wav'\r\n\r\n\r\nexport const AudioAlert = () => {\r\n    const audioRef = useRef<HTMLAudioElement>(null)\r\n\r\n    const notify = useMemo(() => throttle(() => {\r\n        audioRef.current?.play()\r\n    }, 10000, {leading: true}), [])\r\n    const setAudioNotify = useSetAtom(audioNotifyAtom)\r\n\r\n    useEffect(() => {\r\n        setAudioNotify({\r\n            start: () => {\r\n                notify()\r\n                const id = setInterval(() => notify(), 10000)\r\n\r\n                return {\r\n                    stop: () => clearInterval(id),\r\n                }\r\n            },\r\n        })\r\n    }, [notify, setAudioNotify])\r\n\r\n    return (\r\n        <audio ref={audioRef}>\r\n            <source src={notificationWav} />\r\n            <source src={notificationMp3} />\r\n        </audio>\r\n    )\r\n}\r\n","import {assertDefined, assertTrue} from '@bpinc/lib-types-helpers'\r\nimport type {SupervisorWidget, SupervisorWidgetAgentGridSubscriptionData} from '@bpinc/lib-widgets-urls'\r\n\r\n\r\nexport function assertCorrectWidget(widget: SupervisorWidget | null, currentWidgetId: string): asserts widget is SupervisorWidget {\r\n    assertDefined(widget)\r\n    assertTrue(widget.id === currentWidgetId, 'Wrong widget id for update')\r\n}\r\n\r\nexport function getAgentGridSubscriptionDefaults() {\r\n    return {\r\n        filter_by: '1',\r\n        filter_operation: 'NE',\r\n        filter_value: '',\r\n        limit: 1000,\r\n        order_by: '1',\r\n        order_dir: 'ASC',\r\n        team_ids: [],\r\n    }\r\n}\r\n\r\nexport function createDispositionsWidgetSubscription(widgetId: string, userId: string): SupervisorWidgetAgentGridSubscriptionData {\r\n    return {\r\n        type: 'dispositions',\r\n        req: {\r\n            ...getAgentGridSubscriptionDefaults(),\r\n            columns: [\r\n                {\r\n                    id: '1',\r\n                    statName: 'top_dispositions_per_day',\r\n                },\r\n            ],\r\n            id: widgetId,\r\n            user_id: userId,\r\n        },\r\n    }\r\n}\r\n\r\nexport function createSatisfactionWidgetSubscription(widgetId: string, userId: string): SupervisorWidgetAgentGridSubscriptionData {\r\n    return {\r\n        type: 'satisfaction',\r\n        req: {\r\n            ...getAgentGridSubscriptionDefaults(),\r\n            columns: [\r\n                {\r\n                    id: '1',\r\n                    statName: 'agent_fcr',\r\n                },\r\n                {\r\n                    id: '2',\r\n                    statName: 'agent_nps',\r\n                },\r\n                {\r\n                    id: '3',\r\n                    statName: 'agent_csat',\r\n                },\r\n            ],\r\n            id: widgetId,\r\n            user_id: userId,\r\n        },\r\n    }\r\n}\r\n\r\nexport function createBreakTimeWidgetSubscription(widgetId: string, userId: string): SupervisorWidgetAgentGridSubscriptionData {\r\n    return {\r\n        type: 'break_time',\r\n        req: {\r\n            ...getAgentGridSubscriptionDefaults(),\r\n            columns: [\r\n                {\r\n                    id: '1',\r\n                    statName: 'agent_total_break_time',\r\n                },\r\n            ],\r\n            id: widgetId,\r\n            user_id: userId,\r\n        },\r\n    }\r\n}\r\n\r\nexport function createMyStatsWidgetSubscription(widgetId: string, userId: string): SupervisorWidgetAgentGridSubscriptionData {\r\n    return {\r\n        type: 'my_stats',\r\n        req: {\r\n            ...getAgentGridSubscriptionDefaults(),\r\n            columns: [\r\n                {\r\n                    id: '1',\r\n                    statName: 'in_calls_handled_per_day',\r\n                },\r\n                {\r\n                    id: '2',\r\n                    statName: 'out_calls_handled_per_day',\r\n                },\r\n                {\r\n                    id: '3',\r\n                    statName: 'agent_success_ratio_per_day',\r\n                },\r\n                {id: '4',\r\n                    statName: 'calls_average_handling_time_per_day'},\r\n            ],\r\n            id: widgetId,\r\n            user_id: userId,\r\n        },\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {STATS_CONFIG} from './config'\r\nimport type {StatsConfigTypeKeys, StatsDataType, StatsMessagesDeclarationTypeMapper} from './types'\r\nimport {STAT_LOCALIZATION_MAP} from './types'\r\n\r\n\r\nexport function useStatsOptions<StatsConfigType extends StatsConfigTypeKeys>(type: StatsConfigType) {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        const statsData = STATS_CONFIG[type]\r\n        const part = t[STAT_LOCALIZATION_MAP[type]]\r\n\r\n        return typedKeys(statsData).map(key => {\r\n            const sData = statsData[key] as unknown as StatsDataType<StatsMessagesDeclarationTypeMapper<StatsConfigType>>\r\n            return ({text: (part[sData.localizationKey as keyof typeof part] as unknown as () => string)(), value: key})\r\n        })\r\n    }, [t, type])\r\n}\r\n\r\n","import type {ButtonHTMLAttributes} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nexport const ColumnFieldRow = React.forwardRef<HTMLDivElement, ButtonHTMLAttributes<HTMLDivElement>>(\r\n    ({children, className, ...restProps}, ref) => {\r\n        return (\r\n            <div\r\n                ref={ref}\r\n                {...restProps}\r\n                className={tcn(className, 'grid grid-cols-[minmax(0,2fr)_24px_1fr_48px] gap-4')}\r\n            >\r\n                {children}\r\n            </div>\r\n        )\r\n    },\r\n)\r\n","import React, {useCallback} from 'react'\r\nimport {useWatch} from 'react-hook-form'\r\nimport {defaultAnimateLayoutChanges, useSortable} from '@dnd-kit/sortable'\r\nimport {CSS} from '@dnd-kit/utilities'\r\n\r\nimport type {SmICONS} from '@bpinc/lib-external-ui-elements'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {HiddenField, SelectField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useStatsOptions} from '../../../../stats/useStatsOptions'\r\nimport {ColumnFieldRow} from './ColumnFieldRow'\r\nimport type {ColumnFieldType, ColumnsFiledType} from './index'\r\n\r\n\r\ninterface ColumnProps {\r\n    id: string\r\n    index: number\r\n    remove: (ind: number) => void\r\n    type: 'agent_grid' | 'service_grid'\r\n}\r\n\r\nexport const ColumnField = <TValues, >({\r\n    id,\r\n    index,\r\n    control,\r\n    setValue,\r\n    remove,\r\n    type,\r\n}: ColumnProps & FieldControlProps<TValues, ColumnsFiledType, 'control' | 'setValue'>) => {\r\n    const onRemove = useCallback(() => {\r\n        remove(index)\r\n    }, [remove, index])\r\n\r\n    const options = useStatsOptions(type === 'agent_grid' ? 'statsAgent' : 'statsService')\r\n\r\n    const {\r\n        attributes,\r\n        listeners,\r\n        setNodeRef,\r\n        transform,\r\n        transition,\r\n        setActivatorNodeRef,\r\n        isDragging,\r\n    } = useSortable({\r\n        id,\r\n        animateLayoutChanges: defaultAnimateLayoutChanges,\r\n    })\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n    }\r\n\r\n    const dir = useWatch({\r\n        control,\r\n        name: `columns.${index}.dir`,\r\n    })\r\n\r\n    const handleChangeSort = useCallback(() => {\r\n        setValue(`columns.${index}.dir`,\r\n            dir === 'DESC'\r\n                ? 'ASC'\r\n                : dir === 'EMPT'\r\n                    ? 'DESC'\r\n                    : 'EMPT',\r\n        )\r\n    }, [dir, setValue, index])\r\n\r\n    return (\r\n        <ColumnFieldRow\r\n            ref={setNodeRef}\r\n            style={style}\r\n            {...attributes}\r\n            className={tcn(\r\n                'group/stat-row bg-main-bg py-1', {\r\n                    'z-10': isDragging,\r\n                },\r\n            )}\r\n        >\r\n            <HiddenField name={`columns.${index}.id`} control={control} />\r\n            <SelectField search options={options} name={`columns.${index}.statName`} control={control} />\r\n            <div className=\"self-center justify-self-center\">\r\n                <SemanticButton\r\n                    onClick={handleChangeSort}\r\n                    transparent\r\n                    className={tcn('mr-0 flex items-center text-[20px]',\r\n                        '[&>i]:flex [&>i]:items-center [&>i]:justify-center [&>i]:outline-none',\r\n                        'opacity-0 hover:opacity-100',\r\n                        {'opacity-100': dir !== 'EMPT'})}\r\n                    icon={getSortIcon(dir)}\r\n                    enabledInOffline\r\n                />\r\n                <HiddenField name={`columns.${index}.dir`} control={control} />\r\n            </div>\r\n            <TextField fluid name={`columns.${index}.coltitle`} control={control} />\r\n            <div className=\"flex self-center justify-self-center\">\r\n                <SemanticButton\r\n                    onClick={onRemove}\r\n                    enabledInOffline\r\n                    transparent\r\n                    className=\"hidden items-center text-lg group-hover/stat-row:flex\r\n                    [&>i]:flex [&>i]:items-center [&>i]:justify-center\"\r\n                    icon=\"x\"\r\n                />\r\n                <SemanticButton\r\n                    ref={setActivatorNodeRef}\r\n                    enabledInOffline\r\n                    transparent\r\n                    className=\"hidden items-center text-lg group-hover/stat-row:flex\r\n                    [&>i]:flex [&>i]:items-center [&>i]:justify-center\"\r\n                    icon=\"bars\"\r\n                    {...listeners}\r\n                />\r\n            </div>\r\n        </ColumnFieldRow>\r\n    )\r\n}\r\n\r\nfunction getSortIcon(sort: ColumnFieldType['dir']): SmICONS {\r\n    if (sort === 'ASC') {\r\n        return 'caret up'\r\n    }\r\n    if (sort === 'DESC') {\r\n        return 'caret down'\r\n    }\r\n    return 'circle outline'\r\n}\r\n","export const createEmptyColumn = (currentLength: number, type: 'agent_grid' | 'service_grid'): ColumnFieldType => {\r\n    return {\r\n        id: String(currentLength + 1),\r\n        statName: type === 'agent_grid' ? 'first_last_name' : 'name',\r\n        dir: chooseDir(currentLength, type),\r\n        coltitle: '',\r\n    }\r\n}\r\n\r\nconst chooseDir = (currentLength: number, type: 'agent_grid' | 'service_grid'): ColumnFieldType['dir'] => {\r\n    if (currentLength === 0 && type === 'agent_grid') {\r\n        return 'DESC'\r\n    }\r\n    if (currentLength === 0 && type === 'service_grid') {\r\n        return 'ASC'\r\n    }\r\n    return 'EMPT'\r\n}\r\n\r\nexport type ColumnFieldType = {\r\n    id?: string\r\n    statName?: string\r\n    dir?: 'DESC' | 'ASC' | 'EMPT'\r\n    coltitle?: string\r\n}\r\n\r\nexport type ColumnsFiledType = {\r\n    columns: ColumnFieldType[]\r\n}\r\n\r\n","import React, {useCallback, useState} from 'react'\r\nimport {useFieldArray} from 'react-hook-form'\r\nimport type {UniqueIdentifier} from '@dnd-kit/core'\r\nimport {DndContext} from '@dnd-kit/core'\r\nimport {SortableContext, verticalListSortingStrategy} from '@dnd-kit/sortable'\r\n\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ColumnField} from './ColumnField'\r\nimport {ColumnFieldRow} from './ColumnFieldRow'\r\nimport type {ColumnsFiledType} from './utils'\r\nimport {createEmptyColumn} from './utils'\r\n\r\n\r\ntype ColumnsFieldProps = {\r\n    type: 'agent_grid' | 'service_grid'\r\n}\r\n\r\nexport const ColumnsField = <TValues, >({\r\n    control,\r\n    setValue,\r\n    type,\r\n}: FieldControlProps<TValues, ColumnsFiledType, 'control' | 'setValue'> & ColumnsFieldProps) => {\r\n    const {t} = useLocalizationState()\r\n    const {fields, append, remove, move} = useFieldArray({\r\n        control,\r\n        name: 'columns',\r\n    })\r\n    const onAddColumn = useCallback(() => {\r\n        append(createEmptyColumn(fields.length, type))\r\n    }, [append, fields.length, type])\r\n\r\n    const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null)\r\n    const getIndex = (id: UniqueIdentifier) => fields.findIndex(field => field.id === id)\r\n    const activeIndex = activeId ? getIndex(activeId) : -1\r\n\r\n    return (\r\n        <div>\r\n            <ColumnFieldRow>\r\n                <p className=\"font-bold\">\r\n                    {t.GLOBAL.statistic()}\r\n                </p>\r\n                <p className=\"font-bold\">\r\n                    {t.GLOBAL.sort()}\r\n                </p>\r\n                <p className=\"font-bold\">\r\n                    {t.GLOBAL.title()}\r\n                </p>\r\n            </ColumnFieldRow>\r\n            <div className=\"mb-1 flex flex-col\">\r\n                <DndContext\r\n                    onDragStart={({active}) => {\r\n                        if (!active) {\r\n                            return\r\n                        }\r\n\r\n                        setActiveId(active.id)\r\n                    }}\r\n                    onDragEnd={({over}) => {\r\n                        setActiveId(null)\r\n\r\n                        if (over) {\r\n                            const overIndex = getIndex(over.id)\r\n                            if (activeIndex !== overIndex) {\r\n                                move(activeIndex, overIndex)\r\n                            }\r\n                        }\r\n                    }}\r\n                    onDragCancel={() => setActiveId(null)}\r\n                >\r\n                    <SortableContext items={fields} strategy={verticalListSortingStrategy}>\r\n                        {fields?.map((field, index) => {\r\n                            return (\r\n                                <ColumnField\r\n                                    type={type}\r\n                                    key={field.id}\r\n                                    id={field.id}\r\n                                    control={control}\r\n                                    setValue={setValue}\r\n                                    index={index}\r\n                                    remove={remove}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </SortableContext>\r\n                </DndContext>\r\n            </div>\r\n            <SemanticButton onClick={onAddColumn} basic icon enabledInOffline>\r\n                <SmIcon name=\"plus\" />\r\n                {t.WALLBOARD_WIDGETS_GRIDS.add_column()}\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nimport {CheckboxField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorAgentStats} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype Limit = {\r\n    subteam?: boolean\r\n    logged_in_only?: boolean\r\n}\r\n\r\ninterface AgentStatesModalValues {\r\n    agentStats: SupervisorAgentStats\r\n    limit: Limit\r\n}\r\n\r\nexport interface AgentStatesModalParams extends ModalBase {\r\n    type: 'agent_states'\r\n    values: AgentStatesModalValues\r\n    onApply: (values: AgentStatesModalValues) => void\r\n}\r\n\r\ntype AgentStatesModalProps = CommonModalProps & {\r\n    values: AgentStatesModalValues\r\n    onApply: (values: AgentStatesModalValues) => void\r\n}\r\n\r\nexport const AgentStatesModal: React.FC<AgentStatesModalProps> = ({values, onApply, onClose, ...commonModalProps}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n    } = useForm<AgentStatesModalValues>({\r\n        defaultValues: values,\r\n    })\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        onApply(formData)\r\n        onClose?.()\r\n    }), [handleSubmit, onApply, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            {...commonModalProps}\r\n        >\r\n            <Modal.Header>\r\n                {t.WALLBOARD_STATES_MODAL.title()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <h4>\r\n                    {t.WALLBOARD_STATES_MODAL.states_header()}\r\n                </h4>\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.state_busy()}\r\n                    name=\"agentStats.busy\"\r\n                    control={control}\r\n                />\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.state_ready()}\r\n                    name=\"agentStats.ready\"\r\n                    control={control}\r\n                />\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.state_after_call_work()}\r\n                    name=\"agentStats.after_call_work\"\r\n                    control={control}\r\n                />\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.state_not_ready()}\r\n                    name=\"agentStats.not_ready\"\r\n                    control={control}\r\n                />\r\n                <h4>\r\n                    {t.WALLBOARD_STATES_MODAL.limits_header()}\r\n                </h4>\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.limit_my_subteam()}\r\n                    name=\"limit.subteam\"\r\n                    control={control}\r\n                />\r\n                <CheckboxField\r\n                    label={t.WALLBOARD_STATES_MODAL.limit_logged_in()}\r\n                    name=\"limit.logged_in_only\"\r\n                    control={control}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    primary\r\n                    onClick={save}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {DoubleColumnSelect, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useTeamsQuery} from '../queries'\r\n\r\n\r\ntype TeamsSelectModalProps = CommonModalProps & {\r\n    teams: string[]\r\n    onSelect: (teams: string[]) => void\r\n}\r\n\r\nexport const TeamsSelectModal: React.FC<TeamsSelectModalProps> = ({teams, onSelect, onClose, ...commonModalProps}) => {\r\n    const {t} = useLocalizationState()\r\n    const [selectedTeams, setSelectedTeams] = useState(teams)\r\n\r\n    const handleOnComplete = useCallback(() => {\r\n        onSelect(selectedTeams)\r\n        onClose()\r\n    }, [onClose, onSelect, selectedTeams])\r\n\r\n    const {data: allTeams} = useTeamsQuery()\r\n\r\n    const options = useMemo(() => {\r\n        return (allTeams || []).map(team => ({\r\n            value: team.id,\r\n            text: team.name,\r\n        }))\r\n    }, [allTeams])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            {...commonModalProps}\r\n        >\r\n            <Modal.Header>\r\n                {t.WALLBOARD_TEAMS_MODAL.title()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <DoubleColumnSelect\r\n                    className=\"max-h-[70vh] min-h-[280px]\"\r\n                    value={selectedTeams}\r\n                    setValue={setSelectedTeams}\r\n                    options={options}\r\n                    availableTitle={t.GLOBAL.available()}\r\n                    selectedTitle={t.GLOBAL.included()}\r\n                    noSearch\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    primary\r\n                    onClick={handleOnComplete}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {useController} from 'react-hook-form'\r\nimport {cloneDeep} from 'lodash-es'\r\n\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorAgentStats} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AgentStatesModal} from '../AgentStatesModal'\r\nimport {TeamsSelectModal} from '../TeamsSelectModal'\r\n\r\n\r\nexport type Limit = {\r\n    subteam?: boolean\r\n    logged_in_only?: boolean\r\n}\r\n\r\ntype AgentsSelectFieldType = {\r\n    teamIds: string[]\r\n    agentStats?: SupervisorAgentStats\r\n    limit?: Limit\r\n}\r\n\r\nexport const AgentsSelect = <TValues, >({control, setValue}: FieldControlProps<TValues, AgentsSelectFieldType, 'control' | 'setValue'>) => {\r\n    const {\r\n        field: {\r\n            value: teamIds,\r\n        },\r\n    } = useController({\r\n        name: 'teamIds',\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: {\r\n            value: agentStates,\r\n        },\r\n    } = useController({\r\n        name: 'agentStats',\r\n        control,\r\n    })\r\n    const {\r\n        field: {\r\n            value: limit,\r\n        },\r\n    } = useController({\r\n        name: 'limit',\r\n        control,\r\n    })\r\n    const openTeamsSelectModal = useModalComponentOpener(TeamsSelectModal)\r\n    const openAgentStatesModal = useModalComponentOpener(AgentStatesModal)\r\n    const handleSelectTeams = useCallback(() => {\r\n        openTeamsSelectModal({\r\n            teams: teamIds || [],\r\n            onSelect: updatedTeams => {\r\n                setValue('teamIds', updatedTeams)\r\n            },\r\n        })\r\n    }, [openTeamsSelectModal, setValue, teamIds])\r\n\r\n    const handleSelectStates = useCallback(() => {\r\n        if (!agentStates || !limit) {\r\n            return\r\n        }\r\n        openAgentStatesModal({\r\n            values: {\r\n                agentStats: cloneDeep(agentStates),\r\n                limit: cloneDeep(limit),\r\n            },\r\n            onApply: values => {\r\n                setValue('limit', values.limit)\r\n                setValue('agentStats', values.agentStats)\r\n            },\r\n        })\r\n    }, [openAgentStatesModal, agentStates, limit, setValue])\r\n\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <div className=\"mb-4 flex gap-4\">\r\n            <SemanticButton\r\n                basic\r\n                onClick={handleSelectTeams}\r\n                className=\"mr-0\"\r\n                enabledInOffline\r\n            >\r\n                {t.WALLBOARD_WIDGETS_GRIDS.teams()}\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                basic\r\n                onClick={handleSelectStates}\r\n                enabledInOffline\r\n            >\r\n                {t.WALLBOARD_WIDGETS_GRIDS.states()}\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\nimport {cloneDeep, pick} from 'lodash-es'\r\n\r\nimport {CheckboxField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {\r\n    SupervisorAgentStats,\r\n    SupervisorWidgetAgentGridSubscriptionData,\r\n    SupervisorWidgetConfigGrid,\r\n} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {useTeamsQuery} from '../../queries'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport type {ColumnsFiledType} from '../shared/GridFormsComponents/ColumnsField'\r\nimport {ColumnsField, createEmptyColumn} from '../shared/GridFormsComponents/ColumnsField'\r\nimport type {FormValues} from '../types'\r\nimport type {Limit} from './AgentsSelect'\r\nimport {AgentsSelect} from './AgentsSelect'\r\n\r\n\r\ntype AgentGridModalSettingsFormValues = ColumnsFiledType & {\r\n    title: string\r\n    teamIds: string[]\r\n    agentStats?: SupervisorAgentStats\r\n    columnTitleEnabled: boolean\r\n    maxItemsToShow: number\r\n    limit?: Limit\r\n}\r\n\r\n\r\nexport interface AgentGridWidgetSettingsModalParams extends ModalBase {\r\n    type: 'agent_grid_settings'\r\n    replacingWidgetId: string\r\n    formValues?: ConfigAgentGrid\r\n    onSaved?: () => void\r\n}\r\n\r\ntype AgentGridModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: ConfigAgentGrid\r\n    onSaved?: () => void\r\n}\r\n\r\ntype ConfigAgentGrid = SupervisorWidgetConfigGrid & {subscription: SupervisorWidgetAgentGridSubscriptionData}\r\n\r\nexport function assertFormValuesValidForConfigAgentGrid(\r\n    fv: FormValues,\r\n): asserts fv is ConfigAgentGrid {\r\n    if (!(\r\n        'subscription' in fv &&\r\n        'title' in fv &&\r\n        'columtitle' in fv &&\r\n        'agent_stats' in fv &&\r\n        'limit' in fv &&\r\n        typeof fv.subscription === 'object' &&\r\n        fv.subscription !== null &&\r\n        'type' in fv.subscription &&\r\n        fv.subscription.type !== 'service_grid'\r\n    )) {\r\n        throw new Error('Form values is not valid for config agent grid')\r\n    }\r\n}\r\n\r\n\r\nconst convertToForm = (config: ConfigAgentGrid): Partial<AgentGridModalSettingsFormValues> => {\r\n    const newColumns = config?.subscription?.req?.columns.map((col, index) => {\r\n        const existingOrder = config?.subscription?.req?.order?.find(({by}) => {\r\n            return Number(by) === index + 1\r\n        })\r\n        return {\r\n            ...col,\r\n            dir: (existingOrder?.dir as 'DESC' | 'ASC') || 'EMPT',\r\n            order: index + 1,\r\n        }\r\n    })\r\n    return {\r\n        title: config?.title,\r\n        columnTitleEnabled: config?.columtitle,\r\n        teamIds: cloneDeep(config?.subscription?.req?.team_ids),\r\n        agentStats: cloneDeep(config?.agent_stats),\r\n        limit: cloneDeep(config?.limit),\r\n        maxItemsToShow: cloneDeep(config?.subscription?.req?.limit),\r\n        columns: newColumns,\r\n    }\r\n\r\n\r\n}\r\n\r\ntype FormWidgetConfig = Pick<SupervisorWidgetConfigGrid, 'title' | 'columtitle' | 'agent_stats' | 'limit' | 'subscription'>\r\n\r\nconst convertToBackend = (formValues: AgentGridModalSettingsFormValues, id: string): FormWidgetConfig => {\r\n    const newOrder = formValues.columns.reduce<{ by: string; dir: 'ASC' | 'DESC' }[]>((acc, column, index) => {\r\n        if (column.dir && column.dir !== 'EMPT') {\r\n            return [...acc, {by: String(index + 1), dir: column.dir}]\r\n        }\r\n        return acc\r\n    }, [])\r\n    return {\r\n        title: formValues.title || '',\r\n        columtitle: formValues.columnTitleEnabled,\r\n        agent_stats: formValues.agentStats,\r\n        limit: formValues.limit,\r\n        subscription: {\r\n            type: 'agent_grid',\r\n            req: {\r\n                id,\r\n                team_ids: formValues.teamIds,\r\n                limit: formValues.maxItemsToShow,\r\n                columns: formValues.columns.map((col, ind) => ({...col, id: String(ind + 1)})),\r\n                order: newOrder,\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nconst DEFAULT_COLUMN_MAX = 6\r\n\r\nexport const AgentGridModal: React.FC<AgentGridModalProps> = ({\r\n    onClose,\r\n    replacingWidgetId,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const formValuesParsed = useMemo(() => {\r\n        if (formValues) {\r\n            return convertToForm(formValues)\r\n        }\r\n\r\n    }, [formValues])\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n    } = useForm<AgentGridModalSettingsFormValues>({\r\n        defaultValues: {\r\n            title: formValuesParsed?.title || t.WALLBOARD_WIDGET_EMPTY.agent_grid(),\r\n            teamIds: formValuesParsed?.teamIds || [],\r\n            agentStats: {\r\n                busy: formValuesParsed?.agentStats?.busy !== false,\r\n                ready: formValuesParsed?.agentStats?.ready !== false,\r\n                after_call_work: formValuesParsed?.agentStats?.after_call_work !== false,\r\n                not_ready: formValuesParsed?.agentStats?.not_ready !== false,\r\n            },\r\n            limit: {\r\n                subteam: formValuesParsed?.limit?.subteam || false,\r\n                logged_in_only: formValuesParsed?.limit?.logged_in_only || false,\r\n            },\r\n            columnTitleEnabled: formValuesParsed?.columnTitleEnabled !== false,\r\n            maxItemsToShow: formValuesParsed?.maxItemsToShow || DEFAULT_COLUMN_MAX,\r\n            columns: formValuesParsed?.columns || [createEmptyColumn(0, 'agent_grid')],\r\n        },\r\n    })\r\n\r\n    const {data: teams} = useTeamsQuery()\r\n\r\n    useEffect(() => {\r\n        const teamIds = (teams || []).map(({id}) => id)\r\n        setValue('teamIds', teamIds)\r\n    }, [setValue, teams])\r\n\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            type: 'grid',\r\n            ...convertToBackend(formData, widget.id),\r\n            ...pick(\r\n                widget,\r\n                'id',\r\n                'x',\r\n                'y',\r\n                'width',\r\n                'height',\r\n                'show_settings',\r\n            ),\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                {t.WALLBOARD_WIDGETS_GRIDS.agent_grid()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <div className=\"mb-4 flex gap-4\">\r\n                    <TextField\r\n                        fluid\r\n                        label={t.GLOBAL.title()}\r\n                        name=\"title\"\r\n                        placeholder={t.GLOBAL.title()}\r\n                        className=\"grow [&>label]:font-bold\"\r\n                        control={control}\r\n                    />\r\n                    <TextField\r\n                        fluid\r\n                        label={t.WALLBOARD_WIDGETS_GRIDS.max_to_show()}\r\n                        name=\"maxItemsToShow\"\r\n                        type=\"number\"\r\n                        className=\"shrink-0 [&>label]:font-bold\"\r\n                        placeholder={t.WALLBOARD_WIDGETS_GRIDS.max_to_show()}\r\n                        control={control}\r\n                    />\r\n                    <CheckboxField\r\n                        label={t.WALLBOARD_WIDGETS_GRIDS.column_headings()}\r\n                        name=\"columnTitleEnabled\"\r\n                        toggle\r\n                        className=\"mt-4 shrink-0 self-center\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <AgentsSelect control={control} setValue={setValue} />\r\n                <ColumnsField control={control} setValue={setValue} type=\"agent_grid\" />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} enabledInOffline>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownItemProps, DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {WidgetToCopy} from '../../types'\r\nimport {useHandleWidgetSelect} from '../EmptyWidgetSettingsModal'\r\nimport {useGetWidgetsToCopy} from './useGetWidgetsToCopy'\r\n\r\n\r\ntype CopyWidgetProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    onSaved?: () => void\r\n}\r\n\r\nexport const CopyWidget: React.FC<CopyWidgetProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    onSaved,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const [selectedWidgetId, setSelectedWidgetId] = useState('')\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [widgetsToCopy, setWidgetsToCopy] = useState<WidgetToCopy[]>([])\r\n    const getWidgetsToCopy = useGetWidgetsToCopy()\r\n\r\n    useEffect(() => {\r\n        async function updateWidgetsOptions() {\r\n            const result = await getWidgetsToCopy()\r\n            setWidgetsToCopy(result)\r\n            setIsLoading(false)\r\n        }\r\n        updateWidgetsOptions()\r\n    }, [getWidgetsToCopy])\r\n\r\n    const options = useMemo(() => {\r\n        return widgetsToCopy.map<DropdownItemProps>(widgetItem => ({\r\n            value: getOptionsValue(widgetItem.wallboardId, widgetItem.config.id),\r\n            text: widgetItem.title,\r\n        }))\r\n    }, [widgetsToCopy])\r\n\r\n    const handleSelectWidgetId = useCallback((_evt: React.SyntheticEvent<HTMLElement, Event>, {value}: DropdownProps) => {\r\n        if (typeof value !== 'string') {\r\n            console.error('Invalid widget value', value)\r\n            return\r\n        }\r\n\r\n        setSelectedWidgetId(value)\r\n    }, [setSelectedWidgetId])\r\n\r\n    const openWidgetOnSaved = useCallback(() => {\r\n        onSaved?.()\r\n        onClose()\r\n    }, [onSaved, onClose])\r\n\r\n    const handleOpenWidget = useHandleWidgetSelect({\r\n        onSaved: openWidgetOnSaved,\r\n        replacingWidgetId,\r\n    })\r\n\r\n    const save = useCallback(() => {\r\n        const selectedIds = getIdsFromOptionValue(selectedWidgetId)\r\n        const selectedWidget = widgetsToCopy\r\n            .find(({config, wallboardId}) => selectedIds.widgetId === config.id && selectedIds.wallboardId === wallboardId)?.config\r\n        assertDefined(selectedWidget)\r\n        switch (selectedWidget.type) {\r\n            case 'news':\r\n                return handleOpenWidget('news', {\r\n                    title: selectedWidget.title,\r\n                    newsCount: selectedWidget.subscription?.req.limit,\r\n                })\r\n            case 'empty':\r\n                return\r\n            case 'grid':\r\n                return handleOpenWidget(selectedWidget.subscription.type === 'service_grid' ? 'service_grid' : 'agent_grid', selectedWidget)\r\n            default:\r\n                return handleOpenWidget(selectedWidget.type, selectedWidget)\r\n        }\r\n    }, [handleOpenWidget, selectedWidgetId, widgetsToCopy])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { t.WALLBOARD_WIDGET_EMPTY.copy_from_other() }\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Dropdown\r\n                    selection\r\n                    search\r\n                    options={options}\r\n                    value={selectedWidgetId}\r\n                    onChange={handleSelectWidgetId}\r\n                    loading={isLoading}\r\n                    disabled={isLoading}\r\n                    className=\"w-full\"\r\n                    openOnFocus={false}\r\n                    selectOnBlur={false}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton enabledInOffline onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    disabled={!selectedWidgetId}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nfunction getOptionsValue(wallboardId: string, widgetId: string) {\r\n    return `${wallboardId}/${widgetId}`\r\n}\r\n\r\nfunction getIdsFromOptionValue(value: string) {\r\n    const [wallboardId, widgetId] = value.split('/')\r\n\r\n    return {\r\n        wallboardId,\r\n        widgetId,\r\n    }\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useQueryClient} from '@tanstack/react-query'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {WallboardApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey, useWallboardsQuery} from '../../queries'\r\nimport type {WidgetToCopy} from '../../types'\r\n\r\n\r\nexport function useGetWidgetsToCopy() {\r\n    const {data: allWallboards} = useWallboardsQuery()\r\n    const queryClient = useQueryClient()\r\n\r\n    return useCallback(async () => {\r\n        assertDefined(allWallboards)\r\n        const allWallboardsDetailsQueries = allWallboards?.map(w => {\r\n            return queryClient.fetchQuery({\r\n                queryKey: queryKey.wallboard(w.id),\r\n                queryFn: () => WallboardApiServices.getWallboardDetails({wallboardId: w.id}),\r\n            })\r\n        })\r\n        const allWallboardsDetailsQueriesData = await Promise.allSettled(allWallboardsDetailsQueries)\r\n        return allWallboardsDetailsQueriesData.reduce<WidgetToCopy[]>((acc, result) => {\r\n            if (result.status !== 'fulfilled') {\r\n                return acc\r\n            }\r\n            const wallboardDetails = result.value\r\n\r\n            const wallboardItemOptions = wallboardDetails.config.widgets\r\n                .filter(w => w.config.type !== 'empty')\r\n                .map<WidgetToCopy>(widgetItem => ({\r\n                    config: widgetItem.config,\r\n                    title: `(${wallboardDetails.name}) ${widgetItem.config.title}`,\r\n                    wallboardId: wallboardDetails.id,\r\n                }))\r\n\r\n            return [\r\n                ...acc,\r\n                ...wallboardItemOptions,\r\n            ]\r\n        }, [])\r\n    }, [allWallboards, queryClient])\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport {SelectField} from '@bpinc/lib-forms-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ImageWidgetSettingsModalFormValues} from './ImageSettingsModal'\r\n\r\n\r\ninterface ImageStyleSelectProps {\r\n    control: Control<ImageWidgetSettingsModalFormValues>\r\n}\r\n\r\nexport const ImageStyleSelect: React.FC<ImageStyleSelectProps> = ({\r\n    control,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const options = useMemo(() => [\r\n        {\r\n            key: 'cover',\r\n            value: 'cover',\r\n            text: t.WALLBOARD_WIDGET_IMAGE.style_cover(),\r\n            onClick: noop,\r\n        },\r\n        {\r\n            key: 'contain',\r\n            value: 'contain',\r\n            text: t.WALLBOARD_WIDGET_IMAGE.style_contain(),\r\n            onClick: noop,\r\n        },\r\n    ], [t])\r\n\r\n    return (\r\n        <SelectField\r\n            name=\"style\"\r\n            fluid\r\n            upward\r\n            control={control}\r\n            search\r\n            selection\r\n            options={options}\r\n            placeholder={t.WALLBOARD_WIDGET_IMAGE.style()}\r\n        />\r\n    )\r\n}\r\n","export const getFileDataUrl = (file: File) => new Promise<string>(resolve => {\r\n    const reader = new FileReader()\r\n\r\n    reader.onload = () => {\r\n        // as string because of readAsDataURL\r\n        resolve(reader.result as string)\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n})\r\n","import type {ChangeEventHandler} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport {getFileDataUrl} from './getFileDataUrl'\r\nimport type {ImageWidgetSettingsModalFormValues} from './ImageSettingsModal'\r\n\r\n\r\ninterface SelectImageProps {\r\n    control: Control<ImageWidgetSettingsModalFormValues>\r\n}\r\n\r\nexport const SelectImage: React.FC<SelectImageProps> = ({\r\n    control,\r\n}) => {\r\n    const {\r\n        field: {\r\n            value: imageName,\r\n            onChange: onImageNameChange,\r\n        },\r\n    } = useController({\r\n        name: 'imageName',\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: {onChange: onImageUrlChange},\r\n    } = useController({\r\n        name: 'imageUrl',\r\n        control,\r\n    })\r\n\r\n    const handleUploadFiles: ChangeEventHandler<HTMLInputElement> = useCallback(async event => {\r\n        const file = event.target.files?.[0]\r\n\r\n        if (!file) {\r\n            return\r\n        }\r\n\r\n        const newImageUrl = await getFileDataUrl(file)\r\n        const newImageName = file.name\r\n\r\n        onImageUrlChange(newImageUrl)\r\n        onImageNameChange(newImageName)\r\n    }, [onImageNameChange, onImageUrlChange])\r\n\r\n    return (\r\n        <div className=\"mb-2.5 flex gap-2.5\">\r\n            {imageName}\r\n\r\n            <input\r\n                type=\"file\"\r\n                onChange={handleUploadFiles}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\nimport {pick} from 'lodash-es'\r\n\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport type {FormValues} from '../types'\r\nimport {ImageStyleSelect} from './ImageStyleSelect'\r\nimport {SelectImage} from './SelectImage'\r\nimport type {ImageWidgetStyle} from './types'\r\n\r\n\r\nexport interface ImageWidgetSettingsModalFormValues {\r\n    style: ImageWidgetStyle\r\n    imageName: string\r\n    imageUrl: string\r\n}\r\n\r\nexport function assertFormValuesValidForImageWidgetSettingsModal(\r\n    fv: FormValues,\r\n): asserts fv is ImageWidgetSettingsModalFormValues {\r\n    if (!(\r\n        'style' in fv &&\r\n        'imageName' in fv &&\r\n        'imageUrl' in fv\r\n    )) {\r\n        throw new Error('Form values is not valid for image widget settings modal')\r\n    }\r\n}\r\n\r\n\r\nexport interface ImageWidgetSettingsModalParams extends ModalBase {\r\n    type: 'image_widget_settings'\r\n    replacingWidgetId: string\r\n    formValues?: ImageWidgetSettingsModalFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\ntype ImageSettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: ImageWidgetSettingsModalFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\nexport const ImageSettingsModal: React.FC<ImageSettingsModalProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n    } = useForm<ImageWidgetSettingsModalFormValues>({\r\n        defaultValues: {\r\n            style: formValues?.style || 'cover',\r\n            imageName: formValues?.imageName || '',\r\n            imageUrl: formValues?.imageUrl || '',\r\n        },\r\n    })\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            type: 'image',\r\n            ...formData,\r\n            ...pick(\r\n                widget,\r\n                'id',\r\n                'x',\r\n                'y',\r\n                'width',\r\n                'height',\r\n                'title',\r\n                'show_settings',\r\n            ),\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { t.WALLBOARD_WIDGET_IMAGE.name() }\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <SelectImage control={control} />\r\n                <ImageStyleSelect control={control} />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton enabledInOffline onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {TextField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport type {FormValues} from '../types'\r\n\r\n\r\ninterface NewsWidgetFormValues {\r\n    title: string\r\n    newsCount?: number\r\n}\r\n\r\nexport interface NewsWidgetSettingsModalParams extends ModalBase {\r\n    type: 'news_widget_settings'\r\n    replacingWidgetId: string\r\n    formValues?: NewsWidgetFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\nexport function assertFormValuesValidForNewsWidgetSettingsModal(\r\n    fv: FormValues,\r\n): asserts fv is NewsWidgetFormValues {\r\n    if (!(\r\n        'title' in fv &&\r\n        'newsCount' in fv\r\n    )) {\r\n        throw new Error('Form values are not valid for news widget settings modal')\r\n    }\r\n}\r\n\r\ntype NewsSettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: NewsWidgetFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\nexport const NewsSettingsModal: React.FC<NewsSettingsModalProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n    } = useForm<NewsWidgetFormValues>({\r\n        defaultValues: {\r\n            title: formValues?.title || t.WALLBOARD_WIDGET_EMPTY.news(),\r\n            newsCount: formValues?.newsCount || 6,\r\n        },\r\n    })\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n\r\n        updateWidget({\r\n            type: 'news',\r\n            title: formData.title,\r\n            subscription: {\r\n                type: 'chat_messages',\r\n                req: {\r\n                    filter: '',\r\n                    limit: Number(formData.newsCount),\r\n                },\r\n            },\r\n            id: widget.id,\r\n            x: widget.x,\r\n            y: widget.y,\r\n            width: widget.width,\r\n            height: widget.height,\r\n            show_settings: widget.show_settings,\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { t.WALLBOARD_WIDGET_EMPTY.news() }\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <TextField\r\n                    name=\"title\"\r\n                    fluid\r\n                    placeholder={t.WALLBOARD_WIDGET_NEWS.title()}\r\n                    className=\"mb-2\"\r\n                    control={control}\r\n                />\r\n                <TextField\r\n                    name=\"newsCount\"\r\n                    type=\"number\"\r\n                    placeholder={t.WALLBOARD_WIDGET_NEWS.newsCount()}\r\n                    fluid\r\n                    control={control}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton enabledInOffline onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {DoubleColumnSelect, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useServicesQuery} from '../queries'\r\n\r\n\r\ntype ServicesSelectModalProps = CommonModalProps & {\r\n    services: string[]\r\n    onSelect: (services: string[]) => void\r\n}\r\n\r\nexport const ServicesSelectModal: React.FC<ServicesSelectModalProps> = ({services, onSelect, onClose, ...commonModalProps}) => {\r\n    const {t} = useLocalizationState()\r\n    const [selectedServices, setSelectedServices] = useState(services)\r\n\r\n    const handleOnComplete = useCallback(() => {\r\n        onSelect(selectedServices)\r\n        onClose()\r\n    }, [onClose, onSelect, selectedServices])\r\n\r\n    const {data: allServices} = useServicesQuery()\r\n\r\n    const options = useMemo(() => {\r\n        return (allServices || []).map(service => ({\r\n            value: service.id,\r\n            text: service.name,\r\n        }))\r\n    }, [allServices])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            {...commonModalProps}\r\n        >\r\n            <Modal.Header>\r\n                {t.WALLBOARD_SERVICES_MODAL.title()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <DoubleColumnSelect\r\n                    className=\"max-h-[70vh] min-h-[280px]\"\r\n                    value={selectedServices}\r\n                    setValue={setSelectedServices}\r\n                    options={options}\r\n                    availableTitle={t.GLOBAL.available()}\r\n                    selectedTitle={t.GLOBAL.included()}\r\n                    noSearch\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    primary\r\n                    onClick={handleOnComplete}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ServicesSelectModal} from '../ServicesSelectModal'\r\n\r\n\r\nexport const ServicesSelect = <TValues, >({control, setValue}: FieldControlProps<TValues, {serviceIds: string[]}, 'control' | 'setValue'>) => {\r\n    const {\r\n        field: {\r\n            value: serviceIds,\r\n        },\r\n    } = useController({\r\n        name: 'serviceIds',\r\n        control,\r\n    })\r\n\r\n    const openServicesSelectModal = useModalComponentOpener(ServicesSelectModal)\r\n    const handleSelectServices = useCallback(() => {\r\n        openServicesSelectModal({\r\n            services: serviceIds,\r\n            onSelect: updatedServices => {\r\n                setValue('serviceIds', updatedServices)\r\n            },\r\n        })\r\n    }, [openServicesSelectModal, serviceIds, setValue])\r\n\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <SemanticButton\r\n            basic\r\n            onClick={handleSelectServices}\r\n            enabledInOffline\r\n            className=\"mb-4\"\r\n        >\r\n            {t.WALLBOARD_WIDGETS_GRIDS.services()}\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\nimport {cloneDeep, pick} from 'lodash-es'\r\n\r\nimport {CheckboxField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigGrid, SupervisorWidgetServicesGridSubscriptionData} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {useServicesQuery} from '../../queries'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport type {ColumnsFiledType} from '../shared/GridFormsComponents/ColumnsField'\r\nimport {ColumnsField, createEmptyColumn} from '../shared/GridFormsComponents/ColumnsField'\r\nimport type {FormValues} from '../types'\r\nimport {ServicesSelect} from './ServicesSelect'\r\n\r\n\r\ntype ServiceGridModalSettingsFormValues = {\r\n    title: string\r\n    serviceIds: string[]\r\n    columnTitleEnabled: boolean\r\n    maxItemsToShow: number\r\n} & ColumnsFiledType\r\n\r\ntype ConfigServiceGrid = SupervisorWidgetConfigGrid & {subscription: SupervisorWidgetServicesGridSubscriptionData}\r\n\r\nexport function assertFormValuesValidForConfigServiceGrid(\r\n    fv: FormValues,\r\n): asserts fv is ConfigServiceGrid {\r\n    if (!(\r\n        'title' in fv &&\r\n        'columtitle' in fv &&\r\n        'limit' in fv &&\r\n        'service_ids' in fv &&\r\n        'columns' in fv &&\r\n        'subscription' in fv &&\r\n        typeof fv.subscription === 'object' &&\r\n        fv.subscription !== null &&\r\n        'type' in fv.subscription &&\r\n        fv.subscription.type === 'service_grid'\r\n    )) {\r\n        throw new Error('Form values is not valid for config service grid')\r\n    }\r\n}\r\n\r\nexport interface ServiceGridWidgetSettingsModalParams extends ModalBase {\r\n    type: 'service_grid_settings'\r\n    replacingWidgetId: string\r\n    formValues?: ConfigServiceGrid\r\n    onSaved?: () => void\r\n}\r\n\r\ntype ServiceGridModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: ConfigServiceGrid\r\n    onSaved?: () => void\r\n}\r\n\r\nconst convertToForm = (config: ConfigServiceGrid): Partial<ServiceGridModalSettingsFormValues> => {\r\n    const newColumns = config?.subscription?.req?.columns.map((col, index) => {\r\n        const existingOrder = config?.subscription?.req?.order?.find(({by}) => {\r\n            return Number(by) === index + 1\r\n        })\r\n        return {\r\n            ...col,\r\n            dir: (existingOrder?.dir as 'DESC' | 'ASC') || 'EMPT',\r\n            order: index + 1,\r\n        }\r\n    })\r\n    return {\r\n        title: config?.title,\r\n        columnTitleEnabled: config?.columtitle,\r\n        serviceIds: cloneDeep(config?.subscription?.req?.service_ids),\r\n        maxItemsToShow: cloneDeep(config?.subscription?.req?.limit),\r\n        columns: newColumns,\r\n    }\r\n\r\n}\r\n\r\ntype FormWidgetConfig = Pick<SupervisorWidgetConfigGrid, 'title' | 'columtitle' | 'subscription'>\r\n\r\nconst convertToBackend = (formValues: ServiceGridModalSettingsFormValues, id: string): FormWidgetConfig => {\r\n    const newOrder = formValues.columns.reduce<{ by: string; dir: 'ASC' | 'DESC' }[]>((acc, column, index) => {\r\n        if (column.dir && column.dir !== 'EMPT') {\r\n            return [...acc, {by: String(index + 1), dir: column.dir}]\r\n        }\r\n        return acc\r\n    }, [])\r\n    return {\r\n        title: formValues.title || '',\r\n        columtitle: formValues.columnTitleEnabled,\r\n        subscription: {\r\n            type: 'service_grid',\r\n            req: {\r\n                id,\r\n                service_ids: formValues.serviceIds,\r\n                limit: formValues.maxItemsToShow,\r\n                columns: formValues.columns.map((col, ind) => ({...col, id: String(ind + 1)})),\r\n                order: newOrder,\r\n            },\r\n        },\r\n    }\r\n}\r\n\r\nconst DEFAULT_COLUMN_MAX = 6\r\n\r\nexport const ServiceGridModal: React.FC<ServiceGridModalProps> = ({\r\n    onClose,\r\n    replacingWidgetId,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const formValuesParsed = useMemo(() => {\r\n        if (formValues) {\r\n            return convertToForm(formValues)\r\n        }\r\n\r\n    }, [formValues])\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n    } = useForm<ServiceGridModalSettingsFormValues>({\r\n        defaultValues: {\r\n            title: formValuesParsed?.title || t.WALLBOARD_WIDGET_EMPTY.service_grid(),\r\n            serviceIds: formValuesParsed?.serviceIds || [],\r\n            columnTitleEnabled: formValuesParsed?.columnTitleEnabled !== false,\r\n            maxItemsToShow: formValuesParsed?.maxItemsToShow || DEFAULT_COLUMN_MAX,\r\n            columns: formValuesParsed?.columns || [createEmptyColumn(0, 'service_grid')],\r\n        },\r\n    })\r\n\r\n    const {data: services} = useServicesQuery()\r\n\r\n    useEffect(() => {\r\n        const servicesId = (services || []).map(({id}) => id)\r\n        setValue('serviceIds', servicesId)\r\n    }, [control, services, setValue])\r\n\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            type: 'grid',\r\n            ...convertToBackend(formData, widget.id),\r\n            ...pick(\r\n                widget,\r\n                'id',\r\n                'x',\r\n                'y',\r\n                'width',\r\n                'height',\r\n                'show_settings',\r\n            ),\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                {t.WALLBOARD_WIDGETS_GRIDS.service_grid()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <div className=\"mb-4 flex gap-4\">\r\n                    <TextField\r\n                        fluid\r\n                        label={t.GLOBAL.title()}\r\n                        name=\"title\"\r\n                        placeholder={t.GLOBAL.title()}\r\n                        className=\"grow [&>label]:font-bold\"\r\n                        control={control}\r\n                    />\r\n                    <TextField\r\n                        fluid\r\n                        label={t.WALLBOARD_WIDGETS_GRIDS.max_to_show()}\r\n                        name=\"maxItemsToShow\"\r\n                        type=\"number\"\r\n                        className=\"shrink-0 [&>label]:font-bold\"\r\n                        placeholder={t.WALLBOARD_WIDGETS_GRIDS.max_to_show()}\r\n                        control={control}\r\n                    />\r\n                    <CheckboxField\r\n                        label={t.WALLBOARD_WIDGETS_GRIDS.column_headings()}\r\n                        name=\"columnTitleEnabled\"\r\n                        toggle\r\n                        className=\"mt-4 shrink-0 self-center\"\r\n                        control={control}\r\n                    />\r\n                </div>\r\n                <ServicesSelect control={control} setValue={setValue} />\r\n                <ColumnsField control={control} setValue={setValue} type=\"service_grid\" />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} enabledInOffline>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\nimport {pick} from 'lodash-es'\r\n\r\nimport {TextAreaField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport type {FormValues} from '../types'\r\n\r\n\r\ninterface TextWidgetFormValues {\r\n    title: string\r\n    text: string\r\n}\r\n\r\nexport interface TextWidgetSettingsModalParams extends ModalBase {\r\n    type: 'text_widget_settings'\r\n    replacingWidgetId: string\r\n    formValues?: TextWidgetFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\nexport function assertFormValuesValidForTextWidgetSettingsModal(\r\n    fv: FormValues,\r\n): asserts fv is TextWidgetFormValues {\r\n    if (!(\r\n        'title' in fv &&\r\n        'text' in fv\r\n    )) {\r\n        throw new Error('Form values are not valid for text widget settings modal')\r\n    }\r\n}\r\n\r\ntype TextSettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: TextWidgetFormValues\r\n    onSaved?: () => void\r\n}\r\n\r\nexport const TextSettingsModal: React.FC<TextSettingsModalProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n    } = useForm<TextWidgetFormValues>({\r\n        defaultValues: {\r\n            title: formValues?.title || t.WALLBOARD_WIDGET_TEXT.text(),\r\n            text: formValues?.text || '',\r\n        },\r\n    })\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            type: 'text',\r\n            ...formData,\r\n            ...pick(\r\n                widget,\r\n                'id',\r\n                'x',\r\n                'y',\r\n                'width',\r\n                'height',\r\n                'show_settings',\r\n            ),\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { t.WALLBOARD_WIDGET_EMPTY.text() }\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <TextField\r\n                    name=\"title\"\r\n                    fluid\r\n                    placeholder={t.WALLBOARD_WIDGET_TEXT.title()}\r\n                    className=\"mb-2\"\r\n                    control={control}\r\n                />\r\n                <TextAreaField\r\n                    name=\"text\"\r\n                    placeholder={t.WALLBOARD_WIDGET_TEXT.text()}\r\n                    className=\"w-full rounded border border-solid border-gray-300 p-3\"\r\n                    control={control}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} enabledInOffline>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\ntype Props = {\r\n    text: string\r\n}\r\n\r\nexport const FormLabel: React.FC<Props> = ({text}) => {\r\n    return (\r\n        <label className=\"font-bold\">\r\n            {text}\r\n:\r\n        </label>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport const GridRow: FCWithChildren = ({children}) => {\r\n    return (\r\n        <div className=\"mb-2 grid grid-cols-[2fr_5fr] gap-2.5\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SelectField} from '@bpinc/lib-forms-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\n\r\n\r\nexport const SeriesTypeField = <TValues, >({control}: FieldControlProps<TValues, { seriesType: 'teams' | 'services' }>) => {\r\n    const {t} = useLocalizationState()\r\n    const options = useMemo(() => [\r\n        {\r\n            value: 'services',\r\n            text: t.WALLBOARD_WIDGET_TIME_SERIES.services(),\r\n        },\r\n        {\r\n            value: 'teams',\r\n            text: t.WALLBOARD_WIDGET_TIME_SERIES.teams(),\r\n        },\r\n    ], [t.WALLBOARD_WIDGET_TIME_SERIES])\r\n    return (\r\n        <GridRow>\r\n            <FormLabel text={t.WALLBOARD_WIDGET_TIME_SERIES.series_type()} />\r\n            <SelectField search options={options} fluid name=\"seriesType\" control={control} />\r\n        </GridRow>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\nimport {useWatch} from 'react-hook-form'\r\n\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SelectField} from '@bpinc/lib-forms-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {StatsMessagesDeclarationTypeMapper} from '../../stats/types'\r\nimport {useStatsOptions} from '../../stats/useStatsOptions'\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\n\r\n\r\nexport type Statistics = keyof (StatsMessagesDeclarationTypeMapper<'timeSeriesTeams'> & StatsMessagesDeclarationTypeMapper<'timeSeriesServices'>)\r\n\r\nexport const TEAMS_STATISTICS_DEFAULT = 'agents_busy'\r\nconst SERVICES_STATISTICS_DEFAULT = 'in_calls_waiting'\r\n\r\nexport const StatisticsField = <TValues, >({\r\n    control,\r\n    setValue,\r\n}: FieldControlProps<TValues, { statistics: Statistics; seriesType: 'teams' | 'services' }, 'control' | 'setValue'>) => {\r\n    const {t} = useLocalizationState()\r\n    const optionsTeams = useStatsOptions('timeSeriesTeams')\r\n    const optionsTeamsKeys = useMemo(() => {\r\n        return optionsTeams.reduce<{ [key: string]: 1 }>((acc, elem) => {\r\n            acc[elem.value] = 1\r\n            return acc\r\n        }, {})\r\n    }, [optionsTeams])\r\n\r\n    const optionsServices = useStatsOptions('timeSeriesServices')\r\n\r\n    const optionsServicesKeys = useMemo(() => {\r\n        return optionsServices.reduce<{ [key: string]: 1 }>((acc, elem) => {\r\n            acc[elem.value] = 1\r\n            return acc\r\n        }, {})\r\n    }, [optionsServices])\r\n\r\n    const seriesTypeValue = useWatch({name: 'seriesType', control})\r\n    const statisticValue = useWatch({name: 'statistics', control})\r\n\r\n    useEffect(() => {\r\n        if (seriesTypeValue === 'teams' && statisticValue && !optionsTeamsKeys[statisticValue]) {\r\n            setValue('statistics', TEAMS_STATISTICS_DEFAULT)\r\n        }\r\n\r\n        if (seriesTypeValue === 'services' && statisticValue && !optionsServicesKeys[statisticValue]) {\r\n            setValue('statistics', SERVICES_STATISTICS_DEFAULT)\r\n        }\r\n\r\n    }, [seriesTypeValue, statisticValue, optionsTeamsKeys, optionsServicesKeys, setValue])\r\n\r\n    return (\r\n        <GridRow>\r\n            <FormLabel text={t.WALLBOARD_WIDGET_TIME_SERIES.series_type()} />\r\n            <SelectField search options={seriesTypeValue === 'teams' ? optionsTeams : optionsServices} fluid name=\"statistics\" control={control} />\r\n        </GridRow>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {SelectField} from '@bpinc/lib-forms-ui'\r\nimport {MS_IN_DAY, MS_IN_HOUR, MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\n\r\n\r\nexport const TimeRangeField = <TValues, >({control}: FieldControlProps<TValues, { timeRange: number }>) => {\r\n    const {t} = useLocalizationState()\r\n    const options = useMemo(() => [\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.mins_5(), 'value': MS_IN_MINUTE * 5},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.mins_15(), 'value': MS_IN_MINUTE * 15},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.hours_1(), 'value': MS_IN_HOUR},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.hours_3(), 'value': MS_IN_HOUR * 3},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.hours_6(), 'value': MS_IN_HOUR * 6},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.hours_12(), 'value': MS_IN_HOUR * 12},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.hours_24(), 'value': MS_IN_DAY},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.days_2(), 'value': MS_IN_DAY * 2},\r\n        {'text': t.WALLBOARD_WIDGET_TIME_SERIES.days_7(), 'value': MS_IN_DAY * 7},\r\n    ], [t.WALLBOARD_WIDGET_TIME_SERIES])\r\n    return (\r\n        <GridRow>\r\n            <FormLabel text={t.WALLBOARD_WIDGET_TIME_SERIES.series_type()} />\r\n            <SelectField search options={options} fluid name=\"timeRange\" control={control} />\r\n        </GridRow>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\nimport {pick} from 'lodash-es'\r\n\r\nimport {TextField} from '@bpinc/lib-forms-ui'\r\nimport {MS_IN_DAY} from '@bpinc/lib-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigTimeSeries} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps, ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\nimport type {FormValues} from '../types'\r\nimport {SeriesTypeField} from './SeriesType'\r\nimport type {Statistics} from './Statistics'\r\nimport {StatisticsField, TEAMS_STATISTICS_DEFAULT} from './Statistics'\r\nimport {TimeRangeField} from './TimeRange'\r\n\r\n\r\ninterface TimeSeriesModalFormValues {\r\n    title: string\r\n    seriesType: 'teams' | 'services'\r\n    statistics: Statistics\r\n    timeRange: number\r\n}\r\n\r\nexport function assertFormValuesValidForTimeSeriesModal(\r\n    fv: FormValues,\r\n): asserts fv is SupervisorWidgetConfigTimeSeries {\r\n    if (!(\r\n        'title' in fv &&\r\n        'series_type' in fv &&\r\n        'value' in fv &&\r\n        'timeRange' in fv\r\n    )) {\r\n        throw new Error('Form values are not valid for time series modal')\r\n    }\r\n}\r\n\r\nexport interface TimeSeriesWidgetSettingsModalParams extends ModalBase {\r\n    type: 'time_series_settings'\r\n    replacingWidgetId: string\r\n    //TODO: Why formValues doesn't have type TimeSeriesModalFormValues?\r\n    formValues?: SupervisorWidgetConfigTimeSeries\r\n    onSaved?: () => void\r\n}\r\n\r\ntype TimeSeriesModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    formValues?: SupervisorWidgetConfigTimeSeries\r\n    onSaved?: () => void\r\n}\r\n\r\nconst TIME_RANGE_DEFAULT = MS_IN_DAY * 7\r\n\r\n\r\nconst convertToBackend = (formData: TimeSeriesModalFormValues): Pick<SupervisorWidgetConfigTimeSeries, 'series_type' | 'value' | 'title' | 'timeRange'> => {\r\n    return {\r\n        series_type: formData.seriesType,\r\n        value: formData.statistics,\r\n        title: formData.title,\r\n        timeRange: String(formData.timeRange),\r\n    }\r\n}\r\n\r\nconst convertToForm = (config: SupervisorWidgetConfigTimeSeries): TimeSeriesModalFormValues => {\r\n    return {\r\n        seriesType: config.series_type,\r\n        title: config.title,\r\n        statistics: (config.value as Statistics),\r\n        timeRange: Number(config.timeRange),\r\n    }\r\n}\r\n\r\nexport const TimeSeriesModal: React.FC<TimeSeriesModalProps> = ({\r\n    onClose,\r\n    replacingWidgetId,\r\n    onSaved,\r\n    formValues,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const parsedForm = useMemo(() => {\r\n        if (formValues) {\r\n            return convertToForm(formValues)\r\n        }\r\n    }, [formValues])\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n    } = useForm<TimeSeriesModalFormValues>({\r\n        defaultValues: {\r\n            title: parsedForm?.title || t.WALLBOARD_WIDGET_TIME_SERIES.name(),\r\n            seriesType: parsedForm?.seriesType || 'teams',\r\n            statistics: parsedForm?.statistics || TEAMS_STATISTICS_DEFAULT,\r\n            timeRange: parsedForm?.timeRange || TIME_RANGE_DEFAULT,\r\n        },\r\n    })\r\n\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const save = useMemo(() => handleSubmit(async formData => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            type: 'time_series',\r\n            ...convertToBackend(formData),\r\n            ...pick(\r\n                widget,\r\n                'id',\r\n                'x',\r\n                'y',\r\n                'width',\r\n                'height',\r\n                'show_settings',\r\n            ),\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n    }), [handleSubmit, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                {t.WALLBOARD_WIDGETS_GRIDS.name()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <GridRow>\r\n                    <FormLabel text={t.GLOBAL.title()} />\r\n                    <TextField\r\n                        fluid\r\n                        name=\"title\"\r\n                        placeholder={t.GLOBAL.title()}\r\n                        control={control}\r\n                    />\r\n                </GridRow>\r\n                <SeriesTypeField control={control} />\r\n                <StatisticsField control={control} setValue={setValue} />\r\n                <TimeRangeField control={control} />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} enabledInOffline>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={save}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {EmptyWidgetSettingsModal} from './EmptyWidgetSettingsModal'\r\n\r\n\r\ninterface Props {\r\n    onClose?: () => void\r\n    widget?: SupervisorWidget | null\r\n}\r\nexport const useHandleCancelWidgetModal = ({onClose, widget}: Props) => {\r\n    const openEmptyWidgetSettingsModal = useModalComponentOpener(EmptyWidgetSettingsModal)\r\n    return useCallback(() => {\r\n        if (widget && widget.type === 'empty' && !document.querySelector('[data-id=\"settings-widgets\"]')) {\r\n            openEmptyWidgetSettingsModal({\r\n                replacingWidgetId: widget.id,\r\n            })\r\n            onClose?.()\r\n        }\r\n        onClose?.()\r\n    }, [onClose, openEmptyWidgetSettingsModal, widget])\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownItemProps, DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useAgentsQuery} from '../queries'\r\nimport {FormLabel} from './shared/FormLabel'\r\nimport {GridRow} from './shared/GridRow'\r\nimport {useHandleCancelWidgetModal} from './useHandleCancelWidgetModal'\r\n\r\n\r\ntype SelectUserModalProps = CommonModalProps & {\r\n    onSelected?: (userId: string, userName: string) => void\r\n    currentWidgetConfig?: SupervisorWidget\r\n}\r\n\r\nexport const SelectUserModal: React.FC<SelectUserModalProps> = ({\r\n    onClose,\r\n    onSelected,\r\n    currentWidgetConfig,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const selfUserId = useSessionState('userId')\r\n    assertDefined(selfUserId)\r\n\r\n    const [selectedUser, setSelectedUser] = useState<string>(selfUserId)\r\n\r\n    const selfUserOption = useMemo(() => {\r\n        return {\r\n            value: selfUserId,\r\n            text: t.WALLBOARD.logged_in_user(),\r\n        }\r\n    }, [selfUserId, t.WALLBOARD])\r\n\r\n    const {data: agents, isLoading} = useAgentsQuery()\r\n\r\n    const options = useMemo(() => {\r\n        const combinedOptions = (agents ?? []).reduce<DropdownItemProps[]>(\r\n            (acc, agent) => {\r\n                if (agent.id === selfUserOption.value) {\r\n                    return acc\r\n                }\r\n\r\n                acc.push({\r\n                    value: agent.id,\r\n                    text: agent.name,\r\n                })\r\n\r\n                return acc\r\n            },\r\n            [],\r\n        )\r\n\r\n        return [\r\n            selfUserOption,\r\n            ...combinedOptions.sort((a, b) => {\r\n                return typeof a.text === 'string' && typeof b.text === 'string'\r\n                    ? a.text.toLocaleLowerCase().localeCompare(b.text.toLocaleLowerCase())\r\n                    : 0\r\n            }),\r\n        ]\r\n    }, [agents, selfUserOption])\r\n\r\n    const handleOk = useCallback(() => {\r\n        const user = agents?.find(({id}) => id === selectedUser)\r\n        if (user) {\r\n            onSelected?.(user.id, user.name)\r\n        }\r\n        onClose()\r\n    }, [agents, onClose, onSelected, selectedUser])\r\n\r\n    const handleSelectUser = useCallback((_evt: SyntheticEvent, {value}: DropdownProps) => {\r\n        if (typeof value === 'string') {\r\n            setSelectedUser(value)\r\n        }\r\n    }, [])\r\n\r\n    const handleCancelWidgetModal = useHandleCancelWidgetModal({onClose, widget: currentWidgetConfig})\r\n\r\n    return (\r\n        <Modal\r\n            aria-labelledby=\"selectUserModalHeader\"\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-full\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"selectUserModalHeader\">\r\n                {t.WALLBOARD.agent_select_title()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <GridRow>\r\n                    <FormLabel text={t.WALLBOARD.agent_select_label()} />\r\n                    <Dropdown\r\n                        onChange={handleSelectUser}\r\n                        value={selectedUser}\r\n                        options={options}\r\n                        search\r\n                        openOnFocus={false}\r\n                        selectOnBlur={false}\r\n                        loading={isLoading}\r\n                        disabled={isLoading}\r\n                    />\r\n                </GridRow>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={handleOk} primary>\r\n                    {t.GLOBAL.ok()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={handleCancelWidgetModal} enabledInOffline>\r\n                    {t.GLOBAL.cancel()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useAgentsQuery() {\r\n    return useQuery({\r\n        queryKey: queryKey.agents(),\r\n        queryFn: SupervisorWidgetsApiServices.getAgents,\r\n        staleTime: MS_IN_MINUTE * 5,\r\n    })\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {SelectUserModal} from '../../../SelectUserModal'\r\n\r\n\r\nexport const useAgendaWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const {updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const {t} = useLocalizationState()\r\n\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n\r\n    return useCallback((widgetConfig: SupervisorWidget) => {\r\n        openSelectUserModal({\r\n            onSelected: (userId, userName) => {\r\n                updateWidget({\r\n                    ...widgetConfig,\r\n                    type: 'agenda',\r\n                    title: t.WALLBOARD_AGENDA_WIDGET.name(userName),\r\n                    user_id: userId,\r\n                    userName,\r\n                })\r\n            },\r\n            currentWidgetConfig: widgetConfig,\r\n        })\r\n        onSaved()\r\n    }, [onSaved, openSelectUserModal, t.WALLBOARD_AGENDA_WIDGET, updateWidget])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {createBreakTimeWidgetSubscription} from '../../../helpers'\r\nimport {SelectUserModal} from '../../../SelectUserModal'\r\n\r\n\r\nexport const useBreakTimeWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const {updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback((currentWidgetConfig: SupervisorWidget) => {\r\n        openSelectUserModal({\r\n            onSelected: (userId, userName) => {\r\n                updateWidget({\r\n                    ...currentWidgetConfig,\r\n                    type: 'break_time',\r\n                    title: t.WALLBOARD_BREAK_TIME_WIDGET.name(userName),\r\n                    subscription: createBreakTimeWidgetSubscription(currentWidgetConfig.id, userId),\r\n                    userName,\r\n                    user_id: userId,\r\n                })\r\n            },\r\n            currentWidgetConfig,\r\n        })\r\n        onSaved()\r\n    }, [onSaved, openSelectUserModal, t.WALLBOARD_BREAK_TIME_WIDGET, updateWidget])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {assertCorrectWidget} from '../../../helpers'\r\n\r\n\r\nexport const useCreateTimeWidget = ({\r\n    onSaved,\r\n    replacingWidgetId,\r\n}: {\r\n    onSaved: () => void\r\n    replacingWidgetId: string\r\n}) => {\r\n    const {updateWidget, widget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    return useCallback(() => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            ...widget,\r\n            type: 'datetime',\r\n        })\r\n        onSaved()\r\n    }, [widget, replacingWidgetId, updateWidget, onSaved])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {createDispositionsWidgetSubscription} from '../../../helpers'\r\nimport {SelectUserModal} from '../../../SelectUserModal'\r\n\r\n\r\nexport const useDispositionsWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const {updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback((currentWidgetConfig: SupervisorWidget) => {\r\n        openSelectUserModal({\r\n            onSelected: (userId, userName) => {\r\n                updateWidget({\r\n                    ...currentWidgetConfig,\r\n                    type: 'dispositions',\r\n                    title: t.WALLBOARD_DISPOSITION_WIDGET.name(userName),\r\n                    subscription: createDispositionsWidgetSubscription(currentWidgetConfig.id, userId),\r\n                    user_id: userId,\r\n                    userName,\r\n                })\r\n            },\r\n            currentWidgetConfig,\r\n        })\r\n        onSaved()\r\n    }, [onSaved, openSelectUserModal, t.WALLBOARD_DISPOSITION_WIDGET, updateWidget])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {createMyStatsWidgetSubscription} from '../../../helpers'\r\nimport {SelectUserModal} from '../../../SelectUserModal'\r\n\r\n\r\nexport const useMyStatsWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const {updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const {t} = useLocalizationState()\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n\r\n    return useCallback((currentWidgetConfig: SupervisorWidget) => {\r\n        openSelectUserModal({\r\n            onSelected: (userId, userName) => {\r\n                updateWidget({\r\n                    ...currentWidgetConfig,\r\n                    type: 'my_stats',\r\n                    title: t.WALLBOARD_MY_STATS_WIDGET.name(userName),\r\n                    user_id: userId,\r\n                    userName,\r\n                    subscription: createMyStatsWidgetSubscription(currentWidgetConfig.id, userId),\r\n                })\r\n            },\r\n            currentWidgetConfig,\r\n        })\r\n        onSaved()\r\n    }, [openSelectUserModal, onSaved, t.WALLBOARD_MY_STATS_WIDGET, updateWidget])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport {createSatisfactionWidgetSubscription} from '../../../helpers'\r\nimport {SelectUserModal} from '../../../SelectUserModal'\r\n\r\n\r\nexport const useSatisfactionWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const {updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback((currentWidgetConfig: SupervisorWidget) => {\r\n        openSelectUserModal({\r\n            onSelected: (userId, userName) => {\r\n                updateWidget({\r\n                    ...currentWidgetConfig,\r\n                    type: 'satisfaction',\r\n                    title: t.WALLBOARD_SATISFACTION_WIDGET.name(userName),\r\n                    subscription: createSatisfactionWidgetSubscription(currentWidgetConfig.id, userId),\r\n                    user_id: userId,\r\n                    userName,\r\n                })\r\n            },\r\n            currentWidgetConfig,\r\n        })\r\n        onSaved()\r\n    }, [onSaved, openSelectUserModal, t.WALLBOARD_SATISFACTION_WIDGET, updateWidget])\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {useController, useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {CheckboxField, RadioFieldRaw, SelectField, TextField} from '@bpinc/lib-forms-ui'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {LinkLikeButton, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {SupervisorWidgetConfigGauge, SupervisorWidgetConfigSingle, TotalStatsType} from '@bpinc/lib-widgets-urls'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {useServicesQuery} from '../../queries'\r\nimport {useGetStatsConfig} from '../../stats/useGetStatsConfig'\r\nimport {useStatsOptions} from '../../stats/useStatsOptions'\r\nimport type {SupervisorWidgetTypes} from '../../types'\r\nimport {assertCorrectWidget} from '../helpers'\r\nimport {ServicesSelectModal} from '../ServicesSelectModal'\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\nimport {useHandleCancelWidgetModal} from '../useHandleCancelWidgetModal'\r\n\r\n\r\ntype SingleOrGaugeUpdateType = Omit<SupervisorWidgetConfigGauge | SupervisorWidgetConfigSingle, 'id' | 'x' | 'y' | 'width' | 'height' | 'show_settings'>\r\ntype SingleOrGaugeWidgetsTypes = Extract<SupervisorWidgetTypes, 'gauge' | 'single'>\r\n\r\ntype SingleOrGaugeSettingsModalFormValues = {\r\n    type: SingleOrGaugeWidgetsTypes\r\n    title: string\r\n    value: TotalStatsType\r\n    optValue?: TotalStatsType\r\n    alertThreshold: number\r\n    warningThreshold: number\r\n    maxThreshold: number\r\n    warningSound: boolean\r\n    serviceIds: string[]\r\n    dispositions: string[]\r\n}\r\n\r\ntype SingleOrGaugeSettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n    widgetType: SingleOrGaugeWidgetsTypes\r\n    onSaved?: () => void\r\n}\r\n\r\nexport const SingleOrGaugeSettingsModal: React.FC<SingleOrGaugeSettingsModalProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    onSaved,\r\n    widgetType,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n    const openSelectService = useModalComponentOpener(ServicesSelectModal)\r\n    const statOptions = useStatsOptions('statsSingle')\r\n    const getStatsConfig = useGetStatsConfig()\r\n    const {data: services} = useServicesQuery()\r\n    const serviceIds = useMemo(() => services?.map(({id}) => id) || [], [services])\r\n\r\n\r\n    const defaultValues = useMemo(() => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        if (widget.type !== 'single' && widget.type !== 'gauge') {\r\n            return getWidgetDefaultFormData(widgetType, t, serviceIds)\r\n        }\r\n\r\n        return {\r\n            type: widget.type,\r\n            title: widget.title,\r\n            serviceIds: [...(widget.subscription?.service_ids || [])],\r\n            dispositions: [...(widget.subscription?.dispositions || [])],\r\n            alertThreshold: widget.alertThreshold,\r\n            warningThreshold: widget.warningThreshold,\r\n            warningSound: widget.warning_sound,\r\n            maxThreshold: widget.maxThreshold,\r\n            value: convertValueToStatType(widget.value),\r\n            optValue: widget.optValue ? convertValueToStatType(widget.optValue) : undefined,\r\n        }\r\n\r\n        function convertValueToStatType(value: string): TotalStatsType {\r\n            return value.split('|')[0].trim() as TotalStatsType\r\n        }\r\n    }, [widget, replacingWidgetId, widgetType, t, serviceIds])\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n    } = useForm<SingleOrGaugeSettingsModalFormValues>({\r\n        defaultValues,\r\n    })\r\n\r\n    const {\r\n        field: typeField,\r\n    } = useController({\r\n        name: 'type',\r\n        control,\r\n        defaultValue: 'gauge',\r\n    })\r\n\r\n    const {\r\n        field: serviceIdsField,\r\n    } = useController({\r\n        name: 'serviceIds',\r\n        control,\r\n    })\r\n\r\n    const handleCancelWidgetModal = useHandleCancelWidgetModal({onClose, widget})\r\n\r\n    const handleSave = useMemo(() => handleSubmit(async (formData: SingleOrGaugeSettingsModalFormValues) => {\r\n        const valueFormat = getStatsConfig('statsSingle', formData.value).format\r\n\r\n        const reqData = truthy([formData.value, formData.optValue])\r\n\r\n        const data: SingleOrGaugeUpdateType = {\r\n            type: formData.type,\r\n            title: formData.title,\r\n            value: convertStatToValue(formData.value, valueFormat),\r\n            optValue: formData.optValue\r\n                ? convertStatToValue(formData.optValue, getStatsConfig('statsSingle', formData.optValue).format)\r\n                : undefined,\r\n            warning_sound: formData.warningSound,\r\n            alertThreshold: formData.alertThreshold,\r\n            warningThreshold: formData.warningThreshold,\r\n            maxThreshold: valueFormat == 'percent' ? 100 : formData.maxThreshold,\r\n            subscription: {\r\n                type: 'stats_total',\r\n                req: reqData,\r\n                service_ids: formData.serviceIds,\r\n                dispositions: formData.dispositions,\r\n            },\r\n        }\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        updateWidget({\r\n            id: widget.id,\r\n            x: widget.x,\r\n            y: widget.y,\r\n            width: widget.width,\r\n            height: widget.height,\r\n            show_settings: widget.show_settings,\r\n            ...data,\r\n        })\r\n\r\n        onSaved?.()\r\n        onClose()\r\n\r\n        function convertStatToValue(stat: TotalStatsType, format: string | undefined) {\r\n            if (!format) {\r\n                return stat\r\n            }\r\n\r\n            return `${stat} | sp_${format}`\r\n        }\r\n    }), [handleSubmit, getStatsConfig, widget, replacingWidgetId, updateWidget, onSaved, onClose])\r\n\r\n    const handleSelectServices = useCallback(() => {\r\n        openSelectService({\r\n            services: serviceIdsField.value,\r\n            onSelect: updatedServices => {\r\n                setValue('serviceIds', updatedServices)\r\n            },\r\n        })\r\n    }, [openSelectService, serviceIdsField.value, setValue])\r\n\r\n    return (\r\n        <Modal\r\n            {...commonModalProps}\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { typeField.value === 'gauge' ? t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_gauge() : t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_single() }\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <GridRow>\r\n                    <FormLabel text={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.title()} />\r\n                    <TextField defaultValue={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_gauge()} name=\"title\" control={control} fluid />\r\n                    <FormLabel text={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.mode()} />\r\n                    <div>\r\n                        <RadioFieldRaw\r\n                            label={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_gauge()}\r\n                            field={typeField}\r\n                            radioValue=\"gauge\"\r\n                        />\r\n                        <RadioFieldRaw\r\n                            label={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_single()}\r\n                            field={typeField}\r\n                            radioValue=\"single\"\r\n                        />\r\n                    </div>\r\n                    <FormLabel text={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.primary_statistic()} />\r\n                    <div className=\"grid grid-cols-[1fr_auto] items-center gap-4\">\r\n                        <SelectField name=\"value\" control={control} options={statOptions} search fluid />\r\n                        <LinkLikeButton onClick={handleSelectServices}>\r\n                            {t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.services()}\r\n                        </LinkLikeButton>\r\n                    </div>\r\n                    <div className=\"col-start-2 grid grid-cols-[auto_1fr_auto] items-center gap-4\">\r\n                        {typeField.value === 'gauge' && (\r\n                            <>\r\n                                <label>{t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.warning_threshold()}</label>\r\n                                <TextField name=\"warningThreshold\" control={control} fluid type=\"number\" />\r\n                            </>\r\n                        )}\r\n                        <label className=\"col-start-1\">{t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.alert_threshold()}</label>\r\n                        <TextField name=\"alertThreshold\" control={control} fluid type=\"number\" />\r\n                        <CheckboxField name=\"warningSound\" control={control} label={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.enable_warning_sound()} />\r\n                        {typeField.value === 'gauge' && (\r\n                            <>\r\n                                <label>{t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.max_threshold()}</label>\r\n                                <TextField name=\"maxThreshold\" control={control} fluid type=\"number\" />\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    {typeField.value === 'single' && (\r\n                        <>\r\n                            <FormLabel text={t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.secondary_statistic()} />\r\n                            <SelectField name=\"optValue\" control={control} options={statOptions} search fluid />\r\n                        </>\r\n                    )}\r\n                </GridRow>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton enabledInOffline onClick={handleCancelWidgetModal}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    onClick={handleSave}\r\n                    primary\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst getWidgetDefaultFormData = (\r\n    type: SingleOrGaugeWidgetsTypes,\r\n    t: MessagesDeclaration,\r\n    serviceIds: string[],\r\n): SingleOrGaugeSettingsModalFormValues => {\r\n    const title = type === 'gauge' ? t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_gauge() : t.WALLBOARD_SINGLE_OR_GAUGE_WIDGET.name_single()\r\n\r\n    return {\r\n        type,\r\n        title,\r\n        serviceIds,\r\n        value: 'in_calls_active_on_agents',\r\n        optValue: undefined,\r\n        alertThreshold: 180,\r\n        warningThreshold: 100,\r\n        maxThreshold: 200,\r\n        warningSound: false,\r\n        dispositions: [],\r\n    }\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport type {SupervisorWidgetTypes} from '../../../../types'\r\nimport {SingleOrGaugeSettingsModal} from '../../../SingleOrGaugeSettingsModal'\r\n\r\n\r\nexport const useSingleOrGaugeWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const openSingleOrGaugeSettingsModal = useModalComponentOpener(SingleOrGaugeSettingsModal)\r\n\r\n    return useCallback((widgetType: Extract<SupervisorWidgetTypes, 'gauge' | 'single'>, widget: SupervisorWidget) => {\r\n        openSingleOrGaugeSettingsModal({\r\n            widgetType,\r\n            replacingWidgetId: widget.id,\r\n            onSaved,\r\n        })\r\n        onSaved()\r\n\r\n    }, [onSaved, openSingleOrGaugeSettingsModal])\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {useController, useForm} from 'react-hook-form'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {TextField} from '@bpinc/lib-forms-ui'\r\nimport {LinkLikeButton, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {assertCorrectWidget, getAgentGridSubscriptionDefaults} from '../helpers'\r\nimport {FormLabel} from '../shared/FormLabel'\r\nimport {GridRow} from '../shared/GridRow'\r\nimport {TeamsSelectModal} from '../TeamsSelectModal'\r\nimport {useHandleCancelWidgetModal} from '../useHandleCancelWidgetModal'\r\n\r\n\r\ninterface FormValues {\r\n    title: string\r\n    teams: string[]\r\n}\r\n\r\ntype SummarySettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n}\r\n\r\ntype SummarySubscription = {\r\n    teams: string[]\r\n    id: string\r\n}\r\nfunction getSummarySubscription({id, teams}: SummarySubscription) {\r\n    return {\r\n        type: 'summary' as const,\r\n        req: {\r\n            ...getAgentGridSubscriptionDefaults(),\r\n            columns: [\r\n                {\r\n                    id: '1',\r\n                    statName: 'acd_state',\r\n                },\r\n            ],\r\n            id,\r\n            team_ids: teams,\r\n        },\r\n    }\r\n}\r\nexport const SummarySettingsModal: React.FC<SummarySettingsModalProps> = ({\r\n    onClose,\r\n    replacingWidgetId,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {widget, updateWidget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const emptyValues: FormValues = useMemo(\r\n        () => ({\r\n            title: t.WALLBOARD_WIDGET_SUMMARY.default_name(),\r\n            teams: [],\r\n        }),\r\n        [t.WALLBOARD_WIDGET_SUMMARY],\r\n    )\r\n\r\n    const defaultValues = useMemo(() => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        if (widget.type !== 'summary') {\r\n            return emptyValues\r\n        }\r\n\r\n        return {\r\n            title: widget.title || emptyValues.title,\r\n            teams:\r\n                widget.subscription.req.team_ids ||\r\n                emptyValues.teams,\r\n        }\r\n    }, [widget, replacingWidgetId, emptyValues])\r\n\r\n    const {control, handleSubmit, setValue} = useForm<FormValues>({\r\n        defaultValues,\r\n    })\r\n\r\n    const {field: teamsField} = useController({\r\n        name: 'teams',\r\n        control,\r\n    })\r\n\r\n    const openTeamsSelectModal = useModalComponentOpener(TeamsSelectModal)\r\n\r\n    const handleSelectTeams = useCallback(() => {\r\n        openTeamsSelectModal({\r\n            teams: teamsField.value,\r\n            onSelect: updatedTeams => {\r\n                setValue('teams', updatedTeams)\r\n            },\r\n        })\r\n    }, [openTeamsSelectModal, setValue, teamsField.value])\r\n\r\n    const handleSave = useMemo(\r\n        () =>\r\n            handleSubmit(async (formData: FormValues) => {\r\n                assertCorrectWidget(widget, replacingWidgetId)\r\n                updateWidget({\r\n                    ...widget,\r\n                    title: formData.title,\r\n                    type: 'summary',\r\n                    subscription: getSummarySubscription({id: widget.id, teams: formData.teams}),\r\n                })\r\n\r\n                onClose()\r\n            }),\r\n        [handleSubmit, widget, replacingWidgetId, updateWidget, onClose],\r\n    )\r\n    const handleCancelWidgetModal = useHandleCancelWidgetModal({onClose, widget})\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"summarySettings\"\r\n            className=\"max-w-full\"\r\n            onClose={onClose}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"summarySettings\">\r\n                {t.WALLBOARD.select_teams()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <GridRow>\r\n                    <FormLabel text={t.WALLBOARD_WIDGET_SUMMARY.title_label()} />\r\n                    <TextField\r\n                        fluid\r\n                        name=\"title\"\r\n                        control={control}\r\n                    />\r\n                </GridRow>\r\n                <GridRow>\r\n                    <FormLabel text={t.WALLBOARD_WIDGET_SUMMARY.teams_label()} />\r\n                    <LinkLikeButton onClick={handleSelectTeams}>\r\n                        {t.WALLBOARD_WIDGET_SUMMARY.selected_teams()}\r\n                    </LinkLikeButton>\r\n                </GridRow>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={handleCancelWidgetModal} enabledInOffline>\r\n                    {t.GLOBAL.cancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={handleSave} primary>\r\n                    {t.GLOBAL.ok()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {SummarySettingsModal} from '../../../SummarySettingsModal'\r\n\r\n\r\nexport const useSummaryWidget = ({\r\n    onSaved,\r\n}: {\r\n    onSaved: () => void\r\n}) => {\r\n    const openSummarySettingsModal = useModalComponentOpener(SummarySettingsModal)\r\n\r\n    return useCallback((widgetConfig: SupervisorWidget) => {\r\n\r\n        openSummarySettingsModal({\r\n            replacingWidgetId: widgetConfig.id,\r\n        })\r\n        onSaved()\r\n\r\n    }, [onSaved, openSummarySettingsModal])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../../../atoms'\r\nimport type {SupervisorWidgetView} from '../../../../types'\r\nimport {AgentGridModal, assertFormValuesValidForConfigAgentGrid} from '../../../AgentGridModal'\r\nimport {CopyWidget} from '../../../CopyWidget'\r\nimport {assertCorrectWidget} from '../../../helpers'\r\nimport {\r\n    assertFormValuesValidForImageWidgetSettingsModal,\r\n    ImageSettingsModal,\r\n} from '../../../ImageSettingsModal/ImageSettingsModal'\r\nimport {\r\n    assertFormValuesValidForNewsWidgetSettingsModal,\r\n    NewsSettingsModal,\r\n} from '../../../NewsSettingsModal/NewsSettingsModal'\r\nimport {assertFormValuesValidForConfigServiceGrid, ServiceGridModal} from '../../../ServiceGridModal'\r\nimport {\r\n    assertFormValuesValidForTextWidgetSettingsModal,\r\n    TextSettingsModal,\r\n} from '../../../TextSettingsModal/TextSettingsModal'\r\nimport {assertFormValuesValidForTimeSeriesModal, TimeSeriesModal} from '../../../TimeSeriesModal'\r\nimport type {FormValues} from '../../../types'\r\nimport {useAgendaWidget} from './useAgendaWidget'\r\nimport {useBreakTimeWidget} from './useBreakTimeWidget'\r\nimport {useCreateTimeWidget} from './useCreateTimeWidget'\r\nimport {useDispositionsWidget} from './useDispositionsWidget'\r\nimport {useMyStatsWidget} from './useMyStatsWidget'\r\nimport {useSatisfactionWidget} from './useSatisfactionWidget'\r\nimport {useSingleOrGaugeWidget} from './useSingleOrGaugeWidget'\r\nimport {useSummaryWidget} from './useSummaryWidget'\r\n\r\n\r\nconst exhaustiveCheck = (optionType: never) => {\r\n    throw new Error(`Unhandled option type: ${optionType}`)\r\n}\r\n\r\nexport const useHandleWidgetSelect = ({\r\n    onSaved,\r\n    replacingWidgetId,\r\n}: {\r\n    onSaved: () => void\r\n    replacingWidgetId: string\r\n}) => {\r\n    const openAgentGridModal = useModalComponentOpener(AgentGridModal)\r\n    const openServiceGridModal = useModalComponentOpener(ServiceGridModal)\r\n    const openImageSettingsModal = useModalComponentOpener(ImageSettingsModal)\r\n    const openNewsSettingsModal = useModalComponentOpener(NewsSettingsModal)\r\n    const openTextSettingsModal = useModalComponentOpener(TextSettingsModal)\r\n    const openTimeSeriesModal = useModalComponentOpener(TimeSeriesModal)\r\n    const openCopyWidget = useModalComponentOpener(CopyWidget)\r\n    const {widget} = useAtomValue(updatingWidgetDataAtom)\r\n\r\n    const createTimeWidget = useCreateTimeWidget({\r\n        onSaved,\r\n        replacingWidgetId,\r\n    })\r\n\r\n    const createBreakTimeWidget = useBreakTimeWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createSingleOrGaugeWidget = useSingleOrGaugeWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createDispositionsWidget = useDispositionsWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createAgendaWidget = useAgendaWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createMyStatsWidget = useMyStatsWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createSummaryWidget = useSummaryWidget({\r\n        onSaved,\r\n    })\r\n\r\n    const createSatisfactionWidget = useSatisfactionWidget({\r\n        onSaved,\r\n    })\r\n\r\n    return useCallback((widgetType: SupervisorWidgetView, formValues?: FormValues) => {\r\n        assertCorrectWidget(widget, replacingWidgetId)\r\n        switch (widgetType) {\r\n            case 'image': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForImageWidgetSettingsModal(formValues)\r\n                }\r\n\r\n                openImageSettingsModal({\r\n                    replacingWidgetId,\r\n                    onSaved,\r\n                    formValues,\r\n                })\r\n            }\r\n\r\n                break\r\n\r\n            case 'single':\r\n            case 'gauge':\r\n                createSingleOrGaugeWidget(widgetType, widget)\r\n                break\r\n\r\n            case 'agent_grid': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForConfigAgentGrid(formValues)\r\n                }\r\n\r\n                openAgentGridModal({\r\n                    replacingWidgetId,\r\n                    formValues,\r\n                    onSaved,\r\n                })\r\n            }\r\n                break\r\n\r\n            case 'service_grid': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForConfigServiceGrid(formValues)\r\n                }\r\n\r\n                openServiceGridModal({\r\n                    replacingWidgetId,\r\n                    formValues,\r\n                    onSaved,\r\n                })\r\n                break\r\n            }\r\n\r\n            case 'news': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForNewsWidgetSettingsModal(formValues)\r\n                }\r\n\r\n                openNewsSettingsModal({\r\n                    replacingWidgetId,\r\n                    formValues,\r\n                    onSaved,\r\n                })\r\n                break\r\n            }\r\n\r\n            case 'summary':\r\n                createSummaryWidget(widget)\r\n                break\r\n\r\n            case 'text': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForTextWidgetSettingsModal(formValues)\r\n                }\r\n\r\n                openTextSettingsModal({\r\n                    replacingWidgetId,\r\n                    formValues,\r\n                    onSaved,\r\n                })\r\n                break\r\n            }\r\n            case 'datetime':\r\n                createTimeWidget()\r\n                break\r\n\r\n            case 'time_series': {\r\n                if (formValues) {\r\n                    assertFormValuesValidForTimeSeriesModal(formValues)\r\n                }\r\n\r\n                openTimeSeriesModal({\r\n                    replacingWidgetId,\r\n                    formValues,\r\n                    onSaved,\r\n                })\r\n                break\r\n            }\r\n            case 'copy_from_other':\r\n                openCopyWidget({\r\n                    replacingWidgetId,\r\n                    onSaved,\r\n                })\r\n                break\r\n\r\n            case 'break_time':\r\n                createBreakTimeWidget(widget)\r\n                break\r\n            case 'dispositions':\r\n                createDispositionsWidget(widget)\r\n                break\r\n            case 'my_stats':\r\n                createMyStatsWidget(widget)\r\n                break\r\n            case 'satisfaction':\r\n                createSatisfactionWidget(widget)\r\n                break\r\n            case 'agenda':\r\n                createAgendaWidget(widget)\r\n                break\r\n\r\n            default:\r\n                exhaustiveCheck(widgetType)\r\n                break\r\n        }\r\n    }, [\r\n        widget,\r\n        openCopyWidget,\r\n        openAgentGridModal,\r\n        openImageSettingsModal,\r\n        openTextSettingsModal,\r\n        openNewsSettingsModal,\r\n        openServiceGridModal,\r\n        openTimeSeriesModal,\r\n        replacingWidgetId,\r\n        onSaved,\r\n        createSingleOrGaugeWidget,\r\n        createSummaryWidget,\r\n        createTimeWidget,\r\n        createBreakTimeWidget,\r\n        createDispositionsWidget,\r\n        createMyStatsWidget,\r\n        createSatisfactionWidget,\r\n        createAgendaWidget,\r\n    ])\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {Button, Svg} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {WidgetViewOption} from '../../types'\r\nimport {useHandleWidgetSelect} from './useHandleWidgetSelect'\r\n\r\n\r\ntype OptionProps = {\r\n    option: WidgetViewOption\r\n    replacingWidgetId: string\r\n    onSaved: () => void\r\n}\r\n\r\nexport const Option: React.FC<OptionProps> = ({\r\n    option,\r\n    replacingWidgetId,\r\n    onSaved,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const selectWidget = useHandleWidgetSelect({\r\n        onSaved,\r\n        replacingWidgetId,\r\n    })\r\n\r\n    const handleClick = useCallback((e: React.SyntheticEvent) => {\r\n        e.preventDefault()\r\n        selectWidget(option.type)\r\n    }, [option.type, selectWidget])\r\n\r\n    const title = t.WALLBOARD_WIDGET_EMPTY[option.type]()\r\n\r\n    return (\r\n        <Button\r\n            className=\"flex max-h-[115px] max-w-[90px] flex-col items-center justify-start p-[5px] opacity-70 transition-all hover:opacity-100\"\r\n            onClick={handleClick}\r\n        >\r\n            <Svg\r\n                className=\"flex h-[50px] w-[50px]\"\r\n                src={option.image}\r\n            />\r\n\r\n            <div className=\"mt-2 text-center font-bold \">\r\n                {title}\r\n            </div>\r\n        </Button>\r\n    )\r\n}\r\n","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgAgenda = function SvgAgenda(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 373.258 365.031\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 95.109c1.567-2.489 1.257-5.406 1.8-8.12C5.232 69.842 12.371 54.41 23.089 40.605c.458-.59.915-1.183 1.352-1.789.041-.057-.071-.223-.231-.671-4.319 0-8.766.041-13.211-.01-5.358-.062-8.751-3.046-8.772-7.616-.021-4.607 3.261-7.623 8.7-7.654 13.242-.073 26.486.024 39.728-.073 2.197-.016 2.684.718 2.671 2.773-.083 13.343-.014 26.686-.06 40.029-.017 4.933-3.285 8.404-7.648 8.348-4.376-.055-7.434-3.463-7.485-8.507-.06-5.954-.014-11.91-.014-17.861-1.392-.354-1.624.754-2.096 1.328-43.608 53.015-15.058 133.304 52.275 147.053 51.267 10.468 100.489-23.743 108.721-75.565 8.315-52.348-30.113-100.715-83.18-104.763-14.548-1.11-28.611.736-42.173 6.216-5.307 2.145-9.447.654-11.179-3.848-1.625-4.223.434-8.183 5.509-10.206 60.694-24.193 129.841 9.932 144.588 75.353 13.201 58.563-24.039 115.584-82.821 127.736-58.905 12.176-117.174-28.147-126.417-87.415-.268-1.718.156-3.721-1.346-5.155V95.109z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M98.989 76.26c0-10.098-.065-20.196.028-30.294.044-4.778 3.229-7.915 7.644-7.903 4.276.012 7.203 2.963 7.511 7.617.074 1.118.05 2.243.051 3.364.003 16.581.062 33.162-.058 49.741-.02 2.746.661 4.515 3.004 6.189 7.913 5.653 15.63 11.581 23.395 17.438 4.427 3.339 5.388 7.506 2.685 11.258-2.824 3.92-7.239 4.298-11.798.911-9.608-7.139-19.166-14.345-28.785-21.47-2.631-1.949-3.757-4.414-3.727-7.68.091-9.723.033-19.448.033-29.171h.017z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M373.244 46.759c-.002-10.349-5.908-16.171-16.302-16.2-11.37-.031-22.74-.071-34.109.045-2.314.024-3.041-.622-2.943-2.933.174-4.108.166-8.234.016-12.344-.323-8.873-6.795-15.151-15.642-15.256-4.997-.059-9.997-.09-14.993.013-8.278.172-14.682 6.425-14.983 14.644-.146 3.986-.252 7.994.007 11.967.201 3.081-.734 3.951-3.875 3.93-21.364-.142-42.73-.074-64.096-.074h-4.332c2.994 4.439 5.789 8.223 8.167 12.253 1.307 2.216 2.744 2.973 5.305 2.957 18.491-.116 36.983-.014 55.474-.119 2.533-.014 3.533.507 3.352 3.231-.247 3.725-.101 7.479-.053 11.22.123 9.47 6.115 15.696 15.587 16.03 4.742.167 9.498.15 14.242.007 9.56-.288 15.744-6.668 15.863-16.232.047-3.741.178-7.493-.051-11.221-.155-2.526.732-3.061 3.112-3.033 10.619.125 21.241.119 31.859.004 2.334-.025 3.167.448 3.146 3.004-.129 15.713-.149 31.429.012 47.141.029 2.849-.999 3.146-3.413 3.125-12.868-.109-25.738-.052-38.607-.052-28.237 0-56.475.034-84.712-.056-2.65-.009-3.46.562-3.053 3.313.397 2.684.492 5.533.034 8.192-.578 3.36.614 3.838 3.656 3.831 40.607-.098 81.214-.019 121.82-.148 3.469-.011 4.278.922 4.273 4.309a81364.2 81364.2 0 0 0 .011 227.481c.005 3.373-.9 4.014-4.106 4.009-60.223-.102-120.446-.075-180.669-.075-43.855 0-87.711-.034-131.566.075-3.014.008-3.677-.844-3.616-3.697.187-8.726.068-17.459.068-26.189 0-36.542.007-73.083-.025-109.625-.001-1.391.522-2.884-1.049-4.072-4.648-3.512-9.179-7.178-13.742-10.774-.69.443-.499 1.113-.499 1.701-.007 50.634-.049 101.268.033 151.902.016 10.157 6.019 15.962 16.231 15.964 105.952.031 211.905.031 317.857.001 10.319-.003 16.306-6.039 16.308-16.314.022-100.645.022-201.29.003-301.935zm-68.631 11.923c.006 1.562-.374 2.225-2.069 2.165-4.227-.15-9.505 1.351-12.371-.65-2.48-1.731-.594-7.427-.728-11.367-.123-3.608-.026-7.224-.026-10.836 0-6.602.078-13.205-.044-19.805-.04-2.148.325-3.19 2.81-3.017 3.229.225 6.488.128 9.729.026 1.778-.056 2.727.226 2.714 2.377-.084 13.702-.064 27.405-.015 41.107z\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M312.307 214.382c0-22.198.002-44.397-.004-66.595 0-1.665.534-3.363-2.416-3.352-28.486.104-56.972.058-85.458.081-.905.001-1.987-.395-2.507.971-1.756 4.615-3.595 9.198-5.551 14.173 8.16 0 16.003.124 23.839-.067 2.74-.067 3.6.55 3.546 3.441-.195 10.472-.167 20.951-.013 31.425.038 2.569-.532 3.324-3.225 3.299-15.491-.144-30.985.001-46.476-.135-2.828-.025-3.756.553-3.721 3.594.176 15.337.017 30.678.14 46.017.022 2.753-.44 3.819-3.561 3.75a707.383 707.383 0 0 0-31.106 0c-3.139.069-3.624-1.019-3.577-3.779.158-9.202.06-18.408.06-27.76-4.418 1.393-8.523 2.823-12.709 3.947-1.907.512-2.512 1.304-2.475 3.281.132 7.106-.038 14.218.105 21.323.045 2.231-.437 2.992-2.841 2.962-10.868-.137-21.74-.145-32.607.005-2.451.034-2.867-.785-2.809-2.973.149-5.608-.079-11.227.107-16.833.085-2.578-.329-3.848-3.332-3.744-2.716.094-5.569-.154-8.16-.924-3.541-1.053-3.772.375-3.762 3.33.094 28.558.127 57.117-.036 85.675-.02 3.42.957 4.016 4.147 4.012 73.464-.094 146.928-.099 220.392.011 3.356.005 4.104-.845 4.092-4.118-.132-33.673-.082-67.345-.082-101.017zm-175.111 86.604c.026 2.34-.455 3.254-3.025 3.157-5.482-.207-10.978-.063-16.468-.063-5.365 0-10.734-.103-16.095.05-2.172.062-2.681-.658-2.663-2.725.096-10.835.131-21.672-.02-32.506-.035-2.48.873-2.801 3.007-2.782 10.73.095 21.462.126 32.191-.018 2.51-.034 3.105.719 3.077 3.128a1377.962 1377.962 0 0 0-.004 31.759zm53.206-15.757c0 5.351-.062 10.704.034 16.054.034 1.889-.177 2.88-2.525 2.853-11.095-.125-22.193-.085-33.289-.026-1.72.009-2.399-.399-2.385-2.275.082-11.076.089-22.153-.004-33.228-.017-2.038.715-2.491 2.591-2.479 10.971.068 21.944.089 32.915-.015 2.122-.02 2.768.552 2.711 2.69-.146 5.471-.048 10.95-.048 16.426zm15.138-69.739c-.013-1.908.508-2.617 2.505-2.603 11.097.075 22.196.098 33.292-.017 2.195-.023 2.404.899 2.377 2.667-.082 5.475-.03 10.952-.03 16.429 0 5.476-.066 10.954.037 16.429.035 1.846-.348 2.579-2.42 2.559a1914.298 1914.298 0 0 0-33.292-.009c-2.033.016-2.483-.709-2.47-2.596.077-10.953.077-21.906.001-32.859zm35.669 88.633c-10.992-.09-21.985-.099-32.977.004-2.189.02-2.707-.718-2.69-2.782.09-10.847.102-21.696-.007-32.543-.022-2.233.807-2.691 2.829-2.677 10.867.077 21.737.129 32.602-.033 2.529-.038 2.803.914 2.755 3.014-.126 5.483-.042 10.972-.042 16.458 0 5.362-.089 10.725.046 16.084.05 1.991-.572 2.491-2.516 2.475zm55.788-2.127c.009 1.62-.466 2.125-2.108 2.116-11.23-.063-22.461-.067-33.691 0-1.846.011-2.318-.659-2.308-2.401.062-10.96.085-21.922-.014-32.882-.02-2.189.75-2.75 2.811-2.708 5.613.113 11.23.039 16.845.039 5.366 0 10.732.059 16.096-.034 1.713-.03 2.397.33 2.381 2.24-.091 11.21-.073 22.421-.012 33.63zm-.026-69.564c0 5.235-.072 10.471.037 15.704.04 1.932-.234 2.851-2.553 2.824-10.987-.126-21.976-.091-32.964-.023-1.864.012-2.64-.401-2.623-2.464a1850.76 1850.76 0 0 0-.003-32.904c-.021-2.224.808-2.698 2.838-2.684 10.863.078 21.727.09 32.59-.009 2.134-.019 2.776.606 2.724 2.73-.136 5.606-.046 11.217-.046 16.826zm-2.5-34.703c-10.973-.075-21.947-.095-32.919.012-2.187.021-2.731-.698-2.682-2.762.127-5.349.043-10.703.043-16.055 0-5.477.11-10.956-.051-16.428-.07-2.365.774-2.911 3.004-2.891 10.848.102 21.697.086 32.545.009 1.882-.013 2.621.412 2.604 2.455a1887.84 1887.84 0 0 0 .007 33.232c.018 2.051-.687 2.441-2.551 2.428z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgAgenda);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"d143e4d115dec9d305ff5c03f673e0aa.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgBreakTime = function SvgBreakTime(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 27.931 39.141\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.421 9.951c.071-1.879.929-3.363 2.298-4.593.415-.373.83-.746 1.226-1.138.752-.745 1.122-1.664 1.187-2.713.015-.246.02-.493.044-.738.046-.473.376-.779.815-.769.445.01.77.36.771.851.001 1.748-.552 3.284-1.782 4.545-.48.491-.985.959-1.5 1.414-1.008.89-1.47 2.011-1.472 3.34l-.002.156c-.017.545-.343.912-.807.91-.485-.002-.811-.392-.795-.954.003-.104.011-.208.017-.311zM16.748 4.967c-.045 1.442-.634 2.541-1.611 3.456-.113.106-.225.217-.349.309-.838.623-1.27 1.436-1.242 2.499.012.462-.357.783-.796.776-.44-.007-.767-.338-.776-.802-.024-1.274.444-2.348 1.334-3.247.191-.193.381-.393.597-.557.881-.669 1.297-1.545 1.27-2.654-.01-.418.335-.731.738-.761.355-.027.734.242.81.597.033.15.021.309.025.384zM24.745 19.573c-1.076-.351-2.189-.414-3.308-.385-.298.008-.366-.043-.291-.357a53.828 53.828 0 0 1 1.129-4.12c.198-.614-.143-1.09-.786-1.127-.091-.005-.182-.002-.273-.002H.997c-.065 0-.13-.002-.195 0-.579.026-.918.483-.764 1.041.076.274.175.542.255.815 1.568 5.35 2.315 10.847 2.88 16.373.182 1.782.289 3.571.47 5.353.088.863.577 1.479 1.381 1.833.088.039.212.023.257.142h11.614c.578-.17 1.079-.446 1.426-.965.324-.485.406-1.028.44-1.59.117-1.892.305-3.778.498-5.663.063-.621.078-.603.701-.67 1.554-.168 3.07-.498 4.49-1.172 2.048-.972 3.342-2.494 3.471-4.848.124-2.232-1.056-3.966-3.176-4.658zm-6.685 7.685c-.418 3.181-.701 6.374-.932 9.573-.036.5-.269.705-.78.706H5.984c-.523 0-.744-.214-.782-.746-.198-2.837-.436-5.67-.794-8.491-.553-4.363-1.223-8.706-2.539-12.92-.015-.047-.012-.1-.019-.166h18.657a52.222 52.222 0 0 0-.844 3.05c-.709 2.966-1.205 5.971-1.603 8.994zm8.238-2.605c-.235 1.556-1.256 2.412-2.576 3.011-1.262.573-2.614.812-3.976 1.001-.314.044-.2-.162-.184-.281.154-1.195.304-2.392.484-3.584.182-1.204.406-2.401.59-3.605.05-.331.173-.465.517-.424.269.032.544.006.816.006.61.018 1.215.064 1.815.191 1.905.405 2.807 1.747 2.514 3.685z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgBreakTime);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"807f988b274d7e9ec75aa1c2559054be.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgCopy = function SvgCopy(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 115 115\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.6 45.8V31c0-2.1.6-4 1.8-5.7 1.4-2 3.2-3.5 5.6-4.3.9-.3 1.7-.4 2.6-.4h30.1c2.2 0 4.2.7 5.9 2 1.9 1.4 3.3 3.2 4 5.5.3 1.1.5 2.1.4 3.3-.1 1.2.2 2.4-.1 3.6-.3 1.3-1.5 2.4-2.6 2.5-2.2.2-3.1-.4-3.9-2-.2-.4-.3-.9-.3-1.4-.1-1.5.2-3-.1-4.4-.3-1.3-.8-1.7-2.1-2-.7-.2-1.4-.2-2.2-.2H31.5c-1.1 0-2.4-.1-3.3 1-.3.4-.6.8-.6 1.3 0 .8-.2 1.5-.2 2.3v28.2c0 .6.1 1.2.2 1.8.3 1.4 1.3 2.1 2.8 2.1h3.8c1.8 0 3 1.3 3.3 2.5.4 1.7-.4 3.4-1.9 4.1-.3.1-.7.3-1 .3-2 0-4.1.3-6-.3-2.1-.6-3.9-1.8-5.3-3.5-1.2-1.5-2-3.1-2.4-4.9 0-.3-.1-.5-.1-.8-.2-5.4-.2-10.6-.2-15.8z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M94.4 69.2V53.6c0-.6-.1-1.1-.3-1.7-.6-2.3-1.9-4.2-3.8-5.7-1.7-1.4-3.7-2.2-5.9-2.2H53.9c-.6 0-1.2.1-1.8.3-2 .5-3.7 1.6-5.1 3.1-1.9 2-3 4.4-3 7.2v29.7c0 .9.2 1.7.4 2.6.7 2.3 2.1 4.1 4 5.6 1.8 1.3 3.8 2 6.1 2 9.6 0 19.3-.1 28.9 0 2.6 0 4.8-.6 6.8-2.2 2.5-2 4.1-4.5 4.1-7.9.1-5.1.1-10.2.1-15.2zm-6.8 14.4c0 1.1.1 2.4-1 3.3-.4.3-.8.6-1.3.6-.8 0-1.6.2-2.5.2h-28c-.6 0-1.2-.1-1.8-.2-1.4-.3-2.1-1.3-2.1-2.9V53.9c0-1.9 1-3 3-3h30.5c2.1 0 2.9.9 3.1 2.8.1 1 .1 2 .1 3 0 9 .1 17.9 0 26.9z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgCopy);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"330437545e1f74f03542893c2c3a3f53.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDatetime = function SvgDatetime(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 40.001 40.001\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.88 1.688C9.876 1.703 1.643 10.02 1.682 20.07c.04 10.204 8.274 18.343 18.536 18.32 9.976-.022 18.205-8.336 18.179-18.367C38.371 9.821 30.14 1.671 19.88 1.688zm.169 35.108c-9.26.004-16.764-7.491-16.768-16.749-.004-9.267 7.482-16.76 16.749-16.765 9.267-.005 16.76 7.478 16.769 16.746.008 9.254-7.494 16.764-16.75 16.768z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.832 11.993c0 1.818.004 3.635-.005 5.453-.001.237.062.353.287.465a2.359 2.359 0 0 1 1.136 3.039 2.362 2.362 0 0 1-2.949 1.351c-.235-.079-.363-.04-.531.13a949.724 949.724 0 0 1-4.486 4.491c-.383.382-.789.422-1.138.132-.401-.334-.42-.819-.023-1.219 1.068-1.08 2.146-2.151 3.219-3.225.45-.45.894-.906 1.352-1.347.141-.135.162-.24.099-.432-.395-1.192.078-2.369 1.184-2.924.228-.114.278-.239.278-.472-.007-3.609-.006-7.219-.004-10.828 0-.57.257-.895.718-.93.505-.038.857.284.861.824.009 1.22.003 2.441.004 3.661-.002.61-.002 1.22-.002 1.831z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDatetime);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"b131fd989ce73036391d53cfbecba834.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDispositions = function SvgDispositions(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 39.904 33.536\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.811 0C26.226.01 13.64.008 1.055.008.229.008 0 .24 0 1.076v31.37c0 .84.244 1.081 1.094 1.081 12.573 0 25.145-.002 37.718.009.49 0 .847-.135 1.093-.555V.556C39.661.132 39.299 0 38.811 0zm-.494 31.491c0 .346-.073.453-.44.453-11.948-.011-23.896-.01-35.844-.001-.357 0-.447-.089-.447-.446.01-9.819.01-19.638.001-29.457 0-.345.071-.454.44-.453 5.974.013 11.948.009 17.922.009s11.948.003 17.922-.008c.358-.001.447.091.446.447-.009 9.818-.009 19.637 0 29.456z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.157 7.979c2.543 0 5.087.005 7.63-.007.284-.001.398.057.365.359-.045.408.169.957-.085 1.19-.222.203-.762.066-1.162.066-4.775.003-9.55-.001-14.325.01-.314.001-.447-.06-.408-.396.046-.394-.164-.911.085-1.157.229-.227.74-.061 1.127-.062 2.257-.005 4.515-.003 6.773-.003zm.002 15.966c2.546 0 5.092.006 7.638-.008.299-.002.379.08.356.366a8.558 8.558 0 0 0-.002 1.013c.008.193-.065.26-.247.237-.051-.006-.104-.001-.156-.001-5.053 0-10.106-.004-15.158.009-.353.001-.454-.094-.418-.431.03-.283.027-.573 0-.856-.027-.287.089-.336.35-.335 2.545.01 5.091.006 7.637.006zM15.155 17.558c-2.53 0-5.061-.007-7.591.009-.335.002-.427-.093-.391-.409.044-.382-.161-.896.08-1.117.208-.19.714-.063 1.087-.063 4.788-.002 9.576.002 14.365-.008.333-.001.491.05.447.428-.043.37.12.879-.07 1.086-.219.239-.731.071-1.115.072-2.27.005-4.541.002-6.812.002zM33.602 7.401c.013.142-.085.31-.197.471-.703 1.012-1.403 2.025-2.111 3.032-.372.529-.805.587-1.326.189-.629-.481-1.256-.963-1.881-1.448-.433-.336-.519-.802-.224-1.186.276-.36.759-.407 1.177-.1.376.276.753.554 1.106.858.196.168.277.117.406-.069.515-.747 1.041-1.487 1.571-2.223.249-.346.609-.471.951-.336.334.131.517.379.528.812zm-.001 7.953c.015.155-.074.326-.187.488-.711 1.022-1.418 2.046-2.135 3.064-.36.512-.788.568-1.296.18-.629-.48-1.256-.963-1.88-1.45-.444-.346-.536-.801-.251-1.182.292-.39.772-.423 1.236-.078.302.225.612.442.889.694.286.26.454.272.686-.089.454-.709.963-1.383 1.459-2.065.309-.425.724-.515 1.114-.263.235.151.356.368.365.701zm-.002 7.997c.011.149-.074.308-.179.46-.71 1.023-1.417 2.048-2.133 3.067-.359.51-.804.573-1.298.196-.65-.496-1.298-.995-1.942-1.498-.39-.305-.466-.762-.2-1.133.262-.368.733-.446 1.138-.159.392.277.77.574 1.14.879.184.152.281.165.432-.058.517-.762 1.06-1.507 1.597-2.254.234-.325.566-.42.93-.292.335.117.514.381.515.792z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDispositions);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"ebd6f68fedc0e38d32014589e671d92b.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgGauge = function SvgGauge(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 36.716 36.704\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.383 0C8.259 0-.016 8.266 0 18.364.016 28.41 8.267 36.7 18.254 36.704c10.185.004 18.484-8.252 18.462-18.367C36.693 8.246 28.449 0 18.383 0zm-.052 35.11c-9.203-.013-16.74-7.564-16.732-16.766C1.607 9.11 9.15 1.582 18.383 1.594c9.212.012 16.737 7.55 16.734 16.763-.003 9.22-7.563 16.765-16.786 16.753z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.26 12.734c-.651-.369-1.48-.663-2.05-1.337-.226-.268-.124-.629.115-.89.239-.262.559-.365.879-.191.577.314 1.143.652 1.693 1.012.311.204.336.538.224.87-.105.311-.435.537-.861.536zm4.728-4.665c-.289.014-.5-.126-.645-.358a40.392 40.392 0 0 1-.897-1.493.785.785 0 0 1 .276-1.081c.368-.225.835-.124 1.084.266.313.489.618.985.893 1.496.299.557-.082 1.162-.711 1.17zm12.721-.001c-.59-.018-.985-.602-.717-1.117.285-.549.614-1.077.952-1.596.229-.351.683-.431 1.033-.23.363.208.525.664.319 1.039a30.216 30.216 0 0 1-.957 1.592.654.654 0 0 1-.63.312zm3.854 16.561c0-.586.586-.995 1.108-.728.562.288 1.1.627 1.626.976.357.237.41.668.184 1.031-.232.371-.623.51-1.003.302a29.582 29.582 0 0 1-1.595-.954.678.678 0 0 1-.32-.627zm-20.41-.006c.005.316-.149.541-.41.699-.464.281-.925.566-1.396.834-.461.262-.887.15-1.13-.275-.232-.406-.119-.815.322-1.091.47-.294.943-.588 1.429-.854a.783.783 0 0 1 1.185.687zM19.145 4.731c0 .298.014.597-.003.894-.025.448-.346.73-.797.724-.432-.006-.754-.283-.768-.711a30.455 30.455 0 0 1-.003-1.788.781.781 0 0 1 .778-.762.801.801 0 0 1 .794.75c.002.026.004.052.004.078v.817c-.002-.002-.004-.002-.005-.002zM4.826 19.058c-.298 0-.596.01-.893-.002-.443-.019-.746-.339-.755-.776-.008-.44.282-.777.729-.791.607-.019 1.216-.02 1.823.001.447.016.719.349.707.803-.011.431-.292.729-.719.764a1.015 1.015 0 0 1-.078.002h-.815l.001-.001zm27.091 0c-.298 0-.596.01-.893-.002-.452-.019-.739-.325-.746-.773-.007-.454.265-.778.717-.793.607-.02 1.216-.019 1.823.001.427.014.71.339.718.763a.772.772 0 0 1-.728.804 1.017 1.017 0 0 1-.078.003h-.815l.002-.003zm-.88-8.263c-.214-.414-.617-.518-1.185-.299-3.331 1.282-6.667 2.553-9.99 3.857-1.099.432-2.25.736-3.245 1.438-1.157.816-1.702 2.093-1.331 3.411.383 1.362 1.618 2.325 3.189 2.344.67-.153 1.509-.373 2.182-.949 2.119-1.814 4.221-3.649 6.329-5.476 1.255-1.088 2.511-2.174 3.764-3.264.39-.339.48-.688.287-1.062zm-7.491 5.196c-1.324 1.148-2.655 2.288-3.973 3.445-.51.447-1.076.618-1.728.441-.634-.172-1.021-.687-1.071-1.375-.053-.734.253-1.32.891-1.575 1.634-.653 3.278-1.284 4.918-1.92 1.062-.412 2.125-.82 3.19-1.224.114-.043.222-.145.394-.069-.881.765-1.75 1.522-2.621 2.277z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgGauge);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"daa582168a763d3c8ea25611489c7270.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgGrid = function SvgGrid(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 33.519 33.519\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32.419 0H1.093C.239 0 0 .236 0 1.081v31.365c0 .825.246 1.073 1.061 1.073h31.326c.905 0 1.133-.225 1.133-1.119V1.113C33.519.235 33.288 0 32.419 0zM10.377 21.196c.002.253-.032.354-.327.353a875.237 875.237 0 0 0-8.102-.001c-.295.001-.364-.079-.363-.368.011-2.947.011-5.894.001-8.842-.001-.282.059-.375.36-.374 2.701.012 5.401.012 8.102 0 .288-.001.332.093.33.35-.012 1.48-.006 2.96-.006 4.44s-.006 2.962.005 4.442zm0 10.406c.001.245-.049.331-.316.33-2.715-.01-5.43-.009-8.145-.001-.253.001-.331-.063-.33-.324.009-2.715.009-5.43 0-8.145-.001-.259.072-.324.326-.321 1.364.013 2.728.006 4.092.006 1.351 0 2.702.007 4.053-.006.251-.002.322.059.321.317-.01 2.714-.009 5.429-.001 8.144zm-.345-21.224c-2.7-.01-5.399-.01-8.099 0-.266.001-.351-.059-.348-.338.015-1.363.007-2.725.007-4.088 0-1.324.007-2.648-.006-3.972-.002-.285.043-.402.375-.401 2.687.015 5.373.014 8.06.001.302-.001.359.085.358.369-.011 2.7-.012 5.399.001 8.099 0 .285-.088.331-.348.33zm1.935 1.996c-.001-.318.069-.409.4-.409 6.389.011 12.778.011 19.166 0 .331 0 .402.096.4.413-.012 2.922-.013 5.843.001 8.765.001.324-.08.407-.405.405-3.194-.013-6.389-.008-9.583-.008-3.181 0-6.363-.007-9.544.01-.37.002-.436-.11-.435-.45.014-2.909.013-5.817 0-8.726zm19.967 19.168c.001.302-.069.391-.384.391-6.4-.01-12.801-.01-19.201 0-.315 0-.383-.093-.382-.392a984.79 984.79 0 0 0 0-8.062c-.001-.274.07-.34.341-.339 3.22.01 6.439.006 9.659.006 3.194 0 6.387.004 9.581-.007.3-.001.388.068.387.38a894.012 894.012 0 0 0-.001 8.023zm.002-21.518c.002.307-.094.355-.372.354-3.22-.01-6.44-.006-9.661-.006-3.181 0-6.363-.006-9.544.009-.337.002-.393-.096-.392-.408.013-2.662.013-5.324 0-7.986-.002-.323.082-.408.407-.407 6.388.01 12.777.009 19.165.002.293 0 .398.055.396.379-.014 2.688-.013 5.376.001 8.063z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgGrid);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"fbd343c52c97f990a5c36d07d794dac5.svg\";","var _path, _path2, _path3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgImage = function SvgImage(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 39.916 33.537\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M.334 0C-.015 0 .006.152.006.388.009 11.282.011 22.177 0 33.072c0 .362.064.465.451.465 13.155-.012 26.31-.01 39.465-.01V.013C26.722.012 13.528.013.334 0zm37.995 31.492c0 .346-.073.453-.441.453-11.949-.011-23.898-.01-35.847-.001-.357 0-.447-.09-.446-.447.01-9.819.01-19.637.001-29.456 0-.346.072-.454.441-.453 5.973.012 11.948.009 17.923.009 5.975 0 11.949.003 17.924-.008.358-.001.447.091.446.447-.01 9.818-.01 19.637-.001 29.456z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.939 4.389c0-.324-.08-.403-.403-.403-10.378.009-20.756.01-31.134-.002-.358 0-.416.102-.416.431.01 5.681.007 11.362.007 17.042 0 2.559.009 5.117-.01 7.676-.003.359.103.418.432.417 5.183-.011 10.365-.008 15.548-.008s10.365-.003 15.548.008c.333.001.43-.064.43-.419-.013-8.247-.012-16.494-.002-24.742zM5.937 5.594c9.351.008 18.702.007 28.053.002.229 0 .338.023.337.304-.01 4.623-.007 9.247-.008 13.87 0 .064-.008.128-.016.245-.704-.278-1.385-.545-2.065-.815-1.239-.492-2.481-.974-3.712-1.483-.43-.177-.802-.161-1.219.053-1.716.879-3.448 1.726-5.166 2.601-.254.13-.373.117-.546-.128-2.395-3.374-4.802-6.74-7.207-10.107-.531-.743-.995-.764-1.585-.074l-6.937 8.109c-.064.075-.13.148-.262.297v-7.702c0-1.61.007-3.221-.007-4.831-.003-.271.066-.342.34-.341zm27.999 22.345c-4.663-.008-9.326-.005-13.989-.005-4.65 0-9.3-.004-13.95.008-.322.001-.405-.073-.402-.4.017-2.104.012-4.208.003-6.312a.825.825 0 0 1 .224-.588c2.489-2.894 4.974-5.791 7.446-8.699.218-.256.29-.196.452.032 2.334 3.275 4.675 6.544 7.015 9.814.47.657.71.722 1.435.359 1.829-.915 3.658-1.831 5.482-2.757.214-.108.389-.135.618-.042a600.12 600.12 0 0 0 5.731 2.295c.241.095.329.204.327.472-.014 1.818-.017 3.637.002 5.455.003.329-.112.369-.394.368z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M26.336 8.8a3.18 3.18 0 0 0-3.18 3.192 3.198 3.198 0 0 0 3.201 3.177c1.753-.008 3.19-1.45 3.186-3.198-.004-1.753-1.443-3.176-3.207-3.171zm.04 4.774a1.587 1.587 0 0 1-1.625-1.584 1.59 1.59 0 0 1 1.606-1.605 1.573 1.573 0 0 1 1.579 1.585 1.574 1.574 0 0 1-1.56 1.604z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgImage);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e301e4ef0abb4058546b0b27846a4caa.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgNews = function SvgNews(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 38.405 36.284\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.377 8.913c-.192-1.516-.918-2.65-2.367-3.253-.586-.244-1.21-.29-1.83-.294-2.39-.015-4.78-.008-7.17-.009-.04.206-.053.412-.057.618 0-.211.002-.422-.012-.633-.004-.143-.012-.285-.012-.428-.001-1.338.003-2.676-.002-4.014-.002-.57-.283-.859-.85-.896-.104-.007-.208-.003-.312-.003H1.021C.917.001.813-.005.709.004a.75.75 0 0 0-.695.67C-.002.802 0 .933 0 1.063L.001 29.08c0 .312.001.624.027.935.174 2.072.99 3.806 2.74 5.006 1.278.877 2.731 1.251 4.265 1.253 8.014.011 16.028.004 24.043.01.26 0 .504-.075.768-.061 2.115.109 3.862-.649 5.167-2.322 1.078-1.383 1.385-3.023 1.388-4.726.01-6.546.004-13.093.003-19.639 0-.208.001-.418-.025-.623zM27.331 34.668c-6.768 0-13.536.002-20.304-.002-1.318-.001-2.542-.349-3.616-1.126-1.313-.95-1.73-2.339-1.814-3.874-.011-.207-.007-.416-.007-.623 0-9.002.002-18.004-.008-27.007 0-.35.08-.442.437-.441 7.625.011 15.25.012 22.876-.001.384-.001.457.101.457.468-.011 9.002-.005 18.004-.013 27.007-.001 1.458.256 2.836 1.046 4.083.348.55.773 1.035 1.366 1.516h-.42zm9.281-4.252c-.213 2.019-1.337 3.394-3.195 3.94-1.266.372-2.447.085-3.596-.419-1.169-.513-2.028-1.347-2.448-2.579-.246-.72-.332-1.468-.332-2.225-.001-7.145 0-14.289-.002-21.434 0-.245.035-.495-.078-.729-.006-.174-.003-.349-.002-.523.007.181.016.363.022.544.164.146.367.115.558.115 1.065.004 2.13-.001 3.196.004.374.002.392.035.244.376-.272.626-.442 1.274-.442 1.962l.001 18.745c0 .195-.004.39.04.582.106.455.481.769.91.765.428-.005.799-.327.895-.783.049-.231.035-.466.035-.699l.001-18.355c0-.208-.007-.416.014-.623.117-1.135.8-1.881 1.865-1.95 1.266-.082 1.908.404 2.257 1.523.114.365.142.736.142 1.115-.002 6.313-.003 12.627 0 18.94 0 .57-.025 1.138-.085 1.708z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.813 8.159H4.981c-.512 0-.877-.318-.89-.774-.015-.476.344-.814.889-.814 5.222-.002 10.443-.002 15.665.001.502 0 .823.24.894.637a.797.797 0 0 1-.51.903c-.152.059-.307.043-.462.043l-7.755.001.001.003zm-.003 3.195H5.016c-.547 0-.913-.308-.926-.78-.013-.472.349-.808.894-.808 5.209-.002 10.418-.002 15.627 0 .607 0 .941.292.938.795-.002.502-.343.79-.945.79l-7.794.001v.002zM17.578 17.744h-2.999c-.542 0-.904-.318-.909-.795-.005-.473.354-.809.899-.81 2.012-.005 4.024-.005 6.036 0 .598.002.942.305.944.799.003.512-.347.803-.973.804h-2.999l.001.002zm-.004 3.193h-2.999c-.537-.001-.902-.325-.906-.8-.003-.475.353-.802.903-.803 1.999-.004 3.998-.004 5.997 0 .633.001.981.293.98.801-.001.509-.353.799-.977.799h-2.999l.001.003zm.03 3.024h-2.999c-.562 0-.939-.327-.936-.815.003-.468.374-.799.911-.8 2.012-.003 4.025-.004 6.037.001.664.002 1.074.485.906 1.045-.106.352-.42.563-.881.565-1.013.005-2.025.002-3.038.002v.002zm-.006 1.58c.999 0 1.999-.002 2.998.001.591.002.947.302.953.791.006.512-.348.814-.966.815-1.999.003-3.998.003-5.997.004-.539 0-.91-.322-.917-.793-.008-.488.362-.815.93-.817 1-.003 2-.001 2.999-.001zM17.636 30.135H14.6c-.565 0-.938-.326-.93-.811.008-.476.359-.781.919-.782 1.998-.003 3.996-.004 5.994.001.654.001 1.016.344.961.888-.041.415-.368.698-.834.701-1.025.006-2.05.002-3.075.002l.001.001zM8.017 17.743H5.372c-.545 0-.9-.314-.903-.796-.003-.476.351-.807.897-.808 1.763-.005 3.527-.006 5.291 0 .588.002.946.317.947.801.002.496-.369.801-.98.801H8.018l-.001.002zm.022 3.193H5.394c-.566 0-.932-.321-.926-.814.005-.475.358-.788.913-.789 1.75-.004 3.501-.002 5.251-.001.078 0 .156.003.233.013.449.058.746.383.737.804a.783.783 0 0 1-.802.781c-.92.011-1.841.003-2.762.003l.001.003zm-.032 3.194H5.362c-.515 0-.874-.308-.893-.769-.019-.48.332-.836.867-.838 1.789-.007 3.579-.008 5.368.001.553.003.903.337.9.81-.004.474-.363.79-.912.792-.895.003-1.789.001-2.684.001l-.001.003zm.002 3.194H5.402c-.567 0-.936-.319-.934-.809.002-.472.364-.803.905-.804 1.751-.004 3.502-.005 5.253 0 .613.002.982.318.978.815-.004.465-.35.79-.871.795-.908.007-1.816.002-2.724.002v.001zm.005 3.193H5.369c-.535-.001-.9-.329-.901-.804-.001-.474.358-.805.9-.806 1.764-.004 3.527-.005 5.291 0 .582.002.947.323.946.806-.001.487-.366.8-.945.801-.882.002-1.764.001-2.645.001l-.001.002z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgNews);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"ad3c82c4293395b67ee18d5668343144.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSatisfaction = function SvgSatisfaction(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 274.45 380.24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M185.36 215.84c-.17-3.48-.38-7-.51-10.45-.15-4.2 2.14-7.15 5.7-7.44 3.82-.31 6.83 2.22 7.14 6.52.5 6.83.85 13.69.95 20.54 0 2.74.9 3.25 3.48 3 5.71-.55 11.46-.78 17.19-1.07 4.9-.25 8 2.13 8.14 6.19s-2.55 6.68-7.5 7c-6 .37-12 .7-18 .88-2 0-2.54.67-2.37 2.62.48 5.84.78 11.69 1.15 17.54.31 4.89-2 8.05-5.94 8.32s-6.56-2.29-6.92-7.4c-.42-5.84-.85-11.69-1-17.54-.06-2.24-.58-3-2.95-2.8-6.1.5-12.22.7-18.33 1.05-4.67.27-7.72-1.91-8-5.81s2.59-6.78 7.4-7.05c6.11-.34 12.22-.7 18.33-.88 2 0 2.9-.54 2.67-2.75-.35-3.47-.44-7-.65-10.45Zm-42.84 56.05c-3.16-15.35-7-30.54-11.34-45.59-7-24.14-15.07-47.89-25.41-70.83-1.25-2.77-2.78-5-6.13-5.25s-5.66 1.65-7.19 4.44a58.25 58.25 0 0 0-3.23 6.71c-11.14 28.51-19.36 57.93-27 87.53-2.48 9.64-4.55 19.37-6.14 28.87-.16 4.07 2.26 7 5.8 7.31a6.6 6.6 0 0 0 7-5.89c1.57-10.47 4.24-20.7 6.73-31 .46-1.91 1.14-2.64 3.16-2.75 13.47-.71 26.93-1.48 40.38-2.45 2.62-.18 3.35.72 4 3 2.45 9.38 4.87 18.77 6.78 28.29 1 5 3.76 7.22 7.87 6.49 3.92-.66 5.73-4.01 4.72-8.88Zm-27-41.39c-11 .6-21.93 1.3-32.9 2-1.49.09-2.86.36-2.2-2 5.38-18.75 10.74-37.51 17.68-55.76.08-.21.35-.35.62-.59 7.22 17.58 13.3 35.55 19 53.65.76 2.44-.27 2.6-2.23 2.7Z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M274.41 114.37a7.62 7.62 0 0 0-2.38-5.9q-53.19-53-106.28-106.08A7.64 7.64 0 0 0 159.84 0Q82.07.12 4.29 0C1 0 0 .63 0 4.15q.18 93 .09 185.92T0 376c0 3.36.77 4.26 4.22 4.25q133.05-.15 266.12 0c3.21 0 4.1-.63 4.1-4q-.16-130.95-.03-261.88ZM167.74 28.2a1.3 1.3 0 0 1 .14-.59l78.91 78.81h-76.06c-1.62 0-3.08.36-3.07-2.3.11-25.3.07-50.61.08-75.92Zm91.44 332.52c0 3.36-.76 4.33-4.26 4.33q-117.69-.17-235.37 0c-3.4 0-4.34-.79-4.33-4.27q.18-85.29.08-170.57t-.08-170.59c0-3.61.86-4.49 4.49-4.48q64.28.21 128.55 0c3.58 0 4.21 1.07 4.2 4.34-.12 32.79 0 65.59-.14 98.38 0 3.07.73 3.94 3.88 3.93 32.85-.12 65.71 0 98.57-.17 3.74 0 4.42 1.07 4.42 4.56q-.19 117.27-.01 234.54Z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSatisfaction);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"c794e7ef67096fe205f6338b1d997567.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSingleStatistic = function SvgSingleStatistic(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 31.953 39.916\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.945 4.329c0-.078.002-.156 0-.234-.015-.58-.32-.892-.893-.898a65.217 65.217 0 0 0-2.027.003c-.222.005-.284-.062-.279-.281.014-.597.005-1.195.005-1.792 0-.889-.239-1.125-1.137-1.125H2.285c-.494 0-.987-.005-1.481.002C.372.01.069.281.01.705c-.016.115-.009.233-.009.35v34.603c0 .065-.002.13 0 .195.022.551.334.861.885.866.649.005 1.299.015 1.948-.005.275-.008.385.039.369.35-.03.57.018 1.144-.017 1.714-.03.499.118.877.547 1.138h27.674c.425-.264.546-.645.545-1.14-.01-11.482-.007-22.964-.007-34.447zM2.039 35.135c-.368 0-.435-.109-.435-.45.009-10.885.01-21.77-.001-32.654 0-.358.092-.442.444-.442 8.222.01 16.443.011 24.665-.001.367 0 .438.107.437.45-.011 5.455-.008 10.911-.008 16.366 0 5.429-.004 10.859.009 16.288.001.36-.095.442-.446.442-8.221-.011-16.443-.011-24.665.001zm28.295-13.577c0 5.443-.004 10.885.01 16.328.001.369-.11.434-.449.434-8.222-.009-16.444-.009-24.666 0-.322 0-.477-.046-.431-.412a4.46 4.46 0 0 0 .002-.895c-.02-.249.068-.298.303-.296 1.325.012 2.65.006 3.975.006h18.626c.782 0 1.048-.267 1.048-1.055 0-10.145.003-20.289-.01-30.434 0-.385.1-.493.468-.453.358.039.835-.111 1.052.07.23.192.07.684.07 1.044.004 5.22.002 10.441.002 15.663z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.423 15.171h-2.481c-.818 0-1.637-.013-2.455.007-.278.007-.324-.101-.311-.338a6.946 6.946 0 0 0-.002-.935c-.022-.273.063-.344.338-.342 1.975.013 3.949.007 5.924.007.481 0 .962.012 1.442-.005.224-.008.279.064.278.282-.007 2.481-.007 4.963-.001 7.444.001.199-.044.279-.257.268-.426-.022-.97.134-1.248-.074-.267-.2-.077-.775-.08-1.184-.011-1.294-.004-2.589-.004-3.897-.189.029-.257.167-.351.261-2.191 2.181-4.383 4.362-6.562 6.555-.232.234-.352.207-.566-.013-.761-.782-1.543-1.543-2.316-2.313-.589-.586-.588-.587-1.188.014-1.396 1.396-2.795 2.79-4.185 4.192-.166.167-.267.223-.447.013a8.904 8.904 0 0 0-.77-.772c-.143-.131-.127-.209.003-.338 1.935-1.923 3.867-3.849 5.792-5.782.183-.184.28-.13.433.024.915.922 1.839 1.835 2.757 2.754.123.123.198.23.385.042 1.922-1.934 3.855-3.857 5.872-5.87z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSingleStatistic);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"011cd50d8db3d51756723b9c23ee89c6.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgStateSummary = function SvgStateSummary(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 37.513 37.555\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.403 9.881a16.482 16.482 0 0 0-1.06-2.118c-2.082-3.504-4.997-6.059-8.745-7.661-.541-.231-.929-.068-1.162.477-.203.476-.415.95-.581 1.44-.102.301-.22.31-.493.199C21.067.461 16.701.314 12.325 1.831 4.188 4.651-1.065 12.883.183 21.708c.579 4.098 2.35 7.609 5.282 10.51 5.394 5.339 13.449 6.871 20.327 3.691 7.081-3.273 10.56-9.026 10.922-15.567-.007-3.622-.47-5.973-1.427-8.222-.104-.244-.082-.352.185-.443.477-.163.94-.367 1.407-.557.603-.246.771-.64.524-1.239zM8.169 5.858c2.68-2.093 5.756-3.186 9.145-3.423.328-.023.248.173.248.336.002 2 .002 4 .002 6v1.636c0 2.493-.008 4.987.008 7.48.002.372-.058.498-.474.497-5.013-.018-10.026-.015-15.038-.005-.343.001-.448-.051-.415-.437.425-4.977 2.594-9.016 6.524-12.084zm21.168 25.941c-3.4 2.897-7.331 4.297-11.791 4.107-7.563-.323-13.993-5.805-15.568-13.219a14.995 14.995 0 0 1-.317-2.232c-.03-.5-.034-.5.482-.5h7.716c2.598 0 5.196.002 7.794-.004.234-.001.406.052.58.227 3.705 3.716 7.415 7.428 11.134 11.13.22.22.186.307-.03.491zm2.21-2.337c-.178.239-.4.447-.564.694-.182.274-.3.197-.492.004-2.427-2.439-4.862-4.87-7.295-7.303-1.267-1.267-2.53-2.538-3.806-3.796a.772.772 0 0 1-.246-.611c.008-2.597.005-5.194.005-7.791 0-2.623.005-5.246-.006-7.869-.001-.292.056-.36.364-.339 1.813.126 3.557.53 5.244 1.202.284.113.324.214.206.498a4545.23 4545.23 0 0 0-5.094 12.301c-.088.213-.202.423-.172.67.066.552.608.853 1.173.625 1.02-.412 2.033-.841 3.049-1.261 3.18-1.315 6.361-2.626 9.537-3.949.231-.096.306-.043.388.172 2.287 6.002 1.544 11.589-2.291 16.753zm3.77-19.428c-.502.157-.984.373-1.484.539-.456.151-.889.447-1.353.638-3.431 1.414-6.861 2.83-10.292 4.245-.044.018-.089.034-.207.079l4.348-10.508c.381-.92.774-1.835 1.137-2.762.103-.263.179-.327.455-.187 3.351 1.698 5.869 4.216 7.549 7.578.117.234.062.311-.153.378z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgStateSummary);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"66f33b8484b759cfa2d7cb66af00f382.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgStats = function SvgStats(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 36.787 36.726\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.787 36.726c-.066-.15-.032-.308-.032-.461-.002-11.952-.004-23.903.005-35.855 0-.315-.061-.411-.396-.41-3.455.014-6.91.015-10.365 0-.359-.002-.438.094-.437.443.01 11.938.008 23.877.008 35.815 0 .156-.004.312-.006.467l11.223.001zM27.571 1.598c2.403.009 4.805.011 7.208-.002.304-.002.38.076.379.38-.01 5.468-.007 10.937-.007 16.405 0 5.429-.004 10.859.008 16.288.001.357-.056.474-.449.471a503.867 503.867 0 0 0-7.169-.004c-.283.001-.369-.058-.369-.359.009-10.937.009-21.874-.001-32.811 0-.332.12-.369.4-.368zm-16.347 9.179c0-.321-.072-.405-.399-.404-3.454.013-6.908.015-10.362-.001-.369-.002-.436.109-.436.451.009 8.481.008 16.962.006 25.443 0 .154.034.312-.032.461h11.223c-.002-.156-.006-.312-.006-.467-.001-8.495-.003-16.989.006-25.483zM9.206 35.136a721.806 721.806 0 0 0-7.209-.002c-.272.001-.37-.039-.37-.35.011-7.483.01-14.965.001-22.448 0-.296.075-.359.362-.358 2.416.013 4.832.014 7.247-.001.318-.002.375.097.375.389-.01 3.741-.006 7.483-.006 11.224 0 3.715-.005 7.431.008 11.146.002.334-.09.402-.408.4zM24.005 36.726c-.006-.142-.016-.284-.017-.427-.001-5.57-.004-11.14.008-16.71.001-.34-.076-.428-.423-.427-3.453.015-6.906.015-10.359 0-.347-.001-.424.086-.423.427.012 5.57.008 11.14.008 16.71 0 .142-.011.284-.016.427h11.222zm-9.226-15.978c2.415.015 4.83.014 7.246.001.297-.002.36.078.359.366-.01 4.558-.009 9.117-.001 13.675 0 .264-.056.348-.336.346a812.741 812.741 0 0 0-7.324-.001c-.258.001-.32-.071-.319-.323.01-2.299.006-4.597.006-6.896 0-2.26.005-4.52-.006-6.779-.002-.294.057-.391.375-.389z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgStats);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"449510a27ee815032bb7b811ca55d26d.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgText = function SvgText(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 36.805 33.535\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.407 1.6c-5.974 0-11.948-.003-17.922.008-.357.001-.482-.087-.445-.447C.072.853.054.538.044.227.038.057.099-.011.267.007c.077.008.156.001.234.001 11.935 0 23.871.002 35.806-.009.367 0 .518.071.463.458-.052.367.16.864-.087 1.077-.213.183-.693.064-1.054.064-5.741.003-11.482.002-17.222.002zm0 15.96c-5.973 0-11.946-.003-17.92.008-.344.001-.49-.067-.448-.438.035-.308.014-.623.004-.934-.006-.171.059-.237.226-.22.077.008.156.001.234.001 11.933 0 23.867.002 35.8-.009.366 0 .513.069.467.459-.042.358.113.841-.07 1.053-.211.245-.706.076-1.076.076-5.738.005-11.478.004-17.217.004zm-.021 15.967c-5.974 0-11.948-.003-17.922.008-.337.001-.469-.068-.422-.42.05-.381-.162-.895.09-1.114.218-.19.717-.065 1.092-.065 11.688-.001 23.377.001 35.065-.011.397 0 .529.095.483.489-.035.295-.015.597-.004.895.006.172-.058.235-.225.218-.09-.009-.182-.002-.273-.002-5.962.002-11.923.002-17.884.002zM12.793 7.981c4.131 0 8.262.004 12.392-.008.321-.001.44.073.404.401-.044.395.166.927-.085 1.153-.218.196-.739.063-1.126.063-7.963.001-15.925-.001-23.888.008-.338 0-.502-.057-.45-.435.052-.381-.163-.897.089-1.117.216-.19.716-.064 1.09-.064 3.858-.002 7.716-.001 11.574-.001zm.012 17.574c-4.118 0-8.236-.004-12.353.007-.314.001-.449-.064-.411-.4.045-.396-.166-.93.087-1.157.22-.196.742-.06 1.13-.06 7.963-.001 15.926.001 23.888-.008.341 0 .493.064.444.434-.05.381.16.882-.082 1.121-.222.219-.716.059-1.09.06-3.871.005-7.742.003-11.613.003z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgText);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"9f04fee03cbece691d82a31525a1cc9b.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTimeSeries = function SvgTimeSeries(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 365.82 364.9\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259 136.71a14.84 14.84 0 0 1-14.65-11.54 5.53 5.53 0 0 0-3.26-4.08q-23.62-11.59-47.17-23.37c-1.61-.81-2.94-1.32-4.82-.28a12.45 12.45 0 0 1-8.77 1 6.08 6.08 0 0 0-5.67 1.51q-25.28 20.22-50.7 40.26a4.48 4.48 0 0 0-2 4c-.14 11.93-12.07 19-22.52 13.29a4.61 4.61 0 0 0-4.46-.27q-23.37 9.4-46.82 18.63a5 5 0 0 0-3.24 3.61 15 15 0 0 1-20.2 9.38 15.34 15.34 0 0 1-7.89-20.62 14.93 14.93 0 0 1 20.94-6.61 4.8 4.8 0 0 0 4.78.25q23.17-9.42 46.4-18.71a5 5 0 0 0 3.43-3.44A14.8 14.8 0 0 1 110 129.53a4.63 4.63 0 0 0 4.36-1.11q25.46-20.28 51-40.46c1.49-1.18 2.51-2.22 2.47-4.52a14.76 14.76 0 0 1 12.95-14.92c8-.89 15.16 3.77 16.87 11.48a5.15 5.15 0 0 0 3.22 4q23.43 11.58 46.81 23.27c1.89.94 3.58 1.6 5.5.23a2.87 2.87 0 0 1 1.75-.61c5.29.58 7.49-3.17 10-6.76q27.12-38.05 54.41-76c1.12-1.55 1.93-2.85 1.32-5A14.77 14.77 0 0 1 332 .35c8.45-1.81 16.81 3.65 18.2 11.89 1.51 8.94-4.27 17.07-13.16 17.94a6.6 6.6 0 0 0-5.35 3.13Q303.32 73 274.83 112.62c-1.19 1.66-1.83 3-1.18 5.34 2.71 9.54-4.65 18.77-14.65 18.75Zm106.82-34.35c0-2.91-.68-3.76-3.69-3.73q-26.79.23-53.59 0c-3.21 0-3.84 1-3.83 4q.14 64.52.06 129 0 64.69-.07 129.41c0 3.14.79 3.88 3.89 3.85q26.79-.24 53.59 0c3 0 3.64-.85 3.64-3.72q-.12-129.39 0-258.81ZM350.43 232c0 37.9 0 75.79.07 113.69 0 3-.67 4.06-3.86 4q-11.61-.36-23.23 0c-3 .09-3.42-.88-3.41-3.55.09-33.4.05-66.81.05-100.22q0-64.14-.06-128.27c0-2.8.52-3.82 3.59-3.72 7.74.25 15.49.22 23.23 0 2.92-.08 3.69.71 3.69 3.66q-.16 57.22-.07 114.41ZM213.5 170.69c0-3.19-1.14-3.56-3.84-3.54-17.74.1-35.48.13-53.22 0-3.17 0-4.18.56-4.16 4 .16 31.67.09 63.34.09 95s0 63.59-.06 95.38c0 2.55.53 3.38 3.25 3.37q27.36-.19 54.72 0c2.81 0 3.19-1 3.18-3.43q-.09-95.39.04-190.78Zm-18.8 179c-7.87-.23-15.74-.17-23.61 0-2.49 0-3.42-.45-3.42-3.2q.14-80.61 0-161.22c0-2.69 1-3 3.25-2.94 8 .1 16 .17 24 0 2.75-.07 3.21.88 3.2 3.37-.09 26.68-.05 53.37-.05 80.05s0 53.61.05 80.42c0 2.6-.47 3.6-3.42 3.51ZM289.46 285.17c0-25.55 0-51.1.06-76.65 0-2.46-.37-3.4-3.16-3.38-18.24.15-36.47.12-54.7 0-2.43 0-3.09.6-3.08 3.06q.1 76.83 0 153.66c0 2.6.86 3 3.16 3 18.11-.09 36.22-.12 54.32 0 2.77 0 3.5-.61 3.49-3.44-.14-25.42-.09-50.83-.09-76.25Zm-18.09 64.5c-8.12-.1-16.25-.15-24.36 0-2.67.06-3.32-.75-3.31-3.34.1-20.45.06-40.9.06-61.35s.05-40.9-.06-61.35c0-2.58.57-3.38 3.25-3.32 8.25.19 16.5.14 24.74 0 2.12 0 2.7.57 2.7 2.69q-.09 61.91 0 123.82c.02 2.51-.87 2.88-3.02 2.85Zm-134.18-53.3v-65.09c0-2.36-.21-3.44-3.1-3.42q-27.36.24-54.72 0c-2.85 0-3.12 1-3.12 3.42q.1 65.09 0 130.18c0 2.88.8 3.42 3.52 3.41q27-.19 54 0c2.74 0 3.52-.56 3.5-3.42-.15-21.68-.08-43.38-.08-65.08Zm-15.1 50.32c0 2.23-.53 3-2.9 3-8.24-.13-16.49-.16-24.74 0-2.59.06-3-.84-3-3.19.09-16.71 0-33.42 0-50.13s.06-33.17-.06-49.75c0-2.68.46-3.67 3.42-3.58 8 .23 16 .14 24 0 2.25 0 3.29.29 3.29 3q-.1 50.33-.01 100.65ZM61 311.34c0-16.46 0-32.92.06-49.37 0-2.57-.29-3.63-3.34-3.6-18.12.17-36.23.13-54.34 0-2.55 0-3.36.54-3.35 3.23q.15 49.92 0 99.86c0 2.46.39 3.41 3.18 3.39q27.35-.21 54.71 0c2.85 0 3.14-1 3.12-3.43-.11-16.67-.04-33.42-.04-50.08Zm-18.56 38.37c-8-.24-16-.16-24 0-2.35 0-3.25-.47-3.24-3.05q.15-35.11 0-70.23c0-2.29.58-2.95 2.9-2.91q12.54.22 25.08 0c2.25 0 2.6.78 2.59 2.77-.09 11.83 0 23.66 0 35.49 0 11.45-.08 22.91.06 34.37.04 2.6-.4 3.65-3.39 3.56Z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTimeSeries);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"afa3a0050038081a2dfe06001392447f.svg\";","import type {WidgetViewOption} from '../types'\r\nimport agendaImage from './images/agenda.svg'\r\nimport breakTimeImage from './images/breakTime.svg'\r\nimport copyImage from './images/copy.svg'\r\nimport datetimeImage from './images/datetime.svg'\r\nimport dispositionsImage from './images/dispositions.svg'\r\nimport gaugeImage from './images/gauge.svg'\r\nimport gridImage from './images/grid.svg'\r\nimport imageImage from './images/image.svg'\r\nimport newsImage from './images/news.svg'\r\nimport satisfactionImage from './images/satisfaction.svg'\r\nimport singleStatisticImage from './images/singleStatistic.svg'\r\nimport stateSummaryImage from './images/stateSummary.svg'\r\nimport statsImage from './images/stats.svg'\r\nimport textImage from './images/text.svg'\r\nimport timeSeriesImage from './images/timeSeries.svg'\r\n\r\n\r\nexport const standartWidgets: Array<WidgetViewOption> = [\r\n    {type: 'single', image: singleStatisticImage},\r\n    {type: 'agent_grid', image: gridImage},\r\n    {type: 'service_grid', image: gridImage},\r\n    {type: 'news', image: newsImage},\r\n    {type: 'summary', image: stateSummaryImage},\r\n    {type: 'gauge', image: gaugeImage},\r\n    {type: 'text', image: textImage},\r\n    {type: 'datetime', image: datetimeImage},\r\n    {type: 'image', image: imageImage},\r\n]\r\n\r\nexport const timeSeriesWidgets: Array<WidgetViewOption> = [{type: 'time_series', image: timeSeriesImage}]\r\n\r\nexport const widgetsFromOtherWallboard: Array<WidgetViewOption> = [{type: 'copy_from_other', image: copyImage}]\r\n\r\nexport const userWidgets: Array<WidgetViewOption> = [\r\n    {type: 'break_time', image: breakTimeImage},\r\n    {type: 'dispositions', image: dispositionsImage},\r\n    {type: 'my_stats', image: statsImage},\r\n    {type: 'satisfaction', image: satisfactionImage},\r\n    {type: 'agenda', image: agendaImage},\r\n]\r\n","import React from 'react'\r\n\r\nimport type {WidgetViewOption} from '../types'\r\nimport {Option} from './Option'\r\n\r\n\r\ninterface WidgetOptionsGroupProps {\r\n    title: string\r\n    widgets: WidgetViewOption[]\r\n    replacingWidgetId: string\r\n    onSaved: () => void\r\n}\r\n\r\nexport const WidgetOptionsGroup: React.FC<WidgetOptionsGroupProps> = ({title, widgets, replacingWidgetId, onSaved}) => {\r\n    return (\r\n        <>\r\n            <h4>{title}</h4>\r\n            <div className=\"mb-5 grid grid-cols-4 gap-5\">\r\n                {widgets.map(it => (\r\n                    <Option\r\n                        key={it.type}\r\n                        option={it}\r\n                        replacingWidgetId={replacingWidgetId}\r\n                        onSaved={onSaved}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {standartWidgets, timeSeriesWidgets, userWidgets, widgetsFromOtherWallboard} from './optionsList'\r\nimport {WidgetOptionsGroup} from './WidgetOptionsGroup'\r\n\r\n\r\nconst options = [\r\n    {title: 'standardWidgets', widgets: standartWidgets},\r\n    {title: 'userWidgets', widgets: userWidgets},\r\n    {title: 'timeSeriesWidgets', widgets: timeSeriesWidgets},\r\n    {title: 'copyFromExisting', widgets: widgetsFromOtherWallboard},\r\n] as const\r\n\r\nexport const Options: React.FC<{\r\n    replacingWidgetId: string\r\n    onSaved: () => void\r\n}> = ({replacingWidgetId, onSaved}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div>\r\n            {options.map(option => (\r\n                <WidgetOptionsGroup\r\n                    key={option.title}\r\n                    title={t.WALLBOARD_WIDGET_EMPTY[option.title]()}\r\n                    widgets={option.widgets}\r\n                    replacingWidgetId={replacingWidgetId}\r\n                    onSaved={onSaved}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {Options} from './Options'\r\n\r\n\r\ntype EmptyWidgetSettingsModalProps = CommonModalProps & {\r\n    replacingWidgetId: string\r\n}\r\n\r\nexport const EmptyWidgetSettingsModal: React.FC<EmptyWidgetSettingsModalProps> = ({\r\n    replacingWidgetId,\r\n    onClose,\r\n    ...commonModalProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <Modal\r\n            flex\r\n            data-id=\"settings-widgets\"\r\n            {...commonModalProps}\r\n            size=\"small\"\r\n            onClose={onClose}\r\n            className=\"max-h-[500px] flex-col\"\r\n        >\r\n            <Modal.Header role=\"heading\">\r\n                { t.WALLBOARD_WIDGET_EMPTY.name() }\r\n            </Modal.Header>\r\n            <Modal.Content className=\"overflow-auto\">\r\n                <Options\r\n                    replacingWidgetId={replacingWidgetId}\r\n                    onSaved={onClose}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton enabledInOffline onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {useRemoveWidget as useSimpleRemoveWidget} from '../../editing-context'\r\n\r\n\r\nexport function useRemoveWidget() {\r\n    const {openModal} = useModalsStateMethods()\r\n    const {t} = useLocalizationState()\r\n    const removeWidget = useSimpleRemoveWidget()\r\n\r\n    return useCallback(\r\n        (widget: SupervisorWidget) => {\r\n            assertDefined(widget)\r\n\r\n            openModal({\r\n                title: t.WALLBOARD.confirm_delete_title(widget.title),\r\n                body: t.WALLBOARD_WIDGET_EMPTY.confirm_delete_widget(\r\n                    widget.title,\r\n                ),\r\n                actions: {\r\n                    ok: {\r\n                        action() {\r\n                            removeWidget(widget.id)\r\n                        },\r\n                        title: t.WALLBOARD.delete(),\r\n                    },\r\n                    cancel: {\r\n                        title: t.WALLBOARD.cancel(),\r\n                    },\r\n                },\r\n            })\r\n        },\r\n        [openModal, t.WALLBOARD, removeWidget, t.WALLBOARD_WIDGET_EMPTY],\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"wallboard_Content_content_ivGCZ\"};","import React, {useEffect, useRef, useState} from 'react'\r\nimport {BpWallboard} from '@servicepattern/jskit'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {GRID_SIZE, MIN_CARD_SIZE} from '../../constants'\r\nimport {useAddWidget, useFontScale, useUpdateWidget, useWidgets} from '../../editing-context'\r\nimport {useWidgetsSubscriptionQuery} from '../../queries'\r\nimport type {Size} from '../../types'\r\nimport {useEditMode} from '../../ui-context/UIContext'\r\nimport {EditWidgetResolver, ViewWidgetResolver} from '../../widgets'\r\nimport {AudioAlert} from './AudioAlert'\r\nimport {useCreateEmptyWidget} from './useCreateEmptyWidget'\r\nimport {useOpenWidgetSettings} from './useOpenWidgetSettings'\r\nimport {useRemoveWidget} from './useRemoveWidget'\r\n\r\nimport styles from './Content.module.less'\r\n\r\n\r\nexport const Content: React.FC = () => {\r\n    const ref = useRef<HTMLElement>(null)\r\n    const editMode = useEditMode()\r\n    const fontScale = useFontScale()\r\n\r\n    useEffect(() => {\r\n        ref.current?.style.setProperty('--widget-font-size', fontScale + 'vmin')\r\n    }, [fontScale])\r\n\r\n    const widgets = useWidgets()\r\n    const updateWidget = useUpdateWidget()\r\n    const addWidget = useAddWidget()\r\n    const removeWidget = useRemoveWidget()\r\n\r\n    const [cellSize, setCellSize] = useState<Size>({width: 0, height: 0})\r\n    const {data: subscriptionData} = useWidgetsSubscriptionQuery(widgets)\r\n    const createEmptyWidget = useCreateEmptyWidget({addWidget, minCardSize: MIN_CARD_SIZE})\r\n    const openSettings = useOpenWidgetSettings({updateWidget})\r\n\r\n    return (\r\n        <main\r\n            ref={ref}\r\n            className={tcn(styles.content, 'relative m-3 flex min-w-0 flex-auto flex-col')}\r\n            data-testid=\"wallboard-content\"\r\n        >\r\n            <BpWallboard\r\n                editMode={editMode.value}\r\n                subscriptionData={subscriptionData}\r\n                createEmptyWidget={createEmptyWidget}\r\n                widgets={widgets}\r\n                cellSize={cellSize}\r\n                setCellSize={setCellSize}\r\n                minCardSize={MIN_CARD_SIZE}\r\n                gridSize={GRID_SIZE}\r\n                WidgetResolverEdit={EditWidgetResolver}\r\n                WidgetResolverView={ViewWidgetResolver}\r\n                openSettings={openSettings}\r\n                removeWidget={removeWidget}\r\n                updateWidget={updateWidget}\r\n            />\r\n            <AudioAlert />\r\n        </main>\r\n    )\r\n}\r\n","import {useQuery, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_SECOND} from '@bpinc/lib-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {SupervisorWidgetsApiServices} from '@bpinc/lib-widgets-urls'\r\n\r\nimport {getWidgetsSubscriptionData} from '../selectors'\r\nimport {queryKey} from './index'\r\n\r\n\r\nexport function useWidgetsSubscriptionQuery(widgets: SupervisorWidget[]) {\r\n    // Get subscription data from widgets\r\n    const subscriptionData = getWidgetsSubscriptionData(widgets)\r\n    const queryClient = useQueryClient()\r\n\r\n    // Create subscription\r\n    const {data: resubscribed, isRefetching} = useQuery({\r\n        queryKey: queryKey.subscribe(subscriptionData),\r\n        queryFn: async () => {\r\n            // Cancel previous subscription queries\r\n            queryClient.cancelQueries({queryKey: queryKey.subscribe()})\r\n            // Invalidate previous subscription data\r\n            queryClient.invalidateQueries({queryKey: queryKey.subscribe_data()})\r\n\r\n            // Delete previous subscription\r\n            await SupervisorWidgetsApiServices.deleteSupervisorWidgetsSubscription()\r\n\r\n            // Create new subscription\r\n            await SupervisorWidgetsApiServices.createSupervisorWidgetsSubscription({requestBody: subscriptionData})\r\n            return true\r\n        },\r\n        gcTime: MS_IN_SECOND * 5,\r\n        staleTime: MS_IN_SECOND * 5,\r\n        // Refetch only if subscription data exists\r\n        enabled: !!Object.keys(subscriptionData).length,\r\n    })\r\n\r\n    // Get subscription data\r\n    return useQuery({\r\n        queryKey: queryKey.subscribe_data(),\r\n        queryFn: SupervisorWidgetsApiServices.getSupervisorWidgetsSubscriptionData,\r\n        // Refetch every 5 seconds\r\n        refetchInterval: MS_IN_SECOND * 5,\r\n        retry(failureCount) {\r\n            if (failureCount > 2) {\r\n                queryClient.invalidateQueries({queryKey: queryKey.subscribe(subscriptionData)})\r\n                return false\r\n            }\r\n\r\n            return true\r\n        },\r\n        // Refetch only if subscription was created\r\n        enabled: !!resubscribed && !isRefetching,\r\n    })\r\n}\r\n\r\n","import {useCallback} from 'react'\r\n\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport type {SupervisorWidget, SupervisorWidgetConfigEmpty} from '@bpinc/lib-widgets-urls'\r\n\r\nimport type {Size} from '../../types'\r\n\r\n\r\ntype Prams = {\r\n    addWidget: (widget: SupervisorWidget) => void\r\n    minCardSize: Size\r\n}\r\n\r\nexport function useCreateEmptyWidget({addWidget, minCardSize}: Prams) {\r\n    return useCallback(({start, end}: {\r\n        start: {x: number; y: number}\r\n        end: {x: number; y: number}\r\n    }) => {\r\n        if (!start || !end) {\r\n            return\r\n        }\r\n\r\n        const id = uuid()\r\n        const widget: SupervisorWidgetConfigEmpty = {\r\n            id,\r\n            type: 'empty',\r\n            title: 'New Card',\r\n            x: start.x,\r\n            y: start.y,\r\n            width: Math.max(end.x - start.x + 1, minCardSize.width),\r\n            height: Math.max(end.y - start.y + 1, minCardSize.height),\r\n            show_settings: true,\r\n        }\r\n\r\n        addWidget(widget)\r\n    }, [addWidget, minCardSize.height, minCardSize.width])\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useSetAtom} from 'jotai'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport type {\r\n    SupervisorWidget,\r\n    SupervisorWidgetAgentGridSubscriptionData,\r\n    SupervisorWidgetConfigGrid,\r\n    SupervisorWidgetServicesGridSubscriptionData,\r\n} from '@bpinc/lib-widgets-urls'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {updatingWidgetDataAtom} from '../../atoms'\r\nimport {AgentGridModal} from '../../settings-modals/AgentGridModal'\r\nimport {\r\n    EmptyWidgetSettingsModal,\r\n    useAgendaWidget,\r\n    useBreakTimeWidget,\r\n    useDispositionsWidget,\r\n    useMyStatsWidget,\r\n    useSatisfactionWidget,\r\n    useSingleOrGaugeWidget,\r\n    useSummaryWidget,\r\n} from '../../settings-modals/EmptyWidgetSettingsModal'\r\nimport {ImageSettingsModal} from '../../settings-modals/ImageSettingsModal'\r\nimport {NewsSettingsModal} from '../../settings-modals/NewsSettingsModal'\r\nimport {ServiceGridModal} from '../../settings-modals/ServiceGridModal'\r\nimport {TextSettingsModal} from '../../settings-modals/TextSettingsModal'\r\nimport {TimeSeriesModal} from '../../settings-modals/TimeSeriesModal'\r\n\r\n\r\ntype ConfigAgentGrid = SupervisorWidgetConfigGrid & {\r\n    subscription: SupervisorWidgetAgentGridSubscriptionData\r\n}\r\ntype ConfigServiceGrid = SupervisorWidgetConfigGrid & {\r\n    subscription: SupervisorWidgetServicesGridSubscriptionData\r\n}\r\n\r\ntype Params = {\r\n    updateWidget: (widget: SupervisorWidget) => void\r\n}\r\n\r\n\r\nexport function useOpenWidgetSettings({updateWidget}: Params) {\r\n    const setUpdateWidgetAtom = useSetAtom(updatingWidgetDataAtom)\r\n\r\n    const openEmptyWidgetSettingsModal = useModalComponentOpener(EmptyWidgetSettingsModal)\r\n\r\n    const openServiceGridModal = useModalComponentOpener(ServiceGridModal)\r\n    const openAgentGridModal = useModalComponentOpener(AgentGridModal)\r\n    const openImageSettingsModal = useModalComponentOpener(ImageSettingsModal)\r\n    const openNewsSettingsModal = useModalComponentOpener(NewsSettingsModal)\r\n    const openTextSettingsModal = useModalComponentOpener(TextSettingsModal)\r\n    const openTimeSeriesModal = useModalComponentOpener(TimeSeriesModal)\r\n\r\n    const updateAgendaWidget = useAgendaWidget({onSaved: noop})\r\n    const updateDispositionsWidget = useDispositionsWidget({onSaved: noop})\r\n    const updateSingleOrGaugeWidget = useSingleOrGaugeWidget({onSaved: noop})\r\n    const updateBreakTimeWidget = useBreakTimeWidget({onSaved: noop})\r\n    const updateMyStatsWidget = useMyStatsWidget({onSaved: noop})\r\n    const updateSatisfaction = useSatisfactionWidget({onSaved: noop})\r\n    const updateSummaryWidget = useSummaryWidget({onSaved: noop})\r\n\r\n\r\n    return useCallback(\r\n        (widget: SupervisorWidget) => {\r\n            setUpdateWidgetAtom({updateWidget, widget})\r\n            switch (widget.type) {\r\n                case 'agenda':\r\n                    updateAgendaWidget(widget)\r\n                    break\r\n                case 'break_time':\r\n                    updateBreakTimeWidget(widget)\r\n                    break\r\n                case 'dispositions':\r\n                    updateDispositionsWidget(widget)\r\n                    break\r\n                case 'gauge':\r\n                case 'single':\r\n                    updateSingleOrGaugeWidget(widget.type, widget)\r\n                    break\r\n                case 'grid':\r\n                    switch (widget.subscription.type) {\r\n                        case 'agent_grid':\r\n                            openAgentGridModal({\r\n                                replacingWidgetId: widget.id,\r\n                                formValues: widget as ConfigAgentGrid,\r\n                            })\r\n                            break\r\n                        case 'service_grid':\r\n                            openServiceGridModal({\r\n                                replacingWidgetId: widget.id,\r\n                                formValues: widget as ConfigServiceGrid,\r\n                            })\r\n                            break\r\n                    }\r\n                    break\r\n                case 'image':\r\n                    openImageSettingsModal({\r\n                        replacingWidgetId: widget.id,\r\n                        formValues: widget,\r\n                    })\r\n                    break\r\n                case 'my_stats':\r\n                    updateMyStatsWidget(widget)\r\n                    break\r\n                case 'news':\r\n                    openNewsSettingsModal({\r\n                        replacingWidgetId: widget.id,\r\n                        formValues: {\r\n                            title: widget.title || '',\r\n                            newsCount: widget.subscription?.req.limit,\r\n                        },\r\n                    })\r\n                    break\r\n                case 'satisfaction':\r\n                    updateSatisfaction(widget)\r\n                    break\r\n                case 'summary':\r\n                    updateSummaryWidget(widget)\r\n                    break\r\n                case 'text':\r\n                    openTextSettingsModal({\r\n                        replacingWidgetId: widget.id,\r\n                        formValues: widget,\r\n                    })\r\n                    break\r\n                case 'time_series':\r\n                    openTimeSeriesModal({\r\n                        replacingWidgetId: widget.id,\r\n                        formValues: widget,\r\n                    })\r\n                    break\r\n                default:\r\n                    openEmptyWidgetSettingsModal({\r\n                        replacingWidgetId: widget.id,\r\n                    })\r\n            }\r\n        },\r\n        [\r\n            setUpdateWidgetAtom,\r\n            updateWidget,\r\n            updateAgendaWidget,\r\n            updateBreakTimeWidget,\r\n            updateDispositionsWidget,\r\n            updateSingleOrGaugeWidget,\r\n            openImageSettingsModal,\r\n            updateMyStatsWidget,\r\n            openNewsSettingsModal,\r\n            updateSatisfaction,\r\n            updateSummaryWidget,\r\n            openTextSettingsModal,\r\n            openTimeSeriesModal,\r\n            openEmptyWidgetSettingsModal,\r\n            openAgentGridModal,\r\n            openServiceGridModal,\r\n        ],\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {SemanticButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype HeaderButtonProps = Pick<SemanticButtonProps, 'onClick' | 'className' | 'icon' | 'color' | 'loading' | 'disabled'>\r\n\r\nexport const HeaderButton: FC<HeaderButtonProps> = ({className, ...rest}) => {\r\n    return (\r\n        <SemanticButton\r\n            {...rest}\r\n            basic\r\n            className={tcn(\r\n                'm-0 h-8 w-8 p-0',\r\n                'flex items-center justify-center !bg-white',\r\n                '[&>i]:flex [&>i]:items-center [&>i]:justify-center [&>i]:text-xl [&>i]:outline-none',\r\n                className,\r\n            )}\r\n        />\r\n    )\r\n}\r\n","import type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport type {ModalBase} from '@bpinc/state-modals-types'\r\n\r\nimport type {SupervisorWidgetTypes} from '../types'\r\nimport type {AgentGridWidgetSettingsModalParams} from './AgentGridModal'\r\nimport type {AgentStatesModalParams} from './AgentStatesModal'\r\nimport type {ImageWidgetSettingsModalParams} from './ImageSettingsModal'\r\nimport type {NewsWidgetSettingsModalParams} from './NewsSettingsModal'\r\nimport type {ServiceGridWidgetSettingsModalParams} from './ServiceGridModal'\r\nimport type {TextWidgetSettingsModalParams} from './TextSettingsModal'\r\nimport type {TimeSeriesWidgetSettingsModalParams} from './TimeSeriesModal'\r\n\r\n\r\ninterface UserSelectionModal extends ModalBase {\r\n    type: 'select_user'\r\n    onSelected: (userId: string) => void\r\n}\r\n\r\ninterface EmptyWidgetSettingsModal extends ModalBase {\r\n    type: 'empty_widget_settings'\r\n    replacingWidgetId: string\r\n}\r\n\r\ninterface SummaryWidgetSettingsModal extends ModalBase {\r\n    type: 'summary'\r\n    replacingWidgetId: string\r\n}\r\n\r\ninterface SingleOrGaugeWidgetSettingsModal extends ModalBase {\r\n    type: 'single_or_gauge_widget_settings'\r\n    replacingWidgetId: string\r\n    widgetType: Extract<SupervisorWidgetTypes, 'gauge' | 'single'>\r\n    onSave: (widget: SupervisorWidget) => void\r\n}\r\n\r\ninterface CopyWidgetModal extends ModalBase {\r\n    type: 'copy_widget'\r\n    replacingWidgetId: string\r\n    onSave: (widget: SupervisorWidget) => void\r\n}\r\n\r\ninterface ServicesSelectModal extends ModalBase {\r\n    type: 'services_select'\r\n    services: string[]\r\n    onSelect: (services: string[]) => void\r\n}\r\n\r\ninterface TeamsSelectModal extends ModalBase {\r\n    type: 'teams_select'\r\n    teams: string[]\r\n    onSelect: (teams: string[]) => void\r\n}\r\n\r\ninterface TeamsSelectModal extends ModalBase {\r\n    type: 'teams_select'\r\n    teams: string[]\r\n    onSelect: (team: string[]) => void\r\n}\r\n\r\n\r\ntype Modal =\r\n    | EmptyWidgetSettingsModal\r\n    | ImageWidgetSettingsModalParams\r\n    | TextWidgetSettingsModalParams\r\n    | NewsWidgetSettingsModalParams\r\n    | CopyWidgetModal\r\n    | UserSelectionModal\r\n    | SummaryWidgetSettingsModal\r\n    | SingleOrGaugeWidgetSettingsModal\r\n    | ServicesSelectModal\r\n    | TeamsSelectModal\r\n    | AgentGridWidgetSettingsModalParams\r\n    | ServiceGridWidgetSettingsModalParams\r\n    | AgentStatesModalParams\r\n    | TimeSeriesWidgetSettingsModalParams\r\n\r\n\r\ntype FormValuesUnion<T extends Modal> = T extends { formValues?: infer V } ? V : never\r\nexport type FormValues = FormValuesUnion<Modal>\r\n\r\nexport const userWidgetTypes = ['dispositions', 'satisfaction', 'my_stats', 'break_time', 'agenda'] as const\r\n\r\nexport type UserWidgetsType = typeof userWidgetTypes[number]\r\n","import {useCallback} from 'react'\r\n\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {SupervisorWidget} from '@bpinc/lib-widgets-urls'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {useWidgets} from '../../editing-context'\r\nimport {useUpdateWallboardWidgetsMutation} from '../../mutations'\r\nimport {useSelectedWallboardQuery} from '../../queries'\r\nimport {SelectUserModal} from '../../settings-modals/SelectUserModal'\r\nimport {userWidgetTypes} from '../../settings-modals/types'\r\nimport {useWidgetOptions} from '../../settings-modals/useWidgetOptions'\r\n\r\n\r\nexport const useChangeUserWidgets = () => {\r\n    const {mutateAsync: updateWallboardWidgets} = useUpdateWallboardWidgetsMutation()\r\n    const widgetOptions = useWidgetOptions()\r\n    const {data: selectedWallboard} = useSelectedWallboardQuery()\r\n    const currentWidgets = useWidgets()\r\n    const openSelectUserModal = useModalComponentOpener(SelectUserModal)\r\n\r\n    return useCallback(() => {\r\n        openSelectUserModal({\r\n            onSelected: async (userId: string, userName: string) => {\r\n                assertDefined(selectedWallboard)\r\n                const widgets: SupervisorWidget[] = currentWidgets.map(currentWidget => {\r\n                    const type = userWidgetTypes.find(item => item === currentWidget.type)\r\n\r\n                    if (!type) {\r\n                        return currentWidget\r\n                    }\r\n\r\n                    return {\r\n                        ...currentWidget,\r\n                        type,\r\n                        title: widgetOptions[type].title(userName),\r\n                        subscription: widgetOptions[type].subscription(currentWidget.id, userId),\r\n                        user_id: userId,\r\n                        userName,\r\n                    } as SupervisorWidget\r\n                })\r\n\r\n                if (widgets.length && selectedWallboard) {\r\n                    await updateWallboardWidgets({\r\n                        wallboardId: selectedWallboard.id,\r\n                        updatedWallboardWidgets: widgets,\r\n                    })\r\n                }\r\n            },\r\n        })\r\n    }, [currentWidgets, openSelectUserModal, selectedWallboard, updateWallboardWidgets, widgetOptions])\r\n}\r\n\r\n","import {useMemo} from 'react'\r\n\r\nimport type {SupervisorWidgetAgentGridSubscriptionData} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    createBreakTimeWidgetSubscription,\r\n    createDispositionsWidgetSubscription,\r\n    createMyStatsWidgetSubscription,\r\n    createSatisfactionWidgetSubscription,\r\n} from './helpers'\r\nimport type {UserWidgetsType} from './types'\r\n\r\n\r\ninterface UserWidgetOptions {\r\n    title: (userName: string) => string\r\n    subscription: (widgetId: string, userId: string) => SupervisorWidgetAgentGridSubscriptionData | undefined\r\n}\r\n\r\nexport const useWidgetOptions: () => Record<UserWidgetsType, UserWidgetOptions> = () => {\r\n    const {t} = useLocalizationState()\r\n    return useMemo(() => {\r\n        return {\r\n            dispositions: {\r\n                title: (userName: string) => {\r\n                    return t.WALLBOARD_DISPOSITION_WIDGET.name(userName)\r\n                },\r\n                subscription: (widgetId: string, userId: string) => {\r\n                    return createDispositionsWidgetSubscription(widgetId, userId)\r\n                },\r\n            },\r\n            satisfaction: {\r\n                title: (userName: string) => {\r\n                    return t.WALLBOARD_SATISFACTION_WIDGET.name(userName)\r\n                },\r\n                subscription: (widgetId: string, userId: string) => {\r\n                    return createSatisfactionWidgetSubscription(widgetId, userId)\r\n                },\r\n            },\r\n            break_time: {\r\n                title: (userName: string) => {\r\n                    return t.WALLBOARD_BREAK_TIME_WIDGET.name(userName)\r\n                },\r\n                subscription: (widgetId: string, userId: string) => {\r\n                    return createBreakTimeWidgetSubscription(widgetId, userId)\r\n                },\r\n            },\r\n            my_stats: {\r\n                title: (userName: string) => {\r\n                    return t.WALLBOARD_MY_STATS_WIDGET.name(userName)\r\n                },\r\n                subscription: (widgetId: string, userId: string) => {\r\n                    return createMyStatsWidgetSubscription(widgetId, userId)\r\n                },\r\n            },\r\n            agenda: {\r\n                title: (userName: string) => {\r\n                    return t.WALLBOARD_AGENDA_WIDGET.name(userName)\r\n                },\r\n                subscription: (widgetId: string, userId: string) => {\r\n                    return undefined\r\n                },\r\n            },\r\n        }\r\n    }, [\r\n        t.WALLBOARD_MY_STATS_WIDGET,\r\n        t.WALLBOARD_SATISFACTION_WIDGET,\r\n        t.WALLBOARD_BREAK_TIME_WIDGET,\r\n        t.WALLBOARD_DISPOSITION_WIDGET,\r\n        t.WALLBOARD_AGENDA_WIDGET,\r\n    ])\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownItemProps, DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useWallboardsQuery} from '../../queries'\r\nimport {useGoToWallboard} from '../context/RouterContext'\r\n\r\n\r\nexport const WallboardSelect: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const {wallboardId} = useParams()\r\n    const {data} = useWallboardsQuery()\r\n    const goToWallboard = useGoToWallboard()\r\n    const options = useMemo(() => {\r\n        const personal: DropdownItemProps[] = []\r\n        const global: DropdownItemProps[] = []\r\n        data?.forEach(({id, name, is_global}) => {\r\n            is_global ? global.push({value: id, text: name}) : personal.push({value: id, text: name})\r\n        })\r\n        return truthy([\r\n            personal.length ? {disabled: true, text: t.WALLBOARD.wallboard_select_personal()} : undefined,\r\n            ...personal,\r\n            global.length ? {disabled: true, text: t.WALLBOARD.wallboard_select_global()} : undefined,\r\n            ...global,\r\n        ])\r\n    }, [data, t.WALLBOARD])\r\n\r\n    const handleSelectWallboard = useCallback((_e: SyntheticEvent<HTMLElement, Event>, {value}: DropdownProps) => {\r\n        if (typeof value !== 'string') {\r\n            throw new Error('WallboardSelect: value must be a string')\r\n        }\r\n\r\n        goToWallboard(value)\r\n    }, [goToWallboard])\r\n\r\n\r\n    return (\r\n        <Dropdown\r\n            options={options}\r\n            className=\"text-2xl text-white\"\r\n            value={wallboardId}\r\n            onChange={handleSelectWallboard}\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {SmButtonGroup, SmIcon} from '@bpinc/lib-external-ui-elements'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {PopupButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useDarkTheme, useEditMode, usePageConfig} from '../../ui-context/UIContext'\r\nimport {HeaderButton} from './HeaderButton'\r\nimport {useMenuOptions} from './useMenuOptions'\r\nimport {useSelectWallboard} from './useSelectWallboard'\r\nimport {WallboardSelect} from './WallboardSelect'\r\n\r\n\r\nexport const BaseHeaderContent: FC = () => {\r\n    const darkTheme = useDarkTheme()\r\n    const editMode = useEditMode()\r\n    const pageConfig = usePageConfig()\r\n    const selectWallboard = useSelectWallboard()\r\n    const showMenuOptions = useBoolean()\r\n    const menuOptions = useMenuOptions(showMenuOptions)\r\n\r\n    return (\r\n        <>\r\n            <section className=\"flex items-center\">\r\n                <WallboardSelect />\r\n                <SmButtonGroup className=\"ml-6 flex items-center\">\r\n                    <HeaderButton\r\n                        icon=\"chevron left\"\r\n                        onClick={selectWallboard?.previous}\r\n                        className=\"border border-solid border-main-border !bg-white\"\r\n                    />\r\n                    <HeaderButton\r\n                        icon=\"chevron right\"\r\n                        onClick={selectWallboard?.next}\r\n                        className=\"border border-solid border-main-border !bg-white\"\r\n                    />\r\n                </SmButtonGroup>\r\n            </section>\r\n            <section className=\"flex gap-3\">\r\n                {!pageConfig?.deniedActions?.changeTheme && (\r\n                    <HeaderButton\r\n                        icon={darkTheme.value ? 'sun outline' : 'moon outline'}\r\n                        onClick={darkTheme.toggle}\r\n                    />\r\n                )}\r\n                <HeaderButton\r\n                    icon=\"edit outline\"\r\n                    onClick={editMode.setTrue}\r\n                />\r\n                <PopupButton\r\n                    options={menuOptions}\r\n                    show={showMenuOptions.value}\r\n                    toggleShow={showMenuOptions.toggle}\r\n                    optionClassName=\"hover:text-gray-800\"\r\n                    className=\"flex h-8 w-8 items-center justify-center !bg-white\"\r\n                >\r\n                    <SmIcon name=\"bars\" className=\"flex items-center justify-center text-xl\" />\r\n                </PopupButton>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useSelectedWallboardQuery, useWallboardsQuery} from '../../queries'\r\nimport {useGoToWallboard} from '../context/RouterContext'\r\n\r\n\r\nexport function useSelectWallboard() {\r\n    const {data: wallboard} = useSelectedWallboardQuery()\r\n    const {data: wallboards} = useWallboardsQuery()\r\n    const goToWallboard = useGoToWallboard()\r\n\r\n    return useMemo(() => {\r\n        if (!wallboards || !wallboard) {\r\n            return\r\n        }\r\n\r\n        const wallboardIndex = wallboards.findIndex(w => w.id === wallboard?.id)\r\n\r\n        return {\r\n            next: () => {\r\n                let nextIndex = wallboardIndex + 1\r\n                if (nextIndex > wallboards.length - 1) {\r\n                    nextIndex = 0\r\n                }\r\n\r\n                goToWallboard(wallboards[nextIndex].id)\r\n            },\r\n            previous: () => {\r\n                let prevIndex = wallboardIndex - 1\r\n                if (prevIndex < 0) {\r\n                    prevIndex = wallboards.length - 1\r\n                }\r\n                goToWallboard(wallboards[prevIndex].id)\r\n            },\r\n        }\r\n    }, [goToWallboard, wallboard, wallboards])\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport type {BooleanManager} from '@bpinc/lib-helpers'\r\nimport {downloadJsonFile, readFromJsonFile} from '@bpinc/lib-helpers'\r\nimport {assertDefined, truthy} from '@bpinc/lib-types-helpers'\r\nimport type {PopupMenuOption} from '@bpinc/lib-ui-elements'\r\nimport type {WallboardConfig} from '@bpinc/lib-widgets-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener, useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {useSetName, useSetWidgets} from '../../editing-context'\r\nimport {LogoutModal, NewWallboardModal, PullFromGlobalModal, WallboardRotationModal} from '../../modals'\r\nimport {useCreateWallboardCopyMutation, useDeleteWallboardMutation, useToggleGlobalMutation} from '../../mutations'\r\nimport {useSelectedWallboardQuery} from '../../queries'\r\nimport {getWallboardWidgets} from '../../selectors'\r\nimport {useEditMode, usePageConfig, useShowTitleBar} from '../../ui-context/UIContext'\r\nimport {useGoToNewWallboard} from '../context/RouterContext'\r\nimport {useChangeUserWidgets} from './useChangeUserWidgets'\r\n\r\n\r\nexport function useMenuOptions(\r\n    showMenuOptions: BooleanManager,\r\n): PopupMenuOption[] {\r\n    const {openModal} = useModalsStateMethods()\r\n    const openLogoutModal = useModalComponentOpener(LogoutModal)\r\n    const openNewWallboardModal = useModalComponentOpener(NewWallboardModal)\r\n    const openWallboardRotationModal = useModalComponentOpener(WallboardRotationModal)\r\n    const openPullFromGlobalModal = useModalComponentOpener(PullFromGlobalModal)\r\n    const {mutate: toggleGlobal} = useToggleGlobalMutation()\r\n    const {data: wallboard} = useSelectedWallboardQuery()\r\n    const showTitleBar = useShowTitleBar()\r\n    const editMode = useEditMode()\r\n    const updateWidgets = useSetWidgets()\r\n    const updateName = useSetName()\r\n    const {t} = useLocalizationState()\r\n    const {mutate: duplicateWallboard} = useCreateWallboardCopyMutation()\r\n    const goToNewWallboard = useGoToNewWallboard()\r\n    const changeUserWidgets = useChangeUserWidgets()\r\n    const pageConfig = usePageConfig()\r\n    const {mutate: deleteWallboard} = useDeleteWallboardMutation()\r\n\r\n    const handleDuplicate = useCallback(() => {\r\n        assertDefined(wallboard)\r\n        duplicateWallboard({wallboardId: wallboard.id, isGlobal: wallboard.is_global})\r\n        showMenuOptions.setFalse()\r\n    }, [duplicateWallboard, wallboard, showMenuOptions])\r\n\r\n    const handleLogout = useCallback(() => {\r\n        showMenuOptions.setFalse()\r\n        openLogoutModal()\r\n    }, [openLogoutModal, showMenuOptions])\r\n\r\n    const createNewWallboard = useCallback(() => {\r\n        showMenuOptions.setFalse()\r\n        openNewWallboardModal()\r\n    }, [openNewWallboardModal, showMenuOptions])\r\n\r\n    const openRotationModal = useCallback(() => {\r\n        showMenuOptions.setFalse()\r\n        openWallboardRotationModal()\r\n    }, [openWallboardRotationModal, showMenuOptions])\r\n\r\n    const handleExport = useCallback(() => {\r\n        showMenuOptions.setFalse()\r\n        assertDefined(wallboard)\r\n        downloadJsonFile(wallboard, 'config.json')\r\n    }, [wallboard, showMenuOptions])\r\n\r\n    const handleImport = useCallback(async () => {\r\n        try {\r\n            const parsedWb = await readFromJsonFile<WallboardConfig>()\r\n            assertDefined(parsedWb)\r\n            goToNewWallboard()\r\n            updateWidgets(getWallboardWidgets(parsedWb))\r\n            updateName(parsedWb.name)\r\n            editMode.setTrue()\r\n        } catch (e) {\r\n            console.error(e)\r\n        } finally {\r\n            showMenuOptions.setFalse()\r\n        }\r\n    }, [goToNewWallboard, updateWidgets, updateName, editMode, showMenuOptions])\r\n\r\n    const pushToGlobal = useCallback(() => {\r\n        assertDefined(wallboard)\r\n        toggleGlobal({wallboardId: wallboard?.id, isGlobal: true})\r\n        showMenuOptions.setFalse()\r\n    }, [wallboard, showMenuOptions, toggleGlobal])\r\n\r\n    const pullFromGlobal = useCallback(() => {\r\n        openPullFromGlobalModal()\r\n        showMenuOptions.setFalse()\r\n    }, [openPullFromGlobalModal, showMenuOptions])\r\n\r\n    const handleDelete = useCallback(() => {\r\n        assertDefined(wallboard)\r\n        openModal({\r\n            title: t.WALLBOARD.confirm_delete_title(wallboard.name),\r\n            actions: {\r\n                ok: {\r\n                    action() {\r\n                        deleteWallboard({wallboardId: wallboard.id})\r\n                    },\r\n                    title: t.WALLBOARD.delete(),\r\n                },\r\n                cancel: {\r\n                    title: t.WALLBOARD.cancel(),\r\n                },\r\n            },\r\n        })\r\n        showMenuOptions.setFalse()\r\n    }, [openModal, deleteWallboard, wallboard, showMenuOptions, t.WALLBOARD])\r\n\r\n    const openSelectUserModal = useCallback(() => {\r\n        changeUserWidgets()\r\n        showMenuOptions.setFalse()\r\n    }, [changeUserWidgets, showMenuOptions])\r\n\r\n    return useMemo(() => {\r\n        return truthy([\r\n            {children: t.WALLBOARD.menu_new(), onClick: createNewWallboard},\r\n            {children: t.WALLBOARD.menu_edit(), onClick: editMode.setTrue},\r\n            {children: t.WALLBOARD.menu_duplicate(), onClick: handleDuplicate},\r\n            {\r\n                children: t.WALLBOARD.delete(),\r\n                onClick: handleDelete,\r\n                disabled: !wallboard || wallboard?.is_global,\r\n            },\r\n            {\r\n                children: t.WALLBOARD.menu_export(),\r\n                onClick: handleExport,\r\n                disabled: !wallboard,\r\n            },\r\n            {children: t.WALLBOARD.menu_import(), onClick: handleImport},\r\n            {\r\n                children: t.WALLBOARD.menu_push_to_global(),\r\n                onClick: pushToGlobal,\r\n                disabled: !wallboard || wallboard?.is_global,\r\n            },\r\n            {\r\n                children: t.WALLBOARD.menu_pull_from_global(),\r\n                onClick: pullFromGlobal,\r\n                disabled: !wallboard || !wallboard.is_global,\r\n            },\r\n            {children: t.WALLBOARD.menu_rotation(), onClick: openRotationModal},\r\n            !pageConfig?.deniedActions?.changeTheme\r\n                ? showTitleBar.value\r\n                    ? {children: t.WALLBOARD.menu_hide_title_bar(), onClick: showTitleBar.setFalse}\r\n                    : {children: t.WALLBOARD.menu_show_title_bar(), onClick: showTitleBar.setTrue}\r\n                : undefined,\r\n            {children: t.WALLBOARD.menu_user_widgets(), onClick: openSelectUserModal},\r\n            !pageConfig?.deniedActions?.changeTheme\r\n                ? {children: t.WALLBOARD.menu_logout(), onClick: handleLogout}\r\n                : undefined,\r\n        ])\r\n    }, [\r\n        pageConfig,\r\n        handleDuplicate,\r\n        createNewWallboard,\r\n        editMode,\r\n        handleDelete,\r\n        handleExport,\r\n        handleLogout,\r\n        openRotationModal,\r\n        pullFromGlobal,\r\n        pushToGlobal,\r\n        showTitleBar.setFalse,\r\n        showTitleBar.setTrue,\r\n        showTitleBar.value,\r\n        t.WALLBOARD,\r\n        wallboard,\r\n        openSelectUserModal,\r\n        handleImport,\r\n    ])\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmButtonGroup} from '@bpinc/lib-external-ui-elements'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useFontScale, useIsSaving, useSetFontScale} from '../../../editing-context'\r\n\r\n\r\nconst MAX_FONT_SCALE = 7\r\nconst MIN_FONT_SCALE = 1\r\n\r\nexport const FontScale: React.FC = () => {\r\n    const fontScale = useFontScale()\r\n    const isSaving = useIsSaving()\r\n    const setFontScale = useSetFontScale()\r\n\r\n    return (\r\n        <SmButtonGroup className=\"ml-6 flex items-center\">\r\n            <SemanticButton\r\n                disabled={fontScale <= MIN_FONT_SCALE || isSaving}\r\n                onClick={() => setFontScale(curFontScale => {\r\n                    if (curFontScale <= MIN_FONT_SCALE) {\r\n                        return MIN_FONT_SCALE\r\n                    }\r\n                    return curFontScale - 1\r\n                })}\r\n                className={tcn(\r\n                    'm-0 h-8 w-8 p-0',\r\n                    'flex items-center justify-center bg-white',\r\n                    'border border-solid border-main-border',\r\n                )}\r\n            >\r\n              A–\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                disabled={fontScale >= MAX_FONT_SCALE || isSaving}\r\n                onClick={() => setFontScale(curFontScale => {\r\n                    if (curFontScale >= MAX_FONT_SCALE) {\r\n                        return MAX_FONT_SCALE\r\n                    }\r\n                    return curFontScale + 1\r\n                })}\r\n                className={tcn(\r\n                    'm-0 h-8 w-8 p-0',\r\n                    'flex items-center justify-center bg-white',\r\n                    'border border-solid border-main-border',\r\n                )}\r\n            >\r\n              A+\r\n            </SemanticButton>\r\n        </SmButtonGroup>\r\n    )\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport type {SmInputOnChangeData} from '@bpinc/lib-external-ui-elements'\r\nimport {SmInput} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {useIsSaving, useName, useSave, useSetName} from '../../editing-context'\r\nimport {useDarkTheme, useEditMode, usePageConfig} from '../../ui-context/UIContext'\r\nimport {FontScale} from './FontScale'\r\nimport {HeaderButton} from './HeaderButton'\r\n\r\n\r\nexport const EditHeaderContent: FC = () => {\r\n    const name = useName()\r\n    const editMode = useEditMode()\r\n    const pageConfig = usePageConfig()\r\n    const darkTheme = useDarkTheme()\r\n    const isSaving = useIsSaving()\r\n    const setName = useSetName()\r\n\r\n\r\n    const changeWallboardName = useCallback((_e: ChangeEvent<HTMLInputElement>, {value}: SmInputOnChangeData) => {\r\n        setName(value)\r\n    }, [setName])\r\n\r\n    const handleCancel = useCallback(() => {\r\n        editMode.setFalse()\r\n    }, [editMode])\r\n\r\n    const save = useSave()\r\n    const handleSubmit = useCallback(() => {\r\n        save()\r\n    }, [save])\r\n\r\n    return (\r\n        <>\r\n            <SmInput\r\n                value={name}\r\n                onChange={changeWallboardName}\r\n                className=\"w-full flex-1\"\r\n                disabled={isSaving}\r\n            />\r\n            <section className=\"ml-8 flex flex-1 items-center justify-end gap-6\">\r\n                <FontScale />\r\n                {!pageConfig?.deniedActions?.changeTheme && (\r\n                    <HeaderButton\r\n                        icon={darkTheme.value ? 'sun outline' : 'moon outline'}\r\n                        onClick={darkTheme.toggle}\r\n                    />\r\n                )}\r\n                <div className=\"flex gap-2\">\r\n                    <HeaderButton\r\n                        icon=\"check\"\r\n                        color=\"green\"\r\n                        loading={isSaving}\r\n                        onClick={handleSubmit}\r\n                        className=\"!ml-2 h-8 w-8 !bg-white p-0\"\r\n                    />\r\n                    <HeaderButton\r\n                        icon=\"close\"\r\n                        color=\"red\"\r\n                        onClick={handleCancel}\r\n                        disabled={isSaving}\r\n                        className=\"h-8 w-8 !bg-white p-0\"\r\n                    />\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {useEditMode, useShowTitleBar} from '../../ui-context/UIContext'\r\nimport {BaseHeaderContent} from './BaseHeaderContent'\r\nimport {EditHeaderContent} from './EditHeaderContent'\r\n\r\n\r\ntype Props = {\r\n    className?: string\r\n}\r\n\r\nexport const Header: React.FC<Props> = ({className}) => {\r\n    const editMode = useEditMode()\r\n    const showTitleBar = useShowTitleBar()\r\n\r\n    return (\r\n        <header\r\n            className={tcn(\r\n                'group',\r\n                {'absolute inset-x-0 z-10 h-8': !showTitleBar.value},\r\n            )}\r\n            data-testid=\"wallboard-header\"\r\n        >\r\n            <div\r\n                className={tcn('flex h-[50px] items-center justify-between px-3 py-1.5',\r\n                    className,\r\n                    'bg-[--wallboard-header-bg]',\r\n                    {\r\n                        'opacity-0 group-hover:opacity-100': !showTitleBar.value,\r\n                        'translate-y-[-100%] group-hover:translate-y-0': !showTitleBar.value,\r\n                        'transition-all duration-500': !showTitleBar.value,\r\n                    },\r\n                )}\r\n            >\r\n                {editMode.value\r\n                    ? <EditHeaderContent />\r\n                    : <BaseHeaderContent />\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"wallboard_page_page_fJ6C5\"};","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useDocumentTitleEffect} from '../layout/useDocumentTitleEffect'\r\nimport {useWallboardRotationEffect} from '../layout/useWallboardRotationEffect'\r\nimport {useDarkTheme} from '../ui-context/UIContext'\r\n\r\nimport styles from './page.module.less'\r\n\r\n\r\nexport const PageEffects: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const darkTheme = useDarkTheme()\r\n\r\n    useWallboardRotationEffect()\r\n    useDocumentTitleEffect()\r\n\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                styles.page,\r\n                {\r\n                    'dark': darkTheme.value,\r\n                },\r\n            )}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useMemo} from 'react'\r\n\r\nimport {secondsToMilliseconds} from '@bpinc/lib-helpers'\r\n\r\nimport {useSelectedWallboardQuery, useWallboardsQuery} from '../queries'\r\nimport {useEditMode, useWallboardRotation} from '../ui-context/UIContext'\r\nimport {useGoToWallboard} from './context/RouterContext'\r\n\r\n\r\nexport function useWallboardRotationEffect() {\r\n    const goToWallboard = useGoToWallboard()\r\n    const {value: isEditMode} = useEditMode()\r\n    const {value: {wallboards: rotationWallboards, enabled: isRotationEnabled, period}} = useWallboardRotation()\r\n    const {data} = useWallboardsQuery()\r\n    const {data: selectedWallboard} = useSelectedWallboardQuery()\r\n\r\n    const wallboards = useMemo(() => {\r\n        return (data || [])\r\n            .filter(({id}) => rotationWallboards.includes(id))\r\n            .map(({id}) => id)\r\n    }, [data, rotationWallboards])\r\n\r\n    const nextWallboard = useMemo(() => {\r\n        const currentWallboardIndex = wallboards.indexOf(selectedWallboard?.id || '')\r\n\r\n        if (currentWallboardIndex <= 0) {\r\n            return wallboards[wallboards.length - 1]\r\n        }\r\n        if (currentWallboardIndex >= wallboards.length - 1) {\r\n            return wallboards[0]\r\n        }\r\n        return wallboards[currentWallboardIndex + 1]\r\n    }, [selectedWallboard?.id, wallboards])\r\n\r\n    const isEnabled = !!nextWallboard && !!selectedWallboard && isRotationEnabled && !isEditMode\r\n\r\n    useEffect(() => {\r\n        if (!isEnabled) {\r\n            return\r\n        }\r\n        const timer = setTimeout(() => {\r\n            goToWallboard(nextWallboard)\r\n        }, secondsToMilliseconds(period))\r\n\r\n        return () => clearTimeout(timer)\r\n    }, [isEnabled, goToWallboard, nextWallboard, period])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSelectedWallboardQuery} from '../queries'\r\n\r\n\r\nexport function useDocumentTitleEffect() {\r\n    const {data: selectedWallboard} = useSelectedWallboardQuery()\r\n\r\n    useEffect(() => {\r\n        if (selectedWallboard?.name) {\r\n            document.title = selectedWallboard?.name\r\n        }\r\n    }, [selectedWallboard?.name])\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {EditingContextProvider} from '../editing-context'\r\nimport {useIsLoading} from '../layout/context/RouterContext'\r\nimport {PageEffects} from './PageEffects'\r\n\r\n\r\nexport const PagePreloader: FCWithChildren<ReactElement | ReactFragment> = React.memo(({children}) => {\r\n    const isLoading = useIsLoading()\r\n\r\n    const {wallboardId} = useParams()\r\n\r\n    if (isLoading || !wallboardId) {\r\n        return <Loader active color=\"primary\" size=\"big\" />\r\n    }\r\n\r\n    return (\r\n        <EditingContextProvider>\r\n            <PageEffects>\r\n                {children}\r\n            </PageEffects>\r\n        </EditingContextProvider>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {QueryClient, QueryClientProvider} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_HOUR} from '@bpinc/lib-helpers'\r\nimport {Modals} from '@bpinc/lib-modals-ui'\r\n\r\nimport {Content, Header} from '../layout'\r\nimport {RouterContextProvider} from '../layout/context/RouterContext'\r\nimport {UIProvider as WallboardUIContextProvider} from '../ui-context/UIContext'\r\nimport {PagePreloader} from './PagePreloader'\r\n\r\n\r\nconst DEFAULT_CACHE_TIME = 8 * MS_IN_HOUR\r\nconst queryClient = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            gcTime: DEFAULT_CACHE_TIME,\r\n        },\r\n    },\r\n})\r\n\r\nexport const WallboardPage: React.FC = () => {\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <WallboardUIContextProvider>\r\n                <RouterContextProvider>\r\n                    <PagePreloader>\r\n                        <div className=\"relative flex h-full w-full min-w-0 flex-auto flex-col\">\r\n                            <Header />\r\n                            <Content />\r\n                        </div>\r\n                        <Modals />\r\n                    </PagePreloader>\r\n                </RouterContextProvider>\r\n            </WallboardUIContextProvider>\r\n        </QueryClientProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Route, Routes} from 'react-router-dom'\r\n\r\nimport {useUIState} from '@bpinc/ad-ui-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {WallboardPage} from '../page'\r\n\r\n\r\nexport const App: React.FC = () => {\r\n    const {isTabNavHighlighted} = useUIState()\r\n    return (\r\n        <div\r\n            className={tcn('relative h-full w-full', {\r\n                '[&_*:focus-within]:!outline-none [&_*:focus]:!outline-none': !isTabNavHighlighted,\r\n                '[&_*:focus-within]:!outline-0 [&_*:focus]:!outline-0': !isTabNavHighlighted,\r\n            })}\r\n        >\r\n            <Routes>\r\n                <Route\r\n                    path=\"/:wallboardId?\"\r\n                    element={<WallboardPage />}\r\n                />\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {createPlatformSpecific} from '@bpinc/ad-platform-specific-web-impl'\r\nimport {AuthorizationModule} from '@bpinc/lib-authorization-module'\r\n\r\nimport {App} from './App'\r\n\r\n\r\nexport const FullscreenWallboardApp: React.FC = () => {\r\n    return (\r\n        <AuthorizationModule\r\n            platformSpecific={createPlatformSpecific('wallboard')}\r\n            app=\"wallboard\"\r\n            appRemoteName=\"wallboard\"\r\n        >\r\n            {() => (\r\n                <App />\r\n            )}\r\n        </AuthorizationModule>\r\n    )\r\n}\r\n"],"names":["tcn","classnames","twMerge","cn","linkUrl","URL","searchParams","append","location","hostname","CURRENT_DOMAIN_AUTH_URL","toString","DOMAIN_AUTHORIZATION_MODAL_ID","linkClass","EXTENSION_ID","EXTENSION_ID_FF","PLUGIN_ID","ModalContent","isExtAvailable","install","INSTALLATION_PROCESS","useLocalizationState","t","useInstallationMethods","installChromeExtension","installFirefoxExtension","installBPClientPlugin","useEffect","chromeLink","document","getElementById","firefoxLink","pluginLink","addEventListener","removeEventListener","content","i18n","install_updateHeader","platformInfo","install_installHeader","install_installHeaderChrome","install_installHeaderFirefox","div","dangerouslySetInnerHTML","__html","browserName","serverOrigin","useSessionState","isChrome","isFirefox","isSafari","linkHref","URL_EXTENSION_INSTALLER_CHROME","URL_EXTENSION_INSTALLER_FIREFOX","URL_MAC_PLUGIN","span","bp_client_old_extension_version","br","bp_client_update_extension_part1","a","href","rel","target","bp_client_update_extension_text","bp_client_update_extension_part2","reloadPage","reload","PHONE_OUT_OF_SERVICE_ERROR_DELAY","useSystemNotifications","bpClientConnector","useModalsStateMethods","openModal","closeModal","onShowDomainAuthorizationDialog","onHideDomainAuthorizationDialog","showOfflineAlert","offlineErrorMessages","isOffline","useBpClientStateConnector","useEvent","id","title","bp_client_not_authorized_header","body","bp_client_not_authorized_message_part1","ERROR_MESSAGES","domainAuthentificationErrorAnchor","bp_client_not_authorized_message_part2","actions","SmButton","onClick","closeThisModal","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonOk","dispenser","subscribe","unsubscribe","isExtensionAvailable","useBpClientState","onInstallationRequired","window_title_warning","ok","useInstallationRequiredPopup","useNotificationsState","showNotification","useOfflineStateMethods","setShowOfflineAlert","useOfflineStateDataShowOfflineAlert","useOfflineErrorMessages","useIsOffline","type","Notifications","closable","duration","onHide","onShowExtensionIsOldDialog","useOutdatedBrowserExtensionPopup","hideNotificationById","isClientOutdated","useAppConfigState","isLoggedIn","GLOBAL","updateNotification","message","reload_confirm_new_msg_part1","reload_confirm_action_button_text","reload_confirm_new_msg_part2","useOutdatedClientNotification","sessionStateConnector","useSessionStateConnector","isHelperAppInstanceCreated","phoneType","onUpdateCapabilities","caps","canDial","bpLogger","window_messages_virtual_phone_not_available","window_messages_phone_not_available","window_messages_helper_app_not_available","showDelay","onServerError","source","errorCode","phoneIsNotRegistered","onThreePCCServerGone","window_messages_3pcc_server_connectionLost","onThreePCCServerReady","usePhoneOutOfServiceNotification","sipServer","prevSipServerRef","usePreviousValueRef","current","useSipServerDisconnectedNotification","startTime","useRef","checkConnectionSpeed","Date","getTime","fetch","method","cache","catch","e","console","error","finally","slow_connection","interval","setInterval","clearInterval","useSlowNetworkNotification","isDomainAuthorized","domain_authentication_error_part1","domain_authentication_error_part2","useUnauthorizedDomainNotification","AuthorizedConnectorsConsumers","baseConnectors","authorizedConnectors","children","ForceLogout","forceLogoutInfo","useSessionStateMethods","closeForceLogout","useFormatting","formatFullName","assertDefined","loggedOutBy","firstName","lastName","loggedOutTime","formatDate","timestamp","SmSegment","padded","className","Modal","isOpen","size","aria-describedby","data-testid","window_title_information","p","incomingErrorMessageCodes","sessionWasOverwritten","forcedLogout","account_has_been_disabled","forceLogoutReason","getContent","primary","UnauthorizedUI","tabRole","useCurrentTabRole","authChecked","showLoginDialog","offerForceLogin","showAppLoader","showLoginPage","showForceLogout","showForceLogin","Loader","active","color","LoginPage","ForceLogin","AuthorizationUIRouter","React","AuthorizedProviders","BaseConnectorsConsumers","BaseConnectorsConsumer","TopLevelProviders","app","platformSpecific","BaseProviders","Tooltip","NotificationsStateProvider","AuthorizationModule","appRemoteName","AppStyleSelector","MIN_CARD_SIZE","width","height","GRID_SIZE","NEW_WALLBOARD_ID","ApiError","request","response","url","status","statusText","name","Error","CancelError","isCancelled","Symbol","toStringTag","CancelablePromise","executor","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","this","Promise","resolve","reject","onCancel","cancelHandler","push","Object","defineProperty","get","value","reason","then","onFulfilled","onRejected","onFinally","cancel","length","warn","OpenAPI","BASE","VERSION","WITH_CREDENTIALS","CREDENTIALS","TOKEN","undefined","USERNAME","PASSWORD","HEADERS","ENCODE_PATH","isDefined","isString","isStringWithValue","isBlob","stream","arrayBuffer","constructor","test","isFormData","FormData","getQueryString","params","qs","process","key","Array","isArray","forEach","v","entries","k","encodeURIComponent","String","join","options","resolver","getHeaders","config","token","username","password","additionalHeaders","headers","credentials","Accept","filter","_","reduce","str","btoa","err","Buffer","from","base64","mediaType","Headers","sendRequest","formData","controller","AbortController","signal","abort","getResponseBody","contentType","toLowerCase","startsWith","json","isJSON","text","responseBody","responseHeader","result","encoder","encodeURI","path","replace","substring","group","hasOwnProperty","query","getUrl","JSON","stringify","getFormData","includes","getRequestBody","getResponseHeader","errors","catchErrorCodes","SupervisorWidgetsApiServices","getTeams","__request","deleteSupervisorWidgetsSubscription","getAgenda","requestBody","createSupervisorWidgetsSubscription","getSupervisorWidgetsSubscriptionData","getTenantConfiguration","getAgents","getServices","getTimeSeriesData","measurement","statistic","start","end","timeInterval","WallboardApiServices","getWallboards","createWallboard","getWallboardDetails","wallboardId","deleteWallboard","updateWallboardIsGlobal","updateWallboardConfig","updateWallboardName","LogoutModal","onClose","props","logout","buttonRef","useFocusElement","timeout","closeLogoutModal","aria-labelledby","role","LOGOUT_DIALOG","sign_out_text","body_text","SemanticButton","ref","addExtraKeys","extraKeys","resultKeys","extraKey","queryKey","subscriptionData","acc","statType","useSelectedWallboardQuery","useParams","useQuery","queryFn","enabled","useServicesQuery","staleTime","MS_IN_MINUTE","useTeamsQuery","useWallboardsQuery","data","wallboards","gcTime","MS_IN_SECOND","getWallboardConfig","wallboard","getWallboardWidgets","createSelector","wallboardConfig","widgets","map","widget","getWallboardConfigFontScale","style","fontScaleValue","getWidgetsSubscriptionData","subscription","widgetSubscription","stats_totals","uniq","req","stats_totals_service_ids","service_ids","stats_totals_dispositions","dispositions","agent_grids","tempAgent","cloneDeep","limit","totalContactsIndex","columns","column","i","removeRedundantData","statName","my_subteam_only","subteam","logged_in_agents_only","logged_in_only","addColumn","service_grids","tempService","indexCallsHandledPerDay","parseInt","chat_messages","createSubscriptionRequest","index","splice","dir","coltitle","order","initialValue","darkTheme","initialBooleanManager","editMode","showTitleBar","rotation","period","setValue","noop","UIContext","createContext","displayName","UIProvider","window","useBoolean","useState","rotationValue","setRotationValue","useMemo","useLocalStorageForState","toggle","matchMedia","matches","Provider","useDarkTheme","useContextSelector","usePageConfig","useEditMode","useShowTitleBar","useWallboardRotation","NewWallboardModal","goToNewWallboard","useGoToNewWallboard","selectedTemplateIndex","setSelectedTemplateIndex","setWidgets","useSetWidgets","setName","useSetName","setFontScale","useSetFontScale","useWallboardTemplatesQuery","wallboardTemplates","MS_IN_DAY","isLoading","addNewWallboard","useCallback","templates","setTrue","closeNewWallboardModal","template","handleSelectChange","_evt","WALLBOARD","new_wallboard","label","new_wallboard_type","Dropdown","onChange","enabledInOffline","disabled","PullFromGlobalModal","mutate","useToggleGlobalMutation","useCreateWallboardCopyMutation","pullFromGlobal","toggleGlobal","isGlobal","handleDuplicate","createWallboardCopy","pull_from_global_modal_title","pull","duplicate","RouterContext","WallboardRotationModal","useForm","defaultValues","res","control","handleSubmit","onSave","rotation_setting","rotation_enabled","CheckboxField","rotation_wallboards","rotation_interval","TextField","getWallboardRoute","getNewWallboardRoute","RouterContextProvider","navigate","useNavigate","openNewWallboardModal","useModalComponentOpener","setFalse","setNewWallboardTemplatesSelected","wallboardStatus","newWallboardTemplatesSelected","find","w","defaultWallboard","is_default","goFromRemovedWallboard","deletedWallboardId","wallboardIndex","findIndex","wallboardToGo","contextValue","goToWallboard","newWallboardId","setNewWallboardTemplatesUnselected","loading","useGoToWallboard","queryClient","useQueryClient","useMutation","mutationFn","existingWallboard","getQueryData","is_global","onSuccess","newWallboard","invalidateQueries","convertClientWidgetsToServer","useDeleteWallboardMutation","onMutate","removeQueries","exact","setQueryData","produce","draft","useUpdateWallboardNameMutation","EditingContext","toServerWidgets","widgetConfigItem","useUpdateWallboardWidgetsMutation","updatedWallboardWidgets","updatedStyle","EditingContextProvider","fontScale","isNewWallboard","selectedWallboard","addWidget","newWidgetConfig","currentWidgets","updateWidget","updatedWidgetConfig","widgetIndex","currentWidget","assign","removeWidget","removingWidgetId","mutateAsync","isPending","updateWidgets","useCreateWallboardMutation","updateName","save","promisesToRun","widgetsWereChanged","isEqual","nameWasChanged","shouldRun","promise","allSettled","isSaving","isSavingWidgets","isSavingName","useIsSaving","useWidgets","useFontScale","mergeCustomizer","srcValue","objValue","barOptions","dataName","mergeWith","chart","backgroundColor","plotOptions","series","pointPadding","groupPadding","borderColor","dataLabels","fontSize","fontWeight","textOutline","margin","xAxis","categories","labels","lineColor","tickColor","gridLineColor","yAxis","format","credits","colors","legend","y","getGaugeStops","inverted","alertThreshold","warningThreshold","maxThreshold","getTickPositions","getMaxPositions","pieChartOptions","names","values","formatter","enableDataLabels","exporting","pie","allowPointSelect","cursor","innerSize","distance","fontFamily","showInLegend","itemStyle","itemHoverStyle","tooltip","audioNotifyAtom","atom","updatingWidgetDataAtom","formatStatValue","numberValue","presentFormatter","resultInMs","getMomentUTC","Math","floor","MS_IN_HOUR","durationFormatter","STATS_CONFIG","statsSingle","agent_cm1","localizationKey","agent_cm2","agent_csat","agent_fcr","agent_nps","agent_average_idle_time","agent_average_preview_time","agent_occupancy","agents_busy","agents_busy_on_service","agents_logged","agents_not_ready","agents_ready","agents_in_wrap_up","calls_average_handling_time_per_day","calls_dispositions_per_day","calls_dispositions_ratio_per_day","in_calls_received_per_day","in_calls_ringing","in_average_speed_of_answer","in_callbacks_requested_per_day","in_callbacks_waiting","in_calls_abandoned_in_ivr_per_day","in_calls_abandoned_in_queue_per_day","in_calls_abandoned_in_queue_ratio_per_day","in_calls_abandoned_percent_per_day","in_calls_abandoned_ringing_per_day","in_calls_abandoned_total_per_day","in_calls_active_on_agents","in_calls_disconnected_talking_per_day","in_calls_dropped_in_ivr_per_day","in_calls_dropped_in_queue_per_day","in_calls_dropped_ringing_per_day","in_calls_dropped_talking_per_day","in_calls_duration_average_per_day","in_calls_duration_total_per_day","in_calls_first_time_handled_per_day","in_calls_first_time_queued_per_day","in_calls_handled_per_day","in_calls_handled_percent_per_day","in_calls_in_ivr","in_calls_in_progress","in_calls_first_time_put_on_hold_per_day","in_calls_queued_per_day","in_calls_put_on_hold_per_day","in_calls_rejected_per_day","in_calls_routed_per_day","in_calls_self_serviced_per_day","in_calls_short_abandoned_in_queue_per_day","in_calls_short_abandoned_in_queue_ratio_per_day","in_calls_transferred_per_day","in_email_carried_over","in_email_handled_new_per_day","in_email_processed_noreply_per_day","in_email_processed_replied_per_day","in_email_received_new_per_day","in_email_rejected_per_day","in_email_waiting_in_personal_queues","in_emails_joined_existing_cases","in_ewt","in_max_wait_time","in_service_change_received_per_day","in_service_changed_per_day","in_transfers_received_per_day","out_calls_abandoned_in_ivr_per_day","out_calls_abandoned_in_ivr_ratio_per_day","out_calls_abandoned_in_queue_per_day","out_calls_abandoned_in_queue_ratio_per_day","out_calls_abandoned_per_day","out_calls_abandoned_ratio_per_day","out_calls_abandoned_ringing_per_day","out_calls_active_on_agents","out_calls_answered_per_day","out_calls_answered_ratio_per_day","out_calls_current_call_rate","out_calls_disconnected_talking_per_day","out_calls_dropped_in_ivr_per_day","out_calls_dropped_in_queue_per_day","out_calls_dropped_ringing_per_day","out_calls_dropped_talking_per_day","out_calls_duration_average_per_day","out_calls_duration_total_per_day","out_calls_failed_per_day","out_calls_handled_per_day","out_calls_in_ivr","out_calls_in_progress","out_calls_placed_per_day","out_calls_queued_per_day","out_calls_rejected_per_day","out_calls_ringing","out_calls_routed_per_day","out_calls_self_serviced_per_day","out_calls_transferred_per_day","out_calls_unattended_per_day","out_calls_unattended_ratio_per_day","out_calls_waiting","out_campaign_duration_forecast","records_accepted_per_day","records_attempted_per_day","records_attempted_ratio_per_day","records_completed","records_completed_per_day","records_completed_ratio","records_completed_ratio_per_day","records_dialable","alertInverted","records_in_dnc","records_out_of_quota","records_remaining","records_skipped_per_day","records_skipped_ratio_per_day","records_total","records_with_assigned_agents_completed","records_with_assigned_agents_remaining","service_level","service_level_target","service_level_threshold_time","service_level_per_day","in_calls_waiting","statsAgent","acd_next_state","align","acd_state","active_item_direction","active_item_hold_duration","active_item_is_flagged","active_item_media_type","active_item_party_name","active_item_qm_monitor_mode","active_item_sentiment","active_item_service_name","active_item_state","active_item_talk_duration","agent_calendar_overdue","agent_calendar_pending","agent_preview_duration","agent_success_ratio_per_day","agent_total_break_time","extension","first_last_name","in_email_offered_per_day","in_email_pulled_per_day","last_first_name","login_time","next_reason","out_email_waiting_in_personal_queues","state_duration","team_name","agent_idle_time","calls_average_acw_time_per_day","statsService","in_email_carried_over_new","custom","handled","averageHandlingTime","successfulInteraction","timeSeriesServices","timeSeriesTeams","STAT_LOCALIZATION_MAP","useGetStatsConfig","stat","localizationPart","statData","processGridData","targetDataGrid","dataGrids","getStatsConfig","dataGridsRaw","grid","reqId","currentData","item","slice","maxItemsToShow","stateCol","configuredColumns","currentValues","state","acdStates","totalContacts","v1","v2","statsConfig","tempId","widgetSubscriptionType","val","toHHMMSS","Number","WALLBOARD_WIDGETS_GRIDS","state_busy","state_ready","state_after_call_work","state_not_ready","state_default","mapAcdState","obj","prop","uuid","tdClassName","isEven","chartColors","myStats","teamStats","myStatsChartOptions","formatType","overflow","crop","context","toMMSS","formatSeries","useHTML","x","whiteSpace","formatTooltip","calculateChartHeight","cardHeight","legendHeight","myStatsDefaultData","inCalls","agentValue","teamValue","outCalls","successRatio","useMyStatsOptions","myStatsData","team_stats","team_success_ratio_per_day","handledTitle","WALLBOARD_MY_STATS_WIDGET","averageHandlingTimeTitle","average_handling_time","successRatioTitle","successful_interactions","my_stats","teams_stats","SatisfactionChart","Chart","satisfactionOption","minValue","maxValue","getFormattedMinMax","useSatisfactionOption","grids","targetCol","c","getFormattedValue","animation","verticalAlign","subtitle","transform","pane","center","startAngle","endAngle","background","innerRadius","outerRadius","shape","min","max","lineWidth","minorTickInterval","tickAmount","tickPositions","endOnTick","padding","solidgauge","borderWidth","solidGaugeChartOptions","rawValue","WithNoAvailable","no_available","ValueParagraph","bigText","DEFAULT_RANGE_MS","Unknown","pre","WIDGETS_CONFIG","subscriptionType","columnsList","WithNoData","noData","table","thead","columtitle","tr","th","tbody","elems","td","datetime","now","setNow","date","dayjs","time","empty","gauge","audioAlert","useAtomValue","statConfig","gaugeValue","warning_sound","stop","stops","allowOverlap","gaugeChartOptions","image","backgroundImage","imageUrl","backgroundSize","news","msgItem","sanitizeHtml","single","clientHeight","cardStyle","setCardStyle","resizeObserverEntry","useResizeObserver","useLayoutEffect","contentRect","valueStatConfig","parsedValue","valueFormatted","optValueFormatted","isUndefined","summary","summaryData","summaryConfigId","states","keys","WALLBOARD_AGENT_STATES","labelFormat","layout","pointFormat","headerFormat","break_time","breakTimeData","breakTimeSubscriptionConfig","tenantConfig","agentDailyBreakTime","agentConfiguration","agentDailyBreaktime","usedTimeout","round","remainingBreak","WALLBOARD_BREAK_TIME_WIDGET","remaining","used","category","minutes_label","dispositionsData","dispositionsSubscriptionConfig","stringifiedData","parsedData","parse","convertKVArray","count","WALLBOARD_DISPOSITION_WIDGET","resizeObserver","cardContent","setCardContent","section","ChartLegend","satisfaction","resolutionOptions","WALLBOARD_STATS_SINGLE","agent_fcr_name","netPromoterScoreOptions","agent_nps_name","demeanorOptions","agent_csat_name","agenda","userId","user_id","refetchInterval","eventsList","EVENT_AMOUNT_LIMIT","eventsListByDates","event","formattedDate","events","sameDayEvent","isSame","endTime","time_series","timeRange","timeRangeEnd","seriesType","series_type","timeRangeStart","calcQueryParams","useTimeSeriesDataQuery","timeSeriesData","results","tempResult","s","tags","row","correctTime","getTimezoneOffset","resultArr","yGridVisible","xGridVisible","highcharts","marginRight","gridLineWidth","tickPixelInterval","allowDecimals","plotLines","marker","turboThreshold","getChartConfig","htmlFor","WALLBOARD_WIDGET_TIME_SERIES","show_x_grid","input","checked","toggleXGrid","show_y_grid","toggleYGrid","EditWidgetResolver","Card","Widget","cardStyles","useCardStyles","header","WidgetHeaderView","ViewWidgetResolver","buttonClassName","Button","transparent","IconTrash","isAlertedSingle","AudioAlert","audioRef","notify","throttle","play","leading","setAudioNotify","useSetAtom","audio","src","notificationWav","notificationMp3","assertCorrectWidget","currentWidgetId","assertTrue","createDispositionsWidgetSubscription","widgetId","filter_by","filter_operation","filter_value","order_by","order_dir","team_ids","getAgentGridSubscriptionDefaults","createSatisfactionWidgetSubscription","createBreakTimeWidgetSubscription","createMyStatsWidgetSubscription","useStatsOptions","statsData","part","typedKeys","sData","ColumnFieldRow","restProps","ColumnField","remove","onRemove","useSortable","animateLayoutChanges","defaultAnimateLayoutChanges","attributes","listeners","setNodeRef","transition","setActivatorNodeRef","isDragging","CSS","useWatch","handleChangeSort","HiddenField","SelectField","search","icon","getSortIcon","fluid","sort","createEmptyColumn","currentLength","chooseDir","ColumnsField","useFieldArray","fields","move","onAddColumn","activeId","setActiveId","getIndex","field","activeIndex","DndContext","onDragStart","onDragEnd","over","overIndex","onDragCancel","SortableContext","items","strategy","verticalListSortingStrategy","basic","SmIcon","add_column","AgentStatesModal","onApply","commonModalProps","WALLBOARD_STATES_MODAL","h4","states_header","limits_header","limit_my_subteam","limit_logged_in","window_buttonCancel","TeamsSelectModal","teams","onSelect","selectedTeams","setSelectedTeams","handleOnComplete","allTeams","team","WALLBOARD_TEAMS_MODAL","DoubleColumnSelect","availableTitle","available","selectedTitle","included","noSearch","AgentsSelect","useController","openTeamsSelectModal","openAgentStatesModal","handleSelectTeams","teamIds","updatedTeams","handleSelectStates","agentStates","agentStats","AgentGridModal","formValuesParsed","replacingWidgetId","onSaved","formValues","newColumns","col","existingOrder","by","columnTitleEnabled","agent_stats","WALLBOARD_WIDGET_EMPTY","agent_grid","busy","ready","after_call_work","not_ready","newOrder","ind","convertToBackend","pick","placeholder","max_to_show","column_headings","CopyWidget","selectedWidgetId","setSelectedWidgetId","setIsLoading","widgetsToCopy","setWidgetsToCopy","getWidgetsToCopy","allWallboardsDetailsQueries","allWallboards","fetchQuery","wallboardDetails","wallboardItemOptions","widgetItem","useGetWidgetsToCopy","updateWidgetsOptions","handleSelectWidgetId","openWidgetOnSaved","handleOpenWidget","useHandleWidgetSelect","selectedIds","split","selectedWidget","newsCount","copy_from_other","selection","openOnFocus","selectOnBlur","ImageStyleSelect","WALLBOARD_WIDGET_IMAGE","style_cover","style_contain","upward","getFileDataUrl","file","reader","FileReader","onload","readAsDataURL","SelectImage","handleUploadFiles","newImageUrl","newImageName","files","onImageUrlChange","onImageNameChange","imageName","ImageSettingsModal","NewsSettingsModal","show_settings","WALLBOARD_WIDGET_NEWS","ServicesSelectModal","services","selectedServices","setSelectedServices","allServices","service","WALLBOARD_SERVICES_MODAL","ServicesSelect","openServicesSelectModal","handleSelectServices","serviceIds","updatedServices","ServiceGridModal","service_grid","servicesId","TextSettingsModal","WALLBOARD_WIDGET_TEXT","TextAreaField","FormLabel","GridRow","SeriesTypeField","TEAMS_STATISTICS_DEFAULT","StatisticsField","optionsTeams","optionsTeamsKeys","elem","optionsServices","optionsServicesKeys","seriesTypeValue","statisticValue","TimeRangeField","mins_5","mins_15","hours_1","hours_3","hours_6","hours_12","hours_24","days_2","days_7","TIME_RANGE_DEFAULT","TimeSeriesModal","parsedForm","statistics","useHandleCancelWidgetModal","openEmptyWidgetSettingsModal","EmptyWidgetSettingsModal","querySelector","SelectUserModal","onSelected","currentWidgetConfig","selfUserId","selectedUser","setSelectedUser","selfUserOption","logged_in_user","useAgentsQuery","combinedOptions","agents","agent","b","toLocaleLowerCase","localeCompare","handleOk","user","handleSelectUser","handleCancelWidgetModal","agent_select_title","agent_select_label","useAgendaWidget","openSelectUserModal","widgetConfig","userName","WALLBOARD_AGENDA_WIDGET","useBreakTimeWidget","useCreateTimeWidget","useDispositionsWidget","useMyStatsWidget","useSatisfactionWidget","WALLBOARD_SATISFACTION_WIDGET","SingleOrGaugeSettingsModal","widgetType","openSelectService","statOptions","convertValueToStatType","trim","getWidgetDefaultFormData","warningSound","optValue","defaultValue","handleSave","valueFormat","reqData","convertStatToValue","truthy","serviceIdsField","typeField","WALLBOARD_SINGLE_OR_GAUGE_WIDGET","name_gauge","name_single","mode","RadioFieldRaw","radioValue","primary_statistic","LinkLikeButton","warning_threshold","alert_threshold","enable_warning_sound","max_threshold","secondary_statistic","useSingleOrGaugeWidget","openSingleOrGaugeSettingsModal","SummarySettingsModal","emptyValues","WALLBOARD_WIDGET_SUMMARY","default_name","teamsField","select_teams","title_label","teams_label","selected_teams","useSummaryWidget","openSummarySettingsModal","openAgentGridModal","openServiceGridModal","openImageSettingsModal","openNewsSettingsModal","openTextSettingsModal","openTimeSeriesModal","openCopyWidget","createTimeWidget","createBreakTimeWidget","createSingleOrGaugeWidget","createDispositionsWidget","createAgendaWidget","createMyStatsWidget","createSummaryWidget","createSatisfactionWidget","fv","assertFormValuesValidForImageWidgetSettingsModal","assertFormValuesValidForConfigAgentGrid","assertFormValuesValidForConfigServiceGrid","assertFormValuesValidForNewsWidgetSettingsModal","assertFormValuesValidForTextWidgetSettingsModal","assertFormValuesValidForTimeSeriesModal","optionType","exhaustiveCheck","Option","option","selectWidget","handleClick","preventDefault","Svg","WidgetOptionsGroup","it","singleStatisticImage","gridImage","newsImage","stateSummaryImage","gaugeImage","textImage","datetimeImage","imageImage","breakTimeImage","dispositionsImage","statsImage","satisfactionImage","agendaImage","timeSeriesImage","copyImage","Options","flex","data-id","useRemoveWidget","confirm_delete_title","confirm_delete_widget","action","delete","Content","setProperty","cellSize","setCellSize","useWidgetsSubscriptionQuery","cancelQueries","isRefetching","retry","failureCount","resubscribed","createEmptyWidget","minCardSize","useCreateEmptyWidget","openSettings","setUpdateWidgetAtom","updateAgendaWidget","updateDispositionsWidget","updateSingleOrGaugeWidget","updateBreakTimeWidget","updateMyStatsWidget","updateSatisfaction","updateSummaryWidget","useOpenWidgetSettings","main","styles","BpWallboard","gridSize","WidgetResolverEdit","WidgetResolverView","HeaderButton","rest","userWidgetTypes","useChangeUserWidgets","widgetOptions","updateWallboardWidgets","WallboardSelect","personal","global","wallboard_select_personal","wallboard_select_global","handleSelectWallboard","_e","BaseHeaderContent","pageConfig","selectWallboard","next","nextIndex","previous","prevIndex","showMenuOptions","menuOptions","openLogoutModal","openWallboardRotationModal","openPullFromGlobalModal","changeUserWidgets","duplicateWallboard","handleLogout","createNewWallboard","openRotationModal","handleExport","downloadJsonFile","handleImport","parsedWb","readFromJsonFile","pushToGlobal","handleDelete","menu_new","menu_edit","menu_duplicate","menu_export","menu_import","menu_push_to_global","menu_pull_from_global","menu_rotation","deniedActions","changeTheme","menu_hide_title_bar","menu_show_title_bar","menu_user_widgets","menu_logout","useMenuOptions","SmButtonGroup","PopupButton","show","toggleShow","optionClassName","FontScale","curFontScale","EditHeaderContent","changeWallboardName","handleCancel","SmInput","Header","PageEffects","nextWallboard","isEnabled","rotationWallboards","currentWallboardIndex","indexOf","isRotationEnabled","isEditMode","timer","setTimeout","secondsToMilliseconds","clearTimeout","useDocumentTitleEffect","PagePreloader","DEFAULT_CACHE_TIME","QueryClient","defaultOptions","queries","WallboardPage","QueryClientProvider","client","WallboardUIContextProvider","Modals","App","useUIState","isTabNavHighlighted","Routes","Route","element","FullscreenWallboardApp","createPlatformSpecific"],"sourceRoot":""}