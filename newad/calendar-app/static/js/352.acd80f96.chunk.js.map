{"version":3,"file":"static/js/352.acd80f96.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-calendar-ui/../../node_modules/react-dom/client.js","webpack://@bpinc/web-calendar-ui/../../packages/cal-fullscreen-ui/src/components/FullscreenCalendar.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/constants.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useDomainAuthorizationPopup.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useInstallationRequiredPopup.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useOutdatedBrowserExtensionPopup.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useOutdatedClientNotification.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/usePhoneOutOfServiceNotification.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/hooks.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useOfflineNotification.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useSipServerDisconnectedNotification.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useSlowNetworkNotification.ts","webpack://@bpinc/web-calendar-ui/../../packages/lib-system-notifications/src/system/useUnauthorizedDomainNotification.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/AuthorizedConnectorsConsumers.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-login-ui/src/components/ForceLogout.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/UnauthorizedUI.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/AuthorizationUIRouter.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/BaseConnectorsConsumers.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/TopLevelProviders.tsx","webpack://@bpinc/web-calendar-ui/../../packages/lib-authorization-module/src/AuthorizationModule.tsx","webpack://@bpinc/web-calendar-ui/../../packages/cal-fullscreen-ui/src/components/FullscreenCalendarApp.tsx","webpack://@bpinc/web-calendar-ui/./src/index.tsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React from 'react'\r\n\r\nimport {useUIState} from '@bpinc/ad-ui-context'\r\nimport {CalendarPage} from '@bpinc/cal-ui'\r\nimport {Modals} from '@bpinc/lib-modals-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nexport const FullscreenCalendar: React.FC = () => {\r\n    const {isTabNavHighlighted} = useUIState()\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={tcn('flex h-full flex-col justify-items-stretch', {\r\n                    '[&_*:focus-within]:!outline-none [&_*:focus]:!outline-none': !isTabNavHighlighted,\r\n                    '[&_*:focus-within]:!outline-0 [&_*:focus]:!outline-0': !isTabNavHighlighted,\r\n                })}\r\n            >\r\n                <section className=\"flex grow flex-col items-stretch overflow-hidden\" role=\"tabpanel\">\r\n                    <CalendarPage />\r\n                </section>\r\n            </div>\r\n            <Modals />\r\n        </>\r\n    )\r\n}\r\n","\r\nexport const DOMAIN_AUTH_URL = 'http://localhost:9897'\r\nconst DOMAIN_PARAM = 'domain'\r\n\r\nconst linkUrl = new URL(DOMAIN_AUTH_URL)\r\nlinkUrl.searchParams.append(DOMAIN_PARAM, location.hostname)\r\n\r\nexport const CURRENT_DOMAIN_AUTH_URL = linkUrl.toString()\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nconst DOMAIN_AUTHORIZATION_MODAL_ID = 'bpClient/onShowDomainAuthorizationDialog'\r\n\r\n\r\nexport const useDomainAuthorizationPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal, closeModal} = useModalsStateMethods()\r\n    const t = useLocalizationState('t')\r\n\r\n    const onShowDomainAuthorizationDialog = useEvent(() => {\r\n        openModal({\r\n            id: DOMAIN_AUTHORIZATION_MODAL_ID,\r\n            title: t.INSTALLATION_PROCESS.bp_client_not_authorized_header(),\r\n            body: (\r\n                <>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part1()}\r\n                    </span>\r\n                    <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {t.ERROR_MESSAGES.domainAuthentificationErrorAnchor()}\r\n                    </a>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part2()}\r\n                    </span>\r\n                </>\r\n            ),\r\n            actions: ({closeModal: closeThisModal}) => (\r\n                <SmButton onClick={closeThisModal}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    const onHideDomainAuthorizationDialog = useEvent(() => {\r\n        closeModal(DOMAIN_AUTHORIZATION_MODAL_ID)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({\r\n            onShowDomainAuthorizationDialog,\r\n            onHideDomainAuthorizationDialog,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowDomainAuthorizationDialog, onHideDomainAuthorizationDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState, useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInstallationMethods} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nconst linkClass = 'cursor-pointer text-primary-legacy'\r\n\r\nconst EXTENSION_ID = 'ext-link'\r\nconst EXTENSION_ID_FF = 'ext-link-firefox'\r\nconst PLUGIN_ID = 'plugin-link'\r\n\r\ntype ModalContentProps = {\r\n    isExtAvailable: boolean\r\n    install: boolean\r\n}\r\n\r\nconst ModalContent: React.FC<ModalContentProps> = ({isExtAvailable, install}) => {\r\n    const {t: {INSTALLATION_PROCESS: i18n}} = useLocalizationState()\r\n    const {\r\n        installChromeExtension,\r\n        installFirefoxExtension,\r\n        installBPClientPlugin,\r\n    } = useInstallationMethods()\r\n\r\n    /* Set click handler after the modal is rendered or translations are changed */\r\n    useEffect(() => {\r\n        const chromeLink = document.getElementById(EXTENSION_ID)\r\n        const firefoxLink = document.getElementById(EXTENSION_ID_FF)\r\n        const pluginLink = document.getElementById(PLUGIN_ID)\r\n\r\n        chromeLink?.addEventListener('click', installChromeExtension)\r\n        firefoxLink?.addEventListener('click', installFirefoxExtension)\r\n        pluginLink?.addEventListener('click', installBPClientPlugin)\r\n\r\n        return () => {\r\n            chromeLink?.removeEventListener('click', installChromeExtension)\r\n            firefoxLink?.removeEventListener('click', installFirefoxExtension)\r\n            pluginLink?.removeEventListener('click', installBPClientPlugin)\r\n        }\r\n    }, [installChromeExtension, installFirefoxExtension, installBPClientPlugin])\r\n\r\n    let content: string = i18n.install_updateHeader(PLUGIN_ID, linkClass)\r\n\r\n    if (install) {\r\n        if (platformInfo.browser === 'chrome') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderChrome(EXTENSION_ID, PLUGIN_ID, linkClass)\r\n\r\n        } else if (platformInfo.browser === 'firefox') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderFirefox(EXTENSION_ID_FF, PLUGIN_ID, linkClass)\r\n\r\n        } else {\r\n            content = i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n        }\r\n    }\r\n\r\n    return <div dangerouslySetInnerHTML={{__html: content}} />\r\n}\r\n\r\nexport const useInstallationRequiredPopup = () => {\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const isExtensionAvailable = useBpClientState('isExtensionAvailable')\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onInstallationRequired = useEvent((install: boolean) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent\r\n                    install={install}\r\n                    isExtAvailable={isExtensionAvailable}\r\n                />\r\n            ),\r\n            actions: {\r\n                ok: {\r\n                    title: i18n.window_buttonOk(),\r\n                },\r\n            },\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onInstallationRequired})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onInstallationRequired])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {URL_EXTENSION_INSTALLER_CHROME, URL_EXTENSION_INSTALLER_FIREFOX, URL_MAC_PLUGIN} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype Props = {\r\n    browserName: string\r\n}\r\n\r\nconst ModalContent: React.FC<Props> = ({browserName}) => {\r\n    const {INSTALLATION_PROCESS: i18n} = useLocalizationState('t')\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    const isChrome = platformInfo.browser === 'chrome'\r\n    const isFirefox = platformInfo.browser === 'firefox'\r\n    const isSafari = platformInfo.browser === 'safari'\r\n    let linkHref = ''\r\n\r\n    if (isChrome) {\r\n        linkHref = URL_EXTENSION_INSTALLER_CHROME\r\n    } else if (isFirefox) {\r\n        linkHref = serverOrigin + URL_EXTENSION_INSTALLER_FIREFOX\r\n    } else if (isSafari) {\r\n        linkHref = serverOrigin + URL_MAC_PLUGIN\r\n    }\r\n    return (\r\n        <>\r\n            <span>\r\n                {i18n.bp_client_old_extension_version(browserName)}\r\n            </span>\r\n            {(isChrome || isFirefox || isSafari) && (\r\n                <>\r\n                    <br />\r\n                    <br />\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part1()}\r\n                    </span>\r\n                    <a href={linkHref} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {i18n.bp_client_update_extension_text()}\r\n                    </a>\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part2()}\r\n                    </span>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useOutdatedBrowserExtensionPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onShowExtensionIsOldDialog = useEvent((browserName: string) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent browserName={browserName} />\r\n            ),\r\n            actions: ({closeModal}) => (\r\n                <SmButton onClick={closeModal}>\r\n                    {i18n.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onShowExtensionIsOldDialog})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowExtensionIsOldDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst reloadPage = () => location.reload()\r\n\r\nexport function useOutdatedClientNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isClientOutdated = useAppConfigState('isClientOutdated')\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (isClientOutdated) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OutdatedClientAppError,\r\n                message: (\r\n                    <>\r\n                        <span>{i18n.reload_confirm_new_msg_part1()}</span>\r\n                        <a href=\"#\" onClick={reloadPage}>\r\n                            {i18n.reload_confirm_action_button_text()}\r\n                        </a>\r\n                        <span>{i18n.reload_confirm_new_msg_part2()}</span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.OutdatedClientAppError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isClientOutdated\r\n    }, [isClientOutdated, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState, useSessionStateConnector} from '@bpinc/ad-session-context'\r\nimport type {PhoneCapabilities, ServerErrorSource} from '@bpinc/ad-session-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst PHONE_OUT_OF_SERVICE_ERROR_DELAY = 5000\r\n\r\nexport const usePhoneOutOfServiceNotification = () => {\r\n    const sessionStateConnector = useSessionStateConnector()\r\n    const isHelperAppInstanceCreated = useBpClientState('isHelperAppInstanceCreated')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneType = useSessionState('phoneType')\r\n    const t = useLocalizationState('t')\r\n\r\n    const onUpdateCapabilities = useEvent((caps: PhoneCapabilities) => {\r\n        if (!caps.canDial && phoneType !== 'phone_type_none') {\r\n            bpLogger.warn('SIP phone or external line is out of service')\r\n\r\n            let message: string | undefined\r\n            switch (phoneType) {\r\n                case 'phone_type_nailed':\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_virtual_phone_not_available()\r\n                    break\r\n                case 'phone_type_soft_secure':\r\n                case 'phone_type_soft_unsecure':\r\n                    if (isHelperAppInstanceCreated) {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n                    } else {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_helper_app_not_available()\r\n                    }\r\n                    break\r\n                default:\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n            }\r\n\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message,\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        } else {\r\n            bpLogger.info('SIP phone or external line is in service')\r\n            hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n        }\r\n    })\r\n\r\n    const onServerError = useEvent((source: ServerErrorSource, errorCode: number) => {\r\n        if (source === 'agentServer' && errorCode === 4) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message: t.ERROR_MESSAGES.phoneIsNotRegistered(),\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        }\r\n    })\r\n\r\n    const onThreePCCServerGone = useEvent(() => {\r\n        showNotification({\r\n            type: 'warning',\r\n            id: Notifications.PhoneOutOfServiceError,\r\n            message: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_3pcc_server_connectionLost(),\r\n            closable: false,\r\n            showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n        })\r\n    })\r\n\r\n    const onThreePCCServerReady = useEvent(() => {\r\n        hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = sessionStateConnector.dispenser.subscribe({\r\n            onUpdateCapabilities,\r\n            onServerError,\r\n            onThreePCCServerGone,\r\n            onThreePCCServerReady,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [\r\n        onUpdateCapabilities,\r\n        onServerError,\r\n        onThreePCCServerGone,\r\n        onThreePCCServerReady,\r\n        sessionStateConnector,\r\n    ])\r\n}\r\n","import {useEmiErrorsNotifications} from './interaction/useEmiErrorsNotifications'\r\nimport {useFailedCallNotification} from './interaction/useFailedCallNotification'\r\nimport {useFavoritesLimitReachedError} from './interaction/useFavoritesLimitReachedError'\r\nimport {useInteractionNotAcceptedNotification} from './interaction/useInteractionNotAcceptedNotification'\r\nimport {usePhoneDeviceNotDetectedNotification} from './interaction/usePhoneDeviceNotDetectedNotification'\r\nimport {usePhoneTypeErrorNotification} from './interaction/usePhoneTypeErrorNotification'\r\nimport {\r\n    useReservedForIncomingInteractionNotification,\r\n} from './interaction/useReservedForIncomingInteractionNotification'\r\nimport {useWebRtcCallInChatErrorNotifications} from './interaction/useWebRtcCallInChatErrorNotifications'\r\nimport {useDomainAuthorizationPopup} from './system/useDomainAuthorizationPopup'\r\nimport {useInstallationRequiredPopup} from './system/useInstallationRequiredPopup'\r\nimport {useOfflineNotification} from './system/useOfflineNotification'\r\nimport {useOutdatedBrowserExtensionPopup} from './system/useOutdatedBrowserExtensionPopup'\r\nimport {useOutdatedClientNotification} from './system/useOutdatedClientNotification'\r\nimport {usePhoneOutOfServiceNotification} from './system/usePhoneOutOfServiceNotification'\r\nimport {useSipServerDisconnectedNotification} from './system/useSipServerDisconnectedNotification'\r\nimport {useSlowNetworkNotification} from './system/useSlowNetworkNotification'\r\nimport {useUnauthorizedDomainNotification} from './system/useUnauthorizedDomainNotification'\r\n\r\n\r\n/**\r\n * Top-level notifications which should be shown for application WITH COMM.PANEL ONLY\r\n */\r\nexport function useInteractionNotifications() {\r\n    useEmiErrorsNotifications()\r\n    useFailedCallNotification()\r\n    useInteractionNotAcceptedNotification()\r\n    usePhoneDeviceNotDetectedNotification()\r\n    usePhoneTypeErrorNotification()\r\n    useReservedForIncomingInteractionNotification()\r\n    useWebRtcCallInChatErrorNotifications()\r\n    useFavoritesLimitReachedError()\r\n}\r\n\r\n/**\r\n * Top-level notifications which should be shown in ANY application of AD framework (standalone KB, for instance)\r\n */\r\nexport function useSystemNotifications() {\r\n    useDomainAuthorizationPopup()\r\n    useInstallationRequiredPopup()\r\n    useOfflineNotification()\r\n    useOutdatedBrowserExtensionPopup()\r\n    useOutdatedClientNotification()\r\n    usePhoneOutOfServiceNotification()\r\n    useSipServerDisconnectedNotification()\r\n    useSlowNetworkNotification()\r\n    useUnauthorizedDomainNotification()\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {\r\n    useIsOffline,\r\n    useOfflineErrorMessages,\r\n    useOfflineStateDataShowOfflineAlert,\r\n    useOfflineStateMethods,\r\n} from '@bpinc/ad-offline-state-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\nexport function useOfflineNotification() {\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const showOfflineAlert = useOfflineStateDataShowOfflineAlert()\r\n    const offlineErrorMessages = useOfflineErrorMessages()\r\n    const isOffline = useIsOffline()\r\n\r\n    useEffect(() => {\r\n        if (showOfflineAlert) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OfflineStateError,\r\n                content: offlineErrorMessages.isOffline,\r\n                closable: true,\r\n                duration: 5000,\r\n                onHide: () => setShowOfflineAlert(false),\r\n            })\r\n        }\r\n    }, [\r\n        offlineErrorMessages.isOffline,\r\n        setShowOfflineAlert,\r\n        showNotification,\r\n        showOfflineAlert,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (!isOffline) {\r\n            setShowOfflineAlert(false)\r\n        }\r\n    }, [isOffline, setShowOfflineAlert])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent, usePreviousValueRef} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSipServerDisconnectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const sipServer = useSessionState('sipServer')\r\n    const prevSipServerRef = usePreviousValueRef(sipServer)\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (sipServer) {\r\n            hideNotificationById(Notifications.SipServerConnectionError)\r\n        } else if (prevSipServerRef.current) {\r\n            // we had SIP server, but not anymore\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.SipServerConnectionError,\r\n                message: i18n.window_messages_3pcc_server_connectionLost(),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track sipServer change only\r\n    }, [sipServer, updateNotification])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst CHECK_INTERVAL = 5000\r\nconst SLOW_THRESHOLD = 800\r\n\r\n/**\r\n * This hook periodically checks the user's connection speed by fetching root of the current host.\r\n * and shows a notification if the connection is slow.\r\n * Connection is considered slow based on the predefined threshold (SLOW_THRESHOLD),\r\n * When the connection speed improves, it hides the notification.\r\n */\r\nexport function useSlowNetworkNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const startTime = useRef(0)\r\n\r\n    const checkConnectionSpeed = useEvent(() => {\r\n        const isRequestAlreadyInProgress = startTime.current !== 0\r\n\r\n        if (isRequestAlreadyInProgress || process.env.NODE_ENV === 'development') {\r\n            return\r\n        }\r\n\r\n        startTime.current = new Date().getTime()\r\n\r\n        fetch('/', {\r\n            method: 'HEAD',\r\n            cache: 'no-store',\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(() => {\r\n                const endTime = new Date().getTime()\r\n                const duration = endTime - startTime.current\r\n\r\n                startTime.current = 0\r\n\r\n                if (duration > SLOW_THRESHOLD) {\r\n                    const message = i18n.slow_connection()\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.SlowNetworkConnectionError,\r\n                        message,\r\n                    })\r\n                    bpLogger.warn(`Slow connection detected`)\r\n                } else {\r\n                    hideNotificationById(Notifications.SlowNetworkConnectionError)\r\n                }\r\n            })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(checkConnectionSpeed, CHECK_INTERVAL)\r\n        return () => clearInterval(interval)\r\n    }, [checkConnectionSpeed])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nexport function useUnauthorizedDomainNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isDomainAuthorized = useBpClientState('isDomainAuthorized')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isDomainAuthorized) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.DomainNotAuthorizedForBPClientError,\r\n                closable: false,\r\n                message: (\r\n                    <>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part1()}\r\n                        </span>\r\n                        <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            {i18n.domainAuthentificationErrorAnchor()}\r\n                        </a>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part2()}\r\n                        </span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.DomainNotAuthorizedForBPClientError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isDomainAuthorized\r\n    }, [isDomainAuthorized, updateNotification])\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {useSystemNotifications} from '@bpinc/lib-system-notifications'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    authorizedConnectors: AuthorizedConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizedConnectorsConsumers: React.FC<Props> = ({baseConnectors, authorizedConnectors, children}) => {\r\n    useSystemNotifications()\r\n    return <>{children(baseConnectors, authorizedConnectors)}</>\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {incomingErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {SmButton, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const ForceLogout: React.FC = () => {\r\n    const forceLogoutInfo = useSessionState('forceLogoutInfo')\r\n    const {closeForceLogout} = useSessionStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n\r\n    assertDefined(forceLogoutInfo)\r\n    const loggedOutBy = formatFullName(forceLogoutInfo.firstName, forceLogoutInfo.lastName)\r\n    const loggedOutTime = formatDate(forceLogoutInfo.timestamp)\r\n\r\n    const getContent = () => {\r\n        switch (forceLogoutInfo.errorCode) {\r\n            case incomingErrorMessageCodes.forced_logout_by_another_session: {\r\n                return t.ERROR_MESSAGES.sessionWasOverwritten()\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_supervisor: {\r\n                return t.ERROR_MESSAGES.forcedLogout(loggedOutBy, loggedOutTime)\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_tenant:\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_user: {\r\n                return t.ERROR_MESSAGES.account_has_been_disabled()\r\n            }\r\n        }\r\n        return forceLogoutInfo.forceLogoutReason\r\n    }\r\n\r\n    return (\r\n        <SmSegment\r\n            padded\r\n            className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\r\n                overflow-hidden rounded-none border-none bg-transparent shadow-none\"\r\n            id=\"login\"\r\n        >\r\n            <Modal\r\n                isOpen\r\n                size=\"small\"\r\n                className=\"max-w-[570px]\"\r\n                aria-describedby=\"forceLogoutDialogDescription\"\r\n                data-testid=\"forced-logout-modal\"\r\n            >\r\n                <Modal.Header>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_information()}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description id=\"forceLogoutDialogDescription\">\r\n                        <p>{getContent()}</p>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <SmButton onClick={closeForceLogout} primary data-testid=\"ok-button\">\r\n                        {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                    </SmButton>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </SmSegment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useCurrentTabRole} from '@bpinc/ad-current-tab-data-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ForceLogin, LoginPage} from '@bpinc/lib-login-ui'\r\nimport {ForceLogout} from '@bpinc/lib-login-ui/src/components/ForceLogout'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const UnauthorizedUI: React.FC = () => {\r\n    const tabRole = useCurrentTabRole()\r\n    const {\r\n        authChecked,\r\n        isLoggedIn,\r\n        showLoginDialog,\r\n        offerForceLogin,\r\n        forceLogoutInfo,\r\n    } = useSessionState(['authChecked', 'isLoggedIn', 'showLoginDialog', 'offerForceLogin', 'forceLogoutInfo'])\r\n    const language = useLocalizationState('language')\r\n\r\n    const showAppLoader = !language || (tabRole === 'undecided' && !authChecked)\r\n    const showLoginPage = !showAppLoader && (showLoginDialog || !isLoggedIn)\r\n    const showForceLogout = !!forceLogoutInfo && showLoginPage\r\n    const showForceLogin = offerForceLogin && !forceLogoutInfo && showLoginPage\r\n\r\n    return (\r\n        <div className=\"mx-auto h-full w-[496px]\">\r\n            {showAppLoader && <Loader active size=\"huge\" color=\"primary\" />}\r\n            {showLoginPage && <LoginPage />}\r\n            {showForceLogout && <ForceLogout />}\r\n            {showForceLogin && <ForceLogin />}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {AuthorizedProviders} from '@bpinc/ad-local-providers'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {AuthorizedConnectorsConsumers} from './AuthorizedConnectorsConsumers'\r\nimport {UnauthorizedUI} from './UnauthorizedUI'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizationUIRouter: React.FC<Props> = React.memo(({\r\n    baseConnectors,\r\n    children,\r\n}) => {\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <AuthorizedProviders baseConnectors={baseConnectors}>\r\n                {authorizedConnectors => (\r\n                    <AuthorizedConnectorsConsumers\r\n                        baseConnectors={baseConnectors}\r\n                        authorizedConnectors={authorizedConnectors}\r\n                    >\r\n                        {children}\r\n                    </AuthorizedConnectorsConsumers>\r\n                )}\r\n            </AuthorizedProviders>\r\n        )\r\n    }\r\n    return <UnauthorizedUI />\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const BaseConnectorsConsumers: React.FC<Props> = ({\r\n    baseConnectors,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n}) => {\r\n\r\n    if (BaseConnectorsConsumer) {\r\n        return (\r\n            <BaseConnectorsConsumer baseConnectors={baseConnectors}>\r\n                {children}\r\n            </BaseConnectorsConsumer>\r\n        )\r\n    }\r\n    return children\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {BaseProviders} from '@bpinc/ad-local-providers'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport {Tooltip} from '@bpinc/lib-jskit-ui'\r\nimport {NotificationsStateProvider} from '@bpinc/lib-notifications-context'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\nimport {BaseConnectorsConsumers} from './BaseConnectorsConsumers'\r\n\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (baseConnectors: BaseConnectors) => ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const TopLevelProviders: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    BaseConnectorsConsumer,\r\n    children,\r\n}) => {\r\n    return (\r\n        <BaseProviders platformSpecific={platformSpecific} app={app}>\r\n            {baseConnectors => (\r\n                <BaseConnectorsConsumers\r\n                    baseConnectors={baseConnectors}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    <Tooltip.Provider>\r\n                        <NotificationsStateProvider>\r\n                            {children(baseConnectors)}\r\n                        </NotificationsStateProvider>\r\n                    </Tooltip.Provider>\r\n                </BaseConnectorsConsumers>\r\n            )}\r\n        </BaseProviders>\r\n    )\r\n}\r\n","import type {PropsWithChildren, ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport type {RemoteName} from '@bpinc/lib-remotes-configs'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AppStyleSelector} from '@bpinc/lib-ui-elements'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport {AuthorizationUIRouter} from './AuthorizationUIRouter'\r\nimport {TopLevelProviders} from './TopLevelProviders'\r\n\r\n\r\nexport type BaseConnectorsConsumerComponent = React.FC<PropsWithChildren<{baseConnectors: BaseConnectors}>>\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n    className?: string\r\n    appRemoteName: RemoteName\r\n}\r\n\r\nexport const AuthorizationModule: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n    className,\r\n    appRemoteName,\r\n}) => {\r\n    return (\r\n        <AppStyleSelector app={appRemoteName}>\r\n            <div className={tcn('h-full', className)}>\r\n                <TopLevelProviders\r\n                    app={app}\r\n                    platformSpecific={platformSpecific}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    {baseConnectors => (\r\n                        <AuthorizationUIRouter baseConnectors={baseConnectors}>\r\n                            {children}\r\n                        </AuthorizationUIRouter>\r\n                    )}\r\n                </TopLevelProviders>\r\n            </div>\r\n        </AppStyleSelector>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {DndProvider} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\n\r\nimport {createPlatformSpecific} from '@bpinc/ad-platform-specific-web-impl'\r\nimport {UIContextProvider} from '@bpinc/ad-ui-context'\r\nimport {AuthorizationModule} from '@bpinc/lib-authorization-module'\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\n\r\nimport {FullscreenCalendar} from './FullscreenCalendar'\r\n\r\n\r\nconst CalendarProviders = createProviderWrapper([\r\n    UIContextProvider,\r\n])\r\n\r\nexport const FullscreenCalendarApp: React.FC = () => {\r\n    return (\r\n        <AuthorizationModule platformSpecific={createPlatformSpecific('cal')} app=\"cal\" appRemoteName=\"calendar\">\r\n            {() => (\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <CalendarProviders>\r\n                        <FullscreenCalendar />\r\n                    </CalendarProviders>\r\n                </DndProvider>\r\n            )}\r\n        </AuthorizationModule>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {createRoot} from 'react-dom/client'\r\n\r\nimport {registerServiceWorker} from '@bpinc/ad-service-worker-reg'\r\nimport {FullscreenCalendarApp} from '@bpinc/cal-fullscreen-ui'\r\n\r\nimport '@bpinc/lib-css-config'\r\nimport '@bpinc/lib-css-tailwind'\r\n\r\n\r\nregisterServiceWorker()\r\nconst root = createRoot(document.getElementById('root')!)\r\n\r\nroot.render(<FullscreenCalendarApp />)\r\n\r\n"],"names":["m","exports","createRoot","hydrateRoot","FullscreenCalendar","useUIState","isTabNavHighlighted","div","className","tcn","section","role","CalendarPage","Modals","linkUrl","URL","searchParams","append","location","hostname","CURRENT_DOMAIN_AUTH_URL","toString","DOMAIN_AUTHORIZATION_MODAL_ID","linkClass","EXTENSION_ID","EXTENSION_ID_FF","PLUGIN_ID","ModalContent","isExtAvailable","install","INSTALLATION_PROCESS","useLocalizationState","t","useInstallationMethods","installChromeExtension","installFirefoxExtension","installBPClientPlugin","useEffect","chromeLink","document","getElementById","firefoxLink","pluginLink","addEventListener","removeEventListener","content","i18n","install_updateHeader","platformInfo","install_installHeader","install_installHeaderChrome","install_installHeaderFirefox","dangerouslySetInnerHTML","__html","browserName","serverOrigin","useSessionState","isChrome","isFirefox","isSafari","linkHref","URL_EXTENSION_INSTALLER_CHROME","URL_EXTENSION_INSTALLER_FIREFOX","URL_MAC_PLUGIN","span","bp_client_old_extension_version","br","bp_client_update_extension_part1","a","href","rel","target","bp_client_update_extension_text","bp_client_update_extension_part2","reloadPage","reload","PHONE_OUT_OF_SERVICE_ERROR_DELAY","useSystemNotifications","bpClientConnector","useModalsStateMethods","openModal","closeModal","onShowDomainAuthorizationDialog","onHideDomainAuthorizationDialog","showOfflineAlert","offlineErrorMessages","isOffline","useBpClientStateConnector","useEvent","id","title","bp_client_not_authorized_header","body","bp_client_not_authorized_message_part1","ERROR_MESSAGES","domainAuthentificationErrorAnchor","bp_client_not_authorized_message_part2","actions","SmButton","onClick","closeThisModal","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonOk","dispenser","subscribe","unsubscribe","isExtensionAvailable","useBpClientState","onInstallationRequired","window_title_warning","ok","useInstallationRequiredPopup","useNotificationsState","showNotification","useOfflineStateMethods","setShowOfflineAlert","useOfflineStateDataShowOfflineAlert","useOfflineErrorMessages","useIsOffline","type","Notifications","closable","duration","onHide","onShowExtensionIsOldDialog","useOutdatedBrowserExtensionPopup","hideNotificationById","isClientOutdated","useAppConfigState","isLoggedIn","GLOBAL","updateNotification","message","reload_confirm_new_msg_part1","reload_confirm_action_button_text","reload_confirm_new_msg_part2","useOutdatedClientNotification","sessionStateConnector","useSessionStateConnector","isHelperAppInstanceCreated","phoneType","onUpdateCapabilities","caps","canDial","bpLogger","window_messages_virtual_phone_not_available","window_messages_phone_not_available","window_messages_helper_app_not_available","showDelay","onServerError","source","errorCode","phoneIsNotRegistered","onThreePCCServerGone","window_messages_3pcc_server_connectionLost","onThreePCCServerReady","usePhoneOutOfServiceNotification","sipServer","prevSipServerRef","usePreviousValueRef","current","useSipServerDisconnectedNotification","startTime","useRef","checkConnectionSpeed","Date","getTime","fetch","method","cache","catch","e","console","error","finally","slow_connection","interval","setInterval","clearInterval","useSlowNetworkNotification","isDomainAuthorized","domain_authentication_error_part1","domain_authentication_error_part2","useUnauthorizedDomainNotification","AuthorizedConnectorsConsumers","baseConnectors","authorizedConnectors","children","ForceLogout","forceLogoutInfo","useSessionStateMethods","closeForceLogout","useFormatting","formatFullName","assertDefined","loggedOutBy","firstName","lastName","loggedOutTime","formatDate","timestamp","SmSegment","padded","Modal","isOpen","size","aria-describedby","data-testid","window_title_information","p","incomingErrorMessageCodes","sessionWasOverwritten","forcedLogout","account_has_been_disabled","forceLogoutReason","getContent","primary","UnauthorizedUI","tabRole","useCurrentTabRole","authChecked","showLoginDialog","offerForceLogin","showAppLoader","showLoginPage","showForceLogout","showForceLogin","Loader","active","color","LoginPage","ForceLogin","AuthorizationUIRouter","React","AuthorizedProviders","BaseConnectorsConsumers","BaseConnectorsConsumer","TopLevelProviders","app","platformSpecific","BaseProviders","Tooltip","NotificationsStateProvider","AuthorizationModule","appRemoteName","AppStyleSelector","CalendarProviders","createProviderWrapper","UIContextProvider","FullscreenCalendarApp","createPlatformSpecific","DndProvider","backend","HTML5Backend","registerServiceWorker","render"],"sourceRoot":""}