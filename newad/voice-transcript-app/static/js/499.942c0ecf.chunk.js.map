{"version":3,"file":"static/js/499.942c0ecf.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-notifications-ui/src/Notifications.module.less?3f89","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-notifications-ui/src/Notifications.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/components/ContactInfo.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/components/BotSuggestions.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/components/KnowledgeBase/VoiceTranscriptKB.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/components/RightPanel.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/components/VoiceTranscriptPage.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/avt-app-ui/src/loaders/index.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/channel-context/useOptions.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/channel-context/state.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/channel-context/context.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/hooks/useLinkOpener.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/hooks/useBotSuggestionsLinksAutoOpener.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/types/guards.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/helpers/common.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesContext.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/MessageAction.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useGetFormattedClipboardMessage.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useSelectionActions.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithUnmaskAction.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithSelectionActions.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesSelectionActions.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithAttachmentMaskAction.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithHoverOverActions.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/atoms.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/UploadErrorModal.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-attachments-state/src/constants.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-attachments-state/src/provider-chat.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-attachments-state/src/provider-email.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/useMessagesLoader.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.module.less?6c5d","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/useExternalActivityHistoryLoaded.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessagesPlaceholder.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/styles/Chat.module.less?1b39","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageAvatar.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageContent.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithTopInfo.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithOptionalNameAndAvatar.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/DotsTransforming.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingIndicator.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingParties.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useInitialScrollPosition.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/hooks/useFirstUnreadMessage.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/VirtualizedMessages.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useSaveScrollPositionEffect.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/bot-suggestion.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/facebook.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/line.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/sms.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/telegram.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/twitter.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/viber.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/web-chat.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/wechat.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/whatsapp.svg","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.module.less?42ff","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/utils.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/utils.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/BotSuggestion.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscriptContext.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/Filters.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.module.less?cdb5","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptVisibleMessages.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/ChatMessage.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/hooks/useMarkAsReadVisibilitySensor.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/SearchResultHighlight.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VirtualizedVoiceTranscriptMessages.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptMessagesContentMap.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/ChannelSelector.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/useInitializeDefaultChannelEffect.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatTextArea.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAgentTypingDetect.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAttachmentsList.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useHasMultipleLines.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/InvisibleAttachButton.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/hooks/useInitiateChatByAttachment.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useChatMessages.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/hooks/useMessageUpdater.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useControlsOptions.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.module.less?c331","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useGreeting.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useSmsMessageCounter.ts","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-chat-ui/src/components/Chat.tsx","webpack://@bpinc/web-voice-transcript-ui/../../packages/lib-tailwind-classnames/src/tcn.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listWrapper\":\"voiceTranscript_Notifications_listWrapper_NVyLi\",\"listItem\":\"voiceTranscript_Notifications_listItem_5BLxr\"};","import React, {cloneElement, isValidElement, useMemo} from 'react'\r\n\r\nimport {SmMessage, SmTransition} from '@bpinc/lib-external-ui-elements'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {AriaStatus} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from './Notifications.module.less'\r\n\r\n\r\nconst LIMIT = 3\r\n\r\ntype Props = {\r\n    omit?: string[]\r\n    show?: string[]\r\n    className?: string\r\n}\r\n\r\nconst duration = {hide: 0, show: 300}\r\n\r\n// TODO: remove <ServiceSelect /> from this component, move it to prop or content\r\nexport const Notifications: React.FC<Props> = ({omit, show, className}) => {\r\n    const {\r\n        notifications: notifications,\r\n        methods: {hideNotificationById},\r\n    } = useNotificationsState()\r\n\r\n    const notificationsToRender = useMemo(() => {\r\n        let filteredList = truthy(Object.values(notifications)).filter(n => !n.delayed)\r\n\r\n        if (show) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return show.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        if (omit) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return !omit.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        return filteredList.slice(0, LIMIT)\r\n    }, [notifications, omit, show])\r\n\r\n    return (\r\n        <div className={tcn(className, styles.listWrapper)}>\r\n            <SmTransition.Group animation=\"fade down\" duration={duration}>\r\n                {notificationsToRender.map(notification => {\r\n                    let content: React.ReactNode\r\n\r\n                    if (notification.content) {\r\n                        content = isValidElement(notification.content)\r\n                            ? cloneElement(notification.content, {onHide: () => hideNotificationById(notification.id)})\r\n                            : notification.content\r\n                    } else {\r\n                        content = notification.message\r\n                    }\r\n\r\n                    return (\r\n                        <div key={notification.id} className={styles.listItem}>\r\n                            <div>\r\n                                <SmMessage\r\n                                    onDismiss={\r\n                                        notification.closable\r\n                                            ? () => hideNotificationById(notification.id)\r\n                                            : undefined\r\n                                    }\r\n                                    content={content}\r\n                                    error={notification.type === 'error'}\r\n                                    info={notification.type === 'info'}\r\n                                    warning={notification.type === 'warning'}\r\n                                    success={notification.type === 'success'}\r\n                                />\r\n                            </div>\r\n                            <AriaStatus>{content}</AriaStatus>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </SmTransition.Group>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useGetContactPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\n\r\n\r\ninterface ContactInfoProps {\r\n    firstName: string | undefined\r\n    lastName: string | undefined\r\n    fullName: string | undefined\r\n    contactId: string | undefined\r\n    phoneNumber?: string | undefined\r\n}\r\n\r\nexport const ContactInfo: FC<ContactInfoProps> = ({firstName, lastName, fullName, contactId, phoneNumber}) => {\r\n\r\n    const getContactPictureUrl = useGetContactPictureUrl()\r\n\r\n    return (\r\n        <>\r\n            <AvatarLegacy\r\n                firstName={firstName}\r\n                lastName={lastName}\r\n                type=\"contact\"\r\n                size={44}\r\n                url={getContactPictureUrl(contactId)}\r\n            />\r\n            <div className=\"ml-4\">\r\n                <div className=\"text-xl leading-tight\">{fullName}</div>\r\n                {phoneNumber && (\r\n                    <div className=\"self-end opacity-80\">\r\n                        {formatPhone(phoneNumber)}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {BotSuggestion} from '@bpinc/lib-chat-ui'\r\n\r\n\r\ninterface BotSuggestionsProps {\r\n    itemId: string\r\n    botSuggestions: VoiceTranscriptSuggestion[] | undefined\r\n}\r\n\r\nexport const BotSuggestions: FC<BotSuggestionsProps> = ({itemId, botSuggestions}) => {\r\n    return (\r\n        <div className=\"flex h-0 flex-auto flex-col overflow-auto break-words px-4\">\r\n            {botSuggestions?.map((suggestion, index) => (\r\n                <BotSuggestion\r\n                    message={suggestion}\r\n                    itemId={itemId}\r\n                    //TODO: Temporary solution. Use suggestion.msgId instead of index\r\n                    key={index}\r\n                    direction=\"outgoing\"\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, {memo} from 'react'\r\n\r\nimport type {KBFeatures} from '@bpinc/kb-types'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\n\r\n\r\nconst {KBPageLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBPage')\r\n\r\nconst features: Partial<KBFeatures> = {\r\n    topHeader: true,\r\n    openInNewTab: true,\r\n}\r\n\r\nexport const VoiceTranscriptKB: React.FC = memo(function VoiceTranscriptKB() {\r\n    const kbBridge = useKbBridgeConnector()\r\n\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    return <KBPageLoader features={features} kbBridge={kbBridge} />\r\n})\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useState} from 'react'\r\n\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {OnDragEndParams} from '@bpinc/lib-ui-elements'\r\nimport {Floating, LinkLikeButton, useCanPin} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {BotSuggestions} from './BotSuggestions'\r\nimport {VoiceTranscriptKB} from './KnowledgeBase'\r\n\r\n\r\nconst FLOATING_PANEL_MIN_WIDTH = 400\r\n\r\nconst activeFloatingPanelTabStyles = tcn(`\r\n        text-xl\r\n        text-main\r\n        focus:text-main \r\n        hover:focus:text-main\r\n    `)\r\n\r\ninterface FloatingPanelProps {\r\n    itemId: string\r\n    botSuggestions: VoiceTranscriptSuggestion[] | undefined\r\n}\r\n\r\nexport const RightPanel: FC<FloatingPanelProps> = ({itemId, botSuggestions}) => {\r\n    const {t} = useLocalizationState()\r\n    const [floatingPanelContent, setFloatingPanelContent] = useState<\r\n      'kb' | 'bot'\r\n    >('kb')\r\n\r\n    const {\r\n        kbFloatingState,\r\n        kbWidth,\r\n        mainContentNode,\r\n        setKBFloatingState,\r\n        setKBWidth,\r\n    } = useMainPageUIState(['kbFloatingState', 'kbWidth', 'setKBFloatingState', 'setKBWidth', 'mainContentNode'])\r\n\r\n    const canPin = useCanPin({\r\n        mainContentNode,\r\n        floatingState: kbFloatingState,\r\n        floatingSize: kbWidth,\r\n        contentMinWidth: 580,\r\n    })\r\n\r\n    const onDragEnd = useCallback(\r\n        function onDragEndCallback({size}: OnDragEndParams) {\r\n            setKBWidth(size)\r\n        },\r\n        [setKBWidth],\r\n    )\r\n\r\n    return (\r\n        <Floating\r\n            maxSizeInPercent={60}\r\n            canPin={canPin}\r\n            className=\"h-full\"\r\n            closeByEscape={kbFloatingState === 'floating'}\r\n            data-testid=\"kb-panel\"\r\n            initialSize={kbWidth}\r\n            minSize={FLOATING_PANEL_MIN_WIDTH}\r\n            onDragEnd={onDragEnd}\r\n            resizeable\r\n            setState={setKBFloatingState}\r\n            side=\"right\"\r\n            state={kbFloatingState}\r\n        >\r\n            <div className=\"flex h-full w-full flex-col\">\r\n                <header className=\"flex items-center gap-6 px-4 pt-5\">\r\n                    <LinkLikeButton\r\n                        className={tcn({[activeFloatingPanelTabStyles]: floatingPanelContent === 'bot'})}\r\n                        onClick={() => {\r\n                            setFloatingPanelContent('bot')\r\n                        }}\r\n                    >\r\n                        {t.AGENT_ASSIST.suggestions_tab()}\r\n                    </LinkLikeButton>\r\n                    <LinkLikeButton\r\n                        className={tcn({[activeFloatingPanelTabStyles]: floatingPanelContent === 'kb'})}\r\n                        onClick={() => {\r\n                            setFloatingPanelContent('kb')\r\n                        }}\r\n                    >\r\n                        {t.AGENT_ASSIST.kb_tab()}\r\n                    </LinkLikeButton>\r\n                </header>\r\n                <section className=\"flex h-full flex-auto flex-col overflow-auto\">\r\n                    {floatingPanelContent === 'kb' && <VoiceTranscriptKB />}\r\n                    {floatingPanelContent === 'bot' && (\r\n                        <BotSuggestions\r\n                            itemId={itemId}\r\n                            botSuggestions={botSuggestions}\r\n                        />\r\n                    )}\r\n                </section>\r\n            </div>\r\n        </Floating>\r\n    )\r\n}\r\n\r\n","import type {FC} from 'react'\r\nimport React, {useEffect} from 'react'\r\nimport {DndProvider} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\n\r\nimport {useUpdateCurrentTabState} from '@bpinc/ad-current-tab-data-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionBy, useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedChatItem, getInteractionStepId, getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {\r\n    ChatForm,\r\n    useBotSuggestionsLinksAutoOpener,\r\n    VoiceTranscript,\r\n    VoiceTranscriptStateProvider,\r\n} from '@bpinc/lib-chat-ui'\r\nimport {Notifications} from '@bpinc/lib-notifications-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ContactInfo} from './ContactInfo'\r\nimport {RightPanel} from './RightPanel'\r\n\r\n\r\nconst contentSizeStyles = tcn('min-w-[580px] max-w-[960px]')\r\n\r\n\r\nexport const VoiceTranscriptPage: FC = () => {\r\n    const {\r\n        kbFloatingState,\r\n        setMainContentNode,\r\n    } = useMainPageUIState(['kbFloatingState', 'setMainContentNode'])\r\n    const queryParams = new URLSearchParams(window.location.search)\r\n    const interactionStepId = queryParams.get('interactionStepId') ?? ''\r\n\r\n    const item = useInteractionBy(\r\n        'interactionStepId',\r\n        interactionStepId,\r\n    )\r\n\r\n    // If there are 2 associated items, chatItem will be the one, which is chat\r\n    const chatItem = useInteractionStateSelector(state => {\r\n        return getAssociatedChatItem({item, items: state.items})\r\n    })\r\n\r\n    const itemId = item?.id ?? ''\r\n    const chatItemId = chatItem?.id ?? ''\r\n\r\n    const voiceTranscript = item?.voiceTranscript\r\n    const botSuggestions = item?.botSuggestions\r\n\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n\r\n    const firstName = item?.displayData.firstName\r\n    const lastName = item?.displayData.lastName\r\n    const phoneNumber = item?.displayData.number\r\n    const fullName = formatFullName(firstName, lastName)\r\n\r\n\r\n    const chatData = useInteractionChatData(getInteractionStepId(chatItem))\r\n\r\n    useBotSuggestionsLinksAutoOpener(itemId, botSuggestions, true)\r\n\r\n    const updateCurrentTabState = useUpdateCurrentTabState()\r\n\r\n    useEffect(() => {\r\n        updateCurrentTabState({\r\n            app: 'avt',\r\n            data: {\r\n                itemId,\r\n            },\r\n        })\r\n    }, [itemId, updateCurrentTabState])\r\n\r\n\r\n    if (!itemId || !chatItemId) {\r\n        return <h1>No interaction detected</h1>\r\n    }\r\n\r\n    return (\r\n        <VoiceTranscriptStateProvider>\r\n            {/* Required for KB */}\r\n            <DndProvider backend={HTML5Backend}>\r\n                <SelectionContainer autoScroll className=\"flex h-full flex-col\">\r\n                    <Notifications />\r\n                    <header\r\n                        className={`\r\n                            flex \r\n                            h-16 \r\n                            items-center\r\n                            bg-[color:var(--c-main-bars-bg)]\r\n                            px-6 \r\n                            text-2xl \r\n                            text-primary-contrast\r\n                        `}\r\n                    >\r\n                        {t.EXTERNAL_CHAT.voice_transcript_header(fullName)}\r\n                    </header>\r\n                    <div className=\"relative flex flex-auto\">\r\n                        <section\r\n                            ref={(el: HTMLDivElement) => {\r\n                                setMainContentNode(el)\r\n                            }}\r\n                            className={tcn(\r\n                                'flex flex-auto flex-col py-4',\r\n                                kbFloatingState === 'floating'\r\n                                    ? 'items-start'\r\n                                    : 'items-center',\r\n                            )}\r\n                        >\r\n                            <div\r\n                                className={tcn(\r\n                                    contentSizeStyles,\r\n                                    'flex w-full flex-auto flex-col',\r\n                                )}\r\n                            >\r\n                                <header className=\"align-center flex pl-6\">\r\n                                    <ContactInfo\r\n                                        firstName={firstName}\r\n                                        lastName={lastName}\r\n                                        fullName={fullName}\r\n                                        contactId={item?.contactId}\r\n                                        phoneNumber={phoneNumber}\r\n                                    />\r\n                                </header>\r\n                                <VoiceTranscript\r\n                                    className=\"flex h-0 flex-auto flex-col\"\r\n                                    filtersClassName=\"w-[477px] self-end\"\r\n                                    voiceTranscript={voiceTranscript}\r\n                                    botSuggestions={botSuggestions}\r\n                                    chatMessages={chatData?.messages}\r\n                                    itemId={itemId}\r\n                                />\r\n                                <ChatForm\r\n                                    itemId={chatItemId}\r\n                                    serviceId={getServiceId(chatItem)}\r\n                                />\r\n                            </div>\r\n                        </section>\r\n                        <RightPanel\r\n                            itemId={itemId}\r\n                            botSuggestions={botSuggestions}\r\n                        />\r\n                    </div>\r\n                </SelectionContainer>\r\n            </DndProvider>\r\n        </VoiceTranscriptStateProvider>\r\n    )\r\n}\r\n","import {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nexport const {VoiceTranscriptPageLoader} = createComponentLoader('voiceTranscript', import('voiceTranscript'), 'VoiceTranscriptPage')\r\n\r\n","import {useEffect, useMemo} from 'react'\r\nimport {flow, partial, property} from 'lodash-es'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useAssociatedChatInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getChannel,\r\n    getGlobalInteractionId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    isCall,\r\n    isChatService,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRemoteAssistState} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport type {OutboundChatChannel} from '@bpinc/ad-services-dispositions-types'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {LocalizationStateData} from '@bpinc/state-localization'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ChannelOption} from './types'\r\n\r\n\r\nfunction mapChannel(\r\n    t: LocalizationStateData['t'],\r\n    channel: ExternalChatChannelType | undefined,\r\n): ChannelOption | undefined {\r\n    switch (channel) {\r\n        case 'sms':\r\n            return {value: channel, text: t.GLOBAL.chat_type_sms()}\r\n        case 'web':\r\n            return {value: channel, text: t.GLOBAL.chat_type_web()}\r\n        case 'telegram':\r\n            return {value: channel, text: t.GLOBAL.chat_type_telegram()}\r\n        case 'line':\r\n            return {value: channel, text: t.GLOBAL.chat_type_line()}\r\n        case 'twitter':\r\n            return {value: channel, text: t.GLOBAL.chat_type_twitter()}\r\n        case 'facebook':\r\n            return {value: channel, text: t.GLOBAL.chat_type_facebook()}\r\n        case 'wechat':\r\n            return {value: channel, text: t.GLOBAL.chat_type_wechat()}\r\n        case 'nexmo':\r\n            return {value: channel, text: t.GLOBAL.chat_type_nexmo()}\r\n        case 'viber':\r\n            return {value: channel, text: t.GLOBAL.chat_type_viber()}\r\n        case 'whatsapp':\r\n            return {value: channel, text: t.GLOBAL.chat_type_whatsapp()}\r\n        case 'remoteassist':\r\n            return {value: channel, text: t.GLOBAL.chat_type_remote_assist()}\r\n    }\r\n}\r\n\r\nexport function useOptions(): ChannelOption[] {\r\n    const {getContact} = useContactsStateMethods()\r\n    const contacts = useContactsState('contacts')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const chatActiveItem = useAssociatedChatInteraction(interactionId)\r\n    const {services, allOutboundChatChannels, outboundChatChannels} = useServicesDispositionsState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const {selectedService} = useServiceState()\r\n    const {items: raItems} = useRemoteAssistState()\r\n    const {t} = useLocalizationState()\r\n\r\n    const itemChannel = getChannel(chatActiveItem)\r\n    const itemService = getServiceId(chatActiveItem)\r\n    const messengers = getMessengers(contacts, chatActiveItem)\r\n    const contactId = chatActiveItem?.contactId\r\n    const originalChannel = chatActiveItem?.externalChatData?.channel\r\n    const globalInteractionId = getGlobalInteractionId(chatActiveItem)\r\n    const raSessionActive = globalInteractionId && raItems[globalInteractionId]?.clientState === 'joined'\r\n\r\n    const isLoading = contactId && contacts[contactId]?.isLoading\r\n    const contactExists = !!contactId && !!contacts[contactId]?.data\r\n\r\n    useEffect(() => {\r\n        if (contactId && !isLoading && !contactExists) {\r\n            getContact({id: contactId})\r\n        }\r\n    }, [contactExists, contactId, getContact, isLoading])\r\n\r\n    const localizedChannelOptions = useMemo(() => {\r\n        const options: {[value: string]: ChannelOption} = {}\r\n\r\n        addMessengersOptions()\r\n        addRemoteAssistOption()\r\n        addPhoneOptions()\r\n        addOriginalChannelOption()\r\n        filterOutboundOptions()\r\n        addCurrentItemOption()\r\n\r\n        return Object.values(options)\r\n\r\n        function addOption(option: ChannelOption | undefined) {\r\n            if (option) {\r\n                options[option.value] = option\r\n            }\r\n        }\r\n\r\n        function addMessengersOptions() {\r\n            messengers?.forEach(flow(property('type'), partial(mapChannel, t), addOption))\r\n        }\r\n\r\n        function addPhoneOptions() {\r\n            if (getPhoneFromItem(chatActiveItem)) {\r\n                addOption({value: 'sms', text: t.GLOBAL.chat_type_sms(), phones: chatActiveItem?.displayData.phones})\r\n            }\r\n        }\r\n\r\n        function filterOutboundOptions() {\r\n            for (const key in options) {\r\n                if (!outboundChannelAvailable(options[key])) {\r\n                    delete options[key]\r\n                }\r\n            }\r\n\r\n            function outboundChannelAvailable(option: ChannelOption) {\r\n                const service = itemService || selectedService\r\n\r\n                if (option.value === 'remoteassist') {\r\n                    return raSessionActive\r\n                }\r\n                if (option.value === 'web') {\r\n                    return true\r\n                }\r\n                if (option.value === originalChannel) {\r\n                    return true\r\n                }\r\n\r\n                if (isCall(chatActiveItem)) {\r\n                    return true\r\n                }\r\n\r\n                if (service) {\r\n                    const outboundChannels = isChatService(service, services)\r\n                        ? allOutboundChatChannels\r\n                        : outboundChatChannels[service]\r\n\r\n                    return outboundChannels?.includes(\r\n                        option.value.toUpperCase() as OutboundChatChannel,\r\n                    )\r\n                }\r\n\r\n                if (selectedDIDNumber) {\r\n                    return option.value === 'sms'\r\n                }\r\n            }\r\n        }\r\n\r\n        function addCurrentItemOption() {\r\n            const itemChannelOption = mapChannel(t, itemChannel)\r\n\r\n            if (itemChannelOption) {\r\n                addOption(itemChannelOption)\r\n            }\r\n        }\r\n\r\n        function addOriginalChannelOption() {\r\n            if (originalChannel) {\r\n                const itemChannelOption = mapChannel(t, originalChannel)\r\n                if (itemChannelOption) {\r\n                    addOption(itemChannelOption)\r\n                }\r\n            }\r\n        }\r\n\r\n        function addRemoteAssistOption() {\r\n            addOption({value: 'remoteassist', text: t.GLOBAL.chat_type_remote_assist()})\r\n        }\r\n    }, [\r\n        messengers,\r\n        t,\r\n        chatActiveItem,\r\n        itemService,\r\n        selectedService,\r\n        selectedDIDNumber,\r\n        services,\r\n        allOutboundChatChannels,\r\n        outboundChatChannels,\r\n        itemChannel,\r\n        raSessionActive,\r\n        originalChannel,\r\n    ])\r\n\r\n\r\n    return useMemo(\r\n        function memoizedChannelOptions() {\r\n            return localizedChannelOptions\r\n        },\r\n        [localizedChannelOptions],\r\n    )\r\n}\r\n","import {useCallback, useMemo, useRef, useState} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useOnLogout} from '@bpinc/ad-session-context'\r\nimport {useOpenChannel} from '@bpinc/lib-helpers-ui'\r\n\r\nimport type {\r\n    ChannelOption,\r\n    ChannelState,\r\n    SelectedChannel,\r\n    SelectedPhone,\r\n    Touched,\r\n} from './types'\r\nimport {useOptions} from './useOptions'\r\n\r\n\r\n//TODO: Check if we need this initialOption or we can throw an error if it's not provided\r\nexport const initialOption: ChannelOption = {value: 'sms', text: 'SMS'}\r\n\r\nexport function useChannel(): ChannelState {\r\n    const channelOptions = useOptions()\r\n    const openChannel = useOpenChannel()\r\n\r\n    const channelOptionsRef = useRef(channelOptions)\r\n    channelOptionsRef.current = channelOptions\r\n\r\n    //------------Select logic------------//\r\n    const [selectedChannel, setSelectedChannel] = useState<SelectedChannel>({})\r\n    const [selectedPhone, setSelectedPhone] = useState<SelectedPhone>({})\r\n\r\n    const getSelectedChannel = useCallback((itemId: string) => {\r\n        if (selectedChannel[itemId]) {\r\n            return selectedChannel[itemId]\r\n        }\r\n\r\n        if (channelOptions) {\r\n            return channelOptions[0]\r\n        }\r\n\r\n        return undefined\r\n    }, [channelOptions, selectedChannel])\r\n\r\n    const getSelectedPhone = useCallback((itemId: string) => {\r\n        const channel = getSelectedChannel(itemId)\r\n        if (channel?.value !== 'sms') {\r\n            return undefined\r\n        }\r\n\r\n        if (selectedPhone[itemId]) {\r\n            return selectedPhone[itemId]\r\n        }\r\n\r\n        if (channel) {\r\n            return channel?.phones?.[0]\r\n        }\r\n    }, [getSelectedChannel, selectedPhone])\r\n\r\n    const selectCurrentItemChannel = useCallback(\r\n        function selectCurrentItemChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            setSelectedChannel(\r\n                produce(channels => {\r\n                    channels[itemId] = channel\r\n                }),\r\n            )\r\n            setSelectedPhone(produce(phones => {\r\n                phones[itemId] = phoneId ? channel.phones?.find(p => p.id === phoneId) : undefined\r\n            }))\r\n\r\n            return channel\r\n        },\r\n\r\n        [],\r\n    )\r\n    //------------Select logic end------------//\r\n\r\n    //------------Reset logic------------//\r\n    const resetChannel = useCallback(function resetChannelCallback() {\r\n        setSelectedChannel({'': initialOption})\r\n    }, [])\r\n\r\n    const resetSelectedChannel = useCallback(function deleteChannelCallback(item: Item) {\r\n        setSelectedChannel(\r\n            produce(channels => {\r\n                delete channels[item.id]\r\n            }),\r\n        )\r\n    }, [])\r\n\r\n\r\n    const [touchedState, setTouchedState] = useState<Touched>({})\r\n\r\n    const isTouched = useCallback((itemId: string) => {\r\n        return touchedState[itemId || '']\r\n    }, [touchedState])\r\n\r\n    const setIsTouched = useCallback(\r\n        (itemId: string, touched: boolean) => {\r\n            setTouchedState(\r\n                produce(draft => {\r\n                    draft[itemId] = touched\r\n                }),\r\n            )\r\n        },\r\n        [],\r\n    )\r\n\r\n    function resetAllTouched() {\r\n        setTouchedState({})\r\n    }\r\n\r\n    function resetTouched(item: Item) {\r\n        setTouchedState(\r\n            produce(draft => {\r\n                delete draft[item.id]\r\n            }),\r\n        )\r\n    }\r\n\r\n\r\n    useOnLogout(() => {\r\n        resetChannel()\r\n        resetAllTouched()\r\n    })\r\n    useOnItemRemoved(item => {\r\n        resetSelectedChannel(item)\r\n        resetTouched(item)\r\n    })\r\n\r\n\r\n    const setSelectedChannelImpl = useCallback(\r\n        function setSelectedChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            openChannel(channel.value)\r\n            selectCurrentItemChannel(itemId, channel, phoneId)\r\n            setIsTouched(itemId, true)\r\n        },\r\n        [openChannel, selectCurrentItemChannel, setIsTouched],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizedChannelState() {\r\n            return {\r\n                getSelectedChannel,\r\n                getSelectedPhone,\r\n                setSelectedChannel: setSelectedChannelImpl,\r\n                channelOptions,\r\n                isTouched,\r\n                setIsTouched,\r\n            }\r\n        },\r\n        [getSelectedChannel, getSelectedPhone, setSelectedChannelImpl, channelOptions, isTouched, setIsTouched],\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useContext} from 'react'\r\n\r\nimport {throwNoProviderError} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {initialOption, useChannel} from './state'\r\nimport type {ChannelState} from './types'\r\n\r\n\r\nconst contextName = 'ChannelStateContext'\r\nconst initialState: ChannelState = {\r\n    getSelectedChannel: () => initialOption,\r\n    getSelectedPhone: () => undefined,\r\n    isTouched: () => false,\r\n    channelOptions: [initialOption],\r\n    setIsTouched: throwNoProviderError(contextName),\r\n    setSelectedChannel: throwNoProviderError(contextName),\r\n}\r\n\r\nconst ChannelStateContext = React.createContext<ChannelState>(initialState)\r\nChannelStateContext.displayName = contextName\r\n\r\nexport const ChannelStateProvider: FCWithChildren<ReactElement | ReactFragment> = props => {\r\n    const channelState: ChannelState = useChannel()\r\n\r\n    return (\r\n        <ChannelStateContext.Provider value={channelState}>\r\n            {props.children}\r\n        </ChannelStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChannelState = () => useContext(ChannelStateContext)\r\n","import {useCallback} from 'react'\r\n\r\nimport {useBrowserTabMetaInfo} from '@bpinc/ad-current-tab-data-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {useScreenPopStateMethods} from '@bpinc/ad-screen-pop-state-context'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\nimport {formatHTMLAsOneLineString} from '@bpinc/lib-html-utils'\r\n\r\n\r\nexport function useLinkOpener(itemId: string) {\r\n    const {addTabs} = useScreenPopStateMethods()\r\n    const browserTabInfo = useBrowserTabMetaInfo()\r\n    const appType = browserTabInfo?.app\r\n    const {saveOpenedSuggestionUrl} = useInteractionStateMethods()\r\n\r\n    return useCallback(function openLink(suggestion: VoiceTranscriptCommonMessage) {\r\n        if (!suggestion.suggestionURL) {\r\n            return\r\n        }\r\n\r\n\r\n        saveOpenedSuggestionUrl(itemId, suggestion.suggestionURL)\r\n\r\n        if (appType === 'ad' && suggestion.openURLIn === 'AGENT_DESKTOP') {\r\n            const tabId = suggestion.msgId ?? suggestion.suggestionURL\r\n\r\n            addTabs(itemId, [\r\n                {\r\n                    id: tabId,\r\n                    type: 'iframe',\r\n                    url: suggestion.suggestionURL,\r\n                    title: formatHTMLAsOneLineString(suggestion.text),\r\n                },\r\n            ])\r\n\r\n        } else {\r\n            try {\r\n                window.open(normalizeExternalURL(suggestion.suggestionURL), suggestion.openURLIn == 'NEW_TAB' ? '_blank' : undefined, 'noopener,noreferrer')\r\n            } catch (e) {\r\n                const errorText = e instanceof Error ? e.message : 'unknown error'\r\n                console.error(`error opening window for url ${suggestion.suggestionURL}: ${errorText}`)\r\n            }\r\n        }\r\n    }, [appType, itemId, addTabs, saveOpenedSuggestionUrl])\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {OpenedBotSuggestionsUrls, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useLinkOpener} from '../components/external/VoiceTranscript/hooks/useLinkOpener'\r\n\r\n\r\nexport function useBotSuggestionsLinksAutoOpener(\r\n    itemId: string,\r\n    suggestions: VoiceTranscriptSuggestion[] | undefined,\r\n    enabled: boolean,\r\n) {\r\n    const alreadyOpened = useInteractionProp(itemId, s => s?.openedBotSuggestionsUrls)\r\n\r\n    const getSuggestionsToOpen = useCallback(\r\n        function getSuggestionsToOpenCallback(\r\n            opened: OpenedBotSuggestionsUrls | undefined,\r\n        ) {\r\n            return suggestions?.filter(\r\n                message =>\r\n                    isLinkSuggestion(message) &&\r\n                    message.autoOpenURL &&\r\n                    !opened?.[message.suggestionURL],\r\n            )\r\n        },\r\n        [suggestions],\r\n    )\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    useEffect(() => {\r\n        openSuggestions()\r\n        function openSuggestions() {\r\n            if (!enabled) return\r\n\r\n            const suggestionsToOpen = getSuggestionsToOpen(alreadyOpened)\r\n\r\n            suggestionsToOpen?.forEach(openLink)\r\n        }\r\n    }, [alreadyOpened, enabled, getSuggestionsToOpen, openLink])\r\n}\r\n","import type {ChatMessage, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {voiceTranscriptMessageTypes} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatMessageDate,\r\n    ExternalChatMessage,\r\n    ExternalChatMessageWithDate,\r\n    HistoryCallMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n    HistoryOutboundMessagingCampaignMessage,\r\n    HistoryRemoteAssistMessage,\r\n    HistoryVoiceTranscriptMessage,\r\n} from './types'\r\n\r\n\r\nexport function isChatMessageDate(message: ExternalChatMessageWithDate): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isHistoryMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryMessage {\r\n    return !!message && !isChatMessageDate(message) && 'globalInteractionId' in message\r\n}\r\n\r\nexport function isActivityMessageGroup(message: ExternalChatMessageWithDate | undefined): message is ActivityMessageGroup {\r\n    return !!message && !isChatMessageDate(message) && 'serviceId' in message && message.displayType === 'activityGroup'\r\n}\r\n\r\nexport function isChatMessage(message: ExternalChatMessageWithDate | undefined): message is ChatMessage {\r\n    return !!message && !isActivityMessageGroup(message) && !isHistoryMessage(message)\r\n}\r\n\r\nexport function isVoiceTranscriptMessage(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptCommonMessage {\r\n    return typeof message === 'object' && 'type' in message && voiceTranscriptMessageTypes.includes(message.type as VoiceTranscriptMessageType)\r\n}\r\n\r\nexport function isExternalChatMessage(\r\n    message: ChatCommonMessagesType,\r\n): message is ExternalChatMessage {\r\n    return typeof message === 'object' && !isVoiceTranscriptMessage(message)\r\n}\r\n\r\nexport function isExternalChatMessageDate(message: ChatCommonMessagesType | undefined): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isVoiceTranscriptSuggestion(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptSuggestion {\r\n    return isVoiceTranscriptMessage(message) && message.type === 'suggestion'\r\n}\r\n\r\nexport function isCallOrVoiceTranscript(message: ExternalChatMessageWithDate | ChatMessageDate | VoiceTranscriptSuggestion): boolean {\r\n    return !isVoiceTranscriptSuggestion(message) && (\r\n        typeof message === 'string' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE_TRANSCRIPT'\r\n    )\r\n}\r\n\r\nexport function isHistoryCallMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'VOICE'\r\n}\r\n\r\nexport function isHistoryEmailMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'EMAIL'\r\n}\r\n\r\nexport function isHistoryVoiceTranscriptMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryVoiceTranscriptMessage {\r\n    return isHistoryMessage(message) && message.mediaType === 'VOICE_TRANSCRIPT'\r\n}\r\n\r\nexport function isHistoryRemoteAssistMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryRemoteAssistMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'REMOTE_ASSIST'\r\n}\r\n\r\nexport function isHistoryOutboundMessagingCampaignMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryOutboundMessagingCampaignMessage {\r\n    return isHistoryMessage(message) && (message as HistoryOutboundMessagingCampaignMessage).serviceType == 'OUTBOUND_MESSAGING'\r\n}\r\n\r\nexport function isHistoryFileMessageMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryFileMessage {\r\n    return isHistoryMessage(message) && (message as HistoryFileMessage).displayType === 'file'\r\n}\r\n\r\n","import type {FileError, FileRejection} from 'react-dropzone'\r\nimport {ErrorCode} from 'react-dropzone'\r\n\r\nimport type {ActivitiesListItemType, PartyUserShortType} from '@bpinc/ad-activities-state-types'\r\nimport {CHAT_PROHIBITED_EXTENSIONS} from '@bpinc/ad-constants'\r\nimport type {ChatMessage, MessageDisplayType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {addTime, formatDate, getFileNameAndExtension} from '@bpinc/lib-helpers'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatScrollNodeType,\r\n    ExternalChatMessageFileData,\r\n    ExternalChatMessageWithDate,\r\n    HistoryChatMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n} from '../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessage,\r\n    isHistoryCallMessage,\r\n    isHistoryFileMessageMessage,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../types'\r\n\r\n\r\nexport function isScrollAtBottom(\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    return ((scrollNode?.scrollTop || 0) + (scrollNode?.clientHeight || 0)) >= (scrollNode?.scrollHeight || 0)\r\n}\r\n\r\n\r\nexport function getMessageId(message: ChatCommonMessagesType): string {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        if (message.chatMessageData?.displayType === 'error') {\r\n            return `${message.timestamp}-error`\r\n        }\r\n\r\n        if (message.chatMessageData) {\r\n            return getExternalChatMessageId(message.chatMessageData)\r\n        }\r\n\r\n        return getVoiceTranscriptMessageId(message)\r\n    }\r\n\r\n    if (isExternalChatMessage(message)) {\r\n\r\n        if (isActivityMessageGroup(message)) {\r\n            return getActivitiyMessageGroupMessageId(message)\r\n        }\r\n\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        if (displayType === 'scenario') {\r\n            return getScenarioMessageId(message)\r\n        }\r\n\r\n        if (isHistoryMessage(message)) {\r\n            return geHistoryMessageId(message)\r\n        }\r\n\r\n\r\n        return getExternalChatMessageId(message)\r\n\r\n    }\r\n\r\n    return message\r\n\r\n    function getActivitiyMessageGroupMessageId(msg: ActivityMessageGroup) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${msg.partyId}-${\r\n            msg.notes ? 'notes' : 'disposition'\r\n        }`\r\n    }\r\n    function getScenarioMessageId(msg: ChatMessage | HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msg}-scenario`\r\n    }\r\n    function getVoiceTranscriptMessageId(msg: VoiceTranscriptCommonMessage) {\r\n        return `${msg.partyId}-${msg.msgId}-${msg.timestamp}`\r\n    }\r\n\r\n    function getExternalChatMessageId(msg: ChatMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.source\r\n        }`\r\n    }\r\n\r\n    function geHistoryMessageId(msg: HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.direction\r\n        }`\r\n    }\r\n}\r\n\r\n\r\nexport function findFirstVisibleItemWithOffset(\r\n    scrollNode: ChatScrollNodeType,\r\n    startIndex: number,\r\n    messages: ChatCommonMessagesType[],\r\n): {id: string; offset: number} {\r\n    const item = scrollNode?.querySelector<HTMLDivElement>(`[data-index='${startIndex}']`)\r\n    if (!item) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    const offset = (scrollNode?.scrollTop || 0) - item.offsetTop\r\n    if (offset > 0) {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const message = messages[startIndex]\r\n    if (!message) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    if (typeof message === 'string') {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const id = getMessageId(messages[startIndex] || '')\r\n    return {id, offset}\r\n}\r\n\r\n//TODO: Discuss error messages with the management\r\nexport function getFileErrors(t: MessagesDeclaration, file: File) {\r\n    if (!file.name) {\r\n        return null\r\n    }\r\n\r\n    const {extension, name} = getFileNameAndExtension(file.name)\r\n    const isBadExtension = CHAT_PROHIBITED_EXTENSIONS.includes(`.${extension}`)\r\n\r\n    const errors: FileError[] = []\r\n\r\n    if (isBadExtension) {\r\n        errors.push({code: ErrorCode.FileInvalidType, message: t.EXTERNAL_CHAT.invalid_file_extension_error(name)})\r\n    }\r\n\r\n    if (!errors.length) {\r\n        return null\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\nexport function getFileRejection(t: MessagesDeclaration, file: File): FileRejection | null {\r\n    const errors = getFileErrors(t, file)\r\n\r\n    if (!errors) {\r\n        return null\r\n    }\r\n\r\n    return {\r\n        file,\r\n        errors,\r\n    }\r\n}\r\n\r\nexport function activityToChatMessage(selfUserId: string | undefined) {\r\n    return function activityToChatMessageInner(\r\n        activity: ActivitiesListItemType,\r\n    ): ActivityMessageGroup[] {\r\n        return activity.parties.reduce<ActivityMessageGroup[]>(\r\n            (activityMessages, party) => {\r\n                if (party.partyType === 'USER' && (party.disposition || party.notes)) {\r\n                    const userParty = party as PartyUserShortType\r\n                    activityMessages.push(\r\n                        partyUserShortTypeToActivityMessageGroup(\r\n                            userParty,\r\n                            activity,\r\n                            selfUserId,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                return activityMessages\r\n            },\r\n            [],\r\n        )\r\n    }\r\n}\r\n\r\nfunction partyUserShortTypeToActivityMessageGroup(\r\n    party: PartyUserShortType,\r\n    activity: ActivitiesListItemType,\r\n    selfUserId: string | undefined,\r\n): ActivityMessageGroup {\r\n    const id = activity.Id.oid\r\n    const createdTime = party.startTime?.date || activity.createdTime.date\r\n    const mediaType = activity.mediaType\r\n    const serviceId = party.serviceId\r\n    const service = serviceId ? activity.services?.find(s => s.serviceId === serviceId) : undefined\r\n    return {\r\n        mediaType,\r\n        msgId: id,\r\n        displayType: 'activityGroup' as const,\r\n        notes: party.notes,\r\n        disposition: party.disposition,\r\n        timestamp: createdTime ? addTime(createdTime, 'seconds', party.duration ?? 0).getTime() : 0,\r\n        serviceId: service?.serviceId ?? party.serviceId,\r\n        serviceName: service?.serviceName ?? '',\r\n        firstName: party.firstName,\r\n        lastName: party.lastName,\r\n        userId: party.userId,\r\n        isSelf: party.userId === selfUserId,\r\n        partyId: party.partyId,\r\n    }\r\n}\r\n\r\nexport function getDispositionTitle(\r\n    {firstName, lastName, timestamp, mediaType}: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    const fullName = formatFullName(firstName, lastName)\r\n    const date = formatDate(timestamp, 'll')\r\n    const time = formatDate(timestamp, 'h:mm A')\r\n\r\n    return mediaType === 'CHAT'\r\n        ? t.EXTERNAL_CHAT.disposition_message_title(fullName, date, time)\r\n        : t.VOICE_CALL.disposition_message_title(fullName, date, time)\r\n}\r\n\r\nexport function getDispositionText(\r\n    message: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    return `${getDispositionTitle(message, t, formatFullName)}\\n\\n` +\r\n    `${message.disposition}\\n\\n` +\r\n    `${t.EXTERNAL_CHAT.disposition_message_service_name()} ${message.serviceName}`\r\n}\r\n\r\nexport function getHistoryOrChatMessageText(\r\n    message: HistoryMessage | ChatMessage,\r\n    t: MessagesDeclaration,\r\n) {\r\n    const fileData = getExternalChatFileData(message)\r\n    if (fileData) {\r\n        return fileData.fileName\r\n    }\r\n\r\n    if (isChatMessage(message)) {\r\n        if (message.page) {\r\n            return message.title || t.EXTERNAL_CHAT.external_chat_customer_navigates_to()\r\n        }\r\n        return getHtmlMessageText(message.msg || '')\r\n    }\r\n\r\n    if (isHistoryCallMessage(message)) {\r\n        const title = message.isMissedCall\r\n            ? t.ACTIVITY_HISTORY.call_message_missed()\r\n            : message.direction === 'incoming'\r\n                ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n                : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n\r\n        return `${title}\\n\\n` +\r\n          `${formatDate(message.timestamp, 'LT')}, ${message.duration}\\n\\n`\r\n    }\r\n\r\n\r\n    if ('msg' in message && typeof message.msg === 'string') {\r\n        return getHtmlMessageText(message.msg)\r\n    }\r\n}\r\n\r\nexport function getHtmlMessageText(htmlContent: string) {\r\n    const messageTextElem = document.createElement('div')\r\n    messageTextElem.innerHTML = htmlContent\r\n    messageTextElem.style.opacity = '0'\r\n    messageTextElem.style.position = 'absolute'\r\n    messageTextElem.style.display = 'hidden'\r\n    messageTextElem.style.zIndex = '-1000'\r\n\r\n    document.body.append(messageTextElem)\r\n    const elementText = messageTextElem.innerText\r\n    messageTextElem.remove()\r\n\r\n    return elementText\r\n}\r\n\r\nexport function getExternalChatMessageDisplayType(message: ExternalChatMessageWithDate | undefined): MessageDisplayType | undefined {\r\n    if (isChatMessage(message)) {\r\n        return message.displayType\r\n    }\r\n    if (isHistoryMessage(message)) {\r\n        return (message as HistoryFileMessage | HistoryChatMessage).displayType\r\n    }\r\n    if (isActivityMessageGroup(message)) {\r\n        return message.displayType\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport function getExternalChatMessageDisplayName(\r\n    message: ExternalChatMessageWithDate,\r\n    formatFullName: (first: string | undefined, last: string | undefined) => string,\r\n) {\r\n    const users = isHistoryCallMessage(message) ? message.users : undefined\r\n    if (users?.length) {\r\n        return users.map(user => formatFullName(user.firstName, user.lastName)).join(', ')\r\n    }\r\n\r\n    const displayName = isChatMessage(message) ? message.displayName : undefined\r\n    if (displayName) {\r\n        return displayName\r\n    }\r\n\r\n    const {firstName, lastName} = isHistoryMessage(message) ? message : {firstName: undefined, lastName: undefined}\r\n    if (firstName || lastName) {\r\n        return formatFullName(firstName, lastName)\r\n    }\r\n}\r\n\r\nexport function isSystemExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'system'\r\n}\r\n\r\nexport function isInviteExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'invite'\r\n}\r\n\r\nexport function isErrorExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'error'\r\n}\r\n\r\nexport function isLocationExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'location'\r\n}\r\n\r\nexport function getExternalChatFileData(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): ExternalChatMessageFileData | undefined {\r\n    if (isChatMessage(message) && message.displayType === 'file') {\r\n        return {\r\n            fileId: message.fileId,\r\n            fileError: message.fileError,\r\n            fileIsMasked: message.fileIsMasked,\r\n            fileProgress: message.fileProgress,\r\n            fileName: message.fileName,\r\n            fileType: message.fileType,\r\n            refMsgId: undefined,\r\n        }\r\n    }\r\n    if (isHistoryFileMessageMessage(message)) {\r\n        return {\r\n            fileId: message.fileId,\r\n            refMsgId: message.refMsgId,\r\n            fileType: message.fileType,\r\n            fileName: message.fileName,\r\n            fileError: undefined,\r\n            fileIsMasked: undefined,\r\n            fileProgress: undefined,\r\n        }\r\n    }\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport {noop} from 'lodash-es'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport {useEvent, useEventListener, useValueUpdated} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\ntype ChatMessagesContextType = {\r\n    hasSelection: boolean\r\n    setHasSelection: StateSetter<boolean>\r\n    messages: ChatCommonMessagesType[]\r\n    selectedMessages: ChatCommonMessagesType[]\r\n    getClipboardBuffer: () => string\r\n    setClipboardBuffer: StateSetter<string>\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nconst ChatMessagesContext = createContext<ChatMessagesContextType>({\r\n    hasSelection: false,\r\n    setHasSelection: noop,\r\n    messages: [],\r\n    selectedMessages: [],\r\n    getClipboardBuffer: () => '',\r\n    setClipboardBuffer: noop,\r\n    scrollContainer: null,\r\n})\r\nChatMessagesContext.displayName = 'ChatMessagesContextProvider'\r\n\r\ninterface ChatMessagesContextProviderProps {\r\n    messages: ChatCommonMessagesType[]\r\n    children: ReactElement\r\n    interactionId: string\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\n\r\nexport const ChatMessagesContextProvider: React.FC<ChatMessagesContextProviderProps> = ({children, messages, interactionId, scrollContainer}) => {\r\n    const [hasSelection, setHasSelection] = useState(false)\r\n    const [clipboardBuffer, setClipboardBuffer] = useState('')\r\n    const [selectedMessages, setSelectedMessages] = useState<ChatCommonMessagesType[]>([])\r\n    const firstSelectedMessageRef = useRef<string>()\r\n    const getClipboardBuffer = useEvent(() => clipboardBuffer)\r\n    const interactionChanged = useValueUpdated(interactionId)\r\n\r\n    useEffect(() => {\r\n        if (!interactionChanged) {\r\n            return\r\n        }\r\n\r\n        setHasSelection(false)\r\n        setClipboardBuffer('')\r\n        setSelectedMessages([])\r\n    }, [interactionChanged])\r\n\r\n    useEventListener('mouseup', e => {\r\n        if (!firstSelectedMessageRef.current || !(e instanceof MouseEvent)) {\r\n            return\r\n        }\r\n\r\n        const lastSelectedMessageId = getNearestMessageId(e.target)\r\n        if (!lastSelectedMessageId) {\r\n            return\r\n        }\r\n\r\n        const firstSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === firstSelectedMessageRef.current)\r\n        const lastSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === lastSelectedMessageId)\r\n        const indexes = [firstSelectedMessageIndex, lastSelectedMessageIndex].sort((a, b) => a - b)\r\n\r\n        const selected = messages.slice(indexes[0], indexes[1] + 1)\r\n        const selection = window.getSelection()\r\n        const range = (selection?.rangeCount ?? 0) > 0 ? selection?.getRangeAt(0) : undefined\r\n\r\n        // If selected more than one message extend selection to include whole messages\r\n        if (selected.length > 1 && selection && range) {\r\n            const forwardSelection = firstSelectedMessageIndex < lastSelectedMessageIndex\r\n            const firstElement = document.querySelector(`[data-message-id-selection='${firstSelectedMessageRef.current}']`)\r\n            const lastElement = document.querySelector(`[data-message-id-selection='${lastSelectedMessageId}']`)\r\n            const startElement = forwardSelection ? firstElement : lastElement\r\n            const endElement = forwardSelection ? lastElement : firstElement\r\n            range.setStartBefore(startElement || range.startContainer)\r\n            range.setEndAfter(endElement || range.endContainer)\r\n            if (forwardSelection) {\r\n                selection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset)\r\n            } else {\r\n                selection.setBaseAndExtent(range.endContainer, range.endOffset, range.startContainer, range.startOffset)\r\n            }\r\n        }\r\n        setSelectedMessages(selected)\r\n    })\r\n\r\n    const mouseDownHandler = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        firstSelectedMessageRef.current = getNearestMessageId(e.target)\r\n    }, [])\r\n\r\n    const value = useMemo<ChatMessagesContextType>(\r\n        () => ({\r\n            hasSelection,\r\n            setHasSelection,\r\n            messages,\r\n            selectedMessages,\r\n            setClipboardBuffer,\r\n            getClipboardBuffer,\r\n            scrollContainer,\r\n        }),\r\n        [getClipboardBuffer, hasSelection, messages, scrollContainer, selectedMessages],\r\n    )\r\n\r\n    return (\r\n        <ChatMessagesContext.Provider value={value}>\r\n            <div onMouseDown={mouseDownHandler}>\r\n                {children}\r\n            </div>\r\n        </ChatMessagesContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChatHasSelection = () => useContextSelector(ChatMessagesContext, data => data.hasSelection)\r\nexport const useChatSetHasSelection = () => useContextSelector(ChatMessagesContext, data => data.setHasSelection)\r\nexport const useChatMessages = () => useContextSelector(ChatMessagesContext, data => data.messages)\r\nexport const useChatSelectedMessages = () => useContextSelector(ChatMessagesContext, data => data.selectedMessages)\r\nexport const useChatGetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.getClipboardBuffer)\r\nexport const useChatSetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.setClipboardBuffer)\r\nexport const useChatScrollContainer = () => useContextSelector(ChatMessagesContext, data => data.scrollContainer)\r\n\r\n\r\nfunction getNearestMessageId(target: EventTarget | null) {\r\n    let element: Element | undefined = undefined\r\n    if (target instanceof HTMLElement) {\r\n        element = target.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    } else if (target instanceof Node) {\r\n        element = target.parentElement?.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    }\r\n\r\n    return element?.getAttribute('data-message-id-selection') || undefined\r\n}\r\n","import type {FC, HTMLAttributes} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface MessageActionProps extends HTMLAttributes<HTMLButtonElement> {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const MessageAction: FC<MessageActionProps> = ({\r\n    className,\r\n    children,\r\n    ...buttonProps\r\n}) => {\r\n    return (\r\n        <button\r\n            {...buttonProps}\r\n            className={tcn(\r\n                'flex items-center gap-1 rounded border px-2 py-0.5 shadow-4 state-layer-bg-neutral-0 svg-color-current border-default',\r\n                'transition-colors',\r\n                'hover:state-layer-mix-dark-on-white-1',\r\n                'focus:state-layer-mix-dark-on-white-2',\r\n                'active:state-layer-mix-dark-on-white-3',\r\n                className,\r\n            )}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserDetailsState} from '@bpinc/ad-user-details-state-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    getDispositionText,\r\n    getExternalChatMessageDisplayName,\r\n    getHistoryOrChatMessageText,\r\n    getHtmlMessageText,\r\n} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessageDate,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../../../types'\r\n\r\n\r\nexport function useGetFormattedClipboardMessage() {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const contacts = useContactsState('contacts')\r\n    const users = useUserDetailsState('userDetails')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const interaction = useInteraction(interactionId)\r\n    const sessionUser = useSessionState(['firstName', 'lastName'])\r\n\r\n\r\n    return useCallback(\r\n        function getFormatClipboardMessage(\r\n            message: ChatCommonMessagesType,\r\n        ) {\r\n            const messageData = getMessageData()\r\n\r\n            if (!messageData) {\r\n                return ''\r\n            }\r\n\r\n            return `[${messageData.date}] ${messageData.name}\\n\\n${messageData.text}\\n\\n`\r\n\r\n\r\n            function getMessageData() {\r\n                if (isExternalChatMessageDate(message)) {\r\n                    return\r\n                }\r\n\r\n                if (isVoiceTranscriptMessage(message)) {\r\n                    const {endTime, partyId, text: messageText} = message\r\n                    const callParty = interaction?.parties?.find(party => party.id === partyId)\r\n                    const chartParty = interaction?.chatParties?.find(party => party.party_id === partyId)\r\n\r\n                    const name = callParty\r\n                        ? formatFullName(callParty.firstName, callParty.lastName)\r\n                        : chartParty\r\n                            ? formatFullName(chartParty.first_name, chartParty.last_name)\r\n                            : formatFullName(sessionUser.firstName, sessionUser.lastName)\r\n\r\n                    const text = getHtmlMessageText(messageText)\r\n\r\n                    return {\r\n                        date: formatDate(endTime, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isActivityMessageGroup(message)) {\r\n                    const {timestamp, lastName, firstName, notes} = message\r\n                    const text = notes || getDispositionText(message, t, formatFullName)\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name: formatFullName(firstName, lastName),\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isHistoryMessage(message) || isChatMessage(message)) {\r\n                    const {timestamp, contactId, userId} = message\r\n                    const displayName = getExternalChatMessageDisplayName(message, formatFullName)\r\n                    const contactData = contactId ? contacts[contactId]?.data : userId ? users[userId]?.data : undefined\r\n                    const userOrContactName = contactData\r\n                        ? formatFullName(contactData.firstName, contactData.lastName)\r\n                        : ''\r\n                    const name = displayName || userOrContactName\r\n\r\n                    const text = getHistoryOrChatMessageText(message, t)\r\n\r\n                    if (!text) {\r\n                        return\r\n                    }\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                return null\r\n            }\r\n        }, [contacts, formatFullName, interaction?.chatParties, interaction?.parties, sessionUser.firstName, sessionUser.lastName, t, users])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {maskActivityHistoryMessages} from '@bpinc/ad-contacts-state-methods'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {\r\n    useInteractionChatDataSelector,\r\n    useInteractionChatStateMethods,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MaskedTextChunks} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {getContactId, getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {SelectionData, Toggle} from '@bpinc/lib-helpers'\r\nimport {getErrorMessage, Mask, stringToHTMLFragment} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy, IconKnowledgeBase, IconMask} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getExternalChatMessageDisplayType} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {isChatMessage, isExternalChatMessageDate, isHistoryMessage, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatMessages,\r\n    useChatSelectedMessages,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface GetSelectionPopupContentParams {\r\n    selectedText: string\r\n    toggleShow: Toggle\r\n    selectionData: SelectionData | undefined\r\n}\r\n\r\nexport function useSelectionActions(item: Item, withMask = false) {\r\n    const {t} = useLocalizationState()\r\n    const messages = useChatMessages()\r\n    const selectedMessages = useChatSelectedMessages()\r\n    const {serverOrigin, loginId, sessionId, privileges} = useSessionState()\r\n    const {updateActivityHistoryMessageText} = useContactsStateMethods()\r\n    const getFormatClipboardMessage = useGetFormattedClipboardMessage()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n\r\n    const masked = useInteractionChatDataSelector(\r\n        getInteractionStepId(item),\r\n        s => s?.masked,\r\n    )\r\n\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n\r\n    const isCommunicator = useIsCommunicator()\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    return function getSelectionPopupContent({\r\n        toggleShow,\r\n        selectedText,\r\n        selectionData,\r\n    }: GetSelectionPopupContentParams) {\r\n        const {range} = selectionData ?? {}\r\n        const uniqueMessageId = getRangeMessageId(range)\r\n\r\n        const selectedMessage = messages.find(\r\n            message =>\r\n                uniqueMessageId &&\r\n                equalUniqueMessageId(\r\n                    uniqueMessageId,\r\n                    composedMessageUniqueId(message),\r\n                ),\r\n        )\r\n\r\n        function canMask() {\r\n            if (\r\n                !withMask ||\r\n                isExternalChatMessageDate(selectedMessage) ||\r\n                !privileges.CAN_MASK_INTERACTION_CONTENT\r\n            ) {\r\n                return false\r\n            }\r\n\r\n            if (!isVoiceTranscriptMessage(selectedMessage)) {\r\n                const displayType =\r\n                    getExternalChatMessageDisplayType(selectedMessage)\r\n\r\n                return displayType === 'message'\r\n            }\r\n\r\n            return false\r\n        }\r\n        function handleMaskClick() {\r\n            if (\r\n                isVoiceTranscriptMessage(selectedMessage) ||\r\n                isExternalChatMessageDate(selectedMessage)\r\n            ) {\r\n                return\r\n            }\r\n\r\n            if (isHistoryMessage(selectedMessage)) {\r\n                //Activity history message (both in active chat session and AH)\r\n                const maskedMessageBeforeMasking = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskSelectedHistory(range)\r\n\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskActivityHistoryMessages({\r\n                    loginId,\r\n                    sessionId,\r\n                    serverOrigin,\r\n                    globalInteractionId: selectedMessage.globalInteractionId,\r\n                    messages: [\r\n                        {\r\n                            messageId: selectedMessage.msgId,\r\n                            maskedText,\r\n                        },\r\n                    ],\r\n                })\r\n                    .then(() => {\r\n                        const contactId = getContactId(item)\r\n\r\n                        if (contactId) {\r\n                            updateActivityHistoryMessageText({\r\n                                contactId,\r\n                                messageId: selectedMessage.msgId,\r\n                                messageText: maskedText,\r\n                            })\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        //TODO: Ask for real error message text\r\n                        showNotification({\r\n                            type: 'error',\r\n                            id: Notifications.ChatMessageMaskError,\r\n                            tags: ['current-view'],\r\n                            message:\r\n                                t.EXTERNAL_CHAT.masking_failed_error_message(),\r\n                            duration: 5000,\r\n                        })\r\n                        bpLogger.error(getErrorMessage(err))\r\n\r\n                        const selectedMessageNode = getMessageTextElement(\r\n                            composedMessageUniqueId(selectedMessage),\r\n                        )\r\n                        if (selectedMessageNode) {\r\n                            selectedMessageNode.innerHTML =\r\n                                maskedMessageBeforeMasking\r\n                        }\r\n                    })\r\n\r\n                //Active chat session, current chat message\r\n            } else if (\r\n                isChatMessage(selectedMessage) &&\r\n                selectedMessage.msgId\r\n            ) {\r\n                const textChunks =\r\n                    masked?.messages?.[selectedMessage.msgId]?.textChunks\r\n                const updatedTextChunks = maskSelectedText(range, textChunks)\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskMessage({\r\n                    itemId: getInteractionStepId(item),\r\n                    messageId: selectedMessage.msgId,\r\n                    maskedText,\r\n                    textChunks: updatedTextChunks,\r\n                })\r\n            }\r\n\r\n            toggleShow(false)\r\n        }\r\n        async function handleSearchKnowledgeBaseClick() {\r\n            toggleShow(false)\r\n\r\n            if (isCommunicator) {\r\n                openInteractionSlidingModal(item.id, 'knowledgeBase')\r\n            } else {\r\n                setKBFloatingState(s => (s === 'closed' ? 'floating' : s))\r\n            }\r\n            setupInteractionKB(selectedText)\r\n        }\r\n        function handleCopyClick() {\r\n            toggleShow(false)\r\n\r\n            let textToCopy = ''\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //If several messages selected, copy all of them\r\n            if (selectedMessages.length > 1) {\r\n                textToCopy = selectedMessages.reduce<string>((res, message) => {\r\n                    return res + getFormatClipboardMessage(message)\r\n                }, '')\r\n                textToAddToCopyBuffer = textToCopy\r\n            //Otherwise copy only selected message, but add formatted message to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToCopy = selectedText\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            console.info('📋 Clipboard text\\n', textToCopy)\r\n            setClipboardBuffer(textToAddToCopyBuffer)\r\n            navigator.clipboard.writeText(textToCopy)\r\n        }\r\n\r\n        function handleAddToCopy() {\r\n            toggleShow(false)\r\n\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //More than one message selected, add all of them to \"Add to copy\" buffer\r\n            if (selectedMessages.length > 1) {\r\n                textToAddToCopyBuffer = selectedMessages.reduce<string>(\r\n                    (res, message) => {\r\n                        return res + getFormatClipboardMessage(message)\r\n                    },\r\n                    '',\r\n                )\r\n            //Only one message selected, add it to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            const addToCopyBuffer = getClipboardBuffer()\r\n            const newClipboardData = addToCopyBuffer + textToAddToCopyBuffer\r\n            console.info('📋 Clipboard text\\n', newClipboardData)\r\n\r\n            navigator.clipboard.writeText(newClipboardData)\r\n            setClipboardBuffer(newClipboardData)\r\n        }\r\n\r\n        if (!selectedText) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {!isAfterCallWork(item) && (\r\n                    <MessageAction\r\n                        onClick={handleSearchKnowledgeBaseClick}\r\n                        data-testid=\"search-kb-button\"\r\n                    >\r\n                        <IconKnowledgeBase className=\"size-4\" />\r\n                        {t.GLOBAL.search()}\r\n                    </MessageAction>\r\n                )}\r\n                {canMask() && (\r\n                    <MessageAction\r\n                        onClick={handleMaskClick}\r\n                        data-testid=\"mask-content-button\"\r\n                    >\r\n                        <IconMask />\r\n                        {t.EXTERNAL_CHAT.mask()}\r\n                    </MessageAction>\r\n                )}\r\n                <MessageAction onClick={handleCopyClick} data-testid=\"copy\">\r\n                    <IconCopy />\r\n                    {t.GLOBAL.copy()}\r\n                </MessageAction>\r\n                {!!getClipboardBuffer().length && (\r\n                    <MessageAction\r\n                        onClick={handleAddToCopy}\r\n                        data-testid=\"add-to-copy\"\r\n                    >\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getRangeMessageId(\r\n    range: Range | undefined,\r\n): UniqueMessageId | undefined {\r\n    const commonElement = getCommonAncestorElement(range)\r\n    return getElementMessageId(commonElement)\r\n}\r\n\r\nexport function getElementMessageId(\r\n    element: Element | null | undefined,\r\n): UniqueMessageId | undefined {\r\n    const messageElement = element?.closest(uniqueMessageIdSelector())\r\n    const messageId = messageElement?.getAttribute('data-message-id')\r\n    let globalInteractionId =\r\n        messageElement?.getAttribute('data-global-interaction-id') ?? undefined\r\n    if (globalInteractionId === 'current') {\r\n        globalInteractionId = undefined\r\n    }\r\n    if (messageId) {\r\n        return {messageId, globalInteractionId}\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n\r\nfunction getCommonAncestorElement(range: Range | undefined) {\r\n    return range?.commonAncestorContainer.nodeType === Node.ELEMENT_NODE\r\n        ? (range?.commonAncestorContainer as Element)\r\n        : range?.commonAncestorContainer.parentElement\r\n}\r\n\r\nfunction maskSelectedHistory(range: Range | undefined) {\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    let fragment = range.extractContents()\r\n    const tempSpan = getFragmentWithinSpanNode(fragment)\r\n\r\n    Mask.obscureHTML(tempSpan)\r\n\r\n    fragment = document.createDocumentFragment()\r\n\r\n    Array.from(tempSpan.childNodes).forEach(node => {\r\n        fragment.appendChild(node)\r\n    })\r\n\r\n    range.insertNode(fragment)\r\n}\r\n\r\nfunction maskSelectedText(\r\n    range: Range | undefined,\r\n    maskedTextChunks: MaskedTextChunks = {},\r\n) {\r\n    const updatedMaskedTextChunks = {...maskedTextChunks}\r\n\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    extendUnmasked(range)\r\n\r\n    const fragment = range.extractContents()\r\n    const span = getFragmentWithinSpanNode(fragment)\r\n    const unmaskedSpan = revealUnmasked(span, updatedMaskedTextChunks)\r\n    const id = uuid()\r\n\r\n    unmaskedSpan.classList.add('bp-masked')\r\n    unmaskedSpan.id = id\r\n\r\n    const unmaskedText = unmaskedSpan.innerHTML\r\n\r\n    Mask.obscureHTML(unmaskedSpan)\r\n\r\n    updatedMaskedTextChunks[id] = {\r\n        originalText: unmaskedText,\r\n        maskedText: unmaskedSpan.innerHTML,\r\n    }\r\n\r\n    range.insertNode(unmaskedSpan)\r\n    return updatedMaskedTextChunks\r\n}\r\n\r\nfunction getFragmentWithinSpanNode(fragment: DocumentFragment) {\r\n    const span = document.createElement('span')\r\n\r\n    fragment.childNodes.forEach(node => {\r\n        const nodeCopy = node.cloneNode(true)\r\n        span.append(nodeCopy)\r\n    })\r\n\r\n    return span\r\n}\r\n\r\nfunction extendUnmasked(range: Range) {\r\n    const startElement = range.startContainer.parentElement\r\n\r\n    if (isMasked(startElement) || isAnchorTag(startElement)) {\r\n        range.setStartBefore(range.startContainer)\r\n        range.setStartBefore(range.startContainer)\r\n    }\r\n\r\n    const endElement = range.endContainer.parentElement\r\n\r\n    if (isMasked(endElement) || isAnchorTag(endElement)) {\r\n        range.setEndAfter(range.endContainer)\r\n        range.setEndAfter(range.endContainer)\r\n    }\r\n}\r\n\r\nfunction isMasked(element: HTMLElement | null | undefined) {\r\n    return element?.classList.contains('bp-masked')\r\n}\r\n\r\nfunction isAnchorTag(element: HTMLElement | null | undefined) {\r\n    return element?.nodeName === 'A'\r\n}\r\n\r\nfunction revealUnmasked(html: HTMLElement, maskedTextChunks: MaskedTextChunks) {\r\n    const htmlClone = html.cloneNode(true) as HTMLElement\r\n\r\n    revealUnmaskedInner(htmlClone)\r\n\r\n    return htmlClone\r\n\r\n    function revealUnmaskedInner(htmlInner: HTMLElement) {\r\n        if (htmlInner.classList.contains('bp-masked')) {\r\n            const textChunkId = htmlInner.id\r\n            const unmasked = stringToHTMLFragment(\r\n                maskedTextChunks[textChunkId].originalText,\r\n            )\r\n\r\n            delete maskedTextChunks[htmlInner.id]\r\n\r\n            htmlInner.replaceWith(unmasked)\r\n            return\r\n        }\r\n\r\n        Array.from(htmlInner.children).forEach(htmlElement => {\r\n            revealUnmaskedInner(htmlElement as HTMLElement)\r\n        })\r\n    }\r\n}\r\n\r\nexport interface UniqueMessageId {\r\n    globalInteractionId: string | undefined\r\n    messageId: string | undefined\r\n}\r\n\r\nexport function equalUniqueMessageId(\r\n    id1: UniqueMessageId,\r\n    id2: UniqueMessageId,\r\n) {\r\n    return (\r\n        id1.messageId === id2.messageId &&\r\n        id1.globalInteractionId === id2.globalInteractionId\r\n    )\r\n}\r\n\r\nexport function composedMessageUniqueId(\r\n    composedChatMessage: ChatCommonMessagesType,\r\n): UniqueMessageId {\r\n    return {\r\n        messageId: isExternalChatMessageDate(composedChatMessage)\r\n            ? composedChatMessage\r\n            : composedChatMessage.msgId,\r\n        globalInteractionId:\r\n            !isExternalChatMessageDate(composedChatMessage) &&\r\n            !isVoiceTranscriptMessage(composedChatMessage) &&\r\n            isHistoryMessage(composedChatMessage)\r\n                ? composedChatMessage.globalInteractionId\r\n                : undefined,\r\n    }\r\n}\r\n\r\nfunction getMaskedText(uniqueMessageId: UniqueMessageId) {\r\n    return getMessageTextElement(uniqueMessageId)?.innerHTML ?? ''\r\n}\r\n\r\nfunction getMessageTextElement(uniqueMessageId: UniqueMessageId) {\r\n    return uniqueMessageId.messageId\r\n        ? document.querySelector(uniqueMessageIdSelector(uniqueMessageId))\r\n            ?.children[0]\r\n        : undefined\r\n}\r\n\r\nfunction uniqueMessageIdSelector(uniqueMessageId?: UniqueMessageId): string {\r\n    if (uniqueMessageId) {\r\n        const {messageId, globalInteractionId} = uniqueMessageId\r\n        return `[data-message-id=\"${messageId}\"][data-global-interaction-id=\"${\r\n            globalInteractionId ?? 'current'\r\n        }\"]`\r\n    } else {\r\n        return `[data-message-id][data-global-interaction-id]`\r\n    }\r\n}\r\n","import type {CSSProperties, ReactNode} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useInteractionChatDataSelector, useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {stringToHTMLFragment, useBoolean} from '@bpinc/lib-helpers'\r\nimport {isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isChatMessage, isExternalChatMessageDate, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useChatMessages, useChatScrollContainer} from './ChatMessagesContext'\r\nimport type {UniqueMessageId} from './useSelectionActions'\r\nimport {composedMessageUniqueId, equalUniqueMessageId, getElementMessageId} from './useSelectionActions'\r\n\r\n\r\ninterface WithUnmaskActionProps {\r\n    interactionId: string\r\n    className?: string\r\n    children: ReactNode\r\n}\r\n\r\n\r\nexport const WithUnmaskAction: React.FC<WithUnmaskActionProps> = React.memo(({interactionId, children, className}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const messages = useChatMessages()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const unmaskPopupWrapperRef = useRef<HTMLDivElement>(null)\r\n    const [popupRect, setPopupRect] = useState<DOMRectReadOnly>()\r\n    const [unmaskChunkId, setUnmaskChunkId] = useState<string>()\r\n    const [unmaskMessageId, setUnmaskMessageId] = useState<UniqueMessageId>()\r\n\r\n    const maskedMessageNodeRef = useRef<HTMLElement | null>(null)\r\n\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const masked = useInteractionChatDataSelector(interactionStepId, s => s?.masked)\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    useEffect(() => {\r\n        const unmaskPopupWrapperNode = unmaskPopupWrapperRef.current\r\n        unmaskPopupWrapperNode?.addEventListener('click', togglePopup)\r\n\r\n        function togglePopup(e: MouseEvent) {\r\n            const maskedMessageNode = e.target\r\n            if (!maskedMessageNode || !isHTMLElement(maskedMessageNode)) {\r\n                return\r\n            }\r\n            maskedMessageNodeRef.current = maskedMessageNode\r\n\r\n            if (maskedMessageNode.classList.contains('bp-masked') && maskedMessageNode.id) {\r\n                setUnmaskChunkId(maskedMessageNode.id)\r\n                const unmaskElementMessageId = getElementMessageId(maskedMessageNode)\r\n\r\n                if (unmaskElementMessageId) {\r\n                    setUnmaskMessageId(unmaskElementMessageId)\r\n                }\r\n\r\n                setPopupRect(maskedMessageNode.getBoundingClientRect())\r\n\r\n                toggleShow()\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            unmaskPopupWrapperNode?.removeEventListener('click', togglePopup)\r\n        }\r\n    }, [toggleShow])\r\n\r\n    const handleUnmask = useCallback(\r\n        function handleUnmaskCallback() {\r\n            const messageToUnmask = messages.find(\r\n                msg =>\r\n                    unmaskMessageId &&\r\n                    !isVoiceTranscriptMessage(msg) &&\r\n                    equalUniqueMessageId(unmaskMessageId, composedMessageUniqueId(msg)),\r\n            )\r\n\r\n            if (!unmaskChunkId || !unmaskMessageId || isVoiceTranscriptMessage(messageToUnmask) || isExternalChatMessageDate(messageToUnmask)) {\r\n                return\r\n            }\r\n\r\n            if (isChatMessage(messageToUnmask)) {\r\n                const unmaskedTextChunk = unmaskMessageId?.messageId\r\n                    ? masked?.messages?.[unmaskMessageId.messageId]?.textChunks?.[unmaskChunkId]?.originalText\r\n                    : undefined\r\n\r\n                if (!unmaskedTextChunk) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                const unmaskedTextChunkHTML = stringToHTMLFragment(unmaskedTextChunk)\r\n\r\n                maskedMessageNodeRef.current?.replaceWith(unmaskedTextChunkHTML)\r\n\r\n                const maskedText =\r\n                    unmaskPopupWrapperRef.current?.querySelector(`[data-message-id=\"${messageToUnmask.msgId}\"]`)\r\n                        ?.children[0]?.innerHTML ?? ''\r\n\r\n                if (!maskedText) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                maskMessage({\r\n                    itemId: interactionStepId,\r\n                    messageId: unmaskMessageId.messageId!,\r\n                    maskedText,\r\n                })\r\n            }\r\n            toggleShow(false)\r\n        },\r\n        [interactionStepId, maskMessage, masked?.messages, messages, toggleShow, unmaskChunkId, unmaskMessageId],\r\n    )\r\n\r\n    const coordinates = useMemo<CSSProperties>(\r\n        function memoizePopupCoordinates() {\r\n            return {\r\n                position: 'fixed',\r\n                top: popupRect?.y ?? 0,\r\n                left: popupRect?.x ?? 0,\r\n            }\r\n        },\r\n        [popupRect],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div ref={unmaskPopupWrapperRef} className={className}>{children}</div>\r\n            <Popup\r\n                show={show}\r\n                data-testid=\"selection-popup\"\r\n                placement=\"top-start\"\r\n                contentClassName=\"border-none bg-transparent shadow-none p-0\"\r\n                data-visible={show}\r\n                onClickOutside={toggleShow}\r\n                style={coordinates}\r\n                mountNode={scrollContainer}\r\n                content={\r\n                    <MessageAction\r\n                        onClick={handleUnmask}\r\n                        data-testid=\"unmask-content-button\"\r\n                    >\r\n                        <IconUnmask />\r\n                        {t.EMAIL.button_unMaskSelectedText_text()}\r\n                    </MessageAction>\r\n                }\r\n            />\r\n        </>\r\n    )\r\n})\r\n","import type {ReactNode} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport type {SelectionData} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {WithSelectionPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChatScrollContainer, useChatSetHasSelection} from './ChatMessagesContext'\r\nimport {useSelectionActions} from './useSelectionActions'\r\nimport {WithUnmaskAction} from './WithUnmaskAction'\r\n\r\n\r\ntype WithActionsPopupProps = {\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithSelectionActions: React.FC<WithActionsPopupProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    interactionId,\r\n}) => {\r\n    const setHasSelection = useChatSetHasSelection()\r\n    const interaction = useInteraction(interactionId)\r\n    assertDefined(interaction)\r\n    const getPopupContent = useSelectionActions(interaction, withMaskAction)\r\n    const onSelectionChange = useCallback(\r\n        (selection?: SelectionData) => {\r\n            setHasSelection(!!selection?.range?.toString())\r\n        },\r\n        [setHasSelection],\r\n    )\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    return (\r\n        <WithSelectionPopup\r\n            getPopupContent={getPopupContent}\r\n            onSelectionChange={onSelectionChange}\r\n            mountNode={scrollContainer}\r\n            popupContentClassName=\"border-none bg-transparent shadow-none flex gap-1\"\r\n        >\r\n            {withMaskAction ? (\r\n                <WithUnmaskAction interactionId={interactionId}>\r\n                    {children}\r\n                </WithUnmaskAction>\r\n            ) : (\r\n                children\r\n            )}\r\n        </WithSelectionPopup>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesContextProvider} from './ChatMessagesContext'\r\nimport {WithSelectionActions} from './WithSelectionActions'\r\n\r\n\r\ntype ChatMessagesSelectionActionsProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nexport const ChatMessagesSelectionActions: React.FC<ChatMessagesSelectionActionsProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    messages,\r\n    interactionId,\r\n    scrollContainer,\r\n}) => {\r\n    return (\r\n        <ChatMessagesContextProvider messages={messages} interactionId={interactionId} scrollContainer={scrollContainer}>\r\n            <WithSelectionActions withMaskAction={withMaskAction} interactionId={interactionId}>\r\n                {children}\r\n            </WithSelectionActions>\r\n        </ChatMessagesContextProvider>\r\n    )\r\n}\r\n","import type {FC, ReactElement} from 'react'\r\n\r\nimport {useActiveChatChecker} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {IconMask, IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useFileMasker} from '../ExternalMessages/messages/FileMessage/useFileMasker'\r\n\r\n\r\ninterface WithAttachmentMaskActionProps {\r\n    fileIsMasked: boolean\r\n    canMask: boolean\r\n    globalInteractionId: string | undefined\r\n    interactionStepId: string\r\n    fileId: string\r\n    contactId: string\r\n    children: ReactElement\r\n}\r\n\r\nexport const WithAttachmentMaskAction: FC<WithAttachmentMaskActionProps> = ({\r\n    fileIsMasked,\r\n    canMask,\r\n    interactionStepId,\r\n    globalInteractionId,\r\n    fileId,\r\n    contactId,\r\n    children,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const isActiveChat = useActiveChatChecker(interactionStepId)\r\n\r\n    const maskFile = useFileMasker({\r\n        interactionStepId,\r\n        itemContactId: contactId,\r\n        globalInteractionId,\r\n        fileId,\r\n        isActiveChat,\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"group relative\"\r\n        >\r\n            {fileIsMasked && <IconMask className=\"absolute left-1/2 top-1/2 z-[1] size-6 -translate-x-1/2 -translate-y-1/2\" />}\r\n            {canMask && (\r\n                <MessageAction onClick={maskFile} className=\"absolute right-2 top-2 z-[1] opacity-0 transition-opacity group-hover:opacity-100\">\r\n                    {fileIsMasked ? <IconUnmask /> : <IconMask />}\r\n                    <p>\r\n                        {fileIsMasked\r\n                            ? t.EXTERNAL_CHAT.unmask()\r\n                            : t.EXTERNAL_CHAT.mask()}\r\n                    </p>\r\n                </MessageAction>\r\n            )}\r\n            <div\r\n                className={\r\n                    tcn(\r\n                        'border border-transparent',\r\n                        {\r\n                            'overflow-hidden rounded-xs border-[rgba(0,0,0,0.1)]': fileIsMasked,\r\n                        })\r\n                }\r\n            >\r\n                <div\r\n                    className={tcn({\r\n                        'pointer-events-none blur-[6px] state-layer-bg-white state-layer-mix-dark-on-white-1': fileIsMasked,\r\n                    })}\r\n                >\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {HTMLAttributes, ReactNode} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport * as Tooltip from '@radix-ui/react-tooltip'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatHasSelection,\r\n    useChatMessages,\r\n    useChatScrollContainer,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface WithHoverOverActionsProps extends HTMLAttributes<HTMLElement> {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithHoverOverActions: React.FC<WithHoverOverActionsProps> = ({children, messageId, ...triggerHtmlProps}) => {\r\n    const getFormattedClipboardMessage = useGetFormattedClipboardMessage()\r\n    const hasSelection = useChatHasSelection()\r\n    const messages = useChatMessages()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const scrollContainer = useChatScrollContainer()\r\n    const message = useMemo(() => messages.find(m => getMessageId(m) === messageId), [messageId, messages])\r\n    const t = useLocalizationState('t')\r\n    const open = useBoolean()\r\n\r\n    const handleCopyToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n\r\n        const result = getFormattedClipboardMessage(message)\r\n\r\n        console.info('📋 Clipboard text\\n', result)\r\n        navigator.clipboard.writeText(result)\r\n        setClipboardBuffer(result)\r\n        open.setFalse()\r\n    }, [getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n    const handleAddToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        const result = getFormattedClipboardMessage(message)\r\n        const stored = getClipboardBuffer()\r\n        const newClipboardData = stored + result\r\n        navigator.clipboard.writeText(newClipboardData)\r\n        setClipboardBuffer(newClipboardData)\r\n        console.info('📋 Clipboard text\\n', newClipboardData)\r\n        open.setFalse()\r\n    }, [getClipboardBuffer, getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n\r\n    return (\r\n        <Tooltip.Root open={hasSelection ? false : open.value} onOpenChange={open.toggle} >\r\n            <Tooltip.Trigger asChild>\r\n                <div {...triggerHtmlProps}>\r\n                    {children}\r\n                </div>\r\n            </Tooltip.Trigger>\r\n            <Tooltip.Portal container={scrollContainer}>\r\n                <Tooltip.Content collisionBoundary={scrollContainer} side=\"top\" align=\"end\" className=\"z-10 flex gap-1\" hideWhenDetached>\r\n                    <MessageAction onClick={handleCopyToClipboard}>\r\n                        <IconCopy />\r\n                        {t.GLOBAL.copy()}\r\n                    </MessageAction>\r\n                    <MessageAction onClick={handleAddToClipboard}>\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                </Tooltip.Content>\r\n            </Tooltip.Portal>\r\n        </Tooltip.Root>\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\n\r\nexport const predefinedMessagesSearchAtom = atom('')\r\nexport const predefinedSearchInsertPositionAtom = atom(-1)\r\nexport const chatPopupContentAtom = atom<'predefinedMessages' | 'emojiPicker' | undefined>(undefined)\r\nexport const attachmentButtonElementAtom = atom<HTMLButtonElement | null>(null)\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue} from 'jotai'\r\nimport {uniq} from 'lodash-es'\r\n\r\nimport {mimeTypeToExternalChatFileType} from '@bpinc/ad-formatting-helpers'\r\nimport {Attachment as AttachmentUI, InlineAlert, Modal} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {getFileRejection} from '../../../helpers'\r\nimport {attachmentButtonElementAtom} from './atoms'\r\n\r\n\r\ntype UploadErrorModalProps = CommonModalProps & {\r\n    rejection: Exclude<ReturnType<typeof getFileRejection>, null>[]\r\n    totalFilesAmount: number\r\n    onCloseCallback?: () => void\r\n}\r\n\r\nexport const UploadErrorModal: FC<UploadErrorModalProps> = ({\r\n    rejection,\r\n    onClose,\r\n    onCloseCallback,\r\n    totalFilesAmount,\r\n    ...props\r\n}) => {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const t = useLocalizationState('t')\r\n    const errorMessages = uniq(rejection.flatMap(r => r.errors.map(e => e.message)))\r\n\r\n    function handleClose() {\r\n        onClose()\r\n        onCloseCallback?.()\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} onClose={handleClose}>\r\n            <Modal.Header type=\"error\">\r\n                {t.CHAT_CENTER.upload_failed()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <InlineAlert variant=\"error\">\r\n                    <ul className=\"m-0 p-0\">\r\n                        {errorMessages.map((message, index) => (\r\n                            <li key={index}>{message}</li>\r\n                        ))}\r\n                    </ul>\r\n                </InlineAlert>\r\n                <p className=\"my-6\">\r\n                    {t.CHAT_CENTER.failed_to_upload(\r\n                        rejection.length,\r\n                        totalFilesAmount,\r\n                    )}\r\n                </p>\r\n                <div className=\"flex flex-col gap-2\">\r\n                    {rejection.map((err, index) =>\r\n                        mimeTypeToExternalChatFileType(err.file.type) ===\r\n                    'attachment' ? (\r\n                                <AttachmentUI.File\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ) : (\r\n                                <AttachmentUI.Image\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ),\r\n                    )}\r\n                </div>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => {\r\n                        attachmentButton?.click()\r\n                        handleClose()\r\n                    }}\r\n                >\r\n                    {t.CHAT_CENTER.select_files()}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={() => handleClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {noop} from 'lodash-es'\r\n\r\n\r\nexport const defaultState = {\r\n    isAttachmentsListReady: () => true,\r\n    getAttachmentsList: () => [],\r\n    addAttachment: noop,\r\n    removeAttachment: noop,\r\n    clearAttachmentsList: noop,\r\n    initializeAttachmentsList: noop,\r\n    fileRejections: [],\r\n    setFileRejections: noop,\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {ChatAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadChatFile} from '@bpinc/ad-upload-methods'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst ChatAttachmentsUIContext = createContext <AttachmentsState<ChatAttachment>>(\r\n    defaultState,\r\n)\r\nChatAttachmentsUIContext.displayName = 'ChatAttachmentsUIContext'\r\n\r\nfunction getFormData({file}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    return bodyFormData\r\n}\r\n\r\nexport const ChatAttachmentsUIStateProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const uploadChatFile = useUploadChatFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadChatFile, getFormData})\r\n\r\n    useOnItemRemoved(item => {\r\n        value.removeAttachmentsList(getInteractionStepId(item))\r\n    })\r\n\r\n    return (\r\n        <ChatAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </ChatAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useChatAttachmentsUIState} = createUIStateSelectorHook(ChatAttachmentsUIContext, 'chatAttachmentsUIState')\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadEmailFile} from '@bpinc/ad-upload-methods'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst EmailAttachmentsUIContext = createContext <AttachmentsState<EmailAttachment>>(\r\n    defaultState,\r\n)\r\nEmailAttachmentsUIContext.displayName = 'EmailAttachmentsUIContext'\r\n\r\ninterface EmailAttachmentsUIStateProviderProps {\r\n    children: ReactElement | ReactFragment\r\n}\r\n\r\nfunction getFormData({file, attachmentsGroupId}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    bodyFormData.append('email', attachmentsGroupId)\r\n\r\n    return bodyFormData\r\n}\r\n\r\nexport const EmailAttachmentsUIStateProvider: React.FC<EmailAttachmentsUIStateProviderProps> = ({children}) => {\r\n    const uploadEmailFile = useUploadEmailFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadEmailFile, getFormData})\r\n\r\n    //TODO: Clean state on email draft removed\r\n\r\n    return (\r\n        <EmailAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </EmailAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useEmailAttachmentsUIState} = createUIStateSelectorHook(EmailAttachmentsUIContext, 'emailAttachmentsUIState')\r\n","import {useCallback, useRef} from 'react'\r\n\r\nimport {useActivityHistoryByContactId} from '@bpinc/ad-contacts-state-context'\r\nimport {chatTypeToMedia} from '@bpinc/ad-formatting-helpers'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\n\r\nconst MAX_ERRORS_NUMBER_IN_A_ROW = 5\r\n\r\nexport function useMessagesLoader(\r\n    itemId: string,\r\n    contactId: string,\r\n    type: ChatType,\r\n) {\r\n    const fetchMore = useFetchMoreExternalMessages(itemId, contactId, type)\r\n    const hasActiveRequest = useRef(false)\r\n    const errorsCountRef = useRef(0)\r\n\r\n    return useCallback(() => {\r\n        const fetchData = () => {\r\n            if (\r\n                hasActiveRequest.current ||\r\n                errorsCountRef.current > MAX_ERRORS_NUMBER_IN_A_ROW\r\n            ) {\r\n                return Promise.resolve(false)\r\n            }\r\n            hasActiveRequest.current = true\r\n\r\n            return fetchMore()\r\n                .then(r => {\r\n                    errorsCountRef.current = 0\r\n                    hasActiveRequest.current = false\r\n                    return r\r\n                }).catch(err => {\r\n                    errorsCountRef.current += 1\r\n                    hasActiveRequest.current = false\r\n                    console.error(err || 'Error while trying load messages again until scroll')\r\n                    fetchData()\r\n                })\r\n        }\r\n\r\n        fetchData()\r\n    }, [fetchMore])\r\n}\r\n\r\nfunction useFetchMoreExternalMessages(itemId: string, contactId: string, type: ChatType) {\r\n    const contactActivityHistoryRef = useAsRef(useActivityHistoryByContactId(contactId))\r\n    const getMessagesRef = useAsRef(useContactActivityHistory().getMessages)\r\n\r\n    return useCallback(\r\n        function fetchMoreExternalMessages() {\r\n            const {isLoading, reachedLimitByMedia} = contactActivityHistoryRef.current || {}\r\n            if (isLoading || type === 'transcript' || reachedLimitByMedia?.[chatTypeToMedia[type]] || !contactId) {\r\n                return Promise.resolve(false)\r\n            }\r\n\r\n            return getMessagesRef.current({contactId, type})\r\n                .then(() => true)\r\n                .catch(err => console.error(err || 'Error while trying loadMessages when top is reached'))\r\n        },\r\n        [contactActivityHistoryRef, contactId, getMessagesRef, type],\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"noMessages\":\"voiceTranscript_NoMessages_noMessages_UX4AP\",\"noRecent\":\"voiceTranscript_NoMessages_noRecent_7ixir\",\"searchForOlder\":\"voiceTranscript_NoMessages_searchForOlder_QGkjJ\"};","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useExternalActivityHistoryLoaded} from './useExternalActivityHistoryLoaded'\r\n\r\nimport styles from './NoMessages.module.less'\r\n\r\n\r\ninterface NoMessagesProps {\r\n    type: ChatType\r\n    contactId: string\r\n}\r\n\r\nexport const NoMessages = ({type, contactId}: NoMessagesProps) => {\r\n    const {isLoading: activityHistoryIsLoading, getMessages} = useContactActivityHistory()\r\n    const {t} = useLocalizationState()\r\n\r\n    const allActivityHistoryLoaded = useExternalActivityHistoryLoaded(contactId)\r\n\r\n    const searchForOlder = useCallback(\r\n        function searchForOlderCallback() {\r\n            getMessages({type, contactId})\r\n        },\r\n        [contactId, getMessages, type],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {!activityHistoryIsLoading && allActivityHistoryLoaded ? (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_found(type)}</p>\r\n                </div>\r\n            ) : (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_while_loading(type)}</p>\r\n                    <Button className={styles.searchForOlder} onClick={searchForOlder}>\r\n                        {t.INTERNAL_CHAT.chat_history_search_for_older(type)}\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\n\r\n\r\nexport function useExternalActivityHistoryLoaded(contactId: string) {\r\n    const activityHistory = useContactsState('activityHistory')\r\n\r\n    return useMemo(\r\n        () => get(activityHistory[contactId], 'reachedLimit', true),\r\n        [activityHistory, contactId],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\n\r\nimport {NoMessages} from './NoMessages'\r\n\r\n\r\ntype NoMessagesPlaceholderProps = {\r\n    contactId: string\r\n    type: ChatType\r\n}\r\n\r\nexport const NoMessagesPlaceholder: React.FC<NoMessagesPlaceholderProps> = ({contactId, type}) => {\r\n\r\n    if (type !== 'messages' && type !== 'calls') {\r\n        return null\r\n    }\r\n\r\n    return <NoMessages type={type} contactId={contactId} />\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageWrapper\":\"voiceTranscript_Chat_messageWrapper_drgLf\",\"messageTopInfo\":\"voiceTranscript_Chat_messageTopInfo_VoA3v\",\"incoming\":\"voiceTranscript_Chat_incoming_6DHeo\",\"messageBlock\":\"voiceTranscript_Chat_messageBlock_i7M0B\",\"outgoing\":\"voiceTranscript_Chat_outgoing_JD3jd\",\"avatar\":\"voiceTranscript_Chat_avatar_mUd4N\",\"placementTop\":\"voiceTranscript_Chat_placementTop_Awuqp\",\"remoteAssistMessageAvatar\":\"voiceTranscript_Chat_remoteAssistMessageAvatar_FEd8Z\",\"message\":\"voiceTranscript_Chat_message_x5tfb\",\"urgent\":\"voiceTranscript_Chat_urgent_KfI8l\",\"messageContent\":\"voiceTranscript_Chat_messageContent_nw7Cp\",\"messageContentHtml\":\"voiceTranscript_Chat_messageContentHtml_AuPlx\",\"voice\":\"voiceTranscript_Chat_voice_GZnDG\",\"voiceRecording\":\"voiceTranscript_Chat_voiceRecording_crXBM\",\"emi\":\"voiceTranscript_Chat_emi_LuUC3\",\"errorMessageContent\":\"voiceTranscript_Chat_errorMessageContent_4XIXs\",\"messageTopInfoGap\":\"voiceTranscript_Chat_messageTopInfoGap_jZaVp\",\"transcriptSuggestionAvatar\":\"voiceTranscript_Chat_transcriptSuggestionAvatar_FScZp\",\"timeChannel\":\"voiceTranscript_Chat_timeChannel_N1P8J\",\"channelIcon\":\"voiceTranscript_Chat_channelIcon_nzkb9\",\"selectionPopupOption\":\"voiceTranscript_Chat_selectionPopupOption_UTtPT\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useGetUserPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface ExternalMessageAvatar {\r\n    userId?: string\r\n    displayName?: string\r\n    isSelf?: boolean\r\n    isScenarioAvatar?: boolean\r\n    showUserAvatar?: boolean\r\n    className?: string\r\n    isConference?: boolean\r\n}\r\n\r\nconst avatarClassName = 'm-0 mr-1.5'\r\n\r\nexport const MessageAvatar: React.FC<ExternalMessageAvatar> = ({\r\n    userId,\r\n    displayName,\r\n    isSelf,\r\n    isScenarioAvatar,\r\n    className,\r\n    isConference,\r\n    showUserAvatar = true,\r\n}) => {\r\n    const getUserPictureUrl = useGetUserPictureUrl()\r\n\r\n    const avatarUrl = useMemo(() => {\r\n        if (isConference) {\r\n            return undefined\r\n        }\r\n        return !isSelf && userId ? getUserPictureUrl(userId) : ''\r\n    }, [getUserPictureUrl, isConference, isSelf, userId])\r\n\r\n    const [firstName, lastName] = useMemo(() => {\r\n        return displayName ? displayName.split(' ') : ['', '']\r\n    }, [displayName])\r\n\r\n    if (isScenarioAvatar) {\r\n        return (\r\n            <Avatar\r\n                className={tcn(className, styles.avatar, avatarClassName)}\r\n                type=\"scenario\"\r\n                size=\"28\"\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showUserAvatar && (\r\n                <Avatar\r\n                    className={tcn(className, styles.avatar, avatarClassName)}\r\n                    url={avatarUrl}\r\n                    size=\"28\"\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    type={isConference ? 'conference' : 'contact'}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface Props {\r\n    className?: string\r\n    displayName?: string\r\n    isError?: boolean\r\n    isOutgoing?: boolean\r\n    messageId?: string\r\n    sendTime?: number\r\n    showName?: boolean\r\n    showTime?: boolean\r\n}\r\n\r\nexport const MessageContent: React.FC<React.PropsWithChildren<Props>> = props => {\r\n    const {children, className, isError, messageId} = props\r\n\r\n    const combinedClassName = tcn(className, {\r\n        [styles.errorMessageContent]: isError,\r\n    })\r\n\r\n    return (\r\n        <SelectionItem\r\n            data-message-id-selection={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            className={combinedClassName}\r\n            itemId={messageId}\r\n        >\r\n            {children}\r\n        </SelectionItem>\r\n    )\r\n}\r\n","import {formatDate} from '@bpinc/lib-helpers'\r\nimport {IconRobot} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface WithTopInfoProps {\r\n    displayName?: string\r\n    isOutgoing?: boolean\r\n    isDelivered?: boolean\r\n    isRead?: boolean\r\n    isSystemMessage?: boolean\r\n    showTime?: boolean\r\n    sendTime?: number\r\n    showName?: boolean\r\n}\r\n\r\nexport const WithTopInfo: React.FC<React.PropsWithChildren<WithTopInfoProps>> = props => {\r\n    const {\r\n        children,\r\n        displayName,\r\n        isOutgoing,\r\n        isSystemMessage,\r\n        sendTime,\r\n        showTime,\r\n        showName,\r\n    } = props\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const siblingClassName = tcn('text-neutral-fade [&:not(:last-child)]:mr-2')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-between pb-1 text-sm leading-[16px]\">\r\n                <div className={tcn('flex items-center justify-start', {'w-full justify-end': isOutgoing})}>\r\n                    {isSystemMessage && <IconRobot className=\"mr-2\" />}\r\n                    {(showName || isSystemMessage) && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"party-display-name\"\r\n                        >\r\n                            {isSystemMessage ? t.EXTERNAL_CHAT.system_message() : displayName}\r\n                        </span>\r\n                    )}\r\n                    {showTime && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"message-time\"\r\n                        >\r\n                            {formatDate(sendTime, 'h:mm A')}\r\n                        </span>\r\n                    )}\r\n                    {/* @TODO - implement isDelivered && isRead */}\r\n                    {/* {isOutgoing && isDelivered && !isRead && <IconDelivered className=\"[&:not(:last-child)]:mr-2\" />} */}\r\n                    {/* {isOutgoing && isRead && <IconRead className=\"[&:not(:last-child)]:mr-2 [&_path]:fill-primary-600\" />} */}\r\n                </div>\r\n            </div>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {isScenarioMessage} from '@bpinc/ad-interaction-state-methods'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {\r\n    getExternalChatFileData,\r\n    getExternalChatMessageDisplayName,\r\n    getExternalChatMessageDisplayType,\r\n    getMessageId,\r\n    isErrorExternalChatMessage,\r\n} from '../../../../helpers'\r\nimport type {ExternalChatMessage} from '../../../../types'\r\nimport {isActivityMessageGroup, isChatMessage, isHistoryCallMessage, isHistoryMessage} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {MessageAvatar} from './MessageAvatar'\r\nimport {MessageContent} from './MessageContent'\r\nimport {WithTopInfo} from './WithTopInfo'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ntype WithOptionalNameAndAvatarProps = {\r\n    className?: string\r\n    message: ExternalChatMessage\r\n    children: ReactNode\r\n    isFullWidth?: boolean\r\n    messageClassName?: string\r\n    withoutBorder?: boolean\r\n}\r\n\r\nexport const WithOptionalNameAndAvatar: React.FC<WithOptionalNameAndAvatarProps> = React.memo(\r\n    function WithOptionalNameAndAvatar({className, children, message, isFullWidth, messageClassName, withoutBorder}) {\r\n        const {formatFullName} = useFormatting()\r\n        const {userId, isSelf, timestamp} = message\r\n        const id = getMessageId(message)\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        const isChat = isChatMessage(message)\r\n        const isLink = isChat ? !!message.page : false\r\n        const source = isChat ? message.source : undefined\r\n\r\n        const isActivityGroup = isActivityMessageGroup(message)\r\n        const isNotes = isActivityGroup ? !!message.notes : false\r\n        const isDisposition = isActivityGroup ? !!message.disposition : false\r\n\r\n        const isHistory = isHistoryMessage(message)\r\n        const direction = isHistory ? message.direction : undefined\r\n        const mediaType = isHistory ? message.mediaType : undefined\r\n        const isEmail = mediaType === 'EMAIL' && !isActivityGroup\r\n        const isCall = mediaType === 'VOICE' && !isActivityGroup\r\n\r\n        const callUsers = isHistoryCallMessage(message) ? message.users : undefined\r\n\r\n        const isError = isErrorExternalChatMessage(message)\r\n        const isFile = !!getExternalChatFileData(message)\r\n\r\n        const isTextMessage = !isActivityGroup && !isEmail && !isFile && !isCall\r\n        const isRemoteAssistSession = mediaType === 'REMOTE_ASSIST'\r\n        const isCallConference = callUsers && callUsers.length > 1\r\n\r\n        const isOutgoing =\r\n            direction === 'outgoing' ||\r\n            source === 'agent' ||\r\n            source === 'system' ||\r\n            displayType === 'navigation' ||\r\n            displayType === 'activityGroup' ||\r\n            isError ||\r\n            isDisposition ||\r\n            isSelf && !isCall\r\n\r\n        const isCustomMessage = displayType === 'activityGroup' || mediaType === 'REMOTE_ASSIST'\r\n\r\n        const fullName = getExternalChatMessageDisplayName(message, formatFullName)\r\n\r\n        const isSystemMessage = isOutgoing && (!isSelf && !message?.userId)\r\n\r\n        const showName = Boolean(isSystemMessage || (isCall && !isOutgoing && !isSelf) || (!isOutgoing && fullName))\r\n\r\n        const isScenario = isScenarioMessage(displayType)\r\n\r\n        const finalDirection = isOutgoing ? 'outgoing' : 'incoming'\r\n\r\n        const finalUserId = callUsers?.[0].userId ?? userId\r\n\r\n        const messageItemClassName = tcn(\r\n            styles.messageBlock,\r\n            styles[finalDirection],\r\n        )\r\n        return (\r\n            <div\r\n                className={messageItemClassName}\r\n                data-disposition={isDisposition || undefined}\r\n                data-email={isEmail || undefined}\r\n                data-error={isError || undefined}\r\n                data-file={isFile || undefined}\r\n                data-incoming={!isOutgoing || undefined}\r\n                data-testid=\"message-item\"\r\n                data-link={isLink || undefined}\r\n                data-notes={isNotes || undefined}\r\n                data-outgoing={isOutgoing || undefined}\r\n                data-remote-assist-session={isRemoteAssistSession || undefined}\r\n                data-text-message={isTextMessage || undefined}\r\n            >\r\n                <div className={tcn('z-0 flex max-w-[71%] flex-auto flex-col', {'w-full max-w-full': isFullWidth})}>\r\n                    <section className={tcn(styles.message, styles[finalDirection])}>\r\n                        {finalDirection === 'incoming' && !withoutBorder && (\r\n                            <MessageAvatar\r\n                                userId={finalUserId}\r\n                                isConference={isCallConference}\r\n                                displayName={fullName}\r\n                                isScenarioAvatar={isScenario}\r\n                                showUserAvatar\r\n                            />\r\n                        )}\r\n                        {isCustomMessage ? (\r\n                            children\r\n                        ) : (\r\n                            <MessageContent\r\n                                className={tcn('relative', {'w-full max-w-full': isFullWidth}, className)}\r\n                                isError={isError}\r\n                                messageId={id}\r\n                            >\r\n                                <WithHoverOverActions\r\n                                    messageId={id}\r\n                                    className={tcn(\r\n                                        `relative inline-block\r\n                                        whitespace-normal break-all rounded border p-2\r\n                                        border-on-secondary text-primary-on-primary before:absolute\r\n                                        before:-bottom-px before:z-[-1] before:h-0 before:w-0 before:rounded-b-[33%]\r\n                                        before:border-b-4 before:border-t-0\r\n                                        before:border-transparent before:border-b-secondary-100 before:content-[''] after:absolute\r\n                                        after:bottom-0 after:z-0 after:h-0 after:w-0 after:rounded-b-[33%] after:border-b-[9px]\r\n                                        after:border-t-0 after:border-transparent after:content-[''] hover:text-primary-on-primary`,\r\n                                        {\r\n                                            // we could use rounded-bl-md instead of rounded-bl-[8px],\r\n                                            // however we couldn't, the layout goes break down\r\n                                            [`rounded-bl-[8px] bg-secondary-50\r\n                                            before:left-[-5px] before:border-l-[9px] before:border-r-0\r\n                                            after:left-[-5px] after:border-l-[8px]\r\n                                            after:border-r-0 after:border-b-secondary-50`]: finalDirection === 'incoming',\r\n                                            [`rounded-br-[8px] bg-primary-background\r\n                                            before:right-[-5px] before:border-l-0 before:border-r-[9px]\r\n                                            after:right-[-5px] after:border-l-0\r\n                                            after:border-r-[8px] after:border-b-neutral-0`]: finalDirection === 'outgoing',\r\n                                        },\r\n                                        messageClassName,\r\n                                    )}\r\n                                >\r\n                                    {withoutBorder\r\n                                        ? children\r\n                                        : (\r\n                                            <WithTopInfo\r\n                                                displayName={fullName}\r\n                                                isOutgoing={isOutgoing}\r\n                                                isSystemMessage={isSystemMessage}\r\n                                                sendTime={timestamp}\r\n                                                showName={showName}\r\n                                                showTime={!isCall || isActivityGroup}\r\n                                            >\r\n                                                {children}\r\n                                            </WithTopInfo>\r\n                                        )\r\n                                    }\r\n                                </WithHoverOverActions>\r\n                            </MessageContent>\r\n                        )}\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n)\r\n","import {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nconst dotStyles = 'size-1.5 rounded bg-inverse-disabled inline-block'\r\n\r\nexport const DotsTransforming = () => {\r\n    return (\r\n        <>\r\n            <div className={tcn(dotStyles, 'ml-1.5 mr-1 animate-[dot-transform_1s_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'mr-1 animate-[dot-transform_1s_500ms_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'animate-[dot-transform_1s_1.5s_alternate_infinite]')} />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ExternalChatParty, TypingParty} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {WithOptionalNameAndAvatar} from '../../ExternalMessages/messages/WithOptionalNameAndAvatar'\r\nimport {DotsTransforming} from './DotsTransforming'\r\n\r\n\r\ninterface Props {\r\n    party: ExternalChatParty\r\n    typingParty: TypingParty\r\n}\r\n\r\nfunction removeLastThreeDots(str: string): string {\r\n    return str.replace(/\\.\\.\\.$/, '')\r\n}\r\nexport const TypingIndicator: React.FC<Props> = ({party, typingParty}) => {\r\n    const {first_name: firstName, last_name: lastName, user_id: userId} = party\r\n\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const name = formatFullName(firstName, lastName)\r\n    const displayName = name || t.EXTERNAL_CHAT.display_name_placeholder()\r\n\r\n    const content = removeLastThreeDots(\r\n        userId\r\n            ? t.EXTERNAL_CHAT.agent_is_typing(name)\r\n            : t.EXTERNAL_CHAT.party_is_typing(),\r\n    )\r\n\r\n    const timestamp = party?.timestamp\r\n        ? Number(party.timestamp)\r\n        : Date.now().valueOf()\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar\r\n            message={{\r\n                itemId: party.item_id,\r\n                partyId: party.party_id,\r\n                timestamp,\r\n                type: 'message',\r\n                displayType: 'message',\r\n                displayName,\r\n            }}\r\n        >\r\n            {content}\r\n            {' '}\r\n            {typingParty.message}\r\n            <DotsTransforming />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\nimport type {ListRange} from 'react-virtuoso'\r\n\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, getTypingParties} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatCommonMessagesType} from '../../../../types'\r\nimport {TypingIndicator} from './TypingIndicator'\r\n\r\n\r\ntype TypingPartiesProps = {\r\n    itemId: string\r\n    rangeRef: RefObject<ListRange | undefined>\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>\r\n}\r\n\r\nexport const TypingParties: React.FC<TypingPartiesProps> = ({itemId, rangeRef, messagesRef}) => {\r\n    const bottom = useRef<HTMLDivElement>(null)\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const typingParties = getTypingParties(chatData)\r\n    const hasTypingParties = typingParties.length > 0\r\n    const lastRenderedItem = rangeRef.current?.endIndex\r\n    const lastMessageIndex = messagesRef.current.length - 1\r\n    const isLastMessageRenderedRef = useAsRef(lastMessageIndex === lastRenderedItem)\r\n\r\n    useEffect(() => {\r\n        if (!hasTypingParties) {\r\n            return\r\n        }\r\n\r\n        if (!isLastMessageRenderedRef.current) {\r\n            return\r\n        }\r\n\r\n        bottom.current?.scrollIntoView({behavior: 'auto', block: 'start'})\r\n    }, [hasTypingParties, isLastMessageRenderedRef])\r\n\r\n    return (\r\n        <>\r\n            {typingParties.map((party, i) => (\r\n                <TypingIndicator\r\n                    key={i}\r\n                    party={party}\r\n                    typingParty={chatData?.typingParties[party.party_id]}\r\n                />\r\n            ))}\r\n            {hasTypingParties && <div ref={bottom} />}\r\n        </>\r\n    )\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport {useLayoutEffect, useMemo} from 'react'\r\nimport type {IndexLocationWithAlign, ListRange} from 'react-virtuoso'\r\nimport produce from 'immer'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionUIChatTypeTopItemId, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport {useFirstUnreadMessage} from '../../../hooks/useFirstUnreadMessage'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useInitialScrollPosition(\r\n    itemId: string,\r\n    type: ChatType,\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const setInteractionUIState = useInteractionUIItemStateSetter()\r\n    const firstUnreadMessageIdRef = useAsRef(useFirstUnreadMessage(itemId))\r\n    const topItemRef = useAsRef(useInteractionUIChatTypeTopItemId(itemId, type))\r\n\r\n    useLayoutEffect(() => {\r\n        //Save current scroll position on unmount\r\n        return () => {\r\n            if (!rangeRef.current) {\r\n                return\r\n            }\r\n\r\n            if (isScrollAtBottom(scrollNode)) {\r\n                setInteractionUIState(itemId, produce(state => {\r\n                    delete state.tabTopItemId[type]\r\n                }))\r\n                return\r\n            }\r\n\r\n            const {id, offset} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesRef.current)\r\n            setInteractionUIState(itemId, produce(state => {\r\n                state.tabTopItemId[type] = {id, offset}\r\n            }))\r\n        }\r\n\r\n    }, [itemId, messagesRef, rangeRef, scrollNode, setInteractionUIState, type])\r\n\r\n    return useMemo<IndexLocationWithAlign>(() => {\r\n        if (firstUnreadMessageIdRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === firstUnreadMessageIdRef.current)\r\n            return {index, align: 'end'}\r\n        }\r\n\r\n        if (topItemRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === topItemRef.current?.id)\r\n            return {index, align: 'start', offset: (topItemRef.current?.offset || 0)}\r\n        }\r\n\r\n        return {index: 'LAST'}\r\n    }, [firstUnreadMessageIdRef, messagesRef, topItemRef])\r\n}\r\n\r\n","import {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\n\r\nimport {getMessageId} from '../helpers/common'\r\n\r\n\r\nexport function useFirstUnreadMessage(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const first = chatData?.messages?.find(m => (m.source === 'customer' || m.source === 'agent') && !m.isRead)\r\n    if (!first) {\r\n        return null\r\n    }\r\n\r\n    return getMessageId(first)\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useRef} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\nimport produce from 'immer'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, getServiceNameFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {isExternalChatMessageDate} from '../../../types'\r\nimport {useMessagesLoader} from '../useMessagesLoader'\r\nimport {NoMessagesPlaceholder} from './NoMessagesPlaceholder'\r\nimport {TypingParties} from './TypingParties'\r\nimport {useInitialScrollPosition} from './useInitialScrollPosition'\r\nimport {useSaveScrollPositionEffect} from './useSaveScrollPositionEffect'\r\n\r\n\r\nconst VIEWPORT_INCREASE = 200 //Viewport increasing to prevent new messages from blinking\r\n\r\ntype VirtualizedMessagesProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    type: ChatType\r\n    renderMessage: (message: ChatCommonMessagesType) => React.ReactNode\r\n}\r\n\r\nexport const VirtualizedMessages = React.memo<VirtualizedMessagesProps>(\r\n    function VirtualizedMessages({\r\n        messages,\r\n        itemId,\r\n        type,\r\n        contactId,\r\n        scrollNode,\r\n        renderMessage,\r\n    }) {\r\n        const {t} = useLocalizationState()\r\n        const setItemState = useInteractionUIItemStateSetter()\r\n        const virtuosoRef = useRef<VirtuosoHandle>(null)\r\n        const rangeRef = useRef<ListRange | undefined>(undefined)\r\n        const messagesRef = useAsRef(messages)\r\n        const initialRender = useRef(false)\r\n\r\n        const interaction = useInteraction(itemId)\r\n        const serviceName = getServiceNameFromItem(interaction)\r\n        const channel = getChannel(interaction)\r\n        const ChannelIcon = getChannelImageIcon(channel)\r\n\r\n        const loadMoreMessages = useMessagesLoader(itemId, contactId, type)\r\n\r\n        useEffect(() => {\r\n            setItemState(itemId, produce(s => {\r\n                s.scrollerApi = {\r\n                    scrollToLast: () => {\r\n                        virtuosoRef.current?.scrollToIndex({index: 'LAST'})\r\n                    },\r\n                    scrollTo: (id, align) => {\r\n                        const index = messagesRef.current?.findIndex(m => id === getMessageId(m))\r\n                        virtuosoRef.current?.scrollToIndex({\r\n                            index,\r\n                            align,\r\n                        })\r\n                    },\r\n                }\r\n            }))\r\n        }, [itemId, messagesRef, setItemState])\r\n\r\n        useSaveScrollPositionEffect(messages, virtuosoRef, rangeRef, scrollNode)\r\n\r\n        const initialScrollPosition = useInitialScrollPosition(itemId, type, messagesRef, rangeRef, scrollNode)\r\n        const generateMessageKey = useCallback((_index: number, message: ChatCommonMessagesType) => getMessageId(message), [])\r\n        const channelTitle = channel ? (\r\n            channel === 'remoteassist'\r\n                ? t.ACTIVITY_HISTORY.remote_assist_title()\r\n                : t.GLOBAL[`chat_type_${channel}`]()\r\n        ) : ''\r\n        const renderHeader = useCallback(() => serviceName ? (\r\n            <div className=\"my-6 flex justify-center\">\r\n                <div className=\"text-neutral-on-secondary\">\r\n                    <p className=\"text-center font-semibold caption-s\">\r\n                        {serviceName}\r\n                    </p>\r\n                    <div className=\"flex items-center justify-center\">\r\n                        {ChannelIcon && <ChannelIcon className=\"mr-1 size-4 icon-disabled\" />}\r\n                        {' '}\r\n                        <p className=\"text-center caption-s\">\r\n                            {channelTitle}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : null, [ChannelIcon, channelTitle, serviceName])\r\n        const virtuosoComponents = useMemo(() => ({\r\n            Header: renderHeader,\r\n            Footer: () => (\r\n                <TypingParties\r\n                    itemId={itemId}\r\n                    messagesRef={messagesRef}\r\n                    rangeRef={rangeRef}\r\n                />\r\n            ),\r\n        }), [itemId, messagesRef, renderHeader])\r\n        const setListRange = useCallback((r: ListRange) => {\r\n            rangeRef.current = r\r\n        }, [])\r\n        const onHeightChange = useCallback((height: number) => {\r\n            if (scrollNode && scrollNode.clientHeight >= height) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages, scrollNode])\r\n\r\n        //Debounce is needed because for some reason Virtuoso calls onHeightChange twice\r\n        const debouncedOnHeightChange = useMemo(() => debounce(onHeightChange, 100), [onHeightChange])\r\n\r\n        const onTopStateChange = useCallback((atTop: boolean) => {\r\n            if (!initialRender.current) {\r\n                initialRender.current = true\r\n                return\r\n            }\r\n            if (atTop) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages])\r\n\r\n        const messageRenderer = useCallback((_index: number, message: ChatCommonMessagesType) => {\r\n            return renderMessage(message)\r\n        }, [renderMessage])\r\n\r\n        const showNoMessagesPlaceholder = messages.length < 1 || messages.length == 1 && isExternalChatMessageDate(messages[0])\r\n        if (showNoMessagesPlaceholder) {\r\n            return <NoMessagesPlaceholder type={type} contactId={contactId} />\r\n        }\r\n\r\n        return (\r\n            <Virtuoso\r\n                tabIndex={undefined} // by default Virtuoso add the tabIndex=\"0\" but for better support SelectionContainer we should set it undefined\r\n                ref={virtuosoRef}\r\n                followOutput\r\n                data={messages}\r\n                itemContent={messageRenderer}\r\n                computeItemKey={generateMessageKey}\r\n                atTopStateChange={onTopStateChange}\r\n                initialTopMostItemIndex={initialScrollPosition}\r\n                customScrollParent={scrollNode || undefined}\r\n                components={virtuosoComponents}\r\n                rangeChanged={setListRange}\r\n                totalListHeightChanged={debouncedOnHeightChange}\r\n                increaseViewportBy={VIEWPORT_INCREASE}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {RefObject} from 'react'\r\nimport {useLayoutEffect} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\n\r\nimport {useAsRef, usePreviousValueRef, useValueUpdated} from '@bpinc/lib-helpers'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useSaveScrollPositionEffect(\r\n    messages: ChatCommonMessagesType[],\r\n    virtuosoRef: RefObject<VirtuosoHandle>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const messagesRef = useAsRef(messages)\r\n    const messagesPrevRef = usePreviousValueRef(messages)\r\n    const messagesLengthChanged = useValueUpdated(messages.length)\r\n\r\n    useLayoutEffect(() => {\r\n        if (!rangeRef.current ||\r\n            isScrollAtBottom(scrollNode) ||\r\n            getMessageId(messagesRef.current[0]) === getMessageId(messagesPrevRef.current?.[0] || '')\r\n        ) {\r\n            return\r\n        }\r\n\r\n        if (messagesLengthChanged) {\r\n            const {offset, id} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesPrevRef.current || [])\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === id)\r\n            virtuosoRef.current?.scrollToIndex({index, offset, align: 'start'})\r\n        }\r\n    }, [messagesLengthChanged, messagesPrevRef, messagesRef, rangeRef, scrollNode, virtuosoRef])\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgBotSuggestion = function SvgBotSuggestion(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m12 21-2.575-2.5h-3.8a1.6 1.6 0 0 1-1.162-.448A1.5 1.5 0 0 1 4 16.93V4.575a1.5 1.5 0 0 1 .463-1.127A1.6 1.6 0 0 1 5.625 3h12.75a1.606 1.606 0 0 1 1.163.448A1.506 1.506 0 0 1 20 4.575V16.93a1.506 1.506 0 0 1-.462 1.127 1.606 1.606 0 0 1-1.163.448h-3.8Zm-6.375-3.464H9.85L12 19.619l2.15-2.083h4.225a.62.62 0 0 0 .45-.17.581.581 0 0 0 .175-.436V4.575a.581.581 0 0 0-.175-.436.62.62 0 0 0-.45-.17H5.625a.62.62 0 0 0-.45.17.581.581 0 0 0-.175.436V16.93a.581.581 0 0 0 .175.436.62.62 0 0 0 .45.17ZM5 3.969Zm8.175 7.922 2.6-1.139-2.6-1.139L12 7.094l-1.175 2.52-2.6 1.139 2.6 1.139L12 14.41Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgBotSuggestion);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"21ff305d2488d9478cc624e673ec8bab.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFacebook = function SvgFacebook(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-4.974 0-9 3.645-9 8.1a7.687 7.687 0 0 0 2.842 5.895V21l3.695-2.115A10.817 10.817 0 0 0 12 19.2c4.974 0 9-3.645 9-8.1S16.974 3 12 3Z\",\n    fill: \"#448aff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m6.275 13.908 4.771-5.146 2.385 2.339 4.294-2.339-4.771 5.146-2.385-2.339Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFacebook);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"57f727bf2f169e0b19d872ec87e1ebc4.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLine = function SvgLine(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.25 21h11.5A3.25 3.25 0 0 0 21 17.75V6.25A3.25 3.25 0 0 0 17.75 3H6.25A3.25 3.25 0 0 0 3 6.25v11.5A3.25 3.25 0 0 0 6.25 21Z\",\n    fill: \"#00c300\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.556 11.21c0-2.932-2.94-5.318-6.553-5.318S5.451 8.276 5.451 11.21c0 2.629 2.332 4.831 5.481 5.247.214.046.5.141.578.323a1.348 1.348 0 0 1 .021.593s-.076.462-.094.561c-.028.166-.132.648.568.354a21.147 21.147 0 0 0 5.146-3.807 4.728 4.728 0 0 0 1.405-3.271Zm-9.119 1.745h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .687 0v2.26h.958a.344.344 0 0 1 0 .688Zm1.347-.344a.344.344 0 1 1-.687 0V10.01a.344.344 0 1 1 .687 0Zm3.135 0a.344.344 0 0 1-.618.206L11.966 11v1.61a.344.344 0 0 1-.688 0v-2.6a.344.344 0 0 1 .235-.326.338.338 0 0 1 .109-.017.346.346 0 0 1 .274.137l1.335 1.818V10.01a.344.344 0 0 1 .688 0Zm2.107-1.646a.344.344 0 1 1 0 .688h-.958v.615h.958a.344.344 0 1 1 0 .688h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .344-.344h1.3a.344.344 0 1 1 0 .687h-.958v.615h.958Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLine);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0c921db40ddee9f34a5d15b376ee0df7.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSms = function SvgSms(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 11.2a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133A.722.722 0 0 0 8 11.2Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251ZM3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSms);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"910dfbe6763a148f8a6af4b2866390ff.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTelegram = function SvgTelegram(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#29b6f6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17.109 7.525-1.844 9.415a.574.574 0 0 1-.613.43.659.659 0 0 1-.43-.135l-3.994-3.315-1.954-.987-2.508-.667s-.447-.129-.447-.5c0-.308.459-.454.459-.454l10.493-4.169a2 2 0 0 1 .555-.11c.144 0 .308.062.308.246a1.439 1.439 0 0 1-.025.246Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11.649 14.855-1.687 1.661a.322.322 0 0 1-.171.059.243.243 0 0 1-.108-.021l.475-2.936Z\",\n    fill: \"#b0bec5\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.968 9.007a.246.246 0 0 0-.345-.046l-6.496 3.884s1.037 2.9 1.195 3.4.286.514.286.514l.475-2.936 4.84-4.478a.246.246 0 0 0 .045-.338Z\",\n    fill: \"#cfd8dc\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTelegram);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"3b81ec51938bfa793e8ba0cb4f274188.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTwitter = function SvgTwitter(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#03a9f4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.224 8.73a4.6 4.6 0 0 1-1.306.415 3.333 3.333 0 0 0 1.306-1.415 5.926 5.926 0 0 1-1.651.648 2 2 0 0 0-1.563-.648A2.176 2.176 0 0 0 12 10.09v.94c-1.741 0-3.439-1.438-4.5-2.832a2.42 2.42 0 0 0-.29 1.16 3.038 3.038 0 0 0 1.3 2.145 3.828 3.828 0 0 1-1.306-.472v.027a2.065 2.065 0 0 0 1.7 2.088 2.548 2.548 0 0 1-1.236.246c.272.913 1.642 1.4 2.58 1.416a5.19 5.19 0 0 1-3.047.944 2.958 2.958 0 0 1-.424-.008 6.359 6.359 0 0 0 3.482.955 6.1 6.1 0 0 0 6.094-6.312c0-.1 0-.435-.008-.533a3.528 3.528 0 0 0 .879-1.124\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTwitter);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"6157ddd8a81feea7b302231a623e132e.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgViber = function SvgViber(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3.426c-1.191 0-4.815 0-6.819 1.738-1.193 1.129-1.755 2.762-1.755 5.121v1.286c0 2.36.562 3.992 1.769 5.134a6.358 6.358 0 0 0 2.423 1.221l.321.092v2.288c0 .268.082.268.109.268.056 0 .144-.017.313-.159.041-.038.338-.344 1.787-1.886l.146-.156.219.013c.485.029.986.044 1.487.044 1.191 0 4.815 0 6.819-1.738 1.193-1.129 1.755-2.761 1.755-5.121v-1.286c0-2.36-.562-3.992-1.769-5.134-1.99-1.725-5.614-1.725-6.805-1.725Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.443 13.623a9.161 9.161 0 0 0-1.477-.911 2.611 2.611 0 0 0-.994-.3.814.814 0 0 0-.479.223c-.307.279-.407.629-.945.629a3.863 3.863 0 0 1-2.105-1.118 3.357 3.357 0 0 1-1.228-1.917c0-.49.377-.588.684-.868a.7.7 0 0 0 .252-.435 2.068 2.068 0 0 0-.334-.9 8.2 8.2 0 0 0-1-1.345.663.663 0 0 0-.494-.234 1.894 1.894 0 0 0-.957.315 2.088 2.088 0 0 0-.929 1.1 1 1 0 0 0-.028.191 2.759 2.759 0 0 0 .408 1.377 14.5 14.5 0 0 0 1.977 2.749 9.6 9.6 0 0 0 .778.759 9.94 9.94 0 0 0 .834.708 16.219 16.219 0 0 0 3.02 1.8 3.553 3.553 0 0 0 1.5.372 1.325 1.325 0 0 0 .223-.025 2.236 2.236 0 0 0 1.209-.846 1.532 1.532 0 0 0 .346-.871.568.568 0 0 0-.261-.453Zm.257-2.067a.448.448 0 0 1-.468-.426v-.426a4.04 4.04 0 0 0-4.21-3.833.428.428 0 1 1 0-.852 4.938 4.938 0 0 1 5.146 4.685v.426a.448.448 0 0 1-.468.43Zm-2.873-.852a.463.463 0 0 1-.452-.319 1.341 1.341 0 0 0-1-.912.424.424 0 0 1-.336-.519.474.474 0 0 1 .57-.306 2.242 2.242 0 0 1 1.672 1.522.424.424 0 0 1-.334.52.517.517 0 0 1-.121.018Z\",\n    fill: \"#7e57c2\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.095 11.126a.426.426 0 0 1-.426-.426 2.553 2.553 0 0 0-2.418-2.549.426.426 0 0 1 .045-.851 3.4 3.4 0 0 1 3.225 3.4.426.426 0 0 1-.426.426Z\",\n    fill: \"#7e57c2\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-2.025 0-5.28.977-7.1 1.85C3.538 6.138 3 7.946 3 10.286v1.285c0 2.34.538 4.147 1.9 5.436a6.8 6.8 0 0 0 2.6 1.331V20.3c0 .684.472.7.558.7a.944.944 0 0 0 .607-.267c.072-.061.909-.949 1.819-1.92.542.033 1.057.045 1.511.045 2.025 0 5.18-.178 7.1-1.85 1.359-1.288 1.9-3.1 1.9-5.436v-1.286c0-2.34-.538-4.147-1.9-5.436C17.18 3.177 14.025 3 12 3Zm7.65 8.422v.149c0 2.1-.47 3.535-1.479 4.505-1.747 1.5-5.075 1.5-6.172 1.5-.334 0-.876 0-1.515-.043L8.4 19.75v-2.513a6.03 6.03 0 0 1-2.571-1.161c-1.008-.97-1.479-2.4-1.479-4.506v-1.282c0-2.1.47-3.535 1.479-4.505 1.746-1.5 5.075-1.5 6.171-1.5s4.424 0 6.171 1.5c1.009.97 1.479 2.4 1.479 4.505v1.134Z\",\n    fill: \"#7e57c2\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgViber);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"705a55fc7f1f462947be817d84a580cc.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWebChat = function SvgWebChat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWebChat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"14effeb1e434fca9cf40a30e4b4c1cfa.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWechat = function SvgWechat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.689 3c-4.23 0-7.691 2.884-7.691 6.489a6.076 6.076 0 0 0 2.884 5.047l-.961 2.884 3.028-1.875a8.4 8.4 0 0 0 2.74.433c4.23 0 7.691-2.884 7.691-6.489S14.919 3 10.689 3Z\",\n    fill: \"#8bc34a\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.933 14.068c.38-2.708 3.331-4.51 6.614-4.05.137.02 1.617.409 1.758.429a3.465 3.465 0 0 0 0-1.33c-.046-.006-.137-.083-.183-.09-5.07-1.443-9.06 1.238-9.098 4.913a5.88 5.88 0 0 0 .07 1.82 7.053 7.053 0 0 0 .97.046 4.36 4.36 0 0 1-.13-1.738Z\",\n    fill: \"#7cb342\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 14.751a5.52 5.52 0 0 0-5.75-5.288 5.52 5.52 0 0 0-5.75 5.288 5.52 5.52 0 0 0 5.75 5.288 6.515 6.515 0 0 0 2.212-.385L19.674 21l-.619-2.307A5.033 5.033 0 0 0 21 14.751Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.866 7.478a.961.961 0 1 1-.962-.961.964.964 0 0 1 .962.961Zm4.807-.961a.961.961 0 1 0 .961.961.964.964 0 0 0-.961-.961Z\",\n    fill: \"#33691e\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.996 13.254a.721.721 0 1 1-.721-.721.739.739 0 0 1 .721.721Zm3.605-.721a.721.721 0 1 0 .721.721.739.739 0 0 0-.721-.721Z\",\n    fill: \"#546e7a\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWechat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"720e2babef2e76400cb343b776053cba.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWhatsapp = function SvgWhatsapp(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m3.46 20.54 1.207-4.386A8.5 8.5 0 0 1 18.052 5.941a8.394 8.394 0 0 1 2.489 5.988 8.5 8.5 0 0 1-8.5 8.464 8.525 8.525 0 0 1-4.073-1.034Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.454 20.77a.223.223 0 0 1-.216-.282l1.183-4.3A8.725 8.725 0 0 1 18.214 5.78a8.622 8.622 0 0 1 2.556 6.15 8.742 8.742 0 0 1-12.833 7.677l-4.426 1.156a.206.206 0 0 1-.057.007Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.032 3.447a8.48 8.48 0 1 1 0 16.959 8.534 8.534 0 0 1-4.07-1.032l-4.514 1.179 1.208-4.392a8.474 8.474 0 0 1 7.376-12.714m0-.447a8.922 8.922 0 0 0-7.86 13.22l-1.157 4.215a.445.445 0 0 0 .117.432.449.449 0 0 0 .433.118l4.345-1.134A8.972 8.972 0 0 0 21 11.93 8.945 8.945 0 0 0 12.032 3Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.01 6.982a7.014 7.014 0 0 0-10.93 8.659l.168.265-.711 2.579 2.661-.694.257.152a7.047 7.047 0 0 0 3.579.974 7.02 7.02 0 0 0 7.031-6.99 6.928 6.928 0 0 0-2.055-4.945Z\",\n    fill: \"#40c351\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.854 8.28c-.163-.363-.335-.37-.491-.377-.127-.006-.272-.005-.418-.005a.8.8 0 0 0-.581.273 2.443 2.443 0 0 0-.763 1.817 4.238 4.238 0 0 0 .89 2.254 8.948 8.948 0 0 0 3.723 3.29c1.841.726 2.216.582 2.615.545a2.2 2.2 0 0 0 1.471-1.036 1.825 1.825 0 0 0 .127-1.036c-.055-.091-.2-.145-.418-.255s-1.29-.636-1.489-.709-.345-.109-.491.109-.563.709-.69.854-.255.164-.472.055a5.966 5.966 0 0 1-1.753-1.081 6.566 6.566 0 0 1-1.212-1.509c-.127-.218-.014-.336.1-.445s.218-.255.327-.382a1.49 1.49 0 0 0 .218-.363.4.4 0 0 0-.018-.382c-.057-.117-.481-1.19-.675-1.617Z\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWhatsapp);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"a39c903b5cca1b36c65e91151a83b019.svg\";","// extracted by mini-css-extract-plugin\nexport default {\"messageRow\":\"voiceTranscript_Message_messageRow_UOs4p\",\"incoming\":\"voiceTranscript_Message_incoming_bnpcD\",\"outgoing\":\"voiceTranscript_Message_outgoing_pKbZe\",\"time\":\"voiceTranscript_Message_time_wb5xv\",\"message\":\"voiceTranscript_Message_message_chWfh\",\"link\":\"voiceTranscript_Message_link_J61uY\",\"error\":\"voiceTranscript_Message_error_NKpnz\",\"html\":\"voiceTranscript_Message_html_rIkTi\",\"closable\":\"voiceTranscript_Message_closable_a7mGz\",\"sentiment\":\"voiceTranscript_Message_sentiment_jM9aL\",\"icon\":\"voiceTranscript_Message_icon_XNLkK\"};","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {formatDate, useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem, Sentiment, Svg} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getMessageId} from '../../../../helpers'\r\nimport type {Direction} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {useLinkOpener} from '../hooks/useLinkOpener'\r\nimport {getTranscriptMessageIcon} from './utils'\r\n\r\nimport styles from './Message.module.less'\r\n\r\n\r\nexport type MessageProps = MessageAdditionalProps & {\r\n    message: VoiceTranscriptCommonMessage\r\n}\r\n\r\nexport interface MessageAdditionalProps {\r\n    itemId: string\r\n    direction: Direction\r\n    closeButton?: ReactElement\r\n    content: string\r\n    isHtml: boolean\r\n    isLink: boolean\r\n}\r\n\r\nexport const Message = React.forwardRef<HTMLDivElement, MessageProps>(({\r\n    message,\r\n    itemId,\r\n    direction,\r\n    closeButton,\r\n    isLink,\r\n    isHtml,\r\n    content,\r\n}, ref) => {\r\n    const {\r\n        endTime,\r\n        sentiment,\r\n        chatMessageData,\r\n    } = message\r\n\r\n    //Already sanitized in useVoiceTranscriptMessagesContentMap\r\n    const innerHTML = useInnerHTML(content)\r\n\r\n    const iconSrc = getTranscriptMessageIcon(message)\r\n    const messageId = getMessageId(message)\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    const bubbleElement = (\r\n        <SelectionItem\r\n            ref={ref}\r\n            itemId={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            data-message-id-selection={messageId}\r\n            className={tcn(styles.message, styles[direction], {\r\n                [styles.html]: isHtml,\r\n                [styles.link]: isLink,\r\n                [styles.closable]: !!closeButton,\r\n                [styles.error]: chatMessageData?.displayType === 'error',\r\n            })}\r\n        >\r\n            <WithHoverOverActions messageId={messageId}>\r\n                <div\r\n                    dangerouslySetInnerHTML={innerHTML}\r\n                    onClickCapture={evt => {\r\n                        if (isLink) {\r\n                            evt.preventDefault()\r\n                            evt.stopPropagation()\r\n                            openLink(message)\r\n                        }\r\n                    }}\r\n                />\r\n            </WithHoverOverActions>\r\n            {closeButton}\r\n        </SelectionItem>\r\n    )\r\n\r\n    return (\r\n        <div className={tcn(styles.messageRow, styles[direction])}>\r\n            <div className={tcn(styles.time, styles[direction])}>{formatDate(endTime, 'h:mm A')}</div>\r\n            {bubbleElement}\r\n            {iconSrc && <Svg src={iconSrc} className={tcn(styles.icon, styles[direction])} />}\r\n            {sentiment && (\r\n                <Sentiment sentiment={sentiment} className={tcn(styles.sentiment, styles[direction])} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport botSuggestionIcon from './images/bot-suggestion.svg'\r\nimport facebookIcon from './images/facebook.svg'\r\nimport lineIcon from './images/line.svg'\r\nimport smsIcon from './images/sms.svg'\r\nimport telegramIcon from './images/telegram.svg'\r\nimport twitterIcon from './images/twitter.svg'\r\nimport viberIcon from './images/viber.svg'\r\nimport webChatIcon from './images/web-chat.svg'\r\nimport wechatIcon from './images/wechat.svg'\r\nimport whatsappIcon from './images/whatsapp.svg'\r\n\r\n\r\nexport function getTranscriptMessageIcon(transcriptMessage: VoiceTranscriptCommonMessage) {\r\n    if (isSuggestion(transcriptMessage)) {\r\n        return botSuggestionIcon\r\n    }\r\n    if (isCurrentChatTranscriptMessage(transcriptMessage) && transcriptMessage.chatMessageData.channel) {\r\n        switch (transcriptMessage.chatMessageData.channel) {\r\n            case 'sms':\r\n                return smsIcon\r\n            case 'whatsapp':\r\n                return whatsappIcon\r\n            case 'facebook':\r\n                return facebookIcon\r\n            case 'line':\r\n                return lineIcon\r\n            case 'telegram':\r\n                return telegramIcon\r\n            case 'twitter':\r\n                return twitterIcon\r\n            case 'viber':\r\n                return viberIcon\r\n            case 'web':\r\n                return webChatIcon\r\n            case 'wechat':\r\n                return wechatIcon\r\n        }\r\n    }\r\n}\r\n","import type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface ParseLinkParams {\r\n    text: string\r\n    url: string\r\n    target: string\r\n}\r\nexport function parseTranscriptLinksAsHTML({text, url, target}: ParseLinkParams) {\r\n    const parsedUrl = normalizeExternalURL(url)\r\n    return `<a href=${parsedUrl} target=\"${target}\">${text}</a>`\r\n}\r\n\r\nexport function chatMessageToVoiceTranscript(message: ChatMessage): ChatSessionTranscriptMessage {\r\n    return {\r\n        partyId: message.partyId,\r\n        msgId: message.msgId ?? '',\r\n        text: message.msg ?? '',\r\n        startTime: message.timestamp,\r\n        endTime: message.timestamp,\r\n        sentiment: message.sentiment,\r\n        type: 'chatMessage',\r\n        format: 'HTML',\r\n        isSelf: message.isSelf,\r\n        chatMessageData: message,\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {MessageProps} from '../../VoiceTranscript/messages/Message'\r\nimport {Message} from '../../VoiceTranscript/messages/Message'\r\nimport {parseTranscriptLinksAsHTML} from '../../VoiceTranscript/utils'\r\n\r\n\r\ntype BotSuggestionProps = Omit<MessageProps, 'content' | 'isLink' | 'isHtml'>\r\n\r\nexport const BotSuggestion: React.FC<BotSuggestionProps> = ({message, itemId, ...rest}) => {\r\n    const {text = ''} = message\r\n    const isHtml = isHTMLSuggestion(message)\r\n    const isLink = isLinkSuggestion(message)\r\n\r\n    const content = isLink\r\n        ? parseTranscriptLinksAsHTML({\r\n            text: message.text,\r\n            target: itemId,\r\n            url: message.suggestionURL,\r\n        })\r\n        : text\r\n\r\n\r\n    return (\r\n        <Message\r\n            message={message}\r\n            isHtml={isHtml}\r\n            isLink={isLink}\r\n            content={content}\r\n            itemId={itemId}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\nimport {createContext, useContext} from 'use-context-selector'\r\n\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren, StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {VoiceTranscriptSearchResultType} from '../../../types'\r\n\r\n\r\ninterface VoiceTranscriptUIState {\r\n    search: string\r\n    setSearch: StateSetter<string>\r\n\r\n    searchResult: VoiceTranscriptSearchResultType | undefined\r\n    setSearchResult: StateSetter<VoiceTranscriptSearchResultType | undefined>\r\n\r\n    showBotSuggestions: boolean\r\n    toggleBotSuggestions: Toggle\r\n\r\n    showSMS: boolean\r\n    toggleSMS: Toggle\r\n\r\n    showTranscript: boolean\r\n    toggleTranscript: Toggle\r\n}\r\n\r\nconst noop = () => {}\r\n\r\nconst initialState: VoiceTranscriptUIState = {\r\n    search: '',\r\n    setSearch: noop,\r\n\r\n    searchResult: undefined,\r\n    setSearchResult: noop,\r\n\r\n    showBotSuggestions: true,\r\n    toggleBotSuggestions: noop,\r\n\r\n    showSMS: true,\r\n    toggleSMS: noop,\r\n\r\n    showTranscript: true,\r\n    toggleTranscript: noop,\r\n}\r\n\r\nconst VoiceTranscriptUIContext = createContext<VoiceTranscriptUIState>(initialState)\r\n\r\nVoiceTranscriptUIContext.displayName = 'VoiceTranscriptUIContext'\r\n\r\nexport const VoiceTranscriptStateProvider: FCWithChildren<ReactElement> = ({children}) => {\r\n    const [search, setSearch] = useState<VoiceTranscriptUIState['search']>(initialState.search)\r\n    const [searchResult, setSearchResult] = useState<VoiceTranscriptUIState['searchResult']>(undefined)\r\n    const {value: showBotSuggestions, toggle: toggleBotSuggestions} = useBoolean(initialState.showBotSuggestions)\r\n    const {value: showSMS, toggle: toggleSMS} = useBoolean(initialState.showSMS)\r\n    const {value: showTranscript, toggle: toggleTranscript} = useBoolean(initialState.showTranscript)\r\n\r\n    const contextValue = useMemo(function memoizeContextValue() {\r\n        return {\r\n            search,\r\n            setSearch,\r\n\r\n            searchResult,\r\n            setSearchResult,\r\n\r\n            showBotSuggestions,\r\n            toggleBotSuggestions,\r\n\r\n            showSMS,\r\n            toggleSMS,\r\n\r\n            showTranscript,\r\n            toggleTranscript,\r\n        }\r\n    }, [search, searchResult, showBotSuggestions, showSMS, showTranscript, toggleBotSuggestions, toggleSMS, toggleTranscript])\r\n\r\n    return <VoiceTranscriptUIContext.Provider value={contextValue}>{children}</VoiceTranscriptUIContext.Provider>\r\n}\r\n\r\nexport function useVoiceTranscriptUIState() {\r\n    return useContext(VoiceTranscriptUIContext)\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {\r\n    ButtonIcon,\r\n    IconIntentFilled,\r\n    IconMessageExternal,\r\n    IconVoiceTranscript,\r\n    SearchField,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SearchResultsSwitcher} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {VoiceTranscriptMessageContentMap, VoiceTranscriptSearchResultType} from '../../../types'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype FiltersProps = {\r\n    className?: string\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    itemId: string\r\n}\r\n\r\nexport const Filters: FC<FiltersProps> = ({className, messagesContent, itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        search,\r\n        setSearch,\r\n        setSearchResult,\r\n        showBotSuggestions,\r\n        showSMS,\r\n        showTranscript,\r\n        toggleBotSuggestions,\r\n        toggleSMS,\r\n        toggleTranscript,\r\n    } = useVoiceTranscriptUIState()\r\n\r\n    const [searchLocal, setSearchLocal] = useState(search)\r\n    const [highlightIndex, setHighlightIndex] = useState<number | undefined>(undefined)\r\n\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n\r\n    const setDebouncedSearch = useMemo(() => debounce((innerValue: string) => {\r\n        setSearch(innerValue)\r\n    }, 500), [setSearch])\r\n\r\n    const filteredResults = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            if (!search) {\r\n                return []\r\n            }\r\n            return Object.entries(messagesContent).reduce<VoiceTranscriptSearchResultType[]>((result, [messageId, {marksCount}]) => {\r\n                const markers = Array.from({length: marksCount}).map((_, index) => ({\r\n                    messageId,\r\n                    index,\r\n                })).reverse()\r\n                return [...markers, ...result]\r\n            }, [])\r\n\r\n        },\r\n        [search, messagesContent],\r\n    )\r\n\r\n    useEffect(() => {\r\n        setDebouncedSearch(searchLocal)\r\n    }, [searchLocal, setDebouncedSearch])\r\n\r\n    useEffect(() => {\r\n        if (highlightIndex) {\r\n            const searchResult = filteredResults[highlightIndex - 1]\r\n            setSearchResult(searchResult)\r\n            if (searchResult && searchResult.messageId) {\r\n                scrollerApi?.scrollTo(searchResult.messageId, 'center')\r\n            }\r\n        } else {\r\n            setSearchResult(undefined)\r\n        }\r\n    }, [filteredResults, scrollerApi, highlightIndex, setSearchResult])\r\n\r\n\r\n    const handleHighlight = useCallback(\r\n        function handleHighlightedMessageCallback(position: number) {\r\n            setHighlightIndex(position)\r\n        },\r\n        [],\r\n    )\r\n\r\n    const handleSearch = useCallback(\r\n        function handleSearchCallback(evt: ChangeEvent<HTMLInputElement>) {\r\n            setSearchLocal(evt.target.value)\r\n            setHighlightIndex(1)\r\n        },\r\n        [],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn('flex items-center gap-2 px-4 py-2 bg-primary-background', className)}>\r\n            <SearchField\r\n                value={searchLocal}\r\n                onChange={handleSearch}\r\n                layoutClassName=\"grow\"\r\n                placeholder={t.EXTERNAL_CHAT.search_transcript()}\r\n            />\r\n            {!!searchLocal &&\r\n              <SearchResultsSwitcher current={highlightIndex || 0} total={filteredResults.length} onChange={handleHighlight} />\r\n            }\r\n            <div className=\"flex items-center gap-0.5\">\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showBotSuggestions}\r\n                    onClick={toggleBotSuggestions}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.bot_suggestion_btn_tooltip()}\r\n                >\r\n                    <IconIntentFilled className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showSMS}\r\n                    onClick={toggleSMS}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.sms_btn_tooltip()}\r\n                >\r\n                    <IconMessageExternal className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.transcript_btn_tooltip()}\r\n                    disabled={!showTranscript}\r\n                    onClick={toggleTranscript}\r\n                    className=\"rounded-xs\"\r\n                >\r\n                    <IconVoiceTranscript className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"voiceTranscript_VoiceTranscript_root_rV7hU\",\"list\":\"voiceTranscript_VoiceTranscript_list_OyGEE\",\"selectionContainer\":\"voiceTranscript_VoiceTranscript_selectionContainer_ftUaB\",\"filters\":\"voiceTranscript_VoiceTranscript_filters_Ik63Q\",\"filtersRight\":\"voiceTranscript_VoiceTranscript_filtersRight_hhmng\",\"searchInput\":\"voiceTranscript_VoiceTranscript_searchInput_eIydo\",\"filterButton\":\"voiceTranscript_VoiceTranscript_filterButton_fuvI7\",\"mark\":\"voiceTranscript_VoiceTranscript_mark_t17ja\",\"highlighted\":\"voiceTranscript_VoiceTranscript_highlighted_6A15l\"};","import {useMemo} from 'react'\r\nimport {orderBy} from 'lodash-es'\r\n\r\nimport type {ChatMessage as ChatMessageType, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {chatMessageToVoiceTranscript} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype UseVoiceTranscriptVisibleMessagesParams = {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[]\r\n    botSuggestions: VoiceTranscriptSuggestion[]\r\n    chatMessages: ChatMessageType[]\r\n}\r\nexport function useVoiceTranscriptVisibleMessages({chatMessages, voiceTranscript, botSuggestions}: UseVoiceTranscriptVisibleMessagesParams) {\r\n    const {showBotSuggestions, showTranscript, showSMS} = useVoiceTranscriptUIState()\r\n\r\n    const visibleMessages = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            const allMessages = showSMS\r\n                ? orderBy([...voiceTranscript, ...botSuggestions, ...getSMSMessagesForTranscript()], 'endTime')\r\n                : [...voiceTranscript]\r\n\r\n            return allMessages.filter(m => {\r\n                return filterByType(m.type)\r\n            })\r\n\r\n            function filterByType(type: VoiceTranscriptMessageType) {\r\n                const allowType = {\r\n                    voiceTranscriptMessage: showTranscript,\r\n                    suggestion: showBotSuggestions,\r\n                    chatMessage: showSMS,\r\n                }\r\n\r\n                return allowType[type]\r\n            }\r\n\r\n            function getSMSMessagesForTranscript(): VoiceTranscriptCommonMessage[] {\r\n                return chatMessages.filter(message => message.displayType === 'message' || message.displayType === 'error').map(chatMessageToVoiceTranscript)\r\n            }\r\n        },\r\n\r\n\r\n        [botSuggestions, chatMessages, showBotSuggestions, showSMS, showTranscript, voiceTranscript],\r\n    )\r\n\r\n    return visibleMessages\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ChatScrollNodeType} from '../../../../types'\r\nimport type {MessageAdditionalProps} from './Message'\r\nimport {Message} from './Message'\r\n\r\n\r\ntype ChatMessageProps = MessageAdditionalProps & {\r\n    itemContactId?: string\r\n    itemInteractionStepId?: string\r\n    isDIDChat: boolean\r\n    scrollNode: ChatScrollNodeType\r\n    message: ChatSessionTranscriptMessage\r\n}\r\nexport const ChatMessage: FC<ChatMessageProps> = ({\r\n    itemContactId = '',\r\n    itemInteractionStepId = '',\r\n    scrollNode,\r\n    isDIDChat,\r\n    message,\r\n    ...restProps\r\n}) => {\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId: message.msgId,\r\n        itemInteractionStepId,\r\n        itemContactId,\r\n\r\n        scrollNode,\r\n        source: message.chatMessageData.source,\r\n        isRead: message.chatMessageData.isRead,\r\n        isDIDChat,\r\n    })\r\n\r\n    return <Message message={message} {...restProps} ref={ref} />\r\n}\r\n","import {useCallback, useEffect, useMemo, useRef} from 'react'\r\n\r\nimport {\r\n    useInteractionChatStateMethods,\r\n    useInteractionChatStateSelector,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessageSource} from '@bpinc/ad-interaction-message-types'\r\nimport {useIntersectionObserver, usePageVisibility} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatScrollNodeType, HistoryMessage} from '../types'\r\n\r\n\r\ninterface UseMarkAsReadVisibilitySensor {\r\n    msgId?: string | undefined\r\n    scrollNode: ChatScrollNodeType\r\n    mediaType?: HistoryMessage['mediaType']\r\n    source?: MessageSource\r\n    isRead?: boolean\r\n    historyMessageGlobalInteractionId?: string\r\n\r\n    isDIDChat: boolean\r\n    itemGlobalInteractionId?: string\r\n    itemInteractionStepId: string\r\n    itemContactId: string\r\n}\r\n\r\nexport function useMarkAsReadVisibilitySensor({\r\n    msgId,\r\n    scrollNode,\r\n    mediaType,\r\n    isDIDChat,\r\n    itemInteractionStepId,\r\n    itemContactId,\r\n    itemGlobalInteractionId,\r\n    source,\r\n    isRead,\r\n    historyMessageGlobalInteractionId,\r\n}: UseMarkAsReadVisibilitySensor) {\r\n\r\n    const pageIsVisible = usePageVisibility()\r\n\r\n    const {markMessageAsRead, markPersonalMessageAsRead} = useInteractionChatStateMethods()\r\n\r\n    const unreadActivityHistory = useInteractionChatStateSelector(\r\n        s =>\r\n            !!itemContactId &&\r\n            !!msgId &&\r\n            !!historyMessageGlobalInteractionId &&\r\n            !!s.unreadPersonalMessages[itemContactId]?.[historyMessageGlobalInteractionId]?.[msgId],\r\n    )\r\n\r\n    const visibilitySensorIsActive = useMemo(() => {\r\n        if (!pageIsVisible) {\r\n            return false\r\n        }\r\n\r\n        if (isActivityHistoryMessage()) {\r\n            return unreadActivityHistory\r\n        }\r\n\r\n        return itemIsActivated() && isNotServiceMessage() && !isRead\r\n\r\n        function isActivityHistoryMessage() {\r\n            return mediaType\r\n        }\r\n        function itemIsActivated() {\r\n            return !!itemInteractionStepId\r\n        }\r\n\r\n        function isNotServiceMessage() {\r\n            return source === 'customer' || source === 'agent'\r\n        }\r\n    }, [itemInteractionStepId, isRead, mediaType, pageIsVisible, source, unreadActivityHistory])\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    const {isIntersecting} = useIntersectionObserver(ref, {\r\n        root: scrollNode,\r\n        enabled: visibilitySensorIsActive,\r\n    })\r\n\r\n    const markAsRead = useCallback(\r\n        function handleVisibleCallback(visible: boolean) {\r\n            if (visible) {\r\n                if (unreadActivityHistory) {\r\n                    if (historyMessageGlobalInteractionId) {\r\n                        markPersonalMessageAsRead({\r\n                            globalInteractionId: historyMessageGlobalInteractionId,\r\n                            messageId: msgId!,\r\n                            contactId: itemContactId,\r\n                        })\r\n                    }\r\n                } else if (msgId) {\r\n                    if (itemInteractionStepId) {\r\n                        markMessageAsRead({\r\n                            interactionStepId: itemInteractionStepId,\r\n                            messageId: msgId,\r\n                        })\r\n                    }\r\n                    if (itemGlobalInteractionId) {\r\n                        if (isDIDChat && itemContactId) {\r\n                            markPersonalMessageAsRead({\r\n                                globalInteractionId: itemGlobalInteractionId,\r\n                                messageId: msgId,\r\n                                contactId: itemContactId,\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [\r\n            unreadActivityHistory,\r\n            msgId,\r\n            markPersonalMessageAsRead,\r\n            historyMessageGlobalInteractionId,\r\n            itemContactId,\r\n            itemInteractionStepId,\r\n            itemGlobalInteractionId,\r\n            markMessageAsRead,\r\n            isDIDChat,\r\n        ],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (isIntersecting && visibilitySensorIsActive) {\r\n            markAsRead(true)\r\n        }\r\n    }, [markAsRead, isIntersecting, visibilitySensorIsActive])\r\n\r\n    return ref\r\n}\r\n","import type {FC, ReactNode} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\ntype SearchResultHighlightProps = {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const SearchResultHighlight: FC<SearchResultHighlightProps> = ({messageId, children}) => {\r\n    const {searchResult} = useVoiceTranscriptUIState()\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (ref.current && searchResult && searchResult.messageId === messageId) {\r\n            const highlightedMarkElem = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            highlightedMarkElem.classList.add(styles.highlighted)\r\n\r\n            const markElement = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            markElement?.scrollIntoView({block: 'center'})\r\n\r\n            return () => highlightedMarkElem.classList.remove(styles.highlighted)\r\n        }\r\n    }, [messageId, searchResult])\r\n\r\n    return (\r\n        <div ref={ref} data-message-highlight={messageId}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType, VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {isVoiceTranscriptMessage} from '../../../types'\r\nimport {VirtualizedMessages} from '../VirtualizedMessages/VirtualizedMessages'\r\nimport {ChatMessage} from './messages/ChatMessage'\r\nimport {Message} from './messages/Message'\r\nimport {SearchResultHighlight} from './SearchResultHighlight'\r\n\r\n\r\ntype VirtualizedVoiceTranscriptMessagesProps = {\r\n    messages: VoiceTranscriptCommonMessage[]\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    interactionStepId: string\r\n}\r\n\r\nexport const VirtualizedVoiceTranscriptMessages = React.memo<VirtualizedVoiceTranscriptMessagesProps>(\r\n    function VirtualizedVoiceTranscriptMessages({\r\n        itemId,\r\n        contactId,\r\n        scrollNode,\r\n        messages,\r\n        interactionStepId,\r\n        messagesContent,\r\n    }) {\r\n        const isDIDChat = useInteractionProp(itemId, item => item?.scenarioData?.isDID ?? false)\r\n\r\n        const renderMessage = useCallback((message: ChatCommonMessagesType) => {\r\n            if (!isVoiceTranscriptMessage(message)) {\r\n                return null\r\n            }\r\n\r\n            const messageId = getMessageId(message)\r\n            const messageData = messagesContent[messageId]\r\n\r\n            if (!messageData) {\r\n                return null\r\n            }\r\n\r\n            const direction =\r\n                message.isSelf || message.type === 'suggestion'\r\n                    ? 'outgoing'\r\n                    : 'incoming'\r\n\r\n            return (\r\n                <SearchResultHighlight messageId={messageId}>\r\n                    <div data-message=\"true\">\r\n                        {\r\n                            isCurrentChatTranscriptMessage(message) ? (\r\n                                <ChatMessage\r\n                                    isDIDChat={isDIDChat}\r\n                                    scrollNode={scrollNode}\r\n                                    itemContactId={contactId}\r\n                                    itemInteractionStepId={interactionStepId}\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            ) : (\r\n                                <Message\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </SearchResultHighlight>\r\n            )\r\n        }, [contactId, interactionStepId, isDIDChat, itemId, messagesContent, scrollNode])\r\n\r\n        return (\r\n            <VirtualizedMessages\r\n                key={`${itemId}_transcript`}\r\n                itemId={itemId}\r\n                contactId={contactId}\r\n                type=\"transcript\"\r\n                messages={messages}\r\n                renderMessage={renderMessage}\r\n                scrollNode={scrollNode}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport type {ChatMessage as ChatMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId, getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesSelectionActions} from '../ChatMessagesActions'\r\nimport {Filters} from './Filters'\r\nimport {useVoiceTranscriptMessagesContentMap} from './useVoiceTranscriptMessagesContentMap'\r\nimport {useVoiceTranscriptVisibleMessages} from './useVoiceTranscriptVisibleMessages'\r\nimport {VirtualizedVoiceTranscriptMessages} from './VirtualizedVoiceTranscriptMessages'\r\n\r\n\r\ninterface VoiceTranscriptProps {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[] | undefined\r\n    botSuggestions: VoiceTranscriptSuggestion[] | undefined\r\n    chatMessages: ChatMessageType[] | undefined\r\n    itemId: string\r\n    className?: string\r\n    filtersClassName?: string\r\n}\r\n\r\nconst emptyChatMessages: ChatMessageType[] = []\r\nconst emptyTranscript: VoiceTranscriptCommonMessage[] = []\r\nconst emptySuggestions: VoiceTranscriptSuggestion[] = []\r\n\r\nexport const VoiceTranscript: FC<VoiceTranscriptProps> = ({\r\n    chatMessages = emptyChatMessages,\r\n    voiceTranscript = emptyTranscript,\r\n    botSuggestions = emptySuggestions,\r\n    itemId,\r\n    className,\r\n    filtersClassName,\r\n}) => {\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const [scrollNode, setScrollNode] = useState<ChatScrollNodeType>(null)\r\n    const interaction = useInteraction(itemId)\r\n    const contactId = getContactId(interaction)\r\n    const interactionStepId = getInteractionStepId(interaction)\r\n\r\n    const visibleMessages = useVoiceTranscriptVisibleMessages({voiceTranscript, chatMessages, botSuggestions})\r\n    const messagesContent = useVoiceTranscriptMessagesContentMap(visibleMessages, itemId)\r\n\r\n    const itemsIds = useMemo(() => visibleMessages.map(getMessageId), [visibleMessages])\r\n    const itemsIdsRef = useAsRef(itemsIds)\r\n    const itemsProvider = useCallback(() => itemsIdsRef.current, [itemsIdsRef])\r\n    const onItemSelect = useCallback((id: string) => {\r\n        scrollerApi?.scrollTo(id, 'center')\r\n    }, [scrollerApi])\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-col', className)}>\r\n            <Filters className={filtersClassName} messagesContent={messagesContent} itemId={itemId} />\r\n            <SelectionContainer\r\n                startFrom=\"bottom\"\r\n                className=\"mt-1 flex h-0 flex-auto flex-col\"\r\n                itemsListProvider={itemsProvider}\r\n                onItemSelect={onItemSelect}\r\n            >\r\n                <div\r\n                    className=\"relative mr-1.5 flex-auto overflow-y-auto overflow-x-hidden pl-4 pr-2\"\r\n                    ref={setScrollNode}\r\n                >\r\n                    <ChatMessagesSelectionActions messages={visibleMessages} interactionId={itemId} scrollContainer={scrollNode}>\r\n                        <VirtualizedVoiceTranscriptMessages\r\n                            itemId={itemId}\r\n                            contactId={contactId}\r\n                            messages={visibleMessages}\r\n                            interactionStepId={interactionStepId}\r\n                            scrollNode={scrollNode}\r\n                            messagesContent={messagesContent}\r\n                        />\r\n                    </ChatMessagesSelectionActions>\r\n                </div>\r\n            </SelectionContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {normalizeByUrlParser} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {highlightHTML} from '@bpinc/lib-html-utils'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {parseTranscriptLinksAsHTML} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\nexport function useVoiceTranscriptMessagesContentMap(messages: VoiceTranscriptCommonMessage[], itemId: string) {\r\n    const {search} = useVoiceTranscriptUIState()\r\n\r\n    return useMemo(() => {\r\n        return messages.reduce<VoiceTranscriptMessageContentMap>((result, message) => {\r\n            const {format = 'TEXT'} = message\r\n            const id = getMessageId(message)\r\n            let text = message.text\r\n\r\n            const isCurrentChatMessage = isCurrentChatTranscriptMessage(message)\r\n            if (isCurrentChatMessage) {\r\n                text = normalizeByUrlParser(message.text)\r\n            }\r\n\r\n            const parsedText = format === 'TEXT'\r\n                ? text\r\n                : parseTranscriptLinksAsHTML({\r\n                    text: message.text,\r\n                    target: itemId,\r\n                    url: message.suggestionURL || '',\r\n                })\r\n\r\n\r\n            const content = highlightHTML({html: parsedText, textToHighlight: search, className: styles.mark})\r\n            const marksCount = (content.match(new RegExp(escapeRegExp(styles.mark), 'g')) || []).length\r\n\r\n            result[id] = {\r\n                content,\r\n                marksCount,\r\n                isLink: isLinkSuggestion(message),\r\n                isHTML: isHTMLSuggestion(message),\r\n            }\r\n\r\n            return result\r\n        }, {})\r\n    }, [itemId, messages, search])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconArrowDown8, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {getChannelImageIcon, PhoneOption} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useInitializeDefaultChannelEffect} from './useInitializeDefaultChannelEffect'\r\n\r\n\r\ninterface ChannelSelectorProps {\r\n    disabled?: boolean\r\n}\r\n\r\nexport const ChannelSelector: React.FC<ChannelSelectorProps> = React.memo(\r\n    function ChannelSelector({disabled}) {\r\n        const itemId = useInteractionId()\r\n\r\n        useInitializeDefaultChannelEffect()\r\n\r\n        const {channelOptions, getSelectedChannel, getSelectedPhone, setSelectedChannel} =\r\n            useChannelState()\r\n\r\n        const selectedPhone = getSelectedPhone(itemId)\r\n        const selectedChannel = getSelectedChannel(itemId)\r\n        /*\r\n         * Use effect that ensures a valid channel is selected when the channel options change.\r\n         * If no channel is currently selected or the selected channel is not present in the updated\r\n         * options, then the first option is selected as the new current channel.\r\n         */\r\n        useEffect(\r\n            function selectFirstValidChannel() {\r\n                if (\r\n                    channelOptions.length &&\r\n                    (!selectedChannel?.value ||\r\n                        channelOptions.every(\r\n                            o => o.value !== selectedChannel.value,\r\n                        ))\r\n                ) {\r\n                    setSelectedChannel(itemId, channelOptions[0])\r\n                }\r\n            },\r\n            [channelOptions, itemId, selectedChannel?.value, setSelectedChannel],\r\n        )\r\n\r\n\r\n        const show = useBoolean()\r\n\r\n        useEscapeManager(show.setFalse, {enabled: show.value})\r\n\r\n        if (!channelOptions.length) {\r\n            return null\r\n        }\r\n\r\n        const SelectedIcon = getChannelImageIcon(selectedChannel?.value)\r\n        const finalDisabled =\r\n            disabled ||\r\n            (channelOptions.length < 2 &&\r\n                (channelOptions[0]?.phones?.length ?? 0) < 2)\r\n\r\n        return (\r\n            <TriggerDropdown\r\n                open={show.value}\r\n                onOpenChange={show.toggle}\r\n                disabled={finalDisabled}\r\n                className=\"min-w-[168px]\"\r\n                modal={false}\r\n                side=\"top\"\r\n                onEscapeKeyDown={e => {\r\n                    e.stopPropagation()\r\n                }}\r\n                align=\"start\"\r\n                data-testid=\"channel-selector\"\r\n                options={\r\n                    <>\r\n                        {channelOptions.map(channel => {\r\n                            function renderChannel() {\r\n                                const Icon = getChannelImageIcon(channel.value)\r\n                                return (\r\n                                    <>\r\n                                        {Icon && (\r\n                                            <Icon className=\"icon-neutral\" />\r\n                                        )}\r\n                                        {channel.text}\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                            return channel.phones ? (\r\n                                <TriggerDropdown.Sub key={channel.value}>\r\n                                    <TriggerDropdown.SubTrigger contentClassName=\"flex items-center gap-2\">\r\n                                        {renderChannel()}\r\n                                    </TriggerDropdown.SubTrigger>\r\n                                    <TriggerDropdown.SubContent>\r\n                                        {channel.phones.map(phone => (\r\n                                            <TriggerDropdown.Item\r\n                                                asChild={false}\r\n                                                data-selected={phone.id === selectedPhone?.id}\r\n                                                aria-selected={phone.id === selectedPhone?.id}\r\n                                                onClick={() => {\r\n                                                    setSelectedChannel(\r\n                                                        itemId,\r\n                                                        channel,\r\n                                                        phone.id,\r\n                                                    )\r\n                                                }}\r\n                                                key={phone.id}\r\n                                            >\r\n                                                <PhoneOption\r\n                                                    value={phone.phone}\r\n                                                    type={phone.type}\r\n                                                />\r\n                                            </TriggerDropdown.Item>\r\n                                        ))}\r\n                                    </TriggerDropdown.SubContent>\r\n                                </TriggerDropdown.Sub>\r\n                            ) : (\r\n                                <TriggerDropdown.Item\r\n                                    onClick={() => {\r\n                                        setSelectedChannel(itemId, channel)\r\n                                    }}\r\n                                    key={channel.value}\r\n                                    asChild={false}\r\n                                    contentClassName=\"flex gap-2\"\r\n                                >\r\n                                    {renderChannel()}\r\n                                </TriggerDropdown.Item>\r\n                            )\r\n                        })}\r\n                    </>\r\n                }\r\n            >\r\n                <CircleButton className=\"group flex w-auto shrink-0 gap-0.5 p-[7.5px]\">\r\n                    {SelectedIcon && <SelectedIcon />}\r\n                    {!finalDisabled && (\r\n                        <IconArrowDown8 className=\"group-data-[state=open]:rotate-180\" />\r\n                    )}\r\n                </CircleButton>\r\n            </TriggerDropdown>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, hasMultiplyPhones} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport type {ChannelOption} from '../../../channel-context/types'\r\n\r\n\r\nexport function useInitializeDefaultChannelEffect() {\r\n    const itemId = useInteractionId()\r\n    const itemChannel = useAssociatedChatInteractionProp(itemId, getChannel)\r\n    const phoneNumber = useAssociatedChatInteractionProp(itemId, chatActiveItem => chatActiveItem?.displayData?.number)\r\n    const itemHasMultiplyPhones = useAssociatedChatInteractionProp(itemId, hasMultiplyPhones)\r\n\r\n    const {isTouched, setIsTouched, channelOptions, setSelectedChannel} = useChannelState()\r\n\r\n    //-------Initialize default channel-----//\r\n    /* based on item's multiply phones and own channel */\r\n    const defaultChannel = useMemo(\r\n        function memoizeDefaultChannel() {\r\n            if (itemChannel) {\r\n                return itemHasMultiplyPhones ? getChannelWhenMultiplyPhones() : getChannelWhenOnePhone()\r\n            }\r\n\r\n            if (itemHasMultiplyPhones && phoneNumber) {\r\n                return getChannelWhenMultiplyPhones()\r\n            }\r\n\r\n            return getSMSChannel()\r\n\r\n            function getChannelWhenMultiplyPhones() {\r\n                return (\r\n                    channelOptions.find((item: ChannelOption) =>\r\n                        !itemChannel || itemChannel === 'sms'\r\n                            ? new RegExp(escapeRegExp(phoneNumber) ?? '').test(item.value)\r\n                            : item.value === itemChannel,\r\n                    ) || channelOptions[0]\r\n                )\r\n            }\r\n\r\n            function getChannelWhenOnePhone() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === itemChannel)\r\n            }\r\n\r\n            function getSMSChannel() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === 'sms')\r\n            }\r\n        },\r\n        [itemChannel, itemHasMultiplyPhones, phoneNumber, channelOptions],\r\n    )\r\n\r\n    const currentItemTouched = isTouched(itemId)\r\n\r\n    useEffect(function selecteDefaultChannel() {\r\n        if (!currentItemTouched && defaultChannel) {\r\n            setSelectedChannel(itemId, defaultChannel)\r\n        }\r\n    }, [currentItemTouched, defaultChannel, itemId, setIsTouched, setSelectedChannel])\r\n\r\n}\r\n","import type {FormEvent, SyntheticEvent} from 'react'\r\nimport React, {useRef} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {CircleButton, FieldFrame, IconSendFilled} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {AttachmentsList, ContentEditable} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useAgentTypingDetect} from './useAgentTypingDetect'\r\nimport {useAttachmentsList} from './useAttachmentsList'\r\nimport {useHasMultipleLines} from './useHasMultipleLines'\r\n\r\n\r\ntype ChatTextAreaProps = {\r\n    currentMessage: string\r\n    handleKeyDown(evt: SyntheticEvent): void\r\n    handleChange(evt: FormEvent<HTMLElement>, value?: string): void\r\n    sendCurrentMessage: () => void\r\n    disabled?: boolean\r\n    interactionStepId?: string\r\n    itemId: string\r\n    isExternalChat?: boolean\r\n}\r\n\r\nexport const TEXT_AREA_DATA_ID = 'chat-input'\r\n\r\nexport const ChatTextArea: React.FC<ChatTextAreaProps> = React.memo(\r\n    function TextArea({\r\n        currentMessage,\r\n        handleKeyDown,\r\n        handleChange,\r\n        disabled,\r\n        isExternalChat,\r\n        interactionStepId,\r\n        sendCurrentMessage,\r\n        itemId,\r\n    }) {\r\n        const isAttachmentsListReady = useChatAttachmentsUIState(\r\n            'isAttachmentsListReady',\r\n        )\r\n        const chatItem = useInteraction(itemId)\r\n        assertDefined(chatItem)\r\n\r\n        const partyWithoutAddress =\r\n            chatItem?.itemKind === 'potential'\r\n                ? !chatItem.contactId && !chatItem?.displayData?.number\r\n                : false\r\n\r\n        const {t} = useLocalizationState()\r\n        const handleBlur = useAgentTypingDetect([currentMessage], {\r\n            interactionStepId,\r\n            isExternalChat,\r\n        })\r\n        const {getSelectedChannel} = useChannelState()\r\n\r\n        const isSmsChannel =\r\n            getSelectedChannel(itemId)?.value.startsWith('sms')\r\n\r\n        const attachmentsList = useAttachmentsList(itemId)\r\n\r\n        const sendButtonDisabled =\r\n            !isAttachmentsListReady(interactionStepId ?? '') ||\r\n            isAfterCallWork(chatItem) ||\r\n            partyWithoutAddress ||\r\n            (!currentMessage.trim() && !attachmentsList.length)\r\n\r\n        const removeAttachment = useChatAttachmentsUIState('removeAttachment')\r\n        const contentEditableRef = useRef<HTMLDivElement>(null)\r\n        const hasMultipleLines = useHasMultipleLines(contentEditableRef)\r\n        assertDefined(interactionStepId)\r\n\r\n        return (\r\n            <FieldFrame\r\n                disabled={disabled}\r\n                contentClassName=\"p-0 overflow-hidden\"\r\n                className=\"max-h-36 flex-auto items-end overflow-hidden px-2 py-1.5\"\r\n                data-testid=\"chat-text-area\"\r\n            >\r\n                <div className=\"flex flex-auto flex-col gap-1 overflow-hidden\">\r\n                    <AttachmentsList\r\n                        className={tcn('flex flex-wrap gap-1 overflow-auto', {\r\n                            'flex-nowrap': hasMultipleLines,\r\n                        })}\r\n                        list={attachmentsList}\r\n                        removeAttachment={removeAttachment}\r\n                        attachmentsListGroupId={interactionStepId}\r\n                    />\r\n                    <div className=\"flex cursor-text items-end overflow-hidden\">\r\n                        <ContentEditable\r\n                            ref={contentEditableRef}\r\n                            data-testid=\"chat-text-area-input\"\r\n                            onKeyDown={handleKeyDown}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className=\"h-full w-full overflow-auto\"\r\n                            placeholder={t.INTERNAL_CHAT.message_input_placeholder()}\r\n                            plainTextOnly={isSmsChannel}\r\n                            data-id={TEXT_AREA_DATA_ID}\r\n                            value={currentMessage}\r\n                            disabled={disabled}\r\n                        />\r\n                        <CircleButton\r\n                            className={tcn(\r\n                                'size-6 state-layer-bg-primary-600',\r\n                                'hover:state-layer-mix-dark-on-teal-1',\r\n                                'focus-visible:state-layer-mix-dark-on-teal-2',\r\n                                'active:state-layer-mix-dark-on-teal-3',\r\n                                {\r\n                                    'bg-primary-container-disabled':\r\n                                        sendButtonDisabled,\r\n                                },\r\n                            )}\r\n                            onClick={sendCurrentMessage}\r\n                            tooltip={{\r\n                                content:\r\n                                    t.EXTERNAL_CHAT.send_message_btn_tooltip(),\r\n                            }}\r\n                            disabled={sendButtonDisabled}\r\n                            //TODO: Add throttle\r\n                            // clickThrottle={500}\r\n                            data-testid=\"send-button\"\r\n                        >\r\n                            <IconSendFilled\r\n                                className={tcn('size-4 icon-reversed', {\r\n                                    'icon-disabled': sendButtonDisabled,\r\n                                })}\r\n                            />\r\n                        </CircleButton>\r\n                    </div>\r\n                </div>\r\n            </FieldFrame>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\n\r\n\r\ninterface UseAgentTypingDetectParams {\r\n    interactionStepId?: string\r\n    isExternalChat?: boolean\r\n}\r\nexport function useAgentTypingDetect(dependencies: unknown[], {interactionStepId = '', isExternalChat}: UseAgentTypingDetectParams) {\r\n    const [timerValue, setTimerValue] = useState<number>(0)\r\n    const [isTyping, setTyping] = useState<boolean>(false)\r\n    const [isSending, setSendingValue] = useState<boolean>(false)\r\n    const {sendAgentIsTyping, sendAgentIsNotTyping} = useInteractionChatStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            const interval = setInterval(() => {\r\n                setTimerValue(currentTimerValue => currentTimerValue + 1)\r\n            }, 1000)\r\n            return () => clearInterval(interval)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isExternalChat])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            let timeout: number\r\n\r\n            if (!isTyping) {\r\n                setTyping(true)\r\n                setSendingValue(false)\r\n            }\r\n            setTimerValue(0)\r\n            if (!isSending) {\r\n                if (dependencies.filter(Boolean).length) {\r\n                    sendAgentIsTyping(interactionStepId)\r\n                }\r\n                setSendingValue(true)\r\n                timeout = setTimeout(() => {\r\n                    setSendingValue(false)\r\n                }, 5000)\r\n            }\r\n\r\n            return () => clearTimeout(timeout)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [...dependencies, isExternalChat])\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat && timerValue > 10 && isTyping) {\r\n            sendAgentIsNotTyping(interactionStepId)\r\n            setTyping(false)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isTyping, interactionStepId, sendAgentIsNotTyping, timerValue, isExternalChat])\r\n\r\n    function stopTyping() {\r\n        setTyping(false)\r\n        sendAgentIsNotTyping(interactionStepId)\r\n    }\r\n\r\n    function empty() {\r\n        return\r\n    }\r\n\r\n    return isExternalChat ? stopTyping : empty\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\n\r\n\r\nexport function useAttachmentsList(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const getAttachmentsList = useChatAttachmentsUIState('getAttachmentsList')\r\n\r\n    return useMemo(function memoizeAttachmentsList() {\r\n        return getAttachmentsList(interactionStepId)\r\n    }, [getAttachmentsList, interactionStepId])\r\n\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useHasMultipleLines(contentEditableRef: React.RefObject<HTMLElement>) {\r\n    const [hasMultipleLines, setHasMultipleLines] = useState(false)\r\n    const contentEditableROEntry = useResizeObserver(contentEditableRef)\r\n\r\n    useEffect(() => {\r\n        if (contentEditableROEntry) {\r\n            const lineHeight = computeLineHeight(\r\n                contentEditableROEntry.target,\r\n            )\r\n            const height = computeHeight(contentEditableROEntry.target)\r\n\r\n            setHasMultipleLines(height > lineHeight)\r\n        }\r\n\r\n        function computeLineHeight(element: Element) {\r\n            const result =\r\n              parseFloat(window.getComputedStyle(element).lineHeight) ||\r\n              0\r\n            return isNaN(result) ? 0 : result\r\n        }\r\n\r\n        function computeHeight(element: Element) {\r\n            return element.clientHeight\r\n        }\r\n    }, [contentEditableROEntry])\r\n\r\n    return hasMultipleLines\r\n\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useSetAtom} from 'jotai'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {getInteractionStepId, isCall, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {not, useDidUnmount} from '@bpinc/lib-helpers'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {type InjectedFileInputProps, withFileInput} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {getFileRejection} from '../../../helpers'\r\nimport {useInitiateChatByAttachment} from '../../../hooks/useInitiateChatByAttachment'\r\nimport {UploadErrorModal} from './UploadErrorModal'\r\n\r\n\r\ninterface InvisibleAttachButtonProps {\r\n    disabled?: boolean\r\n    chatItem: Item\r\n    buttonElementAtom: PrimitiveAtom<HTMLButtonElement | null>\r\n}\r\n\r\n/** It's invisible, and uncontrolled like every other file input element.\r\n * To control it, you need to pass the buttonElementAtom throuth the props\r\n * Ane later you can use the buttonElementAtom to trigger the click event like this:\r\n * const buttonElement = useAtomValue(buttonElementAtom)\r\n * buttonElement?.click()\r\n */\r\nexport const InvisibleAttachButton: React.FC<InvisibleAttachButtonProps> = ({\r\n    disabled = false,\r\n    chatItem,\r\n    buttonElementAtom,\r\n}) => {\r\n    const setAttachmentButtonElement = useSetAtom(buttonElementAtom)\r\n\r\n    const {\r\n        addAttachment,\r\n        fileRejections,\r\n        setFileRejections,\r\n        isAttachmentsListReady,\r\n        getAttachmentsList,\r\n    } = useChatAttachmentsUIState([\r\n        'addAttachment',\r\n        'fileRejections',\r\n        'setFileRejections',\r\n        'isAttachmentsListReady',\r\n        'getAttachmentsList',\r\n    ])\r\n    const shouldInitiateChat =\r\n        isPotentialInteraction(chatItem) || isCall(chatItem)\r\n    const interactionStepId = getInteractionStepId(chatItem)\r\n\r\n    const {t} = useLocalizationState()\r\n    const openUploadErrorModal = useModalComponentOpener(UploadErrorModal)\r\n    const handleUploadFiles = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            addFilesToAttachmentsList()\r\n\r\n            function addFilesToAttachmentsList() {\r\n                const files = getFilesFromEvent()\r\n                if (!files) {\r\n                    return\r\n                }\r\n\r\n                const getLocalizedFileError = partial(getFileRejection, t)\r\n                const fileRejection = truthy(files.map(getLocalizedFileError))\r\n                const validFiles = files.filter(not(getLocalizedFileError))\r\n\r\n                if (fileRejection.length) {\r\n                    openUploadErrorModal({\r\n                        rejection: fileRejection,\r\n                        totalFilesAmount: files.length,\r\n                    })\r\n                }\r\n\r\n                if (interactionStepId) {\r\n                    validFiles.forEach(\r\n                        partial(addAttachment, interactionStepId),\r\n                    )\r\n                }\r\n            }\r\n\r\n            function getFilesFromEvent() {\r\n                const input = event.target\r\n                return input.files ? Array.from(input.files) : []\r\n            }\r\n        },\r\n        [addAttachment, interactionStepId, openUploadErrorModal, t],\r\n    )\r\n\r\n    useEffect(\r\n        function showRejections() {\r\n            if (isAttachmentsListReady(interactionStepId) && fileRejections.length) {\r\n                openUploadErrorModal({\r\n                    rejection: fileRejections,\r\n                    onCloseCallback: () => setFileRejections([]),\r\n                    totalFilesAmount:\r\n                        getAttachmentsList(interactionStepId).length +\r\n                        fileRejections.length,\r\n                })\r\n            }\r\n        },\r\n        [\r\n            fileRejections,\r\n            getAttachmentsList,\r\n            interactionStepId,\r\n            isAttachmentsListReady,\r\n            openUploadErrorModal,\r\n            setFileRejections,\r\n        ],\r\n    )\r\n\r\n    useDidUnmount(() => {\r\n        setAttachmentButtonElement(null)\r\n        setFileRejections([])\r\n    })\r\n\r\n    const initiateChat = useInitiateChatByAttachment({chatItem})\r\n    /**\r\n     * Callback function for clicking on a file input element.\r\n     *\r\n     * @remarks\r\n     * Opens the file input dialog and initiates a chat if necessary.\r\n     */\r\n    const onFileClick = useCallback(async () => {\r\n        /**\r\n         * If the user is not supposed to initiate a chat, simply open the file input dialog.\r\n         */\r\n        if (!shouldInitiateChat) {\r\n            return {selectFiles: true}\r\n        }\r\n\r\n        const chatWasInitiated = initiateChat()\r\n\r\n        return {selectFiles: chatWasInitiated}\r\n    }, [initiateChat, shouldInitiateChat])\r\n\r\n    //This is workaround because passing atom value directly leads to infinite loop\r\n    const [innerButtonElement, setInnerButtonElement] =\r\n        useState<HTMLButtonElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        setAttachmentButtonElement(innerButtonElement)\r\n    }, [innerButtonElement, setAttachmentButtonElement])\r\n\r\n    return (\r\n        <InvisibleAttachButtonWithInput\r\n            ref={element => {\r\n                if (element instanceof HTMLButtonElement || element === null) {\r\n                    setInnerButtonElement(element)\r\n                }\r\n            }}\r\n            onFileInputClick={onFileClick}\r\n            handleUploadFiles={handleUploadFiles}\r\n            isDisabled={disabled}\r\n        />\r\n    )\r\n}\r\n\r\nconst InvisinbleAttachButtonUI = React.forwardRef<\r\n    HTMLButtonElement,\r\n    InjectedFileInputProps\r\n>(({onFileInputClick}, ref) => (\r\n    <button\r\n        onClick={onFileInputClick}\r\n        ref={ref}\r\n        className=\"invisible absolute z-[-1] w-0\"\r\n    />\r\n))\r\n\r\nconst InvisibleAttachButtonWithInput = withFileInput(InvisinbleAttachButtonUI)\r\n","import {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getContactId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\nimport {useChannelState} from '../channel-context'\r\n\r\n\r\ninterface InitiateChatProps {\r\n    chatItem: Item\r\n}\r\n\r\n\r\n//TODO: Extend this function to use it for text messages as well (error validation logic is slightly different)\r\n\r\n/**\r\n * Initiates a chat with the selected channel and address.\r\n * @returns boolean. true if the chat was initiated, false otherwise.\r\n */\r\nexport function useInitiateChatByAttachment({\r\n    chatItem,\r\n}: InitiateChatProps): () => boolean {\r\n    const {showNotification, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const contacts = useContactsState('contacts')\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const selectedChannel = getSelectedChannel(chatItem.id)\r\n    const selectedPhone = getSelectedPhone(chatItem.id)\r\n    const contactMessengers = getMessengers(contacts, chatItem)\r\n    const phone = selectedPhone?.phone || getPhoneFromItem(chatItem)\r\n    const errorValidation = useErrorValidation()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const contactId = getContactId(chatItem)\r\n    const itemService = getServiceId(chatItem)\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const service = itemService || selectedService\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatServiceId = getAssociatedChatServiceId(\r\n        services,\r\n        selectedService,\r\n    )\r\n    return useEvent(() => {\r\n        /**\r\n         * Get the messenger address based on the selected channel value or fallback to the phone number.\r\n         */\r\n        const messengerAddress = contactMessengers?.find(\r\n            messenger => messenger.type === selectedChannel?.value,\r\n        )?.userId\r\n\r\n        const address = messengerAddress || phone\r\n\r\n        /**\r\n         * If there is no phone number or messenger available do nothing.\r\n         */\r\n        if (!address) {\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Check for any validation errors.\r\n         */\r\n        const errors = [\r\n            ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                service,\r\n                didNumber: selectedDIDNumber,\r\n                interactionType: 'sms',\r\n            }),\r\n            ...errorValidation.getChannelError({\r\n                selectedChannel: selectedChannel?.value,\r\n            }),\r\n        ]\r\n\r\n        /**\r\n         * If there are any errors, show the first one and return.\r\n         */\r\n        if (errors.length) {\r\n            showNotification(errors[0])\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * If there are no errors, hide existing 'interaction-init' errors and start the chat initiation process.\r\n         */\r\n        hideNotificationsByTag('interaction-init')\r\n\r\n        initiateChat({\r\n            channel: selectedChannel?.value,\r\n            address,\r\n            displayData: chatItem?.displayData,\r\n            serviceId: associatedChatServiceId,\r\n            accessNumberId: selectedDIDNumber,\r\n            contactId,\r\n            origination: 'interaction',\r\n        })\r\n\r\n        return true\r\n    })\r\n}\r\n","import type React from 'react'\r\nimport type {FormEvent, KeyboardEvent} from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\nimport produce from 'immer'\r\nimport {useAtom} from 'jotai'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDidState} from '@bpinc/ad-did-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessengerType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {messengerTypes} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getInteractionStepId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    isCall,\r\n    isExternalChat,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useIsOffline, useOfflineStateMethods} from '@bpinc/ad-offline-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {condenseNewLines, isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {getCursorPosition, moveCursorToTheEnd, setCursorPosition} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useMessageUpdater} from '../../../hooks/useMessageUpdater'\r\nimport {chatPopupContentAtom, predefinedMessagesSearchAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\nimport {TEXT_AREA_DATA_ID} from './ChatTextArea'\r\n\r\n\r\ninterface UseChatMessagesParams {\r\n    itemId: string\r\n    serviceId?: string\r\n}\r\n\r\ninterface UseChatMessagesOutput {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n\r\n    sendCurrentMessage(): void\r\n\r\n    handleKeyDown(event: KeyboardEvent<HTMLTextAreaElement>): void\r\n\r\n    handleTextareaChange(event: FormEvent<HTMLElement>, value: string): void\r\n\r\n    updateMessage<T, S extends string>(\r\n        arg0?: (arg0: T) => S\r\n    ): (arg0: T) => void\r\n\r\n    handleSelectPredefinedMessage: (text: string) => void\r\n}\r\n\r\nexport function useChatMessages(\r\n    params: UseChatMessagesParams,\r\n): UseChatMessagesOutput {\r\n    const [chatPopupContent, setChatPopupContent] = useAtom(\r\n        chatPopupContentAtom,\r\n    )\r\n\r\n    const {itemId, serviceId} = params\r\n\r\n    const [predefinedSearchInsertPosition, setPredefinedSearchInsertPoisition] =\r\n        useAtom(predefinedSearchInsertPositionAtom)\r\n    const [predefinedMessagesSearch, setPredefinedMessagesSearch] = useAtom(\r\n        predefinedMessagesSearchAtom,\r\n    )\r\n    const {showNotification, hideNotificationById, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const errorValidation = useErrorValidation()\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n    const contacts = useContactsState('contacts')\r\n    const isOffline = useIsOffline()\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const chatActiveItem = useInteraction(itemId)\r\n\r\n    const id = chatActiveItem?.id ?? ''\r\n    const contactMessengers = getMessengers(contacts, chatActiveItem)\r\n    const interactionStepId = getInteractionStepId(chatActiveItem)\r\n\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const {sendMessage, addMessageToPending, sendFile, openChannel} =\r\n        useInteractionChatStateMethods()\r\n\r\n    const {getItemState, setItemState} = useInteractionUIState()\r\n\r\n    const {clearAttachmentsList, getAttachmentsList, isAttachmentsListReady} =\r\n        useChatAttachmentsUIState([\r\n            'clearAttachmentsList',\r\n            'getAttachmentsList',\r\n            'isAttachmentsListReady',\r\n        ])\r\n\r\n    const {selectedService} = useServiceState()\r\n    const didNumbers = useDidState('didNumbers')\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    const associatedCallsNumber =\r\n        isCall(chatActiveItem) && chatActiveItem?.callData?.incoming\r\n            ? chatActiveItem.callData.fromNumber\r\n            : chatActiveItem?.callData?.destination\r\n\r\n    const phone = getSelectedPhone(itemId)?.phone || getPhoneFromItem(chatActiveItem)\r\n    const sameNumberWithAssociatedCall = associatedCallsNumber === phone\r\n\r\n    const didNumber = useMemo(\r\n        function memoizeDidNumber() {\r\n            if (isCall(chatActiveItem)) {\r\n                if (isOutboundInteraction(chatActiveItem)) {\r\n                    const callHasSmsDIDNumber =\r\n                        chatActiveItem?.accessNumberId &&\r\n                        didNumbers[chatActiveItem.accessNumberId]?.isSMS\r\n\r\n                    if (sameNumberWithAssociatedCall && callHasSmsDIDNumber) {\r\n                        return chatActiveItem!.accessNumberId\r\n                    }\r\n                } else {\r\n                    const isDID = chatActiveItem?.scenarioData?.isDID\r\n                    if (\r\n                        isDID &&\r\n                        (!selectedDIDNumber ||\r\n                            didNumbers[selectedDIDNumber]?.isSMS)\r\n                    ) {\r\n                        for (const accessNumberId of Object.keys(didNumbers)) {\r\n                            if (didNumbers[accessNumberId].isSMS) {\r\n                                return accessNumberId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return selectedDIDNumber\r\n        },\r\n        [\r\n            chatActiveItem,\r\n            didNumbers,\r\n            sameNumberWithAssociatedCall,\r\n            selectedDIDNumber,\r\n        ],\r\n    )\r\n\r\n    const itemService = getServiceId(chatActiveItem)\r\n    const service =\r\n        serviceId ||\r\n        (sameNumberWithAssociatedCall ? itemService : selectedService)\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatService =\r\n        getAssociatedChatServiceId(services, service) ||\r\n        getAssociatedChatServiceId(services, selectedService)\r\n\r\n    const currentMessage = getItemState(id)?.chatMessage ?? ''\r\n    const attachmentsList = getAttachmentsList(interactionStepId)\r\n\r\n    const setCurrentMessage = useCallback(\r\n        function setCurrentMessageCallback(\r\n            setMessage: React.SetStateAction<string>,\r\n        ) {\r\n            setItemState(\r\n                id,\r\n                produce(state => {\r\n                    if (typeof setMessage === 'string') {\r\n                        state.chatMessage = setMessage\r\n                    } else {\r\n                        state.chatMessage = setMessage(state.chatMessage)\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [id, setItemState],\r\n    )\r\n\r\n    const resetCurrentMessage = useCallback(\r\n        function resetCurrentMessageCallback() {\r\n            !isOffline && setCurrentMessage('')\r\n        },\r\n        [isOffline, setCurrentMessage],\r\n    )\r\n\r\n    const sendCurrentPotentialMessage = useCallback(\r\n        function sendCurrentPotentialMessageCallback() {\r\n            const contactId = get(chatActiveItem, 'contactId')\r\n\r\n\r\n            const messengerAddress = contactMessengers?.find(\r\n                messenger => messenger.type === channel,\r\n            )?.userId\r\n            const address = messengerAddress || phone\r\n\r\n            if (!address || !channel) {\r\n                return\r\n            }\r\n\r\n            addMessageToPending(\r\n                {\r\n                    content: currentMessage,\r\n                    channel,\r\n                    type: 'message',\r\n                },\r\n                address,\r\n            )\r\n            initiateChat({\r\n                channel,\r\n                address,\r\n                serviceId: associatedChatService,\r\n                accessNumberId: didNumber,\r\n                contactId,\r\n                displayData: chatActiveItem?.displayData,\r\n                origination: 'interaction',\r\n            })\r\n\r\n            return resetCurrentMessage()\r\n        },\r\n        [\r\n            channel,\r\n            chatActiveItem,\r\n            contactMessengers,\r\n            phone,\r\n            addMessageToPending,\r\n            currentMessage,\r\n            initiateChat,\r\n            associatedChatService,\r\n            didNumber,\r\n            resetCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const sendCurrentExternalMessage = useCallback(\r\n        function sendCurrentExternalMessageCallback() {\r\n            //if chat is initialized\r\n            if (isExternalChat(chatActiveItem)) {\r\n                if (isAttachmentsListReady(interactionStepId)) {\r\n                    if (currentMessage) {\r\n                        sendMessage({\r\n                            content: condenseNewLines(currentMessage),\r\n                            itemId: interactionStepId,\r\n                            channel,\r\n                            type: 'message',\r\n                        })\r\n                    }\r\n\r\n                    if (attachmentsList.length) {\r\n                        attachmentsList.forEach(attachment => {\r\n                            if (attachment.fileData)\r\n                                sendFile({\r\n                                    fileData: attachment.fileData,\r\n                                    itemId: interactionStepId,\r\n                                    channel: channel || 'sms',\r\n                                })\r\n                        })\r\n                        clearAttachmentsList(interactionStepId)\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            } else {\r\n                const messengerAddress = contactMessengers?.find(\r\n                    messenger => messenger.type === channel,\r\n                )?.userId\r\n                const address = messengerAddress || phone\r\n\r\n                if (\r\n                    service &&\r\n                    chatActiveItem &&\r\n                    associatedChatService &&\r\n                    channel &&\r\n                    address\r\n                ) {\r\n                    addMessageToPending(\r\n                        {\r\n                            content: currentMessage,\r\n                            channel,\r\n                            type: 'message',\r\n                        },\r\n                        address,\r\n                    )\r\n                    initiateChat({\r\n                        channel,\r\n                        address,\r\n                        serviceId: associatedChatService,\r\n                        contactId: chatActiveItem.contactId,\r\n                        displayData: chatActiveItem.displayData,\r\n                        accessNumberId: didNumber,\r\n                        origination: 'interaction',\r\n                    })\r\n                }\r\n                resetCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            phone,\r\n            contactMessengers,\r\n            channel,\r\n            chatActiveItem,\r\n            isAttachmentsListReady,\r\n            interactionStepId,\r\n            currentMessage,\r\n            attachmentsList,\r\n            resetCurrentMessage,\r\n            sendMessage,\r\n            clearAttachmentsList,\r\n            sendFile,\r\n            service,\r\n            associatedChatService,\r\n            addMessageToPending,\r\n            initiateChat,\r\n            didNumber,\r\n        ],\r\n    )\r\n\r\n    const tryToParseCommandsInCurrentMessage = useCallback(() => {\r\n        if (currentMessage.startsWith('/invite')) {\r\n            const words = currentMessage.split(' ')\r\n            if (words.length !== 2) {\r\n                showNotification({\r\n                    id: Notifications.ChatChannelInviteBadFormatError,\r\n                    type: 'error',\r\n                    message: i18n.chat_channel_invite_bad_format(),\r\n                    tags: ['current-view'],\r\n                    duration: 30_000,\r\n                    closable: true,\r\n                })\r\n            } else {\r\n                const inviteChannel = words[1] as MessengerType\r\n                if (!messengerTypes.includes(inviteChannel)) {\r\n                    showNotification({\r\n                        id: Notifications.ChatChannelInviteUnknownMessengerError,\r\n                        type: 'error',\r\n                        tags: ['current-view'],\r\n                        message: i18n.chat_channel_invite_unknown_messenger(),\r\n                        duration: 30_000,\r\n                        closable: true,\r\n                    })\r\n                } else {\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteBadFormatError,\r\n                    )\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteUnknownMessengerError,\r\n                    )\r\n\r\n                    const messengerAddress = contactMessengers?.find(\r\n                        messenger => messenger.type === inviteChannel,\r\n                    )?.userId\r\n                    const address = messengerAddress || phone\r\n\r\n                    if (itemService && address) {\r\n                        openChannel({\r\n                            channel: inviteChannel,\r\n                            address,\r\n                            interactionStepId,\r\n                            serviceId: itemService,\r\n                        })\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            }\r\n            return true\r\n        }\r\n    }, [\r\n        contactMessengers,\r\n        currentMessage,\r\n        hideNotificationById,\r\n        interactionStepId,\r\n        itemService,\r\n        openChannel,\r\n        phone,\r\n        showNotification,\r\n        resetCurrentMessage,\r\n        i18n,\r\n    ])\r\n\r\n    const sendCurrentMessage = useCallback(\r\n        function sendCurrentMessageCallback() {\r\n            if (isOffline) {\r\n                setShowOfflineAlert(true)\r\n                return\r\n            }\r\n\r\n            if (currentMessage) {\r\n                const scrollerApi = getItemState(itemId)?.scrollerApi\r\n                scrollerApi?.scrollToLast()\r\n            }\r\n\r\n            const isPotentialChat =\r\n                isPotentialInteraction(chatActiveItem) ||\r\n                isCall(chatActiveItem)\r\n\r\n\r\n            if (isPotentialChat) {\r\n                const errors = [\r\n                    ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                        service,\r\n                        didNumber,\r\n                        interactionType: 'sms',\r\n                    }),\r\n                    ...errorValidation.getChannelError({\r\n                        selectedChannel: channel,\r\n                    }),\r\n                ]\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                if (currentMessage) {\r\n                    const messageErrors = errorValidation.getMessageErrors({\r\n                        message: currentMessage,\r\n                        channel: channel || 'sms',\r\n                    })\r\n                    if (messageErrors.length) {\r\n                        showNotification(messageErrors[0])\r\n                        return\r\n                    }\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                return currentMessage && sendCurrentPotentialMessage()\r\n            }\r\n            const messageErrors = errorValidation.getMessageErrors({\r\n                message: currentMessage,\r\n                channel: channel || 'sms',\r\n            })\r\n            if (messageErrors.length) {\r\n                showNotification(messageErrors[0])\r\n                return\r\n            }\r\n\r\n            if (interactionStepId) {\r\n                if (tryToParseCommandsInCurrentMessage()) {\r\n                    return\r\n                }\r\n                return (\r\n                    (currentMessage || attachmentsList.length) &&\r\n                    sendCurrentExternalMessage()\r\n                )\r\n            }\r\n        },\r\n        [\r\n            isOffline,\r\n            currentMessage,\r\n            chatActiveItem,\r\n            channel,\r\n            errorValidation,\r\n            interactionStepId,\r\n            setShowOfflineAlert,\r\n            getItemState,\r\n            itemId,\r\n            service,\r\n            didNumber,\r\n            hideNotificationsByTag,\r\n            sendCurrentPotentialMessage,\r\n            showNotification,\r\n            attachmentsList.length,\r\n            sendCurrentExternalMessage,\r\n            tryToParseCommandsInCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const handleSelectPredefinedMessage = useEvent((text: string) => {\r\n        setCurrentMessage(\r\n            m =>\r\n                m.slice(0, predefinedSearchInsertPosition) +\r\n                text +\r\n                m.slice(\r\n                    predefinedSearchInsertPosition + 1,\r\n                    predefinedMessagesSearch.length,\r\n                ),\r\n        )\r\n        setPredefinedMessagesSearch('')\r\n        setChatPopupContent(undefined)\r\n\r\n        const htmlElement = document.querySelector(\r\n            '[data-testid=\"chat-text-area-input\"]',\r\n        )\r\n\r\n        if (!(htmlElement instanceof HTMLElement)) {\r\n            return\r\n        }\r\n\r\n        setTimeout(() => {\r\n            htmlElement.focus()\r\n            if (predefinedSearchInsertPosition === -1) {\r\n                moveCursorToTheEnd(htmlElement)\r\n            } else {\r\n                setCursorPosition(\r\n                    htmlElement,\r\n                    predefinedSearchInsertPosition + text.length,\r\n                )\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleKeyDown = useCallback(\r\n        (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n            const textareaElement =\r\n                event.target instanceof HTMLElement ? event.target : undefined\r\n\r\n            function exitPredefinedMessages() {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedSearchInsertPoisition(-1)\r\n                setPredefinedMessagesSearch('')\r\n            }\r\n\r\n            if (!textareaElement) {\r\n                return\r\n            }\r\n\r\n            const cursorPosition = getCursorPosition(textareaElement)\r\n\r\n            if (event.key === ';') {\r\n                setPredefinedSearchInsertPoisition(cursorPosition)\r\n                setChatPopupContent('predefinedMessages')\r\n            }\r\n\r\n            if (\r\n                event.key === ' ' &&\r\n                cursorPosition - 1 === predefinedSearchInsertPosition\r\n            ) {\r\n                exitPredefinedMessages()\r\n            }\r\n\r\n            if (event.key === 'Escape' && chatPopupContent === 'predefinedMessages') {\r\n                exitPredefinedMessages()\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n\r\n            if (event.key === 'Enter') {\r\n                if (event.shiftKey || event.ctrlKey) {\r\n                    return\r\n                }\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                sendCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            chatPopupContent,\r\n            setChatPopupContent,\r\n            predefinedSearchInsertPosition,\r\n            sendCurrentMessage,\r\n            setPredefinedMessagesSearch,\r\n            setPredefinedSearchInsertPoisition,\r\n        ],\r\n    )\r\n\r\n    const handleTextareaChange = useCallback(\r\n        function handleTextareaChangeCallback(\r\n            event: FormEvent<HTMLElement>,\r\n            value: string,\r\n        ) {\r\n            const el = event.target\r\n            if (!isHTMLElement(el)) {\r\n                return\r\n            }\r\n            el.scrollTop = el.scrollHeight\r\n\r\n            const cursorPosition = getCursorPosition(el)\r\n\r\n            setCurrentMessage(value)\r\n            if (\r\n                predefinedMessagesSearch &&\r\n                cursorPosition <= predefinedSearchInsertPosition\r\n            ) {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedMessagesSearch('')\r\n            } else {\r\n                setPredefinedMessagesSearch(\r\n                    chatPopupContent === 'predefinedMessages'\r\n                        ? value.slice(predefinedSearchInsertPosition + 1)\r\n                        : '',\r\n                )\r\n            }\r\n        },\r\n        [chatPopupContent, predefinedMessagesSearch, predefinedSearchInsertPosition, setChatPopupContent, setCurrentMessage, setPredefinedMessagesSearch],\r\n    )\r\n\r\n    const updateMessage = useMessageUpdater(\r\n        setCurrentMessage,\r\n        `[data-id=\"${TEXT_AREA_DATA_ID}\"]`,\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                handleSelectPredefinedMessage,\r\n                sendCurrentMessage,\r\n                handleKeyDown,\r\n                currentMessage,\r\n                setCurrentMessage,\r\n                handleTextareaChange,\r\n                setPredefinedMessagesSearch,\r\n                predefinedMessagesSearch,\r\n                updateMessage,\r\n            }\r\n        },\r\n        [\r\n            handleSelectPredefinedMessage,\r\n            predefinedMessagesSearch,\r\n            setPredefinedMessagesSearch,\r\n            currentMessage,\r\n            setCurrentMessage,\r\n            handleTextareaChange,\r\n            sendCurrentMessage,\r\n            handleKeyDown,\r\n            updateMessage,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport {Selection} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useMessageUpdater(\r\n    setCurrentMessage: (setter: (message: string) => string) => void,\r\n    textAreaSelector: string,\r\n) {\r\n    return useCallback(\r\n        function updateMessageCallback<T, S extends string>(getMessage = (e: T) => e as unknown as S) {\r\n            return function updater(data: T) {\r\n                const textAreaNode = document.querySelector(textAreaSelector)\r\n\r\n                flow(getMessage, updateMessageContent, setCaretToRightPosition)(data)\r\n\r\n\r\n                function updateMessageContent(dataToAdd: string) {\r\n                    let offsetToFocus = 0\r\n                    let nodeToFocus: Node | null = null\r\n\r\n                    setCurrentMessage((currentMessage: string) => {\r\n                        const selection = new Selection()\r\n                        const selectionNode = selection?.getLastNode()\r\n                        const selectionElement = (\r\n                            selectionNode?.nodeType === Node.TEXT_NODE ? selectionNode?.parentElement : selectionNode\r\n                        ) as Element\r\n\r\n                        const textAreaSelected = selectionElement?.closest(textAreaSelector)\r\n\r\n                        if (textAreaNode) {\r\n                            currentMessage = cutExtraBR()\r\n\r\n                            if (!textAreaSelected) {\r\n                                return currentMessage + dataToAdd\r\n                            } else if (selection && selectionNode) {\r\n                                setNodeAndOffsetToFocus(selection)\r\n                                removeSelectedTextOnPaste(selection)\r\n\r\n                                if (nodeToFocus) {\r\n                                    insertDataInSelectedNode(nodeToFocus, offsetToFocus)\r\n                                }\r\n\r\n                                return getUpdatedHTMLAsString()\r\n                            }\r\n\r\n                            return currentMessage\r\n                        }\r\n\r\n                        return currentMessage + dataToAdd\r\n\r\n                        function differentNodesSelected(selectionInner: Selection) {\r\n                            return selectionInner.getFirstNode() !== selectionInner.getLastNode()\r\n                        }\r\n\r\n                        function textSelected(selectionInner: Selection) {\r\n                            return selectionInner.getSelectionStartIndex() !== selectionInner.getSelectionEndIndex()\r\n                        }\r\n\r\n                        function setNodeAndOffsetToFocus(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else if (textSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else {\r\n                                offsetToFocus = selectionInner.getSelectionEndIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getLastNode()\r\n                            }\r\n                        }\r\n                        function removeSelectedTextOnPaste(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner) || textSelected(selectionInner)) {\r\n                                selectionInner.deleteSelected()\r\n                            }\r\n                        }\r\n\r\n                        function insertDataInSelectedNode(selectionNodeInner: Node, selectionOffset: number) {\r\n                            const textContent = selectionNodeInner?.textContent ?? ''\r\n                            selectionNodeInner.textContent =\r\n                                textContent?.slice(0, selectionOffset) + dataToAdd + textContent?.slice(selectionOffset)\r\n                        }\r\n\r\n                        function getUpdatedHTMLAsString() {\r\n                            return document.querySelector(textAreaSelector)?.innerHTML ?? currentMessage\r\n                        }\r\n\r\n                        function cutExtraBR() {\r\n                            const extraBRExist = currentMessage.substring(currentMessage.length - 8) === '<br><br>'\r\n                            if (extraBRExist) {\r\n                                return currentMessage.substring(0, currentMessage.length - 4)\r\n                            } else {\r\n                                return currentMessage\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    return {nodeToFocus, offsetToFocus, dataToAdd} as const\r\n                }\r\n\r\n                function setCaretToRightPosition({\r\n                    nodeToFocus,\r\n                    offsetToFocus,\r\n                    dataToAdd,\r\n                }: {\r\n                    nodeToFocus: Node | null\r\n                    offsetToFocus: number\r\n                    dataToAdd: string\r\n                }) {\r\n                    if (textAreaNode instanceof HTMLElement) {\r\n                        textAreaNode.focus()\r\n                        requestAnimationFrame(() => {\r\n                            setCursorPosition()\r\n                            requestAnimationFrame(setCursorPosition)\r\n\r\n                            function setCursorPosition() {\r\n                                if (textAreaNode) {\r\n                                    if (nodeToFocus) {\r\n                                        keepCursorAtTheCurrentPosition(nodeToFocus)\r\n                                    } else if (textAreaNode.lastChild) {\r\n                                        setCursorToTheEnd(textAreaNode.lastChild)\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            function keepCursorAtTheCurrentPosition(node: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(node, offsetToFocus + dataToAdd.length)\r\n                                range.setEnd(node, offsetToFocus + dataToAdd.length)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n\r\n                            function setCursorToTheEnd(lastChild: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(lastChild, lastChild.textContent?.length ?? 0)\r\n                                range.setEnd(lastChild, lastChild.textContent?.length ?? 0)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [textAreaSelector, setCurrentMessage],\r\n    )\r\n}\r\n","import {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {IconAttachment, IconKnowledgeBase, IconPredefinedMessage, IconSentimentGood} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {moveCursorToTheEnd} from '@bpinc/lib-ui-elements'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\n\r\n\r\ninterface UseControlsOptions {\r\n    itemId: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n}\r\n\r\nexport function useControlsOptions({itemId, setCurrentMessage}: UseControlsOptions) {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const setChatPopupContent = useSetAtom(chatPopupContentAtom)\r\n    const setPredefinedSearchInsertPoisition = useSetAtom(predefinedSearchInsertPositionAtom)\r\n    const t = useLocalizationState('t')\r\n    const isMacOs = platformInfo.platform === 'mac'\r\n    const commandButton = isMacOs ? '⌘' : 'Ctrl'\r\n\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const isCommunicator = useIsCommunicator()\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    const openKB = async () => {\r\n        if (isCommunicator) {\r\n            openInteractionSlidingModal(itemId, 'knowledgeBase')\r\n        } else {\r\n            setKBFloatingState(s => s === 'closed' ? 'floating' : s)\r\n            setupInteractionKB()\r\n        }\r\n    }\r\n\r\n\r\n    return [\r\n        {\r\n            Icon: IconSentimentGood,\r\n            text: t.EXTERNAL_CHAT.add_emoji(),\r\n            shortcut: `${commandButton}E`,\r\n            onClick: () => {\r\n                setChatPopupContent('emojiPicker')\r\n            },\r\n        },\r\n        {\r\n            Icon: IconAttachment,\r\n            text: t.EXTERNAL_CHAT.attachment(),\r\n            shortcut: `${commandButton}A`,\r\n            onClick: () => attachmentButton?.click(),\r\n        },\r\n        {\r\n            Icon: IconPredefinedMessage,\r\n            text: t.EXTERNAL_CHAT.predefined_messages(),\r\n            shortcut: ';',\r\n            onClick: () => {\r\n                const textareaElement = document.querySelector('[data-testid=\"chat-text-area-input\"]')\r\n                if (textareaElement instanceof HTMLElement) {\r\n                    setPredefinedSearchInsertPoisition(textareaElement.innerHTML.length)\r\n                    setCurrentMessage(m => m + ';')\r\n                    textareaElement.focus()\r\n\r\n                    setTimeout(() => {\r\n                        moveCursorToTheEnd(textareaElement)\r\n                    })\r\n                }\r\n                setChatPopupContent('predefinedMessages')\r\n\r\n            },\r\n        },\r\n        {\r\n            Icon: IconKnowledgeBase,\r\n            text: t.EXTERNAL_CHAT.knowledge_base(),\r\n            shortcut: `${commandButton}K`,\r\n            onClick: openKB,\r\n        },\r\n    ] as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"smsMessageCounter\":\"voiceTranscript_ChatForm_smsMessageCounter_MlvOG\"};","import React from 'react'\r\nimport * as Popover from '@radix-ui/react-popover'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {useAssociatedChatInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useBoolean, useEscapeManager, useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useChatResponsesVariablesParser} from '@bpinc/lib-helpers-ui'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconPlus24, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {ViewPredefinedMessages} from '@bpinc/lib-predefined-messages-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmojiPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ChatProps} from '../../../types'\r\nimport {ChannelSelector} from '../ChannelSelector'\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedMessagesSearchAtom} from './atoms'\r\nimport {ChatTextArea} from './ChatTextArea'\r\nimport {InvisibleAttachButton} from './InvisibleAttachButton'\r\nimport {useChatMessages} from './useChatMessages'\r\nimport {useControlsOptions} from './useControlsOptions'\r\nimport {useGreetings} from './useGreeting'\r\nimport {useSmsMessageCounter} from './useSmsMessageCounter'\r\n\r\nimport styles from './ChatForm.module.less'\r\n\r\n\r\nconst PREDEFINED_MESSAGES_MAX_OFFSET = 24\r\nconst PREDEFINED_MESSAGES_SIDE_OFFSET = 5\r\n\r\nfunction getChatMessagesElement() {\r\n    const element = document.querySelector('[data-testid=\"chat-content\"]')\r\n    if (element instanceof HTMLElement) {\r\n        return element\r\n    }\r\n}\r\n\r\nexport const ChatForm: React.FC<ChatProps> = React.memo(function ExternalChat({\r\n    itemId,\r\n    serviceId,\r\n}) {\r\n    const chatFormRef = useCommunicatorUIState('interactionChatFormRef')\r\n    const activeInteractionId = useNonAssertedInteractionId()\r\n    const {\r\n        updateMessage,\r\n        handleSelectPredefinedMessage,\r\n        sendCurrentMessage,\r\n        handleKeyDown,\r\n        handleTextareaChange,\r\n        setCurrentMessage,\r\n        currentMessage,\r\n    } = useChatMessages({itemId, serviceId})\r\n\r\n    const predefinedMessagesSearch = useAtomValue(predefinedMessagesSearchAtom)\r\n    const parseVariables = useChatResponsesVariablesParser()\r\n    useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables})\r\n\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const itemIsExternalChat = useInteractionProp(itemId, isExternalChat)\r\n\r\n    const {text: smsMessageCounter, enabled: smsMessageCounterEnabled} =\r\n        useSmsMessageCounter(itemId, currentMessage)\r\n\r\n\r\n    const messagesElementEntry = useResizeObserver(getChatMessagesElement())\r\n    const [chatPopupContent, setChatPopupContent] =\r\n    useAtom(chatPopupContentAtom)\r\n\r\n    const chatItem = useAssociatedChatInteraction(itemId)\r\n    assertDefined(chatItem)\r\n\r\n    const controlsOptions = useControlsOptions({setCurrentMessage, itemId})\r\n    const controlsDropdownOpen = useBoolean()\r\n    useEscapeManager(() => {\r\n        controlsDropdownOpen.setFalse()\r\n    }, {enabled: controlsDropdownOpen.value})\r\n\r\n    useEscapeManager(\r\n        () => {\r\n            setChatPopupContent(undefined)\r\n        },\r\n        {enabled: Boolean(chatPopupContent)},\r\n    )\r\n\r\n\r\n    return (\r\n        <div\r\n            ref={chatFormRef}\r\n            className=\"flex px-4 py-2.5\"\r\n            data-testid=\"chat-bottom-panel\"\r\n        >\r\n            <InvisibleAttachButton chatItem={chatItem} buttonElementAtom={attachmentButtonElementAtom} />\r\n            {/* TODO Use it appropriately once design is added: */}\r\n            {smsMessageCounterEnabled && (\r\n                <span className={styles.smsMessageCounter}>\r\n                    {smsMessageCounter}\r\n                </span>\r\n            )}\r\n            <div className=\"flex flex-auto items-end gap-2\">\r\n                <div className=\"flex h-[33px] items-center gap-2\">\r\n                    {!!activeInteractionId && <ChannelSelector />}\r\n                    <TriggerDropdown\r\n                        data-chat-actions-menu\r\n                        modal={false}\r\n                        open={controlsDropdownOpen.value}\r\n                        onOpenChange={controlsDropdownOpen.toggle}\r\n                        className=\"group z-10\"\r\n                        align=\"start\"\r\n                        side=\"top\"\r\n                        options={controlsOptions.map(\r\n                            ({Icon, text, shortcut, onClick}) => (\r\n                                <button\r\n                                    onClick={onClick}\r\n                                    key={text}\r\n                                    className=\"flex w-full min-w-[210px] items-center gap-2\"\r\n                                >\r\n                                    <Icon className=\"size-4\" />\r\n                                    <p className=\"flex-auto caption-s text-primary-on-primary\">\r\n                                        {text}\r\n                                    </p>\r\n                                    <p className=\"caption-s text-neutral-disabled\">\r\n                                        {shortcut}\r\n                                    </p>\r\n                                </button>\r\n                            ),\r\n                        )}\r\n                    >\r\n                        <CircleButton>\r\n                            <IconPlus24 className=\"size-4.5\" />\r\n                        </CircleButton>\r\n                    </TriggerDropdown>\r\n                </div>\r\n                <Popover.Root\r\n                    open={Boolean(chatPopupContent)}\r\n                    onOpenChange={open => {\r\n                        if (!open) {\r\n                            setChatPopupContent(undefined)\r\n                        }\r\n                    }}\r\n                >\r\n                    <Popover.Trigger\r\n                        asChild\r\n                        className=\"flex flex-auto\"\r\n                        onClick={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <ChatTextArea\r\n                                itemId={itemId}\r\n                                sendCurrentMessage={sendCurrentMessage}\r\n                                interactionStepId={interactionStepId}\r\n                                isExternalChat={itemIsExternalChat}\r\n                                currentMessage={currentMessage}\r\n                                handleKeyDown={handleKeyDown}\r\n                                handleChange={handleTextareaChange}\r\n                            />\r\n                        </div>\r\n                    </Popover.Trigger>\r\n                    <Popover.Content\r\n                        side=\"top\"\r\n                        align=\"start\"\r\n                        className=\"z-[100] w-[--radix-popover-trigger-width]\"\r\n                        sideOffset={PREDEFINED_MESSAGES_SIDE_OFFSET}\r\n                        onOpenAutoFocus={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        {chatPopupContent === 'emojiPicker' ? (\r\n                            <EmojiPopup\r\n                                onSelectEmoji={emojiChar => {\r\n                                    updateMessage((emoji: string) => emoji)(emojiChar)\r\n                                    setChatPopupContent(undefined)\r\n                                }}\r\n                            />\r\n                        ) : chatPopupContent === 'predefinedMessages' ? (\r\n                            <ViewPredefinedMessages\r\n                                handleSelect={handleSelectPredefinedMessage}\r\n                                search={predefinedMessagesSearch}\r\n                                className=\"w-[--radix-popover-trigger-width]\"\r\n                                style={{\r\n                                    maxHeight:\r\n                                        (messagesElementEntry?.contentRect\r\n                                            .height ?? 0) -\r\n                                        (PREDEFINED_MESSAGES_MAX_OFFSET -\r\n                                            PREDEFINED_MESSAGES_SIDE_OFFSET),\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                    </Popover.Content>\r\n                </Popover.Root>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat, isInboundInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePredefinedChatMessageState,\r\n    usePredefinedChatMessageStateMethods,\r\n} from '@bpinc/ad-predefined-chat-message-state-context'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\ninterface UseGreetingsParams {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: string) => void\r\n    parseVariables: (message: string) => string\r\n    itemId: string\r\n}\r\n\r\nexport function useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables}: UseGreetingsParams) {\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const itemIsInboundExternalChat = useInteractionProp(\r\n        itemId,\r\n        item => isExternalChat(item) && isInboundInteraction(item),\r\n    )\r\n\r\n    const {greetings} = usePredefinedChatMessageState()\r\n    const {resetGreeting} = usePredefinedChatMessageStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (currentMessage) {\r\n            resetGreeting(itemId)\r\n        } else if (greetings[itemId] && itemIsInboundExternalChat) {\r\n            setCurrentMessage(parseVariables(greetings[itemId]))\r\n            resetGreeting(itemId)\r\n            // TODO: investigate which notification we need to hide here\r\n            // hideNotificationsByTag()\r\n        }\r\n    }, [\r\n        itemId,\r\n        currentMessage,\r\n        greetings,\r\n        hideNotificationsByTag,\r\n        parseVariables,\r\n        resetGreeting,\r\n        setCurrentMessage,\r\n        itemIsInboundExternalChat,\r\n    ])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {getCharCount} from '@bpinc/lib-gsm-charset-utils'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\n\r\n\r\ntype MessageCounter = {\r\n    text: string\r\n    enabled: boolean\r\n}\r\n\r\nexport function useSmsMessageCounter(itemId: string, message: string): MessageCounter {\r\n    const {enableSmsCharacterCount} = useAppConfigState()\r\n    const {t} = useLocalizationState()\r\n    const {getSelectedChannel} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n\r\n    return useMemo(() => {\r\n        if (!enableSmsCharacterCount || channel?.startsWith('sms')) {\r\n            return {enabled: false, text: ''}\r\n        }\r\n        const {msgCount, charCount, charsPerSegment} = getCharCount(message)\r\n\r\n        let text: string\r\n        if (msgCount === 1) {\r\n            text = `${charCount}/${charsPerSegment}`\r\n        } else if (charCount < 1000) {\r\n            text = `${charCount} (${t.EXTERNAL_CHAT.sms_messages_number(msgCount)})`\r\n        } else {\r\n            text = String(charCount)\r\n        }\r\n        return {enabled: true, text}\r\n    }, [enableSmsCharacterCount, channel, message, t.EXTERNAL_CHAT])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport type {GroupChatUIScope} from '@bpinc/state-group-chat-ui'\r\n\r\nimport {ExternalChat} from './external/ExternalChat'\r\n\r\n\r\nconst {ChatCenterInteractionLoader} = createComponentLoader(\r\n    'chatCenter', () => import('chatCenter'), 'ChatCenterInteraction',\r\n)\r\n\r\ntype Props = {\r\n    itemId: string\r\n    scope: GroupChatUIScope\r\n}\r\n\r\nexport const Chat: React.FC<Props> = React.memo(function Chat({itemId, scope}) {\r\n    const item = useInteraction(itemId)\r\n    const isInternalChat = Boolean(item && (\r\n        item.groupChatId ||\r\n        item.groupChatMembers ||\r\n        item.userId\r\n    ))\r\n\r\n    return isInternalChat\r\n        ? <ChatCenterInteractionLoader scope={scope} interactionId={itemId} />\r\n        : <ExternalChat itemId={itemId} />\r\n})\r\n","import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n"],"names":["duration","hide","show","Notifications","omit","className","useNotificationsState","notifications","methods","hideNotificationById","notificationsToRender","useMemo","filteredList","truthy","Object","values","filter","n","delayed","notification","includes","id","slice","div","tcn","styles","SmTransition","animation","map","content","isValidElement","cloneElement","onHide","message","SmMessage","onDismiss","closable","undefined","error","type","info","warning","success","AriaStatus","ContactInfo","firstName","lastName","fullName","contactId","phoneNumber","getContactPictureUrl","useGetContactPictureUrl","AvatarLegacy","size","url","formatPhone","BotSuggestions","itemId","botSuggestions","suggestion","index","BotSuggestion","direction","createComponentLoader","KBPageLoader","features","topHeader","openInNewTab","VoiceTranscriptKB","memo","kbBridge","useKbBridgeConnector","assertKBBridgeInterface","activeFloatingPanelTabStyles","RightPanel","useLocalizationState","t","useState","floatingPanelContent","setFloatingPanelContent","useMainPageUIState","kbFloatingState","kbWidth","mainContentNode","setKBFloatingState","setKBWidth","canPin","useCanPin","floatingState","floatingSize","contentMinWidth","onDragEnd","useCallback","Floating","maxSizeInPercent","closeByEscape","data-testid","initialSize","minSize","resizeable","setState","side","state","header","LinkLikeButton","onClick","AGENT_ASSIST","suggestions_tab","kb_tab","section","contentSizeStyles","VoiceTranscriptPage","queryParams","item","chatItem","setMainContentNode","interactionStepId","URLSearchParams","window","location","search","get","useInteractionBy","useInteractionStateSelector","getAssociatedChatItem","items","chatItemId","voiceTranscript","useFormatting","formatFullName","displayData","number","chatData","useInteractionChatData","getInteractionStepId","useBotSuggestionsLinksAutoOpener","updateCurrentTabState","useUpdateCurrentTabState","useEffect","app","data","VoiceTranscriptStateProvider","DndProvider","backend","HTML5Backend","SelectionContainer","autoScroll","EXTERNAL_CHAT","voice_transcript_header","ref","el","VoiceTranscript","filtersClassName","chatMessages","messages","ChatForm","serviceId","getServiceId","h1","VoiceTranscriptPageLoader","mapChannel","channel","value","text","GLOBAL","chat_type_sms","chat_type_web","chat_type_telegram","chat_type_line","chat_type_twitter","chat_type_facebook","chat_type_wechat","chat_type_nexmo","chat_type_viber","chat_type_whatsapp","chat_type_remote_assist","initialOption","useChannel","channelOptions","chatActiveItem","raItems","contacts","useContactsStateMethods","getContact","useContactsState","interactionId","useNonAssertedInteractionId","useAssociatedChatInteraction","useServicesDispositionsState","services","allOutboundChatChannels","outboundChatChannels","useDIDNumberState","selectedDIDNumber","useServiceState","selectedService","useRemoteAssistState","itemChannel","getChannel","itemService","messengers","getMessengers","originalChannel","externalChatData","globalInteractionId","getGlobalInteractionId","raSessionActive","clientState","isLoading","contactExists","localizedChannelOptions","itemChannelOption","addOption","option","options","forEach","flow","property","partial","getPhoneFromItem","phones","addOriginalChannelOption","key","outboundChannelAvailable","service","isCall","outboundChannels","isChatService","toUpperCase","filterOutboundOptions","useOptions","openChannel","useOpenChannel","useRef","current","selectedChannel","setSelectedChannel","selectedPhone","setSelectedPhone","getSelectedChannel","getSelectedPhone","selectCurrentItemChannel","phoneId","produce","channels","find","p","resetChannel","resetSelectedChannel","touchedState","setTouchedState","isTouched","setIsTouched","touched","draft","useOnLogout","useOnItemRemoved","resetTouched","setSelectedChannelImpl","contextName","initialState","throwNoProviderError","ChannelStateContext","React","displayName","ChannelStateProvider","props","channelState","Provider","children","useChannelState","useContext","useLinkOpener","useScreenPopStateMethods","addTabs","browserTabInfo","useBrowserTabMetaInfo","appType","useInteractionStateMethods","saveOpenedSuggestionUrl","suggestionURL","openURLIn","tabId","msgId","title","formatHTMLAsOneLineString","open","normalizeExternalURL","e","errorText","Error","console","suggestions","enabled","alreadyOpened","useInteractionProp","s","openedBotSuggestionsUrls","getSuggestionsToOpen","opened","isLinkSuggestion","autoOpenURL","openLink","suggestionsToOpen","openSuggestions","isChatMessageDate","isHistoryMessage","isActivityMessageGroup","displayType","isChatMessage","isVoiceTranscriptMessage","voiceTranscriptMessageTypes","isExternalChatMessageDate","isHistoryCallMessage","mediaType","isScrollAtBottom","scrollNode","scrollTop","clientHeight","scrollHeight","getMessageId","msg","chatMessageData","timestamp","getExternalChatMessageId","partyId","isExternalChatMessage","notes","getActivitiyMessageGroupMessageId","getExternalChatMessageDisplayType","getScenarioMessageId","geHistoryMessageId","source","findFirstVisibleItemWithOffset","startIndex","querySelector","offset","offsetTop","getFileRejection","file","errors","name","getFileNameAndExtension","extension","CHAT_PROHIBITED_EXTENSIONS","push","code","ErrorCode","invalid_file_extension_error","length","getFileErrors","getDispositionText","date","formatDate","time","disposition_message_title","VOICE_CALL","getDispositionTitle","disposition","disposition_message_service_name","serviceName","getHtmlMessageText","htmlContent","messageTextElem","document","createElement","innerHTML","style","opacity","position","display","zIndex","body","append","elementText","innerText","remove","getExternalChatMessageDisplayName","users","user","join","getExternalChatFileData","fileId","fileError","fileIsMasked","fileProgress","fileName","fileType","refMsgId","isHistoryFileMessageMessage","ChatMessagesContext","createContext","hasSelection","setHasSelection","noop","selectedMessages","getClipboardBuffer","setClipboardBuffer","scrollContainer","ChatMessagesContextProvider","clipboardBuffer","setSelectedMessages","firstSelectedMessageRef","useEvent","interactionChanged","useValueUpdated","useEventListener","MouseEvent","lastSelectedMessageId","getNearestMessageId","target","selection","firstSelectedMessageIndex","findIndex","m","lastSelectedMessageIndex","indexes","sort","a","b","selected","getSelection","range","rangeCount","getRangeAt","forwardSelection","firstElement","lastElement","startElement","endElement","setStartBefore","startContainer","setEndAfter","endContainer","setBaseAndExtent","startOffset","endOffset","mouseDownHandler","onMouseDown","useChatMessages","useContextSelector","useChatSelectedMessages","useChatGetClipboardBuffer","useChatSetClipboardBuffer","useChatScrollContainer","element","HTMLElement","closest","Node","parentElement","getAttribute","MessageAction","buttonProps","button","useGetFormattedClipboardMessage","useUserDetailsState","interaction","useInteraction","sessionUser","useSessionState","messageData","endTime","callParty","parties","party","chartParty","chatParties","party_id","first_name","last_name","messageText","full","userId","contactData","userOrContactName","fileData","page","external_chat_customer_navigates_to","isMissedCall","ACTIVITY_HISTORY","call_message_missed","call_message_incoming_text","call_message_outgoing_text","getHistoryOrChatMessageText","getMessageData","getRangeMessageId","commonElement","commonAncestorContainer","nodeType","ELEMENT_NODE","getCommonAncestorElement","getElementMessageId","messageElement","uniqueMessageIdSelector","messageId","maskSelectedHistory","fragment","extractContents","tempSpan","getFragmentWithinSpanNode","Mask","createDocumentFragment","Array","from","childNodes","node","appendChild","insertNode","maskSelectedText","maskedTextChunks","updatedMaskedTextChunks","extendUnmasked","span","unmaskedSpan","revealUnmasked","uuid","classList","add","unmaskedText","originalText","maskedText","nodeCopy","cloneNode","isMasked","isAnchorTag","contains","nodeName","html","htmlClone","revealUnmaskedInner","htmlInner","textChunkId","unmasked","stringToHTMLFragment","replaceWith","htmlElement","equalUniqueMessageId","id1","id2","composedMessageUniqueId","composedChatMessage","getMaskedText","uniqueMessageId","getMessageTextElement","WithUnmaskAction","useBoolean","toggle","unmaskPopupWrapperRef","popupRect","setPopupRect","unmaskChunkId","setUnmaskChunkId","unmaskMessageId","setUnmaskMessageId","maskedMessageNodeRef","useInteractionChatStateMethods","maskMessage","masked","useInteractionChatDataSelector","togglePopup","maskedMessageNode","isHTMLElement","unmaskElementMessageId","getBoundingClientRect","toggleShow","unmaskPopupWrapperNode","addEventListener","removeEventListener","handleUnmask","messageToUnmask","unmaskedTextChunk","textChunks","unmaskedTextChunkHTML","coordinates","top","y","left","x","Popup","placement","contentClassName","data-visible","onClickOutside","mountNode","IconUnmask","EMAIL","button_unMaskSelectedText_text","WithSelectionActions","withMaskAction","assertDefined","getPopupContent","withMask","serverOrigin","loginId","sessionId","privileges","updateActivityHistoryMessageText","getFormatClipboardMessage","showNotification","openInteractionSlidingModal","useOpenInteractionSlidingModal","isCommunicator","useIsCommunicator","useKbBridgeMethods","setupInteractionKB","selectedText","selectionData","selectedMessage","handleSearchKnowledgeBaseClick","isAfterCallWork","IconKnowledgeBase","CAN_MASK_INTERACTION_CONTENT","maskedMessageBeforeMasking","maskActivityHistoryMessages","then","getContactId","catch","err","tags","masking_failed_error_message","bpLogger","getErrorMessage","selectedMessageNode","updatedTextChunks","IconMask","mask","textToCopy","textToAddToCopyBuffer","reduce","res","navigator","clipboard","writeText","IconCopy","copy","newClipboardData","IconAddToCopy","add_to_copy","useSelectionActions","onSelectionChange","toString","WithSelectionPopup","popupContentClassName","ChatMessagesSelectionActions","WithHoverOverActions","triggerHtmlProps","getFormattedClipboardMessage","handleCopyToClipboard","result","setFalse","handleAddToClipboard","Tooltip","onOpenChange","asChild","container","collisionBoundary","align","hideWhenDetached","predefinedMessagesSearchAtom","atom","predefinedSearchInsertPositionAtom","chatPopupContentAtom","attachmentButtonElementAtom","UploadErrorModal","handleClose","onClose","onCloseCallback","rejection","totalFilesAmount","attachmentButton","useAtomValue","errorMessages","uniq","flatMap","r","Modal","CHAT_CENTER","upload_failed","InlineAlert","variant","ul","li","failed_to_upload","mimeTypeToExternalChatFileType","AttachmentUI","isFailed","Button","click","select_files","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonOk","defaultState","isAttachmentsListReady","getAttachmentsList","addAttachment","removeAttachment","clearAttachmentsList","initializeAttachmentsList","fileRejections","setFileRejections","ChatAttachmentsUIContext","createUIStateSelectorHook","useChatAttachmentsUIState","EmailAttachmentsUIContext","useEmailAttachmentsUIState","useMessagesLoader","fetchMore","contactActivityHistoryRef","useAsRef","useActivityHistoryByContactId","getMessagesRef","useContactActivityHistory","getMessages","reachedLimitByMedia","chatTypeToMedia","Promise","resolve","useFetchMoreExternalMessages","hasActiveRequest","errorsCountRef","fetchData","NoMessages","allActivityHistoryLoaded","activityHistory","useExternalActivityHistoryLoaded","searchForOlder","activityHistoryIsLoading","INTERNAL_CHAT","chat_history_no_recent_found","chat_history_no_recent_while_loading","chat_history_search_for_older","NoMessagesPlaceholder","avatarClassName","MessageAvatar","isSelf","isScenarioAvatar","isConference","showUserAvatar","getUserPictureUrl","useGetUserPictureUrl","avatarUrl","split","Avatar","MessageContent","isError","combinedClassName","SelectionItem","data-message-id-selection","focusOnSelection","touchedOnly","tabIndex","WithTopInfo","isOutgoing","isSystemMessage","sendTime","showTime","showName","siblingClassName","IconRobot","system_message","WithOptionalNameAndAvatar","callUsers","isFullWidth","messageClassName","withoutBorder","isChat","isLink","isActivityGroup","isNotes","isDisposition","isHistory","isEmail","isErrorExternalChatMessage","isFile","isTextMessage","isRemoteAssistSession","isCallConference","isCustomMessage","Boolean","isScenario","isScenarioMessage","finalDirection","finalUserId","messageItemClassName","data-disposition","data-email","data-error","data-file","data-incoming","data-link","data-notes","data-outgoing","data-remote-assist-session","data-text-message","dotStyles","DotsTransforming","TypingIndicator","typingParty","user_id","display_name_placeholder","agent_is_typing","party_is_typing","replace","Number","Date","now","valueOf","item_id","TypingParties","rangeRef","messagesRef","bottom","typingParties","getTypingParties","hasTypingParties","lastRenderedItem","endIndex","lastMessageIndex","isLastMessageRenderedRef","scrollIntoView","behavior","block","i","useInitialScrollPosition","setInteractionUIState","useInteractionUIItemStateSetter","firstUnreadMessageIdRef","first","isRead","useFirstUnreadMessage","topItemRef","useInteractionUIChatTypeTopItemId","useLayoutEffect","tabTopItemId","VirtualizedMessages","renderMessage","setItemState","virtuosoRef","initialRender","getServiceNameFromItem","ChannelIcon","getChannelImageIcon","loadMoreMessages","scrollerApi","scrollToLast","scrollToIndex","scrollTo","messagesPrevRef","usePreviousValueRef","messagesLengthChanged","useSaveScrollPositionEffect","initialScrollPosition","generateMessageKey","_index","channelTitle","remote_assist_title","renderHeader","virtuosoComponents","Header","Footer","setListRange","onHeightChange","height","debouncedOnHeightChange","debounce","onTopStateChange","atTop","messageRenderer","Virtuoso","followOutput","itemContent","computeItemKey","atTopStateChange","initialTopMostItemIndex","customScrollParent","components","rangeChanged","totalListHeightChanged","increaseViewportBy","Message","closeButton","isHtml","sentiment","useInnerHTML","iconSrc","transcriptMessage","isSuggestion","botSuggestionIcon","isCurrentChatTranscriptMessage","smsIcon","whatsappIcon","facebookIcon","lineIcon","telegramIcon","twitterIcon","viberIcon","webChatIcon","wechatIcon","getTranscriptMessageIcon","bubbleElement","dangerouslySetInnerHTML","onClickCapture","evt","preventDefault","stopPropagation","Svg","src","Sentiment","parseTranscriptLinksAsHTML","parsedUrl","chatMessageToVoiceTranscript","startTime","format","rest","isHTMLSuggestion","setSearch","searchResult","setSearchResult","showBotSuggestions","toggleBotSuggestions","showSMS","toggleSMS","showTranscript","toggleTranscript","VoiceTranscriptUIContext","contextValue","useVoiceTranscriptUIState","Filters","messagesContent","searchLocal","setSearchLocal","highlightIndex","setHighlightIndex","useInteractionUIChatScrollerApi","setDebouncedSearch","innerValue","filteredResults","entries","marksCount","_","reverse","markers","handleHighlight","handleSearch","SearchField","onChange","layoutClassName","placeholder","search_transcript","SearchResultsSwitcher","total","ButtonIcon","disabled","tooltip","VOICE_TRANSCRIPT","bot_suggestion_btn_tooltip","IconIntentFilled","sms_btn_tooltip","IconMessageExternal","transcript_btn_tooltip","IconVoiceTranscript","useVoiceTranscriptVisibleMessages","orderBy","voiceTranscriptMessage","chatMessage","ChatMessage","itemContactId","itemInteractionStepId","isDIDChat","restProps","itemGlobalInteractionId","historyMessageGlobalInteractionId","pageIsVisible","usePageVisibility","markMessageAsRead","markPersonalMessageAsRead","unreadActivityHistory","useInteractionChatStateSelector","unreadPersonalMessages","visibilitySensorIsActive","useIntersectionObserver","root","isIntersecting","markAsRead","visible","useMarkAsReadVisibilitySensor","SearchResultHighlight","highlightedMarkElem","querySelectorAll","markElement","data-message-highlight","VirtualizedVoiceTranscriptMessages","scenarioData","isDID","data-message","isHTML","emptyChatMessages","emptyTranscript","emptySuggestions","setScrollNode","visibleMessages","normalizeByUrlParser","parsedText","highlightHTML","textToHighlight","match","RegExp","escapeRegExp","useVoiceTranscriptMessagesContentMap","itemsIds","itemsIdsRef","itemsProvider","onItemSelect","startFrom","itemsListProvider","ChannelSelector","useInteractionId","useAssociatedChatInteractionProp","itemHasMultiplyPhones","hasMultiplyPhones","defaultChannel","getChannelWhenMultiplyPhones","test","currentItemTouched","useInitializeDefaultChannelEffect","every","o","useEscapeManager","SelectedIcon","finalDisabled","TriggerDropdown","modal","onEscapeKeyDown","renderChannel","Icon","phone","data-selected","aria-selected","PhoneOption","CircleButton","IconArrowDown8","TEXT_AREA_DATA_ID","ChatTextArea","currentMessage","handleKeyDown","handleChange","isExternalChat","sendCurrentMessage","partyWithoutAddress","itemKind","handleBlur","dependencies","timerValue","setTimerValue","isTyping","setTyping","isSending","setSendingValue","sendAgentIsTyping","sendAgentIsNotTyping","interval","setInterval","currentTimerValue","clearInterval","timeout","setTimeout","clearTimeout","useAgentTypingDetect","isSmsChannel","startsWith","attachmentsList","useAttachmentsList","sendButtonDisabled","trim","contentEditableRef","hasMultipleLines","setHasMultipleLines","contentEditableROEntry","useResizeObserver","lineHeight","parseFloat","getComputedStyle","isNaN","computeHeight","useHasMultipleLines","FieldFrame","AttachmentsList","list","attachmentsListGroupId","ContentEditable","onKeyDown","onBlur","message_input_placeholder","plainTextOnly","data-id","send_message_btn_tooltip","IconSendFilled","InvisibleAttachButton","buttonElementAtom","setAttachmentButtonElement","useSetAtom","shouldInitiateChat","isPotentialInteraction","openUploadErrorModal","useModalComponentOpener","handleUploadFiles","event","getFilesFromEvent","input","files","getLocalizedFileError","fileRejection","validFiles","not","addFilesToAttachmentsList","useDidUnmount","initiateChat","hideNotificationsByTag","contactMessengers","errorValidation","useErrorValidation","associatedChatServiceId","getAssociatedChatServiceId","address","messenger","getServiceAndDIDNumbersErrors","didNumber","interactionType","getChannelError","accessNumberId","origination","useInitiateChatByAttachment","onFileClick","selectFiles","innerButtonElement","setInnerButtonElement","InvisibleAttachButtonWithInput","HTMLButtonElement","onFileInputClick","isDisabled","InvisinbleAttachButtonUI","withFileInput","params","getItemState","useAtom","chatPopupContent","setChatPopupContent","predefinedSearchInsertPosition","setPredefinedSearchInsertPoisition","predefinedMessagesSearch","setPredefinedMessagesSearch","isOffline","useIsOffline","useOfflineStateMethods","setShowOfflineAlert","ERROR_MESSAGES","sendMessage","addMessageToPending","sendFile","useInteractionUIState","didNumbers","useDidState","associatedCallsNumber","callData","incoming","fromNumber","destination","sameNumberWithAssociatedCall","isOutboundInteraction","callHasSmsDIDNumber","isSMS","keys","associatedChatService","setCurrentMessage","setMessage","resetCurrentMessage","sendCurrentPotentialMessage","sendCurrentExternalMessage","condenseNewLines","attachment","tryToParseCommandsInCurrentMessage","words","i18n","chat_channel_invite_bad_format","inviteChannel","messengerTypes","chat_channel_invite_unknown_messenger","messageErrors","getMessageErrors","handleSelectPredefinedMessage","focus","moveCursorToTheEnd","setCursorPosition","exitPredefinedMessages","textareaElement","cursorPosition","getCursorPosition","shiftKey","ctrlKey","handleTextareaChange","updateMessage","textAreaSelector","getMessage","textAreaNode","dataToAdd","offsetToFocus","nodeToFocus","selectionNodeInner","selectionOffset","textContent","selectionInner","differentNodesSelected","getFirstNode","getLastNode","textSelected","getSelectionStartIndex","getSelectionEndIndex","Selection","selectionNode","selectionElement","TEXT_NODE","textAreaSelected","substring","setNodeAndOffsetToFocus","deleteSelected","requestAnimationFrame","keepCursorAtTheCurrentPosition","lastChild","setCursorToTheEnd","createRange","setStart","setEnd","removeAllRanges","addRange","useMessageUpdater","useControlsOptions","commandButton","platformInfo","openKB","IconSentimentGood","add_emoji","shortcut","IconAttachment","IconPredefinedMessage","predefined_messages","knowledge_base","getChatMessagesElement","chatFormRef","useCommunicatorUIState","activeInteractionId","parseVariables","itemIsInboundExternalChat","isInboundInteraction","usePredefinedChatMessageState","greetings","usePredefinedChatMessageStateMethods","resetGreeting","useGreetings","useChatResponsesVariablesParser","itemIsExternalChat","useSmsMessageCounter","useAppConfigState","enableSmsCharacterCount","getCharCount","msgCount","charCount","charsPerSegment","sms_messages_number","String","messagesElementEntry","controlsOptions","controlsDropdownOpen","smsMessageCounterEnabled","smsMessageCounter","data-chat-actions-menu","IconPlus24","Popover","sideOffset","onOpenAutoFocus","EmojiPopup","onSelectEmoji","emojiChar","emoji","ViewPredefinedMessages","handleSelect","maxHeight","contentRect","PREDEFINED_MESSAGES_MAX_OFFSET","ChatCenterInteractionLoader","classnames","twMerge","cn"],"sourceRoot":""}