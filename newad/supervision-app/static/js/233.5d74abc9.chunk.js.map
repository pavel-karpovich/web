{"version":3,"file":"static/js/233.5d74abc9.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useMonitoringModes.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/ExtendedMonitoring.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/PullScreenButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/SeeScreenButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/AgentSupervisorControls/AgentSupervisorControls.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/MonitoringUserAvatar.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/PanelActions.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/CallButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/ChangeAgentStateButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/ChatButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/OpenCalendarButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/PersonalQueueButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserActions/UserActions.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useAgentStateInfo.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useGetGroupName.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/LastIntentAlert.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/LiveStatTimer.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useItemRenderer.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useTableColumns.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useTableData.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useTeamName.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/QuickMonitor.module.less?873a","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/helpers.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/QuickMonitorContext.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/useDisplayMessages.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Intents.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageContainer.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageContent/useMessageHtml.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageContent/RegularMessage.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageContent/ScenarioMessage.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageContent/MessageContent.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/MessageInfo.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Message/Message.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Messages.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/Search.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/QuickMonitor.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QuickMonitor/useSubscribeItemPeek.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserItmes/ItemCard.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/UserItmes/UserItems.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/QualityManagement/QualityManagementMonitor.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/RightBar/RightBar.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/QmMonitorModal/QmMonitorModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useQmMonitorModalOpener.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useTableGroups.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SectionHeader.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SectionTitle.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/ServiceInfoModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/ServicesFilterPopup/ServiceFilterPopup.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/LoadTableViewModal/LoadTableViewItem.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/LoadTableViewModal/LoadTableViewModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/ManageMetricsModal/useGetColumnsEditorConfig.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/ManageMetricsModal/useGetMetricName.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/ManageMetricsModal/useResetCustomNameEffect.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/ManageMetricsModal/ManageMetricsModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/ManageMetricsModal/useUpdateTableMetrics.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/SaveTableViewModal/SaveTableViewModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/TableActionsButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useTableMenuOptions.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/ServicesTable.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPageHeader/AlertMessage.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPageHeader/EmptyAlertMessage.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPageHeader/AlertsButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/IntentsAlertsConfigModal/IntentsAlertsConfigModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/utils.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/AlertConfigurationModalActions.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/AlertConfigurationModalTableHeaderUI.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/DisableButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/EditModeButon.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/ColorModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/ThresholdColorCellContent.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/ThresholdValueCellContent.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/ThresholdRow.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/ThresholdsGroupLabelRow.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/AlertConfigurationModalContent.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/MetricsAlertsConfigModal.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/modals/MetricsAlertsConfigModal/useInitialState.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPageHeader/AlertsConfigurationButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPageHeader/SupervisionPageHeader.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/TeamsTable.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/useCollapsedTableGroupsIds.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/hooks/useRenderCustomTableRow.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/UsersTableContext.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/UsersTableControls/SubteamFilterButton.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/UsersTableControls/UsersTableControls.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/UsersTable.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/useOnlySubteamFilter.ts","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/UsersTable/useSearch.tsx","webpack://@bpinc/web-supervision-ui/../../packages/ad-supervision-ui/src/components/SupervisionPage.tsx","webpack://@bpinc/web-supervision-ui/../../packages/lib-tailwind-classnames/src/tcn.ts"],"sourcesContent":["import {useCallback, useMemo} from 'react'\r\n\r\nimport {useInteractionStateMethods, useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {QmMonitorModeType} from '@bpinc/ad-transport-types'\r\n\r\n\r\ntype MonitoringModesActions = Record<QmMonitorModeType, { start: () => void; disabled: boolean }>\r\n\r\nexport function useMonitoringModes(userId: string, itemId: string) {\r\n    const {qmStartCall} = useInteractionStateMethods()\r\n    const {disconnectItem} = useInteractionStateMethods()\r\n    const {privileges, userId: currentUserId, phoneNumber} = useSessionState(['privileges', 'userId', 'phoneNumber'])\r\n    const monitoredItem = useInteractionStateSelector(state => state.items.find(inItem => {\r\n        return inItem.scenarioData?.qmMonitoredItemId === itemId\r\n    }))\r\n\r\n    const mode = monitoredItem?.scenarioData?.qmMonitorMode\r\n    const isSelf = userId === currentUserId\r\n    const extension = phoneNumber || ''\r\n    const hasMonitorPrivilege = !!privileges.SYS_MONITOR_INTERACTIONS\r\n    const disabled = !hasMonitorPrivilege || isSelf\r\n\r\n    const handleStart = useCallback((startMode: QmMonitorModeType) => () => {\r\n        if (mode === startMode) {\r\n            return\r\n        }\r\n\r\n        if (monitoredItem) {\r\n            disconnectItem(monitoredItem.id)\r\n        }\r\n\r\n        qmStartCall({\r\n            mode: startMode,\r\n            itemId,\r\n            extension,\r\n        })\r\n    }, [disconnectItem, extension, itemId, mode, monitoredItem, qmStartCall])\r\n\r\n    const monitor = useMemo(() => ({\r\n        disabled: disabled || mode === 'monitor',\r\n        start: handleStart('monitor'),\r\n    }), [disabled, handleStart, mode])\r\n\r\n    const whisper = useMemo(() => ({\r\n        disabled: disabled || mode === 'whisper',\r\n        start: handleStart('whisper'),\r\n    }), [disabled, handleStart, mode])\r\n\r\n    const participate = useMemo(() => ({\r\n        disabled: disabled || mode === 'participate',\r\n        start: handleStart('participate'),\r\n    }), [disabled, handleStart, mode])\r\n\r\n    return useMemo<MonitoringModesActions>(() => ({\r\n        monitor,\r\n        whisper,\r\n        participate,\r\n    }), [monitor, participate, whisper])\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype ExtendedMonitoringProps = {\r\n    userId: string\r\n}\r\n\r\nexport const ExtendedMonitoring: React.FC<ExtendedMonitoringProps> = ({userId}) => {\r\n    const {t} = useLocalizationState()\r\n    const keepMonitoredUsers = useStatsState('keepMonitoredUsers')\r\n    const {addKeepMonitoringUser, removeKeepMonitoringUser} = useStatsStateMethods()\r\n\r\n    const selfUserId = useSessionState('userId')\r\n    const isSelf = userId === selfUserId\r\n    const isMonitoring = keepMonitoredUsers.some(id => id === userId)\r\n\r\n    const handleMonitoringChange = useCallback((checked: boolean) => {\r\n        if (checked) {\r\n            addKeepMonitoringUser(userId)\r\n        } else {\r\n            removeKeepMonitoringUser(userId)\r\n        }\r\n    }, [addKeepMonitoringUser, removeKeepMonitoringUser, userId])\r\n\r\n    return (\r\n        <Checkbox\r\n            checked={isMonitoring}\r\n            onChange={handleMonitoringChange}\r\n            disabled={isSelf}\r\n            className=\"[&>input]:block\"\r\n            label={t.SUPERVISION_PAGE.quality_management_monitor_keep_monitoring()}\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconScreenPull} from '@bpinc/lib-icons'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype PullScreenButtonProps = {\r\n    userId: string | undefined\r\n    itemId: string | undefined\r\n}\r\n\r\nexport const PullScreenButton: React.FC<PullScreenButtonProps> = ({userId, itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {pullAgentScreen} = useStatsStateMethods()\r\n    const handlePullScreenClick = useCallback(() => {\r\n        assertDefined(userId)\r\n        assertDefined(itemId)\r\n\r\n        pullAgentScreen({\r\n            userId,\r\n            interactionId: itemId,\r\n        })\r\n    }, [itemId, pullAgentScreen, userId])\r\n\r\n    const onKeyPressPullScreenHandler = useOnKeyPressHandler(handlePullScreenClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onClick={handlePullScreenClick}\r\n            onKeyDown={onKeyPressPullScreenHandler}\r\n            tooltip={t.CALL_DETAILS_FORM.interaction_pullScreen_tooltip()}\r\n            basic\r\n            icon\r\n            disabled={!userId || !itemId}\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconScreenPull />\r\n        </SemanticButton>\r\n    )\r\n}\r\n\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconScreenSee} from '@bpinc/lib-icons'\r\nimport {useOpenInfoModal} from '@bpinc/lib-modals-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype SeeScreenButtonProps = {\r\n    userId: string | undefined\r\n}\r\n\r\nexport const SeeScreenButton: React.FC<SeeScreenButtonProps> = ({userId}) => {\r\n    const {t} = useLocalizationState()\r\n    const openInfoModal = useOpenInfoModal()\r\n    const bpClientVersion = useBpClientState('version')\r\n    const {seeAgentScreen} = useStatsStateMethods()\r\n    const handleSeeScreenClick = useCallback(() => {\r\n        if (!bpClientVersion) {\r\n            return openInfoModal({\r\n                body: t.CALL_DETAILS_FORM.interaction_seeScreen_helper_required_message(),\r\n            })\r\n        }\r\n        assertDefined(userId)\r\n        seeAgentScreen(userId)\r\n    }, [\r\n        bpClientVersion,\r\n        openInfoModal,\r\n        seeAgentScreen,\r\n        t.CALL_DETAILS_FORM,\r\n        userId,\r\n    ])\r\n\r\n    const onKeyPressSeeScreenHandler = useOnKeyPressHandler(handleSeeScreenClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onClick={handleSeeScreenClick}\r\n            onKeyDown={onKeyPressSeeScreenHandler}\r\n            tooltip={t.CALL_DETAILS_FORM.interaction_seeScreen_tooltip()}\r\n            basic\r\n            icon\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n            disabled={!userId}\r\n        >\r\n            <IconScreenSee />\r\n        </SemanticButton>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMonitoringModes} from '../hooks/useMonitoringModes'\r\nimport {ExtendedMonitoring} from '../QualityManagement/ExtendedMonitoring'\r\nimport {PullScreenButton} from '../QualityManagement/UserActions/PullScreenButton'\r\nimport {SeeScreenButton} from '../QualityManagement/UserActions/SeeScreenButton'\r\n\r\n\r\nexport type AgentSupervisorControlsProps = {\r\n    userId: string\r\n    itemId: string\r\n}\r\n\r\nexport const AgentSupervisorControls: React.FC<AgentSupervisorControlsProps> = ({userId, itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {monitor, whisper, participate} = useMonitoringModes(userId, itemId)\r\n\r\n    const onKeyPressMonitorStartHandler = useOnKeyPressHandler(monitor.start)\r\n    const onKeyPressWhisperStartHandler = useOnKeyPressHandler(whisper.start)\r\n    const onKeyPressParticipateStartHandler = useOnKeyPressHandler(participate.start)\r\n\r\n    return (\r\n        <div className=\"mt-4\">\r\n            <div className=\"mb-2 flex\">\r\n                <SmMenu compact className=\"!mr-2 !shadow-none\" size=\"mini\">\r\n                    <SmMenu.Item\r\n                        as=\"button\"\r\n                        active={monitor.disabled}\r\n                        onClick={monitor.start}\r\n                        onKeyDown={onKeyPressMonitorStartHandler}\r\n                        className=\"!h-[30px] !text-base\"\r\n                        title={t.SUPERVISION_PAGE.quality_management_monitor_button()}\r\n                    >\r\n                        {t.SUPERVISION_PAGE.quality_management_monitor_button()}\r\n                    </SmMenu.Item>\r\n                    <SmMenu.Item\r\n                        as=\"button\"\r\n                        active={whisper.disabled}\r\n                        onClick={whisper.start}\r\n                        onKeyDown={onKeyPressWhisperStartHandler}\r\n                        className=\"!h-[30px] !text-base\"\r\n                        title={t.SUPERVISION_PAGE.quality_management_monitor_menu_coach()}\r\n                    >\r\n                        {t.SUPERVISION_PAGE.quality_management_monitor_menu_coach()}\r\n                    </SmMenu.Item>\r\n                    <SmMenu.Item\r\n                        as=\"button\"\r\n                        active={participate.disabled}\r\n                        onClick={participate.start}\r\n                        onKeyDown={onKeyPressParticipateStartHandler}\r\n                        className=\"!h-[30px] !text-base\"\r\n                        title={t.SUPERVISION_PAGE.quality_management_monitor_menu_barge_in()}\r\n                    >\r\n                        {t.SUPERVISION_PAGE.quality_management_monitor_menu_barge_in()}\r\n                    </SmMenu.Item>\r\n                </SmMenu>\r\n                <PullScreenButton userId={userId} itemId={itemId} />\r\n                <SeeScreenButton userId={userId} />\r\n            </div>\r\n            <ExtendedMonitoring userId={userId} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {getUserStatusIcon} from '@bpinc/ad-user-details-state-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {SmPlaceholder} from '@bpinc/lib-external-ui-elements'\r\n\r\n\r\ntype MonitoringUserProps = {\r\n    user: QmUserDetails | undefined\r\n}\r\n\r\nexport const MonitoringUserAvatar: React.FC<MonitoringUserProps> = ({user}) => {\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    if (!user) {\r\n        return (\r\n            <SmPlaceholder className=\"h-[58px] w-[58px] rounded-full\">\r\n                <SmPlaceholder.Image />\r\n            </SmPlaceholder>\r\n        )\r\n    }\r\n\r\n    const onlineStatus = getUserStatusIcon(user)\r\n    const isOnline = user.presenceState === 'available'\r\n    const avatarUrl = getAvatarUrl({userId: user.userId})\r\n\r\n    return (\r\n        <AvatarLegacy\r\n            size={58}\r\n            url={avatarUrl}\r\n            firstName={user.firstName}\r\n            lastName={user.lastName}\r\n            onlineStatus={onlineStatus}\r\n            online={isOnline}\r\n            type=\"user\"\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\n\r\nimport {MAIN_CONTENT_MIN_WIDTH} from '@bpinc/ad-main-page-ui-context'\r\nimport type {SupervisionQualityManagementViewType} from '@bpinc/ad-supervision-ui-context'\r\nimport {useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {\r\n    IconClose,\r\n    IconPanelFloating,\r\n    IconPanelSide,\r\n    IconPin,\r\n    IconUnpin,\r\n} from '@bpinc/lib-icons'\r\nimport {SemanticButton, useCanPin} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype PanelActionsProps = {\r\n    onClose: () => void\r\n}\r\n\r\nexport const PanelActions: React.FC<PanelActionsProps> = ({onClose}) => {\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n    const {\r\n        qmViewType: viewType,\r\n        qmWidth,\r\n        qmFloatingState,\r\n        mainContentNode,\r\n        qmModalClose,\r\n    } = useSupervisionUIContext(['qmViewType', 'qmWidth', 'qmFloatingState', 'mainContentNode', 'qmModalClose'])\r\n\r\n    const canPin = useCanPin({\r\n        mainContentNode,\r\n        floatingState: qmFloatingState,\r\n        floatingSize: qmWidth,\r\n        contentMinWidth: MAIN_CONTENT_MIN_WIDTH,\r\n    })\r\n\r\n    const switchQmViewMode = useCallback((mode: SupervisionQualityManagementViewType) => {\r\n        qmModalClose?.()\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmViewType = mode\r\n        })\r\n    }, [produceSupervisionUIContext, qmModalClose])\r\n\r\n    const handleDockedClick = useCallback(() => {\r\n        qmModalClose?.()\r\n        switchQmViewMode('docked')\r\n    }, [qmModalClose, switchQmViewMode])\r\n\r\n    const handleFloatingClick = useCallback(() => {\r\n        switchQmViewMode('floating')\r\n    }, [switchQmViewMode])\r\n\r\n    const handleOverlayClick = useCallback(() => {\r\n        qmModalClose?.()\r\n        switchQmViewMode('overlay')\r\n    }, [qmModalClose, switchQmViewMode])\r\n\r\n    useEffect(() => {\r\n        if (!canPin && viewType === 'docked') {\r\n            switchQmViewMode('overlay')\r\n        }\r\n    }, [canPin, qmFloatingState, switchQmViewMode, viewType])\r\n\r\n    const onKeyPressOverlayHandler = useOnKeyPressHandler(handleOverlayClick)\r\n    const onKeyPressDockedHandler = useOnKeyPressHandler(handleDockedClick)\r\n    const onKeyPressFloatingHandler = useOnKeyPressHandler(handleFloatingClick)\r\n    const onKeyPressCloseHandler = useOnKeyPressHandler(onClose)\r\n\r\n    return (\r\n        <div className=\"absolute right-4 top-0 flex\">\r\n            {viewType === 'docked' ? (\r\n                <SemanticButton\r\n                    icon\r\n                    transparent\r\n                    tabIndex={0}\r\n                    onClick={handleOverlayClick}\r\n                    onKeyDown={onKeyPressOverlayHandler}\r\n                >\r\n                    <IconUnpin />\r\n                </SemanticButton>\r\n            ) : (\r\n                <SemanticButton\r\n                    icon\r\n                    transparent\r\n                    onClick={handleDockedClick}\r\n                    onKeyDown={onKeyPressDockedHandler}\r\n                    disabled={!canPin}\r\n                >\r\n                    <IconPin />\r\n                </SemanticButton>\r\n            )}\r\n            {viewType === 'floating' ? (\r\n                <SemanticButton\r\n                    icon\r\n                    transparent\r\n                    tabIndex={0}\r\n                    onKeyDown={onKeyPressOverlayHandler}\r\n                    onClick={handleOverlayClick}\r\n                >\r\n                    <IconPanelSide />\r\n                </SemanticButton>\r\n            ) : (\r\n                <SemanticButton\r\n                    icon\r\n                    transparent\r\n                    onClick={handleFloatingClick}\r\n                    onKeyDown={onKeyPressFloatingHandler}\r\n                >\r\n                    <IconPanelFloating />\r\n                </SemanticButton>\r\n            )}\r\n            <SemanticButton\r\n                icon\r\n                transparent\r\n                onClick={onClose}\r\n                onKeyDown={onKeyPressCloseHandler}\r\n            >\r\n                <IconClose />\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconCallStroke} from '@bpinc/lib-icons'\r\nimport {useOpenInfoModal} from '@bpinc/lib-modals-ui'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype CallButtonProps = {\r\n    user: QmUserDetails | undefined\r\n    onActionStart: () => void\r\n}\r\n\r\nexport const CallButton: React.FC<CallButtonProps> = ({user, onActionStart}) => {\r\n    const {t} = useLocalizationState()\r\n    const selfUserId = useSessionState('userId')\r\n    const {initiateCall} = useInteractionStateMethods()\r\n    const {selectedService} = useServiceState()\r\n    const serviceRequiredForOutboundCall = useServicesDispositionsState('serviceRequiredForOutboundCall')\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const openInfoModal = useOpenInfoModal()\r\n\r\n    const {userId, extension} = user || {}\r\n    const isSelf = userId === selfUserId\r\n\r\n    const handleCallClick = useCallback(() => {\r\n        if (serviceRequiredForOutboundCall && !selectedService) {\r\n            return openInfoModal({\r\n                body: t.ERROR_MESSAGES.service_is_required_for_outbound_call_message(),\r\n            })\r\n        }\r\n\r\n        if (extension) {\r\n            initiateCall({\r\n                phone: extension,\r\n                serviceId: selectedService,\r\n                accessNumberId: selectedDIDNumber,\r\n            })\r\n            onActionStart()\r\n        }\r\n    }, [\r\n        initiateCall,\r\n        onActionStart,\r\n        openInfoModal,\r\n        selectedDIDNumber,\r\n        selectedService,\r\n        serviceRequiredForOutboundCall,\r\n        t.ERROR_MESSAGES,\r\n        extension,\r\n    ])\r\n\r\n    const onKeyPressCallHandler = useOnKeyPressHandler(handleCallClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onClick={handleCallClick}\r\n            onKeyDown={onKeyPressCallHandler}\r\n            tooltip={t.GLOBAL.call()}\r\n            disabled={isSelf || !extension || !user}\r\n            basic\r\n            icon\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconCallStroke className=\"flex justify-center\" />\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconCheckCircle} from '@bpinc/lib-icons'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype ChangeAgentStateButtonProps = {\r\n    user: QmUserDetails | undefined\r\n}\r\n\r\nexport const ChangeAgentStateButton: React.FC<ChangeAgentStateButtonProps> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n    const {setAgentState, logoutAgent} = useStatsStateMethods()\r\n    const {userId: selfUserId, privileges} = useSessionState(['userId', 'privileges'])\r\n    const {openModal} = useModalsStateMethods()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n\r\n\r\n    const {userId, acdState, isLogged} = user || {}\r\n    const isSelf = userId === selfUserId\r\n\r\n    const options = useMemo(() => {\r\n        return truthy([\r\n            acdState !== 'ready' && isLogged ? {\r\n                children: t.MONITORING_CONFIRMATIONS.agentForceReady_title(),\r\n                onClick: () => {\r\n                    toggleShow()\r\n                    openModal({\r\n                        className: 'autoSizeModal',\r\n                        title: t.MONITORING_CONFIRMATIONS.agentForceReady_confirm_heading(),\r\n                        body: t.MONITORING_CONFIRMATIONS.agentForceReady_confirm_msg(),\r\n                        actions: {\r\n                            ok: {\r\n                                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                                action: () => {\r\n                                    userId && setAgentState(userId, 'ready')\r\n                                },\r\n                            },\r\n                            cancel: {\r\n                                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                            },\r\n                        },\r\n                    })\r\n                },\r\n            } : undefined,\r\n            {\r\n                children: t.MONITORING_CONFIRMATIONS.agentForceLogout_title(),\r\n                onClick: () => {\r\n                    toggleShow()\r\n                    openModal({\r\n                        className: 'autoSizeModal',\r\n                        title: t.MONITORING_CONFIRMATIONS.agentForceLogout_confirm_heading(),\r\n                        body: t.MONITORING_CONFIRMATIONS.agentForceLogout_confirm_msg(),\r\n                        actions: {\r\n                            ok: {\r\n                                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                                action: () => {\r\n                                    userId && logoutAgent(userId)\r\n                                    toggleShow()\r\n                                },\r\n                            },\r\n                            cancel: {\r\n                                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                            },\r\n                        },\r\n                    })\r\n                },\r\n            },\r\n        ])\r\n    }, [\r\n        acdState,\r\n        isLogged,\r\n        logoutAgent,\r\n        openModal,\r\n        setAgentState,\r\n        t.MONITORING_CONFIRMATIONS,\r\n        t.WINDOW_POPUP_TITLES_AND_MESSAGES,\r\n        toggleShow,\r\n        userId,\r\n    ])\r\n\r\n\r\n    return (\r\n        <PopupButton\r\n            show={show}\r\n            toggleShow={toggleShow}\r\n            options={options}\r\n            tooltip={t.MONITORING_CONFIRMATIONS.agentForceButton_tooltip()}\r\n            disabled={isSelf || !privileges.SYS_FORCE_STATE_OF_OTHER_AGENTS || !isLogged || !user}\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconCheckCircle />\r\n        </PopupButton>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconChatStroke} from '@bpinc/lib-icons'\r\nimport {assertDefined, assertTrue} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    user: QmUserDetails | undefined\r\n    onActionStart: () => void\r\n}\r\n\r\nexport const ChatButton: React.FC<Props> = ({user, onActionStart}) => {\r\n    const {t} = useLocalizationState()\r\n    const selfUserId = useSessionState('userId')\r\n    const {createPotentialItem} = useInteractionStateMethods()\r\n    const {userId, firstName, lastName, extension} = user || {}\r\n    const isSelf = userId === selfUserId\r\n    const handleChatClick = useCallback(() => {\r\n        assertTrue(!isSelf, 'Cannot chat with self')\r\n        assertDefined(userId)\r\n\r\n        createPotentialItem({\r\n            userId,\r\n            firstName,\r\n            lastName,\r\n            phone: extension,\r\n        })\r\n\r\n        onActionStart()\r\n    }, [isSelf, userId, createPotentialItem, firstName, lastName, extension, onActionStart])\r\n\r\n    const onKeyPressChatHandler = useOnKeyPressHandler(handleChatClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onClick={handleChatClick}\r\n            onKeyDown={onKeyPressChatHandler}\r\n            tooltip={t.GLOBAL.chat()}\r\n            disabled={isSelf || !user}\r\n            basic\r\n            icon\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconChatStroke />\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconCalendar} from '@bpinc/lib-icons'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype OpenCalendarButtonProps = {\r\n    userId: string | undefined\r\n    onActionStart: () => void\r\n}\r\n\r\nexport const OpenCalendarButton: React.FC<OpenCalendarButtonProps> = ({userId, onActionStart}) => {\r\n    const {t} = useLocalizationState()\r\n    const goTo = useNavigationState('goTo')\r\n\r\n    const handleCalendarClick = useCallback(() => {\r\n        goTo(AppRoutes.calendar, {userId})\r\n        onActionStart()\r\n    }, [goTo, userId, onActionStart])\r\n\r\n    const onKeyPressCalendarHandler = useOnKeyPressHandler(handleCalendarClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onKeyDown={onKeyPressCalendarHandler}\r\n            onClick={handleCalendarClick}\r\n            tooltip={t.CALENDAR.calendar_button_tooltip()}\r\n            disabled={!userId}\r\n            basic\r\n            icon\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconCalendar className=\"flex justify-center\" />\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconCaseQueue} from '@bpinc/lib-icons'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype PersonalQueueButtonProps = {\r\n    user: QmUserDetails | undefined\r\n    onActionStart: () => void\r\n}\r\n\r\nexport const PersonalQueueButton: React.FC<PersonalQueueButtonProps> = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleEmailClick = useCallback(() => {\r\n        //TODO: implement Personal Queue\r\n    }, [])\r\n\r\n    const onKeyPressEmailHandler = useOnKeyPressHandler(handleEmailClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            onClick={handleEmailClick}\r\n            onKeyDown={onKeyPressEmailHandler}\r\n            tooltip={t.EMAIL.emailPersonalQueue_header()}\r\n            basic\r\n            icon\r\n            className=\"flex !h-8 !w-8 items-center justify-center !p-0\"\r\n        >\r\n            <IconCaseQueue />\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {QmUserDetails} from '@bpinc/ad-stats-state-types'\r\n\r\nimport {CallButton} from './CallButton'\r\nimport {ChangeAgentStateButton} from './ChangeAgentStateButton'\r\nimport {ChatButton} from './ChatButton'\r\nimport {OpenCalendarButton} from './OpenCalendarButton'\r\nimport {PersonalQueueButton} from './PersonalQueueButton'\r\nimport {PullScreenButton} from './PullScreenButton'\r\nimport {SeeScreenButton} from './SeeScreenButton'\r\n\r\n\r\ntype UserActionsProps = {\r\n    user: QmUserDetails | undefined\r\n    onActionStart: () => void\r\n}\r\n\r\nexport const UserActions: React.FC<UserActionsProps> = ({onActionStart, user}) => {\r\n    return (\r\n        <div className=\"flex gap-4\">\r\n            <div className=\"flex\">\r\n                <CallButton user={user} onActionStart={onActionStart} />\r\n                <ChatButton user={user} onActionStart={onActionStart} />\r\n            </div>\r\n            <div className=\"flex\" >\r\n                <PullScreenButton userId={user?.userId} itemId={user?.activeItemId} />\r\n                <SeeScreenButton userId={user?.userId} />\r\n            </div>\r\n            <div className=\"flex\" >\r\n                <OpenCalendarButton userId={user?.userId} onActionStart={onActionStart} />\r\n                <PersonalQueueButton user={user} onActionStart={onActionStart} />\r\n                <ChangeAgentStateButton user={user} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {createAgentStateOptionSelector, useAgentStateOptions} from '@bpinc/ad-agent-state-context'\r\nimport {isAcdState} from '@bpinc/ad-agent-state-types'\r\nimport {getMonitoringUserActiveItem} from '@bpinc/ad-stats-state'\r\nimport type {MonitoringUser} from '@bpinc/ad-stats-state-types'\r\nimport {isItemDirection, isMediaType} from '@bpinc/ad-transport-types'\r\nimport {convertKVArray} from '@bpinc/lib-transport-conversion'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useAgentStateInfo = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const agentStateOptions = useAgentStateOptions()\r\n    const selectAgentStateOption = useMemo(\r\n        () => createAgentStateOptionSelector(),\r\n        [],\r\n    )\r\n\r\n    const getAgentStateOption = useCallback(\r\n        ({acdState, reason}: {acdState: string | undefined; reason: string | undefined}) => {\r\n            if (isAcdState(acdState)) {\r\n                return selectAgentStateOption(\r\n                    {\r\n                        state: acdState,\r\n                        notReadyReason: reason,\r\n                    },\r\n                    agentStateOptions,\r\n                )\r\n            }\r\n        },\r\n        [agentStateOptions, selectAgentStateOption],\r\n    )\r\n\r\n    const getAgentStateIconsProps = useCallback(\r\n        (user: MonitoringUser) => {\r\n            const item = getMonitoringUserActiveItem(user)\r\n            const mediaType = item?.media_type ?? ''\r\n            const direction = item?.direction ?? ''\r\n\r\n            const agentStatusOption = getAgentStateOption({acdState: user.acd_state, reason: user.reason})\r\n\r\n            const reservedItem = convertKVArray(user.items || {}).find(i =>\r\n                i.state === 'queued' ||\r\n                i.state === 'IVR',\r\n            )\r\n            const showNextState =\r\n                (agentStatusOption?.state === 'busy' ||\r\n                    agentStatusOption?.state === 'after_call_work' ||\r\n                    Boolean(reservedItem?.item_id))\r\n\r\n            return [{\r\n                agentStatusOption,\r\n                busyMediaType: isMediaType(mediaType) ? mediaType : undefined,\r\n                direction: isItemDirection(direction) ? direction : undefined,\r\n            }, showNextState ? {\r\n                agentStatusOption: getAgentStateOption({acdState: user.acd_next_state, reason: user.next_reason}),\r\n            } : undefined] as const\r\n        },\r\n        [getAgentStateOption],\r\n    )\r\n\r\n    //TODO: Check this logic\r\n    const getAgentStateTitle = useCallback(\r\n        (user: MonitoringUser) => {\r\n            if (user.is_logged !== '1') return ''\r\n            const option = getAgentStateOption({acdState: user.acd_state, reason: user.reason})\r\n            if (option) {\r\n                if (option.localizeId) {\r\n                    const localizeId =\r\n                        option.localizeId as keyof typeof t.AGENT_STATE_CONTROL\r\n                    const title = t.AGENT_STATE_CONTROL[localizeId]?.(\r\n                        option.state,\r\n                    )\r\n\r\n                    if (title) return title\r\n                }\r\n                return option.label\r\n            }\r\n            return user.reason\r\n        },\r\n        [getAgentStateOption, t],\r\n    )\r\n\r\n    return useMemo(\r\n        () => ({\r\n            getAgentStateOption,\r\n            getAgentStateIconsProps,\r\n            getAgentStateTitle,\r\n        }),\r\n        [getAgentStateIconsProps, getAgentStateTitle, getAgentStateOption],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {Group, UserTableGroupIds} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useGetGroupName() {\r\n    const i18n = useLocalizationState('t').SUPERVISION_PAGE\r\n    return useCallback((group: Group | undefined) => {\r\n        if (!group || group.customName) {\r\n            return group?.customName || ''\r\n        }\r\n        switch (group.id as UserTableGroupIds) {\r\n            case '_group_state': {\r\n                return i18n.users_table_group_state()\r\n            }\r\n            case '_group_states_daily': {\r\n                return i18n.users_table_group_states_daily()\r\n            }\r\n            case '_group_out_daily': {\r\n                return i18n.users_table_group_out_daily()\r\n            }\r\n            case '_group_in_daily': {\r\n                return i18n.users_table_group_in_daily()\r\n            }\r\n            case '_group_in_email_daily': {\r\n                return i18n.users_table_group_in_email_daily()\r\n            }\r\n            case '_group_surveys_daily': {\r\n                return i18n.users_table_group_surveys_daily()\r\n            }\r\n            case '_group_records_daily': {\r\n                return i18n.users_table_group_records_daily()\r\n            }\r\n            case '_group_remainders': {\r\n                return i18n.users_table_group_remainders()\r\n            }\r\n        }\r\n\r\n        return ''\r\n    }, [i18n])\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport type {MonitoringUser} from '@bpinc/ad-stats-state-types'\r\nimport {timeFromNow} from '@bpinc/lib-helpers'\r\nimport {IconAlert} from '@bpinc/lib-icons'\r\nimport {convertKVArray} from '@bpinc/lib-transport-conversion'\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface LastIntentAlertProps {\r\n    user: MonitoringUser\r\n}\r\n\r\nexport const LastIntentAlert: FC<LastIntentAlertProps> = ({\r\n    user,\r\n}) => {\r\n    const lastIntent = useStatsState(state => {\r\n        const allUserIntents = convertKVArray(user.items || {}, i => ({\r\n            itemId: i.item_id,\r\n            intents: Object.keys(i.intents || {}),\r\n        }))\r\n        const intentsAlerts = state.intentAlerts.filter(intentAlert =>\r\n            !intentAlert.closed &&\r\n            intentAlert.userId == user.user_id &&\r\n            allUserIntents.some(userIntent =>\r\n                userIntent.itemId === intentAlert.itemId && userIntent.intents.includes(intentAlert.intentId),\r\n            ),\r\n        )\r\n        return intentsAlerts[0]\r\n    })\r\n\r\n    if (!lastIntent) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Popup\r\n            mode=\"hover\"\r\n            hoverable\r\n            placement=\"top-start\"\r\n            content={\r\n                <div role=\"alert\">\r\n                    <div className=\"flex justify-between gap-2 text-sm\">\r\n                        <div className=\"font-bold\">{lastIntent.agentName}</div>\r\n                        <div>{lastIntent.customerName}</div>\r\n                        <div className=\"text-icon\">{timeFromNow(lastIntent.timestamp)}</div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        >\r\n            <IconAlert />\r\n        </Popup>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useLiveStatTimer} from '@bpinc/lib-helpers-ui'\r\nimport type {ResizeTableColumn, TableItem} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface LiveStatTimerProps {\r\n    row: TableItem\r\n    column: ResizeTableColumn\r\n    renderValue: (value: unknown, columnName: string, row: TableItem) => React.ReactNode\r\n}\r\n\r\nexport const LiveStatTimer: FC<LiveStatTimerProps> = ({\r\n    row,\r\n    column,\r\n    renderValue,\r\n}) => {\r\n    const rowId = row.id\r\n    if (typeof rowId !== 'string') {\r\n        throw new Error('item.id must be a string')\r\n    }\r\n\r\n    const statName = column.name\r\n    const statData = row[statName]\r\n    const statValue = typeof statData === 'string' ? statData : undefined\r\n    const liveStat = useLiveStatTimer(statValue)\r\n\r\n    return <>{renderValue(liveStat, column.name, row)}</>\r\n}\r\n","import React, {useCallback, useDeferredValue, useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {getNotReadyKey, isThresholdKey} from '@bpinc/ad-stats-state-types'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport type {ItemColorsData, ItemRendererType, ResizeTableColumn, TableItem} from '@bpinc/lib-ui-elements'\r\nimport {highlighted, SentimentSlider} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {LastIntentAlert} from '../LastIntentAlert'\r\nimport {LiveStatTimer} from '../LiveStatTimer'\r\nimport {useAgentStateInfo} from './useAgentStateInfo'\r\n\r\n\r\ntype ItemRendererParams = {\r\n    search?: string\r\n    customRenderer?: (item: TableItem, column: ResizeTableColumn) => React.ReactNode\r\n}\r\n\r\nexport const useItemRenderer = ({customRenderer, search}: ItemRendererParams = {}) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const deferredSearch = useDeferredValue(search)\r\n\r\n\r\n    const {getAgentStateTitle} = useAgentStateInfo()\r\n    const {thresholds, systemThresholds} = useStatsState([\r\n        'thresholds',\r\n        'systemThresholds',\r\n    ])\r\n\r\n    const finalThresholds = useMemo(() => {\r\n        return {\r\n            ...systemThresholds.config,\r\n            ...thresholds.config,\r\n        }\r\n    }, [systemThresholds, thresholds])\r\n\r\n    const getColorsByThreshold = useCallback(\r\n        (\r\n            value: unknown,\r\n            statName: string,\r\n            shouldColorize?: boolean,\r\n        ): ItemColorsData | undefined => {\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                return\r\n            }\r\n\r\n            const threshold =\r\n                isThresholdKey(statName) && finalThresholds[statName]\r\n\r\n            if (!threshold) {\r\n                return\r\n            }\r\n\r\n            const {condition, textColor: color, backgroundColor} = threshold\r\n\r\n            const colorData: ItemColorsData = {color, backgroundColor}\r\n\r\n            switch (condition) {\r\n                case 'GREAT_THAN':\r\n                    return Number(value) > Number(threshold.value)\r\n                        ? colorData\r\n                        : undefined\r\n                case 'LESS_THAN':\r\n                    return Number(value) < Number(threshold.value)\r\n                        ? colorData\r\n                        : undefined\r\n                case 'AUTO':\r\n                    return shouldColorize ? colorData : undefined\r\n                default:\r\n                    return\r\n            }\r\n        },\r\n        [finalThresholds],\r\n    )\r\n\r\n    const renderTime = useCallback(\r\n        (value: unknown): React.ReactNode => {\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                return\r\n            }\r\n\r\n            const time = formatDurationShort(value)\r\n            return highlighted({\r\n                text: time,\r\n                highlight: deferredSearch,\r\n            })\r\n        },\r\n        [deferredSearch],\r\n    )\r\n\r\n    const renderServiceLevel = useCallback(\r\n        (item: TableItem): React.ReactNode => {\r\n            const {\r\n                service_level: value,\r\n                service_level_target: target,\r\n                service_level_threshold_time: threshold,\r\n            } = item\r\n\r\n            if (\r\n                (typeof value !== 'string' && typeof value !== 'number') ||\r\n                (typeof target !== 'string' && typeof target !== 'number') ||\r\n                (typeof threshold !== 'string' && typeof threshold !== 'number')\r\n            ) {\r\n                return\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {value}\r\n                    {(target || threshold) && (\r\n                        <span className=\"ml-1 text-main\">\r\n                            {`(${target}/${threshold})`}\r\n                        </span>\r\n                    )}\r\n                </>\r\n            )\r\n        },\r\n        [],\r\n    )\r\n\r\n    const renderSentiment = useCallback(\r\n        (item: TableItem, column: ResizeTableColumn): React.ReactNode => {\r\n            //TODO: What to do with thresholds for sentiments?\r\n            return item[column.name] !== undefined && <SentimentSlider value={Number(item[column.name])} />\r\n        },\r\n        [],\r\n    )\r\n\r\n    const renderAnything = useCallback(\r\n        (value: unknown): React.ReactNode => {\r\n            if (typeof value === 'string' || typeof value === 'number') {\r\n                return highlighted({text: `${value}`, highlight: deferredSearch})\r\n            }\r\n        },\r\n        [deferredSearch],\r\n    )\r\n\r\n    return useCallback(\r\n        (item: TableItem, column: ResizeTableColumn): ItemRendererType => {\r\n            const itemValue = item[column.name]\r\n\r\n            switch (column.name) {\r\n                case 'name': {\r\n                    return {\r\n                        value: renderAnything(itemValue),\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n                case 'display_name': {\r\n                    let name = formatFullName(\r\n                        String(item.firstname),\r\n                        String(item.lastname),\r\n                    )\r\n                    if (item.reason) name += ` (${item.reason})`\r\n                    return {\r\n                        value: highlighted({text: name, highlight: deferredSearch}),\r\n                        meta: undefined,\r\n                    }\r\n                }\r\n                case 'agent_preview_duration':\r\n                case 'login_time':\r\n                case 'active_item_talk_duration':\r\n                case 'active_item_hold_duration': {\r\n                    return {\r\n                        value:\r\n                          <LiveStatTimer\r\n                              row={item}\r\n                              column={column}\r\n                              renderValue={renderTime}\r\n                          />,\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n                case 'state_duration': {\r\n                    const stateThresholdName = getStateThresholdName()\r\n                    return {\r\n                        value:\r\n                        <LiveStatTimer\r\n                            row={item}\r\n                            column={column}\r\n                            renderValue={renderTime}\r\n                        />,\r\n                        meta: stateThresholdName ? getColorsByThreshold(itemValue, stateThresholdName) : undefined,\r\n                    }\r\n                }\r\n                case 'agent_average_idle_time':\r\n                case 'agent_average_preview_time':\r\n                case 'agent_idle_time':\r\n                case 'agent_total_acw_time':\r\n                case 'agent_total_break_time':\r\n                case 'agent_total_busy_time':\r\n                case 'agent_total_ready_time':\r\n                case 'agent_total_not_ready_time':\r\n                case 'calls_average_acw_time_per_day':\r\n                case 'calls_average_handling_time_per_day':\r\n                case 'in_calls_duration_average_per_day':\r\n                case 'in_calls_duration_total_per_day':\r\n                case 'in_calls_dropped_talking_per_day':\r\n                case 'in_calls_disconnected_talking_per_day':\r\n                case 'in_ewt':\r\n                case 'in_max_wait_time':\r\n                case 'out_calls_duration_average_per_day':\r\n                case 'out_calls_duration_total_per_day': {\r\n                    return {\r\n                        value: renderTime(item[column.name]),\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n                case 'active_item_qm_is_recording': {\r\n                    return {\r\n                        value: item[column.name] === '1'\r\n                            ? t.MONITORING_AGENTS_COLUMN_NAMES.monitoring_recording_value_yes()\r\n                            : t.MONITORING_AGENTS_COLUMN_NAMES.monitoring_recording_value_no(),\r\n                        meta: undefined,\r\n                    }\r\n                }\r\n                case 'agent_current_number_interactions': {\r\n                    return {\r\n                        // ~~ converts NaN to 0\r\n                        value: ~~Number(item[column.name]),\r\n                        meta: undefined,\r\n                    }\r\n                }\r\n                case 'service_level': {\r\n                    const {\r\n                        service_level: value,\r\n                        service_level_target: target,\r\n                    } = item\r\n\r\n                    return {\r\n                        value: renderServiceLevel(item),\r\n                        meta: getColorsByThreshold(itemValue, column.name, !!value && !!target && Number(value) < Number(target)),\r\n                    }\r\n                }\r\n                case 'active_item_sentiment': {\r\n                    return {\r\n                        value: renderSentiment(item, column),\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n                case 'state_text': {\r\n                    return {\r\n                        value: highlighted({\r\n                            text: getAgentStateTitle(item),\r\n                            highlight: deferredSearch,\r\n                        }),\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n\r\n                case 'last_alert': {\r\n                    return {\r\n                        value: <LastIntentAlert user={item} />,\r\n                        meta: undefined,\r\n                    }\r\n                }\r\n\r\n                // custom\r\n                case 'custom:checkbox':\r\n                case 'custom:status':\r\n                case 'custom:interactions': {\r\n                    return {\r\n                        value: customRenderer ? customRenderer(item, column) : null,\r\n                        meta: undefined,\r\n                    }\r\n                }\r\n\r\n                default: {\r\n                    return {\r\n                        value: renderAnything(itemValue),\r\n                        meta: getColorsByThreshold(itemValue, column.name),\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getStateThresholdName() {\r\n                switch (item.acd_state) {\r\n                    case 'ready':\r\n                        return 'ready_state'\r\n                    case 'after_call_work':\r\n                        return 'wrap_up_time'\r\n                    case 'not_ready':\r\n                        return (\r\n                            typeof item.reason === 'string' &&\r\n                          getNotReadyKey(item.reason)\r\n                        )\r\n                    default:\r\n                        return undefined\r\n                }\r\n            }\r\n        },\r\n        [\r\n            customRenderer,\r\n            formatFullName,\r\n            getAgentStateTitle,\r\n            getColorsByThreshold,\r\n            renderAnything,\r\n            renderSentiment,\r\n            renderServiceLevel,\r\n            renderTime,\r\n            deferredSearch,\r\n            t.MONITORING_AGENTS_COLUMN_NAMES,\r\n        ],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {type ColumnItemBase, alignedLeftColumns} from '@bpinc/ad-stats-state-types'\r\nimport type {ResizeTableColumn, SortingSettings} from '@bpinc/lib-ui-elements'\r\nimport {getDefaultSortingSettings} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype TableColumnsParams = {\r\n    config?: ColumnItemBase[]\r\n    extraColumns?: ResizeTableColumn[]\r\n    getColumnTitle: (name: string) => string\r\n    sortingSettings: SortingSettings | undefined\r\n    setSortingSettings: (value: SortingSettings | undefined) => void\r\n    scrollEnabled?: boolean\r\n    collapsedGroupIds?: { [groupId: string]: boolean }\r\n}\r\n\r\n\r\nexport const useTableColumns = ({\r\n    config,\r\n    getColumnTitle,\r\n    sortingSettings,\r\n    setSortingSettings,\r\n    extraColumns,\r\n    scrollEnabled = false,\r\n    collapsedGroupIds,\r\n}: TableColumnsParams) => {\r\n    const columnsForCollapsedGroupIds = Object.entries(collapsedGroupIds || {})\r\n        .filter(([_, collapsed]) => collapsed)\r\n        .map(([groupId]) => {\r\n            return (config || []).find(item => item.parentId === groupId && item.v)?.id\r\n        })\r\n    return useMemo(() => {\r\n        const columns: ResizeTableColumn[] = (config || [])\r\n            .filter(item => {\r\n                const isVisible = item.v\r\n                const isExtraSticky = extraColumns?.some(\r\n                    col => col.name === item.id && col.sticky,\r\n                )\r\n                // If the item is inside a group, exclude it if it is not first visible column in the group\r\n                const isCollapsedByGroup = collapsedGroupIds && item.parentId && collapsedGroupIds[item.parentId]\r\n                    ? !columnsForCollapsedGroupIds.includes(item.id)\r\n                    : false\r\n\r\n                return isVisible && !isExtraSticky && !isCollapsedByGroup\r\n            })\r\n            .map(configToTableColumn)\r\n\r\n        if (!sortingSettings) {\r\n            const defaultSortingSettings = getDefaultSortingSettings(columns)\r\n            defaultSortingSettings &&\r\n                setSortingSettings(defaultSortingSettings)\r\n        }\r\n\r\n        const extraStickyColumns = extraColumns?.filter(c => c.sticky)\r\n        if (extraStickyColumns?.length) {\r\n            columns.unshift(...extraStickyColumns.map(extraColumn => {\r\n                const colConfig = config?.find(c => c.id == extraColumn.name)\r\n                if (!colConfig) {\r\n                    return extraColumn\r\n                }\r\n                const configColumn = configToTableColumn(colConfig)\r\n                return {\r\n                    ...extraColumn,\r\n                    width: extraColumn.width || configColumn?.width,\r\n                    align: extraColumn.align || configColumn?.align,\r\n                    title: extraColumn.title || configColumn?.title || '',\r\n                    hidden: extraColumn.hidden === undefined ? configColumn?.hidden : extraColumn.hidden,\r\n                    resizable: extraColumn.resizable === undefined ? true : extraColumn.resizable,\r\n                }\r\n            }))\r\n        }\r\n\r\n        return columns\r\n\r\n        function configToTableColumn(item: ColumnItemBase): ResizeTableColumn {\r\n            const selectedWidth = scrollEnabled ? item.sW : item.w\r\n            const name = item.id\r\n\r\n            return {\r\n                name,\r\n                title: item.customName || getColumnTitle(name),\r\n                width: selectedWidth,\r\n                groupId: item.parentId,\r\n                align: getColumnAlign(name),\r\n            }\r\n        }\r\n    }, [config, sortingSettings, extraColumns, collapsedGroupIds, columnsForCollapsedGroupIds, setSortingSettings, scrollEnabled, getColumnTitle])\r\n}\r\n\r\nfunction getColumnAlign(name: string): ResizeTableColumn['align'] {\r\n    if (\r\n        alignedLeftColumns.includes(name)) {\r\n        return 'start'\r\n    }\r\n    return 'end'\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {SortingSettings} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nexport type DataItem = Record<string, unknown> & { id: string }\r\n\r\ntype TableDataParams = {\r\n    stats: DataItem[]\r\n    sortingSettings?: SortingSettings\r\n    allItem?: DataItem\r\n    filter?: (item: DataItem) => boolean\r\n}\r\n\r\nexport const useTableData = ({\r\n    stats,\r\n    sortingSettings,\r\n    allItem,\r\n    filter,\r\n}: TableDataParams) => {\r\n    const {formatFullName} = useFormatting()\r\n    return useMemo(() => {\r\n        const list: DataItem[] = [...stats]\r\n\r\n        if (sortingSettings) {\r\n            const {column, sorting} = sortingSettings\r\n            list.sort((a, b) => {\r\n                const [v1, v2] = getValues(column, a, b)\r\n\r\n                if (typeof v1 === 'number' && typeof v2 === 'number') {\r\n                    return sorting === 'ASC' ? v1 - v2 : v2 - v1\r\n                }\r\n\r\n                if (typeof v1 === 'string' && typeof v2 === 'string') {\r\n                    return sorting === 'ASC'\r\n                        ? v1.localeCompare(v2)\r\n                        : v2.localeCompare(v1)\r\n                }\r\n\r\n                return 0\r\n            })\r\n\r\n\r\n        }\r\n\r\n        if (allItem && list.length > 1) {\r\n            list.unshift(allItem)\r\n        }\r\n\r\n        return filter ? list.filter(filter) : list\r\n\r\n        function getValues(column: string, a: DataItem, b: DataItem) {\r\n            if (column === 'display_name') {\r\n                if (\r\n                    typeof a.firstname !== 'string' ||\r\n                    typeof a.lastname !== 'string' ||\r\n                    typeof b.firstname !== 'string' ||\r\n                    typeof b.lastname !== 'string'\r\n                ) {\r\n                    return [0, 0]\r\n                }\r\n                return [\r\n                    formatFullName(a.firstname, a.lastname),\r\n                    formatFullName(b.firstname, b.lastname),\r\n                ]\r\n            }\r\n            return [a[column], b[column]]\r\n        }\r\n    }, [stats, sortingSettings, allItem, filter, formatFullName])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useTeamName = (teamId: string) => {\r\n    const {monitoringTeamsStats: stats} = useStatsState()\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        if (teamId === '') return t.GLOBAL.all_teams()\r\n        return Object.values(stats).find(it => it.team_id === teamId)?.name || ''\r\n    }, [teamId, t.GLOBAL, stats])\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mark\":\"supervision_QuickMonitor_mark_PLmW0\",\"highlighted\":\"supervision_QuickMonitor_highlighted_HZ6xl\"};","import {escapeRegExp} from 'lodash-es'\r\n\r\nimport type {PeekItemPartyType} from '@bpinc/ad-stats-state-types'\r\nimport {highlightHTML} from '@bpinc/lib-html-utils'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {QuickMonitorMessageDisplayDirection} from './types'\r\n\r\nimport styles from './QuickMonitor.module.less'\r\n\r\n\r\nconst INTENT_ELEM_CLASSNAME = `intent_+${CSS.escape(uuid())}`\r\n\r\nexport function getMessageContentWithHighlightedSearch(content: string, search: string) {\r\n    return highlightHTML({html: content, textToHighlight: search, className: styles.mark})\r\n}\r\n\r\nexport function getMessageHighlightedElement(messageElem: HTMLElement, index: number) {\r\n    return messageElem.querySelectorAll<HTMLElement>(`.${styles.mark}`)?.[index]\r\n}\r\n\r\nexport function getHtmlMessageMarksCount(htmlMessage: string) {\r\n    return (htmlMessage.match(new RegExp(escapeRegExp(styles.mark), 'g')) || []).length\r\n}\r\n\r\nexport function getMessageContentWithMarkedIntent(content: string, intentText: string) {\r\n    return highlightHTML({html: content, textToHighlight: intentText, element: 'span', className: INTENT_ELEM_CLASSNAME})\r\n}\r\n\r\nexport function getMessageIntentElement(messageElem: HTMLElement) {\r\n    return messageElem.querySelector<HTMLElement>(`.${INTENT_ELEM_CLASSNAME}`)\r\n}\r\n\r\nexport function getMessageDirectionFromParty(party: PeekItemPartyType | undefined): QuickMonitorMessageDisplayDirection {\r\n    return party?.type === 'external' ? 'incoming' : 'outgoing'\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport type {Draft} from 'immer'\r\nimport produce from 'immer'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {UIStateContextValue} from '@bpinc/ad-state-context-factory'\r\nimport {createUIStateHooks} from '@bpinc/ad-state-context-factory'\r\nimport type {\r\n    IntentAlert,\r\n    PeekItemIntentType,\r\n    PeekItemMessageType,\r\n    PeekItemPartiesType,\r\n} from '@bpinc/ad-stats-state-types'\r\nimport {useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport type {QuickMonitorContextEditableState, QuickMonitorContextState} from './types'\r\nimport {useDisplayMessages} from './useDisplayMessages'\r\n\r\n\r\nlet QuickMonitorContext: Context<UIStateContextValue<QuickMonitorContextState, QuickMonitorContextEditableState>>\r\n\r\ntype QuickMonitorContextProviderProps = {\r\n    parties: PeekItemPartiesType\r\n    intents: PeekItemIntentType[]\r\n    messages: PeekItemMessageType[]\r\n    autofocusedIntentAlert: IntentAlert | undefined\r\n    children: ReactElement | ReactFragment\r\n}\r\n\r\nexport const QuickMonitorContextProvider: React.FC<QuickMonitorContextProviderProps> = ({\r\n    children,\r\n    parties,\r\n    intents,\r\n    autofocusedIntentAlert,\r\n    messages: stateMessages,\r\n}) => {\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n    const [state, setState] = useState<QuickMonitorContextEditableState>({\r\n        search: '',\r\n        searchResult: undefined,\r\n        targetIntent: undefined,\r\n    })\r\n\r\n    // Chat is conference if we have more than two parties who are not scenario or supervisor in a participate mode\r\n    const isConference = useMemo(() => {\r\n        return Object.values(parties).filter(p => p.type !== 'scenario' && (!p.isQm || p.qmMode === 'participate')).length > 2\r\n    }, [parties])\r\n\r\n    const messages = useDisplayMessages(stateMessages, parties)\r\n\r\n    const editableStateRef = useAsRef(state)\r\n    const produceState = useCallback((stateUpdate: (draft: Draft<QuickMonitorContextEditableState>) => void) => {\r\n        const newState = produce(editableStateRef.current, stateUpdate)\r\n        setState(s => ({...s, ...newState}))\r\n    },\r\n    [editableStateRef],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (autofocusedIntentAlert && messages.length && intents.length) {\r\n            const intent = intents.find(({id}) => id === autofocusedIntentAlert.intentId)\r\n            if (!intent) {\r\n                return\r\n            }\r\n            const messageIndex = messages.findIndex(m => m.id === intent.msgId)\r\n            produceState(draft => {\r\n                draft.targetIntent = {\r\n                    messageIndex,\r\n                    intentText: intent.text,\r\n                    messageId: intent.msgId,\r\n                }\r\n            })\r\n            produceSupervisionUIContext(draft => {\r\n                draft.qmAutofocusedIntentAlert = undefined\r\n            })\r\n        }\r\n    }, [autofocusedIntentAlert, intents, messages, produceState, produceSupervisionUIContext])\r\n\r\n    const stateRef = useAsRef({...state, messages, isConference, intents})\r\n    const value = useMemo((): UIStateContextValue<QuickMonitorContextState, QuickMonitorContextEditableState> => ({\r\n        state: {...state, messages, isConference, intents},\r\n        produceState,\r\n        stateRef,\r\n    }),\r\n    [\r\n        state,\r\n        messages,\r\n        isConference,\r\n        intents,\r\n        produceState,\r\n        stateRef,\r\n    ],\r\n    )\r\n\r\n    if (!QuickMonitorContext) {\r\n        QuickMonitorContext =\r\n          createContext<UIStateContextValue<QuickMonitorContextState, QuickMonitorContextEditableState>>(value)\r\n        QuickMonitorContext.displayName = 'QuickMonitorContext'\r\n    }\r\n\r\n    return (\r\n        <QuickMonitorContext.Provider value={value}>\r\n            {children}\r\n        </QuickMonitorContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {\r\n    useQuickMonitorContext,\r\n    useQuickMonitorContextProducer,\r\n} = createUIStateHooks<QuickMonitorContextState, 'QuickMonitorContext', QuickMonitorContextEditableState>(\r\n    'QuickMonitorContext',\r\n    () => QuickMonitorContext,\r\n)\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {normalizeByUrlParser} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {\r\n    PeekItemMessageSystemType,\r\n    PeekItemMessageType,\r\n    PeekItemPartiesType,\r\n    PeekItemPartyType,\r\n} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageDirectionFromParty} from './helpers'\r\nimport type {QuickMonitorMessageDisplayType} from './types'\r\n\r\n\r\nexport function useDisplayMessages(messages: PeekItemMessageType[], parties: PeekItemPartiesType) {\r\n    const getSystemMessageContent = useGetSystemMessageContent()\r\n\r\n    return useMemo(() => messages.map<QuickMonitorMessageDisplayType>(message => {\r\n        const {id, partyId, timestamp, type} = message\r\n        const party = parties[partyId]\r\n        const direction = getMessageDirectionFromParty(party)\r\n        const content = message.type === 'system' ? getSystemMessageContent(message, party) : normalizeByUrlParser(message.text)\r\n        return ({\r\n            id,\r\n            timestamp,\r\n            htmlContent: content,\r\n            party,\r\n            type,\r\n            direction,\r\n        })\r\n    }), [getSystemMessageContent, messages, parties])\r\n}\r\n\r\nfunction useGetSystemMessageContent() {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n\r\n    return useCallback((message: PeekItemMessageSystemType, party: PeekItemPartyType | undefined) => {\r\n        const fullName = formatFullName(party?.firstName, party?.lastName)\r\n\r\n        switch (message.systemType) {\r\n            case 'party_connected':\r\n                return t.SUPERVISION_PAGE.quality_management_monitor_party_connected(fullName)\r\n            case 'party_inviting':\r\n                return t.SUPERVISION_PAGE.quality_management_monitor_party_inviting(fullName)\r\n            case 'party_left':\r\n                return t.SUPERVISION_PAGE.quality_management_monitor_party_left(fullName)\r\n        }\r\n        return message.systemType\r\n    }, [formatFullName, t.SUPERVISION_PAGE])\r\n}\r\n","import React from 'react'\r\n\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useQuickMonitorContext, useQuickMonitorContextProducer} from './QuickMonitorContext'\r\n\r\n\r\nexport const Intents: React.FC = () => {\r\n    const {intents, messages} = useQuickMonitorContext(['intents', 'messages'])\r\n    const quickMonitorContextProducer = useQuickMonitorContextProducer()\r\n\r\n    if (!intents.length) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"mx-4 mt-2 max-h-[62px] shrink-0 overflow-y-auto rounded border border-main-border p-1\">\r\n            {\r\n                intents.map(intent => (\r\n                    <SemanticButton\r\n                        key={intent.msgId}\r\n                        onClick={() => {\r\n                            const messageIndex = messages.findIndex(m => m.id === intent.msgId)\r\n                            quickMonitorContextProducer(s => {\r\n                                s.targetIntent = {\r\n                                    messageIndex,\r\n                                    intentText: intent.text,\r\n                                    messageId: intent.msgId,\r\n                                }\r\n                            })\r\n                        }}\r\n                        basic\r\n                        className=\"!mx-1 !my-0.5 !rounded-[16px] !px-3 !py-0.5 !leading-[17px]\"\r\n                    >\r\n                        <span className=\"text-primary-legacy\">{intent.name}</span>\r\n                    </SemanticButton>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport type {QuickMonitorMessageDisplayDirection} from '../types'\r\n\r\n\r\ntype MessageContainerProps = {\r\n    direction: QuickMonitorMessageDisplayDirection\r\n    children: ReactNode\r\n}\r\n\r\nexport const MessageContainer: React.FC<MessageContainerProps> = ({direction, children}) => {\r\n    const isIncoming = direction === 'incoming'\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col pb-2 ', {'items-end': !isIncoming, 'items-start': isIncoming})}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import type {RefObject} from 'react'\r\nimport {useEffect, useMemo, useRef} from 'react'\r\n\r\nimport {useInnerHTML, useValueUpdated} from '@bpinc/lib-helpers'\r\n\r\nimport {\r\n    getMessageContentWithHighlightedSearch,\r\n    getMessageContentWithMarkedIntent,\r\n    getMessageHighlightedElement,\r\n    getMessageIntentElement,\r\n} from '../../helpers'\r\nimport {useQuickMonitorContext} from '../../QuickMonitorContext'\r\nimport type {QuickMonitorMessageDisplayType} from '../../types'\r\n\r\nimport styles from '../../QuickMonitor.module.less'\r\n\r\n\r\nexport function useMessageHtml({htmlContent, id}: QuickMonitorMessageDisplayType, ref: RefObject<HTMLElement>) {\r\n    const {searchResult, search, targetIntent} = useQuickMonitorContext(['searchResult', 'search', 'targetIntent'])\r\n    const intentWasScrolled = useRef(false)\r\n    const searchWasScrolled = useRef(false)\r\n\r\n    const highlightedContent = useMemo(() => {\r\n        const result = getMessageContentWithHighlightedSearch(htmlContent, search)\r\n        if (targetIntent?.messageId !== id) {\r\n            return result\r\n        }\r\n\r\n        return getMessageContentWithMarkedIntent(result, targetIntent.intentText)\r\n    }, [htmlContent, search, targetIntent?.messageId, targetIntent?.intentText, id])\r\n\r\n\r\n    const innerHTML = useInnerHTML(highlightedContent)\r\n\r\n    //Highlight current search result\r\n    useEffect(() => {\r\n        if (!ref.current || searchResult?.messageId !== id) {\r\n            return\r\n        }\r\n\r\n        const highlightedMarkElem = getMessageHighlightedElement(ref.current, searchResult.index)\r\n        if (!highlightedMarkElem) {\r\n            return\r\n        }\r\n\r\n        highlightedMarkElem.classList.add(styles.highlighted)\r\n        highlightedMarkElem.scrollIntoView({block: 'center'})\r\n        searchWasScrolled.current = true\r\n\r\n        return () => highlightedMarkElem.classList.remove(styles.highlighted)\r\n    }, [id, ref, searchResult])\r\n\r\n    //Scroll to intent\r\n    useEffect(() => {\r\n        if (!ref.current || targetIntent?.messageId !== id || intentWasScrolled.current) {\r\n            return\r\n        }\r\n\r\n        const intentElem = getMessageIntentElement(ref.current)\r\n        if (!intentElem) {\r\n            return\r\n        }\r\n\r\n        intentElem.scrollIntoView({block: 'center'})\r\n        intentWasScrolled.current = true\r\n    }, [id, ref, searchResult, targetIntent?.messageId])\r\n\r\n    const searchResultChanged = useValueUpdated(searchResult)\r\n    useEffect(() => {\r\n        if (searchResultChanged) {\r\n            searchWasScrolled.current = false\r\n        }\r\n    }, [targetIntent, searchResultChanged])\r\n\r\n    const targetIntentChanged = useValueUpdated(targetIntent)\r\n    useEffect(() => {\r\n        if (targetIntentChanged) {\r\n            intentWasScrolled.current = false\r\n        }\r\n    }, [targetIntent, targetIntentChanged])\r\n\r\n    return innerHTML\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {QuickMonitorMessageDisplayType} from '../../types'\r\nimport {useMessageHtml} from './useMessageHtml'\r\n\r\n\r\ntype RegularMessageProps = {\r\n    message: QuickMonitorMessageDisplayType\r\n}\r\n\r\nexport const RegularMessage: React.FC<RegularMessageProps> = ({message}) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const isIncoming = message.direction === 'incoming'\r\n    const fullName = formatFullName(message.party?.firstName, message.party?.lastName)\r\n    const date = formatDate(message.timestamp)\r\n\r\n    const innerHTML = useMessageHtml(message, ref)\r\n\r\n    return (\r\n        <Popup\r\n            mode=\"hover\"\r\n            className=\"max-w-4/5\"\r\n            content={`${fullName ? fullName + ', ' : ''}${date}`}\r\n        >\r\n            <div\r\n                ref={ref}\r\n                dangerouslySetInnerHTML={innerHTML}\r\n                className={tcn('inline-block whitespace-pre-line rounded', {\r\n                    'border border-chat-center-out-message-border px-1 py-[3px]': !isIncoming,\r\n                    'bg-chat-center-in-message-bg p-1': isIncoming,\r\n                })}\r\n            />\r\n        </Popup>\r\n    )\r\n}\r\n\r\n","import React, {useRef} from 'react'\r\n\r\nimport {IconCogwheel} from '@bpinc/lib-icons'\r\n\r\nimport type {QuickMonitorMessageDisplayType} from '../../types'\r\nimport {useMessageHtml} from './useMessageHtml'\r\n\r\n\r\ntype ScenarioMessageProps = {\r\n    message: QuickMonitorMessageDisplayType\r\n}\r\n\r\nexport const ScenarioMessage: React.FC<ScenarioMessageProps> = ({message}) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const innerHTML = useMessageHtml(message, ref)\r\n\r\n    return (\r\n        <div className=\"m-0 flex items-center gap-1 text-main-secondary\">\r\n            <IconCogwheel />\r\n            <p\r\n                ref={ref}\r\n                dangerouslySetInnerHTML={innerHTML}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {QuickMonitorMessageDisplayType} from '../../types'\r\nimport {RegularMessage} from './RegularMessage'\r\nimport {ScenarioMessage} from './ScenarioMessage'\r\n\r\n\r\ntype MessageContentProps = {\r\n    message: QuickMonitorMessageDisplayType\r\n}\r\n\r\nexport const MessageContent: React.FC<MessageContentProps> = ({message}) => {\r\n    switch (message.type) {\r\n        case 'regular':\r\n            return <RegularMessage message={message} />\r\n        case 'scenario':\r\n        case 'system':\r\n            return <ScenarioMessage message={message} />\r\n    }\r\n\r\n    return <p>Unknown message type</p>\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\n\r\nimport {useQuickMonitorContext} from '../QuickMonitorContext'\r\nimport type {QuickMonitorMessageDisplayType} from '../types'\r\n\r\n\r\ntype MessageInfoProps = {\r\n    message: QuickMonitorMessageDisplayType\r\n}\r\n\r\nexport const MessageInfo: React.FC<MessageInfoProps> = ({message}) => {\r\n    const isConference = useQuickMonitorContext('isConference')\r\n    const isIncoming = message.direction === 'incoming'\r\n    const {formatFullName} = useFormatting()\r\n\r\n    // Don't show name for non-conference mode, and for all incoming and scenario or system messages,\r\n    if (!isConference || isIncoming || message.type !== 'regular') {\r\n        return null\r\n    }\r\n\r\n    const fullName = formatFullName(message.party?.firstName, message.party?.lastName)\r\n\r\n    return (\r\n        <p className=\"mb-1 text-sm font-bold\">{fullName}</p>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {QuickMonitorMessageDisplayType} from '../types'\r\nimport {MessageContainer} from './MessageContainer'\r\nimport {MessageContent} from './MessageContent'\r\nimport {MessageInfo} from './MessageInfo'\r\n\r\n\r\ntype MessageProps = {\r\n    message: QuickMonitorMessageDisplayType\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = ({message}) => {\r\n    return (\r\n        <MessageContainer direction={message.direction}>\r\n            <MessageInfo message={message} />\r\n            <MessageContent message={message} />\r\n        </MessageContainer>\r\n    )\r\n}\r\n\r\n","import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport type {IndexLocationWithAlign, VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\n\r\nimport {useBoolean, useScrollObserver} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {Message} from './Message'\r\nimport {useQuickMonitorContext} from './QuickMonitorContext'\r\nimport type {QuickMonitorMessageDisplayType} from './types'\r\n\r\n\r\nexport const Messages: React.FC = () => {\r\n    const {messages, searchResult, targetIntent} = useQuickMonitorContext(['messages', 'searchResult', 'targetIntent'])\r\n    const virtualizeScrollerRef = useRef<VirtuosoHandle>(null)\r\n\r\n    const {value: hasScroll, setTrue: onScrollAppeared, setFalse: onScrollDisappeared} = useBoolean()\r\n    const scrollRef = useScrollObserver({onScrollAppeared, onScrollDisappeared})\r\n\r\n    const [scrollNode, setScrollNode] = useState<HTMLDivElement | undefined>(undefined)\r\n    const setScrollNodeRef = useCallback((node: HTMLDivElement) => {\r\n        setScrollNode(node)\r\n        scrollRef.current = node\r\n    }, [scrollRef])\r\n\r\n    // Scroll to current highlighted search result\r\n    useEffect(() => {\r\n        if (!searchResult?.messageId) {\r\n            return\r\n        }\r\n        virtualizeScrollerRef.current?.scrollToIndex({index: searchResult.messageIndex, align: 'center'})\r\n    }, [searchResult])\r\n\r\n    // Scroll to current searched intent\r\n    useEffect(() => {\r\n        if (!targetIntent) {\r\n            return\r\n        }\r\n        virtualizeScrollerRef.current?.scrollToIndex({index: targetIntent.messageIndex, align: 'center'})\r\n    }, [targetIntent])\r\n\r\n    const renderMessage = useCallback((_idx: number, message: QuickMonitorMessageDisplayType) => {\r\n        return <Message message={message} />\r\n    }, [])\r\n\r\n    const generateMessageKey = useCallback((_idx: number, message: QuickMonitorMessageDisplayType) => message.id, [])\r\n\r\n    const initialTopMostItemIndex = useMemo<IndexLocationWithAlign>(() => {\r\n        if (targetIntent) {\r\n            return {index: targetIntent.messageIndex, align: 'center'}\r\n        }\r\n        return {index: 'LAST'}\r\n    }, [targetIntent])\r\n\r\n    return (\r\n        <div className=\"flex flex-1 flex-col overflow-hidden pr-1 pt-2\">\r\n            <div\r\n                ref={setScrollNodeRef}\r\n                className={tcn(\r\n                    'relative min-h-2.5 grow overflow-y-auto pl-4',\r\n                    {'pr-1': hasScroll, 'pr-3': !hasScroll},\r\n                )}\r\n            >\r\n                <Virtuoso\r\n                    tabIndex={undefined}\r\n                    ref={virtualizeScrollerRef}\r\n                    followOutput\r\n                    data={messages}\r\n                    itemContent={renderMessage}\r\n                    computeItemKey={generateMessageKey}\r\n                    customScrollParent={scrollNode}\r\n                    initialTopMostItemIndex={initialTopMostItemIndex}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import type {ChangeEvent} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {SearchInput, SearchResultsSwitcher} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getHtmlMessageMarksCount, getMessageContentWithHighlightedSearch} from './helpers'\r\nimport {useQuickMonitorContext, useQuickMonitorContextProducer} from './QuickMonitorContext'\r\nimport type {QuickMonitorSearchResultType} from './types'\r\n\r\n\r\nexport const Search: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const {messages, search} = useQuickMonitorContext(['messages', 'search'])\r\n    const quickMonitorContextProducer = useQuickMonitorContextProducer()\r\n    const [searchLocal, setSearchLocal] = useState('')\r\n\r\n    const [highlightIndex, setHighlightIndex] = useState<number | undefined>(undefined)\r\n\r\n    const setDebouncedSearch = useMemo(() => debounce((value: string) => {\r\n        quickMonitorContextProducer(draft => {\r\n            draft.search = value\r\n        })\r\n    }, 500), [quickMonitorContextProducer])\r\n\r\n    useEffect(() => {\r\n        setDebouncedSearch(searchLocal)\r\n    }, [searchLocal, setDebouncedSearch])\r\n\r\n    const filteredResults = useMemo(() => {\r\n        if (!search) {\r\n            return []\r\n        }\r\n        return messages.reduce<QuickMonitorSearchResultType[]>((result, message, messageIndex) => {\r\n            const content = getMessageContentWithHighlightedSearch(message.htmlContent, search)\r\n            const marksCount = getHtmlMessageMarksCount(content)\r\n            const markers = Array.from({length: marksCount}).map((_, index) => ({\r\n                messageId: message.id,\r\n                messageIndex,\r\n                index,\r\n            })).reverse()\r\n            return [...markers, ...result]\r\n        }, [])\r\n\r\n    }, [search, messages])\r\n\r\n    useEffect(() => {\r\n        if (highlightIndex) {\r\n            const searchResult = filteredResults[highlightIndex - 1]\r\n            quickMonitorContextProducer(draft => {\r\n                draft.searchResult = searchResult\r\n            })\r\n        } else {\r\n            quickMonitorContextProducer(draft => {\r\n                draft.searchResult = undefined\r\n            })\r\n        }\r\n    }, [filteredResults, highlightIndex, quickMonitorContextProducer])\r\n\r\n    const handleHighlight = useCallback((position: number) => {\r\n        setHighlightIndex(position)\r\n    }, [])\r\n\r\n    const handleSearch = useCallback((evt: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchLocal(evt.target.value)\r\n        setHighlightIndex(1)\r\n    }, [])\r\n\r\n    const handleClear = useCallback(() => {\r\n        setSearchLocal('')\r\n        setHighlightIndex(undefined)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex gap-2 px-4\">\r\n            <SearchInput\r\n                clearable\r\n                value={searchLocal}\r\n                onChange={handleSearch}\r\n                onClear={handleClear}\r\n                enabledInOffline\r\n                placeholder={t.SUPERVISION_PAGE.quality_management_monitor_search_transcript()}\r\n            />\r\n            {!!searchLocal &&\r\n              <SearchResultsSwitcher current={highlightIndex || 0} total={filteredResults.length} onChange={handleHighlight} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport type {IntentAlert, QmItemDetails} from '@bpinc/ad-stats-state-types'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {Intents} from './Intents'\r\nimport {Messages} from './Messages'\r\nimport {QuickMonitorContextProvider} from './QuickMonitorContext'\r\nimport {Search} from './Search'\r\nimport {useSubscribeForItemPeek} from './useSubscribeItemPeek'\r\n\r\n\r\ntype QuickMonitorProps = {\r\n    item: QmItemDetails\r\n    autofocusedIntentAlert: IntentAlert | undefined\r\n}\r\n\r\nexport const QuickMonitor: React.FC<QuickMonitorProps> = ({item, autofocusedIntentAlert}) => {\r\n    useSubscribeForItemPeek(item.id)\r\n\r\n    const data = useStatsState(state => state.peekItems[item.id || ''])\r\n\r\n    if (!data) {\r\n        return null\r\n    }\r\n\r\n    if (data.isLoading) {\r\n        return (\r\n            <div className=\"relative mt-2 flex flex-1 items-center justify-center p-8\">\r\n                <Loader active color=\"primary\" size=\"medium\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"mt-2 flex flex-1 flex-col overflow-hidden\">\r\n            <QuickMonitorContextProvider\r\n                {...data}\r\n                autofocusedIntentAlert={autofocusedIntentAlert}\r\n            >\r\n                <Search />\r\n                <Intents />\r\n                <Messages />\r\n            </QuickMonitorContextProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {useLayoutEffect} from 'react'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\n\r\n\r\nexport function useSubscribeForItemPeek(itemId: string | undefined) {\r\n    const {subscribeToItemPeek, unsubscribeFromItemPeek} = useStatsStateMethods()\r\n    useLayoutEffect(() => {\r\n        if (!itemId) {\r\n            return\r\n        }\r\n\r\n        subscribeToItemPeek(itemId)\r\n\r\n        return () => {\r\n            unsubscribeFromItemPeek(itemId)\r\n        }\r\n    }, [itemId, subscribeToItemPeek, unsubscribeFromItemPeek])\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {AgentStateOption} from '@bpinc/ad-agent-state-types'\r\nimport type {QmItemDetails, QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {isMediaType} from '@bpinc/ad-transport-types'\r\nimport {AgentStatusIcon} from '@bpinc/lib-agent-state-ui'\r\nimport {formatDurationShort, useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconMore} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {PopupButton, SemanticButton, SentimentSlider} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMonitoringModes} from '../../hooks/useMonitoringModes'\r\n\r\n\r\ntype ItemsProps = {\r\n    item: QmItemDetails\r\n    agentStatusOption: AgentStateOption | undefined\r\n    user: QmUserDetails\r\n}\r\n\r\nexport const ItemCard: React.FC<ItemsProps> = ({item, user, agentStatusOption}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n\r\n    const {mediaType, direction, sentiment = 0} = item\r\n    const busyMediaType = isMediaType(mediaType) ? mediaType : undefined\r\n\r\n    const {monitor, whisper, participate} = useMonitoringModes(user.userId, item.id)\r\n\r\n    const options = useMemo(() => {\r\n        return ([\r\n            {\r\n                children: t.SUPERVISION_PAGE.quality_management_monitor_menu_coach(),\r\n                onClick: whisper.start,\r\n                disabled: whisper.disabled,\r\n            },\r\n            {\r\n                children: t.SUPERVISION_PAGE.quality_management_monitor_menu_barge_in(),\r\n                onClick: participate.start,\r\n                disabled: participate.disabled,\r\n            },\r\n        ])\r\n    }, [participate.disabled, participate.start, t.SUPERVISION_PAGE, whisper.disabled, whisper.start])\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'mx-4 flex items-center justify-between gap-4 px-4 py-2.5',\r\n                'rounded border border-main-border',\r\n                {\r\n                    'border-[--sentiment-slider-positive]': sentiment > 0,\r\n                    'border-[--sentiment-slider-negative]': sentiment < 0,\r\n                },\r\n            )}\r\n        >\r\n            <div className=\"flex-1\">\r\n                <div className=\"flex flex-1 gap-4\">\r\n                    <span className=\"font-bold\">{item.partyName || t.GLOBAL.heading_unknown()}</span>\r\n                    <div className=\"flex gap-2\">\r\n                        <AgentStatusIcon\r\n                            isLoggedOut={!user.isLogged}\r\n                            agentStatusOption={agentStatusOption}\r\n                            busyMediaType={busyMediaType}\r\n                            direction={direction}\r\n                            className=\"!h-5 !w-5\"\r\n                        />\r\n                        {item.talkDuration && <span>{formatDurationShort(item.talkDuration)}</span>}\r\n                    </div>\r\n                    <div>\r\n                        <SentimentSlider value={sentiment} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-1.5 flex gap-4\">\r\n                    {item.serviceName && <span>{item.serviceName}</span>}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <SemanticButton\r\n                    basic\r\n                    tooltip={t.SUPERVISION_PAGE.quality_management_monitor_button()}\r\n                    disabled={monitor.disabled}\r\n                    className=\"!h-[30px] !px-2 !py-1.5\"\r\n                    onClick={monitor.start}\r\n                >\r\n                    <span className=\"font-bold\">{t.SUPERVISION_PAGE.quality_management_monitor_button()}</span>\r\n                </SemanticButton>\r\n                <PopupButton\r\n                    show={show}\r\n                    toggleShow={toggleShow}\r\n                    options={options}\r\n                    tooltip={t.SUPERVISION_PAGE.quality_management_monitor_menu_button()}\r\n                    className=\"!flex !h-[30px] !w-[30px] items-center justify-center !p-0\"\r\n                >\r\n                    <IconMore className=\"h-4 w-4\" />\r\n                </PopupButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {QmItemDetails, QmUserDetails} from '@bpinc/ad-stats-state-types'\r\nimport {useSupervisionUIContext} from '@bpinc/ad-supervision-ui-context'\r\nimport {isItemDirection, isMediaType} from '@bpinc/ad-transport-types'\r\nimport {AgentStatusIcon} from '@bpinc/lib-agent-state-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useAgentStateInfo} from '../../hooks'\r\nimport {QuickMonitor} from '../QuickMonitor'\r\nimport {ItemCard} from './ItemCard'\r\n\r\n\r\ntype MonitoringItemTab = {\r\n    id: string\r\n    title: string\r\n    item: QmItemDetails\r\n}\r\n\r\ntype UserItemsProps = {\r\n    user: QmUserDetails\r\n}\r\n\r\nexport const UserItems: React.FC<UserItemsProps> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n    const {getAgentStateOption} = useAgentStateInfo()\r\n    const {items, activeItemId} = user\r\n    const agentStatusOption = useMemo(() => getAgentStateOption({acdState: user.acdState, reason: user.reason}), [getAgentStateOption, user])\r\n    const privileges = useSessionState('privileges')\r\n    const qmAutofocusedIntentAlert = useSupervisionUIContext('qmAutofocusedIntentAlert')\r\n    const hasMonitorPrivilege = !!privileges.SYS_MONITOR_INTERACTIONS\r\n\r\n    const tabs: MonitoringItemTab[] = useMemo(() => Object.entries(items || {}).reduce<MonitoringItemTab[]>((resultTabs, [_, item]) => {\r\n        if (item) {\r\n            resultTabs.push({\r\n                id: item.id || '',\r\n                title: item.partyName || '',\r\n                item,\r\n            })\r\n        }\r\n        return resultTabs\r\n    }, []), [items])\r\n\r\n    const [activeTabId, setActiveTabId] = useState(activeItemId || tabs[0]?.id || qmAutofocusedIntentAlert?.itemId || '')\r\n\r\n    useEffect(() => {\r\n        const hasActiveTab = tabs.some(tab => tab.id === activeTabId)\r\n        if (hasActiveTab) {\r\n            return\r\n        }\r\n\r\n        setActiveTabId(tabs[0]?.id || '')\r\n    }, [activeTabId, tabs])\r\n\r\n    useEffect(() => {\r\n        if (!qmAutofocusedIntentAlert) {\r\n            return\r\n        }\r\n        const autoFocusedTab = tabs.find(tab => tab.id === qmAutofocusedIntentAlert.itemId)\r\n        if (!autoFocusedTab) {\r\n            return\r\n        }\r\n        setActiveTabId(autoFocusedTab.id)\r\n    }, [qmAutofocusedIntentAlert, tabs])\r\n\r\n    const renderTab = useCallback(({id, item, title}: MonitoringItemTab) => {\r\n        const {mediaType, direction} = item\r\n\r\n        const busyMediaType = isMediaType(mediaType) ? mediaType : undefined\r\n        const itemDirection = direction && isItemDirection(direction) ? direction : undefined\r\n\r\n        return (\r\n            <div className=\"flex justify-center gap-2\">\r\n                <AgentStatusIcon\r\n                    agentStatusOption={agentStatusOption}\r\n                    busyMediaType={busyMediaType}\r\n                    direction={itemDirection}\r\n                    className=\"!h-4 !w-4\"\r\n                />\r\n                <span className={tcn({'font-bold': id === activeTabId})}>{title || t.GLOBAL.heading_unknown()}</span>\r\n            </div>\r\n        )\r\n    }, [activeTabId, t.GLOBAL, agentStatusOption])\r\n\r\n    const renderTabContent = useCallback(({item}: MonitoringItemTab) => {\r\n        return (\r\n            <div key={item.id} className=\"mt-2 flex flex-1 flex-col overflow-hidden\">\r\n                <ItemCard\r\n                    item={item}\r\n                    user={user}\r\n                    agentStatusOption={agentStatusOption}\r\n                />\r\n                {hasMonitorPrivilege && (\r\n                    <QuickMonitor\r\n                        item={item}\r\n                        autofocusedIntentAlert={\r\n                            item.id === qmAutofocusedIntentAlert?.itemId\r\n                                ? qmAutofocusedIntentAlert\r\n                                : undefined\r\n                        }\r\n                    />\r\n                ) }\r\n            </div>\r\n        )\r\n    }, [user, agentStatusOption, hasMonitorPrivilege, qmAutofocusedIntentAlert])\r\n\r\n    return (\r\n        <Tabs\r\n            tabs={tabs}\r\n            activeTabId={activeTabId}\r\n            renderTab={renderTab}\r\n            renderTabContent={renderTabContent}\r\n            onChange={setActiveTabId}\r\n            className=\"mt-5 flex flex-1 flex-col overflow-hidden\"\r\n            headerClassName={tcn('h-auto border-0 bg-transparent px-4')}\r\n            tabClassName={tcn('px-2 pb-2 pt-0')}\r\n            tabsContentClassName=\"flex flex-1 flex-col overflow-hidden\"\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {isEmpty} from 'lodash-es'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconChevronUpCircle} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ExtendedMonitoring} from './ExtendedMonitoring'\r\nimport {MonitoringUserAvatar} from './MonitoringUserAvatar'\r\nimport {PanelActions} from './PanelActions'\r\nimport {UserActions} from './UserActions'\r\nimport {UserItems} from './UserItmes'\r\n\r\n\r\nexport type QualityManagementMonitorProps = {\r\n    userId: string\r\n    className?: string\r\n}\r\n\r\nexport const QualityManagementMonitor: React.FC<QualityManagementMonitorProps> = ({userId, className}) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n    const {\r\n        qmViewType: viewType,\r\n        qmShowDetails: showDetails,\r\n        qmModalClose,\r\n    } = useSupervisionUIContext(['qmViewType', 'qmShowDetails', 'qmModalClose'])\r\n    const {subscribeToUserDetails, unsubscribeFromUserDetails} = useStatsStateMethods()\r\n    const user = useStatsState(state => state.userDetails[userId])\r\n\r\n    useEffect(() => {\r\n        subscribeToUserDetails([userId])\r\n\r\n        return () => unsubscribeFromUserDetails([userId])\r\n    }, [subscribeToUserDetails, unsubscribeFromUserDetails, userId])\r\n\r\n\r\n    const isFloatingMode = viewType === 'floating'\r\n    const showDetailsButton = isFloatingMode && !isEmpty(user?.items)\r\n\r\n    const handleClose = useCallback(() => {\r\n        qmModalClose?.()\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmUserId = undefined\r\n        })\r\n    }, [produceSupervisionUIContext, qmModalClose])\r\n\r\n    const toggleShowDetails = useCallback(() => {\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmShowDetails = !draft.qmShowDetails\r\n        })\r\n    }, [produceSupervisionUIContext])\r\n\r\n    const onKeyPressDetailsHandler = useOnKeyPressHandler(toggleShowDetails)\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"relative flex gap-[30px] px-4\">\r\n                <PanelActions onClose={handleClose} />\r\n                <MonitoringUserAvatar user={user} />\r\n                <div className=\"flex-1\">\r\n                    <p className=\"mb-2 font-bold \">\r\n                        {formatFullName(user?.firstName, user?.lastName)}\r\n                        <br />\r\n                    </p>\r\n                    <UserActions onActionStart={handleClose} user={user} />\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-5 flex justify-between gap-8 px-4\">\r\n                <ExtendedMonitoring userId={userId} />\r\n                {\r\n                    showDetailsButton && (\r\n                        <SemanticButton\r\n                            tabIndex={0}\r\n                            tooltip={t.SUPERVISION_PAGE.quality_management_monitor_show_details()}\r\n                            disabled={!user}\r\n                            transparent\r\n                            onClick={toggleShowDetails}\r\n                            onKeyDown={onKeyPressDetailsHandler}\r\n                        >\r\n                            <IconChevronUpCircle className={tcn({'scale-y-[-1]': !showDetails})} />\r\n                        </SemanticButton>\r\n                    )}\r\n            </div>\r\n            {user && (showDetails || !isFloatingMode) && (\r\n                <UserItems user={user} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {SetStateAction} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {MAIN_CONTENT_MIN_WIDTH, SUPERVISION_USERS_TABLE} from '@bpinc/ad-main-page-ui-context'\r\nimport {MIN_QM_WIDTH, useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport type {FloatingState, OnDragEndParams} from '@bpinc/lib-ui-elements'\r\nimport {Floating, useCanPin} from '@bpinc/lib-ui-elements'\r\n\r\nimport {QualityManagementMonitor} from '../QualityManagement'\r\n\r\n\r\nexport const RightBar: React.FC = () => {\r\n    const {\r\n        qmUserId: userId,\r\n        qmWidth,\r\n        qmFloatingState,\r\n        mainContentNode,\r\n        qmViewType,\r\n    } = useSupervisionUIContext([\r\n        'qmUserId',\r\n        'qmWidth',\r\n        'qmFloatingState',\r\n        'mainContentNode',\r\n        'qmViewType',\r\n    ])\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n\r\n    const setQMWidth = useCallback((width: number) => {\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmWidth = width\r\n        })\r\n    }, [produceSupervisionUIContext])\r\n\r\n    const setQMFloatingState = useCallback((modify: SetStateAction<FloatingState>) => {\r\n        const newFloatingState = typeof modify === 'string' ? modify : modify(qmFloatingState)\r\n\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmFloatingState = newFloatingState\r\n        })\r\n    }, [produceSupervisionUIContext, qmFloatingState])\r\n\r\n\r\n    const canPin = useCanPin({\r\n        mainContentNode,\r\n        floatingState: qmFloatingState,\r\n        floatingSize: qmWidth,\r\n        contentMinWidth: MAIN_CONTENT_MIN_WIDTH,\r\n    })\r\n\r\n    const onDragEnd = useCallback(\r\n        function onDragEndCallback({size}: OnDragEndParams) {\r\n            setQMWidth(size)\r\n        },\r\n        [setQMWidth],\r\n    )\r\n\r\n    return (\r\n        <Floating\r\n            canPin={canPin}\r\n            exceptionSelectors={`.${SUPERVISION_USERS_TABLE} tbody tr`}\r\n            initialSize={qmWidth}\r\n            minSize={MIN_QM_WIDTH}\r\n            onDragEnd={onDragEnd}\r\n            resizeable\r\n            setState={setQMFloatingState}\r\n            side=\"right\"\r\n            state={qmFloatingState}\r\n            data-testid=\"qm-panel\"\r\n            showEar={false}\r\n            className=\"flex h-full flex-col overflow-hidden\"\r\n        >\r\n            {userId && qmViewType !== 'floating' && <QualityManagementMonitor userId={userId} className=\"flex h-full flex-col py-2\" />}\r\n        </Floating>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport type {ControlPosition} from 'react-draggable'\r\nimport Draggable from 'react-draggable'\r\nimport {isEmpty} from 'lodash-es'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {useDraggableModal} from '@bpinc/lib-helpers-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {FocusTrap} from '@bpinc/lib-ui-elements'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {QualityManagementMonitor} from '../../components/QualityManagement'\r\n\r\n\r\nconst QM_MODAL_HANDLE = 'QM_MODAL_HANDLE_' + uuid()\r\n\r\nexport type QmMonitorModalProps = CommonModalProps & {\r\n    position?: ControlPosition\r\n}\r\n\r\nexport const QmMonitorModal: React.FC<QmMonitorModalProps> = React.memo(function QmMonitorModal({\r\n    position,\r\n    onClose,\r\n}) {\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n    const {\r\n        qmUserId: userId,\r\n        qmShowDetails: showDetails,\r\n        qmModalClose,\r\n    } = useSupervisionUIContext(['qmUserId', 'qmViewType', 'qmShowDetails', 'qmModalClose'])\r\n    const userHasItems = useStatsState(s => !isEmpty(s.userDetails[userId || '']?.items))\r\n    const modalExpanded = showDetails && userHasItems\r\n\r\n    useEffect(() => {\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmModalClose = () => onClose('end')\r\n        })\r\n        return () => {\r\n            produceSupervisionUIContext(draft => {\r\n                draft.qmModalClose = undefined\r\n            })\r\n        }\r\n    }, [onClose, produceSupervisionUIContext])\r\n\r\n    const {draggableNodeRef, draggableProps} = useDraggableModal({\r\n        modalType: 'quality_management_monitor',\r\n        position,\r\n    })\r\n\r\n    useEscapeManager(() => {\r\n        qmModalClose?.()\r\n        produceSupervisionUIContext(draft => {\r\n            draft.qmUserId = undefined\r\n        })\r\n    })\r\n\r\n    if (!userId) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <FocusTrap>\r\n            <Draggable {...draggableProps} handle={`#${QM_MODAL_HANDLE}`}>\r\n                <div\r\n                    className={tcn(\r\n                        'fixed left-[calc(50%-248px)] top-24 z-[100]',\r\n                        'flex w-[496px] flex-col overflow-hidden',\r\n                        'border border-[--c-main-bars-bg] bg-main-bg shadow', {\r\n                            'h-full max-h-[min(700px,80vh)] min-h-[max(500px,min(80vh,500px))]': modalExpanded,\r\n                        })}\r\n                    role=\"alertdialog\"\r\n                    aria-modal=\"true\"\r\n                    data-testid=\"incoming-interaction\"\r\n                >\r\n                    <div id={QM_MODAL_HANDLE} className=\"h-4 shrink-0 cursor-pointer bg-[--c-main-bars-bg]\" ref={draggableNodeRef} />\r\n                    <QualityManagementMonitor userId={userId} className=\"flex flex-1 flex-col overflow-hidden py-2\" />\r\n                </div>\r\n            </Draggable>\r\n        </FocusTrap>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useSupervisionUIContext} from '@bpinc/ad-supervision-ui-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {QmMonitorModal} from '../../modals/QmMonitorModal'\r\n\r\n\r\nexport function useQmMonitorModalOpener() {\r\n    const openQmMonitorModal = useModalComponentOpener(QmMonitorModal)\r\n    const localSettings = useLocalSettings()\r\n    const {qmViewType, qmUserId, qmModalClose} = useSupervisionUIContext(['qmViewType', 'qmUserId', 'qmModalClose'])\r\n    const hasQmUserId = !!qmUserId\r\n    const hasOpenModal = !!qmModalClose\r\n\r\n    useEffect(() => {\r\n        if (!hasQmUserId || qmViewType !== 'floating' || hasOpenModal) {\r\n            return\r\n        }\r\n\r\n        const openMonitorModal = async () => {\r\n            const modalVisualParams = await localSettings.get('modals')\r\n            openQmMonitorModal({\r\n                position: modalVisualParams?.quality_management_monitor?.position,\r\n            })\r\n        }\r\n\r\n        openMonitorModal()\r\n    }, [hasOpenModal, hasQmUserId, localSettings, openQmMonitorModal, qmViewType])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {Group} from '@bpinc/ad-stats-state-types'\r\nimport type {ResizeTableColumn, ResizeTableColumnGroup} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useGetGroupName} from './useGetGroupName'\r\n\r\n\r\ninterface UseTableGroups {\r\n    groups: Group[] | undefined\r\n    columns: ResizeTableColumn[]\r\n    collapsedGroupIds?: {[groupId: string]: boolean}\r\n}\r\n\r\nexport function useTableGroups({groups, columns, collapsedGroupIds}: UseTableGroups) {\r\n    const getGroupName = useGetGroupName()\r\n    return useMemo(() => {\r\n        if (!groups || groups.length === 0) return undefined\r\n\r\n        const stickyColumns = columns.filter(c => c.sticky)\r\n        const hiddenStickyColumnsAmount = stickyColumns.filter(c => c.hidden).length\r\n        const stickyColumnsAmount = stickyColumns.length - hiddenStickyColumnsAmount\r\n\r\n        let spanOmitted = 0\r\n        let currentColSpan = -hiddenStickyColumnsAmount\r\n        let lastGroupId: string | undefined\r\n\r\n\r\n        const initialStickyGroup: ResizeTableColumnGroup = {\r\n            content: null,\r\n            sticky: true,\r\n            colspan: stickyColumnsAmount,\r\n            collapsed: false,\r\n            id: undefined,\r\n        }\r\n\r\n        return columns.slice(stickyColumnsAmount).reduce<ResizeTableColumnGroup[]>((acc, column, idx, arr) => {\r\n            if (column.hidden) {\r\n                spanOmitted++\r\n                return acc\r\n            }\r\n\r\n            if (column.groupId === lastGroupId) {\r\n                increaseColumnSpanBy(isLastColumn() ? spanOmitted : 1)\r\n            } else {\r\n                addGroup(lastGroupId)\r\n                resetColumnSpan()\r\n\r\n                lastGroupId = column.groupId\r\n            }\r\n\r\n            if (isLastColumn()) {\r\n                addGroup(lastGroupId)\r\n            }\r\n\r\n            function isLastColumn() {\r\n                return idx === arr.length - 1\r\n            }\r\n\r\n            function increaseColumnSpanBy(amount: number) {\r\n                currentColSpan += amount\r\n            }\r\n\r\n            function resetColumnSpan() {\r\n                currentColSpan = 1\r\n            }\r\n\r\n            function addGroup(innerLastGroupId: string | undefined) {\r\n                const group = groups?.find(g => innerLastGroupId && g.id === innerLastGroupId)\r\n                const content = getGroupName(group)\r\n                const id = group?.id\r\n\r\n                if (currentColSpan > 0) {\r\n                    acc.push({\r\n                        content,\r\n                        sticky: false,\r\n                        colspan: currentColSpan,\r\n                        collapsed: collapsedGroupIds && id ? collapsedGroupIds[id] : false,\r\n                        id,\r\n                    })\r\n                }\r\n            }\r\n            return acc\r\n        }, [initialStickyGroup])\r\n    }, [collapsedGroupIds, columns, getGroupName, groups])\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype SectionHeaderProps = {\r\n    className?: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const SectionHeader: React.FC<SectionHeaderProps> = ({className, children}) => {\r\n    return (\r\n        <div className={tcn('flex flex-wrap justify-between', className)}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\ninterface SectionTitleProps {\r\n    title: string\r\n}\r\n\r\nexport const SectionTitle: React.FC<SectionTitleProps> = ({title}) => {\r\n    return (\r\n        <div className=\"mr-6 mt-2 text-xl font-bold leading-[24px] text-info\">\r\n            {title}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport type {monitoringInitialServicesColumnConfig} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\nimport type {ResizeTableColumn} from '@bpinc/lib-ui-elements'\r\nimport {ResizeTable} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface Props {\r\n    serviceId: string\r\n    closeModal?: () => void\r\n}\r\n\r\ntype ColumnName = typeof monitoringInitialServicesColumnConfig[number]['id']\r\n\r\nexport const ServiceInfoModal: React.FC<Props> = props => {\r\n    const {serviceId} = props\r\n    const {monitoringTeamStats: {services}} = useStatsState()\r\n    const titlesForColumn = useLocalizedStatNames()\r\n\r\n    const columns: ResizeTableColumn[] = useMemo(() => {\r\n        const list: ColumnName[] = [\r\n            'name',\r\n            'in_calls_waiting',\r\n            'in_max_wait_time',\r\n            'in_calls_active_on_agents',\r\n            'agents_ready',\r\n            'agents_logged',\r\n        ]\r\n\r\n        return list.map(name => {\r\n            const title = name === 'name'\r\n                ? ''\r\n                : (titlesForColumn[name] || [])[0] || ''\r\n\r\n            return {name, title}\r\n        })\r\n    }, [titlesForColumn])\r\n\r\n    const data = useMemo(() => {\r\n        return [services[serviceId]].filter(Boolean)\r\n    }, [serviceId, services])\r\n\r\n    return (\r\n        <ResizeTable columns={columns} data={data} />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {ChangeMonitoringServicesOptions} from '@bpinc/ad-stats-state-types'\r\nimport type {TeamServiceInfoShort} from '@bpinc/ad-transport-types'\r\nimport {IconFilterEnabled, IconFilterFunnel} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    highlighted,\r\n    Popup,\r\n    SearchInput,\r\n} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype ServicesFilterPopupProps = {\r\n    teamId: string\r\n    className?: string\r\n}\r\n\r\ntype ServicesMap = ChangeMonitoringServicesOptions['services']\r\n\r\nexport const ServicesFilterPopup: FC<ServicesFilterPopupProps> = ({teamId, className}) => {\r\n    const {t} = useLocalizationState()\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [show, setShow] = useState(false)\r\n    const {monitoringConfig, teamServicesInfo} = useStatsState(['monitoringConfig', 'teamServicesInfo'])\r\n    const {changeMonitoringServices} = useStatsStateMethods()\r\n\r\n    const getSelectedServices = useCallback(() => {\r\n        const services = monitoringConfig?.configs?.SERVICES_CONFIGS[teamId]\r\n        if (!services?.length) {\r\n            return []\r\n        }\r\n        return teamServicesInfo.filter(s => services.some(({id, v}) => id === s.id && v))\r\n    }, [teamServicesInfo, monitoringConfig?.configs?.SERVICES_CONFIGS, teamId])\r\n\r\n    const [selectedServices, setSelectedServices] = useState(() => getSelectedServices())\r\n    const [filterEnabled, setFilterEnabled] = useState(selectedServices.length !== teamServicesInfo.length)\r\n\r\n    useEffect(function updateSelectedServices() {\r\n        setSelectedServices(getSelectedServices())\r\n    }, [getSelectedServices])\r\n\r\n    useEffect(function updateFilterEnabled() {\r\n        setFilterEnabled(selectedServices.length !== teamServicesInfo.length)\r\n    }, [teamServicesInfo.length, selectedServices.length])\r\n\r\n    const saveSelectedServices = useCallback(() => {\r\n        changeMonitoringServices({\r\n            teamId,\r\n            services: teamServicesInfo.reduce<ServicesMap>((acc, service) => (\r\n                {\r\n                    ...acc,\r\n                    [service.id]: {\r\n                        visibility: filterEnabled\r\n                            ? selectedServices.some(s => s.id === service.id)\r\n                            : true,\r\n                    },\r\n                }), {}),\r\n        })\r\n    }, [teamServicesInfo, changeMonitoringServices, filterEnabled, selectedServices, teamId])\r\n\r\n\r\n    const servicesToShow = useMemo(() => {\r\n        return teamServicesInfo.filter(s => s.name.toLowerCase().includes(searchValue.toLowerCase().trim())\r\n            , [])\r\n    }, [teamServicesInfo, searchValue])\r\n\r\n    const handleChangeSelected = useCallback((service: TeamServiceInfoShort, checked: boolean) => {\r\n        const updatedServices = !checked ? selectedServices.filter(s => s.id !== service.id) : [...selectedServices, service]\r\n        setSelectedServices(updatedServices)\r\n        setFilterEnabled(!!updatedServices.length)\r\n    }, [selectedServices])\r\n\r\n    const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value)\r\n    }, [setSearchValue])\r\n\r\n    const isAllSelected = teamServicesInfo.length === selectedServices.length\r\n\r\n    const handleSelectAll = useCallback((value: boolean) => {\r\n        setSelectedServices(value ? [...teamServicesInfo] : [])\r\n        setFilterEnabled(value)\r\n    }, [teamServicesInfo])\r\n\r\n    if (!teamServicesInfo.length) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Popup\r\n            show={show}\r\n            onClickOutside={() => {\r\n                setShow(false)\r\n                saveSelectedServices()\r\n            }}\r\n            content={\r\n                <div className=\"flex h-80 w-[300px] flex-col overflow-hidden px-0.5 py-px\">\r\n                    <SearchInput autoFocus value={searchValue} onChange={handleSearchChange} />\r\n                    <div className=\"mt-2.5 flex items-center justify-between\">\r\n                        <div className=\"mt-1 text-xs font-bold text-info\">\r\n                            {t.SUPERVISION_PAGE.monitoring_services_filter_services()}\r\n                        </div>\r\n                        <Checkbox\r\n                            toggle\r\n                            checked={filterEnabled}\r\n                            onChange={() => setFilterEnabled(v => !v)}\r\n                            label={t.SUPERVISION_PAGE.monitoring_services_use_filter()}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mt-4 overflow-y-auto\">\r\n                        <Checkbox\r\n                            checked={isAllSelected}\r\n                            label={t.SUPERVISION_PAGE.monitoring_services_select_all()}\r\n                            onChange={handleSelectAll}\r\n                        />\r\n                        {\r\n                            servicesToShow.map(s => (\r\n                                <Checkbox\r\n                                    className=\"mt-2\"\r\n                                    key={s.id}\r\n                                    checked={selectedServices.some(({id}) => s.id === id)}\r\n                                    onChange={(v => handleChangeSelected(s, v))}\r\n                                    label={searchValue ? highlighted({text: s.name, highlight: searchValue}) : s.name}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        >\r\n            <Button transparent className={tcn(className, 'group')} onClick={() => setShow(true)}>\r\n                {filterEnabled\r\n                    ? <IconFilterEnabled className=\"group-hover:[&_path]:fill-primary-hover\" />\r\n                    : <IconFilterFunnel className=\"group-hover:[&_path]:fill-primary-hover\" />\r\n                }\r\n            </Button>\r\n        </Popup>\r\n    )\r\n\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {ConfigType} from '@bpinc/ad-stats-state-types'\r\nimport {SmIcon, SmList} from '@bpinc/lib-external-ui-elements'\r\nimport {IconTrash} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype LoadTableViewItemProps = {\r\n    id: string\r\n    name: string\r\n    isSelected: boolean\r\n    isUntouchedCurrentConfig: boolean\r\n    setSelectedView: StateSetter<string>\r\n    configType: ConfigType\r\n}\r\n\r\nexport const LoadTableViewItem: FC<LoadTableViewItemProps> = ({\r\n    isSelected,\r\n    isUntouchedCurrentConfig,\r\n    setSelectedView,\r\n    name,\r\n    configType,\r\n    id,\r\n}) => {\r\n    const {deleteTableConfig} = useStatsStateMethods()\r\n\r\n    const handleDeleteConfig = () => {\r\n        deleteTableConfig(configType, id)\r\n    }\r\n\r\n    return (\r\n        <SmList.Item\r\n            as=\"button\"\r\n            className={tcn(\r\n                'group flex w-full items-center justify-between px-2 py-1',\r\n                {\r\n                    'font-bold': isSelected,\r\n                    'cursor-default': isUntouchedCurrentConfig,\r\n                },\r\n            )}\r\n            key={id}\r\n            aria-disabled={isUntouchedCurrentConfig}\r\n            onClick={() => !isUntouchedCurrentConfig && setSelectedView(id)}\r\n        >\r\n            <div className=\"flex w-full items-center\">\r\n                <div className=\"relative mr-2 w-3\">\r\n                    {isUntouchedCurrentConfig && (\r\n                        <SmIcon name=\"check\" color=\"grey\" className=\"w-full\" />\r\n                    )}\r\n                </div>\r\n                {name}\r\n            </div>\r\n            <Button\r\n                transparent\r\n                onClick={handleDeleteConfig}\r\n                className=\"invisible flex h-6 w-6 items-center justify-center p-1\r\n                    opacity-0 transition-all duration-300\r\n                    group-focus-within:visible group-focus-within:opacity-100\r\n                    group-hover:visible group-hover:opacity-100\r\n                    [&_path]:hover:fill-primary-hover [&_path]:focus:fill-primary-hover\"\r\n            >\r\n                <IconTrash />\r\n            </Button>\r\n        </SmList.Item>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\nimport {isEqual} from 'lodash-es'\r\n\r\nimport {convertTableTypeToConfig} from '@bpinc/ad-stats-state'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {type TableType} from '@bpinc/ad-stats-state-types'\r\nimport {SmList} from '@bpinc/lib-external-ui-elements'\r\nimport {usePressKeyHandler} from '@bpinc/lib-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {LoadTableViewItem} from './LoadTableViewItem'\r\n\r\n\r\ntype LoadTableViewModalProps = CommonModalProps & {\r\n    table: TableType\r\n}\r\n\r\nexport const LoadTableViewModal: React.FC<LoadTableViewModalProps> = ({\r\n    onClose,\r\n    table,\r\n    ...restProps\r\n}) => {\r\n    const [selectedView, setSelectedView] = useState<string>('')\r\n\r\n    const {t} = useLocalizationState()\r\n    const tableConfig = convertTableTypeToConfig(table)\r\n    const customConfigs = useStatsState(s => s?.customConfigs?.[tableConfig])\r\n\r\n    const monitoringConfig = useStatsState('monitoringConfig')\r\n\r\n    const selectedConfig = useMemo(() => {\r\n        return customConfigs?.find(c => c.id === selectedView)\r\n    }, [customConfigs, selectedView])\r\n\r\n    const {updateMetrics} = useStatsStateMethods()\r\n\r\n    const handleLoad = () => {\r\n        const {metrics, groups} = selectedConfig ?? {}\r\n        if (!metrics) return\r\n\r\n        updateMetrics({\r\n            table,\r\n            metrics,\r\n            groups,\r\n            savedConfigOriginId: selectedView,\r\n        })\r\n        onClose()\r\n    }\r\n\r\n    usePressKeyHandler('Enter', handleLoad)\r\n\r\n    const configsToRender = useMemo(() => {\r\n        return customConfigs?.map(config => {\r\n            const isUntouchedCurrentConfig =\r\n                !!monitoringConfig?.additionalData.savedConfigOriginId &&\r\n                config.id === monitoringConfig.additionalData.savedConfigOriginId &&\r\n                isEqual(config.metrics, monitoringConfig?.configs?.[tableConfig]) &&\r\n                isEqual(config.groups, monitoringConfig?.additionalData.groups?.[tableConfig])\r\n\r\n            return {\r\n                id: config.id,\r\n                name: config.name,\r\n                isUntouchedCurrentConfig,\r\n            }\r\n        })\r\n    }, [customConfigs, monitoringConfig, tableConfig])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            className=\"relative max-w-90 overflow-hidden\"\r\n            aria-labelledby=\"save_table_view_modal_title\"\r\n            data-testid=\"LoadTableViewModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"save_table_view_modal_title\">\r\n                {t.SUPERVISION_PAGE.load_table_view()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"min-h-[156px] overflow-hidden\">\r\n                <SmList divided className=\"w-full\">\r\n                    {\r\n                        configsToRender?.map(item => (\r\n                            <LoadTableViewItem\r\n                                key={item.id}\r\n                                isSelected={item.id === selectedView}\r\n                                setSelectedView={setSelectedView}\r\n                                configType={tableConfig}\r\n                                {...item}\r\n                            />\r\n                        ))\r\n                    }\r\n                </SmList>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    primary\r\n                    onClick={handleLoad}\r\n                    disabled={!selectedConfig}\r\n                >\r\n                    {t.SUPERVISION_PAGE.load()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useTableGroups, useTableMetrics} from '@bpinc/ad-stats-state-context'\r\nimport type {ColumnItemBase, Group, TableType} from '@bpinc/ad-stats-state-types'\r\nimport {isGroupIndexMetricId, isSystemMetric} from '@bpinc/ad-stats-state-types'\r\nimport type {ColumnsEditorConfig} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useGetGroupName} from '../../components/hooks'\r\nimport {useGetMetricName} from './useGetMetricName'\r\n\r\n\r\ninterface ConfigOptions {\r\n    table: TableType\r\n    excludedMetrics: string[]\r\n}\r\n\r\nexport function useGetColumnsEditorConfig({\r\n    table,\r\n    excludedMetrics,\r\n}: ConfigOptions) {\r\n    const getGroupName = useGetGroupName()\r\n    const getMetricName = useGetMetricName()\r\n    const metrics = useTableMetrics(table)\r\n    const groups = useTableGroups(table)\r\n\r\n    return useCallback(() => (metrics || []).reduce<ColumnsEditorConfig<ColumnItemBase | Group>>((columns, metric) => {\r\n        // Skip excluded metrics\r\n        if (excludedMetrics.includes(metric.id)) {\r\n            return columns\r\n        }\r\n        // Add group\r\n        if (isSystemMetric(metric)) {\r\n            const group = groups?.find(g => isGroupIndexMetricId(metric, g.id))\r\n            if (!group) {\r\n                throw new Error(`Invalid group: ${metric.id}`)\r\n            }\r\n            columns.push({\r\n                id: group.id,\r\n                defaultName: getGroupName(group),\r\n                customName: group.customName,\r\n                isGroup: true,\r\n                columns: [],\r\n                meta: group,\r\n            })\r\n\r\n            return columns\r\n        }\r\n\r\n        // Add metric to group\r\n        if (metric.parentId) {\r\n            const parentGroup = columns.find(c => c.id === metric.parentId)\r\n            if (!parentGroup || !parentGroup.isGroup) {\r\n                throw new Error(`Invalid metric: ${metric.id}`)\r\n            }\r\n            parentGroup.columns.push({\r\n                id: metric.id,\r\n                defaultName: getMetricName(metric),\r\n                customName: metric.customName,\r\n                isGroup: false,\r\n                isActive: metric.v,\r\n                meta: metric,\r\n            })\r\n\r\n            return columns\r\n        }\r\n\r\n        // Add plane metric\r\n        columns.push({\r\n            id: metric.id,\r\n            defaultName: getMetricName(metric),\r\n            customName: metric.customName,\r\n            isGroup: false,\r\n            isActive: metric.v,\r\n            meta: metric,\r\n        })\r\n\r\n        return columns\r\n    }, []), [excludedMetrics, getGroupName, getMetricName, groups, metrics])\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {BaseMetricType} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nexport function useGetMetricName() {\r\n    const originalNames = useLocalizedStatNames()\r\n\r\n    return useCallback((metric: BaseMetricType | undefined) => {\r\n        if (!metric) {\r\n            return ''\r\n        }\r\n        const [short] = originalNames[metric.id] ?? ['', '']\r\n\r\n        return short\r\n\r\n    }, [originalNames])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport type {ColumnItemBase, Group} from '@bpinc/ad-stats-state-types'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport type {ColumnsEditorConfig} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype ResetCustomNameEffectParams = {\r\n    config: ColumnsEditorConfig<ColumnItemBase | Group>\r\n    setConfig: StateSetter<ColumnsEditorConfig<ColumnItemBase | Group>>\r\n}\r\n\r\nexport const useResetCustomNameEffect = ({config, setConfig}: ResetCustomNameEffectParams) => {\r\n    const previousConfig = usePrevious(config)\r\n\r\n    useEffect(function resetColumnNameToDefault() {\r\n        const updatedColumns = config.filter(column => {\r\n            if (column.isGroup || !column.customName) {\r\n                return false\r\n            }\r\n            const previousColumn = previousConfig?.find(pc => pc.id === column.id)\r\n            return !previousColumn || previousColumn.customName !== column.customName\r\n        })\r\n\r\n        if (!updatedColumns.length) {\r\n            return\r\n        }\r\n\r\n        setConfig(currentConfig => {\r\n            return currentConfig.map(currentColumn => {\r\n                if (currentColumn.isGroup) {\r\n                    return currentColumn\r\n                }\r\n\r\n                const updatedColumn = updatedColumns.find(c => c.id === currentColumn.id)\r\n                if (!updatedColumn) {\r\n                    return currentColumn\r\n                }\r\n\r\n                const hasSameNamedColumn = currentConfig.some(c => {\r\n                    if (c.id === updatedColumn?.id) {\r\n                        return false\r\n                    }\r\n                    return c.customName === updatedColumn.customName || c.defaultName === updatedColumn.customName\r\n                })\r\n                if (!hasSameNamedColumn) {\r\n                    return currentColumn\r\n                }\r\n\r\n                return {\r\n                    ...currentColumn,\r\n                    customName: undefined,\r\n                }\r\n            })\r\n        })\r\n    }, [config, previousConfig, setConfig])\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nimport type {TableType} from '@bpinc/ad-stats-state-types'\r\nimport {ColumnsEditor, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {useGetColumnsEditorConfig} from './useGetColumnsEditorConfig'\r\nimport {useResetCustomNameEffect} from './useResetCustomNameEffect'\r\nimport {useUpdateTableMetrics} from './useUpdateTableMetrics'\r\n\r\n\r\ntype ManageMetricsModalProps = CommonModalProps & {\r\n    table: TableType\r\n    excludedMetrics: string[]\r\n}\r\n\r\nexport const ManageMetricsModal: React.FC<ManageMetricsModalProps> = ({\r\n    onClose,\r\n    table,\r\n    excludedMetrics,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const getTableColumnsEditorConfig = useGetColumnsEditorConfig({table, excludedMetrics})\r\n    const updateTableMetrics = useUpdateTableMetrics({table, excludedMetrics, onClose})\r\n    const [editingColumns, setEditingColumns] = useState(() => getTableColumnsEditorConfig())\r\n\r\n    useResetCustomNameEffect({config: editingColumns, setConfig: setEditingColumns})\r\n\r\n    return (\r\n        <Modal\r\n            flex\r\n            onClose={onClose}\r\n            className=\"relative max-h-[calc(100vh-4rem)] !w-auto max-w-[calc(100vw-4rem)] flex-col overflow-hidden\"\r\n            aria-labelledby=\"manage_metrics\"\r\n            data-testid=\"manageMetricsModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header id=\"manage_metrics\" role=\"heading\">\r\n                {t.SUPERVISION_PAGE.manage_metrics_modal_title()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"flex flex-auto flex-col overflow-hidden\">\r\n                <ColumnsEditor\r\n                    value={editingColumns}\r\n                    onChange={setEditingColumns}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                    data-testid=\"cancel-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={() => updateTableMetrics(editingColumns)} primary data-testid=\"ok-button\">\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useStatsStateMethods, useTableMetrics} from '@bpinc/ad-stats-state-context'\r\nimport type {ColumnItemBase, Group, TableType} from '@bpinc/ad-stats-state-types'\r\nimport {createGroupId} from '@bpinc/ad-stats-state-types'\r\nimport type {ColumnsEditorConfig} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface UpdateTableMetricsOptions {\r\n    table: TableType\r\n    onClose: () => void\r\n    excludedMetrics: string[]\r\n}\r\n\r\nexport function useUpdateTableMetrics({\r\n    table,\r\n    onClose,\r\n    excludedMetrics,\r\n}: UpdateTableMetricsOptions) {\r\n    const {updateMetrics} = useStatsStateMethods()\r\n    const metrics = useTableMetrics(table)\r\n\r\n    const baseMetrics = useMemo(() => {\r\n        const additionalMetrics = (metrics || []).filter(m => excludedMetrics.includes(m.id))\r\n        additionalMetrics.map((m, i) => ({\r\n            ...m,\r\n            idx: i,\r\n        }))\r\n\r\n        return additionalMetrics\r\n    }, [excludedMetrics, metrics])\r\n\r\n    return useCallback((columns: ColumnsEditorConfig<ColumnItemBase | Group>) => {\r\n        const updatedMetrics: ColumnItemBase[] = [...baseMetrics]\r\n        const updatedGroups: Group[] = []\r\n\r\n        let columnIndex = baseMetrics[baseMetrics.length - 1].idx\r\n        let groupIndex = 0\r\n        columns.forEach(column => {\r\n            if (column.isGroup) {\r\n                const {groupId: newGroupId, indexMetricId: newIndexMetricId} = createGroupId()\r\n                const columnMeta = column.meta?.isGroup ? column.meta as Group : undefined\r\n                const originalGroupId = columnMeta?.id\r\n                const groupId = originalGroupId || newGroupId\r\n                const indexMetricId = originalGroupId ? `${originalGroupId}_index` : newIndexMetricId\r\n\r\n                //This is system metric, it is not visible in UI\r\n                //It is used as a marker to place the group in correct position\r\n                updatedMetrics.push({\r\n                    id: indexMetricId,\r\n                    idx: columnIndex++,\r\n                    v: false,\r\n                    w: '0px',\r\n                    sW: '0px',\r\n                    parentId: groupId,\r\n                    isSystem: true,\r\n                    asc: true,\r\n                })\r\n                updatedGroups.push({\r\n                    ...columnMeta,\r\n                    id: groupId,\r\n                    isGroup: true,\r\n                    customName: column.customName,\r\n                    idx: groupIndex++,\r\n                })\r\n                column.columns.forEach(childColumn => {\r\n                    const childColumnMeta = childColumn.meta\r\n                    if (!childColumnMeta || childColumnMeta?.isGroup) {\r\n                        throw new Error(`Invalid child column meta data: ${childColumn.id}`)\r\n                    }\r\n\r\n                    updatedMetrics.push({\r\n                        ...childColumnMeta,\r\n                        id: childColumn.id,\r\n                        parentId: groupId,\r\n                        customName: childColumn.customName,\r\n                        idx: columnIndex++,\r\n                        v: childColumn.isActive,\r\n                    })\r\n                })\r\n                return\r\n            }\r\n\r\n            const columnMeta = column.meta\r\n            if (!columnMeta || columnMeta?.isGroup) {\r\n                throw new Error(`Invalid column meta data: ${column.id}`)\r\n            }\r\n\r\n            updatedMetrics.push({\r\n                ...columnMeta,\r\n                id: column.id,\r\n                customName: column.customName,\r\n                idx: columnIndex++,\r\n                parentId: undefined,\r\n                v: column.isActive,\r\n            })\r\n        })\r\n\r\n        updateMetrics({table, metrics: updatedMetrics, groups: updatedGroups})\r\n        onClose()\r\n    }, [baseMetrics, onClose, table, updateMetrics])\r\n}\r\n","import type {FormEvent} from 'react'\r\nimport React, {useState} from 'react'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {TableType} from '@bpinc/ad-stats-state-types'\r\nimport {SmForm, SmInput} from '@bpinc/lib-external-ui-elements'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype SaveTableViewModalProps = CommonModalProps & {\r\n    table: TableType\r\n}\r\n\r\nexport const SaveTableViewModal: React.FC<SaveTableViewModalProps> = ({\r\n    onClose,\r\n    table,\r\n    ...resProps\r\n}) => {\r\n    const [viewName, setViewName] = useState<string>('')\r\n    const {t} = useLocalizationState()\r\n    const {saveTableConfig} = useStatsStateMethods()\r\n\r\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        setViewName(e.target.value)\r\n    }\r\n\r\n    function handleSave(e: FormEvent) {\r\n        e.preventDefault()\r\n        saveTableConfig({table, name: viewName})\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            className=\"relative max-w-90 overflow-hidden\"\r\n            aria-labelledby=\"save_table_view_modal_title\"\r\n            data-testid=\"SaveTableViewModal\"\r\n            {...resProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"save_table_view_modal_title\">\r\n                {t.SUPERVISION_PAGE.save_table_view()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"!flex h-full flex-auto overflow-hidden\">\r\n                <form onSubmit={handleSave} className=\"w-full\">\r\n                    <SmForm.Field className=\"w-full\">\r\n                        <label\r\n                            htmlFor=\"save_table_view_modal_input\"\r\n                            className=\"mb-[9px] block\"\r\n                        >\r\n                            {t.SUPERVISION_PAGE.enter_the_view_name()}\r\n                        </label>\r\n                        <SmInput\r\n                            fluid\r\n                            className=\"mb-6.5\"\r\n                            id=\"save_table_view_modal_input\"\r\n                            onChange={handleChange}\r\n                            value={viewName}\r\n                        />\r\n                    </SmForm.Field>\r\n                </form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton primary onClick={handleSave}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.button_save()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {TableType} from '@bpinc/ad-stats-state-types'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconTableActions} from '@bpinc/lib-icons'\r\nimport {PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useTableMenuOptions} from './hooks/useTableMenuOptions'\r\n\r\n\r\ninterface TableActionsButtonProps {\r\n    table: TableType\r\n    handleChangeScrolling?: Toggle\r\n    scrollingEnabled: boolean\r\n    excludedMetrics: string[]\r\n}\r\n\r\nexport const TableActionsButton: React.FC<TableActionsButtonProps> = ({table, handleChangeScrolling, scrollingEnabled, excludedMetrics}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const options = useTableMenuOptions({\r\n        table,\r\n        handleChangeScrolling,\r\n        scrollingEnabled,\r\n        toggleShow,\r\n        excludedMetrics,\r\n    })\r\n    return (\r\n        <PopupButton\r\n            icon\r\n            basic\r\n            show={show}\r\n            toggleShow={toggleShow}\r\n            options={options}\r\n            className=\"flex h-9.5 w-9.5 items-center justify-center p-0\"\r\n            tooltip={t.SUPERVISION_PAGE.actions_menu_btn_tooltip()}\r\n        >\r\n            <IconTableActions />\r\n        </PopupButton>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\nimport {flow, partial} from 'lodash-es'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {TableType} from '@bpinc/ad-stats-state-types'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport type {PopupMenuOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {LoadTableViewModal} from '../../modals/LoadTableViewModal'\r\nimport {ManageMetricsModal} from '../../modals/ManageMetricsModal'\r\nimport {SaveTableViewModal} from '../../modals/SaveTableViewModal'\r\n\r\n\r\ninterface Params {\r\n    table: TableType\r\n    toggleShow: Toggle\r\n    handleChangeScrolling?: Toggle\r\n    scrollingEnabled: boolean\r\n    excludedMetrics: string[]\r\n}\r\nexport function useTableMenuOptions({\r\n    table,\r\n    handleChangeScrolling,\r\n    toggleShow,\r\n    scrollingEnabled,\r\n    excludedMetrics,\r\n}: Params): PopupMenuOption[] {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {resetMonitoringColumns, saveMonitoringConfigAsSystem} =\r\n        useStatsStateMethods()\r\n    const openManageMetricsModal = useModalComponentOpener(ManageMetricsModal)\r\n    const openSaveTableViewModal = useModalComponentOpener(SaveTableViewModal)\r\n    const openLoadTableViewModal = useModalComponentOpener(LoadTableViewModal)\r\n\r\n    const onOpenManageMetricsModal = useCallback(() => {\r\n        openManageMetricsModal({table, excludedMetrics})\r\n    }, [excludedMetrics, openManageMetricsModal, table])\r\n\r\n    const openSaveTableView = useCallback(() => {\r\n        openSaveTableViewModal({table})\r\n    }, [openSaveTableViewModal, table])\r\n\r\n    const openLoadTableView = useCallback(() => {\r\n        openLoadTableViewModal({table})\r\n    }, [openLoadTableViewModal, table])\r\n\r\n    return useMemo(\r\n        function memoizeItems() {\r\n            const options: PopupMenuOption[] = [\r\n                {\r\n                    children:\r\n                        t.SUPERVISION_PAGE.actions_menu_option_manage_metrics(),\r\n                    onClick: flow(onOpenManageMetricsModal, toggleShow),\r\n                },\r\n                {\r\n                    children:\r\n                        t.SUPERVISION_PAGE.actions_menu_option_restore_default_view(),\r\n                    onClick: flow(\r\n                        partial(resetMonitoringColumns, table),\r\n                        toggleShow,\r\n                    ),\r\n                },\r\n                {\r\n                    children: t.SUPERVISION_PAGE.actions_menu_option_set_view(),\r\n                    onClick: flow(\r\n                        partial(saveMonitoringConfigAsSystem, table),\r\n                        toggleShow,\r\n                    ),\r\n                },\r\n                {\r\n                    children: scrollingEnabled ? t.SUPERVISION_PAGE.actions_menu_option_horizontal_scrolling_off() :\r\n                    t.SUPERVISION_PAGE.actions_menu_option_horizontal_scrolling_on(),\r\n                    onClick: () => {\r\n                        handleChangeScrolling?.()\r\n                        toggleShow()\r\n                    },\r\n                },\r\n                {\r\n                    children:\r\n                        t.SUPERVISION_PAGE.actions_menu_option_save_view(),\r\n                    onClick: flow(\r\n                        partial(openSaveTableView, table),\r\n                        toggleShow,\r\n                    ),\r\n                },\r\n                {\r\n                    children:\r\n                        t.SUPERVISION_PAGE.actions_menu_option_load_view(),\r\n                    onClick: flow(\r\n                        partial(openLoadTableView, table),\r\n                        toggleShow,\r\n                    ),\r\n                },\r\n            ]\r\n            return options\r\n        },\r\n        [\r\n            t.SUPERVISION_PAGE,\r\n            onOpenManageMetricsModal,\r\n            toggleShow,\r\n            resetMonitoringColumns,\r\n            table,\r\n            saveMonitoringConfigAsSystem,\r\n            openSaveTableView,\r\n            openLoadTableView,\r\n            handleChangeScrolling,\r\n            scrollingEnabled,\r\n        ],\r\n    )\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {MonitoringConfigs} from '@bpinc/ad-stats-state-types'\r\nimport {stopPropagation} from '@bpinc/lib-helpers'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {ResizeTableColumn, ResizeTableColumnWidth} from '@bpinc/lib-ui-elements'\r\nimport {ResizeTable, useSorting} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {useTableGroups} from './hooks/useTableGroups'\r\nimport {useItemRenderer, useTableColumns, useTableData, useTeamName} from './hooks'\r\nimport {SectionHeader} from './SectionHeader'\r\nimport {SectionTitle} from './SectionTitle'\r\nimport {ServiceInfoModal} from './ServiceInfoModal'\r\nimport {ServicesFilterPopup} from './ServicesFilterPopup'\r\nimport {TableActionsButton} from './TableActionsButton'\r\nimport type {TableCollapsedGroupProps} from './useCollapsedTableGroupsIds'\r\n\r\n\r\ntype ServicesTableProps = TableCollapsedGroupProps & {\r\n    teamId: string\r\n}\r\n\r\ntype ColumnNames = MonitoringConfigs['SERVICES_COLUMN_CONFIGS'][number]['id']\r\n\r\nexport const ServicesTable: React.FC<ServicesTableProps> = ({teamId, toggleCollapsedGroup, collapsedGroupIds}) => {\r\n    const {t} = useLocalizationState()\r\n    const {openModal} = useModalsStateMethods()\r\n    const {\r\n        monitoringConfig,\r\n        monitoringTeamStats: {services, serviceSummary},\r\n    } = useStatsState()\r\n    const {resizeMonitoringColumns, updateScrollingState} = useStatsStateMethods()\r\n    const selectedTeamName = useTeamName(teamId)\r\n    const titlesForColumn = useLocalizedStatNames()\r\n    const scrollEnabled = monitoringConfig?.additionalData.scrolling?.['services'] !== false\r\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(undefined)\r\n\r\n    const toggleScroll = useCallback(() => {\r\n        updateScrollingState({table: 'services', scrollingEnabled: !scrollEnabled})\r\n    }, [scrollEnabled, updateScrollingState])\r\n\r\n    const getColumnTitle = useCallback((column: string) => {\r\n        const name = column as ColumnNames\r\n        if (name === 'name') {\r\n            return t.MONITORING_SERVICES_COLUMN_NAMES.services_column_name()\r\n        }\r\n        return (titlesForColumn[name] || [''])[0]\r\n    }, [t.MONITORING_SERVICES_COLUMN_NAMES, titlesForColumn])\r\n\r\n    const {\r\n        sortingSettings,\r\n        setSortingSettings,\r\n        handleSortingChange,\r\n    } = useSorting()\r\n\r\n    const extraColumns = useMemo<ResizeTableColumn[]>(() => {\r\n        return [\r\n            {\r\n                name: 'name' as const,\r\n                sticky: true,\r\n                headerClassName: tcn('overflow-hidden [&>*>*>button]:absolute [&>*>*>button]:-right-3.5 [&>*>*]:relative [&>*>*]:overflow-visible'),\r\n            },\r\n        ]\r\n    }, [])\r\n\r\n    const columns: ResizeTableColumn[] = useTableColumns({\r\n        config: monitoringConfig?.configs?.SERVICES_COLUMN_CONFIGS,\r\n        extraColumns,\r\n        getColumnTitle,\r\n        sortingSettings,\r\n        setSortingSettings,\r\n        scrollEnabled,\r\n        collapsedGroupIds,\r\n    })\r\n\r\n    const stats = useMemo(() => {\r\n        const config = monitoringConfig?.configs?.SERVICES_CONFIGS[teamId] || []\r\n        const isItemVisible = (id: string) => {\r\n            return (config.find(item => item.id === id) || {v: true}).v\r\n        }\r\n        return Object.values(services)\r\n            .map(item => ({...item, id: item.service_id || ''}))\r\n            .filter(item => isItemVisible(item.id))\r\n    }, [monitoringConfig?.configs?.SERVICES_CONFIGS, services, teamId])\r\n    const summaryStats = useMemo(() => {\r\n        return [{...serviceSummary, id: serviceSummary.service_id || ''}]\r\n    }, [serviceSummary])\r\n\r\n    const data = useTableData({stats, sortingSettings})\r\n\r\n    const renderHeaderItem = useCallback((columnData: ResizeTableColumn) => {\r\n        if (columnData.name === 'name') {\r\n            return (\r\n                <>\r\n                    <div className=\"truncate\">{columnData.title}</div>\r\n                    <div className=\"absolute -right-9.5 top-0\" onClick={stopPropagation}>\r\n                        <ServicesFilterPopup teamId={teamId} />\r\n                    </div>\r\n                </>\r\n            )\r\n        } else {\r\n            return <>{columnData.title}</>\r\n        }\r\n    }, [teamId])\r\n\r\n    const emptyData = useMemo(() => {\r\n        return [{id: null, name: t.GLOBAL.no_data()}]\r\n    }, [t.GLOBAL])\r\n    const summaryData = useTableData({stats: summaryStats, sortingSettings})\r\n\r\n    const renderItem = useItemRenderer()\r\n\r\n    const handleRowClick = useCallback((row: Record<string, unknown>) => {\r\n        if (typeof row.id !== 'string') {\r\n            return\r\n        }\r\n\r\n        const item = row as typeof data[number]\r\n        openModal({\r\n            className: 'w-[750px]',\r\n            title: t.MONITORING_LABEL.monitoring_label_skillsHeader(item.name as string),\r\n            body: <ServiceInfoModal serviceId={item.id} />,\r\n            afterClose: () => {\r\n                setSelectedItemId(undefined)\r\n            },\r\n        })\r\n        setSelectedItemId(item.id)\r\n    }, [openModal, t.MONITORING_LABEL])\r\n\r\n    const handleColumnsResize = useCallback((resizedColumns: Record<string, ResizeTableColumnWidth>) => {\r\n        resizeMonitoringColumns({table: 'services', columns: resizedColumns, scrollEnabled: scrollEnabled})\r\n    }, [resizeMonitoringColumns, scrollEnabled])\r\n\r\n    const selectedRows = useMemo(() => [data.findIndex(item => item.id === selectedItemId)], [data, selectedItemId])\r\n    const resultData = data.length ? data : emptyData\r\n\r\n    const groups = useTableGroups({\r\n        groups: monitoringConfig?.additionalData.groups?.SERVICES_COLUMN_CONFIGS,\r\n        columns,\r\n        collapsedGroupIds,\r\n    })\r\n    const nonConfigurableMetrics = extraColumns.filter(c => c.sticky).map(c => c.name)\r\n\r\n    return (\r\n        <div>\r\n            <SectionHeader className=\"mb-2\">\r\n                <SectionTitle title={t.MONITORING_LABEL.monitoring_label_services(selectedTeamName)} />\r\n                <TableActionsButton\r\n                    scrollingEnabled={scrollEnabled}\r\n                    handleChangeScrolling={toggleScroll}\r\n                    table=\"services\"\r\n                    excludedMetrics={nonConfigurableMetrics}\r\n                />\r\n            </SectionHeader>\r\n            <ResizeTable\r\n                toggleCollapsedGroup={toggleCollapsedGroup}\r\n                renderHeaderItem={renderHeaderItem}\r\n                columns={columns}\r\n                data={resultData}\r\n                footerData={summaryData}\r\n                sortingSettings={sortingSettings}\r\n                renderItem={renderItem}\r\n                onSortingChange={handleSortingChange}\r\n                onColumnsResize={handleColumnsResize}\r\n                onRowClick={handleRowClick}\r\n                isColumnResizable\r\n                isResizable\r\n                groups={groups}\r\n                hasGrid\r\n                scrollEnabled={scrollEnabled}\r\n                selectedRows={selectedRows}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {mediaTypeToIcon} from '@bpinc/ad-interaction-state-methods'\r\nimport type {MediaType} from '@bpinc/ad-transport-types'\r\nimport {SmTransition} from '@bpinc/lib-external-ui-elements'\r\nimport {timeFromNow, useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconClose} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button, InteractionMediaIcon} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface AlertMessageProps {\r\n    agentName: string\r\n    intentMessage: string\r\n    customerName: string\r\n    mediaType: MediaType\r\n    timestamp: number\r\n    onClose: () => void\r\n    onClick: () => void\r\n}\r\n\r\nconst className = tcn('group flex cursor-pointer flex-col justify-center',\r\n    'border border-l-4 border-[--supervision-alert-border] border-l-[--supervision-alert-color]',\r\n    'mt-1 h-[53px] w-[316px] bg-white pl-3 pr-1 shadow-md')\r\n\r\nexport const AlertMessage: FC<AlertMessageProps> = ({\r\n    agentName,\r\n    mediaType,\r\n    customerName,\r\n    onClose,\r\n    onClick,\r\n    intentMessage,\r\n    timestamp,\r\n}) => {\r\n    const localShow = useBoolean(true)\r\n\r\n    return (\r\n        <SmTransition\r\n            visible={localShow.value}\r\n            duration=\"300\"\r\n            animation=\"fade down\"\r\n            onHide={onClose}\r\n            unmountOnHide\r\n            transitionOnMount\r\n        >\r\n            <div>\r\n                <div tabIndex={0} role=\"alert\" className={className} onClick={onClick}>\r\n                    <div className=\"flex h-[17px] w-full justify-between\">\r\n                        <p className=\"truncate font-bold text-primary-legacy\">{agentName}</p>\r\n                        <p className=\"shrink-0 group-hover:hidden\">\r\n                            {timeFromNow(timestamp)}\r\n                        </p>\r\n                        <Button\r\n                            className=\"-mt-1 hidden shrink-0 group-hover:block\"\r\n                            onClick={e => {\r\n                                e.stopPropagation()\r\n                                localShow.setFalse()\r\n                            }}\r\n                        >\r\n                            <IconClose />\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"mt-0.5 flex items-center\">\r\n                        <InteractionMediaIcon icon={mediaTypeToIcon(mediaType)} className=\"mr-1 h-4 w-4 [&>path]:fill-icon\" />\r\n                        <span className=\"font-bold\">{customerName}</span>\r\n                        <span className=\"ml-2\">{intentMessage}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </SmTransition>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect} from 'react'\r\n\r\nimport {SmTransition} from '@bpinc/lib-external-ui-elements'\r\nimport {MS_IN_SECOND, useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconClose} from '@bpinc/lib-icons'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface EmptyAlertMessageProps {\r\n    onClose: () => void\r\n}\r\n\r\nexport const EmptyAlertMessage: FC<EmptyAlertMessageProps> = ({onClose}) => {\r\n    const {t} = useLocalizationState()\r\n    const localShow = useBoolean(true)\r\n\r\n    //Auto close alert after 1 second (plus 300ms for show animation)\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            localShow.setFalse()\r\n        }, MS_IN_SECOND * 1.3)\r\n\r\n        return () => clearTimeout(timer)\r\n    }, [localShow])\r\n\r\n    return (\r\n        <SmTransition\r\n            visible={localShow.value}\r\n            duration=\"300\"\r\n            animation=\"fade down\"\r\n            onHide={onClose}\r\n            unmountOnHide\r\n            transitionOnMount\r\n        >\r\n            <div>\r\n                <div\r\n                    className=\"mt-1 flex h-[31px] w-[254px] items-center justify-between\r\n                border border-[--supervision-alert-border] bg-white pl-4 pr-1\"\r\n                    role=\"alert\"\r\n                >\r\n                    <span>{t.SUPERVISION_PAGE.no_active_alerts_message()}</span>\r\n                    <Button\r\n                        className=\"flex\"\r\n                        onClick={localShow.setFalse}\r\n                    >\r\n                        <IconClose />\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </SmTransition>\r\n    )\r\n}\r\n","import type {CSSProperties, FC} from 'react'\r\nimport React, {useEffect, useMemo, useState} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {usePopper} from 'react-popper'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {useBoolean, useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconBell} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button, UnreadBadge} from '@bpinc/lib-ui-elements'\r\n\r\nimport {AlertMessage} from './AlertMessage'\r\nimport {EmptyAlertMessage} from './EmptyAlertMessage'\r\n\r\n\r\nconst defaultClassName = `\r\n  border border-[--c-main-bars-bg]\r\n  rounded h-full w-full\r\n  flex items-center justify-center\r\n`\r\n\r\nconst MAX_ALERT_MESSAGES_AMOUNT = 3\r\n\r\nexport const AlertsButton: FC = () => {\r\n    const active = useBoolean()\r\n    const intentAlerts = useStatsState(state => state.intentAlerts.filter(i => !i.closed))\r\n    const {closeIntentAlert} = useStatsStateMethods()\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n    const [wrapperElement, setWrapperElement] =\r\n        useState<HTMLButtonElement | null>(null)\r\n    const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(\r\n        null,\r\n    )\r\n\r\n    const {qmFloatingState, qmWidth} = useSupervisionUIContext(['qmFloatingState', 'qmWidth'])\r\n\r\n    const {\r\n        styles: popperStyles,\r\n        attributes: popperAttributes,\r\n        update,\r\n    } = usePopper(wrapperElement, popperElement, {\r\n        placement: 'bottom-end',\r\n        modifiers: [\r\n            {\r\n                name: 'eventListeners',\r\n                enabled: active.value && qmFloatingState !== 'floating',\r\n            },\r\n        ],\r\n    })\r\n\r\n    //Update popper position when qmFloatingState is changed\r\n    useEffect(() => {\r\n        if (active.value) {\r\n            update?.()\r\n        }\r\n    }, [active.value, qmFloatingState, update])\r\n\r\n    //Update popper position when qmWidth is changed\r\n    useEffect(() => {\r\n        if (active.value && qmFloatingState === 'pinned') {\r\n            update?.()\r\n        }\r\n    }, [\r\n        qmWidth,\r\n        active.value,\r\n        qmFloatingState,\r\n        update,\r\n    ])\r\n\r\n    const alertMessagesToShow = useMemo(() => {\r\n        return intentAlerts.slice(0, MAX_ALERT_MESSAGES_AMOUNT)\r\n    }, [intentAlerts])\r\n\r\n    const messagesStyle = useMemo(() => {\r\n        if (wrapperElement && qmFloatingState === 'floating') {\r\n            const rect = wrapperElement.getBoundingClientRect()\r\n            const OFFSET_RIGHT = 12\r\n\r\n            return {\r\n                ...popperStyles.popper,\r\n                right: qmWidth - (window.innerWidth - rect.right) + OFFSET_RIGHT,\r\n            } satisfies CSSProperties\r\n        } else {\r\n            return popperStyles.popper\r\n        }\r\n    }, [\r\n        popperStyles.popper,\r\n        qmFloatingState,\r\n        qmWidth,\r\n        wrapperElement,\r\n    ])\r\n\r\n    const onKeyPressToggleHandler = useOnKeyPressHandler(active.toggle)\r\n\r\n    return (\r\n        <div className=\"relative h-9.5 w-9.5\">\r\n            <Button\r\n                onClick={active.toggle}\r\n                onKeyDown={onKeyPressToggleHandler}\r\n                ref={setWrapperElement}\r\n                className={tcn(\r\n                    'group hover:border-[--c-bar-icon-hover]',\r\n                    defaultClassName, {\r\n                        'border-transparent bg-[--c-main-bars-bg] hover:border-transparent': active.value,\r\n                    },\r\n                )}\r\n            >\r\n                <IconBell\r\n                    className={tcn('group-hover:[&_path]:fill-[--c-bar-icon-hover]', {\r\n                        '[&_path]:fill-[--supervision-header-bg]': active.value,\r\n                    })}\r\n                />\r\n            </Button>\r\n            <UnreadBadge\r\n                unreadAmount={intentAlerts.length}\r\n                className=\"absolute right-0 top-0\r\n                    h-3.5 w-3.5 translate-x-1/2\r\n                    translate-y-1/3 outline\r\n                    outline-[--supervision-header-bg]\"\r\n            />\r\n            {active.value &&\r\n                ReactDOM.createPortal(\r\n                    <div\r\n                        ref={setPopperElement}\r\n                        className=\"z-10\"\r\n                        style={messagesStyle}\r\n                        {...popperAttributes.popper}\r\n                    >\r\n                        {alertMessagesToShow.length ? (\r\n                            alertMessagesToShow.map(alert => (\r\n                                <AlertMessage\r\n                                    key={alert.id}\r\n                                    onClose={() => {\r\n                                        closeIntentAlert(alert.id)\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        closeIntentAlert(alert.id)\r\n                                        produceSupervisionUIContext(draft => {\r\n                                            draft.qmUserId = alert.userId\r\n                                            draft.qmAutofocusedIntentAlert = alert\r\n                                            draft.qmShowDetails = true\r\n                                        })\r\n                                    }}\r\n                                    {...alert}\r\n                                />\r\n                            ))\r\n                        ) : (\r\n                            <EmptyAlertMessage onClose={active.setFalse} />\r\n                        )}\r\n                    </div>,\r\n                    document.getElementById('root') || window.document.body,\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {SmStrictDropdownProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmDropdown, SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {every} from '@bpinc/lib-types-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\nexport const IntentsAlertsConfigModal: React.FC<CommonModalProps> = ({\r\n    onClose,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {alerts, all: allIntents} = useStatsState('intents')\r\n    const {setAlertIntents} = useStatsStateMethods()\r\n    const [value, setValue] = useState(alerts)\r\n\r\n    const options = useMemo(() => allIntents.map(({id, name}) => ({value: id, text: name})), [allIntents])\r\n\r\n    const handleOnChange = (_: React.SyntheticEvent<HTMLElement>, data: SmStrictDropdownProps) => {\r\n        const selectValue = data.value\r\n        if (!Array.isArray(selectValue) || !every(selectValue, (item): item is string => typeof item === 'string')) {\r\n            return\r\n        }\r\n        setValue(selectValue)\r\n    }\r\n\r\n    function handleSave(e: React.SyntheticEvent) {\r\n        e.preventDefault()\r\n        setAlertIntents(value)\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            flex\r\n            className=\"relative min-h-[500px] max-w-[540px] flex-col overflow-hidden\"\r\n            aria-labelledby=\"alerts_config_modal_title\"\r\n            data-testid=\"AlertsConfigModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"save_table_view_modal_title\">\r\n                {t.SUPERVISION_PAGE.intents_alerts_configuration()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"!flex flex-auto overflow-hidden\">\r\n                <SmForm onSubmit={handleSave} className=\"w-full\">\r\n                    <SmForm.Field>\r\n                        <label>{t.SUPERVISION_PAGE.intents_for_alerts_label()}</label>\r\n                        <SmDropdown multiple selection search clearable options={options} value={value} onChange={handleOnChange} />\r\n                    </SmForm.Field>\r\n                </SmForm>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton primary onClick={handleSave}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.button_save()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import type {ThresholdsConfig} from '@bpinc/ad-stats-state-types'\r\nimport {isNotReadyKey, thresholdsFormattingMap} from '@bpinc/ad-stats-state-types'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport type {StringifiedNumber} from '@bpinc/lib-types-helpers'\r\nimport {isStringifiedNumber} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {ThresholdItem} from './types'\r\n\r\n\r\nfunction timeDurationToSeconds(timeDuration: string): StringifiedNumber {\r\n    if (isStringifiedNumber(timeDuration)) {\r\n        return timeDuration\r\n    }\r\n\r\n    const [minutes, seconds] = timeDuration.split(':').map(Number)\r\n\r\n    return `${minutes * 60 + seconds}`\r\n}\r\n\r\nexport function validateTimeInput(value: string) {\r\n    if (value.match(/[a-zA-Z]/g)) {\r\n        return false\r\n    }\r\n\r\n    if (!value.includes(':')) {\r\n        return value.match(/^[0-9]*$/g)\r\n    }\r\n\r\n    const [minutes, seconds] = value.split(':').map(Number)\r\n\r\n    if (isNaN(minutes) || isNaN(seconds)) {\r\n        return false\r\n    }\r\n    if (minutes < 0 || seconds < 0 || seconds > 59) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nexport function thresholdItemToStateType(thresholdItem: ThresholdItem) {\r\n    return {\r\n        textColor: thresholdItem.textColor,\r\n        backgroundColor: thresholdItem.backgroundColor,\r\n        disabled: thresholdItem.disabled,\r\n        condition: thresholdItem.condition,\r\n        value: timeDurationToSeconds(thresholdItem.value),\r\n    }\r\n}\r\n\r\nexport function formatThreshold(key: keyof ThresholdsConfig, value: string) {\r\n    const formatting = isNotReadyKey(key) ? 'time' : thresholdsFormattingMap[key]\r\n    if (formatting === 'time') {\r\n        return formatDurationShort(Number(value))\r\n    }\r\n    return value\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {ThresholdsConfig} from '@bpinc/ad-stats-state-types'\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ThresholdsState} from './types'\r\nimport {thresholdItemToStateType} from './utils'\r\n\r\n\r\ninterface AlertConfigurationModalActionsProps {\r\n    state: ThresholdsState\r\n    onClose: () => void\r\n    readOnly: boolean\r\n}\r\n\r\nexport const AlertConfigurationModalActions: FC<\r\n    AlertConfigurationModalActionsProps\r\n> = ({state, onClose, readOnly}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {saveThresholdsConfig, setDefaultSystemThresholds} =\r\n        useStatsStateMethods()\r\n\r\n    const hasError = useMemo(() => {\r\n        return typedKeys(state)?.some(key => {\r\n            if (key === 'selectedItem') {\r\n                return false\r\n            }\r\n\r\n            const item = state[key]\r\n            return item?.editMode && item?.invalid\r\n        })\r\n    }, [state])\r\n\r\n    function getCustomThresholds() {\r\n        const customThresholds: Partial<ThresholdsConfig> = {}\r\n\r\n        typedKeys(state)?.forEach(key => {\r\n            if (key === 'selectedItem') {\r\n                return\r\n            }\r\n\r\n            const item = state[key]\r\n            if (item?.editMode) {\r\n                customThresholds[key] = thresholdItemToStateType(item)\r\n            }\r\n        })\r\n\r\n        return customThresholds\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (hasError) {\r\n            return\r\n        }\r\n\r\n        saveThresholdsConfig({thresholds: getCustomThresholds()})\r\n        onClose()\r\n    }\r\n\r\n    const handleSetSystemDefault = () => {\r\n        if (hasError) {\r\n            return\r\n        }\r\n\r\n        setDefaultSystemThresholds({thresholds: getCustomThresholds()})\r\n        onClose()\r\n    }\r\n\r\n    if (readOnly) {\r\n        return (\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()} primary>\r\n                    {t.GLOBAL.close()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal.Actions className=\"flex justify-between\">\r\n            <SemanticButton\r\n                disabled={hasError}\r\n                basic\r\n                onClick={handleSetSystemDefault}\r\n            >\r\n                {t.THRESHOLDS.threshold_button_setDefault()}\r\n            </SemanticButton>\r\n            <div className=\"ml-4\">\r\n                <SemanticButton\r\n                    disabled={hasError}\r\n                    primary\r\n                    onClick={handleSubmit}\r\n                >\r\n                    {t.THRESHOLDS.threshold_button_apply()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.GLOBAL.cancel()}\r\n                </SemanticButton>\r\n            </div>\r\n        </Modal.Actions>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface AlertConfigurationModalTableHeaderUIProps{\r\n    readOnly: boolean\r\n}\r\n\r\nexport const AlertConfigurationModalTableHeaderUI = React.memo<AlertConfigurationModalTableHeaderUIProps>(\r\n    function AlertConfigurationModalTableHeaderUI({readOnly}) {\r\n        const {t} = useLocalizationState()\r\n\r\n        return (\r\n            <thead>\r\n                <tr className=\"whitespace-nowrap text-right\">\r\n                    <th />\r\n                    <th className=\"pr-6\">\r\n                        {t.THRESHOLDS.threshold_heading_threshold()}\r\n                    </th>\r\n                    <th className=\"pr-2.5\">{t.THRESHOLDS.threshold_color_heading()}</th>\r\n                    {!readOnly && (\r\n                        <>\r\n                            <th />\r\n                            <th />\r\n                        </>\r\n                    )}\r\n                </tr>\r\n            </thead>\r\n        )\r\n    },\r\n)\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport produce from 'immer'\r\n\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport type {LinkLikeButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {LinkLikeButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\n\r\n\r\ntype DisableButtonProps = LinkLikeButtonProps & {\r\n    thresholdItem: ThresholdItem\r\n    setState: StateSetter<ThresholdsState>\r\n}\r\n\r\nexport const DisableButton: FC<DisableButtonProps> = ({\r\n    thresholdItem,\r\n    setState,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const handleDisable = () => {\r\n        setState(\r\n            produce(draft => {\r\n                draft[thresholdItem.key].disabled = true\r\n            }),\r\n        )\r\n    }\r\n\r\n    const handleEnable = () => {\r\n        setState(\r\n            produce(draft => {\r\n                draft[thresholdItem.key].disabled = false\r\n            }),\r\n        )\r\n    }\r\n\r\n    return (\r\n        <LinkLikeButton {...props} onClick={thresholdItem.disabled ? handleEnable : handleDisable}>\r\n            {thresholdItem.disabled\r\n                ? t.THRESHOLDS.enable()\r\n                : t.THRESHOLDS.disable()}\r\n        </LinkLikeButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport produce from 'immer'\r\n\r\nimport type {Threshold} from '@bpinc/ad-stats-state-types'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport type {LinkLikeButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {LinkLikeButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\nimport {formatThreshold} from './utils'\r\n\r\n\r\ntype EditModeButonProps = LinkLikeButtonProps & {\r\n    thresholdItem: ThresholdItem\r\n    setState: StateSetter<ThresholdsState>\r\n    systemThreshold: Threshold\r\n}\r\n\r\nexport const EditModeButon: FC<EditModeButonProps> = ({thresholdItem, systemThreshold, setState, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    if (thresholdItem.disabled) {\r\n        return null\r\n    }\r\n\r\n    const startEditing = () => {\r\n        setState(\r\n            produce(draft => {\r\n                draft[thresholdItem.key].editMode = !thresholdItem.editMode\r\n                draft[thresholdItem.key].valueInputAutoFocused = true\r\n            }),\r\n        )\r\n    }\r\n\r\n    const restore = () => {\r\n        setState(\r\n            produce(draft => {\r\n                draft[thresholdItem.key].editMode = !thresholdItem.editMode\r\n                draft[thresholdItem.key].value = formatThreshold(thresholdItem.key, systemThreshold.value)\r\n            }),\r\n        )\r\n    }\r\n\r\n    return (\r\n        <LinkLikeButton onClick={thresholdItem.editMode ? restore : startEditing} {...props}>\r\n            {\r\n                thresholdItem.editMode ? t.THRESHOLDS.restore() : t.THRESHOLDS.edit()\r\n            }\r\n        </LinkLikeButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useState} from 'react'\r\nimport {HexAlphaColorPicker} from 'react-colorful'\r\n\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype ColorModalProps = CommonModalProps & {\r\n    textColor: string\r\n    bgColor: string\r\n    onSubmit: ({textColorValue, bgColorValue}: {textColorValue: string; bgColorValue: string}) => void\r\n}\r\n\r\nfunction parseStringColor(color: string) {\r\n    switch (color) {\r\n        case 'red':\r\n            return '#ff0000'\r\n        case 'transparent':\r\n            return '#ffffff00'\r\n        default:\r\n            return color\r\n    }\r\n}\r\n\r\nexport const ColorModal: FC<ColorModalProps> = ({\r\n    onClose,\r\n    textColor,\r\n    bgColor,\r\n    onSubmit,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const [textColorValue, setTextColorValue] = useState(() => parseStringColor(textColor))\r\n    const [bgColorValue, setBgColorValue] = useState(() => parseStringColor(bgColor))\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit({textColorValue, bgColorValue})\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            size=\"small\"\r\n            onClose={onClose}\r\n            aria-labelledby=\"color_modal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header id=\"color_modal\">\r\n                {t.SETTINGS.settings_menu_alarmConfiguration()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"flex justify-between gap-12\">\r\n                <div className=\"flex-1\">\r\n                    <h4>\r\n                        {t.THRESHOLDS.threshold_config_label_text()}\r\n                    </h4>\r\n                    <HexAlphaColorPicker\r\n                        className=\"w-full\"\r\n                        onChange={setTextColorValue}\r\n                        color={textColorValue}\r\n                    />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                    <h4>\r\n                        {t.THRESHOLDS.threshold_config_label_background()}\r\n                    </h4>\r\n                    <HexAlphaColorPicker\r\n                        className=\"w-full\"\r\n                        id=\"threshold_bg_color\"\r\n                        onChange={setBgColorValue}\r\n                        color={bgColorValue}\r\n                    />\r\n                </div>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton primary onClick={handleSubmit}>{t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}</SemanticButton>\r\n                <SemanticButton onClick={() => onClose()}>{t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}</SemanticButton>\r\n            </Modal.Actions>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ColorModal} from './ColorModal'\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\n\r\n\r\ninterface ThresholdColorCellContentProps {\r\n    thresholdItem: ThresholdItem\r\n    setState: StateSetter<ThresholdsState>\r\n    isSelected: boolean\r\n}\r\n\r\nexport const ThresholdColorCellContent: FC<ThresholdColorCellContentProps> = ({\r\n    thresholdItem,\r\n    isSelected,\r\n    setState,\r\n}) => {\r\n    const openColorModal = useModalComponentOpener(ColorModal)\r\n\r\n    const handleOpenColorModal = useCallback(() => {\r\n        openColorModal({\r\n            textColor: thresholdItem.textColor ?? 'red',\r\n            bgColor: thresholdItem.backgroundColor ?? 'transparent',\r\n            onSubmit: ({textColorValue, bgColorValue}) => {\r\n                setState(\r\n                    produce(draft => {\r\n                        draft[thresholdItem.key].textColor = textColorValue\r\n                        draft[thresholdItem.key].backgroundColor = bgColorValue\r\n                    }),\r\n                )\r\n            },\r\n        })\r\n    }, [\r\n        openColorModal,\r\n        setState,\r\n        thresholdItem.backgroundColor,\r\n        thresholdItem.key,\r\n        thresholdItem.textColor,\r\n    ])\r\n\r\n    if (thresholdItem.disabled) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <button\r\n            style={{\r\n                backgroundColor: thresholdItem.backgroundColor,\r\n                color: thresholdItem.textColor,\r\n            }}\r\n            tabIndex={thresholdItem.editMode ? 0 : -1}\r\n            className={tcn('w-full pr-2.5 text-right', {\r\n                'hover:cursor-pointer': thresholdItem.editMode,\r\n                underline: isSelected && thresholdItem.editMode,\r\n            })}\r\n\r\n            onClick={\r\n                thresholdItem.disabled || !thresholdItem.editMode\r\n                    ? undefined\r\n                    : handleOpenColorModal\r\n            }\r\n        >\r\n            {thresholdItem.value}\r\n        </button>\r\n    )\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useEffect, useRef} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport type {ThresholdCondition} from '@bpinc/ad-stats-state-types'\r\nimport {SmInput} from '@bpinc/lib-external-ui-elements'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\nimport {validateTimeInput} from './utils'\r\n\r\n\r\ninterface ThresholdValueCellProps {\r\n    isSelected: boolean\r\n    thresholdItem: ThresholdItem\r\n    setState: StateSetter<ThresholdsState>\r\n}\r\n\r\nexport const ThresholdValueCellContent: FC<ThresholdValueCellProps> = ({\r\n    thresholdItem,\r\n    setState,\r\n    isSelected,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const parseCondition = useCallback((condition: ThresholdCondition) => {\r\n        switch (condition) {\r\n            case 'GREAT_THAN':\r\n                return '>'\r\n            case 'LESS_THAN':\r\n                return '<'\r\n            default:\r\n                return ''\r\n        }\r\n    }, [])\r\n\r\n    const parseThreshold = useCallback(\r\n        (condition: ThresholdCondition, thresholdValue: string) => {\r\n            switch (condition) {\r\n                case 'AUTO':\r\n                    return t.THRESHOLDS.threshold_condition_auto()\r\n                case 'GREAT_THAN':\r\n                    return `> ${thresholdValue}`\r\n                case 'LESS_THAN':\r\n                    return `< ${thresholdValue}`\r\n            }\r\n        },\r\n        [t],\r\n    )\r\n\r\n    const handleInputBlur = useCallback(() => {\r\n        setState(\r\n            produce(draft => {\r\n                draft[thresholdItem.key].valueInputAutoFocused = false\r\n            }),\r\n        )\r\n    }, [setState, thresholdItem.key])\r\n\r\n\r\n    const valueTextElementRef = useRef<HTMLSpanElement>(null)\r\n\r\n    const handleValueChange = useCallback(\r\n        (evt: ChangeEvent<HTMLInputElement>) => {\r\n            const value = evt.target.value\r\n\r\n            setState(\r\n                produce(draft => {\r\n                    draft[thresholdItem.key].value = value\r\n\r\n                    if (!validateTimeInput(value)) {\r\n                        draft[thresholdItem.key].invalid = true\r\n                    } else {\r\n                        delete draft[thresholdItem.key].invalid\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [setState, thresholdItem.key],\r\n    )\r\n\r\n    const inputWidthRef = useRef<number>(0)\r\n\r\n    useEffect(() => {\r\n        if (valueTextElementRef.current) {\r\n            inputWidthRef.current = valueTextElementRef.current.offsetWidth\r\n        }\r\n    }, [])\r\n\r\n    if (thresholdItem.disabled) {\r\n        return null\r\n    }\r\n\r\n    if (thresholdItem.editMode) {\r\n        return (\r\n            <>\r\n                {isSelected ? (\r\n                    <div className=\"flex w-full justify-end\">\r\n                        <span className=\"flex items-center\">\r\n                            {parseCondition(thresholdItem.condition)}\r\n                        </span>\r\n                        <SmInput\r\n                            className=\"!mr-[3px] !mt-px !h-full w-[50px] !p-0 [&>input]:p-0.5 [&>input]:text-right\"\r\n                            style={{width: inputWidthRef.current ?? 'auto'}}\r\n                            value={thresholdItem.value}\r\n                            error={thresholdItem.invalid}\r\n                            onBlur={handleInputBlur}\r\n                            autoFocus={thresholdItem.valueInputAutoFocused}\r\n                            onChange={handleValueChange}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <span ref={valueTextElementRef}>{parseThreshold(thresholdItem.condition, thresholdItem.value)}</span>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <span ref={valueTextElementRef}>{parseThreshold(thresholdItem.condition, thresholdItem.value)}</span>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport type {Threshold} from '@bpinc/ad-stats-state-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {type StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport {DisableButton} from './DisableButton'\r\nimport {EditModeButon} from './EditModeButon'\r\nimport {ThresholdColorCellContent} from './ThresholdColorCellContent'\r\nimport {ThresholdValueCellContent} from './ThresholdValueCellContent'\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\n\r\n\r\ninterface ThresholdRowProps {\r\n    thresholdItem: ThresholdItem\r\n    setState: StateSetter<ThresholdsState>\r\n    systemThreshold: Threshold\r\n    isSelected: boolean\r\n    readOnly: boolean\r\n}\r\n\r\nexport const ThresholdRow: FC<ThresholdRowProps> = React.memo(\r\n    ({thresholdItem, systemThreshold, isSelected, setState, readOnly}) => {\r\n        const controlButtonClassName = isSelected ? 'opacity-100' : 'opacity-0'\r\n\r\n        const setSelected = useCallback(() => {\r\n            setState(\r\n                produce(draft => {\r\n                    draft.selectedItem = thresholdItem.key\r\n                }),\r\n            )\r\n        }, [setState, thresholdItem.key])\r\n\r\n        const resetSelected = useCallback(() => {\r\n            setState(\r\n                produce(draft => {\r\n                    draft.selectedItem = undefined\r\n                }),\r\n            )\r\n        }, [setState])\r\n\r\n        return (\r\n            <tr\r\n                onMouseEnter={setSelected}\r\n                onFocus={setSelected}\r\n                tabIndex={0}\r\n                onMouseLeave={resetSelected}\r\n                className=\"h-6.5\"\r\n            >\r\n                <td title={thresholdItem.fullName} className=\"pr-16\">\r\n                    {thresholdItem.name}\r\n                </td>\r\n                <td className=\"pr-6 text-right\">\r\n                    <ThresholdValueCellContent\r\n                        thresholdItem={thresholdItem}\r\n                        setState={setState}\r\n                        isSelected={isSelected}\r\n                    />\r\n                </td>\r\n                <td>\r\n                    <ThresholdColorCellContent\r\n                        thresholdItem={thresholdItem}\r\n                        setState={setState}\r\n                        isSelected={isSelected}\r\n                    />\r\n                </td>\r\n                {!readOnly && (\r\n                    <>\r\n                        <td>\r\n                            <EditModeButon\r\n                                className={tcn(\r\n                                    controlButtonClassName,\r\n                                    'pl-2 pr-4',\r\n                                )}\r\n                                thresholdItem={thresholdItem}\r\n                                systemThreshold={systemThreshold}\r\n                                setState={setState}\r\n                            />\r\n                        </td>\r\n                        <td title={thresholdItem.fullName}>\r\n                            <DisableButton\r\n                                className=\"mx-1\"\r\n                                thresholdItem={thresholdItem}\r\n                                setState={setState}\r\n                            />\r\n                        </td>\r\n                    </>\r\n                ) }\r\n            </tr>\r\n        )\r\n    },\r\n)\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\n\r\ninterface ThresholdsGroupLabelRowProps {\r\n    children: string\r\n}\r\n\r\nexport const ThresholdsGroupLabelRow: FC<ThresholdsGroupLabelRowProps> = ({children}) => {\r\n    return (\r\n        <tr>\r\n            <td colSpan={6}>\r\n                <div className=\"font-bold\">\r\n                    {children}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {servicesThresholdsKeys} from '@bpinc/ad-stats-state-types'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {AlertConfigurationModalTableHeaderUI} from './AlertConfigurationModalTableHeaderUI'\r\nimport {ThresholdRow} from './ThresholdRow'\r\nimport {ThresholdsGroupLabelRow} from './ThresholdsGroupLabelRow'\r\nimport type {ThresholdItem, ThresholdsState} from './types'\r\n\r\n\r\ninterface AlertConfigurationModalContentProps {\r\n    state: ThresholdsState\r\n    setState: StateSetter<ThresholdsState>\r\n    readOnly: boolean\r\n}\r\n\r\nexport const AlertConfigurationModalContent: FC<AlertConfigurationModalContentProps> = ({state, setState, readOnly}) => {\r\n    const {t} = useLocalizationState()\r\n    const systemThresholds = useStatsState('systemThresholds')\r\n\r\n    const groupedState = useMemo(() => {\r\n        const services: ThresholdItem[] = []\r\n        const agents: ThresholdItem[] = []\r\n\r\n        typedKeys(state)?.forEach(key => {\r\n            if (key === 'selectedItem') {\r\n                return\r\n            }\r\n\r\n            if (servicesThresholdsKeys.includes(key as any)) {\r\n                services.push(state[key])\r\n            } else {\r\n                agents.push(state[key])\r\n            }\r\n        })\r\n\r\n        return {\r\n            services,\r\n            agents,\r\n        }\r\n    }, [state])\r\n\r\n\r\n    return (\r\n        <Modal.Content className=\"justify-self-center\">\r\n            <table className=\"w-full\">\r\n                <AlertConfigurationModalTableHeaderUI readOnly={readOnly} />\r\n                <tbody>\r\n                    <ThresholdsGroupLabelRow>\r\n                        {t.THRESHOLDS.threshold_label_service()}\r\n                    </ThresholdsGroupLabelRow>\r\n                    {groupedState.services.map(item => (\r\n                        <ThresholdRow\r\n                            key={item.key}\r\n                            thresholdItem={item}\r\n                            isSelected={state.selectedItem === item.key}\r\n                            systemThreshold={systemThresholds.config[item.key]}\r\n                            setState={setState}\r\n                            readOnly={readOnly}\r\n                        />\r\n                    ))}\r\n                    <ThresholdsGroupLabelRow>\r\n                        {t.THRESHOLDS.threshold_label_agents()}\r\n                    </ThresholdsGroupLabelRow>\r\n                    {groupedState.agents.map(item => (\r\n                        <ThresholdRow\r\n                            key={item.key}\r\n                            thresholdItem={item}\r\n                            isSelected={state.selectedItem === item.key}\r\n                            systemThreshold={systemThresholds.config[item.key]}\r\n                            setState={setState}\r\n                            readOnly={readOnly}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Modal.Content>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {AlertConfigurationModalActions} from './AlertConfigurationModalActions'\r\nimport {AlertConfigurationModalContent} from './AlertConfigurationModalContent'\r\nimport type {ThresholdsState} from './types'\r\nimport {useInitialState} from './useInitialState'\r\n\r\n\r\nexport const MetricsAlertsConfigModal: React.FC<CommonModalProps> = ({\r\n    onClose,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const initialState = useInitialState()\r\n    const readOnly = !useSessionState('privileges').SYS_ALERT_CONFIG\r\n\r\n    const [state, setState] = useState<ThresholdsState>(initialState)\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            className=\"max-w-[720px]\"\r\n            aria-labelledby=\"alert_configuration\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header id=\"alert_configuration\">\r\n                {t.SETTINGS.settings_menu_alarmConfiguration()}\r\n            </Modal.Header>\r\n            <AlertConfigurationModalContent state={state} setState={setState} readOnly={readOnly} />\r\n            <AlertConfigurationModalActions onClose={onClose} state={state} readOnly={readOnly} />\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport type {ThresholdsConfig} from '@bpinc/ad-stats-state-types'\r\nimport {isNotReadyKey, isThresholdKey, notReadyKeyToReason} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\n\r\nimport type {ThresholdsState} from './types'\r\nimport {formatThreshold} from './utils'\r\n\r\n\r\nexport function useInitialState(): ThresholdsState {\r\n    const {thresholds, systemThresholds} = useStatsState([\r\n        'thresholds',\r\n        'systemThresholds',\r\n    ])\r\n\r\n    const titlesForColumns = useLocalizedStatNames()\r\n\r\n    const getNames = useCallback(\r\n        (key: keyof ThresholdsConfig) => {\r\n            if (isNotReadyKey(key)) {\r\n                const name = notReadyKeyToReason(key)\r\n                return {\r\n                    name: name,\r\n                    fullName: name,\r\n                }\r\n            }\r\n\r\n            const [name, fullName] =\r\n                key in titlesForColumns ? titlesForColumns[key] : [key, key]\r\n\r\n            return {name, fullName}\r\n        },\r\n        [titlesForColumns],\r\n    )\r\n\r\n    return useMemo(() => {\r\n        const result: Partial<ThresholdsState> = {}\r\n        for (const [key, value] of Object.entries(systemThresholds.config)) {\r\n            if (!isThresholdKey(key)) {\r\n                continue\r\n            }\r\n\r\n            result[key] = {\r\n                ...value,\r\n                ...getNames(key),\r\n                key,\r\n                value: formatThreshold(key, value.value),\r\n                editMode: false,\r\n            }\r\n        }\r\n\r\n        for (const [key, value] of Object.entries(thresholds.config)) {\r\n            if (!isThresholdKey(key) || !value) {\r\n                continue\r\n            }\r\n\r\n            result[key] = {\r\n                ...value,\r\n                ...getNames(key),\r\n                value: formatThreshold(key, value.value),\r\n                key,\r\n                editMode: true,\r\n            }\r\n        }\r\n\r\n        return result as ThresholdsState\r\n    }, [getNames, systemThresholds, thresholds])\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport {flow as pipe} from 'lodash-es'\r\n\r\nimport {useBoolean, useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {IconSettings} from '@bpinc/lib-icons'\r\nimport {PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {IntentsAlertsConfigModal} from '../../modals/IntentsAlertsConfigModal'\r\nimport {MetricsAlertsConfigModal} from '../../modals/MetricsAlertsConfigModal'\r\n\r\n\r\nexport const AlertsConfigurationButton: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const showOptions = useBoolean()\r\n\r\n    const openIntentsAlertsConfigModal = useModalComponentOpener(IntentsAlertsConfigModal)\r\n    const handleOpenIntentsConfig = useCallback(\r\n        (e: React.SyntheticEvent) => {\r\n            e.preventDefault()\r\n            openIntentsAlertsConfigModal()\r\n        },\r\n        [openIntentsAlertsConfigModal],\r\n    )\r\n\r\n    const openMetricsAlertConfigModal = useModalComponentOpener(MetricsAlertsConfigModal)\r\n    const handleOpenMetricsConfig = useCallback(\r\n        (e: React.SyntheticEvent) => {\r\n            e.preventDefault()\r\n            openMetricsAlertConfigModal()\r\n        },\r\n        [openMetricsAlertConfigModal],\r\n    )\r\n\r\n    const onKeyPressOpenAlertsHandler = useOnKeyPressHandler(\r\n        showOptions.toggle,\r\n    )\r\n\r\n    const options = useMemo(() => {\r\n        return [\r\n            {\r\n                children: t.SUPERVISION_PAGE.metrics_alerts_configuration(),\r\n                onClick: pipe(handleOpenMetricsConfig, showOptions.setFalse),\r\n            },\r\n            {\r\n                children: t.SUPERVISION_PAGE.intents_alerts_configuration(),\r\n                onClick: pipe(handleOpenIntentsConfig, showOptions.setFalse),\r\n            },\r\n        ]\r\n    }, [handleOpenIntentsConfig, handleOpenMetricsConfig, showOptions.setFalse, t.SUPERVISION_PAGE])\r\n\r\n    return (\r\n        <PopupButton\r\n            custom\r\n            show={showOptions.value}\r\n            toggleShow={showOptions.toggle}\r\n            enabledInOffline\r\n            className=\"group\"\r\n            popupClassName=\"items-center flex\"\r\n            onClick={handleOpenIntentsConfig}\r\n            onKeyDown={onKeyPressOpenAlertsHandler}\r\n            options={options}\r\n        >\r\n            <IconSettings\r\n                className=\"group-hover:[&>path]:fill-[--c-bar-icon-hover]\"\r\n            />\r\n        </PopupButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {AlertsButton} from './AlertsButton'\r\nimport {AlertsConfigurationButton} from './AlertsConfigurationButton'\r\n\r\n\r\nexport const SupervisionPageHeader: FC = () => {\r\n    const privileges = useSessionState('privileges')\r\n    const {t} = useLocalizationState()\r\n    const tabs = useMemo(() => [{id: 'metrics', title: t.MONITORING_LABEL.supervision_teams()}], [t])\r\n\r\n    return (\r\n        <header className=\"flex h-[50px] items-center justify-between bg-[--supervision-header-bg] py-1.5 pr-6\">\r\n            <Tabs\r\n                tabs={tabs}\r\n                activeTabId=\"metrics\"\r\n                headerClassName=\"bg-transparent border-b-transparent\"\r\n                tabsContentClassName=\"hidden\"\r\n            />\r\n            {privileges.SYS_VIEW_LIST_OF_AGENTS && (\r\n                <div className=\"flex gap-6\">\r\n                    <AlertsButton />\r\n                    <AlertsConfigurationButton />\r\n                </div>\r\n            )}\r\n        </header>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo} from 'react'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {MonitoringConfigs} from '@bpinc/ad-stats-state-types'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\nimport type {ResizeTableColumn, ResizeTableColumnWidth} from '@bpinc/lib-ui-elements'\r\nimport {ResizeTable, useSorting} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useTableGroups} from './hooks/useTableGroups'\r\nimport {useItemRenderer, useTableColumns, useTableData} from './hooks'\r\nimport {SectionHeader} from './SectionHeader'\r\nimport {SectionTitle} from './SectionTitle'\r\nimport {TableActionsButton} from './TableActionsButton'\r\nimport type {TableCollapsedGroupProps} from './useCollapsedTableGroupsIds'\r\n\r\n\r\ntype TeamsTableProps = TableCollapsedGroupProps & {\r\n    teamId: string | undefined\r\n    onTeamIdChange: (teamId: string) => void\r\n}\r\n\r\ntype ColumnNames = MonitoringConfigs['TEAMS_COLUMN_CONFIGS'][number]['id']\r\n\r\nexport const TeamsTable: React.FC<TeamsTableProps> = ({teamId, collapsedGroupIds, onTeamIdChange, toggleCollapsedGroup}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        monitoringConfig,\r\n        monitoringTeamsStats: teamsStats,\r\n    } = useStatsState()\r\n    const {resizeMonitoringColumns, updateScrollingState} = useStatsStateMethods()\r\n    const titlesForColumn = useLocalizedStatNames()\r\n    const scrollEnabled = monitoringConfig?.additionalData.scrolling?.['teams'] !== false\r\n\r\n    const toggleScroll = useCallback(() => {\r\n        updateScrollingState({table: 'teams', scrollingEnabled: !scrollEnabled})\r\n    }, [scrollEnabled, updateScrollingState])\r\n\r\n    const getColumnTitle = useCallback((column: string) => {\r\n        const name = column as ColumnNames\r\n        if (name === 'name') {\r\n            return t.MONITORING_TEAMS_COLUMN_NAMES.teams_column_name()\r\n        }\r\n        return (titlesForColumn[name] || [''])[0]\r\n    }, [t.MONITORING_TEAMS_COLUMN_NAMES, titlesForColumn])\r\n\r\n    const {\r\n        sortingSettings,\r\n        setSortingSettings,\r\n        handleSortingChange,\r\n    } = useSorting()\r\n\r\n    const extraColumns = useMemo<ResizeTableColumn[]>(() => {\r\n        return [\r\n            {\r\n                name: 'name' as const,\r\n                sticky: true,\r\n            },\r\n        ]\r\n    }, [])\r\n\r\n    const columns: ResizeTableColumn[] = useTableColumns({\r\n        config: monitoringConfig?.configs?.TEAMS_COLUMN_CONFIGS,\r\n        extraColumns,\r\n        getColumnTitle,\r\n        sortingSettings,\r\n        setSortingSettings,\r\n        scrollEnabled,\r\n        collapsedGroupIds,\r\n    })\r\n\r\n    const stats = useMemo(() => {\r\n        return Object.values(teamsStats).map(item => ({...item, id: item.team_id || ''}))\r\n    }, [teamsStats])\r\n    const statsAllItem = useMemo(() => ({id: '', name: t.GLOBAL.all_teams()}), [t.GLOBAL])\r\n\r\n    const data = useTableData({\r\n        stats,\r\n        sortingSettings,\r\n        allItem: statsAllItem,\r\n    })\r\n\r\n    const selectedRows = useMemo(() => {\r\n        return [data.findIndex(({id}) => id === teamId)]\r\n    }, [data, teamId])\r\n\r\n    const renderItem = useItemRenderer()\r\n\r\n    const handleRowClick = useCallback((row: Record<string, unknown>) => {\r\n        const item = row as typeof data[number]\r\n        onTeamIdChange(item.id)\r\n    }, [onTeamIdChange])\r\n\r\n    const handleColumnsResize = useCallback((resizedColumns: Record<string, ResizeTableColumnWidth>) => {\r\n        resizeMonitoringColumns({table: 'teams', columns: resizedColumns, scrollEnabled: scrollEnabled})\r\n    }, [resizeMonitoringColumns, scrollEnabled])\r\n\r\n    const groups = useTableGroups({\r\n        groups: monitoringConfig?.additionalData.groups?.TEAMS_COLUMN_CONFIGS,\r\n        columns,\r\n        collapsedGroupIds,\r\n    })\r\n\r\n    useEffect(() => {\r\n        // set initial selected team row\r\n        // teamId can be an empty string\r\n        if (typeof teamId === 'undefined' && data.length) {\r\n            onTeamIdChange(data[0].id)\r\n        }\r\n        // do not track methods\r\n        // eslint-disable-next-line\r\n    }, [teamId, data])\r\n    const nonConfigurableMetrics = extraColumns.filter(c => c.sticky).map(c => c.name)\r\n\r\n    return (\r\n        <div>\r\n            <SectionHeader className=\"mb-2\">\r\n                <SectionTitle title={t.CAMPAIGN_MONITOR.campaignMonitor_teams_heading()} />\r\n                <TableActionsButton\r\n                    scrollingEnabled={scrollEnabled}\r\n                    table=\"teams\"\r\n                    handleChangeScrolling={toggleScroll}\r\n                    excludedMetrics={nonConfigurableMetrics}\r\n                />\r\n            </SectionHeader>\r\n            <ResizeTable\r\n                toggleCollapsedGroup={toggleCollapsedGroup}\r\n                groups={groups}\r\n                columns={columns}\r\n                data={data}\r\n                sortingSettings={sortingSettings}\r\n                selectedRows={selectedRows}\r\n                renderItem={renderItem}\r\n                onSortingChange={handleSortingChange}\r\n                onColumnsResize={handleColumnsResize}\r\n                onRowClick={handleRowClick}\r\n                isColumnResizable\r\n                isResizable\r\n                hasGrid\r\n                scrollEnabled={scrollEnabled}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useState} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useLocalStorageForState} from '@bpinc/ad-local-settings-context'\r\nimport type {TableType} from '@bpinc/ad-stats-state-types'\r\n\r\n\r\nexport type TableCollapsedGroupProps = {\r\n    collapsedGroupIds: CollapsedGroupsIds\r\n    toggleCollapsedGroup: ToggleCollapsedGroup\r\n}\r\n\r\ntype CollapsedGroupsIdsByTable = {\r\n    [K in TableType]: CollapsedGroupsIds\r\n}\r\n\r\ntype CollapsedGroupsIds = {\r\n    [groupId: string]: boolean\r\n}\r\n\r\ntype ToggleCollapsedGroup = (groupId: string) => void\r\n\r\nconst initialState: CollapsedGroupsIdsByTable = {\r\n    teams: {},\r\n    services: {},\r\n    users: {},\r\n}\r\n\r\nexport function useCollapsedTableGroupsIds() {\r\n    const [collapsedGroupIds, setCollapsedGroupIds] = useState<CollapsedGroupsIdsByTable>(initialState)\r\n\r\n    useLocalStorageForState(collapsedGroupIds, 'adSupervisionTablesCollapsedGroupIds', setCollapsedGroupIds, initialState)\r\n\r\n    const toggleCollapsedGroup = useCallback((table: TableType, groupId: string) => {\r\n        setCollapsedGroupIds(\r\n            produce(draft => {\r\n                draft[table][groupId] = !draft[table][groupId]\r\n            }),\r\n        )\r\n    }, [])\r\n\r\n    return {\r\n        collapsedGroupIds,\r\n        toggleCollapsedGroup,\r\n    }\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {IncomingUserItemStats} from '@bpinc/ad-transport-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {convertKVArray, toKVArray} from '@bpinc/lib-transport-conversion'\r\nimport type {ItemRendererType, ResizeTableColumn, TableItem} from '@bpinc/lib-ui-elements'\r\nimport {TableCell, TableRow} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface TableRowProps<Item = TableItem, Column = ResizeTableColumn> {\r\n    item: Item\r\n    columns: Column[]\r\n    rowHandlers?: React.HTMLAttributes<HTMLElement>\r\n    renderItem: (item: Item, column: Column) => ItemRendererType\r\n    isSelected?: boolean\r\n    stickyOffsets: Record<string, string>\r\n}\r\n\r\nconst RowWithInteractionSubrows: React.FC<TableRowProps> = React.memo(\r\n    ({item: user, columns, rowHandlers, renderItem, isSelected, stickyOffsets}) => {\r\n        const items = convertKVArray<IncomingUserItemStats>(user.items ?? {})\r\n        const subrows = items\r\n            /** Don't subrow active user */\r\n            .filter(item => item.item_id !== user.active_item_id)\r\n            .map(item => {\r\n                if (\r\n                    typeof item !== 'object' ||\r\n                !item ||\r\n                !('item_id' in item) ||\r\n                !(typeof item.item_id === 'string')\r\n                ) {\r\n                    throw new Error('Wrong type for item in interaction subrows')\r\n                }\r\n\r\n                return {\r\n                    ...user,\r\n                    items: clearIntentsForNonActiveItems(items, item.item_id),\r\n                    active_item_id: item.item_id,\r\n                    active_item_sentiment: 'sentiment' in item && item.sentiment,\r\n                    active_item_service_name: 'service_name' in item && item.service_name,\r\n                    active_item_party_name: 'party_name' in item && item.party_name,\r\n                    active_item_talk_duration: 'talk_duration' in item && item.talk_duration,\r\n                    active_item_hold_duration: 'hold_duration' in item && item.hold_duration,\r\n                    active_item_qm_is_recording: 'qm_is_recording' in item && item.qm_is_recording,\r\n                }\r\n            })\r\n\r\n        const interactionColumns = [\r\n            'custom:status',\r\n            'display_name',\r\n            'active_item_sentiment',\r\n            'active_item_talk_duration',\r\n            'active_item_party_name',\r\n            'active_item_service_name',\r\n            'active_item_hold_duration',\r\n            'active_item_qm_is_recording',\r\n            'last_alert',\r\n        ]\r\n        const isClickable = rowHandlers && 'onClick' in rowHandlers\r\n\r\n        return (\r\n            <>\r\n                <tr\r\n                    {...rowHandlers}\r\n                    tabIndex={0}\r\n                    data-element=\"supervision-table-row\"\r\n                    className={tcn({\r\n                        'cursor-pointer': isClickable,\r\n                    })}\r\n                >\r\n                    {columns.map((c, columnIndex) => {\r\n                        const {value, meta} = renderItem({\r\n                            ...user,\r\n                            items: subrows.length > 0 && typeof user.active_item_id === 'string'\r\n                                ? clearIntentsForNonActiveItems(items, user.active_item_id)\r\n                                : user.items,\r\n                        }, c)\r\n                        const cellClassName = tcn(c.className, {\r\n                            //!important is intended\r\n                            '!sticky left-0 z-[1]': c.sticky,\r\n                            'bg-table-selected-row-bg': isSelected,\r\n                            'bg-main-bg': !isSelected,\r\n                        })\r\n                        const offsetStyle = stickyOffsets[c.name] ? {left: `calc(${stickyOffsets[c.name]})`} : {}\r\n\r\n                        return (\r\n                            <td\r\n                                key={`${String(c.name)}-${columnIndex}`}\r\n                                className={cellClassName}\r\n                                style={offsetStyle}\r\n                            >\r\n                                <TableCell style={meta} align={c.align}>{value}</TableCell>\r\n                            </td>\r\n                        )\r\n                    })}\r\n\r\n                    <td\r\n                        key=\"mock\"\r\n                        className={tcn({\r\n                            'bg-table-selected-row-bg': isSelected,\r\n                        })}\r\n                    />\r\n                </tr>\r\n                {subrows.length != 0 && subrows.map(newRowItem => (\r\n                    <tr key={newRowItem.active_item_id}>\r\n                        {columns.map((c, columnIndex) => {\r\n                            const cellClassName = tcn('bg-main-bg', c.className, {\r\n                                'opacity-60 [&>div]:pl-4': c.name === 'display_name',\r\n                                '!sticky left-0 z-[1]': c.sticky,\r\n                            })\r\n                            const offsetStyle = stickyOffsets[c.name] ? {left: `calc(${stickyOffsets[c.name]})`} : {}\r\n\r\n                            return (\r\n                                <td\r\n                                    key={`${String(\r\n                                        c.name,\r\n                                    )}-${columnIndex}`}\r\n                                    className={cellClassName}\r\n                                    style={offsetStyle}\r\n                                >\r\n                                    <TableCell align={c.align}>\r\n                                        {interactionColumns.includes(\r\n                                            c.name,\r\n                                        )\r\n                                            ? renderItem(newRowItem, c)\r\n                                            : null}\r\n                                    </TableCell>\r\n                                </td>\r\n                            )\r\n                        })}\r\n                        <td\r\n                            key=\"mock\"\r\n                        />\r\n                    </tr>\r\n                ))}\r\n            </>\r\n        )\r\n    },\r\n)\r\n\r\nexport const useRenderCustomTableRow = (openedIds: string[]) => {\r\n    return useCallback(\r\n        ({item, ...rest}: TableRowProps) => {\r\n            if (typeof item.user_id === 'string' && openedIds.includes(item.user_id)) {\r\n                return <RowWithInteractionSubrows item={item} {...rest} />\r\n            } else {\r\n                return <TableRow item={item} {...rest} />\r\n            }\r\n        },\r\n        [openedIds],\r\n    )\r\n}\r\n\r\n/**\r\n * Clear intents for not active item in multiline mode\r\n */\r\nconst clearIntentsForNonActiveItems = (items: IncomingUserItemStats[], activeId: string | undefined) => {\r\n    return toKVArray(items.map(i => {\r\n        return {\r\n            ...i,\r\n            intents: i.item_id === activeId ? i.intents : undefined,\r\n        }\r\n    }))\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\nimport type {Draft} from 'immer'\r\nimport produce from 'immer'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {UIStateContextValue} from '@bpinc/ad-state-context-factory'\r\nimport {createUIStateHooks} from '@bpinc/ad-state-context-factory'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\n\r\ntype UsersTableContextState = {\r\n    selectedUserIds: string[]\r\n    isEditing: boolean\r\n    search: string\r\n}\r\n\r\nlet UsersTableContext: Context<UIStateContextValue<UsersTableContextState>>\r\n\r\n\r\nconst initialState = {\r\n    selectedUserIds: [],\r\n    isEditing: false,\r\n    search: '',\r\n    liveStatsEnabledTime: {},\r\n}\r\n\r\nexport const UsersTableContextProvider: FCWithChildren<ReactElement> = ({\r\n    children,\r\n}) => {\r\n    const [state, setState] = useState<UsersTableContextState>(initialState)\r\n\r\n    const stateRef = useAsRef(state)\r\n\r\n    const produceState = useCallback((stateUpdate: (draft: Draft<UsersTableContextState>) => void) => {\r\n        const newState = produce(stateRef.current, stateUpdate)\r\n        stateRef.current = newState\r\n        setState(s => ({...s, ...newState}))\r\n    },\r\n    [stateRef],\r\n    )\r\n\r\n    const value = useMemo((): UIStateContextValue<UsersTableContextState> => ({\r\n        state,\r\n        produceState,\r\n        stateRef,\r\n    }),\r\n    [state, produceState, stateRef],\r\n    )\r\n\r\n    if (!UsersTableContext) {\r\n        UsersTableContext = createContext<UIStateContextValue<UsersTableContextState>>(value)\r\n        UsersTableContext.displayName = 'UsersTableContext'\r\n    }\r\n\r\n    return (\r\n        <UsersTableContext.Provider value={value}>\r\n            {children}\r\n        </UsersTableContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {\r\n    useUsersTableContext,\r\n    useUsersTableContextProducer,\r\n} = createUIStateHooks<UsersTableContextState, 'UsersTableContext'>(\r\n    'UsersTableContext',\r\n    () => UsersTableContext,\r\n)\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useRef} from 'react'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {IconFilterFunnel} from '@bpinc/lib-icons'\r\nimport {Button, LinkLikeButton, Popup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useUsersTableContext, useUsersTableContextProducer} from '../UsersTableContext'\r\n\r\n\r\nexport const SubteamFilterButton: FC = () => {\r\n    const {selectedUserIds, isEditing} = useUsersTableContext(['selectedUserIds', 'isEditing'])\r\n\r\n    const produceUsersTableContext = useUsersTableContextProducer()\r\n    const {t} = useLocalizationState()\r\n\r\n    const showSubteamsOnly = useStatsState(s => s.monitoringConfig?.localData.showSubTeamOnly)\r\n    const selectedSubTeamUserIds = useStatsState(s => s.monitoringConfig?.additionalData.selectedSubTeamUserIds)\r\n\r\n    const {setShowSubTeamOnly, updateSelectedSubTeamUserIds} = useStatsStateMethods()\r\n    const turnOnSubteamsOnlyOnEditingEnd = useRef(false)\r\n\r\n    const onEditingStart = useCallback(async () => {\r\n        if (showSubteamsOnly) {\r\n            setShowSubTeamOnly(false)\r\n            turnOnSubteamsOnlyOnEditingEnd.current = true\r\n        }\r\n\r\n        produceUsersTableContext(draft => {\r\n            draft.selectedUserIds = selectedSubTeamUserIds ?? []\r\n            draft.isEditing = true\r\n        })\r\n    }, [produceUsersTableContext, selectedSubTeamUserIds, setShowSubTeamOnly, showSubteamsOnly])\r\n\r\n    const toggleSubTeamsOnlyOnEditingEnd = useCallback(() => {\r\n        if (turnOnSubteamsOnlyOnEditingEnd.current) {\r\n            setShowSubTeamOnly(true)\r\n            turnOnSubteamsOnlyOnEditingEnd.current = false\r\n        }\r\n    }, [setShowSubTeamOnly])\r\n\r\n    const onEditingCancel = useCallback(async () => {\r\n        produceUsersTableContext(draft => {\r\n            draft.isEditing = false\r\n            draft.selectedUserIds = selectedSubTeamUserIds ?? []\r\n        })\r\n\r\n        toggleSubTeamsOnlyOnEditingEnd()\r\n    }, [produceUsersTableContext, selectedSubTeamUserIds, toggleSubTeamsOnlyOnEditingEnd])\r\n\r\n    const onEditingConfirm = useCallback(() => {\r\n        updateSelectedSubTeamUserIds(selectedUserIds)\r\n\r\n        produceUsersTableContext(draft => {\r\n            draft.isEditing = false\r\n        })\r\n\r\n        toggleSubTeamsOnlyOnEditingEnd()\r\n    }, [produceUsersTableContext, selectedUserIds, toggleSubTeamsOnlyOnEditingEnd, updateSelectedSubTeamUserIds])\r\n\r\n    return (\r\n        <Popup\r\n            show={isEditing}\r\n            onClick={onEditingStart}\r\n            placement=\"top-end\"\r\n            contentClassName=\"!flex flex-col gap-4 rounded\"\r\n            content={\r\n                <>\r\n                    <div className=\"text-xs font-bold text-info\">\r\n                        {t.SUPERVISION_PAGE.monitoring_subTeam_editMode_popupHeader()}\r\n                    </div>\r\n                    <div>\r\n                        {t.SUPERVISION_PAGE.monitoring_subTeam_editMode_popupText()}\r\n                    </div>\r\n                    <div className=\"flex justify-end gap-6\">\r\n                        <LinkLikeButton\r\n                            className=\"text-info\"\r\n                            onClick={onEditingCancel}\r\n                        >\r\n                            {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                        </LinkLikeButton>\r\n                        <LinkLikeButton onClick={onEditingConfirm}>\r\n                            {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                        </LinkLikeButton>\r\n                    </div>\r\n                </>\r\n            }\r\n        >\r\n            <Button className=\"group mr-2\">\r\n                <IconFilterFunnel className=\"group-hover:[&_path]:fill-primary-hover\" />\r\n            </Button>\r\n        </Popup>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {unary} from 'lodash-es'\r\n\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useUsersTableContext} from '../UsersTableContext'\r\nimport {SubteamFilterButton} from './SubteamFilterButton'\r\n\r\n\r\ntype UsersTableControlsProps = {\r\n    allRowsAreFilteredOut: boolean\r\n}\r\n\r\nexport const UsersTableControls: React.FC<UsersTableControlsProps> = ({allRowsAreFilteredOut}) => {\r\n    const {t} = useLocalizationState()\r\n    const monitoringConfig = useStatsState('monitoringConfig')\r\n    const {setIncludeLoggedOut, setShowSubTeamOnly} = useStatsStateMethods()\r\n    const isEditing = useUsersTableContext('isEditing')\r\n\r\n    const {includeLoggedOut = false, showSubTeamOnly = false} = monitoringConfig?.localData ?? {}\r\n    const atLeastOneUserIsSelected = !!monitoringConfig?.additionalData.selectedSubTeamUserIds?.length\r\n\r\n    useEffect(() => {\r\n        if (allRowsAreFilteredOut || !atLeastOneUserIsSelected) {\r\n            setShowSubTeamOnly(false)\r\n        }\r\n    }, [allRowsAreFilteredOut, setShowSubTeamOnly, atLeastOneUserIsSelected])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex shrink-0 items-center\">\r\n                <SubteamFilterButton />\r\n                <Checkbox\r\n                    toggle\r\n                    checked={showSubTeamOnly}\r\n                    disabled={isEditing || allRowsAreFilteredOut || !atLeastOneUserIsSelected}\r\n                    onChange={unary(setShowSubTeamOnly)}\r\n                    label={t.SUPERVISION_PAGE.users_table_my_subteam_only_label()}\r\n                    labelClassName=\"pt-0\"\r\n                />\r\n            </div>\r\n            <Checkbox\r\n                toggle\r\n                checked={includeLoggedOut}\r\n                onChange={unary(setIncludeLoggedOut)}\r\n                label={t.SUPERVISION_PAGE.users_table_logged_out_users_label()}\r\n                labelClassName=\"pt-0\"\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {SUPERVISION_USERS_TABLE} from '@bpinc/ad-main-page-ui-context'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport type {MonitoringUser} from '@bpinc/ad-stats-state-types'\r\nimport {useSupervisionUIContext, useSupervisionUIContextProducer} from '@bpinc/ad-supervision-ui-context'\r\nimport {AgentStatusIcon} from '@bpinc/lib-agent-state-ui'\r\nimport {combineFilters} from '@bpinc/lib-helpers'\r\nimport {useLocalizedStatNames} from '@bpinc/lib-helpers-ui'\r\nimport {IconInteraction} from '@bpinc/lib-icons'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {ResizeTableColumn, ResizeTableColumnWidth} from '@bpinc/lib-ui-elements'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    ResizeTable,\r\n    SearchInput,\r\n    useSorting,\r\n} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    useAgentStateInfo,\r\n    useItemRenderer,\r\n    useTableColumns,\r\n    useTableData,\r\n    useTeamName,\r\n} from '../hooks'\r\nimport {useRenderCustomTableRow} from '../hooks/useRenderCustomTableRow'\r\nimport {useTableGroups} from '../hooks/useTableGroups'\r\nimport {SectionHeader} from '../SectionHeader'\r\nimport {SectionTitle} from '../SectionTitle'\r\nimport {TableActionsButton} from '../TableActionsButton'\r\nimport type {TableCollapsedGroupProps} from '../useCollapsedTableGroupsIds'\r\nimport {useOnlySubteamFilter} from './useOnlySubteamFilter'\r\nimport {useUsersTableContext, useUsersTableContextProducer} from './UsersTableContext'\r\nimport {UsersTableControls} from './UsersTableControls'\r\nimport {useSearch} from './useSearch'\r\n\r\n\r\ninterface UsersTableProps extends TableCollapsedGroupProps {\r\n    teamId: string\r\n}\r\n\r\nexport const UsersTable: React.FC<UsersTableProps> = ({teamId, collapsedGroupIds, toggleCollapsedGroup}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        monitoringConfig,\r\n        monitoringTeamStats: {users},\r\n    } = useStatsState(['monitoringConfig', 'monitoringTeamStats'])\r\n    const {resizeMonitoringColumns, updateScrollingState} = useStatsStateMethods()\r\n    const selectedTeamName = useTeamName(teamId)\r\n    const titlesForColumn = useLocalizedStatNames()\r\n    const {selectedUserIds, isEditing} = useUsersTableContext(['selectedUserIds', 'isEditing'])\r\n    const produceUsersTableContext = useUsersTableContextProducer()\r\n    const produceSupervisionUIContext = useSupervisionUIContextProducer()\r\n\r\n    const {getAgentStateIconsProps} = useAgentStateInfo()\r\n    const scrollEnabled = monitoringConfig?.additionalData.scrolling?.['users'] !== false\r\n\r\n    const toggleScroll = useCallback(() => {\r\n        updateScrollingState({table: 'users', scrollingEnabled: !scrollEnabled})\r\n    }, [scrollEnabled, updateScrollingState])\r\n    const qmUserId = useSupervisionUIContext('qmUserId')\r\n\r\n    const [openedInteractionsColumnsIds, setOpenedInteractionsColumnsIds] = useState<string[]>([])\r\n\r\n    const openInteractionsSubrows = useCallback((userId: string) => {\r\n        setOpenedInteractionsColumnsIds([...openedInteractionsColumnsIds, userId])\r\n    }, [openedInteractionsColumnsIds])\r\n\r\n    const closeInteractionsSubrows = useCallback((userId: string) => {\r\n        setOpenedInteractionsColumnsIds(openedInteractionsColumnsIds.filter(id => id !== userId))\r\n    }, [openedInteractionsColumnsIds])\r\n\r\n    const getColumnTitle = useCallback(\r\n        (column: string) => {\r\n            if (column === 'display_name') {\r\n                return t.MONITORING_AGENTS_COLUMN_NAMES.monitoring_column_name()\r\n            }\r\n            return (titlesForColumn[column] || [''])[0]\r\n        },\r\n        [t.MONITORING_AGENTS_COLUMN_NAMES, titlesForColumn],\r\n    )\r\n\r\n    const {sortingSettings, setSortingSettings, handleSortingChange} = useSorting()\r\n\r\n    const extraColumns = useMemo<ResizeTableColumn[]>(() => {\r\n        return [\r\n            {\r\n                name: 'custom:checkbox' as const,\r\n                width: '32px',\r\n                hidden: !isEditing,\r\n                resizable: false,\r\n                sticky: true,\r\n                align: 'start',\r\n                className: '[&>*]:px-1',\r\n                headerClassName: '[&>*]:px-1',\r\n            },\r\n            {\r\n                name: 'custom:interactions' as const,\r\n                width: '28px',\r\n                hidden: false,\r\n                resizable: false,\r\n                sticky: true,\r\n                align: 'start',\r\n                className: '[&>*]:px-0.5',\r\n                headerClassName: '[&>*]:px-1',\r\n            },\r\n            {\r\n                name: 'custom:status' as const,\r\n                width: '60px',\r\n                title: t.SUPERVISION_PAGE.users_table_status_column(),\r\n                resizable: false,\r\n                sticky: true,\r\n                align: 'start',\r\n                className: '!align-middle [&>*]:px-1',\r\n            },\r\n            {\r\n                name: 'display_name' as const,\r\n                sticky: true,\r\n            },\r\n            {\r\n                name: 'state_duration' as const,\r\n                sticky: true,\r\n            },\r\n            {\r\n                name: 'active_item_sentiment' as const,\r\n                width: '70px',\r\n                resizable: false,\r\n                sticky: true,\r\n                align: 'start',\r\n                className: '[&>*>*]:w-full !align-middle',\r\n            },\r\n            {\r\n                name: 'active_item_talk_duration' as const,\r\n                title: undefined,\r\n                width: undefined,\r\n                sticky: true,\r\n            },\r\n        ]\r\n    }, [isEditing, t.SUPERVISION_PAGE])\r\n\r\n    const columns: ResizeTableColumn[] = useTableColumns({\r\n        config: monitoringConfig?.configs?.USERS_COLUMN_CONFIGS,\r\n        extraColumns,\r\n        getColumnTitle,\r\n        sortingSettings,\r\n        setSortingSettings,\r\n        scrollEnabled,\r\n        collapsedGroupIds,\r\n    })\r\n\r\n    const stats = useMemo(() => {\r\n        return Object.values(users).map(item => ({\r\n            ...item,\r\n            id: item.user_id || '',\r\n        }))\r\n    }, [users])\r\n\r\n    const onlySubteamFilter = useOnlySubteamFilter()\r\n\r\n    const handleUserCheckboxClick = useCallback((e: React.MouseEvent) => {\r\n        e.stopPropagation()\r\n    }, [])\r\n\r\n    const handleUserSelectChange = useCallback(\r\n        (checked: boolean, userId: string | undefined) => {\r\n            if (!userId || !isEditing) {\r\n                return\r\n            }\r\n\r\n            if (checked) {\r\n                if (selectedUserIds.includes(userId)) {\r\n                    return\r\n                }\r\n\r\n                produceUsersTableContext(draft => {\r\n                    draft.selectedUserIds.push(userId)\r\n                })\r\n            } else {\r\n                if (!selectedUserIds.includes(userId)) {\r\n                    return\r\n                }\r\n                produceUsersTableContext(draft => {\r\n                    draft.selectedUserIds = selectedUserIds.filter(\r\n                        id => id !== userId,\r\n                    )\r\n                })\r\n            }\r\n        },\r\n        [produceUsersTableContext, selectedUserIds, isEditing],\r\n    )\r\n\r\n    const customRenderer = useCallback(\r\n        (user: MonitoringUser, column: ResizeTableColumn) => {\r\n            const name = column.name as typeof extraColumns[number]['name']\r\n            switch (name) {\r\n                case 'custom:checkbox': {\r\n                    const checked =\r\n                        !!user.user_id &&\r\n                        selectedUserIds?.includes(user.user_id)\r\n                    return (\r\n                        <Checkbox\r\n                            checked={checked}\r\n                            name={user.user_id}\r\n                            onChange={handleUserSelectChange}\r\n                            onClick={handleUserCheckboxClick}\r\n                        />\r\n                    )\r\n                }\r\n                case 'custom:status': {\r\n                    const [currentStatusProps, nextStatusProps] = getAgentStateIconsProps(user)\r\n                    return (\r\n                        <div className=\"flex gap-1\">\r\n                            <AgentStatusIcon\r\n                                isLoggedOut={user.is_logged === '0'}\r\n                                {...currentStatusProps}\r\n                                className=\"!h-5 !w-5\"\r\n                            />\r\n                            {nextStatusProps && (\r\n                                <AgentStatusIcon\r\n                                    {...nextStatusProps}\r\n                                    className=\"!h-5 !w-5\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    )\r\n                }\r\n                case 'custom:interactions': {\r\n                    const interactionsCount = Object.keys(user?.items || {}).length || 0\r\n                    const userId = user.user_id\r\n\r\n                    assertDefined(userId)\r\n\r\n                    if (interactionsCount <= 1) {\r\n                        return\r\n                    }\r\n\r\n                    const opened = openedInteractionsColumnsIds.includes(userId)\r\n                    return (\r\n                        <div className=\"flex h-5 gap-1 truncate\">\r\n                            <Button\r\n                                className=\"[&>i]:m-0 [&>i]:w-2\"\r\n                                semanticIcon={opened ? 'caret up' : 'caret down'}\r\n                                onClick={e => {\r\n                                    if (opened) {\r\n                                        closeInteractionsSubrows(userId)\r\n                                    } else {\r\n                                        openInteractionsSubrows(userId)\r\n                                    }\r\n                                    e.stopPropagation()\r\n                                }}\r\n                            />\r\n                            <span>{interactionsCount}</span>\r\n                        </div>\r\n                    )\r\n                }\r\n                default: {\r\n                    return ((_x: string) => null)(name)\r\n                }\r\n            }\r\n        },\r\n        [\r\n            selectedUserIds,\r\n            handleUserSelectChange,\r\n            handleUserCheckboxClick,\r\n            getAgentStateIconsProps,\r\n            openInteractionsSubrows,\r\n            closeInteractionsSubrows,\r\n            openedInteractionsColumnsIds,\r\n        ],\r\n    )\r\n\r\n    const search = useUsersTableContext('search')\r\n\r\n    const renderItem = useItemRenderer({\r\n        customRenderer,\r\n        search,\r\n    })\r\n\r\n    const {searchFilter, handleSearch, resetSearch} = useSearch(columns)\r\n\r\n    const data = useTableData({\r\n        stats,\r\n        sortingSettings,\r\n        filter: combineFilters([onlySubteamFilter, searchFilter]),\r\n    })\r\n\r\n    const allSelected = useMemo(() => data.every(elem => selectedUserIds.includes(elem.id)), [data, selectedUserIds])\r\n\r\n    const handleAllUserSelectChange = useCallback(\r\n        (checked: boolean) => {\r\n            const usersIds = data.map(({id}) => id)\r\n            if (checked) {\r\n                produceUsersTableContext(draft => {\r\n                    draft.selectedUserIds = [...new Set([...draft.selectedUserIds, ...usersIds])]\r\n                })\r\n            } else {\r\n                produceUsersTableContext(draft => {\r\n                    draft.selectedUserIds = draft.selectedUserIds.filter(\r\n                        id => !usersIds.includes(id),\r\n                    )\r\n                })\r\n            }\r\n        },\r\n        [data, produceUsersTableContext],\r\n    )\r\n\r\n    const renderHeaderItem = useCallback((columnData: ResizeTableColumn) => {\r\n        if (columnData.name === 'custom:checkbox') {\r\n            return (\r\n                <Checkbox\r\n                    checked={allSelected}\r\n                    onChange={handleAllUserSelectChange}\r\n                    onClick={handleUserCheckboxClick}\r\n                />\r\n            )\r\n        } else if (columnData.name === 'custom:interactions') {\r\n            return (\r\n                <IconInteraction className=\"mt-1\" />\r\n            )\r\n        }\r\n\r\n        return columnData.title\r\n    }, [allSelected, handleAllUserSelectChange, handleUserCheckboxClick])\r\n\r\n\r\n    const allRowsAreFilteredOut = stats.length > 0 && data.length === 0\r\n    const selectedRows = useMemo(() => [data.findIndex(d => d.id === qmUserId)], [data, qmUserId])\r\n\r\n    const handleRowClick = useCallback(\r\n        ({user_id: userId}: MonitoringUser) => {\r\n            if (!userId) {\r\n                return\r\n            }\r\n\r\n            produceSupervisionUIContext(draft => {\r\n                draft.qmUserId = userId\r\n            })\r\n        },\r\n        [produceSupervisionUIContext],\r\n    )\r\n\r\n    const handleColumnsResize = useCallback(\r\n        (resizedColumns: Record<string, ResizeTableColumnWidth>) => {\r\n            resizeMonitoringColumns({\r\n                table: 'users',\r\n                columns: resizedColumns,\r\n                scrollEnabled: scrollEnabled,\r\n            })\r\n        },\r\n        [resizeMonitoringColumns, scrollEnabled],\r\n    )\r\n\r\n    const renderCustomRow = useRenderCustomTableRow(openedInteractionsColumnsIds)\r\n\r\n    const groups = useTableGroups({\r\n        groups: monitoringConfig?.additionalData.groups?.USERS_COLUMN_CONFIGS,\r\n        columns,\r\n        collapsedGroupIds,\r\n    })\r\n    const nonConfigurableMetrics = extraColumns.filter(c => c.sticky).map(c => c.name)\r\n\r\n    return (\r\n        <div className=\"mt-1 flex min-h-40 flex-auto flex-col overflow-hidden\">\r\n            <SectionHeader className=\"mb-4 gap-6\">\r\n                <SectionTitle title={t.MONITORING_LABEL.monitoring_label_agents(selectedTeamName)} />\r\n                <div className=\"flex flex-1 items-center justify-end gap-6\">\r\n                    <SearchInput\r\n                        value={search}\r\n                        onChange={handleSearch}\r\n                        placeholder={t.SUPERVISION_PAGE.search_agents()}\r\n                        onClear={resetSearch}\r\n                        clearable\r\n                        className=\"basis-[260px]\"\r\n                    />\r\n                    <UsersTableControls allRowsAreFilteredOut={allRowsAreFilteredOut} />\r\n                    <TableActionsButton\r\n                        scrollingEnabled={scrollEnabled}\r\n                        table=\"users\"\r\n                        handleChangeScrolling={toggleScroll}\r\n                        excludedMetrics={nonConfigurableMetrics}\r\n                    />\r\n                </div>\r\n            </SectionHeader>\r\n            <ResizeTable\r\n                toggleCollapsedGroup={toggleCollapsedGroup}\r\n                renderCustomRow={renderCustomRow}\r\n                renderHeaderItem={renderHeaderItem}\r\n                className={SUPERVISION_USERS_TABLE.toString()}\r\n                columns={columns}\r\n                groups={groups}\r\n                data={data}\r\n                sortingSettings={sortingSettings}\r\n                renderItem={renderItem}\r\n                onSortingChange={handleSortingChange}\r\n                onColumnsResize={handleColumnsResize}\r\n                onRowClick={isEditing ? undefined : handleRowClick}\r\n                isColumnResizable={!isEditing}\r\n                hasGrid\r\n                scrollEnabled={scrollEnabled}\r\n                selectedRows={selectedRows}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\n\r\nimport type {DataItem} from '../hooks'\r\n\r\n\r\nexport function useOnlySubteamFilter() {\r\n    const showOnlySubteam = useStatsState(s => s.monitoringConfig?.localData.showSubTeamOnly)\r\n    const selectedSubTeamUserIds = useStatsState(s => s.monitoringConfig?.additionalData.selectedSubTeamUserIds)\r\n\r\n    return useCallback(\r\n        (item: DataItem) => {\r\n            if (!showOnlySubteam || !selectedSubTeamUserIds) {\r\n                return true\r\n            }\r\n            return selectedSubTeamUserIds.includes(item.id)\r\n        },\r\n        [selectedSubTeamUserIds, showOnlySubteam],\r\n    )\r\n\r\n}\r\n","import type {ChangeEvent} from 'react'\r\nimport {useCallback, useDeferredValue} from 'react'\r\n\r\nimport type {ResizeTableColumn} from '@bpinc/lib-ui-elements'\r\n\r\nimport {type DataItem, useItemRenderer} from '../hooks'\r\nimport {useUsersTableContext, useUsersTableContextProducer} from './UsersTableContext'\r\n\r\n\r\nexport function useSearch(\r\n    columns: ResizeTableColumn[],\r\n) {\r\n    const search = useUsersTableContext('search')\r\n    const produceUsersTableContext = useUsersTableContextProducer()\r\n\r\n    const handleSearch = useCallback(\r\n        (evt: ChangeEvent<HTMLInputElement>) => {\r\n            produceUsersTableContext(draft => {\r\n                draft.search = evt.target.value\r\n            })\r\n        },\r\n        [produceUsersTableContext],\r\n    )\r\n\r\n    const resetSearch = useCallback(() => {\r\n        produceUsersTableContext(draft => {\r\n            draft.search = ''\r\n        })\r\n    }, [produceUsersTableContext])\r\n\r\n    const renderItem = useItemRenderer()\r\n\r\n    const deferredSearch = useDeferredValue(search)\r\n\r\n    const searchFilter = useCallback(\r\n        (item: DataItem) => {\r\n            if (!deferredSearch) {\r\n                return true\r\n            }\r\n\r\n            return columns.some(column => {\r\n                const {value: columnContent} = renderItem(item, column)\r\n\r\n                if (typeof columnContent !== 'string') {\r\n                    return false\r\n                }\r\n\r\n                return columnContent\r\n                    .toLowerCase()\r\n                    .includes(deferredSearch.toLowerCase())\r\n            })\r\n        },\r\n        [columns, renderItem, deferredSearch],\r\n    )\r\n\r\n    return {\r\n        handleSearch,\r\n        resetSearch,\r\n        searchFilter,\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useQmMonitorModalOpener} from './hooks/useQmMonitorModalOpener'\r\nimport {ServicesTable} from './ServicesTable'\r\nimport {SupervisionPageHeader} from './SupervisionPageHeader'\r\nimport {TeamsTable} from './TeamsTable'\r\nimport {useCollapsedTableGroupsIds} from './useCollapsedTableGroupsIds'\r\nimport {UsersTable, UsersTableContextProvider} from './UsersTable'\r\n\r\n\r\nexport const SupervisionPage: React.FC = () => {\r\n    const monitoringConfig = useStatsState('monitoringConfig')\r\n    const {privileges} = useSessionState()\r\n    const {setSelectedTeamId} = useStatsStateMethods()\r\n\r\n    const selectedTeamId = monitoringConfig?.localData.selectedTeamId\r\n\r\n    useQmMonitorModalOpener()\r\n    const {collapsedGroupIds, toggleCollapsedGroup} = useCollapsedTableGroupsIds()\r\n    return (\r\n        <>\r\n            <SupervisionPageHeader />\r\n            <div className=\"flex grow flex-col overflow-y-auto px-6 py-2\" data-testid=\"supervision-page\" >\r\n                {\r\n                    !monitoringConfig\r\n                        ? <Loader size=\"huge\" color=\"primary\" active />\r\n                        : (\r\n                            <>\r\n                                {privileges.SYS_VIEW_QUEUE_STATUS && (\r\n                                    <>\r\n                                        <TeamsTable\r\n                                            teamId={selectedTeamId}\r\n                                            onTeamIdChange={setSelectedTeamId}\r\n                                            collapsedGroupIds={collapsedGroupIds.teams}\r\n                                            toggleCollapsedGroup={partial(\r\n                                                toggleCollapsedGroup,\r\n                                                'teams',\r\n                                            )}\r\n                                        />\r\n                                        {typeof selectedTeamId !== 'undefined' && (\r\n                                            <ServicesTable\r\n                                                collapsedGroupIds={collapsedGroupIds.services}\r\n                                                toggleCollapsedGroup={partial(\r\n                                                    toggleCollapsedGroup,\r\n                                                    'services',\r\n                                                )}\r\n                                                teamId={selectedTeamId}\r\n                                            />\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                                {privileges.SYS_VIEW_LIST_OF_AGENTS && typeof selectedTeamId !== 'undefined' && (\r\n                                    <UsersTableContextProvider>\r\n                                        <UsersTable\r\n                                            collapsedGroupIds={collapsedGroupIds.users}\r\n                                            toggleCollapsedGroup={partial(\r\n                                                toggleCollapsedGroup,\r\n                                                'users',\r\n                                            )}\r\n                                            teamId={selectedTeamId}\r\n                                        />\r\n                                    </UsersTableContextProvider>\r\n                                )}\r\n                            </>\r\n                        )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n"],"names":["useMonitoringModes","userId","itemId","monitoredItem","useInteractionStateMethods","qmStartCall","disconnectItem","useSessionState","privileges","phoneNumber","useInteractionStateSelector","state","items","find","inItem","scenarioData","qmMonitoredItemId","mode","qmMonitorMode","isSelf","currentUserId","extension","disabled","SYS_MONITOR_INTERACTIONS","handleStart","useCallback","startMode","id","monitor","useMemo","start","whisper","participate","ExtendedMonitoring","useLocalizationState","t","keepMonitoredUsers","useStatsState","useStatsStateMethods","addKeepMonitoringUser","removeKeepMonitoringUser","selfUserId","isMonitoring","some","handleMonitoringChange","checked","Checkbox","onChange","className","label","SUPERVISION_PAGE","quality_management_monitor_keep_monitoring","PullScreenButton","pullAgentScreen","handlePullScreenClick","assertDefined","interactionId","onKeyPressPullScreenHandler","useOnKeyPressHandler","SemanticButton","onClick","onKeyDown","tooltip","CALL_DETAILS_FORM","interaction_pullScreen_tooltip","basic","icon","IconScreenPull","SeeScreenButton","openInfoModal","useOpenInfoModal","bpClientVersion","useBpClientState","seeAgentScreen","handleSeeScreenClick","body","interaction_seeScreen_helper_required_message","onKeyPressSeeScreenHandler","interaction_seeScreen_tooltip","IconScreenSee","AgentSupervisorControls","onKeyPressMonitorStartHandler","onKeyPressWhisperStartHandler","onKeyPressParticipateStartHandler","div","SmMenu","compact","size","as","active","title","quality_management_monitor_button","quality_management_monitor_menu_coach","quality_management_monitor_menu_barge_in","MonitoringUserAvatar","user","getAvatarUrl","useGetAvatarUrl","SmPlaceholder","onlineStatus","getUserStatusIcon","isOnline","presenceState","avatarUrl","AvatarLegacy","url","firstName","lastName","online","type","PanelActions","onClose","produceSupervisionUIContext","useSupervisionUIContextProducer","useSupervisionUIContext","qmViewType","qmWidth","qmFloatingState","mainContentNode","qmModalClose","canPin","useCanPin","floatingState","floatingSize","contentMinWidth","MAIN_CONTENT_MIN_WIDTH","switchQmViewMode","draft","handleDockedClick","handleFloatingClick","handleOverlayClick","useEffect","viewType","onKeyPressOverlayHandler","onKeyPressDockedHandler","onKeyPressFloatingHandler","onKeyPressCloseHandler","transparent","tabIndex","IconUnpin","IconPin","IconPanelSide","IconPanelFloating","IconClose","CallButton","onActionStart","initiateCall","useServiceState","selectedService","serviceRequiredForOutboundCall","useServicesDispositionsState","useDIDNumberState","selectedDIDNumber","handleCallClick","ERROR_MESSAGES","service_is_required_for_outbound_call_message","phone","serviceId","accessNumberId","onKeyPressCallHandler","GLOBAL","call","IconCallStroke","ChangeAgentStateButton","setAgentState","logoutAgent","useModalsStateMethods","openModal","useBoolean","value","toggle","acdState","isLogged","options","truthy","children","MONITORING_CONFIRMATIONS","agentForceReady_title","toggleShow","agentForceReady_confirm_heading","agentForceReady_confirm_msg","actions","ok","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonOk","action","cancel","window_buttonCancel","undefined","agentForceLogout_title","agentForceLogout_confirm_heading","agentForceLogout_confirm_msg","PopupButton","show","agentForceButton_tooltip","SYS_FORCE_STATE_OF_OTHER_AGENTS","IconCheckCircle","ChatButton","createPotentialItem","handleChatClick","assertTrue","onKeyPressChatHandler","chat","IconChatStroke","OpenCalendarButton","goTo","useNavigationState","handleCalendarClick","AppRoutes","onKeyPressCalendarHandler","CALENDAR","calendar_button_tooltip","IconCalendar","PersonalQueueButton","handleEmailClick","onKeyPressEmailHandler","EMAIL","emailPersonalQueue_header","IconCaseQueue","UserActions","activeItemId","useAgentStateInfo","agentStateOptions","useAgentStateOptions","selectAgentStateOption","createAgentStateOptionSelector","getAgentStateOption","reason","isAcdState","notReadyReason","getAgentStateIconsProps","item","getMonitoringUserActiveItem","mediaType","media_type","direction","agentStatusOption","acd_state","reservedItem","convertKVArray","i","showNextState","Boolean","item_id","busyMediaType","isMediaType","isItemDirection","acd_next_state","next_reason","getAgentStateTitle","is_logged","option","localizeId","AGENT_STATE_CONTROL","useGetGroupName","i18n","group","customName","users_table_group_state","users_table_group_states_daily","users_table_group_out_daily","users_table_group_in_daily","users_table_group_in_email_daily","users_table_group_surveys_daily","users_table_group_records_daily","users_table_group_remainders","LastIntentAlert","lastIntent","allUserIntents","intents","Object","keys","intentAlerts","filter","intentAlert","closed","user_id","userIntent","includes","intentId","Popup","hoverable","placement","content","role","agentName","customerName","timeFromNow","timestamp","IconAlert","LiveStatTimer","row","column","renderValue","Error","statData","name","statValue","liveStat","useLiveStatTimer","useItemRenderer","customRenderer","search","useFormatting","formatFullName","deferredSearch","useDeferredValue","thresholds","systemThresholds","finalThresholds","config","getColorsByThreshold","statName","shouldColorize","threshold","isThresholdKey","condition","colorData","color","textColor","backgroundColor","Number","renderTime","time","formatDurationShort","highlighted","text","highlight","renderServiceLevel","service_level","service_level_target","service_level_threshold_time","target","span","renderSentiment","SentimentSlider","renderAnything","itemValue","meta","String","firstname","lastname","stateThresholdName","getNotReadyKey","getStateThresholdName","MONITORING_AGENTS_COLUMN_NAMES","monitoring_recording_value_yes","monitoring_recording_value_no","useTableColumns","getColumnTitle","sortingSettings","setSortingSettings","extraColumns","scrollEnabled","collapsedGroupIds","columnsForCollapsedGroupIds","entries","_","collapsed","map","groupId","parentId","v","configToTableColumn","selectedWidth","sW","w","width","align","getColumnAlign","columns","isVisible","isExtraSticky","col","sticky","isCollapsedByGroup","defaultSortingSettings","getDefaultSortingSettings","extraStickyColumns","c","length","unshift","extraColumn","colConfig","configColumn","hidden","resizable","alignedLeftColumns","useTableData","stats","allItem","list","sorting","sort","a","b","getValues","v1","v2","localeCompare","useTeamName","teamId","monitoringTeamsStats","all_teams","values","it","team_id","QuickMonitorContext","INTENT_ELEM_CLASSNAME","CSS","escape","uuid","getMessageContentWithHighlightedSearch","highlightHTML","html","textToHighlight","styles","useDisplayMessages","messages","parties","getSystemMessageContent","message","party","fullName","systemType","quality_management_monitor_party_connected","quality_management_monitor_party_inviting","quality_management_monitor_party_left","partyId","getMessageDirectionFromParty","htmlContent","normalizeByUrlParser","QuickMonitorContextProvider","autofocusedIntentAlert","useState","searchResult","targetIntent","setState","isConference","p","isQm","qmMode","stateMessages","editableStateRef","useAsRef","produceState","stateUpdate","newState","produce","current","s","intent","messageIndex","findIndex","m","msgId","intentText","messageId","qmAutofocusedIntentAlert","stateRef","createContext","displayName","Provider","createUIStateHooks","useQuickMonitorContext","useQuickMonitorContextProducer","Intents","quickMonitorContextProducer","MessageContainer","isIncoming","tcn","useMessageHtml","ref","intentWasScrolled","useRef","searchWasScrolled","highlightedContent","result","element","innerHTML","useInnerHTML","messageElem","index","highlightedMarkElem","querySelectorAll","classList","add","scrollIntoView","block","remove","intentElem","querySelector","searchResultChanged","useValueUpdated","targetIntentChanged","RegularMessage","date","formatDate","dangerouslySetInnerHTML","ScenarioMessage","IconCogwheel","MessageContent","MessageInfo","Message","Messages","virtualizeScrollerRef","setTrue","setFalse","scrollRef","useScrollObserver","onScrollAppeared","onScrollDisappeared","scrollNode","setScrollNode","setScrollNodeRef","node","scrollToIndex","renderMessage","_idx","generateMessageKey","initialTopMostItemIndex","hasScroll","Virtuoso","followOutput","data","itemContent","computeItemKey","customScrollParent","Search","searchLocal","setSearchLocal","highlightIndex","setHighlightIndex","setDebouncedSearch","debounce","filteredResults","reduce","marksCount","match","RegExp","escapeRegExp","Array","from","reverse","markers","handleHighlight","position","handleSearch","evt","handleClear","SearchInput","clearable","onClear","enabledInOffline","placeholder","quality_management_monitor_search_transcript","SearchResultsSwitcher","total","QuickMonitor","subscribeToItemPeek","unsubscribeFromItemPeek","useLayoutEffect","peekItems","isLoading","Loader","ItemCard","sentiment","partyName","heading_unknown","AgentStatusIcon","isLoggedOut","talkDuration","serviceName","quality_management_monitor_menu_button","IconMore","UserItems","tabs","hasMonitorPrivilege","resultTabs","push","activeTabId","setActiveTabId","tab","autoFocusedTab","renderTab","itemDirection","renderTabContent","Tabs","headerClassName","tabClassName","tabsContentClassName","QualityManagementMonitor","qmShowDetails","subscribeToUserDetails","unsubscribeFromUserDetails","userDetails","isFloatingMode","showDetailsButton","isEmpty","handleClose","qmUserId","toggleShowDetails","onKeyPressDetailsHandler","br","quality_management_monitor_show_details","IconChevronUpCircle","showDetails","RightBar","setQMWidth","setQMFloatingState","modify","newFloatingState","onDragEnd","Floating","exceptionSelectors","SUPERVISION_USERS_TABLE","initialSize","minSize","MIN_QM_WIDTH","resizeable","side","data-testid","showEar","QM_MODAL_HANDLE","QmMonitorModal","React","userHasItems","modalExpanded","useDraggableModal","modalType","draggableNodeRef","draggableProps","useEscapeManager","FocusTrap","Draggable","handle","aria-modal","useQmMonitorModalOpener","openQmMonitorModal","useModalComponentOpener","localSettings","useLocalSettings","hasQmUserId","hasOpenModal","openMonitorModal","modalVisualParams","get","quality_management_monitor","useTableGroups","groups","getGroupName","lastGroupId","stickyColumns","hiddenStickyColumnsAmount","stickyColumnsAmount","spanOmitted","currentColSpan","initialStickyGroup","colspan","slice","acc","idx","arr","amount","isLastColumn","addGroup","innerLastGroupId","g","SectionHeader","SectionTitle","ServiceInfoModal","props","monitoringTeamStats","services","titlesForColumn","useLocalizedStatNames","ResizeTable","ServicesFilterPopup","monitoringConfig","searchValue","setSearchValue","setShow","teamServicesInfo","changeMonitoringServices","getSelectedServices","configs","SERVICES_CONFIGS","selectedServices","setSelectedServices","filterEnabled","setFilterEnabled","saveSelectedServices","service","visibility","servicesToShow","toLowerCase","trim","handleChangeSelected","updatedServices","handleSearchChange","e","isAllSelected","handleSelectAll","onClickOutside","autoFocus","monitoring_services_filter_services","monitoring_services_use_filter","monitoring_services_select_all","Button","IconFilterEnabled","IconFilterFunnel","LoadTableViewItem","isSelected","isUntouchedCurrentConfig","setSelectedView","configType","deleteTableConfig","SmList","aria-disabled","SmIcon","IconTrash","LoadTableViewModal","table","restProps","selectedView","tableConfig","convertTableTypeToConfig","customConfigs","selectedConfig","updateMetrics","handleLoad","metrics","savedConfigOriginId","usePressKeyHandler","configsToRender","additionalData","isEqual","Modal","aria-labelledby","load_table_view","divided","primary","load","useGetColumnsEditorConfig","originalNames","excludedMetrics","getMetricName","metric","useTableMetrics","isSystemMetric","isGroupIndexMetricId","defaultName","isGroup","parentGroup","isActive","useResetCustomNameEffect","setConfig","previousConfig","usePrevious","updatedColumns","previousColumn","pc","currentConfig","currentColumn","updatedColumn","ManageMetricsModal","getTableColumnsEditorConfig","updateTableMetrics","baseMetrics","additionalMetrics","updatedMetrics","updatedGroups","columnIndex","groupIndex","forEach","createGroupId","indexMetricId","columnMeta","originalGroupId","newGroupId","newIndexMetricId","isSystem","asc","childColumn","childColumnMeta","useUpdateTableMetrics","editingColumns","setEditingColumns","flex","manage_metrics_modal_title","ColumnsEditor","SaveTableViewModal","handleSave","preventDefault","saveTableConfig","viewName","resProps","setViewName","save_table_view","form","onSubmit","SmForm","htmlFor","enter_the_view_name","SmInput","fluid","button_save","TableActionsButton","handleChangeScrolling","scrollingEnabled","resetMonitoringColumns","saveMonitoringConfigAsSystem","openManageMetricsModal","openSaveTableViewModal","openLoadTableViewModal","onOpenManageMetricsModal","openSaveTableView","openLoadTableView","actions_menu_option_manage_metrics","flow","actions_menu_option_restore_default_view","partial","actions_menu_option_set_view","actions_menu_option_horizontal_scrolling_off","actions_menu_option_horizontal_scrolling_on","actions_menu_option_save_view","actions_menu_option_load_view","useTableMenuOptions","actions_menu_btn_tooltip","IconTableActions","ServicesTable","toggleCollapsedGroup","serviceSummary","resizeMonitoringColumns","updateScrollingState","selectedTeamName","scrolling","selectedItemId","setSelectedItemId","toggleScroll","MONITORING_SERVICES_COLUMN_NAMES","services_column_name","useSorting","handleSortingChange","SERVICES_COLUMN_CONFIGS","service_id","summaryStats","renderHeaderItem","columnData","stopPropagation","emptyData","no_data","summaryData","renderItem","handleRowClick","MONITORING_LABEL","monitoring_label_skillsHeader","afterClose","handleColumnsResize","resizedColumns","selectedRows","resultData","nonConfigurableMetrics","monitoring_label_services","footerData","onSortingChange","onColumnsResize","onRowClick","isColumnResizable","isResizable","hasGrid","AlertMessage","intentMessage","localShow","SmTransition","visible","duration","animation","onHide","unmountOnHide","transitionOnMount","InteractionMediaIcon","mediaTypeToIcon","EmptyAlertMessage","timer","setTimeout","MS_IN_SECOND","clearTimeout","no_active_alerts_message","AlertsButton","closeIntentAlert","wrapperElement","setWrapperElement","popperElement","setPopperElement","usePopper","modifiers","enabled","attributes","update","alertMessagesToShow","messagesStyle","rect","getBoundingClientRect","popperStyles","popper","right","window","innerWidth","onKeyPressToggleHandler","IconBell","UnreadBadge","unreadAmount","ReactDOM","style","popperAttributes","alert","document","getElementById","IntentsAlertsConfigModal","setAlertIntents","alerts","all","setValue","allIntents","intents_alerts_configuration","intents_for_alerts_label","SmDropdown","multiple","selection","selectValue","isArray","every","timeDurationToSeconds","timeDuration","isStringifiedNumber","split","minutes","seconds","formatThreshold","key","isNotReadyKey","thresholdsFormattingMap","AlertConfigurationModalActions","readOnly","getCustomThresholds","typedKeys","customThresholds","thresholdItem","editMode","saveThresholdsConfig","setDefaultSystemThresholds","hasError","invalid","close","THRESHOLDS","threshold_button_setDefault","threshold_button_apply","AlertConfigurationModalTableHeaderUI","thead","tr","th","threshold_heading_threshold","threshold_color_heading","DisableButton","LinkLikeButton","enable","disable","EditModeButon","systemThreshold","valueInputAutoFocused","restore","edit","parseStringColor","ColorModal","bgColor","textColorValue","setTextColorValue","bgColorValue","setBgColorValue","SETTINGS","settings_menu_alarmConfiguration","h4","threshold_config_label_text","HexAlphaColorPicker","threshold_config_label_background","ThresholdColorCellContent","openColorModal","handleOpenColorModal","button","underline","ThresholdValueCellContent","inputWidthRef","parseCondition","parseThreshold","thresholdValue","threshold_condition_auto","handleInputBlur","valueTextElementRef","handleValueChange","isNaN","validateTimeInput","offsetWidth","error","onBlur","ThresholdRow","controlButtonClassName","setSelected","selectedItem","resetSelected","onMouseEnter","onFocus","onMouseLeave","td","ThresholdsGroupLabelRow","colSpan","AlertConfigurationModalContent","groupedState","agents","servicesThresholdsKeys","tbody","threshold_label_service","threshold_label_agents","MetricsAlertsConfigModal","titlesForColumns","getNames","initialState","notReadyKeyToReason","SYS_ALERT_CONFIG","AlertsConfigurationButton","showOptions","openIntentsAlertsConfigModal","handleOpenIntentsConfig","openMetricsAlertConfigModal","handleOpenMetricsConfig","onKeyPressOpenAlertsHandler","metrics_alerts_configuration","pipe","custom","popupClassName","IconSettings","SupervisionPageHeader","supervision_teams","header","SYS_VIEW_LIST_OF_AGENTS","TeamsTable","onTeamIdChange","MONITORING_TEAMS_COLUMN_NAMES","teams_column_name","TEAMS_COLUMN_CONFIGS","teamsStats","statsAllItem","CAMPAIGN_MONITOR","campaignMonitor_teams_heading","teams","users","UsersTableContext","RowWithInteractionSubrows","rowHandlers","stickyOffsets","subrows","active_item_id","clearIntentsForNonActiveItems","active_item_sentiment","active_item_service_name","service_name","active_item_party_name","party_name","active_item_talk_duration","talk_duration","active_item_hold_duration","hold_duration","active_item_qm_is_recording","qm_is_recording","interactionColumns","isClickable","data-element","cellClassName","offsetStyle","left","TableCell","newRowItem","activeId","toKVArray","selectedUserIds","isEditing","liveStatsEnabledTime","UsersTableContextProvider","useUsersTableContext","useUsersTableContextProducer","SubteamFilterButton","produceUsersTableContext","showSubteamsOnly","localData","showSubTeamOnly","selectedSubTeamUserIds","setShowSubTeamOnly","updateSelectedSubTeamUserIds","turnOnSubteamsOnlyOnEditingEnd","onEditingStart","toggleSubTeamsOnlyOnEditingEnd","onEditingCancel","onEditingConfirm","contentClassName","monitoring_subTeam_editMode_popupHeader","monitoring_subTeam_editMode_popupText","UsersTableControls","allRowsAreFilteredOut","setIncludeLoggedOut","includeLoggedOut","atLeastOneUserIsSelected","unary","users_table_my_subteam_only_label","labelClassName","users_table_logged_out_users_label","UsersTable","showOnlySubteam","openedIds","openedInteractionsColumnsIds","setOpenedInteractionsColumnsIds","openInteractionsSubrows","closeInteractionsSubrows","monitoring_column_name","users_table_status_column","USERS_COLUMN_CONFIGS","onlySubteamFilter","handleUserCheckboxClick","handleUserSelectChange","currentStatusProps","nextStatusProps","interactionsCount","opened","semanticIcon","useSearch","resetSearch","searchFilter","columnContent","combineFilters","allSelected","elem","handleAllUserSelectChange","usersIds","Set","IconInteraction","d","renderCustomRow","rest","TableRow","monitoring_label_agents","search_agents","SupervisionPage","setSelectedTeamId","selectedTeamId","useCollapsedTableGroupsIds","setCollapsedGroupIds","useLocalStorageForState","SYS_VIEW_QUEUE_STATUS","classnames","twMerge","cn"],"sourceRoot":""}