{"version":3,"file":"static/js/179.7b059f45.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsPageTabs.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/TabContent/ListRemainingRecordsTab/Chart.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/TabContent/ListRemainingRecordsTab/ListRemainingRecordsTab.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/SectionHeader.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/SectionTitle.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/TableActionsButton.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignDetailsTable/CampaignDetailsItem.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/ManageMetricsModal/hooks/useCampaignDetailsTableConfigAdapter.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/ManageMetricsModal/hooks/useCampaignListsTableConfigAdapter.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/ManageMetricsModal/hooks/useCampaignsTableConfigAdapter.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/ManageMetricsModal/ManageMetricsModal.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignDetailsTable/CampaignDetailsTable.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignDetailsTable/useTableMenuOptions.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/hooks/useCollapsedTableGroupsIds.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/hooks/useSortedTableData.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/hooks/useTableColumns.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/useGoRemainingRecords.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/Remaining.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/StartStopToggle.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/useTableMenuOptions.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/CampaignListsTable.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignListsTable/useItemRenderer.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsTable/CampaignsTableTeams.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/utils/getFitStrings.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsTable/StartStopToggle.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsTable/useTableMenuOptions.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsTable/CampaignsTable.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsTable/useItemRenderer.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/ControlledDispositionsPie/Chart.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/ControlledDispositionsPie/Legend.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/ControlledDispositionsPie/useLegendItems.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/ControlledDispositionsPie/Title.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/ControlledDispositionsPie/ControlledDispositionsPie.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/DispositionsPieEditorModal/atoms.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/DispositionsPieEditorModal/ShownDispositionsEditor/ShownDispositionsEditor.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/DispositionsPieEditorModal/ShownDispositionsEditor/useToggles.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/DispositionsPieEditorModal/ShownDispositionsEditor/useTableItems.ts","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/modals/DispositionsPieEditorModal/DispositionsPieEditorModal.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/DispositionsPie/DispositionsPie.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/TabContent/VoiceCampaignsTab/VoiceCampaignsTab.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/TabContent/TabContent.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/ad-campaigns-ui/src/components/CampaignsPage.tsx","webpack://@bpinc/web-campaigns-ui/../../packages/lib-tailwind-classnames/src/tcn.ts"],"sourcesContent":["import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods} from '@bpinc/ad-campaigns-state-context'\r\nimport {CLOSEABLE_TABS_TYPES} from '@bpinc/ad-campaigns-state-types'\r\nimport type {TabI} from '@bpinc/lib-ui-elements'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const CampaignsPageTabs: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const {tabs, selectedCampaignTabId, campaignItems} = useCampaignsState()\r\n    const {selectTab, closeTab} = useCampaignsStateMethods()\r\n\r\n    const computedTabs = useMemo(() => {\r\n        return tabs.map(tab => {\r\n            const title = (() => {\r\n                switch (tab.type) {\r\n                    case 'voiceCampaigns':\r\n                        return t.CAMPAIGN_MONITOR.voice_campaigns()\r\n                    case 'messagingCampaigns':\r\n                        return t.CAMPAIGN_MONITOR.messaging_campaigns()\r\n                    case 'campaignResults': {\r\n                        const campaign = campaignItems.find(it => it.id === tab.campaignId)\r\n                        const campaignName = campaign?.fields.name ?? ''\r\n                        return campaignName\r\n                            ? `${campaignName}.${t.CAMPAIGN_MONITOR.preview_detailed_results()}`\r\n                            : t.CAMPAIGN_MONITOR.preview_detailed_results()\r\n                    }\r\n                    case 'listRemainingRecords': {\r\n                        const campaign = campaignItems.find(it => it.id === tab.campaignId)\r\n                        const list = campaign?.lists.find(it => it.id === tab.listId)\r\n\r\n                        return list\r\n                            ? `${list.metrics.name}. ${t.CAMPAIGN_MONITOR.remaining_records()}`\r\n                            : t.CAMPAIGN_MONITOR.remaining_records()\r\n                    }\r\n                    default:\r\n                        return 'No title'\r\n                }\r\n            })()\r\n\r\n            const closeable = CLOSEABLE_TABS_TYPES.includes(tab.type)\r\n\r\n            return {\r\n                id: tab.id,\r\n                title,\r\n                closeable,\r\n            } satisfies TabI<string>\r\n        })\r\n    }, [tabs, t, campaignItems])\r\n\r\n    return (\r\n        <header className=\"flex h-[50px] items-center justify-between bg-[--campaigns-header-bg] py-1.5 pr-6\">\r\n            <Tabs\r\n                tabs={computedTabs}\r\n                activeTabId={selectedCampaignTabId}\r\n                headerClassName=\"bg-transparent border-b-transparent\"\r\n                tabsContentClassName=\"hidden\"\r\n                onChange={selectTab}\r\n                onTabClose={closeTab}\r\n            />\r\n        </header>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {Chart as Highchart} from '@bpinc/lib-highcharts'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const Chart: React.FC<{\r\n    postponedTodayAM: number\r\n    postponedTodayPM: number\r\n    postponedTomorrowAM: number\r\n    postponedTomorrowPM: number\r\n    postponedLater: number\r\n}> = ({\r\n    postponedTodayAM,\r\n    postponedTodayPM,\r\n    postponedTomorrowAM,\r\n    postponedTomorrowPM,\r\n    postponedLater,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const options = useMemo(() => {\r\n        return {\r\n            chart: {\r\n                type: 'bar',\r\n                inverted: true,\r\n                animation: false,\r\n            },\r\n            title: {\r\n                text: '',\r\n            },\r\n            xAxis: {\r\n                categories: [\r\n                    t.CAMPAIGN_MONITOR.today_am(),\r\n                    t.CAMPAIGN_MONITOR.today_pm(),\r\n                    t.CAMPAIGN_MONITOR.tomorrow_am(),\r\n                    t.CAMPAIGN_MONITOR.tomorrow_pm(),\r\n                    t.CAMPAIGN_MONITOR.later(),\r\n                ],\r\n                title: {\r\n                    text: null,\r\n                },\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: '',\r\n                },\r\n                labels: {\r\n                    format: '{value}',\r\n                },\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    animation: false,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                    },\r\n                },\r\n            },\r\n            tooltip: {\r\n                enabled: false,\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'bar',\r\n                    data: [\r\n                        {y: postponedTodayAM},\r\n                        {y: postponedTodayPM},\r\n                        {y: postponedTomorrowAM},\r\n                        {y: postponedTomorrowPM},\r\n                        {y: postponedLater},\r\n                    ],\r\n                },\r\n            ],\r\n        } satisfies Highcharts.Options\r\n    }, [\r\n        postponedTodayAM,\r\n        postponedTodayPM,\r\n        postponedTomorrowAM,\r\n        postponedTomorrowPM,\r\n        postponedLater,\r\n        t,\r\n    ])\r\n\r\n    return (\r\n        <div className=\"h-[345px]\">\r\n            <Highchart options={options} />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport classNames from 'classnames'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedTab} from '@bpinc/ad-campaigns-state-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {SmMessage, SmProgress} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconRefresh24} from '@bpinc/lib-jskit-ui'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Chart} from './Chart'\r\n\r\n\r\nexport const ListRemainingRecordsTab: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const selectedTab = useSelectedTab()\r\n\r\n    // The component is shown only when the selected tab is of type 'listRemainingRecords'\r\n    if (selectedTab?.type !== 'listRemainingRecords') {\r\n        throw new Error('Invalid tab type')\r\n    }\r\n\r\n    const {generateListReport} = useCampaignsStateMethods()\r\n    const {campaignItems} = useCampaignsState()\r\n\r\n    const campaign = campaignItems.find(it => it.id === selectedTab.campaignId)\r\n    const list = campaign?.lists.find(it => it.id === selectedTab.listId)\r\n\r\n    const postponedSum = (() => {\r\n        if (!list?.reportData) {\r\n            return 0\r\n        }\r\n\r\n        return Number(list.reportData.scheduled_today_am) +\r\n            Number(list.reportData.scheduled_today_pm) +\r\n            Number(list.reportData.scheduled_tomorrow_am) +\r\n            Number(list.reportData.scheduled_tomorrow_pm) +\r\n            Number(list.reportData.scheduled_later)\r\n    })()\r\n\r\n    const generateReport = useEvent(() => {\r\n        generateListReport(selectedTab.campaignId, selectedTab.listId)\r\n    })\r\n\r\n    // Generate the report when the report is not loaded yet\r\n    useEffect(() => {\r\n        if (list?.isReportLoading || list?.reportData) {\r\n            return\r\n        }\r\n        generateReport()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-2.5 mt-4 flex items-center gap-3\">\r\n                <h1 className=\"text-xl font-bold\">{t.CAMPAIGN_MONITOR.remaining_records()}</h1>\r\n                <div className=\"h-4.5 w-0.5 bg-[--c-icon-default]\" />\r\n                <p className=\"text-xl\">{campaign?.fields.name || '—'}</p>\r\n                <div className=\"h-4.5 w-0.5 bg-[--c-icon-default]\" />\r\n                <p className=\"text-xl\">{list?.metrics.name || '—'}</p>\r\n                <div className=\"h-4.5 w-0.5 bg-[--c-icon-default]\" />\r\n                <p className=\"text-xl\">\r\n                    {list?.reportAt ? formatDate(list.reportAt, {prefixed: true, full: true}) : '—'}\r\n                </p>\r\n            </div>\r\n\r\n            {list?.isReportLoading && (\r\n                <>\r\n                    <SmMessage className=\"max-w-[720px] shrink-0\" info>\r\n                        {t.CAMPAIGN_MONITOR.generating_report()}\r\n                    </SmMessage>\r\n\r\n                    <div className=\"mt-2.5 flex gap-6\">\r\n                        <div className=\"h-8 pt-1 font-bold\">Progress</div>\r\n                        <div className=\"w-52 pt-1\">\r\n                            <SmProgress percent={100} indicating label={`0 of ${list?.metrics.records_total}`} />\r\n                        </div>\r\n                        <div>\r\n                            <SemanticButton className=\"py-1.5\">\r\n                                {t.GLOBAL.cancel()}\r\n                            </SemanticButton>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {list && !list.isReportLoading && list.reportData && (\r\n                <>\r\n                    <div className=\"mt-4 flex\">\r\n                        <div\r\n                            className={classNames(\r\n                                'w-60 p-6 text-center text-default shadow-[0px_2px_6px_#00000033]',\r\n                                {\r\n                                    'bg-[--c-interaction-bar-bg] text-white': Number(list?.reportData?.available || 0) > 0,\r\n                                },\r\n                            )}\r\n                        >\r\n                            <div className=\"mb-2 text-xl font-bold\">{list.reportData.available}</div>\r\n                            <div>{t.CAMPAIGN_MONITOR.available_now()}</div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className={classNames(\r\n                                'w-60 p-6 text-center text-default shadow-[0px_2px_6px_#00000033]',\r\n                                {\r\n                                    'bg-gray-200': postponedSum > 0,\r\n                                },\r\n                            )}\r\n                        >\r\n                            <div className=\"mb-2 text-xl font-bold\">{postponedSum}</div>\r\n                            <div>{t.CAMPAIGN_MONITOR.postponed()}</div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className={classNames(\r\n                                'w-60 p-6 text-center text-default shadow-[0px_2px_6px_#00000033]',\r\n                                {\r\n                                    'bg-red-600 text-white': Number(list.reportData.out_of_calling_hours || 0) > 0,\r\n                                },\r\n                            )}\r\n                        >\r\n                            <div className=\"mb-2 text-xl font-bold\">{list.reportData.out_of_calling_hours}</div>\r\n                            <div>{t.CAMPAIGN_MONITOR.misconfigured()}</div>\r\n                        </div>\r\n\r\n                        <button\r\n                            className=\"ml-4 flex h-8 w-8 items-center justify-center rounded bg-gray-200 hover:bg-gray-300\"\r\n                            onClick={generateReport}\r\n                        >\r\n                            <IconRefresh24 />\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"mt-4 max-w-[720px] px-4 py-2 shadow-[0px_2px_6px_#00000033]\">\r\n                        <h2 className=\"mb-6 text-xl\">\r\n                            {t.CAMPAIGN_MONITOR.postponed_until()}\r\n                        </h2>\r\n\r\n                        <Chart\r\n                            postponedTodayAM={Number(list.reportData.scheduled_today_am) || 0}\r\n                            postponedTodayPM={Number(list.reportData.scheduled_today_pm) || 0}\r\n                            postponedTomorrowAM={Number(list.reportData.scheduled_tomorrow_am) || 0}\r\n                            postponedTomorrowPM={Number(list.reportData.scheduled_tomorrow_pm) || 0}\r\n                            postponedLater={Number(list.reportData.scheduled_later) || 0}\r\n                        />\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype SectionHeaderProps = {\r\n    className?: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const SectionHeader: React.FC<SectionHeaderProps> = ({className, children}) => {\r\n    return (\r\n        <div className={tcn('flex flex-wrap justify-between', className)}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\ninterface SectionTitleProps {\r\n    title: string\r\n}\r\n\r\nexport const SectionTitle: React.FC<SectionTitleProps> = ({title}) => {\r\n    return (\r\n        <div className=\"mr-6 mt-2 text-xl font-bold leading-[24px] text-info\">\r\n            {title}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconTableActions} from '@bpinc/lib-icons'\r\nimport type {PopupMenuOption} from '@bpinc/lib-ui-elements'\r\nimport {PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport type GetOptions = (args: {toggleShow: () => void}) => PopupMenuOption[]\r\n\r\nexport const TableActionsButton: React.FC<{\r\n    getOptions: GetOptions\r\n}> = ({\r\n    getOptions,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n\r\n    const options = useMemo(() => getOptions({toggleShow}), [getOptions, toggleShow])\r\n\r\n    return (\r\n        <PopupButton\r\n            icon\r\n            basic\r\n            show={show}\r\n            toggleShow={toggleShow}\r\n            options={options}\r\n            className=\"flex size-6 items-center justify-center p-0 shadow-none\"\r\n            tooltip={t.SUPERVISION_PAGE.actions_menu_btn_tooltip()}\r\n        >\r\n            <IconTableActions />\r\n        </PopupButton>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {campaignsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport type {CampaignDetailsTableColumnItem} from '@bpinc/ad-transport-types'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport {useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const CampaignDetailsItem: React.FC<{\r\n    column: CampaignDetailsTableColumnItem\r\n}> = ({\r\n    column,\r\n}) => {\r\n    const localize = useLocalizeString()\r\n    const campaign = useSelectedCampaign()\r\n\r\n    const campaignDefaultName = localize(campaignsColumnsLocalizationMap[column.id])\r\n\r\n    const columnValue = useMemo(() => {\r\n        const renderAnything = (value: unknown): React.ReactNode => {\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                return '—'\r\n            }\r\n            return `${value}`\r\n        }\r\n\r\n        const renderTime = (value: unknown): React.ReactNode => {\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                return '—'\r\n            }\r\n\r\n            const time = formatDurationShort(value)\r\n            return time\r\n        }\r\n\r\n        if (!campaign || !column) {\r\n            return '—'\r\n        }\r\n\r\n        switch (column.id) {\r\n            case 'out_calls_duration_average_per_day':\r\n            case 'out_calls_duration_total_per_day':\r\n            case 'in_max_wait_time': {\r\n                return renderTime(campaign.fields[column.id])\r\n            }\r\n            case 'running': {\r\n                return campaign.fields.state === 'running' ? 'Running' : 'Stopped'\r\n            }\r\n            case 'out_campaign_mode':\r\n            case 'out_average_success_rate':\r\n            case 'out_calls_in_ivr':\r\n            case 'out_calls_active_on_agents':\r\n            case 'out_calls_in_progress':\r\n            case 'out_calls_current_call_rate':\r\n            case 'out_campaign_duration_forecast':\r\n            case 'agent_occupancy':\r\n            case 'agents_logged':\r\n            case 'agents_ready':\r\n            case 'agents_busy':\r\n            case 'agents_in_wrap_up':\r\n            case 'agents_not_ready':\r\n            case 'records_total':\r\n            case 'records_dialable':\r\n            case 'records_remaining':\r\n            case 'records_completed':\r\n            case 'records_completed_ratio':\r\n            case 'records_in_dnc':\r\n            case 'records_expired':\r\n            case 'records_with_assigned_agents_completed':\r\n            case 'records_with_assigned_agents_remaining':\r\n            case 'out_calls_placed_per_day':\r\n            case 'out_calls_answered_per_day':\r\n            case 'out_calls_answered_ratio_per_day':\r\n            case 'out_calls_failed_per_day':\r\n            case 'out_calls_abandoned_per_day':\r\n            case 'out_calls_abandoned_ratio_per_day':\r\n            case 'out_calls_abandoned_in_ivr_per_day':\r\n            case 'out_calls_abandoned_in_ivr_ratio_per_day':\r\n            case 'out_calls_abandoned_in_queue_per_day':\r\n            case 'out_calls_abandoned_in_queue_ratio_per_day':\r\n            case 'out_calls_abandoned_ringing_per_day':\r\n            case 'out_calls_unattended_per_day':\r\n            case 'out_calls_unattended_ratio_per_day':\r\n            case 'out_calls_dropped_in_ivr_per_day':\r\n            case 'out_calls_dropped_in_queue_per_day':\r\n            case 'out_calls_routed_per_day':\r\n            case 'out_calls_handled_per_day':\r\n            case 'out_calls_transferred_per_day':\r\n            case 'out_calls_dropped_talking_per_day':\r\n            case 'out_calls_disconnected_talking_per_day':\r\n            case 'records_attempted_per_day':\r\n            case 'records_attempted_ratio_per_day':\r\n            case 'records_completed_per_day':\r\n            case 'records_completed_ratio_per_day':\r\n            default: {\r\n                return renderAnything(campaign.fields[column.id as keyof typeof campaign.fields])\r\n            }\r\n        }\r\n    }, [column, campaign])\r\n\r\n    return (\r\n        <div className=\"border-l p-2 pr-4\">\r\n            <div className=\"text-sm font-bold\">\r\n                {column.customName || campaignDefaultName}\r\n            </div>\r\n\r\n            <div className=\"mt-1 text-xl\">\r\n                {columnValue}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {campaignsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport type {CampaignDetailsTableColumnItem, CampaignDetailsTableColumnsConfig} from '@bpinc/ad-transport-types'\r\nimport type {ColumnsEditorColumn, ColumnsEditorConfig} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport type CampaignDetailsTableMeta = {\r\n    beforeEditing: CampaignDetailsTableColumnItem\r\n}\r\n\r\nexport function useCampaignDetailsTableConfigAdapter() {\r\n    const toEditing = useConvertConfigToEditing()\r\n\r\n    return useMemo(() => ({\r\n        toEditing,\r\n        fromEditing,\r\n    }), [toEditing])\r\n}\r\n\r\nfunction useConvertConfigToEditing() {\r\n    const localize = useLocalizeString()\r\n\r\n    return useCallback((config: CampaignDetailsTableColumnsConfig) => {\r\n        return config.map(columnToTreeItem)\r\n\r\n        function columnToTreeItem(configItem: CampaignDetailsTableColumnItem): ColumnsEditorColumn<CampaignDetailsTableMeta> {\r\n            return {\r\n                id: configItem.id,\r\n                defaultName: localize(campaignsColumnsLocalizationMap[configItem.id]),\r\n                customName: configItem.customName,\r\n                isActive: configItem.isShown,\r\n                meta: {\r\n                    beforeEditing: configItem,\r\n                },\r\n            }\r\n        }\r\n    }, [localize])\r\n}\r\n\r\nfunction fromEditing(configItem: ColumnsEditorConfig<CampaignDetailsTableMeta> | undefined): CampaignDetailsTableColumnsConfig | undefined {\r\n    const newConfig = configItem?.reduce<CampaignDetailsTableColumnsConfig>((acc, it) => {\r\n        if (!it.isGroup) {\r\n            acc.push(treeItemToColumn(it))\r\n        }\r\n\r\n        return acc\r\n\r\n        function treeItemToColumn(item: ColumnsEditorColumn<CampaignDetailsTableMeta>): CampaignDetailsTableColumnItem {\r\n            const itemMetaBeforeEditing = item.meta?.beforeEditing\r\n            if (!itemMetaBeforeEditing) {\r\n                throw new Error('Invalid column meta data')\r\n            }\r\n            return {\r\n                ...itemMetaBeforeEditing,\r\n                customName: item.customName,\r\n                isShown: item.isActive,\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return newConfig\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {campaignsListsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport {\r\n    type CampaignListsColumnGroup,\r\n    type CampaignListsColumnItem,\r\n    type CampaignListsTableColumn,\r\n    type CampaignListsTableColumnsConfig,\r\n    checkIsCampaignListsColumnGroup,\r\n} from '@bpinc/ad-transport-types'\r\nimport type {ColumnsEditorColumn, ColumnsEditorConfig, ColumnsEditorGroup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype CampaignsTableMeta = {\r\n    beforeEditing: CampaignListsColumnGroup | CampaignListsColumnItem\r\n}\r\n\r\nexport function useCampaignListsTableConfigAdapter() {\r\n    const toEditing = useConvertConfigToEditing()\r\n\r\n    return useMemo(() => ({\r\n        toEditing,\r\n        fromEditing,\r\n    }), [toEditing])\r\n}\r\n\r\nfunction useConvertConfigToEditing() {\r\n    const localize = useLocalizeString()\r\n\r\n    return useCallback((config: CampaignListsTableColumnsConfig) => {\r\n        return config.map(it => {\r\n            if (checkIsCampaignListsColumnGroup(it)) {\r\n                const group: ColumnsEditorGroup<CampaignsTableMeta> = {\r\n                    id: it.id,\r\n                    defaultName: localize(campaignsListsColumnsLocalizationMap[it.id]),\r\n                    customName: it.customName,\r\n                    isGroup: true,\r\n                    columns: it.columns.map(columnToTreeItem),\r\n                    meta: {\r\n                        beforeEditing: it,\r\n                    },\r\n                }\r\n\r\n                return group\r\n            }\r\n\r\n            const item = columnToTreeItem(it)\r\n\r\n            return item\r\n\r\n\r\n            function columnToTreeItem(configItem: CampaignListsColumnItem): ColumnsEditorColumn<CampaignsTableMeta> {\r\n                return {\r\n                    id: configItem.id,\r\n                    defaultName: localize(campaignsListsColumnsLocalizationMap[configItem.id]),\r\n                    customName: configItem.customName,\r\n                    isActive: configItem.isShown,\r\n                    meta: {\r\n                        beforeEditing: configItem,\r\n                    },\r\n                }\r\n            }\r\n        })\r\n    }, [localize])\r\n}\r\n\r\nfunction fromEditing(configItem: ColumnsEditorConfig<CampaignsTableMeta> | undefined): CampaignListsTableColumnsConfig {\r\n    const newConfig = configItem?.map<CampaignListsColumnGroup | CampaignListsColumnItem>(it => {\r\n        if (it.isGroup) {\r\n            const group: CampaignListsColumnGroup = {\r\n                ...it.meta?.beforeEditing,\r\n                id: it.id as CampaignListsTableColumn,\r\n                customName: it.customName,\r\n                columns: it.columns.map(treeItemToColumn),\r\n            }\r\n\r\n            return group\r\n        }\r\n\r\n        return treeItemToColumn(it)\r\n\r\n        function treeItemToColumn(item: ColumnsEditorColumn<CampaignsTableMeta>): CampaignListsColumnItem {\r\n            const itemMetaBeforeEditing = item.meta?.beforeEditing\r\n            if (!itemMetaBeforeEditing || checkIsCampaignListsColumnGroup(itemMetaBeforeEditing)) {\r\n                throw new Error('Invalid column meta data')\r\n            }\r\n            return {\r\n                ...itemMetaBeforeEditing,\r\n                customName: item.customName,\r\n                isShown: item.isActive,\r\n            }\r\n        }\r\n    })\r\n\r\n    return newConfig || []\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {campaignsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport {\r\n    type CampaignsTableColumn,\r\n    type CampaignsTableColumnGroup,\r\n    type CampaignsTableColumnItem,\r\n    type CampaignsTableColumnsConfig,\r\n    checkIsCampaignsTableColumnGroup,\r\n} from '@bpinc/ad-transport-types'\r\nimport type {ColumnsEditorColumn, ColumnsEditorConfig, ColumnsEditorGroup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype CampaignsTableMeta = {\r\n    beforeEditing: CampaignsTableColumnGroup | CampaignsTableColumnItem\r\n}\r\n\r\nexport function useCampaignsTableConfigAdapter() {\r\n    const toEditing = useConvertConfigToEditing()\r\n\r\n    return useMemo(() => ({\r\n        toEditing,\r\n        fromEditing,\r\n    }), [toEditing])\r\n}\r\n\r\nfunction useConvertConfigToEditing() {\r\n    const localize = useLocalizeString()\r\n\r\n    return useCallback((config: CampaignsTableColumnsConfig) => {\r\n        return config.map(it => {\r\n            if (checkIsCampaignsTableColumnGroup(it)) {\r\n                const group: ColumnsEditorGroup<CampaignsTableMeta> = {\r\n                    id: it.id,\r\n                    defaultName: localize(campaignsColumnsLocalizationMap[it.id]),\r\n                    customName: it.customName,\r\n                    isGroup: true,\r\n                    columns: it.columns.map(columnToTreeItem),\r\n                    meta: {\r\n                        beforeEditing: it,\r\n                    },\r\n                }\r\n\r\n                return group\r\n            }\r\n\r\n            const item = columnToTreeItem(it)\r\n\r\n            return item\r\n\r\n\r\n            function columnToTreeItem(configItem: CampaignsTableColumnItem): ColumnsEditorColumn<CampaignsTableMeta> {\r\n                return {\r\n                    id: configItem.id,\r\n                    defaultName: localize(campaignsColumnsLocalizationMap[configItem.id]),\r\n                    customName: configItem.customName,\r\n                    isActive: configItem.isShown,\r\n                    meta: {\r\n                        beforeEditing: configItem,\r\n                    },\r\n                }\r\n            }\r\n        })\r\n    }, [localize])\r\n}\r\n\r\nfunction fromEditing(configItem: ColumnsEditorConfig<CampaignsTableMeta> | undefined): CampaignsTableColumnsConfig {\r\n    const newConfig = configItem?.map<CampaignsTableColumnGroup | CampaignsTableColumnItem>(it => {\r\n        if (it.isGroup) {\r\n            const group: CampaignsTableColumnGroup = {\r\n                ...it.meta?.beforeEditing,\r\n                id: it.id as CampaignsTableColumn,\r\n                customName: it.customName,\r\n                columns: it.columns.map(treeItemToColumn),\r\n            }\r\n\r\n            return group\r\n        }\r\n\r\n        return treeItemToColumn(it)\r\n\r\n        function treeItemToColumn(item: ColumnsEditorColumn<CampaignsTableMeta>): CampaignsTableColumnItem {\r\n            const itemMetaBeforeEditing = item.meta?.beforeEditing\r\n            if (!itemMetaBeforeEditing || checkIsCampaignsTableColumnGroup(itemMetaBeforeEditing)) {\r\n                throw new Error('Invalid column meta data')\r\n            }\r\n            return {\r\n                ...itemMetaBeforeEditing,\r\n                customName: item.customName,\r\n                isShown: item.isActive,\r\n            }\r\n        }\r\n    })\r\n\r\n    return newConfig || []\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignTableType} from '@bpinc/ad-campaigns-state-types'\r\nimport {defaultCampaignDetailsTableColumnsConfig} from '@bpinc/ad-campaigns-state-types'\r\nimport type {CampaignId} from '@bpinc/ad-transport-types'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {ColumnsEditorColumn, ColumnsEditorConfig} from '@bpinc/lib-ui-elements'\r\nimport {ColumnsEditor, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {CampaignDetailsTableMeta} from './hooks/useCampaignDetailsTableConfigAdapter'\r\nimport {useCampaignDetailsTableConfigAdapter} from './hooks/useCampaignDetailsTableConfigAdapter'\r\nimport {useCampaignListsTableConfigAdapter} from './hooks/useCampaignListsTableConfigAdapter'\r\nimport {useCampaignsTableConfigAdapter} from './hooks/useCampaignsTableConfigAdapter'\r\n\r\n\r\ntype ManageMetricsModalProps = CommonModalProps & {\r\n    table: CampaignTableType\r\n    campaignId?: CampaignId\r\n}\r\n\r\nexport const ManageMetricsModal: React.FC<ManageMetricsModalProps> = props => {\r\n    const {\r\n        onClose,\r\n        table,\r\n        campaignId,\r\n        ...restProps\r\n    } = props\r\n\r\n    const {t} = useLocalizationState()\r\n    const {toEditing: convertCampaignsConfigToEditing, fromEditing: convertCampaignsConfigFromEditing} = useCampaignsTableConfigAdapter()\r\n    const {toEditing: convertCampaignDetailsConfigToEditing, fromEditing: convertCampaignDetailsConfigFromEditing} = useCampaignDetailsTableConfigAdapter()\r\n    const {toEditing: convertCampaignListsConfigToEditing, fromEditing: convertCampaignListsConfigFromEditing} = useCampaignListsTableConfigAdapter()\r\n\r\n    const {pageConfig} = useCampaignsState()\r\n    const {updatePageConfig} = useCampaignsStateMethods()\r\n\r\n    const campaignDetailsTableColumnsConfig = useMemo(() => {\r\n        if (table !== 'campaignDetails' || !campaignId) {\r\n            return []\r\n        }\r\n\r\n        return pageConfig.CAMPAIGN_DETAILS_TABLE_COLUMNS_CONFIG[campaignId]\r\n            || defaultCampaignDetailsTableColumnsConfig\r\n    }, [pageConfig, campaignId, table])\r\n\r\n    const defaultCampaignsTableEditingConfig = useMemo(\r\n        () => convertCampaignsConfigToEditing(pageConfig.CAMPAIGNS_TABLE_COLUMNS_CONFIG),\r\n        [pageConfig.CAMPAIGNS_TABLE_COLUMNS_CONFIG, convertCampaignsConfigToEditing],\r\n    )\r\n\r\n    const defaultCampaignDetailsTableEditingConfig = useMemo(\r\n        () => convertCampaignDetailsConfigToEditing(campaignDetailsTableColumnsConfig),\r\n        [campaignDetailsTableColumnsConfig, convertCampaignDetailsConfigToEditing],\r\n    )\r\n\r\n    const defaultCampaignListsTableEditingConfig = useMemo(\r\n        () => convertCampaignListsConfigToEditing(pageConfig.CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG),\r\n        [pageConfig.CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG, convertCampaignListsConfigToEditing],\r\n    )\r\n\r\n    const [editingCampaignsTableConfig, setEditingCampaignsTableConfig] = useState(defaultCampaignsTableEditingConfig)\r\n    const [editingCampaignDetailsTableConfig, setEditingCampaignDetailsTableConfig] = useState(defaultCampaignDetailsTableEditingConfig)\r\n    const [editingCampaignListsTableConfig, setEditingCampaignListsTableConfig] = useState(defaultCampaignListsTableEditingConfig)\r\n\r\n    const editingConfig = useMemo(() => {\r\n        if (table === 'campaignDetails') {\r\n            return editingCampaignDetailsTableConfig\r\n        } else if (table === 'campaigns') {\r\n            return editingCampaignsTableConfig\r\n        } else if (table === 'lists') {\r\n            return editingCampaignListsTableConfig\r\n        }\r\n        return []\r\n    }, [table, editingCampaignDetailsTableConfig, editingCampaignsTableConfig, editingCampaignListsTableConfig])\r\n\r\n    const onChange = useCallback((newConfig: ColumnsEditorConfig<any>) => {\r\n        if (table === 'campaignDetails') {\r\n            setEditingCampaignDetailsTableConfig(newConfig as ColumnsEditorColumn<CampaignDetailsTableMeta>[])\r\n        } else if (table === 'campaigns') {\r\n            setEditingCampaignsTableConfig(newConfig)\r\n        } else if (table === 'lists') {\r\n            setEditingCampaignListsTableConfig(newConfig)\r\n        }\r\n    }, [table, setEditingCampaignDetailsTableConfig, setEditingCampaignsTableConfig, setEditingCampaignListsTableConfig])\r\n\r\n\r\n    const onSave = useCallback(() => {\r\n        if (table === 'campaignDetails') {\r\n            assertDefined(campaignId)\r\n            const newConfig = convertCampaignDetailsConfigFromEditing(editingCampaignDetailsTableConfig)\r\n            updatePageConfig({\r\n                ...pageConfig,\r\n                CAMPAIGN_DETAILS_TABLE_COLUMNS_CONFIG: {\r\n                    ...pageConfig.CAMPAIGN_DETAILS_TABLE_COLUMNS_CONFIG,\r\n                    [campaignId]: newConfig,\r\n                },\r\n            })\r\n        } else if (table === 'campaigns') {\r\n            const newConfig = convertCampaignsConfigFromEditing(editingCampaignsTableConfig)\r\n            updatePageConfig({\r\n                ...pageConfig,\r\n                CAMPAIGNS_TABLE_COLUMNS_CONFIG: newConfig,\r\n            })\r\n        } else if (table === 'lists') {\r\n            const newConfig = convertCampaignListsConfigFromEditing(editingCampaignListsTableConfig)\r\n            updatePageConfig({\r\n                ...pageConfig,\r\n                CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG: newConfig,\r\n            })\r\n        }\r\n\r\n        onClose()\r\n    }, [\r\n        table,\r\n        campaignId,\r\n        editingCampaignDetailsTableConfig,\r\n        editingCampaignsTableConfig,\r\n        convertCampaignDetailsConfigFromEditing,\r\n        convertCampaignsConfigFromEditing,\r\n        updatePageConfig,\r\n        onClose,\r\n        pageConfig,\r\n        editingCampaignListsTableConfig,\r\n        convertCampaignListsConfigFromEditing,\r\n    ])\r\n\r\n    return (\r\n        <Modal\r\n            flex\r\n            onClose={onClose}\r\n            className=\"relative max-h-[calc(100vh-4rem)] !w-auto max-w-[calc(100vw-2em)] flex-col overflow-hidden\"\r\n            aria-labelledby=\"manage_metrics\"\r\n            data-testid=\"manageMetricsModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header id=\"manage_metrics\" role=\"heading\">\r\n                {t.SUPERVISION_PAGE.manage_metrics_modal_title()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className=\"flex flex-auto flex-col overflow-hidden\">\r\n                <ColumnsEditor\r\n                    value={editingConfig}\r\n                    onChange={onChange}\r\n                />\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                    data-testid=\"cancel-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={onSave} primary data-testid=\"ok-button\">\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {defaultCampaignDetailsTableColumnsConfig} from '@bpinc/ad-campaigns-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SectionHeader} from '../SectionHeader'\r\nimport {SectionTitle} from '../SectionTitle'\r\nimport {TableActionsButton} from '../TableActionsButton'\r\nimport {CampaignDetailsItem} from './CampaignDetailsItem'\r\nimport {useTableMenuOptions} from './useTableMenuOptions'\r\n\r\n\r\nexport const CampaignDetailsTable: React.FC = () => {\r\n    const t = useLocalizationState('t')\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const {subscribe, unsubscribe} = useCampaignsStateMethods()\r\n    const {pageConfig, selectedCampaignId} = useCampaignsState()\r\n\r\n    const columns = useMemo(() => {\r\n        if (!pageConfig || !selectedCampaign) {\r\n            return []\r\n        }\r\n\r\n        const campaignColumnsConfig =\r\n            pageConfig.CAMPAIGN_DETAILS_TABLE_COLUMNS_CONFIG[selectedCampaign.id]\r\n            || defaultCampaignDetailsTableColumnsConfig\r\n\r\n        const visibleColumns = campaignColumnsConfig.filter(column => column.isShown)\r\n\r\n        return visibleColumns\r\n    }, [pageConfig, selectedCampaign])\r\n\r\n    const getMenuOptions = useTableMenuOptions()\r\n\r\n    useEffect(() => {\r\n        subscribe('details')\r\n        return () => unsubscribe('details')\r\n    }, [subscribe, unsubscribe, selectedCampaignId])\r\n\r\n    return (\r\n        <div>\r\n            <SectionHeader className=\"mb-2\">\r\n                <SectionTitle title={t.CAMPAIGN_MONITOR.campaign_details_title(selectedCampaign?.fields?.name || '-')} />\r\n                <TableActionsButton getOptions={getMenuOptions} />\r\n            </SectionHeader>\r\n\r\n            <div className=\"mt-2 flex flex-wrap gap-y-2\">\r\n                {!selectedCampaign\r\n                    && (\r\n                        <div className=\"text-sm text-gray-500\">\r\n                            {t.CAMPAIGN_MONITOR.no_campaign_selected()}\r\n                        </div>\r\n                    )}\r\n\r\n                {columns.map(column => (\r\n                    <CampaignDetailsItem\r\n                        key={column.id}\r\n                        column={column}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ManageMetricsModal} from '../../modals/ManageMetricsModal'\r\nimport type {GetOptions} from '../TableActionsButton'\r\n\r\n\r\nexport function useTableMenuOptions(): GetOptions {\r\n    const {t} = useLocalizationState()\r\n    const openManageMetricsModal = useModalComponentOpener(ManageMetricsModal)\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const {startStopCampaign} = useCampaignsStateMethods()\r\n\r\n    const isRunning = selectedCampaign?.fields.state === 'RUNNING'\r\n\r\n    return useCallback(({toggleShow}) => [\r\n        {\r\n            children: t.SUPERVISION_PAGE.actions_menu_option_manage_metrics(),\r\n            onClick: () => {\r\n                openManageMetricsModal({campaignId: selectedCampaign?.id, table: 'campaignDetails'})\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: isRunning\r\n                ? t.CAMPAIGN_MONITOR.campaign_button_stopCampaign()\r\n                : t.CAMPAIGN_MONITOR.campaign_button_startCampaign(),\r\n            onClick: () => {\r\n                if (!selectedCampaign) {\r\n                    return\r\n                }\r\n                startStopCampaign(selectedCampaign.id, !isRunning)\r\n                toggleShow()\r\n            },\r\n        },\r\n    ], [openManageMetricsModal, t, selectedCampaign, startStopCampaign, isRunning])\r\n}\r\n","import {useCallback, useState} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useLocalStorageForState} from '@bpinc/ad-local-settings-context'\r\n\r\n\r\ntype CollapsedGroupsIds = {\r\n    [groupId: string]: boolean\r\n}\r\n\r\nconst initialState: CollapsedGroupsIds = {}\r\n\r\nexport function useCollapsedTableGroupsIds(tableName: TableName) {\r\n    const [collapsedGroupIds, setCollapsedGroupIds] = useState<CollapsedGroupsIds>(initialState)\r\n\r\n    const storageKey = getStorageKey(tableName)\r\n    useLocalStorageForState(collapsedGroupIds, storageKey, setCollapsedGroupIds, initialState)\r\n\r\n    const toggleCollapsedGroup = useCallback((groupId: string) => {\r\n        setCollapsedGroupIds(\r\n            produce(draft => {\r\n                draft[groupId] = !draft[groupId]\r\n            }),\r\n        )\r\n    }, [])\r\n\r\n    return {\r\n        collapsedGroupIds,\r\n        toggleCollapsedGroup,\r\n    }\r\n}\r\n\r\n\r\nconst storageKeyMap = {\r\n    campaigns: 'adCampaignsListTableCollapsedGroupIds',\r\n    details: 'adCampaignDetailsTableCollapsedGroupIds',\r\n    lists: 'adListsTableCollapsedGroupIds',\r\n} as const\r\n\r\ntype TableName = keyof typeof storageKeyMap\r\ntype StorageKey = typeof storageKeyMap[keyof typeof storageKeyMap]\r\nfunction getStorageKey<T extends TableName>(tableName: T): StorageKey {\r\n    return storageKeyMap[tableName] as StorageKey\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {SortingSettings, TableItem} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype TableDataParams = {\r\n    data: TableItem[]\r\n    sortingSettings?: SortingSettings\r\n}\r\n\r\nexport const useSortedTableData = ({\r\n    data,\r\n    sortingSettings,\r\n}: TableDataParams) => {\r\n    return useMemo(() => {\r\n        if (!sortingSettings) {\r\n            return data\r\n        }\r\n\r\n        const {column, sorting} = sortingSettings\r\n\r\n        return data.toSorted((a, b) => {\r\n            const [v1, v2] = [a[column], b[column]]\r\n\r\n            if (typeof v1 === 'number' && typeof v2 === 'number') {\r\n                return sorting === 'ASC' ? v1 - v2 : v2 - v1\r\n            }\r\n\r\n            if (typeof v1 === 'string' && typeof v2 === 'string') {\r\n                return sorting === 'ASC'\r\n                    ? v1.localeCompare(v2)\r\n                    : v2.localeCompare(v1)\r\n            }\r\n\r\n            return 0\r\n        })\r\n    }, [data, sortingSettings])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {GroupedTableColumnItem, GroupedTableColumnsConfig} from '@bpinc/ad-transport-types'\r\nimport {checkIsGroupedTableColumnGroup} from '@bpinc/ad-transport-types'\r\nimport type {ResizeTableColumn, ResizeTableColumnGroup} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nexport const useTableColumns = <T extends string>({\r\n    columnsConfig,\r\n    collapsedGroupIds,\r\n    localize,\r\n}: {\r\n    columnsConfig?: GroupedTableColumnsConfig<T>\r\n    collapsedGroupIds?: {[groupId: string]: boolean}\r\n    localize: (id: T) => string\r\n}) => {\r\n    const columnsConfigWithoutHidden = useMemo(() => {\r\n        if (!columnsConfig) {\r\n            return []\r\n        }\r\n\r\n        return columnsConfig.reduce<GroupedTableColumnsConfig<T>>((acc, item, i) => {\r\n            if (checkIsGroupedTableColumnGroup(item)) {\r\n                const collapsed = !!collapsedGroupIds?.[item.id]\r\n                const columns = item.columns.filter(c => c.isShown)\r\n\r\n                return [\r\n                    ...acc,\r\n                    {\r\n                        ...item,\r\n                        columns: collapsed\r\n                            ? columns.slice(0, 1)\r\n                            : columns,\r\n                    },\r\n                ]\r\n            }\r\n\r\n            return item.isShown\r\n                ? [...acc, item]\r\n                : acc\r\n        }, [])\r\n    }, [columnsConfig, collapsedGroupIds])\r\n\r\n    const columns = useMemo(() => {\r\n        const flatColumns = columnsConfigWithoutHidden.flatMap(it => {\r\n            if (checkIsGroupedTableColumnGroup(it)) {\r\n                return it.columns\r\n            }\r\n\r\n            return it\r\n        })\r\n\r\n        return flatColumns.map(configToTableColumn)\r\n\r\n        function configToTableColumn(item: GroupedTableColumnItem<T>): ResizeTableColumn {\r\n            return {\r\n                name: item.id,\r\n                title: item.customName || localize(item.id),\r\n                width: item.width,\r\n                align: 'start',\r\n                sticky: item.id === 'name',\r\n            }\r\n        }\r\n    }, [columnsConfigWithoutHidden, localize])\r\n\r\n    const groups = useMemo<ResizeTableColumnGroup[]>(() => {\r\n        // we need to wrap all root columns into groups\r\n        return columnsConfigWithoutHidden.reduce<ResizeTableColumnGroup[]>((acc, item, idx, arr) => {\r\n            if (checkIsGroupedTableColumnGroup(item)) {\r\n                if (!item.columns.length) {\r\n                    return acc\r\n                }\r\n\r\n                const collapsed = !!collapsedGroupIds?.[item.id]\r\n\r\n                acc.push({\r\n                    id: item.id,\r\n                    content: item.customName || localize(item.id),\r\n                    colspan: collapsed ? 1 : item.columns.length,\r\n                    collapsed,\r\n                })\r\n\r\n                return acc\r\n            }\r\n\r\n            const prevItem = arr[idx - 1]\r\n\r\n            // this item is not a group, and the previous one is not a group,\r\n            // so we need to increment the colspan of the last group\r\n            // it means that the current item is added to the previous group\r\n            if (!checkIsGroupedTableColumnGroup(prevItem)) {\r\n                let lastGroup = acc[acc.length - 1]\r\n\r\n                // if there is no group yet, create a new one\r\n                // for the first item\r\n                if (!lastGroup) {\r\n                    lastGroup = {\r\n                        colspan: 0,\r\n                        sticky: false,\r\n                        collapsed: false,\r\n                    }\r\n                    acc.push(lastGroup)\r\n                }\r\n\r\n                lastGroup.colspan++\r\n                return acc\r\n            }\r\n\r\n            // this item is not a group, and the previous one is a group,\r\n            // so we need to add a new group\r\n            acc.push({\r\n                colspan: 1,\r\n                sticky: false,\r\n                collapsed: false,\r\n            })\r\n\r\n            return acc\r\n        }, [])\r\n    }, [columnsConfigWithoutHidden, collapsedGroupIds, localize])\r\n\r\n    return {\r\n        columns,\r\n        groups,\r\n    }\r\n}\r\n","import {useCampaignsState, useCampaignsStateMethods} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignId, CampaignListId} from '@bpinc/ad-transport-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\n/**\r\n * Go to the remaining records tab.\r\n * If the tab is already opened, it will be selected.\r\n * If the tab is not opened, it will be opened and selected.\r\n */\r\nexport function useGoRemainingRecords() {\r\n    const {tabs} = useCampaignsState()\r\n    const {openTab, selectTab} = useCampaignsStateMethods()\r\n\r\n    return useEvent(({\r\n        listId,\r\n        campaignId,\r\n    }: {\r\n        listId: CampaignListId\r\n        campaignId: CampaignId\r\n    }) => {\r\n        const existingTab = tabs.find(it => it.type === 'listRemainingRecords'\r\n            && it.campaignId === campaignId\r\n            && it.listId === listId)\r\n\r\n        if (existingTab) {\r\n            selectTab(existingTab.id)\r\n            return\r\n        }\r\n\r\n        const newTabId = uuid()\r\n        openTab({\r\n            id: newTabId,\r\n            type: 'listRemainingRecords',\r\n            campaignId,\r\n            listId,\r\n        })\r\n        selectTab(newTabId)\r\n    })\r\n}\r\n","import React from 'react'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignListId} from '@bpinc/ad-transport-types'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useGoRemainingRecords} from './useGoRemainingRecords'\r\n\r\n\r\nexport const Remaining: React.FC<{\r\n    listId: CampaignListId\r\n    children: React.ReactNode\r\n}> = ({\r\n    listId,\r\n    children,\r\n}) => {\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const goRemainingRecords = useGoRemainingRecords()\r\n\r\n    const onClick = () => {\r\n        assertDefined(selectedCampaign)\r\n        goRemainingRecords({\r\n            campaignId: selectedCampaign.id,\r\n            listId,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"w-full overflow-hidden text-link hover:underline\"\r\n            onClick={onClick}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\n\r\nimport {useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignListId} from '@bpinc/ad-transport-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype StartStopTogglerProps = {\r\n    listId: CampaignListId\r\n}\r\n\r\nexport const StartStopToggle: React.FC<StartStopTogglerProps> = ({\r\n    listId,\r\n}) => {\r\n    const {enableDisableList} = useCampaignsStateMethods()\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const list = selectedCampaign?.lists.find(it => it.id === listId)\r\n\r\n    const isListEnabled = list?.metrics.is_enabled === '1'\r\n\r\n    const [isDisabled, setIsDisabled] = useState(false)\r\n\r\n    const handleToggle = useCallback(async (newIsEnabled: boolean) => {\r\n        if (isDisabled || !selectedCampaign?.id) {\r\n            return\r\n        }\r\n        setIsDisabled(true)\r\n        await enableDisableList(selectedCampaign.id, listId, newIsEnabled)\r\n    }, [enableDisableList, isDisabled, listId, selectedCampaign?.id])\r\n\r\n    useEffect(() => { // when the request is done, we can allow the user to interact with the toggle again\r\n        setIsDisabled(false)\r\n    }, [isListEnabled])\r\n\r\n    return (\r\n        <Checkbox\r\n            toggle\r\n            checked={isListEnabled}\r\n            disabled={isDisabled}\r\n            labelClassName={tcn('min-w-[50px]')}\r\n            onChange={handleToggle}\r\n        />\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ManageMetricsModal} from '../../modals/ManageMetricsModal'\r\nimport type {GetOptions} from '../TableActionsButton'\r\nimport {useGoRemainingRecords} from './useGoRemainingRecords'\r\n\r\n\r\nexport function useTableMenuOptions(): GetOptions {\r\n    const {t} = useLocalizationState()\r\n    const {enableDisableList} = useCampaignsStateMethods()\r\n    const openManageMetricsModal = useModalComponentOpener(ManageMetricsModal)\r\n    const {selectedListId} = useCampaignsState()\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const goRemainingRecords = useGoRemainingRecords()\r\n    const selectedList = selectedCampaign?.lists.find(it => it.id === selectedListId)\r\n\r\n    const isListEnabled = selectedList?.metrics.is_enabled\r\n\r\n    return useCallback(({toggleShow}) => [\r\n        {\r\n            children: t.SUPERVISION_PAGE.actions_menu_option_manage_metrics(),\r\n            onClick: () => {\r\n                openManageMetricsModal({table: 'lists'})\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: isListEnabled\r\n                ? t.CAMPAIGN_MONITOR.campaignTeam_button_disable()\r\n                : t.CAMPAIGN_MONITOR.campaignTeam_button_enable(),\r\n            disabled: !selectedList,\r\n            onClick: () => {\r\n                if (!selectedCampaign || !selectedList) {\r\n                    return\r\n                }\r\n                enableDisableList(selectedCampaign.id, selectedList.id, !isListEnabled)\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: t.CAMPAIGN_MONITOR.get_remaining_records(),\r\n            disabled: !selectedCampaign || !selectedList,\r\n            onClick: () => {\r\n                assertDefined(selectedCampaign)\r\n                assertDefined(selectedList)\r\n\r\n                goRemainingRecords({\r\n                    campaignId: selectedCampaign.id,\r\n                    listId: selectedList.id,\r\n                })\r\n                toggleShow()\r\n            },\r\n        },\r\n    ], [openManageMetricsModal, t, selectedCampaign, selectedList, enableDisableList, isListEnabled, goRemainingRecords])\r\n}\r\n","import React, {useCallback, useEffect, useMemo} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {campaignsListsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport type {CampaignListId, CampaignListsColumnGroup, CampaignListsColumnItem} from '@bpinc/ad-transport-types'\r\nimport {checkIsCampaignListsColumnGroup} from '@bpinc/ad-transport-types'\r\nimport type {ResizeTableColumnWidth, TableItem} from '@bpinc/lib-ui-elements'\r\nimport {ResizeTable, useSorting} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState, useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\nimport {useCollapsedTableGroupsIds} from '../../hooks/useCollapsedTableGroupsIds'\r\nimport {useSortedTableData} from '../../hooks/useSortedTableData'\r\nimport {useTableColumns} from '../../hooks/useTableColumns'\r\nimport {SectionHeader} from '../SectionHeader'\r\nimport {SectionTitle} from '../SectionTitle'\r\nimport {TableActionsButton} from '../TableActionsButton'\r\nimport {useItemRenderer} from './useItemRenderer'\r\nimport {useTableMenuOptions} from './useTableMenuOptions'\r\n\r\n\r\nexport const CampaignListsTable: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const localize = useLocalizeString()\r\n\r\n    const {pageConfig, selectedListId, selectedCampaignId} = useCampaignsState()\r\n    const {updatePageConfig, subscribe, unsubscribe, selectList} = useCampaignsStateMethods()\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const {sortingSettings, handleSortingChange} = useSorting()\r\n    const {collapsedGroupIds, toggleCollapsedGroup} = useCollapsedTableGroupsIds('lists')\r\n\r\n    const {columns, groups} = useTableColumns({\r\n        columnsConfig: pageConfig.CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG,\r\n        collapsedGroupIds,\r\n        localize: id => localize(campaignsListsColumnsLocalizationMap[id]) || id,\r\n    })\r\n\r\n    const data = useMemo<TableItem[]>(() => (selectedCampaign?.lists || []).map(item => ({\r\n        id: item.id,\r\n        ...item.metrics,\r\n    })), [selectedCampaign?.lists])\r\n\r\n    const sortedData = useSortedTableData({\r\n        data,\r\n        sortingSettings,\r\n    })\r\n\r\n    const handleRowClick = useCallback((row: TableItem) => {\r\n        selectList(row.id as CampaignListId)\r\n    }, [selectList])\r\n\r\n    const selectedRows = useMemo(\r\n        () => [selectedCampaign?.lists.findIndex(item => item.id === selectedListId) ?? -1],\r\n        [selectedCampaign?.lists, selectedListId],\r\n    )\r\n\r\n    useEffect(() => {\r\n        subscribe('lists')\r\n        return () => unsubscribe('lists')\r\n    }, [subscribe, unsubscribe, selectedCampaignId])\r\n\r\n    const handleColumnsResize = useCallback((resizedColumns: Record<string, ResizeTableColumnWidth>) => {\r\n        const newConfig = pageConfig.CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG.map(configItem => {\r\n            if (!checkIsCampaignListsColumnGroup(configItem)) {\r\n                return getUpdatedColumn(configItem)\r\n            }\r\n\r\n            const newGroup: CampaignListsColumnGroup = {\r\n                ...configItem,\r\n                columns: configItem.columns.map(getUpdatedColumn),\r\n            }\r\n\r\n            return newGroup\r\n\r\n            function getUpdatedColumn(column: CampaignListsColumnItem) {\r\n                if (!(column.id in resizedColumns)) {\r\n                    return column\r\n                }\r\n\r\n                const newColumnWidth = resizedColumns[column.id]\r\n                const newColumnItem: CampaignListsColumnItem = {\r\n                    ...column,\r\n                    width: newColumnWidth,\r\n                }\r\n                return newColumnItem\r\n            }\r\n        })\r\n\r\n        updatePageConfig({\r\n            ...pageConfig,\r\n            CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG: newConfig,\r\n        })\r\n    }, [pageConfig, updatePageConfig])\r\n\r\n    return (\r\n        <>\r\n            <SectionHeader className=\"mb-2\">\r\n                <SectionTitle title={t.CAMPAIGN_MONITOR.campaignMonitor_lists_heading()} />\r\n                <TableActionsButton getOptions={useTableMenuOptions()} />\r\n            </SectionHeader>\r\n\r\n            <ResizeTable\r\n                columns={columns}\r\n                groups={groups}\r\n                data={sortedData}\r\n                sortingSettings={sortingSettings}\r\n                onSortingChange={handleSortingChange}\r\n                toggleCollapsedGroup={toggleCollapsedGroup}\r\n                onColumnsResize={handleColumnsResize}\r\n                isColumnResizable\r\n                isResizable\r\n                hasGrid\r\n                onRowClick={handleRowClick}\r\n                selectedRows={selectedRows}\r\n                renderItem={useItemRenderer()}\r\n                scrollEnabled\r\n                defaultHeight={220}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {CampaignListId} from '@bpinc/ad-transport-types'\r\nimport {SmProgress} from '@bpinc/lib-external-ui-elements'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport {type ItemRendererType, type ResizeTableColumn, type TableItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {Remaining} from './Remaining'\r\nimport {StartStopToggle} from './StartStopToggle'\r\n\r\n\r\nexport const useItemRenderer = () => {\r\n    const renderTime = useCallback((value: unknown): React.ReactNode => {\r\n        if (typeof value !== 'string' && typeof value !== 'number') {\r\n            return null\r\n        }\r\n\r\n        const time = formatDurationShort(value)\r\n        return time\r\n    }, [])\r\n\r\n    const renderAnything = useCallback((value: unknown): React.ReactNode => {\r\n        if (typeof value !== 'string' && typeof value !== 'number') {\r\n            return null\r\n        }\r\n        return `${value}`\r\n    }, [])\r\n\r\n    return useCallback((item: TableItem, column: ResizeTableColumn): ItemRendererType => {\r\n        const itemValue = item[column.name]\r\n\r\n        switch (column.name) {\r\n            case 'records_completed_ratio': {\r\n                return {\r\n                    value: <SmProgress percent={item.records_completed_ratio as string} className=\"mb-0\" progress=\"percent\" success />,\r\n                    meta: undefined,\r\n                }\r\n            }\r\n\r\n            case 'list_last_updated': {\r\n                return {\r\n                    value: renderTime(itemValue),\r\n                    meta: undefined,\r\n                }\r\n            }\r\n\r\n            case 'is_enabled': {\r\n                return {\r\n                    value: <StartStopToggle listId={item.list_id as CampaignListId} />,\r\n                    meta: undefined,\r\n                }\r\n            }\r\n\r\n            case 'records_remaining': {\r\n                return {\r\n                    value: (\r\n                        <Remaining listId={item.list_id as CampaignListId}>\r\n                            {renderAnything(itemValue)}\r\n                        </Remaining>\r\n                    ),\r\n                    meta: undefined,\r\n                }\r\n            }\r\n\r\n            case 'name':\r\n            case 'priority':\r\n            case 'ratio':\r\n            case 'records_total':\r\n            case 'records_dialable':\r\n            case 'records_completed':\r\n            case 'records_completed_per_day':\r\n            case 'records_in_dnc':\r\n            case 'records_expired':\r\n            case 'records_with_assigned_agents_completed':\r\n            case 'records_with_assigned_agents_remaining':\r\n            default: {\r\n                return {\r\n                    value: renderAnything(itemValue),\r\n                    meta: undefined,\r\n                }\r\n            }\r\n        }\r\n    }, [renderAnything, renderTime])\r\n}\r\n","import React, {useCallback, useDeferredValue, useMemo, useState} from 'react'\r\n\r\nimport {useCampaignsState} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignId} from '@bpinc/ad-transport-types'\r\nimport {getElementFontString, useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getFitStrings} from '../../utils/getFitStrings'\r\n\r\n\r\nexport const CampaignsTableTeams: React.FC<{\r\n    campaignId: CampaignId\r\n}> = ({\r\n    campaignId,\r\n}) => {\r\n    const t = useLocalizationState('t')\r\n    const {campaignItems} = useCampaignsState()\r\n\r\n    const allCampaignTeamsNames = useMemo(() => {\r\n        const campaign = campaignItems.find(item => item.id === campaignId)\r\n        if (!campaign) {\r\n            return []\r\n        }\r\n        const teams = campaign?.teams || []\r\n        const teamNames = teams.map(team => team.name || '')\r\n        return teamNames\r\n    }, [campaignItems, campaignId])\r\n\r\n    const [containerEl, setContainerEl] = useState<HTMLElement | null>(null)\r\n    const wrapperResizeObserver = useResizeObserver(containerEl)\r\n\r\n    const containerWidth = wrapperResizeObserver?.contentRect.width || 0\r\n    const defferedContainerWidth = useDeferredValue(containerWidth)\r\n\r\n    const [textEl, setTextEl] = useState<HTMLElement | null>(null)\r\n\r\n    const font = useMemo(() => {\r\n        if (!textEl) {\r\n            return undefined\r\n        }\r\n\r\n        return getElementFontString(textEl)\r\n    }, [textEl])\r\n\r\n    const after = useCallback(({restCount}: {restCount: number}) => {\r\n        if (restCount === 0) {\r\n            return ''\r\n        }\r\n\r\n        return t.KNOWLEDGE_BASE.plus_more(restCount)\r\n    }, [t])\r\n\r\n    const {\r\n        fittedList,\r\n        restCount,\r\n    } = useMemo(() => {\r\n        if (!font) {\r\n            return {\r\n                fittedList: [],\r\n                restCount: 0,\r\n            }\r\n        }\r\n\r\n        const fittedListInner = getFitStrings({\r\n            strings: allCampaignTeamsNames,\r\n            containerWidth: defferedContainerWidth,\r\n            font,\r\n            after,\r\n        })\r\n\r\n        const restCountInner = allCampaignTeamsNames.length - fittedListInner.length\r\n\r\n        return {\r\n            fittedList: fittedListInner,\r\n            restCount: restCountInner,\r\n        }\r\n    }, [defferedContainerWidth, allCampaignTeamsNames, font, after])\r\n\r\n    const text = fittedList.join(', ') + (after?.({restCount}) || '')\r\n\r\n    const onClick = useCallback((e: React.MouseEvent) => {\r\n        e.stopPropagation()\r\n        console.log('TODO: show teams modal')\r\n    }, [])\r\n\r\n    return (\r\n        <button\r\n            ref={setContainerEl}\r\n            className=\"w-full overflow-hidden text-link hover:underline\"\r\n            onClick={onClick}\r\n        >\r\n            <span ref={setTextEl} className=\"whitespace-nowrap\">\r\n                {text}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n","import {calculateTextWidth} from '@bpinc/lib-helpers'\r\n\r\n\r\ntype GetFitStringsAfter = ({restCount}: {restCount: number}) => string\r\n\r\n/**\r\n * Get the strings that fit in a container width\r\n */\r\nexport function getFitStrings({\r\n    strings,\r\n    font,\r\n    containerWidth,\r\n    after,\r\n}: {\r\n    /** The strings to fit */\r\n    strings: string[]\r\n    /** The width of the container */\r\n    containerWidth: number\r\n    /** The font to use. Example: 'italic small-caps bold 12px/30px Arial' */\r\n    font: string\r\n    /** * A function that returns the text to append after the fitted strings */\r\n    after?: GetFitStringsAfter\r\n}) {\r\n    const {fittedStrings} = strings.reduce<{\r\n        isEnough: boolean\r\n        fittedStrings: string[]\r\n    }>((acc, it) => {\r\n        if (acc.isEnough) {\r\n            return acc\r\n        }\r\n\r\n        const nextFittedStrings = [...acc.fittedStrings, it]\r\n        const nextRestCount = strings.length - nextFittedStrings.length\r\n        const afterText = after?.({restCount: nextRestCount}) || ''\r\n        const nextText = nextFittedStrings.join(', ') + afterText\r\n        const nextTextWidth = calculateTextWidth(nextText, font)\r\n\r\n        if (nextTextWidth > containerWidth) {\r\n            acc.isEnough = true\r\n        } else {\r\n            acc.fittedStrings = nextFittedStrings\r\n        }\r\n\r\n        return acc\r\n\r\n    }, {\r\n        isEnough: false,\r\n        fittedStrings: [],\r\n    })\r\n\r\n    return fittedStrings\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\n\r\nimport {useCampaignsStateMethods} from '@bpinc/ad-campaigns-state-context'\r\nimport type {CampaignId} from '@bpinc/ad-transport-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype StartStopTogglerProps = {\r\n    campaignId: CampaignId\r\n    campaignState: string\r\n}\r\n\r\nexport const StartStopToggle: React.FC<StartStopTogglerProps> = ({\r\n    campaignId,\r\n    campaignState,\r\n}) => {\r\n    const {startStopCampaign} = useCampaignsStateMethods()\r\n\r\n    const isRunning = campaignState === 'RUNNING'\r\n\r\n    const [isDisabled, setIsDisabled] = useState(false)\r\n\r\n    const handleToggle = useCallback(async (isActive: boolean) => {\r\n        if (isDisabled) {\r\n            return\r\n        }\r\n        setIsDisabled(true)\r\n        await startStopCampaign(campaignId, isActive)\r\n    }, [startStopCampaign, campaignId, isDisabled])\r\n\r\n    useEffect(() => { // when the request is done, we can allow the user to interact with the toggle again\r\n        setIsDisabled(false)\r\n    }, [campaignState])\r\n\r\n    return (\r\n        <Checkbox\r\n            toggle\r\n            checked={isRunning}\r\n            disabled={isDisabled}\r\n            labelClassName={tcn('min-w-[50px]')}\r\n            onChange={handleToggle}\r\n        />\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ManageMetricsModal} from '../../modals/ManageMetricsModal'\r\nimport type {GetOptions} from '../TableActionsButton'\r\n\r\n\r\nexport function useTableMenuOptions(): GetOptions {\r\n    const {t} = useLocalizationState()\r\n    const openManageMetricsModal = useModalComponentOpener(ManageMetricsModal)\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const {startStopCampaign, restoreDefaultConfig} = useCampaignsStateMethods()\r\n\r\n    const isRunning = selectedCampaign?.fields.state === 'RUNNING'\r\n\r\n    return useCallback(({toggleShow}) => [\r\n        {\r\n            children: t.SUPERVISION_PAGE.actions_menu_option_manage_metrics(),\r\n            onClick: () => {\r\n                openManageMetricsModal({campaignId: undefined, table: 'campaigns'})\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: t.SUPERVISION_PAGE.actions_menu_option_restore_default_view(),\r\n            onClick: () => {\r\n                restoreDefaultConfig('CAMPAIGNS_TABLE_COLUMNS_CONFIG')\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: isRunning\r\n                ? t.CAMPAIGN_MONITOR.campaign_button_stopCampaign()\r\n                : t.CAMPAIGN_MONITOR.campaign_button_startCampaign(),\r\n            onClick: () => {\r\n                if (!selectedCampaign) {\r\n                    return\r\n                }\r\n                startStopCampaign(selectedCampaign.id, !isRunning)\r\n                toggleShow()\r\n            },\r\n        },\r\n        {\r\n            children: t.CAMPAIGN_MONITOR.assign_and_delete_teams(),\r\n            disabled: true,\r\n            onClick: () => {\r\n                // TODO\r\n            },\r\n        },\r\n        {\r\n            children: t.CAMPAIGN_MONITOR.open_settings(),\r\n            disabled: true,\r\n            onClick: () => {\r\n                // TODO WebPortal->Services and Campaigns-><Service>->Properties\r\n            },\r\n        },\r\n    ], [openManageMetricsModal, t, selectedCampaign, startStopCampaign, isRunning])\r\n}\r\n","import React, {useCallback, useEffect, useMemo} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods} from '@bpinc/ad-campaigns-state-context'\r\nimport {campaignsColumnsLocalizationMap} from '@bpinc/ad-campaigns-state-types'\r\nimport {\r\n    type CampaignId,\r\n    type CampaignsTableColumnGroup,\r\n    type CampaignsTableColumnItem,\r\n    checkIsCampaignsTableColumnGroup,\r\n} from '@bpinc/ad-transport-types'\r\nimport type {ResizeTableColumnWidth, TableItem} from '@bpinc/lib-ui-elements'\r\nimport {ResizeTable, useSorting} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState, useLocalizeString} from '@bpinc/state-localization-context'\r\n\r\nimport {useCollapsedTableGroupsIds} from '../../hooks/useCollapsedTableGroupsIds'\r\nimport {useSortedTableData} from '../../hooks/useSortedTableData'\r\nimport {useTableColumns} from '../../hooks/useTableColumns'\r\nimport {SectionHeader} from '../SectionHeader'\r\nimport {SectionTitle} from '../SectionTitle'\r\nimport {TableActionsButton} from '../TableActionsButton'\r\nimport {useItemRenderer} from './useItemRenderer'\r\nimport {useTableMenuOptions} from './useTableMenuOptions'\r\n\r\n\r\nexport const CampaignsTable: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const localize = useLocalizeString()\r\n    const {campaignItems, selectedCampaignId, pageConfig} = useCampaignsState()\r\n    const {selectCampaign, updatePageConfig, subscribe, unsubscribe} = useCampaignsStateMethods()\r\n\r\n    useEffect(() => {\r\n        subscribe('campaigns')\r\n        return () => unsubscribe('campaigns')\r\n    }, [subscribe, unsubscribe])\r\n\r\n    const {collapsedGroupIds, toggleCollapsedGroup} = useCollapsedTableGroupsIds('campaigns')\r\n\r\n    const {columns, groups} = useTableColumns({\r\n        columnsConfig: pageConfig.CAMPAIGNS_TABLE_COLUMNS_CONFIG,\r\n        collapsedGroupIds,\r\n        localize: id => localize(campaignsColumnsLocalizationMap[id]),\r\n    })\r\n\r\n    const handleRowClick = useCallback((row: TableItem) => {\r\n        selectCampaign(row.id as CampaignId)\r\n    }, [selectCampaign])\r\n\r\n    const handleColumnsResize = useCallback((resizedColumns: Record<string, ResizeTableColumnWidth>) => {\r\n        const newConfig = pageConfig.CAMPAIGNS_TABLE_COLUMNS_CONFIG.map(configItem => {\r\n            if (!checkIsCampaignsTableColumnGroup(configItem)) {\r\n                return getUpdatedColumn(configItem)\r\n            }\r\n\r\n            const newGroup: CampaignsTableColumnGroup = {\r\n                ...configItem,\r\n                columns: configItem.columns.map(getUpdatedColumn),\r\n            }\r\n\r\n            return newGroup\r\n\r\n            function getUpdatedColumn(column: CampaignsTableColumnItem) {\r\n                if (!(column.id in resizedColumns)) {\r\n                    return column\r\n                }\r\n\r\n                const newColumnWidth = resizedColumns[column.id]\r\n                const newColumnItem: CampaignsTableColumnItem = {\r\n                    ...column,\r\n                    width: newColumnWidth,\r\n                }\r\n                return newColumnItem\r\n            }\r\n        })\r\n\r\n        updatePageConfig({\r\n            ...pageConfig,\r\n            CAMPAIGNS_TABLE_COLUMNS_CONFIG: newConfig,\r\n        })\r\n    }, [pageConfig, updatePageConfig])\r\n\r\n    const {sortingSettings, handleSortingChange} = useSorting()\r\n\r\n    const selectedRows = useMemo(\r\n        () => [campaignItems.findIndex(item => item.id === selectedCampaignId)],\r\n        [campaignItems, selectedCampaignId],\r\n    )\r\n\r\n    const data = useMemo<TableItem[]>(() => campaignItems.map(item => ({\r\n        id: item.id,\r\n        ...item.fields,\r\n    })), [campaignItems])\r\n\r\n    const sortedData = useSortedTableData({\r\n        data,\r\n        sortingSettings,\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <SectionHeader className=\"mb-2\">\r\n                <SectionTitle title={t.CAMPAIGN_MONITOR.campaignMonitor_heading()} />\r\n                <TableActionsButton getOptions={useTableMenuOptions()} />\r\n            </SectionHeader>\r\n\r\n            <ResizeTable\r\n                columns={columns}\r\n                groups={groups}\r\n                data={sortedData}\r\n                sortingSettings={sortingSettings}\r\n                onSortingChange={handleSortingChange}\r\n                onRowClick={handleRowClick}\r\n                toggleCollapsedGroup={toggleCollapsedGroup}\r\n                onColumnsResize={handleColumnsResize}\r\n                isColumnResizable\r\n                isResizable\r\n                hasGrid\r\n                selectedRows={selectedRows}\r\n                renderItem={useItemRenderer()}\r\n                scrollEnabled\r\n                defaultHeight={220}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {CampaignId} from '@bpinc/ad-transport-types'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport {type ItemRendererType, type ResizeTableColumn, type TableItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {CampaignsTableTeams} from './CampaignsTableTeams'\r\nimport {StartStopToggle} from './StartStopToggle'\r\n\r\n\r\nexport const useItemRenderer = () => {\r\n    const renderTime = useCallback((value: unknown): React.ReactNode => {\r\n        if (typeof value !== 'string' && typeof value !== 'number') {\r\n            return null\r\n        }\r\n\r\n        const time = formatDurationShort(value)\r\n        return time\r\n    }, [])\r\n\r\n    const renderAnything = useCallback((value: unknown): React.ReactNode => {\r\n        if (typeof value !== 'string' && typeof value !== 'number') {\r\n            return null\r\n        }\r\n        return `${value}`\r\n    }, [])\r\n\r\n    return useCallback((item: TableItem, column: ResizeTableColumn): ItemRendererType => {\r\n        const itemValue = item[column.name]\r\n        const campaignId = item.id as CampaignId\r\n\r\n        switch (column.name) {\r\n            case 'out_calls_duration_average_per_day':\r\n            case 'out_calls_duration_total_per_day':\r\n            case 'in_max_wait_time': {\r\n                return {\r\n                    value: renderTime(item[column.name]),\r\n                    meta: undefined,\r\n                }\r\n            }\r\n            case 'running': {\r\n                return {\r\n                    value: <StartStopToggle campaignId={campaignId} campaignState={item.state as string} />,\r\n                    meta: undefined,\r\n                }\r\n            }\r\n            case 'teams': {\r\n                return {\r\n                    value: <CampaignsTableTeams campaignId={campaignId} />,\r\n                    meta: undefined,\r\n                }\r\n            }\r\n            case 'name':\r\n            case 'out_campaign_mode':\r\n            case 'out_average_success_rate':\r\n            case 'out_calls_in_ivr':\r\n            case 'out_calls_active_on_agents':\r\n            case 'out_calls_in_progress':\r\n            case 'out_calls_current_call_rate':\r\n            case 'out_campaign_duration_forecast':\r\n            case 'agent_occupancy':\r\n            case 'agents_logged':\r\n            case 'agents_ready':\r\n            case 'agents_busy':\r\n            case 'agents_in_wrap_up':\r\n            case 'agents_not_ready':\r\n            case 'records_total':\r\n            case 'records_dialable':\r\n            case 'records_remaining':\r\n            case 'records_completed':\r\n            case 'records_completed_ratio':\r\n            case 'records_in_dnc':\r\n            case 'records_expired':\r\n            case 'records_with_assigned_agents_completed':\r\n            case 'records_with_assigned_agents_remaining':\r\n            case 'out_calls_placed_per_day':\r\n            case 'out_calls_answered_per_day':\r\n            case 'out_calls_answered_ratio_per_day':\r\n            case 'out_calls_failed_per_day':\r\n            case 'out_calls_abandoned_per_day':\r\n            case 'out_calls_abandoned_ratio_per_day':\r\n            case 'out_calls_abandoned_in_ivr_per_day':\r\n            case 'out_calls_abandoned_in_ivr_ratio_per_day':\r\n            case 'out_calls_abandoned_in_queue_per_day':\r\n            case 'out_calls_abandoned_in_queue_ratio_per_day':\r\n            case 'out_calls_abandoned_ringing_per_day':\r\n            case 'out_calls_unattended_per_day':\r\n            case 'out_calls_unattended_ratio_per_day':\r\n            case 'out_calls_dropped_in_ivr_per_day':\r\n            case 'out_calls_dropped_in_queue_per_day':\r\n            case 'out_calls_routed_per_day':\r\n            case 'out_calls_handled_per_day':\r\n            case 'out_calls_transferred_per_day':\r\n            case 'out_calls_dropped_talking_per_day':\r\n            case 'out_calls_disconnected_talking_per_day':\r\n            case 'records_attempted_per_day':\r\n            case 'records_attempted_ratio_per_day':\r\n            case 'records_completed_per_day':\r\n            case 'records_completed_ratio_per_day':\r\n            default: {\r\n                return {\r\n                    value: renderAnything(itemValue),\r\n                    meta: undefined,\r\n                }\r\n            }\r\n        }\r\n    }, [renderAnything, renderTime])\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {type DispositionsPieConfig, dispositionMetricPrefix} from '@bpinc/ad-transport-types'\r\nimport {Chart as Highchart} from '@bpinc/lib-highcharts'\r\nimport {assertDefined, typedEntries} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport function Chart({\r\n    pieConfig,\r\n}: {\r\n    pieConfig: DispositionsPieConfig | undefined\r\n}) {\r\n    const selectedCampaign = useSelectedCampaign()\r\n\r\n    const allMetricsSumm = useMemo(() => {\r\n        if (!selectedCampaign) {\r\n            return 0\r\n        }\r\n\r\n        return typedEntries(selectedCampaign.dispositionsMetrics).reduce((acc, [key, value]) => {\r\n            return acc + Number(value)\r\n        }, 0)\r\n    }, [selectedCampaign])\r\n\r\n    const dispositionsViewItems = useMemo(() => {\r\n        if (!pieConfig || !selectedCampaign) {\r\n            return []\r\n        }\r\n\r\n        return selectedCampaign.dispositions\r\n            .filter(disposition => {\r\n                const dispositionConfig = pieConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n                return dispositionConfig?.isShownOnPie\r\n            })\r\n            .map(disposition => {\r\n                const dispositionConfig = pieConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n                assertDefined(dispositionConfig, 'Desposition config not found')\r\n\r\n                const metricId = `${dispositionMetricPrefix}${disposition.id}` as const\r\n                const metricCount = Number(selectedCampaign.dispositionsMetrics[metricId] || 0)\r\n                const dispositionPercent = (metricCount / allMetricsSumm) * 100\r\n\r\n                return {\r\n                    name: disposition.name,\r\n                    y: dispositionPercent,\r\n                    color: dispositionConfig.color,\r\n                }\r\n            })\r\n    }, [pieConfig, selectedCampaign, allMetricsSumm])\r\n\r\n    const groupsViewItems = useMemo(() => {\r\n        if (!pieConfig || !selectedCampaign) {\r\n            return []\r\n        }\r\n\r\n        const groupNames = Array.from(new Set(selectedCampaign.dispositions.map(it => it.group)))\r\n        return groupNames.map(groupName => {\r\n            const groupConfig = pieConfig.groups.find(it => it.name === groupName)\r\n            assertDefined(groupConfig, 'Group config not found')\r\n\r\n            const count = selectedCampaign.dispositions\r\n                .filter(it => it.group === groupName)\r\n                .reduce((acc, disposition) => {\r\n                    const metricId = `${dispositionMetricPrefix}${disposition.id}` as const\r\n                    const metricCount = Number(selectedCampaign.dispositionsMetrics[metricId] || 0)\r\n                    return acc + metricCount\r\n                }, 0)\r\n\r\n            const percent = (count / allMetricsSumm) * 100\r\n\r\n            return {\r\n                name: groupName,\r\n                y: percent,\r\n                color: groupConfig.color,\r\n            }\r\n        })\r\n    }, [pieConfig, selectedCampaign, allMetricsSumm])\r\n\r\n    const seriesItems = useMemo(() => {\r\n        if (allMetricsSumm === 0) {\r\n            return [{\r\n                name: 'No data',\r\n                y: 100,\r\n                color: '#cccccc',\r\n            }]\r\n        }\r\n\r\n        return pieConfig?.displayMode === 'dispositions'\r\n            ? dispositionsViewItems\r\n            : groupsViewItems\r\n    }, [allMetricsSumm, pieConfig, dispositionsViewItems, groupsViewItems])\r\n\r\n    const chartOptions = useMemo<Highcharts.Options>(() => {\r\n        return {\r\n            chart: {\r\n                plotBorderWidth: 0,\r\n                plotShadow: false,\r\n                type: 'pie',\r\n                height: 200,\r\n            },\r\n            title: {\r\n                text: '',\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<b>{point.percentage:.1f}%</b>',\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    cursor: 'pointer',\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        format: '{point.percentage:.1f}%',\r\n                        distance: -30,\r\n                        filter: {\r\n                            property: 'percentage',\r\n                            operator: '>',\r\n                            value: 4,\r\n                        },\r\n                    },\r\n                },\r\n                series: {\r\n                    animation: {\r\n                        duration: 0,\r\n                    },\r\n                },\r\n            },\r\n            series: [{\r\n                type: 'pie',\r\n                data: seriesItems,\r\n            }],\r\n        } satisfies Highcharts.Options\r\n    }, [seriesItems])\r\n\r\n    return (\r\n        <div>\r\n            <Highchart options={chartOptions} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport type {DispositionsPieConfig} from '@bpinc/ad-transport-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {OnColorChange} from './types'\r\nimport {useLegendItems} from './useLegendItems'\r\n\r\n\r\nexport function Legend({\r\n    pieConfig,\r\n    onChangeColor,\r\n}: {\r\n    pieConfig: DispositionsPieConfig | undefined\r\n    onChangeColor?: OnColorChange\r\n}) {\r\n    const {t} = useLocalizationState()\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const legendItems = useLegendItems(pieConfig)\r\n\r\n    const throttledChangeColor = useMemo(() => throttle((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        onChangeColor?.(e.target.dataset.dispositionId!, e.target.value)\r\n    }, 200), [onChangeColor])\r\n\r\n    if (!selectedCampaign) {\r\n        return (\r\n            <div className=\"flex justify-center py-2\">\r\n                {t.CAMPAIGN_MONITOR.no_campaign_selected()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (!legendItems.length) {\r\n        return (\r\n            <div className=\"flex justify-center py-2\">\r\n                {t.CAMPAIGN_MONITOR.no_dispositions()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p className=\"shrink-0 text-right font-bold\">\r\n                {t.CAMPAIGN_MONITOR.count()}\r\n            </p>\r\n\r\n            <div className={tcn('grow overflow-auto pb-2 pr-1')}>\r\n                {legendItems.map(legendItem => (\r\n                    <div key={legendItem.id} className=\"mb-1 flex w-full justify-between gap-2\">\r\n                        <div className=\"relative flex gap-2\">\r\n                            <label>\r\n                                {onChangeColor && (\r\n                                    <input\r\n                                        type=\"color\"\r\n                                        data-disposition-id={legendItem.id}\r\n                                        className=\"absolute z-[-1] opacity-0\"\r\n                                        onChange={throttledChangeColor}\r\n                                        value={legendItem.color}\r\n                                    />\r\n                                )}\r\n                                <div\r\n                                    className=\"pointer relative top-1 size-3\"\r\n                                    style={{backgroundColor: legendItem.color}}\r\n                                />\r\n                            </label>\r\n                            <p className=\"min-w-1/2 max-w-40 shrink-0\">{legendItem.name}</p>\r\n                        </div>\r\n\r\n                        <p className=\"text-wrap\">{legendItem.count}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport type {DispositionsPieConfig} from '@bpinc/ad-transport-types'\r\nimport {dispositionMetricPrefix} from '@bpinc/ad-transport-types'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {LegendItem} from './types'\r\n\r\n\r\nexport function useLegendItems(pieConfig: DispositionsPieConfig | undefined) {\r\n    const selectedCampaign = useSelectedCampaign()\r\n\r\n    const dispositionsViewItems = useMemo(() => {\r\n        if (\r\n            !selectedCampaign ||\r\n            !pieConfig ||\r\n            pieConfig.dispositions.length === 0\r\n        ) {\r\n            return []\r\n        }\r\n\r\n        const shownDispositions = selectedCampaign?.dispositions.reduce<LegendItem[]>((acc, disposition) => {\r\n            const dispositionConfig = pieConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n\r\n            const isShown = dispositionConfig?.isShownOnLegend ?? true\r\n\r\n            if (!dispositionConfig || !isShown) {\r\n                return acc\r\n            }\r\n\r\n            const dispositionMetricId = `${dispositionMetricPrefix}${disposition.id}` as const\r\n            const metricStringValue = selectedCampaign.dispositionsMetrics[dispositionMetricId]\r\n            const metricValue = Number(metricStringValue)\r\n            const count = Number.isNaN(metricValue) ? 0 : metricValue\r\n\r\n            return [\r\n                ...acc,\r\n                {\r\n                    id: disposition.id,\r\n                    color: dispositionConfig?.color,\r\n                    name: disposition.name,\r\n                    count,\r\n                },\r\n            ]\r\n        }, [])\r\n\r\n        return shownDispositions || []\r\n    }, [selectedCampaign, pieConfig])\r\n\r\n    const groupsViewItems = useMemo(() => {\r\n        if (!selectedCampaign) {\r\n            return []\r\n        }\r\n\r\n        const groupNames = Array.from(new Set(\r\n            selectedCampaign.dispositions.map(it => it.group),\r\n        ))\r\n        return groupNames.map<LegendItem>(groupName => {\r\n            const groupConfig = pieConfig?.groups.find(it => it.name === groupName)\r\n            assertDefined(groupConfig, `Group config for ${groupName} not found`)\r\n\r\n            const dispositionsOfTheGroup = selectedCampaign.dispositions.filter(it => it.group === groupName)\r\n\r\n            const count = dispositionsOfTheGroup.reduce((countAcc, disposition) => {\r\n                const dispositionMetricId = `${dispositionMetricPrefix}${disposition.id}` as const\r\n                const metricStringValue = selectedCampaign.dispositionsMetrics[dispositionMetricId]\r\n                const metricValue = Number(metricStringValue)\r\n                const dispositionCount = Number.isNaN(metricValue) ? 0 : metricValue\r\n\r\n                return countAcc + dispositionCount\r\n            }, 0)\r\n\r\n            return {\r\n                id: groupName,\r\n                color: groupConfig?.color,\r\n                name: groupName,\r\n                count,\r\n            }\r\n        }, [])\r\n    }, [selectedCampaign, pieConfig?.groups])\r\n\r\n    const legendItems = useMemo(() => {\r\n        return pieConfig?.displayMode === 'dispositions'\r\n            ? dispositionsViewItems\r\n            : groupsViewItems\r\n    }, [pieConfig?.displayMode, dispositionsViewItems, groupsViewItems])\r\n\r\n    return legendItems\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\n\r\nimport type {DispositionsPieConfig} from '@bpinc/ad-transport-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {OnColorTitle} from './types'\r\n\r\n\r\nexport function Title({\r\n    pieConfig,\r\n    onChangeTitle,\r\n}: {\r\n    pieConfig: DispositionsPieConfig | undefined\r\n    onChangeTitle?: OnColorTitle\r\n}) {\r\n    const {t} = useLocalizationState()\r\n\r\n    const [editableTitle, setEditableTitle] = useState('')\r\n\r\n    const defaultTitle = t.CAMPAIGN_MONITOR.default_pie_title()\r\n\r\n    const setDefaultTitle = () => {\r\n        setEditableTitle(pieConfig?.title || defaultTitle)\r\n    }\r\n\r\n    useEffect(() => { // update the title when the pieConfig changes\r\n        setDefaultTitle()\r\n    }, [pieConfig?.title])\r\n\r\n    const onFocus = () => {\r\n        setDefaultTitle()\r\n    }\r\n\r\n    const onBlur = () => {\r\n        onChangeTitle?.(editableTitle)\r\n        setDefaultTitle()\r\n    }\r\n\r\n    return (\r\n        <div className=\"px-6\">\r\n            {onChangeTitle && (\r\n                <input\r\n                    className=\"w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-xl\"\r\n                    value={editableTitle}\r\n                    onChange={e => setEditableTitle?.(e.target.value)}\r\n                    onFocus={onFocus}\r\n                    onBlur={onBlur}\r\n                />\r\n            )}\r\n            {!onChangeTitle && (\r\n                <p className=\"text-xl\">{editableTitle}</p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {DispositionsPieConfig} from '@bpinc/ad-transport-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {Chart} from './Chart'\r\nimport {Legend} from './Legend'\r\nimport {Title} from './Title'\r\nimport type {OnColorChange, OnColorTitle} from './types'\r\n\r\n\r\nexport function ControlledDispositionsPie({\r\n    pieConfig,\r\n    onChangeColor,\r\n    onChangeTitle,\r\n    className,\r\n}: {\r\n    pieConfig: DispositionsPieConfig | undefined\r\n    onChangeColor?: OnColorChange\r\n    onChangeTitle?: OnColorTitle\r\n    className?: string\r\n}) {\r\n    return (\r\n        <div className={tcn('flex h-full flex-col items-stretch overflow-hidden', className)}>\r\n            <Title pieConfig={pieConfig} onChangeTitle={onChangeTitle} />\r\n\r\n            <div className=\"mt-2 flex grow overflow-hidden pr-6\">\r\n                <div className=\"w-52 shrink-0\">\r\n                    <Chart pieConfig={pieConfig} />\r\n                </div>\r\n\r\n                <div className=\"flex min-w-44 grow flex-col items-stretch\">\r\n                    <Legend\r\n                        pieConfig={pieConfig}\r\n                        onChangeColor={onChangeColor}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\nimport type {DispositionsPieConfig} from '@bpinc/ad-transport-types'\r\n\r\n\r\nexport const editingConfigAtom = atom<DispositionsPieConfig | undefined>(undefined)\r\n","import React, {useCallback} from 'react'\r\nimport produce from 'immer'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {DispositionsPieDisplayMode} from '@bpinc/ad-transport-types'\r\nimport {isHTMLInputElement} from '@bpinc/lib-html-utils'\r\nimport {Checkbox, Radio} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {editingConfigAtom} from '../atoms'\r\nimport {useTableItems} from './useTableItems'\r\nimport {useToggles} from './useToggles'\r\n\r\n\r\nexport function ShownDispositionsEditor() {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {\r\n        isAllOnLegend,\r\n        isAllOnPie,\r\n        isIndeterminateAllOnLegend,\r\n        isIndeterminateAllOnPie,\r\n        toggleIsAllOnLegend,\r\n        toggleIsAllOnPie,\r\n        changeIsShownOnLegend, changeIsShownOnPie,\r\n    } = useToggles()\r\n\r\n    const [editingConfig, setEditingConfig] = useAtom(editingConfigAtom)\r\n\r\n    const onModeChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\r\n        const input = e.target\r\n        if (!isHTMLInputElement(input)) {\r\n            return\r\n        }\r\n        const value = input.value as DispositionsPieDisplayMode\r\n\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            prev.displayMode = value\r\n        }))\r\n\r\n    }, [setEditingConfig])\r\n\r\n    const tableItems = useTableItems()\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-2 flex gap-2\">\r\n                <h3 className=\"mr-6 text-xl\">{t.CAMPAIGN_MONITOR.displaying_mode()}</h3>\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-4 flex shrink-0 items-center\">\r\n                        <Radio\r\n                            checked={editingConfig?.displayMode === 'dispositions'}\r\n                            value=\"dispositions\"\r\n                            label=\"Dispositions\"\r\n                            name=\"displayMode\"\r\n                            onChange={onModeChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex shrink-0 items-center\">\r\n                        <Radio\r\n                            checked={editingConfig?.displayMode === 'groups'}\r\n                            value=\"groups\"\r\n                            label=\"Groups\"\r\n                            name=\"displayMode\"\r\n                            onChange={onModeChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <p className=\"mb-4\">{t.CAMPAIGN_MONITOR.config_per_campaign_note()}</p>\r\n\r\n            {editingConfig?.displayMode === 'dispositions' && (\r\n                <div className=\"mt-4 pb-4\">\r\n                    <div className=\"grid grid-cols-[minmax(min-content,15rem),6rem,6rem] gap-1\">\r\n                        <div className=\"mb-1\" />\r\n                        <div className=\"mb-1 font-bold\">{t.CAMPAIGN_MONITOR.display_on_pie()}</div>\r\n                        <div className=\"mb-1 font-bold\">{t.CAMPAIGN_MONITOR.display_in_list()}</div>\r\n\r\n                        <div className=\"mb-1\">{t.CAMPAIGN_MONITOR.select_all()}</div>\r\n                        <div className=\"mb-1\">\r\n                            <Checkbox\r\n                                checked={isAllOnPie}\r\n                                indeterminate={isIndeterminateAllOnPie}\r\n                                onChange={toggleIsAllOnPie}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-1\">\r\n                            <Checkbox\r\n                                checked={isAllOnLegend}\r\n                                indeterminate={isIndeterminateAllOnLegend}\r\n                                onChange={toggleIsAllOnLegend}\r\n                            />\r\n                        </div>\r\n\r\n                        {tableItems.map(it => (\r\n                            <React.Fragment key={it.isGroup ? it.name : it.id}>\r\n                                {it.isGroup\r\n                                    ? (\r\n                                        <div\r\n                                            className=\"col-span-3 overflow-hidden text-ellipsis font-bold\"\r\n                                            title={it.name}\r\n                                        >\r\n                                            {it.name}\r\n                                        </div>\r\n                                    )\r\n                                    : (\r\n                                        <>\r\n                                            <div\r\n                                                className=\"overflow-hidden text-ellipsis pl-4\"\r\n                                                title={it.name}\r\n                                            >\r\n                                                {it.name}\r\n                                            </div>\r\n                                            <div>\r\n                                                <Checkbox\r\n                                                    checked={it.isShownOnPie}\r\n                                                    onChange={() => {\r\n                                                        changeIsShownOnPie(it.id, !it.isShownOnPie)\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <Checkbox\r\n                                                    checked={it.isShownOnLegend}\r\n                                                    onChange={() => {\r\n                                                        changeIsShownOnLegend(it.id, !it.isShownOnLegend)\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\nimport produce from 'immer'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\n\r\nimport {editingConfigAtom} from '../atoms'\r\n\r\n\r\nexport function useToggles() {\r\n    const [editingConfig, setEditingConfig] = useAtom(editingConfigAtom)\r\n    const selectedCampaign = useSelectedCampaign()\r\n\r\n    const isAllOnLegend = useMemo(() => {\r\n        return selectedCampaign?.dispositions?.every(disposition => {\r\n            const dispositionConfig = editingConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n            return dispositionConfig?.isShownOnLegend\r\n        })\r\n    }, [selectedCampaign?.dispositions, editingConfig])\r\n\r\n    const isIndeterminateAllOnLegend = useMemo(() => {\r\n        const someShownOnLegend = selectedCampaign?.dispositions?.some(disposition => {\r\n            const dispositionConfig = editingConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n            return dispositionConfig?.isShownOnLegend\r\n        })\r\n        return someShownOnLegend && !isAllOnLegend\r\n    }, [selectedCampaign?.dispositions, editingConfig, isAllOnLegend])\r\n\r\n    const isAllOnPie = useMemo(() => {\r\n        return selectedCampaign?.dispositions?.every(disposition => {\r\n            const dispositionConfig = editingConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n            return dispositionConfig?.isShownOnPie\r\n        })\r\n    }, [selectedCampaign?.dispositions, editingConfig])\r\n\r\n    const isIndeterminateAllOnPie = useMemo(() => {\r\n        const someShownOnPie = selectedCampaign?.dispositions?.some(disposition => {\r\n            const dispositionConfig = editingConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n            return dispositionConfig?.isShownOnPie\r\n        })\r\n        return someShownOnPie && !isAllOnPie\r\n    }, [selectedCampaign?.dispositions, editingConfig, isAllOnPie])\r\n\r\n    const toggleIsAllOnLegend = useCallback(() => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            prev.dispositions.forEach(dispositionConfig => {\r\n                dispositionConfig.isShownOnLegend = !isAllOnLegend\r\n            })\r\n        }))\r\n    }, [isAllOnLegend, setEditingConfig])\r\n\r\n    const toggleIsAllOnPie = useCallback(() => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            prev.dispositions.forEach(dispositionConfig => {\r\n                dispositionConfig.isShownOnPie = !isAllOnPie\r\n            })\r\n        }))\r\n    }, [isAllOnPie, setEditingConfig])\r\n\r\n    const changeIsShownOnLegend = (dispositionId: string, isShownOnLegend: boolean) => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            const dispositionConfig = prev.dispositions.find(it => it.dispositionId === dispositionId)\r\n            if (!dispositionConfig) {\r\n                return\r\n            }\r\n            dispositionConfig.isShownOnLegend = isShownOnLegend\r\n        }))\r\n    }\r\n\r\n    const changeIsShownOnPie = (dispositionId: string, isShownOnPie: boolean) => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            const dispositionConfig = prev.dispositions.find(it => it.dispositionId === dispositionId)\r\n            if (!dispositionConfig) {\r\n                return\r\n            }\r\n            dispositionConfig.isShownOnPie = isShownOnPie\r\n        }))\r\n    }\r\n\r\n    return {\r\n        isAllOnLegend,\r\n        isIndeterminateAllOnLegend,\r\n        isAllOnPie,\r\n        isIndeterminateAllOnPie,\r\n        toggleIsAllOnLegend,\r\n        toggleIsAllOnPie,\r\n        changeIsShownOnLegend,\r\n        changeIsShownOnPie,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\nimport {groupBy} from 'lodash-es'\r\n\r\nimport {useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\n\r\nimport {editingConfigAtom} from '../atoms'\r\nimport type {EditorDisposition, EditorGroup} from './types'\r\n\r\n\r\nexport function useTableItems() {\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const [editingConfig] = useAtom(editingConfigAtom)\r\n\r\n    return useMemo(() => {\r\n        const grouped = groupBy(selectedCampaign?.dispositions || [], ({group}) => group)\r\n        const result = Object.entries(grouped).reduce<Array<EditorDisposition | EditorGroup>>((acc, [groupName, dispositions]) => {\r\n            acc.push({\r\n                isGroup: true,\r\n                name: groupName,\r\n            })\r\n\r\n            dispositions?.forEach(disposition => {\r\n                const dispositionConfig = editingConfig?.dispositions.find(it => it.dispositionId === disposition.id)\r\n                if (!dispositionConfig) {\r\n                    return\r\n                }\r\n\r\n                acc.push({\r\n                    id: disposition.id,\r\n                    name: disposition.name,\r\n                    isGroup: false,\r\n                    isShownOnLegend: dispositionConfig.isShownOnLegend,\r\n                    isShownOnPie: dispositionConfig.isShownOnPie,\r\n                })\r\n            })\r\n\r\n            return acc\r\n        }, [])\r\n\r\n        return result\r\n    }, [selectedCampaign?.dispositions, editingConfig])\r\n}\r\n","import React, {useCallback, useState} from 'react'\r\nimport produce from 'immer'\r\nimport {createStore, Provider, useAtom} from 'jotai'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {ControlledDispositionsPie} from '../../components/ControlledDispositionsPie'\r\nimport {editingConfigAtom} from './atoms'\r\nimport {ShownDispositionsEditor} from './ShownDispositionsEditor'\r\n\r\n\r\nexport const DispositionsPieEditorModal: React.FC<CommonModalProps> = props => {\r\n    const {pageConfig} = useCampaignsState()\r\n    const selectedCampaign = useSelectedCampaign()\r\n\r\n    const selectedCampaignPieConfig = selectedCampaign?.id\r\n        ? pageConfig.DISPOSITIONS_PIE_CONFIG[selectedCampaign.id]\r\n        : undefined\r\n\r\n    const [store] = useState(() => {\r\n        const innerStore = createStore()\r\n        innerStore.set(editingConfigAtom, selectedCampaignPieConfig)\r\n        return innerStore\r\n    })\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <DispositionsPieEditorModalContent {...props} />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nfunction DispositionsPieEditorModalContent({\r\n    onClose,\r\n    mountNode,\r\n    ...restProps\r\n}: CommonModalProps) {\r\n    const {t} = useLocalizationState()\r\n    const {pageConfig} = useCampaignsState()\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const {updatePageConfig} = useCampaignsStateMethods()\r\n\r\n    const [editingConfig, setEditingConfig] = useAtom(editingConfigAtom)\r\n\r\n    const onSave = () => {\r\n        if (!selectedCampaign?.id) {\r\n            return\r\n        }\r\n\r\n        updatePageConfig({\r\n            ...pageConfig,\r\n            DISPOSITIONS_PIE_CONFIG: {\r\n                ...pageConfig.DISPOSITIONS_PIE_CONFIG,\r\n                [selectedCampaign.id]: editingConfig,\r\n            },\r\n        })\r\n        onClose()\r\n    }\r\n\r\n    const changeDispositionColor = useCallback((dispositionId: string, color: string) => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n\r\n            const dispositionConfig = prev.dispositions.find(it => it.dispositionId === dispositionId)\r\n            if (!dispositionConfig) {\r\n                return\r\n            }\r\n\r\n            dispositionConfig.color = color\r\n        }))\r\n    }, [setEditingConfig])\r\n\r\n    const changeDispositionTitle = useCallback((title: string) => {\r\n        setEditingConfig(produce(prev => {\r\n            if (!prev) {\r\n                return\r\n            }\r\n            prev.title = title\r\n        }))\r\n    }, [setEditingConfig])\r\n\r\n    if (!editingConfig) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            flex\r\n            onClose={onClose}\r\n            mountNode={mountNode}\r\n            className=\"relative max-h-[calc(100vh-4rem)] !w-auto max-w-[calc(100vw-2em)] flex-col overflow-hidden\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header id=\"manage_metrics\" role=\"heading\">\r\n                {t.CAMPAIGN_MONITOR.chart_settings()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className=\"flex w-full flex-auto flex-col overflow-hidden p-0\">\r\n                <div className=\"flex min-h-[387px] items-stretch overflow-x-auto overflow-y-hidden\">\r\n                    <div className=\"shrink-0 border-r pt-2\">\r\n                        <ControlledDispositionsPie\r\n                            pieConfig={editingConfig}\r\n                            onChangeColor={changeDispositionColor}\r\n                            onChangeTitle={changeDispositionTitle}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"overflow-y-auto pl-6 pr-2 pt-2\">\r\n                        <ShownDispositionsEditor />\r\n                    </div>\r\n                </div>\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                    data-testid=\"cancel-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n\r\n                <SemanticButton onClick={onSave} primary data-testid=\"ok-button\">\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useCampaignsState, useCampaignsStateMethods, useSelectedCampaign} from '@bpinc/ad-campaigns-state-context'\r\nimport {SystemIcon} from '@bpinc/lib-icons'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {DispositionsPieEditorModal} from '../../modals/DispositionsPieEditorModal'\r\nimport {ControlledDispositionsPie} from '../ControlledDispositionsPie'\r\n\r\n\r\nexport const DispositionsPie: React.FC = () => {\r\n    const selectedCampaign = useSelectedCampaign()\r\n    const openRecordDispositionsPieModal = useModalComponentOpener(DispositionsPieEditorModal)\r\n    const {pageConfig, selectedCampaignId} = useCampaignsState()\r\n    const {subscribe, unsubscribe} = useCampaignsStateMethods()\r\n\r\n    const selectedCampaignPieConfig = selectedCampaign?.id\r\n        ? pageConfig.DISPOSITIONS_PIE_CONFIG[selectedCampaign.id]\r\n        : undefined\r\n\r\n    useEffect(() => {\r\n        subscribe('pie')\r\n        return () => unsubscribe('pie')\r\n    }, [subscribe, unsubscribe, selectedCampaignId])\r\n\r\n    return (\r\n        <div className=\"w-[500px] shrink-0\">\r\n            <div className=\"mb-2 flex h-6 justify-end\">\r\n                <Button\r\n                    clickThrottle={500}\r\n                    onClick={() => openRecordDispositionsPieModal()}\r\n                >\r\n                    <SystemIcon className=\"size-5\" />\r\n                </Button>\r\n            </div>\r\n\r\n            <ControlledDispositionsPie\r\n                pieConfig={selectedCampaignPieConfig}\r\n                className=\"max-h-60\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {CampaignDetailsTable} from '../../CampaignDetailsTable'\r\nimport {CampaignListsTable} from '../../CampaignListsTable'\r\nimport {CampaignsTable} from '../../CampaignsTable'\r\nimport {DispositionsPie} from '../../DispositionsPie'\r\n\r\n\r\nexport const VoiceCampaignsTab: React.FC = () => {\r\n    return (\r\n        <>\r\n            <CampaignsTable />\r\n            <CampaignDetailsTable />\r\n\r\n            <div className=\"mt-4 flex flex-nowrap gap-4\">\r\n                <div className=\"flex-1 shrink overflow-hidden\">\r\n                    <CampaignListsTable />\r\n                </div>\r\n\r\n                <DispositionsPie />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useSelectedTab} from '@bpinc/ad-campaigns-state-context'\r\n\r\nimport {ListRemainingRecordsTab} from './ListRemainingRecordsTab'\r\nimport {VoiceCampaignsTab} from './VoiceCampaignsTab'\r\n\r\n\r\nexport const TabContent: React.FC = () => {\r\n    const selectedTab = useSelectedTab()\r\n\r\n    switch (selectedTab?.type) {\r\n        case 'voiceCampaigns': {\r\n            return <VoiceCampaignsTab />\r\n        }\r\n        case 'messagingCampaigns': {\r\n            return <>Work in progress</>\r\n        }\r\n        case 'campaignResults': {\r\n            return <>Work in progress</>\r\n        }\r\n        case 'listRemainingRecords': {\r\n            return <ListRemainingRecordsTab />\r\n        }\r\n        default: {\r\n            return <>Unknown tab type</>\r\n        }\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {CampaignsPageTabs} from './CampaignsPageTabs'\r\nimport {TabContent} from './TabContent'\r\n\r\n\r\nexport const CampaignsPage: React.FC = () => {\r\n    return (\r\n        <>\r\n            <CampaignsPageTabs />\r\n\r\n            <div className=\"flex grow flex-col overflow-y-auto px-6 py-2\" data-testid=\"campaigns-page\">\r\n                <TabContent />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n"],"names":["CampaignsPageTabs","useLocalizationState","t","useCampaignsState","tabs","selectedCampaignTabId","campaignItems","useCampaignsStateMethods","selectTab","closeTab","computedTabs","useMemo","map","tab","title","type","CAMPAIGN_MONITOR","voice_campaigns","messaging_campaigns","campaign","find","it","id","campaignId","campaignName","fields","name","preview_detailed_results","list","lists","listId","metrics","remaining_records","closeable","CLOSEABLE_TABS_TYPES","header","className","Tabs","activeTabId","headerClassName","tabsContentClassName","onChange","onTabClose","Chart","postponedTodayAM","postponedTodayPM","postponedTomorrowAM","postponedTomorrowPM","postponedLater","options","chart","inverted","animation","text","xAxis","categories","today_am","today_pm","tomorrow_am","tomorrow_pm","later","yAxis","labels","format","plotOptions","series","dataLabels","enabled","tooltip","legend","data","y","div","Highchart","ListRemainingRecordsTab","selectedTab","useSelectedTab","Error","generateListReport","postponedSum","reportData","Number","scheduled_today_am","scheduled_today_pm","scheduled_tomorrow_am","scheduled_tomorrow_pm","scheduled_later","generateReport","useEvent","useEffect","isReportLoading","h1","p","reportAt","formatDate","prefixed","full","SmMessage","info","generating_report","SmProgress","percent","indicating","label","records_total","SemanticButton","GLOBAL","cancel","classNames","available","available_now","postponed","out_of_calling_hours","misconfigured","button","onClick","IconRefresh24","h2","postponed_until","SectionHeader","children","tcn","SectionTitle","TableActionsButton","getOptions","useBoolean","value","toggle","toggleShow","PopupButton","icon","basic","show","SUPERVISION_PAGE","actions_menu_btn_tooltip","IconTableActions","CampaignDetailsItem","column","localize","useLocalizeString","useSelectedCampaign","campaignDefaultName","campaignsColumnsLocalizationMap","columnValue","formatDurationShort","state","renderAnything","customName","useCampaignDetailsTableConfigAdapter","toEditing","useCallback","config","columnToTreeItem","configItem","defaultName","isActive","isShown","meta","beforeEditing","fromEditing","newConfig","reduce","acc","isGroup","push","item","itemMetaBeforeEditing","treeItemToColumn","useCampaignListsTableConfigAdapter","campaignsListsColumnsLocalizationMap","checkIsCampaignListsColumnGroup","columns","useCampaignsTableConfigAdapter","checkIsCampaignsTableColumnGroup","ManageMetricsModal","props","onClose","table","restProps","pageConfig","updatePageConfig","campaignDetailsTableColumnsConfig","CAMPAIGN_DETAILS_TABLE_COLUMNS_CONFIG","defaultCampaignDetailsTableColumnsConfig","defaultCampaignsTableEditingConfig","convertCampaignsConfigToEditing","CAMPAIGNS_TABLE_COLUMNS_CONFIG","defaultCampaignDetailsTableEditingConfig","convertCampaignDetailsConfigToEditing","defaultCampaignListsTableEditingConfig","convertCampaignListsConfigToEditing","CAMPAIGN_LISTS_TABLE_COLUMNS_CONFIG","useState","editingCampaignsTableConfig","setEditingCampaignsTableConfig","editingCampaignDetailsTableConfig","setEditingCampaignDetailsTableConfig","editingCampaignListsTableConfig","setEditingCampaignListsTableConfig","editingConfig","onSave","assertDefined","convertCampaignDetailsConfigFromEditing","convertCampaignsConfigFromEditing","convertCampaignListsConfigFromEditing","Modal","flex","aria-labelledby","data-testid","role","manage_metrics_modal_title","ColumnsEditor","enabledInOffline","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonCancel","primary","window_buttonOk","CampaignDetailsTable","selectedCampaign","subscribe","unsubscribe","selectedCampaignId","filter","getMenuOptions","openManageMetricsModal","useModalComponentOpener","startStopCampaign","isRunning","actions_menu_option_manage_metrics","campaign_button_stopCampaign","campaign_button_startCampaign","useTableMenuOptions","campaign_details_title","no_campaign_selected","initialState","useCollapsedTableGroupsIds","tableName","collapsedGroupIds","setCollapsedGroupIds","storageKey","storageKeyMap","getStorageKey","useLocalStorageForState","toggleCollapsedGroup","groupId","produce","draft","campaigns","details","useSortedTableData","sortingSettings","sorting","toSorted","a","b","v1","v2","localeCompare","useTableColumns","columnsConfig","columnsConfigWithoutHidden","i","checkIsGroupedTableColumnGroup","collapsed","c","slice","flatMap","width","align","sticky","groups","idx","arr","length","content","colspan","prevItem","lastGroup","useGoRemainingRecords","openTab","existingTab","newTabId","uuid","Remaining","goRemainingRecords","StartStopToggle","enableDisableList","isListEnabled","is_enabled","isDisabled","setIsDisabled","handleToggle","newIsEnabled","Checkbox","checked","disabled","labelClassName","selectedListId","selectedList","campaignTeam_button_disable","campaignTeam_button_enable","get_remaining_records","CampaignListsTable","selectList","useSorting","handleSortingChange","sortedData","handleRowClick","row","selectedRows","findIndex","renderTime","handleColumnsResize","resizedColumns","getUpdatedColumn","newColumnWidth","campaignMonitor_lists_heading","ResizeTable","onSortingChange","onColumnsResize","isColumnResizable","isResizable","hasGrid","onRowClick","renderItem","itemValue","records_completed_ratio","progress","success","undefined","list_id","scrollEnabled","defaultHeight","CampaignsTableTeams","allCampaignTeamsNames","teams","team","containerEl","setContainerEl","wrapperResizeObserver","useResizeObserver","containerWidth","contentRect","defferedContainerWidth","useDeferredValue","textEl","setTextEl","font","getElementFontString","after","restCount","KNOWLEDGE_BASE","plus_more","fittedList","fittedListInner","strings","isEnough","nextFittedStrings","fittedStrings","nextRestCount","afterText","nextText","join","calculateTextWidth","getFitStrings","e","stopPropagation","console","log","ref","span","campaignState","restoreDefaultConfig","actions_menu_option_restore_default_view","assign_and_delete_teams","open_settings","CampaignsTable","selectCampaign","campaignMonitor_heading","pieConfig","allMetricsSumm","typedEntries","dispositionsMetrics","key","dispositionsViewItems","dispositions","disposition","dispositionConfig","dispositionId","isShownOnPie","metricId","dispositionMetricPrefix","dispositionPercent","color","groupsViewItems","Array","from","Set","group","groupName","groupConfig","count","seriesItems","displayMode","chartOptions","plotBorderWidth","plotShadow","height","pointFormat","pie","cursor","distance","property","operator","duration","Legend","onChangeColor","legendItems","isShownOnLegend","dispositionMetricId","metricStringValue","metricValue","isNaN","countAcc","useLegendItems","throttledChangeColor","throttle","target","dataset","legendItem","input","data-disposition-id","style","backgroundColor","no_dispositions","Title","onChangeTitle","editableTitle","setEditableTitle","defaultTitle","default_pie_title","setDefaultTitle","onFocus","onBlur","ControlledDispositionsPie","editingConfigAtom","atom","ShownDispositionsEditor","useToggles","useAtom","setEditingConfig","isAllOnLegend","every","isIndeterminateAllOnLegend","some","isAllOnPie","isIndeterminateAllOnPie","toggleIsAllOnLegend","prev","forEach","toggleIsAllOnPie","changeIsShownOnLegend","changeIsShownOnPie","onModeChange","isHTMLInputElement","tableItems","grouped","groupBy","Object","entries","useTableItems","h3","displaying_mode","Radio","config_per_campaign_note","display_on_pie","display_in_list","select_all","indeterminate","React","DispositionsPieEditorModal","selectedCampaignPieConfig","DISPOSITIONS_PIE_CONFIG","store","innerStore","createStore","set","Provider","DispositionsPieEditorModalContent","mountNode","changeDispositionColor","changeDispositionTitle","chart_settings","DispositionsPie","openRecordDispositionsPieModal","Button","clickThrottle","SystemIcon","VoiceCampaignsTab","TabContent","CampaignsPage","classnames","twMerge","cn"],"sourceRoot":""}