{"version":3,"file":"static/js/221.9d1530de.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-scroll-state-context/src/context.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-attachments-state/src/constants.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-attachments-state/src/useAttachmentsState.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-attachments-state/src/useAttachmentLink.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-attachments-state/src/provider-chat.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-attachments-state/src/provider-email.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-tailwind-classnames/src/tcn.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/constants.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useDomainAuthorizationPopup.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useInstallationRequiredPopup.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useOutdatedBrowserExtensionPopup.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useOutdatedClientNotification.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/usePhoneOutOfServiceNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/hooks.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useEmiErrorsNotifications.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useFailedCallNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useInteractionNotAcceptedNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/usePhoneDeviceNotDetectedNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/usePhoneTypeErrorNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useReservedForIncomingInteractionNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useWebRtcCallInChatErrorNotifications.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/interaction/useFavoritesLimitReachedError.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useOfflineNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useSipServerDisconnectedNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useSlowNetworkNotification.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-system-notifications/src/system/useUnauthorizedDomainNotification.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/AuthorizedConnectorsConsumers.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-login-ui/src/components/ForceLogout.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/UnauthorizedUI.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/AuthorizationUIRouter.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/BaseConnectorsConsumers.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/TopLevelProviders.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-authorization-module/src/AuthorizationModule.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/SetDispositionModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/SetCaseStatusButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActiveInteractionCaseFooterContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/query-keys.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useGetEmailQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/helpers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/mutations/useSaveDraftMutation.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/useEmailServicesOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/ServiceSelector.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/EmailControls.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/SuggestionsPopup.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/useSelectedEmailsState.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useSearchEmailsQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/EmailSelectionInput.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/constants.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/useEmailTemplateFetcher.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/usePasteFromKB.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-tinymce/src/tinymceConfig.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-tinymce/src/constants.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/WysiwygEditor/WysiwygEditor.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/EmailForm.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/useSaveDraftInterval.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailForm/useAttachmentsStateSync.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/activity-selectors.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActivityCase.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/useActivityCaseTitle.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/utils/helpers.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseActivityService.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ChatContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActivityChat.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/email-utils/email-address-validator.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/email-utils/email-transformers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/email-utils/useShowOriginalEmailContent.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/EmailContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActivityEmail.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActivityNotes.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActivityVoice.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseFooter.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/UserSelect.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/AssignEmailModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/mutations/useCreateNoteMutation.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseHeaderInfo.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseReporter.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseTitleInput.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseTitle.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/images/link.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CopyCaseLinkButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/DeleteCaseButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/SaveDraftButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CaseHeader.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/Case.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/ActiveCase.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/atoms.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/ViewButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/PersonalCaseFooterContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/QueueItemRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/QueueTable.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/CaseTab.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/useFirstQueueItemActivator.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/useActivateQueueWhenItemMoved.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/Pagination.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/SortingControls.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/TableHeaderContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/useSortingOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/Sla.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/useBasicColumns.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/useColumns.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-modals-ui/src/HelpModal/HelpModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/useSelectedRow.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/usePersonalControls.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-modals-ui/src/hooks/useOpenEmailBySupervisorWarningModal.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/PersonalTab.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/usePersonalQueueQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PinnedTab/PinnedCaseFooterContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PinnedTab/TableHeaderContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PinnedTab/useSortingOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PinnedTab/PinnedTab.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/usePinnedCasesQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useCloseAsSpamHandler.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useDeleteCaseHandler.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/TeamCaseFooterContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/useDefaultQueueServiceOptionsByPrivileges.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/useDefaultServicesByPrivileges.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/TableHeaderContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useQueueCountByServiceQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useSortingOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useColumns.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/TeamSelector.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/TeamTab.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useTeamQueueQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useTeamControls.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/CasePageContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useQueueCountQuery.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/queries/useQueueCountInvalidator.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useTeamTabName.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/usePersonalTabName.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/useQueryManager.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/JotaiProvider.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-case-ui/src/components/CasePage/CasePage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/Dropdown.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/SelectField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/TextField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/RemoveRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddressFieldArrayContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/FieldArrayItem.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/FieldArray.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddressFieldArray.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/ViewItem.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/AddressListField/AddressListField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/TextArea.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/TextAreaField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/GeneralTextFormField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/AmountField/AmountField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder/src/utils/createLeadMappingStringToFormValueMap.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder/src/utils/getAllFormFields.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder/src/utils/checkIsLayout.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder/src/utils/getFormElementMappingString.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/FormBuilderButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonHandlers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonPrivilegesChecker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonActionConditionsChecker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/Image.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-form-builder-ui/src/components/Spacer.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/ButtonField/ButtonField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/CheckboxField/CheckboxFieldBase.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/CheckboxField/CheckboxField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/DateTimeField/DatePicker.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/DateTimeField/DateTimeField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/EmailField/EmailField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/HiddenField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/SelectAndTextFieldRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/EmailFieldArray.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/EmailListField/EmailListField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/ImageField/ImageField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/LabelField/LabelField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/LinkField/LinkField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/MessengerFieldItem.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/MessengersFieldArray.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/MessengersField/MessengersField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/NotesField/NotesField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/PhoneLink/PhoneLink.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/PhoneLink/usePhoneClickHandler.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/PhoneField/PhoneField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/PhonesFieldArray.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/PhoneListField/PhoneListField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/SelectField/SelectField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/SpacerField/SpacerField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/TextFormField/TextFormField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/FormElementResolver.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormElementResolver/useConditionalFieldCheck.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/CompactForm.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormLayout.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/FormBuilder.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-form-builder/src/components/WideForm.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/ActivityForm/useActiveItemFormEffects.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/ActivityForm/ActivityFormTab.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/FrameTabContent/FrameTabContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/images/link.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/ProfileHeader/ProfileHeaderLayout.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/ProfileHeader/ProfileHeaderView.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-activities-ui/src/utils/helpers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-activities-ui/src/components/ActivityMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-activities-ui/src/components/Activity.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-activities-ui/src/components/Activities.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/components/modals/AddEmailModal/AddEmailModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/components/modals/AddPhoneModal/AddPhoneModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/hooks/useHandleUseContact.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/components/modals/AddEmailModal/useOpenAddEmailModal.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/components/modals/AddPhoneModal/useOpenAddPhoneModal.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-contact-details/src/hooks/useIsUseContactButtonVisible.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/Details/ProfileActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/Details/EditActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/Details/Details.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/ProfileTabContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/Profile.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/Details/CreateActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/ProfileHeader/ProfileHeaderForm.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/Profile/ProfileCreate.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/TabContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/TabTitleContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/components/InteractionWorkspacePage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/reducer.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/usePageTitle.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/useTitleBlinker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/useInteractionDispatchers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/useCalendarEventsDispatchers.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/useChatMessagesDispatcher.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/usePageVisibilityChangedDispatcher.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-page-title/src/hooks/useLogoutStateResetter.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/constants/index.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/ExitSupervisingWarningModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useRemoteAssistStateSubscription.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useStateSubscriptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useBPClientStateSubscription.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useCaseStateSubscription.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useInteractionChatStateSubscription.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/state-subscription/useInteractionStateSubscription.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/agent.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/backwards.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/chat.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/chevron_down.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/chevron_right.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/client.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/close.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/collapse.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/dissatisfied.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/download.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/drag_grip.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/drag_grip-big.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/duplicate.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/edit-columns.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/email.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/expand.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/external.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/external-link.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/fast-forward.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/favorite.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/filter.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/fullscreen.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/incoming-call.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/laptop.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/neutral.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/pause.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/pencil.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/play.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/reset.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/rewind.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/satisfied.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/screen-recording.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/share.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/suggestion.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/system.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/transcript.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/voice-recording.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/Interaction/Transcript/Transcript.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/Interaction/Interaction.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/search-results/hooks/useMetricDndLogic.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/search-results/cells/AgentCell.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/search-results/cells/RecordingCell.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/FiltersPanel/FormContext/index.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/FiltersPanel/FilterSelectionModal/index.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/hooks/useRefreshEvalStatistics.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/icons/search.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/app/FullscreenEvaluationApp.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/components/Tree/Tree.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-non-call-cases-ui/src/styles/NonCallCases.module.less?8978","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-non-call-cases-ui/src/components/NonCallCases.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/utils.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/atoms.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/useSearchPageTabsActions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/useMergeContactsActions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/AddContactForMere.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/MergeActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/MergeField.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/MergeContactInfo.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useGetMergeFormFieldValidator.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useMergeFormFields.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useMergeFormRows.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useMergeFormData.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useMergeFormElements.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useOnSubmit.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/Merge.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Merge/useLoadMergeContactsData.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/TeamSelector.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesListHeader.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/useCloseAsSpamHandler.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/useDeleteCaseHandler.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/constants.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesColumnsSelect.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesServiceSelect.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesSorting.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/useCaseOrderOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesStatusesSelect.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/useCaseStatusOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesTableHeader.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesTableRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesTable.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/useCasesTableColumns.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesList.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CaseFooterContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CaseView.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Cases/CasesLayout.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/useContactsActions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Contacts/ContactActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Contacts/ContactsTableRow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Contacts/useContactTableColumns.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Contacts/ContactsTable.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Contacts/Contacts.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/Search.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/SearchPage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-searchpage-ui/src/useUrlBasedNavigation.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/KnowledgeBase/MainAreaKB.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/constants/routes.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/hooks/useAutoRedirectToActivityFormTab.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-evaluation-ui/src/OldApp.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-notifications-ui/src/Notifications.module.less?3f89","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-notifications-ui/src/Notifications.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/styles/MainPage.module.less?5e82","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/CommunicationPanel/CommunicationPanel.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/channel-context/state.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/channel-context/context.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/hooks/useLinkOpener.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/types/guards.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/helpers/common.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesContext.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/MessageAction.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useGetFormattedClipboardMessage.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useSelectionActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithUnmaskAction.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithSelectionActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesSelectionActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithAttachmentMaskAction.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/useFileMasker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithHoverOverActions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/selectors.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/atoms.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/UploadErrorModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useInitiateChatByAttachment.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/Dropzone.module.less?176d","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/Dropzone.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/useShowChecker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/useOnDrop.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useFirstUnreadMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ScrollToFirstUnreadBadge.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useKeyDatesInserter.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useActivitiesMessagesTillCreatedTime.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useActivitiesAsMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useMessagesList.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedChatMessages.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageVoiceTranscript.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/useCallMessageVoiceTranscriptName.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/TranscriptDropdown.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/hooks/useTranscriptOptions.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageRecording.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/hooks/useContentVoiceTranscript.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/EmptyCallMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/EmailMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/RemoteAssistMessage/RemoteAssistMessage.module.less?287e","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/RemoteAssistMessage/RemoteAssistMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/helpers.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedHistoryMessages.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedMessagesWithDates.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/useMessagesLoader.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.module.less?6c5d","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/useExternalActivityHistoryLoaded.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessagesPlaceholder.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/styles/Chat.module.less?1b39","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageAvatar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithTopInfo.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithOptionalNameAndAvatar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/DotsTransforming.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingIndicator.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingParties.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/VirtualizedMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useSaveScrollPositionEffect.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useInitialScrollPosition.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageTopInfo.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ErrorMessage/ErrorMessage.module.less?abd0","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ErrorMessage/ErrorMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/DispositionMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/NotesMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/ActivityMessageGroup.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/useDispositionTitle.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/bot-suggestion.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/facebook.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/line.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/sms.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/telegram.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/twitter.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/viber.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/web-chat.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/wechat.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/whatsapp.svg","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.module.less?42ff","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/utils.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/utils.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/BotSuggestion.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/DateMessage/DateMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useMarkAsReadVisibilitySensor.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/AttachmentFileMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/AudioFileMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/ImageFileMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessageContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessage.module.less?2d03","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/InviteMessage/InviteMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/InviteMessage/useHandleCancelInviteClick.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/LocationMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/OutboundMessagingCampaignMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PageLinkMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/VoiceTranscriptConfidence.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PlainMessage/PlainMessage.module.less?7f3d","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PlainMessage/PlainMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/utils/utils.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/SystemMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalChatMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/VirtualizedExternalMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalMessages.module.less?58d8","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscriptContext.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/Filters.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.module.less?cdb5","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptVisibleMessages.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/ChatMessage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/SearchResultHighlight.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VirtualizedVoiceTranscriptMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptMessagesContentMap.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscriptMessages.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/ChannelSelector.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/useInitializeDefaultChannelEffect.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatTextArea.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAgentTypingDetect.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAttachmentsList.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useHasMultipleLines.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/InvisibleAttachButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useChatMessages.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useMessageUpdater.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useControlsOptions.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.module.less?c331","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useGreeting.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useSmsMessageCounter.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/ExternalChat.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useChatFormVisible.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/external/useChatIsLoading.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/hooks/useBotSuggestionsLinksAutoOpener.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-chat-ui/src/components/Chat.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/ChatWindow/ChatWindow.module.less?2e41","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/ChatWindow/ChatWindow.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/PrivilegeRouter.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/KnowledgeBase/RightBarKB.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/RightBar/RightBar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/MainPage.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/hooks/useModulesImportByPrivileges.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-interaction-workspace-ui/src/hooks/useOpenInteractionWorkspacePage.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/mainpage/components/MainPageResizeController.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/leftbar/components/CommunicatorButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/leftbar/LeftBar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/leftbar/hooks/useInteractionChatsUnread.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/leftbar/hooks/useMainMenuItems.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/dashboard/components/Stats.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/dashboard/components/Metrics.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/dashboard/components/Dashboard.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/DispositionButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/EndButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/EndCallButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/EndChatButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/HoldButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/MicrophoneIcon.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/MuteButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/RecordButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/lib-interaction-buttons/src/TransferButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/styles.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/ContactControls/InteractionButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/InteractionBarAvatar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/InteractionBarDisplayName.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/ContactInfo.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/DefaultContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/DialingInteractionContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/OngoingCallContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/WrapUpContent.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/interaction-control-bar/components/InteractionControlBar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/modals/KBSettingsModal.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/hooks/useSettingsItems.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/hooks/useOpenKBSettingsModal.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/SettingsButton.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/hooks/useMyAvatar.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/topbar/TopBar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-modals-ui/src/HelpModal/useOpenHelpModal.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/navbar/Navbar.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/app/App.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/app/hooks/useAppConfigChecker.ts","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/app/tanstackQueryClientProvider.tsx","webpack://@bpinc/web-agent-desktop-ui/../../packages/ad-app-ui/src/app/Connector.tsx","webpack://@bpinc/web-agent-desktop-ui/./src/index.tsx"],"sourcesContent":["import type {ReactElement, ReactFragment} from 'react'\r\nimport {useCallback} from 'react'\r\nimport produce from 'immer'\r\nimport {flow, property} from 'lodash-es'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useScrollStateProviderBuilder} from '@bpinc/ad-scroll-state-context-builder'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {ScrollStateData} from './types'\r\n\r\n\r\nconst defaultScrollStateData: ScrollStateData = {\r\n    interactions: {},\r\n    chatCenter: {},\r\n}\r\n\r\nexport const ScrollStateProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const {Provider, scrollStateRef} = useScrollStateProviderBuilder<ScrollStateData>({\r\n        children,\r\n        defaultScrollStateData,\r\n    })\r\n\r\n    const resetStateForInteraction = useCallback(\r\n        function resetStateForItemCallback(itemId: string) {\r\n            scrollStateRef.current = produce(scrollStateRef.current, state => {\r\n                delete state.interactions[itemId]\r\n            })\r\n        },\r\n        [scrollStateRef],\r\n    )\r\n\r\n    useOnItemRemoved(flow(property('id'), resetStateForInteraction))\r\n\r\n    return Provider\r\n}\r\n","import {noop} from 'lodash-es'\r\n\r\n\r\nexport const defaultState = {\r\n    isAttachmentsListReady: () => true,\r\n    getAttachmentsList: () => [],\r\n    addAttachment: noop,\r\n    removeAttachment: noop,\r\n    clearAttachmentsList: noop,\r\n    initializeAttachmentsList: noop,\r\n    fileRejections: [],\r\n    setFileRejections: noop,\r\n}\r\n","import {useCallback, useMemo, useRef, useState} from 'react'\r\nimport type {FileRejection} from 'react-dropzone'\r\nimport type {Canceler} from 'axios'\r\nimport produce, {castDraft} from 'immer'\r\n\r\nimport type {ChatAttachment, EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getFileFromUrl} from '@bpinc/lib-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    Attachment,\r\n    Attachments,\r\n    BasicAttachmentData,\r\n    PendingRequestsCancelers,\r\n    RequestQueue,\r\n    RequestQueueItem,\r\n    UploadAttachment,\r\n    UploadError,\r\n} from './types'\r\nimport {useAttachmentLink} from './useAttachmentLink'\r\n\r\n// browser allows this to be no greater than 6\r\n// however even few big files may freeze the browser\r\nconst MAX_CONCURRENT_REQUESTS = 1\r\n\r\n\r\ninterface useAttachmentsStateParams<\r\n    AttachmentData extends BasicAttachmentData\r\n> {\r\n    uploadFile: UploadAttachment<AttachmentData>\r\n    handleError?: (attachmentsGroupId: string, error: UploadError) => void\r\n    getFormData: (item: RequestQueueItem) => FormData\r\n}\r\n\r\nexport function useAttachmentsState<\r\n    AttachmentData extends ChatAttachment | EmailAttachment\r\n>({\r\n    uploadFile,\r\n    handleError,\r\n    getFormData,\r\n}: useAttachmentsStateParams<AttachmentData>) {\r\n    const [attachments, setAttachments] = useState<Attachments<AttachmentData>>({})\r\n    const [fileRejections, setFileRejections] = useState<FileRejection[]>([])\r\n\r\n  // requests that are already sent and waiting for response from server\r\n    const pendingRequestsCancelersRef = useRef<PendingRequestsCancelers>({})\r\n  // requests that are not yet sent to the server\r\n    const requestQueueRef = useRef<RequestQueue>({pendingAmount: 0, items: []})\r\n\r\n    const getCanceler = useCallback(function getCancelerCallback(\r\n        attachmentsGroupId: string,\r\n        id: string,\r\n    ): Canceler | undefined {\r\n        return pendingRequestsCancelersRef.current[attachmentsGroupId]?.[id]\r\n    },\r\n    [])\r\n\r\n    const removeCancelers = useCallback(function removeCancelersCallback(\r\n        attachmentsGroupId: string,\r\n    ) {\r\n        delete pendingRequestsCancelersRef.current[attachmentsGroupId]\r\n    },\r\n    [])\r\n\r\n    const removeCanceler = useCallback(function removeCancelerCallback(\r\n        attachmentsGroupId: string,\r\n        id: string,\r\n    ) {\r\n        delete pendingRequestsCancelersRef.current[attachmentsGroupId]?.[id]\r\n    },\r\n    [])\r\n\r\n    const cancelCurrentRequest = useCallback(\r\n        function cancelCurrentRequestCallback(\r\n            attachmentsGroupId: string,\r\n            id: string,\r\n        ) {\r\n            const cancel = getCanceler(attachmentsGroupId, id)\r\n\r\n            if (cancel) {\r\n                cancel()\r\n                removeCanceler(attachmentsGroupId, id)\r\n            }\r\n        },\r\n        [getCanceler, removeCanceler],\r\n    )\r\n\r\n    const attachmentsRef = useRef(attachments)\r\n\r\n    const {sessionId = '', domain = '', loginId = ''} = useSessionState(['sessionId', 'domain', 'loginId'])\r\n\r\n    const updateAttachments = useCallback(function updateAttachmentsCallback(\r\n        setter: (a: Attachments<AttachmentData>) => Attachments<AttachmentData>,\r\n    ) {\r\n        setAttachments(currentAttachments => {\r\n            const updatedAttachments = setter(currentAttachments)\r\n            attachmentsRef.current = updatedAttachments\r\n\r\n            return updatedAttachments\r\n        })\r\n    },\r\n    [])\r\n\r\n    const getAttachmentsList = useCallback(\r\n        function getAttachmentsListCallback(attachmentsGroupId?: string) {\r\n            return (attachmentsGroupId && Object.values(attachments[attachmentsGroupId] ?? {})) || []\r\n        },\r\n        [attachments],\r\n    )\r\n\r\n    const removeRequestFromQueue = useCallback((attachmentsGroupId: string, id: string) => {\r\n        requestQueueRef.current.items = requestQueueRef.current.items.filter(item => {\r\n            return id !== item.id || attachmentsGroupId !== item.attachmentsGroupId\r\n        })\r\n    }, [])\r\n\r\n    const addNewAttachment = useCallback(\r\n        function addNewAttachmentCallback(\r\n            attachmentsGroupId: string,\r\n            newAttachment: Omit<Attachment<AttachmentData>, 'id'>,\r\n        ) {\r\n            const id = uuid()\r\n\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (!draft[attachmentsGroupId]) {\r\n                        draft[attachmentsGroupId] = {}\r\n                    }\r\n                    draft[attachmentsGroupId][id] = castDraft({id, ...newAttachment})\r\n                }),\r\n            )\r\n            return id\r\n        },\r\n        [updateAttachments],\r\n    )\r\n\r\n    const updateAttachment = useCallback(\r\n        function updateAttachmentCallback(\r\n            attachmentsGroupId: string,\r\n            id: string,\r\n            attachment: Attachment<AttachmentData>,\r\n        ) {\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (!draft[attachmentsGroupId]) {\r\n                        draft[attachmentsGroupId] = {}\r\n                    }\r\n\r\n                    draft[attachmentsGroupId][id] = {\r\n                        ...draft[attachmentsGroupId][id],\r\n                        ...castDraft(attachment),\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [updateAttachments],\r\n    )\r\n\r\n    const removeAttachment = useCallback(\r\n        function removeAttachmentCallback(attachmentsGroupId: string, id: string) {\r\n            cancelCurrentRequest(attachmentsGroupId, id)\r\n            removeRequestFromQueue(attachmentsGroupId, id)\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (draft[attachmentsGroupId]) {\r\n                        delete draft[attachmentsGroupId][id]\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [cancelCurrentRequest, removeRequestFromQueue, updateAttachments],\r\n    )\r\n\r\n    const processNextRequestQueueItem = useCallback(async () => {\r\n        const queue = requestQueueRef.current\r\n\r\n        if (queue.pendingAmount >= MAX_CONCURRENT_REQUESTS) return\r\n\r\n        const item = queue.items.shift()\r\n\r\n        if (!item) return\r\n\r\n        queue.pendingAmount++\r\n\r\n        const {id, attachmentsGroupId, file} = item\r\n\r\n        const bodyFormData = new FormData()\r\n\r\n        bodyFormData.append('file', file)\r\n\r\n        const params = {\r\n            data: getFormData(item),\r\n            tenant: domain,\r\n            token: sessionId,\r\n            user: loginId,\r\n            fileName: file.name,\r\n            fileType: 'attachment',\r\n        } as const\r\n\r\n        const canceler = await uploadFile(params, {\r\n            onSuccess: fileData => {\r\n                const pendingRequest = getCanceler(attachmentsGroupId, id)\r\n                if (pendingRequest) {\r\n                    updateAttachment(attachmentsGroupId, id, {\r\n                        id,\r\n                        file,\r\n                        isLoading: false,\r\n                        fileData,\r\n                    })\r\n                    removeCanceler(attachmentsGroupId, id)\r\n                }\r\n                queue.pendingAmount--\r\n                processNextRequestQueueItem()\r\n            },\r\n            onError: error => {\r\n                const pendingRequest = getCanceler(attachmentsGroupId, id)\r\n                if (pendingRequest) {\r\n                    removeAttachment(attachmentsGroupId, id)\r\n                    setFileRejections(\r\n                        produce(draft => {\r\n                            draft.push({\r\n                                file,\r\n                                errors: [\r\n                                    error,\r\n                                ],\r\n                            })\r\n                        }),\r\n                    )\r\n                    handleError?.(attachmentsGroupId, error)\r\n                    removeCanceler(attachmentsGroupId, id)\r\n                }\r\n                queue.pendingAmount--\r\n                processNextRequestQueueItem()\r\n            },\r\n        })\r\n\r\n        if (!pendingRequestsCancelersRef.current[attachmentsGroupId]) {\r\n            pendingRequestsCancelersRef.current[attachmentsGroupId] = {}\r\n        }\r\n        pendingRequestsCancelersRef.current[attachmentsGroupId][id] = canceler\r\n    }, [domain, getCanceler, getFormData, handleError, loginId, removeAttachment, removeCanceler, sessionId, updateAttachment, uploadFile])\r\n\r\n\r\n    const addAttachment = useCallback(\r\n        function addAttachmentCallback(attachmentsGroupId: string, file: File) {\r\n            const id = addNewAttachment(attachmentsGroupId, {\r\n                isLoading: true,\r\n                file,\r\n            })\r\n            requestQueueRef.current.items.push({\r\n                id,\r\n                attachmentsGroupId,\r\n                file,\r\n            })\r\n            processNextRequestQueueItem()\r\n        },\r\n        [addNewAttachment, processNextRequestQueueItem],\r\n    )\r\n\r\n    const clearAttachmentsList = useCallback(\r\n        function clearAttachmentsListCallback(attachmentsGroupId: string) {\r\n            removeCancelers(attachmentsGroupId)\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    draft[attachmentsGroupId] = {}\r\n                }),\r\n            )\r\n        },\r\n        [removeCancelers, updateAttachments],\r\n    )\r\n\r\n    const removeAttachmentsList = useCallback(\r\n        (attachmentsGroupId: string) => {\r\n            removeCancelers(attachmentsGroupId)\r\n\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    delete draft[attachmentsGroupId]\r\n                }),\r\n            )\r\n        },\r\n        [removeCancelers, updateAttachments],\r\n    )\r\n\r\n    const isAttachmentsListReady = useCallback(\r\n        function attachmentsListReadyCallback(attachmentsGroupId?: string) {\r\n            const attachmentsList = getAttachmentsList(attachmentsGroupId)\r\n\r\n            if (!attachmentsList?.length) {\r\n                return true\r\n            }\r\n\r\n            return attachmentsList.every(attachmentIsLoaded)\r\n\r\n            function attachmentIsLoaded(attachment: Attachment<AttachmentData>) {\r\n                return !attachment.isLoading\r\n            }\r\n        },\r\n        [getAttachmentsList],\r\n    )\r\n\r\n\r\n    const {generateUrl} = useAttachmentLink()\r\n\r\n    const initializeAttachmentsList = useCallback(async (attachmentGroupId: string, attachmentsData: BasicAttachmentData[]) => {\r\n        const getFilesPromises = attachmentsData.map(async a => {\r\n            return await getFileFromUrl(generateUrl(a.id), a.name)\r\n        })\r\n\r\n        Promise.all(getFilesPromises).then(files => {\r\n            files.forEach(file => {\r\n                addAttachment(attachmentGroupId, file)\r\n            })\r\n        })\r\n    }, [addAttachment, generateUrl])\r\n\r\n    return useMemo(\r\n        () => ({\r\n            fileRejections,\r\n            setFileRejections,\r\n            removeAttachmentsList,\r\n            getAttachmentsList,\r\n            removeAttachment,\r\n            clearAttachmentsList,\r\n            addAttachment,\r\n            initializeAttachmentsList,\r\n            isAttachmentsListReady,\r\n        }),\r\n        [\r\n            fileRejections,\r\n            removeAttachmentsList,\r\n            getAttachmentsList,\r\n            removeAttachment,\r\n            clearAttachmentsList,\r\n            addAttachment,\r\n            initializeAttachmentsList,\r\n            isAttachmentsListReady,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport const useAttachmentLink = () => {\r\n\r\n    const {serverOrigin, sessionId, loginId, domain} = useSessionState()\r\n\r\n    const generateUrl = useCallback((attachmentId: string) => {\r\n        const params = {\r\n            token: sessionId,\r\n            user: loginId,\r\n            tenant: domain,\r\n            id: attachmentId,\r\n            no_disposition: 0,\r\n        }\r\n        const query = Object.keys(params).map(key => `${key}=${params[key as keyof typeof params]}`).join('&')\r\n        const fileLink = `${serverOrigin}/agentdesktop/agentdesktop/attachmentDownload?${query}`\r\n        return fileLink\r\n    }, [serverOrigin, sessionId, loginId, domain])\r\n\r\n    return {generateUrl}\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {ChatAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadChatFile} from '@bpinc/ad-upload-methods'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst ChatAttachmentsUIContext = createContext <AttachmentsState<ChatAttachment>>(\r\n    defaultState,\r\n)\r\nChatAttachmentsUIContext.displayName = 'ChatAttachmentsUIContext'\r\n\r\nfunction getFormData({file}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    return bodyFormData\r\n}\r\n\r\nexport const ChatAttachmentsUIStateProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const uploadChatFile = useUploadChatFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadChatFile, getFormData})\r\n\r\n    useOnItemRemoved(item => {\r\n        value.removeAttachmentsList(getInteractionStepId(item))\r\n    })\r\n\r\n    return (\r\n        <ChatAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </ChatAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useChatAttachmentsUIState} = createUIStateSelectorHook(ChatAttachmentsUIContext, 'chatAttachmentsUIState')\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadEmailFile} from '@bpinc/ad-upload-methods'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst EmailAttachmentsUIContext = createContext <AttachmentsState<EmailAttachment>>(\r\n    defaultState,\r\n)\r\nEmailAttachmentsUIContext.displayName = 'EmailAttachmentsUIContext'\r\n\r\ninterface EmailAttachmentsUIStateProviderProps {\r\n    children: ReactElement | ReactFragment\r\n}\r\n\r\nfunction getFormData({file, attachmentsGroupId}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    bodyFormData.append('email', attachmentsGroupId)\r\n\r\n    return bodyFormData\r\n}\r\n\r\nexport const EmailAttachmentsUIStateProvider: React.FC<EmailAttachmentsUIStateProviderProps> = ({children}) => {\r\n    const uploadEmailFile = useUploadEmailFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadEmailFile, getFormData})\r\n\r\n    //TODO: Clean state on email draft removed\r\n\r\n    return (\r\n        <EmailAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </EmailAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useEmailAttachmentsUIState} = createUIStateSelectorHook(EmailAttachmentsUIContext, 'emailAttachmentsUIState')\r\n","import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n","\r\nexport const DOMAIN_AUTH_URL = 'http://localhost:9897'\r\nconst DOMAIN_PARAM = 'domain'\r\n\r\nconst linkUrl = new URL(DOMAIN_AUTH_URL)\r\nlinkUrl.searchParams.append(DOMAIN_PARAM, location.hostname)\r\n\r\nexport const CURRENT_DOMAIN_AUTH_URL = linkUrl.toString()\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nconst DOMAIN_AUTHORIZATION_MODAL_ID = 'bpClient/onShowDomainAuthorizationDialog'\r\n\r\n\r\nexport const useDomainAuthorizationPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal, closeModal} = useModalsStateMethods()\r\n    const t = useLocalizationState('t')\r\n\r\n    const onShowDomainAuthorizationDialog = useEvent(() => {\r\n        openModal({\r\n            id: DOMAIN_AUTHORIZATION_MODAL_ID,\r\n            title: t.INSTALLATION_PROCESS.bp_client_not_authorized_header(),\r\n            body: (\r\n                <>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part1()}\r\n                    </span>\r\n                    <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {t.ERROR_MESSAGES.domainAuthentificationErrorAnchor()}\r\n                    </a>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part2()}\r\n                    </span>\r\n                </>\r\n            ),\r\n            actions: ({closeModal: closeThisModal}) => (\r\n                <SmButton onClick={closeThisModal}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    const onHideDomainAuthorizationDialog = useEvent(() => {\r\n        closeModal(DOMAIN_AUTHORIZATION_MODAL_ID)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({\r\n            onShowDomainAuthorizationDialog,\r\n            onHideDomainAuthorizationDialog,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowDomainAuthorizationDialog, onHideDomainAuthorizationDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState, useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInstallationMethods} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nconst linkClass = 'cursor-pointer text-primary-legacy'\r\n\r\nconst EXTENSION_ID = 'ext-link'\r\nconst EXTENSION_ID_FF = 'ext-link-firefox'\r\nconst PLUGIN_ID = 'plugin-link'\r\n\r\ntype ModalContentProps = {\r\n    isExtAvailable: boolean\r\n    install: boolean\r\n}\r\n\r\nconst ModalContent: React.FC<ModalContentProps> = ({isExtAvailable, install}) => {\r\n    const {t: {INSTALLATION_PROCESS: i18n}} = useLocalizationState()\r\n    const {\r\n        installChromeExtension,\r\n        installFirefoxExtension,\r\n        installBPClientPlugin,\r\n    } = useInstallationMethods()\r\n\r\n    /* Set click handler after the modal is rendered or translations are changed */\r\n    useEffect(() => {\r\n        const chromeLink = document.getElementById(EXTENSION_ID)\r\n        const firefoxLink = document.getElementById(EXTENSION_ID_FF)\r\n        const pluginLink = document.getElementById(PLUGIN_ID)\r\n\r\n        chromeLink?.addEventListener('click', installChromeExtension)\r\n        firefoxLink?.addEventListener('click', installFirefoxExtension)\r\n        pluginLink?.addEventListener('click', installBPClientPlugin)\r\n\r\n        return () => {\r\n            chromeLink?.removeEventListener('click', installChromeExtension)\r\n            firefoxLink?.removeEventListener('click', installFirefoxExtension)\r\n            pluginLink?.removeEventListener('click', installBPClientPlugin)\r\n        }\r\n    }, [installChromeExtension, installFirefoxExtension, installBPClientPlugin])\r\n\r\n    let content: string = i18n.install_updateHeader(PLUGIN_ID, linkClass)\r\n\r\n    if (install) {\r\n        if (platformInfo.browser === 'chrome') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderChrome(EXTENSION_ID, PLUGIN_ID, linkClass)\r\n\r\n        } else if (platformInfo.browser === 'firefox') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderFirefox(EXTENSION_ID_FF, PLUGIN_ID, linkClass)\r\n\r\n        } else {\r\n            content = i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n        }\r\n    }\r\n\r\n    return <div dangerouslySetInnerHTML={{__html: content}} />\r\n}\r\n\r\nexport const useInstallationRequiredPopup = () => {\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const isExtensionAvailable = useBpClientState('isExtensionAvailable')\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onInstallationRequired = useEvent((install: boolean) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent\r\n                    install={install}\r\n                    isExtAvailable={isExtensionAvailable}\r\n                />\r\n            ),\r\n            actions: {\r\n                ok: {\r\n                    title: i18n.window_buttonOk(),\r\n                },\r\n            },\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onInstallationRequired})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onInstallationRequired])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {URL_EXTENSION_INSTALLER_CHROME, URL_EXTENSION_INSTALLER_FIREFOX, URL_MAC_PLUGIN} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype Props = {\r\n    browserName: string\r\n}\r\n\r\nconst ModalContent: React.FC<Props> = ({browserName}) => {\r\n    const {INSTALLATION_PROCESS: i18n} = useLocalizationState('t')\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    const isChrome = platformInfo.browser === 'chrome'\r\n    const isFirefox = platformInfo.browser === 'firefox'\r\n    const isSafari = platformInfo.browser === 'safari'\r\n    let linkHref = ''\r\n\r\n    if (isChrome) {\r\n        linkHref = URL_EXTENSION_INSTALLER_CHROME\r\n    } else if (isFirefox) {\r\n        linkHref = serverOrigin + URL_EXTENSION_INSTALLER_FIREFOX\r\n    } else if (isSafari) {\r\n        linkHref = serverOrigin + URL_MAC_PLUGIN\r\n    }\r\n    return (\r\n        <>\r\n            <span>\r\n                {i18n.bp_client_old_extension_version(browserName)}\r\n            </span>\r\n            {(isChrome || isFirefox || isSafari) && (\r\n                <>\r\n                    <br />\r\n                    <br />\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part1()}\r\n                    </span>\r\n                    <a href={linkHref} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {i18n.bp_client_update_extension_text()}\r\n                    </a>\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part2()}\r\n                    </span>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useOutdatedBrowserExtensionPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onShowExtensionIsOldDialog = useEvent((browserName: string) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent browserName={browserName} />\r\n            ),\r\n            actions: ({closeModal}) => (\r\n                <SmButton onClick={closeModal}>\r\n                    {i18n.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onShowExtensionIsOldDialog})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowExtensionIsOldDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst reloadPage = () => location.reload()\r\n\r\nexport function useOutdatedClientNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isClientOutdated = useAppConfigState('isClientOutdated')\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (isClientOutdated) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OutdatedClientAppError,\r\n                message: (\r\n                    <>\r\n                        <span>{i18n.reload_confirm_new_msg_part1()}</span>\r\n                        <a href=\"#\" onClick={reloadPage}>\r\n                            {i18n.reload_confirm_action_button_text()}\r\n                        </a>\r\n                        <span>{i18n.reload_confirm_new_msg_part2()}</span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.OutdatedClientAppError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isClientOutdated\r\n    }, [isClientOutdated, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState, useSessionStateConnector} from '@bpinc/ad-session-context'\r\nimport type {PhoneCapabilities, ServerErrorSource} from '@bpinc/ad-session-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst PHONE_OUT_OF_SERVICE_ERROR_DELAY = 5000\r\n\r\nexport const usePhoneOutOfServiceNotification = () => {\r\n    const sessionStateConnector = useSessionStateConnector()\r\n    const isHelperAppInstanceCreated = useBpClientState('isHelperAppInstanceCreated')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneType = useSessionState('phoneType')\r\n    const t = useLocalizationState('t')\r\n\r\n    const onUpdateCapabilities = useEvent((caps: PhoneCapabilities) => {\r\n        if (!caps.canDial && phoneType !== 'phone_type_none') {\r\n            bpLogger.warn('SIP phone or external line is out of service')\r\n\r\n            let message: string | undefined\r\n            switch (phoneType) {\r\n                case 'phone_type_nailed':\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_virtual_phone_not_available()\r\n                    break\r\n                case 'phone_type_soft_secure':\r\n                case 'phone_type_soft_unsecure':\r\n                    if (isHelperAppInstanceCreated) {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n                    } else {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_helper_app_not_available()\r\n                    }\r\n                    break\r\n                default:\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n            }\r\n\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message,\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        } else {\r\n            bpLogger.info('SIP phone or external line is in service')\r\n            hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n        }\r\n    })\r\n\r\n    const onServerError = useEvent((source: ServerErrorSource, errorCode: number) => {\r\n        if (source === 'agentServer' && errorCode === 4) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message: t.ERROR_MESSAGES.phoneIsNotRegistered(),\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        }\r\n    })\r\n\r\n    const onThreePCCServerGone = useEvent(() => {\r\n        showNotification({\r\n            type: 'warning',\r\n            id: Notifications.PhoneOutOfServiceError,\r\n            message: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_3pcc_server_connectionLost(),\r\n            closable: false,\r\n            showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n        })\r\n    })\r\n\r\n    const onThreePCCServerReady = useEvent(() => {\r\n        hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = sessionStateConnector.dispenser.subscribe({\r\n            onUpdateCapabilities,\r\n            onServerError,\r\n            onThreePCCServerGone,\r\n            onThreePCCServerReady,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [\r\n        onUpdateCapabilities,\r\n        onServerError,\r\n        onThreePCCServerGone,\r\n        onThreePCCServerReady,\r\n        sessionStateConnector,\r\n    ])\r\n}\r\n","import {useEmiErrorsNotifications} from './interaction/useEmiErrorsNotifications'\r\nimport {useFailedCallNotification} from './interaction/useFailedCallNotification'\r\nimport {useFavoritesLimitReachedError} from './interaction/useFavoritesLimitReachedError'\r\nimport {useInteractionNotAcceptedNotification} from './interaction/useInteractionNotAcceptedNotification'\r\nimport {usePhoneDeviceNotDetectedNotification} from './interaction/usePhoneDeviceNotDetectedNotification'\r\nimport {usePhoneTypeErrorNotification} from './interaction/usePhoneTypeErrorNotification'\r\nimport {\r\n    useReservedForIncomingInteractionNotification,\r\n} from './interaction/useReservedForIncomingInteractionNotification'\r\nimport {useWebRtcCallInChatErrorNotifications} from './interaction/useWebRtcCallInChatErrorNotifications'\r\nimport {useDomainAuthorizationPopup} from './system/useDomainAuthorizationPopup'\r\nimport {useInstallationRequiredPopup} from './system/useInstallationRequiredPopup'\r\nimport {useOfflineNotification} from './system/useOfflineNotification'\r\nimport {useOutdatedBrowserExtensionPopup} from './system/useOutdatedBrowserExtensionPopup'\r\nimport {useOutdatedClientNotification} from './system/useOutdatedClientNotification'\r\nimport {usePhoneOutOfServiceNotification} from './system/usePhoneOutOfServiceNotification'\r\nimport {useSipServerDisconnectedNotification} from './system/useSipServerDisconnectedNotification'\r\nimport {useSlowNetworkNotification} from './system/useSlowNetworkNotification'\r\nimport {useUnauthorizedDomainNotification} from './system/useUnauthorizedDomainNotification'\r\n\r\n\r\n/**\r\n * Top-level notifications which should be shown for application WITH COMM.PANEL ONLY\r\n */\r\nexport function useInteractionNotifications() {\r\n    useEmiErrorsNotifications()\r\n    useFailedCallNotification()\r\n    useInteractionNotAcceptedNotification()\r\n    usePhoneDeviceNotDetectedNotification()\r\n    usePhoneTypeErrorNotification()\r\n    useReservedForIncomingInteractionNotification()\r\n    useWebRtcCallInChatErrorNotifications()\r\n    useFavoritesLimitReachedError()\r\n}\r\n\r\n/**\r\n * Top-level notifications which should be shown in ANY application of AD framework (standalone KB, for instance)\r\n */\r\nexport function useSystemNotifications() {\r\n    useDomainAuthorizationPopup()\r\n    useInstallationRequiredPopup()\r\n    useOfflineNotification()\r\n    useOutdatedBrowserExtensionPopup()\r\n    useOutdatedClientNotification()\r\n    usePhoneOutOfServiceNotification()\r\n    useSipServerDisconnectedNotification()\r\n    useSlowNetworkNotification()\r\n    useUnauthorizedDomainNotification()\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {incomingEMIErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst MSTEAMS_ERROR_NOTIFICATION_ID = 'msteams_error_notification_id'\r\n\r\n/**\r\n * Shows EMI (Enterprise Messengers Integration) errors\r\n */\r\nexport function useEmiErrorsNotifications() {\r\n    const emiData = useSessionState('emi')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n\r\n    const getMsTeamsError = useEvent((errorCode: string, errorText = '') => {\r\n        switch (errorCode) {\r\n            case incomingEMIErrorMessageCodes.unable_to_get_access_token:\r\n                return i18n.msteams_access_token_error_message() + errorText\r\n            case incomingEMIErrorMessageCodes.refresh_token_expired:\r\n                return i18n.communicator_msteams_refresh_token_expired_error_message()\r\n            case incomingEMIErrorMessageCodes.user_deauthorized:\r\n                return undefined\r\n            case incomingEMIErrorMessageCodes.no_integration_account:\r\n            case incomingEMIErrorMessageCodes.feature_disabled:\r\n            case incomingEMIErrorMessageCodes.no_emi_servers:\r\n                return i18n.msteams_disabled()\r\n            case incomingEMIErrorMessageCodes.integration_account_changed:\r\n            case incomingEMIErrorMessageCodes.mismatched_directory_id:\r\n            case incomingEMIErrorMessageCodes.mismatched_client_id:\r\n                return i18n.communicator_msteams_reset_by_admin_message()\r\n            case incomingEMIErrorMessageCodes.azure_user_deleted:\r\n                return i18n.msteams_user_deleted()\r\n            case incomingEMIErrorMessageCodes.unsufficient_privileges:\r\n                return i18n.msteams_unsufficient_privileges()\r\n            default:\r\n                return errorText\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (emiData?.msteams?.errorCode) {\r\n            const message = getMsTeamsError(emiData.msteams.errorCode, emiData.msteams.errorMessage)\r\n            if (!message) {\r\n                return\r\n            }\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.MSTeamsIntegrationError,\r\n                message,\r\n            })\r\n        } else {\r\n            hideNotificationById(MSTEAMS_ERROR_NOTIFICATION_ID)\r\n        }\r\n    }, [showNotification, hideNotificationById, getMsTeamsError, emiData?.msteams])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteractionStateConnector} from '@bpinc/ad-interaction-state-context'\r\nimport {isCallWithoutCallId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\n/**\r\n * Show warning when call completed with invalid state\r\n */\r\nexport function useFailedCallNotification() {\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const onItemCompleted = useEvent(({item}: {item: Item}) => {\r\n        if (isCallWithoutCallId(item)) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.CallFailedDueNetworkIssueWarning,\r\n                message: i18n.notification_callWithNoAnswer_networkProblem(formatDate(new Date().getTime())),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionStateConnector.dispenser.subscribe({onItemCompleted})\r\n        return subscription.unsubscribe\r\n    }, [interactionStateConnector, onItemCompleted])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAgentState} from '@bpinc/ad-agent-state-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useInteractionNotAcceptedNotification() {\r\n    const {notReadyReason, state, stateSetDate, systemNotReadyReasons} = useAgentState()\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!systemNotReadyReasons) {\r\n            return\r\n        }\r\n        if (state === 'not_ready' && notReadyReason === systemNotReadyReasons.noAnswer) {\r\n            const time = stateSetDate && formatDate(stateSetDate)\r\n            const currentState = '\"No answer\"'\r\n            const message = i18n.notification_agentInNotReadyNoAnswer(currentState, time || '[TIME]')\r\n\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.IncomingInteractionNotAcceptedError,\r\n                message,\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.IncomingInteractionNotAcceptedError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // update only on notReadyReason change\r\n    }, [notReadyReason, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function usePhoneDeviceNotDetectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneDeviceIn = useSessionState('phoneDeviceIn')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (phoneDeviceIn) {\r\n            hideNotificationById(Notifications.PhoneDeviceNotDetectedError)\r\n            showNotification({\r\n                type: 'success',\r\n                id: Notifications.PhoneDeviceDetectedMessage,\r\n                message: i18n.device_detected(phoneDeviceIn),\r\n                duration: 5000,\r\n            })\r\n        } else {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneDeviceNotDetectedError,\r\n                message: i18n.device_empty(),\r\n                duration: 5000,\r\n                showDelay: 5000,\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track device change only\r\n    }, [phoneDeviceIn, updateNotification, hideNotificationById])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function usePhoneTypeErrorNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {startPhoneTypeSelection} = useSessionStateMethods()\r\n    const phoneTypeErrorCode = useSessionState('phoneTypeErrorCode')\r\n    const {AUTHORIZATION_DIALOG_LABELS: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (phoneTypeErrorCode === 2) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.BadPhoneExtensionError,\r\n                message: i18n.auth_message_undefinedExtension(),\r\n            })\r\n            startPhoneTypeSelection()\r\n        }\r\n\r\n        if (!phoneTypeErrorCode || phoneTypeErrorCode === 0) {\r\n            hideNotificationById(Notifications.BadPhoneExtensionError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only phoneTypeErrorCode\r\n    }, [phoneTypeErrorCode, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAgentState} from '@bpinc/ad-agent-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useReservedForIncomingInteractionNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {reservedForIncomingInteraction} = useAgentState()\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (reservedForIncomingInteraction) {\r\n            showNotification({\r\n                type: 'info',\r\n                id: Notifications.ReservedForIncomingInteractionMessage,\r\n                message: i18n.callback_reservation_header(),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.ReservedForIncomingInteractionMessage)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only reservedForIncomingInteraction\r\n    }, [reservedForIncomingInteraction, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {WebRtcError} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {NotificationType} from '@bpinc/lib-notifications-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useWebRtcCallInChatErrorNotifications = () => {\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const onWebRtcError = useEvent((error: WebRtcError) => {\r\n        let type: NotificationType, message: string\r\n        switch (error) {\r\n            case 'invalid_server':\r\n                type = 'error'\r\n                message = i18n.chat_web_rtc_invalid_ice_server()\r\n                break\r\n            case 'answer_timeout':\r\n                type = 'info'\r\n                message = i18n.chat_web_rtc_answer_timeout()\r\n                break\r\n            case 'already_exists':\r\n                type = 'warning'\r\n                message = i18n.chat_web_rtc_only_1_call_simultaneously()\r\n                break\r\n        }\r\n        showNotification({\r\n            type,\r\n            id: Notifications.ChatWebRtcError,\r\n            message,\r\n            closable: true,\r\n            duration: 10_000,\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector.dispenser.subscribe({onWebRtcError})\r\n        return subscription.unsubscribe\r\n    }, [interactionChatStateConnector, onWebRtcError])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useFavoritesStateConnector} from '@bpinc/state-favorites-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\n/**\r\n * Show error when user tried to add new favorite item, but the limit is reached\r\n */\r\nexport function useFavoritesLimitReachedError() {\r\n    const favoritesStateConnector = useFavoritesStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {FAVORITES: i18n} = useLocalizationState('t')\r\n\r\n    const onLimitReachedError = useEvent(() => {\r\n        showNotification({\r\n            type: 'error',\r\n            id: Notifications.CallFailedDueNetworkIssueWarning,\r\n            closable: true,\r\n            tags: ['current-view'],\r\n            message: i18n.favorites_limit_reached_error(),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = favoritesStateConnector.dispenser.subscribe({onLimitReachedError})\r\n        return subscription.unsubscribe\r\n    }, [favoritesStateConnector, onLimitReachedError])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {\r\n    useIsOffline,\r\n    useOfflineErrorMessages,\r\n    useOfflineStateDataShowOfflineAlert,\r\n    useOfflineStateMethods,\r\n} from '@bpinc/ad-offline-state-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\nexport function useOfflineNotification() {\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const showOfflineAlert = useOfflineStateDataShowOfflineAlert()\r\n    const offlineErrorMessages = useOfflineErrorMessages()\r\n    const isOffline = useIsOffline()\r\n\r\n    useEffect(() => {\r\n        if (showOfflineAlert) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OfflineStateError,\r\n                content: offlineErrorMessages.isOffline,\r\n                closable: true,\r\n                duration: 5000,\r\n                onHide: () => setShowOfflineAlert(false),\r\n            })\r\n        }\r\n    }, [\r\n        offlineErrorMessages.isOffline,\r\n        setShowOfflineAlert,\r\n        showNotification,\r\n        showOfflineAlert,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (!isOffline) {\r\n            setShowOfflineAlert(false)\r\n        }\r\n    }, [isOffline, setShowOfflineAlert])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent, usePreviousValueRef} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSipServerDisconnectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const sipServer = useSessionState('sipServer')\r\n    const prevSipServerRef = usePreviousValueRef(sipServer)\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (sipServer) {\r\n            hideNotificationById(Notifications.SipServerConnectionError)\r\n        } else if (prevSipServerRef.current) {\r\n            // we had SIP server, but not anymore\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.SipServerConnectionError,\r\n                message: i18n.window_messages_3pcc_server_connectionLost(),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track sipServer change only\r\n    }, [sipServer, updateNotification])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst CHECK_INTERVAL = 5000\r\nconst SLOW_THRESHOLD = 800\r\n\r\n/**\r\n * This hook periodically checks the user's connection speed by fetching root of the current host.\r\n * and shows a notification if the connection is slow.\r\n * Connection is considered slow based on the predefined threshold (SLOW_THRESHOLD),\r\n * When the connection speed improves, it hides the notification.\r\n */\r\nexport function useSlowNetworkNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const startTime = useRef(0)\r\n\r\n    const checkConnectionSpeed = useEvent(() => {\r\n        const isRequestAlreadyInProgress = startTime.current !== 0\r\n\r\n        if (isRequestAlreadyInProgress || process.env.NODE_ENV === 'development') {\r\n            return\r\n        }\r\n\r\n        startTime.current = new Date().getTime()\r\n\r\n        fetch('/', {\r\n            method: 'HEAD',\r\n            cache: 'no-store',\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(() => {\r\n                const endTime = new Date().getTime()\r\n                const duration = endTime - startTime.current\r\n\r\n                startTime.current = 0\r\n\r\n                if (duration > SLOW_THRESHOLD) {\r\n                    const message = i18n.slow_connection()\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.SlowNetworkConnectionError,\r\n                        message,\r\n                    })\r\n                    bpLogger.warn(`Slow connection detected`)\r\n                } else {\r\n                    hideNotificationById(Notifications.SlowNetworkConnectionError)\r\n                }\r\n            })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(checkConnectionSpeed, CHECK_INTERVAL)\r\n        return () => clearInterval(interval)\r\n    }, [checkConnectionSpeed])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nexport function useUnauthorizedDomainNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isDomainAuthorized = useBpClientState('isDomainAuthorized')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isDomainAuthorized) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.DomainNotAuthorizedForBPClientError,\r\n                closable: false,\r\n                message: (\r\n                    <>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part1()}\r\n                        </span>\r\n                        <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            {i18n.domainAuthentificationErrorAnchor()}\r\n                        </a>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part2()}\r\n                        </span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.DomainNotAuthorizedForBPClientError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isDomainAuthorized\r\n    }, [isDomainAuthorized, updateNotification])\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {useSystemNotifications} from '@bpinc/lib-system-notifications'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    authorizedConnectors: AuthorizedConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizedConnectorsConsumers: React.FC<Props> = ({baseConnectors, authorizedConnectors, children}) => {\r\n    useSystemNotifications()\r\n    return <>{children(baseConnectors, authorizedConnectors)}</>\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {incomingErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {SmButton, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const ForceLogout: React.FC = () => {\r\n    const forceLogoutInfo = useSessionState('forceLogoutInfo')\r\n    const {closeForceLogout} = useSessionStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n\r\n    assertDefined(forceLogoutInfo)\r\n    const loggedOutBy = formatFullName(forceLogoutInfo.firstName, forceLogoutInfo.lastName)\r\n    const loggedOutTime = formatDate(forceLogoutInfo.timestamp)\r\n\r\n    const getContent = () => {\r\n        switch (forceLogoutInfo.errorCode) {\r\n            case incomingErrorMessageCodes.forced_logout_by_another_session: {\r\n                return t.ERROR_MESSAGES.sessionWasOverwritten()\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_supervisor: {\r\n                return t.ERROR_MESSAGES.forcedLogout(loggedOutBy, loggedOutTime)\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_tenant:\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_user: {\r\n                return t.ERROR_MESSAGES.account_has_been_disabled()\r\n            }\r\n        }\r\n        return forceLogoutInfo.forceLogoutReason\r\n    }\r\n\r\n    return (\r\n        <SmSegment\r\n            padded\r\n            className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\r\n                overflow-hidden rounded-none border-none bg-transparent shadow-none\"\r\n            id=\"login\"\r\n        >\r\n            <Modal\r\n                isOpen\r\n                size=\"small\"\r\n                className=\"max-w-[570px]\"\r\n                aria-describedby=\"forceLogoutDialogDescription\"\r\n                data-testid=\"forced-logout-modal\"\r\n            >\r\n                <Modal.Header>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_information()}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description id=\"forceLogoutDialogDescription\">\r\n                        <p>{getContent()}</p>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <SmButton onClick={closeForceLogout} primary data-testid=\"ok-button\">\r\n                        {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                    </SmButton>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </SmSegment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useCurrentTabRole} from '@bpinc/ad-current-tab-data-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ForceLogin, LoginPage} from '@bpinc/lib-login-ui'\r\nimport {ForceLogout} from '@bpinc/lib-login-ui/src/components/ForceLogout'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const UnauthorizedUI: React.FC = () => {\r\n    const tabRole = useCurrentTabRole()\r\n    const {\r\n        authChecked,\r\n        isLoggedIn,\r\n        showLoginDialog,\r\n        offerForceLogin,\r\n        forceLogoutInfo,\r\n    } = useSessionState(['authChecked', 'isLoggedIn', 'showLoginDialog', 'offerForceLogin', 'forceLogoutInfo'])\r\n    const language = useLocalizationState('language')\r\n\r\n    const showAppLoader = !language || (tabRole === 'undecided' && !authChecked)\r\n    const showLoginPage = !showAppLoader && (showLoginDialog || !isLoggedIn)\r\n    const showForceLogout = !!forceLogoutInfo && showLoginPage\r\n    const showForceLogin = offerForceLogin && !forceLogoutInfo && showLoginPage\r\n\r\n    return (\r\n        <div className=\"mx-auto h-full w-[496px]\">\r\n            {showAppLoader && <Loader active size=\"huge\" color=\"primary\" />}\r\n            {showLoginPage && <LoginPage />}\r\n            {showForceLogout && <ForceLogout />}\r\n            {showForceLogin && <ForceLogin />}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {AuthorizedProviders} from '@bpinc/ad-local-providers'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {AuthorizedConnectorsConsumers} from './AuthorizedConnectorsConsumers'\r\nimport {UnauthorizedUI} from './UnauthorizedUI'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizationUIRouter: React.FC<Props> = React.memo(({\r\n    baseConnectors,\r\n    children,\r\n}) => {\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <AuthorizedProviders baseConnectors={baseConnectors}>\r\n                {authorizedConnectors => (\r\n                    <AuthorizedConnectorsConsumers\r\n                        baseConnectors={baseConnectors}\r\n                        authorizedConnectors={authorizedConnectors}\r\n                    >\r\n                        {children}\r\n                    </AuthorizedConnectorsConsumers>\r\n                )}\r\n            </AuthorizedProviders>\r\n        )\r\n    }\r\n    return <UnauthorizedUI />\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const BaseConnectorsConsumers: React.FC<Props> = ({\r\n    baseConnectors,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n}) => {\r\n\r\n    if (BaseConnectorsConsumer) {\r\n        return (\r\n            <BaseConnectorsConsumer baseConnectors={baseConnectors}>\r\n                {children}\r\n            </BaseConnectorsConsumer>\r\n        )\r\n    }\r\n    return children\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {BaseProviders} from '@bpinc/ad-local-providers'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport {Tooltip} from '@bpinc/lib-jskit-ui'\r\nimport {NotificationsStateProvider} from '@bpinc/lib-notifications-context'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\nimport {BaseConnectorsConsumers} from './BaseConnectorsConsumers'\r\n\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (baseConnectors: BaseConnectors) => ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const TopLevelProviders: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    BaseConnectorsConsumer,\r\n    children,\r\n}) => {\r\n    return (\r\n        <BaseProviders platformSpecific={platformSpecific} app={app}>\r\n            {baseConnectors => (\r\n                <BaseConnectorsConsumers\r\n                    baseConnectors={baseConnectors}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    <Tooltip.Provider>\r\n                        <NotificationsStateProvider>\r\n                            {children(baseConnectors)}\r\n                        </NotificationsStateProvider>\r\n                    </Tooltip.Provider>\r\n                </BaseConnectorsConsumers>\r\n            )}\r\n        </BaseProviders>\r\n    )\r\n}\r\n","import type {PropsWithChildren, ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport type {RemoteName} from '@bpinc/lib-remotes-configs'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AppStyleSelector} from '@bpinc/lib-ui-elements'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport {AuthorizationUIRouter} from './AuthorizationUIRouter'\r\nimport {TopLevelProviders} from './TopLevelProviders'\r\n\r\n\r\nexport type BaseConnectorsConsumerComponent = React.FC<PropsWithChildren<{baseConnectors: BaseConnectors}>>\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n    className?: string\r\n    appRemoteName: RemoteName\r\n}\r\n\r\nexport const AuthorizationModule: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n    className,\r\n    appRemoteName,\r\n}) => {\r\n    return (\r\n        <AppStyleSelector app={appRemoteName}>\r\n            <div className={tcn('h-full', className)}>\r\n                <TopLevelProviders\r\n                    app={app}\r\n                    platformSpecific={platformSpecific}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    {baseConnectors => (\r\n                        <AuthorizationUIRouter baseConnectors={baseConnectors}>\r\n                            {children}\r\n                        </AuthorizationUIRouter>\r\n                    )}\r\n                </TopLevelProviders>\r\n            </div>\r\n        </AppStyleSelector>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\n\r\nimport {useServicesDispositions, useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {Dropdown, Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype SetDispositionModalProps = CommonModalProps & {\r\n    service: string\r\n    onSave: (disposition: { id: string; name: string } | undefined) => void\r\n}\r\n\r\nexport const SetDispositionModal: React.FC<SetDispositionModalProps> = ({\r\n    onClose,\r\n    service,\r\n    onSave,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const dispositions = useServicesDispositions()[service]\r\n    const dispositionIsRequired = useServicesDispositionsState(\r\n        s => s.services[service].requireDispositions,\r\n    )\r\n\r\n    const dipsositionOptions = useMemo(() => {\r\n        return truthy([\r\n            dispositionIsRequired && {\r\n                text: t.DISPOSITION.disposition_not_selected(),\r\n                value: '',\r\n            },\r\n            ...Object.values(dispositions ?? {})\r\n                .filter(d => d.type === 'SUCCESS' && d.group === 'Final')\r\n                .map(d => ({\r\n                    text: d.name,\r\n                    value: d.id,\r\n                })),\r\n        ])\r\n    }, [dispositionIsRequired, dispositions, t.DISPOSITION])\r\n\r\n    const [selectedDisposition, setSelectedDisposition] = useState(dipsositionOptions[0]?.value)\r\n\r\n    const handleSubmit = () => {\r\n        const disposition = selectedDisposition\r\n            ? dispositions[selectedDisposition]\r\n            : undefined\r\n\r\n        onSave(\r\n            disposition && {\r\n                id: disposition.id,\r\n                name: disposition.name,\r\n            },\r\n        )\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            className=\"relative max-w-90 overflow-hidden\"\r\n            aria-labelledby=\"set_disposition_modal\"\r\n            data-testid=\"SetDispositionModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"set_disposition_modal\">\r\n                {t.GLOBAL.select_disposition_dialog_header()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <Dropdown\r\n                    options={dipsositionOptions}\r\n                    value={selectedDisposition}\r\n                    onChange={(_evt, data) =>\r\n                        typeof data.value === 'string' &&\r\n                        setSelectedDisposition(data.value)\r\n                    }\r\n                    placeholder={t.DISPOSITION.disposition_selectDisposition()}\r\n                />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    primary\r\n                    onClick={handleSubmit}\r\n                    disabled={dispositionIsRequired && !selectedDisposition}\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {CaseStatus} from '@bpinc/ad-request-urls'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {SmIcon, SmList} from '@bpinc/lib-external-ui-elements'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {Button, Dropdown, Popup, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {SetDispositionModal} from './SetDispositionModal'\r\n\r\n\r\ninterface SetCaseStatusButtonProps {\r\n    caseId: string\r\n    service: string\r\n    initialPendingReasonId?: string\r\n    initialStatus: CaseStatus\r\n}\r\n\r\ntype Option = {\r\n    text: string\r\n    value: CaseStatus\r\n}\r\n\r\nexport const SetCaseStatusButton: FC<SetCaseStatusButtonProps> = ({\r\n    initialStatus,\r\n    caseId,\r\n    initialPendingReasonId,\r\n    service,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const showPopup = useBoolean()\r\n    const [status, setStatus] = useState<CaseStatus>(initialStatus)\r\n\r\n    const stateOptions: Option[] = useMemo(() => {\r\n        return [\r\n            {\r\n                text: t.GLOBAL.case_status_open(),\r\n                value: 'Open',\r\n            },\r\n            {\r\n                text: t.GLOBAL.case_status_pending(),\r\n                value: 'Pending',\r\n            },\r\n            {\r\n                text: t.GLOBAL.case_status_resolved(),\r\n                value: 'Resolved',\r\n            },\r\n        ]\r\n    }, [t])\r\n\r\n    const {setCaseStatus} = useCaseStateMethods()\r\n    const useDisposition = useServicesDispositionsState(\r\n        s => s.services[service].useDispositions,\r\n    )\r\n    const openSetDipositionModal = useModalComponentOpener(SetDispositionModal)\r\n    const handleSubmit = (statusToSubmit: CaseStatus) => {\r\n        switch (statusToSubmit) {\r\n            case 'Pending': {\r\n                const pendingReason = pendingReasons.data.find(r => r.id === selectedPendingReason)\r\n\r\n                return setCaseStatus({caseId, status: statusToSubmit, pendingReason})\r\n            }\r\n            case 'Resolved': {\r\n                if (!useDisposition) {\r\n                    return setCaseStatus({caseId, status: statusToSubmit})\r\n                }\r\n\r\n                const onSave = (\r\n                    disposition: { id: string; name: string } | undefined,\r\n                ) => {\r\n                    setCaseStatus({\r\n                        caseId,\r\n                        status: statusToSubmit,\r\n                        disposition,\r\n                    })\r\n                }\r\n\r\n                openSetDipositionModal({service, onSave})\r\n                break\r\n            }\r\n            default:\r\n                setCaseStatus({caseId, status: statusToSubmit})\r\n        }\r\n    }\r\n\r\n    const [selectedPendingReason, setSelectedPendingReason] = useState<\r\n        string | undefined\r\n    >(initialPendingReasonId)\r\n    const pendingReasons = useCaseState('casePendingReasons')\r\n\r\n    const pendingReasonsOptions = useMemo(() => {\r\n        return pendingReasons.data.map(({id, name}) => ({\r\n            text: name,\r\n            value: id,\r\n        }))\r\n    }, [pendingReasons.data])\r\n\r\n    const disabled =\r\n        status === 'Pending'\r\n            ? initialPendingReasonId === selectedPendingReason\r\n            : initialStatus === status\r\n    return (\r\n        <div className=\"flex items-center gap-2\">\r\n            {!!pendingReasonsOptions.length && (\r\n                <Dropdown\r\n                    options={pendingReasonsOptions}\r\n                    placeholder={t.GLOBAL.case_pending_reason_selector_no_value()}\r\n                    selection\r\n                    value={selectedPendingReason}\r\n                    onChange={(_evt, {value}) =>\r\n                        typeof value === 'string' &&\r\n                        setSelectedPendingReason(value)\r\n                    }\r\n                />\r\n            )}\r\n            <div className=\"flex h-9 shrink-0 rounded border border-primary-legacy hover:border-primary-hover active:border-primary-active\">\r\n                <Popup\r\n                    show={showPopup.value}\r\n                    content={\r\n                        <SmList divided>\r\n                            {stateOptions.map(({text, value}) => (\r\n                                <SmList.Item key={value}>\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            setStatus(value)\r\n                                            showPopup.setFalse()\r\n                                        }}\r\n                                        className=\"w-full p-2\"\r\n                                    >\r\n                                        {text}\r\n                                    </Button>\r\n                                </SmList.Item>\r\n                            ))}\r\n                        </SmList>\r\n                    }\r\n                    onClickOutside={showPopup.setFalse}\r\n                    placement=\"bottom\"\r\n                >\r\n                    <SemanticButton\r\n                        icon={showPopup.value ? 'chevron up' : 'chevron down'}\r\n                        primary\r\n                        basic\r\n                        onClick={showPopup.toggle}\r\n                        className=\"rounded-r-none bg-transparent !shadow-none\"\r\n                    />\r\n                </Popup>\r\n                <SemanticButton\r\n                    onClick={() => handleSubmit(status)}\r\n                    disabled={disabled}\r\n                    className=\"shrink-0 rounded-l-none border-l border-main-border bg-transparent pl-0 font-normal text-primary-legacy\"\r\n                >\r\n                    {`${t.GLOBAL.submitAs()}: ${status}`}\r\n                    {!disabled && (\r\n                        <SmIcon className=\"ml-1 mr-0\" name=\"check\" />\r\n                    )}\r\n                </SemanticButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {SetCaseStatusButton} from '@bpinc/ad-case-ui/src/components/CasePage/SetCaseStatusButton'\r\nimport {useActiveInteractionProp, useActiveInteractionStepId} from '@bpinc/ad-interaction-state-context'\r\nimport {getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ActiveInteractionCaseFooterContentrops {\r\n    caseId: string\r\n}\r\n\r\nexport const ActiveInteractionCaseFooterContent: FC<\r\n    ActiveInteractionCaseFooterContentrops\r\n> = ({caseId}) => {\r\n    const caseItem = useCaseState(s =>\r\n        caseId ? s.cases[caseId]?.data : undefined,\r\n    )\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const pendingReasonsId = caseItem?.pendingReasonId\r\n    const caseStatus = caseItem?.status\r\n\r\n    const activeInteractionStepId = useActiveInteractionStepId()\r\n    const serviceId = useActiveInteractionProp(getServiceId)\r\n    const {createEmailDraft} = useCaseStateMethods()\r\n\r\n    if (!serviceId || !caseStatus) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex w-full flex-wrap justify-between gap-y-2\">\r\n            <div className=\"flex gap-2\">\r\n                <SemanticButton\r\n                    icon=\"sticky note\"\r\n                    basic\r\n                    tooltip={t.CASE_SEARCH.new_case_notes_button_tooltip()}\r\n                />\r\n                <SemanticButton\r\n                    icon=\"envelope\"\r\n                    basic\r\n                    tooltip={t.EMAIL.email_new_email_draft()}\r\n                    onClick={() => {\r\n                        createEmailDraft({interactionStepId: activeInteractionStepId})\r\n                    }}\r\n                />\r\n            </div>\r\n            <SetCaseStatusButton\r\n                key={caseId}\r\n                caseId={caseId}\r\n                initialPendingReasonId={pendingReasonsId}\r\n                service={serviceId}\r\n                initialStatus={caseStatus}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import type {QueueType} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport const queryKeys = {\r\n    queue: (queueType?: QueueType, params?: unknown) => ['queue', queueType, params].filter(Boolean),\r\n    queueCount: (params?: unknown) => ['queueCount', params].filter(Boolean),\r\n    queueCountByService: () => ['queueCountByService'],\r\n    getEmail: (emailId: string) => ['getEmail', emailId],\r\n    searchEmails: (search: string) => ['searchEmails', search],\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\nexport function useGetEmailQuery(emailId: string) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    return useQuery({\r\n        enabled: !!emailId,\r\n        queryKey: queryKeys.getEmail(emailId),\r\n        queryFn: () => apiRequests(serverOrigin).getEmail({emailId}),\r\n        staleTime: MS_IN_MINUTE * 5,\r\n    })\r\n}\r\n","import {formatEmail} from '@bpinc/ad-formatting-helpers'\r\nimport type {Email, EmailAddress, EmailAttachment, EmailRequest} from '@bpinc/ad-request-urls'\r\nimport type {Attachment} from '@bpinc/lib-attachments-state'\r\nimport {formatHTMLAsMultiLineString} from '@bpinc/lib-html-utils'\r\n\r\nimport type {EmailFormFields, EmailSearchItem} from './types'\r\n\r\n\r\nexport function emailAddressToEmailSearchItem(email: EmailAddress): EmailSearchItem {\r\n    return {\r\n        id: email.address,\r\n        displayText: formatEmail(email),\r\n        address: email.address,\r\n        name: email.name,\r\n    }\r\n}\r\n\r\n\r\nfunction emailSearchItemToEmailAddress(item: EmailSearchItem): EmailAddress {\r\n    return {\r\n        address: item.address,\r\n        name: item.name,\r\n    }\r\n}\r\n\r\n\r\nexport function emailFormFieldsToEmailRequest(emailId: string, fields: EmailFormFields): EmailRequest {\r\n    return {\r\n        emailId,\r\n        html: fields.html,\r\n        text: formatHTMLAsMultiLineString(fields.html),\r\n        subject: fields.subject,\r\n        attachments: fields.attachments,\r\n        to: fields.to.map(emailSearchItemToEmailAddress),\r\n        cc: fields.cc.map(emailSearchItemToEmailAddress),\r\n        bcc: fields.bcc.map(emailSearchItemToEmailAddress),\r\n        //TODO: Understand what should be there:\r\n        // articleId: undefined,\r\n        //It seems like current user id if there was a template used for the email\r\n        // headerFooterUserId: undefined,\r\n        // originalMessageInserted: false,\r\n    }\r\n}\r\n\r\nexport function emailFormFieldsToEmail(fields: EmailFormFields, attachments: Attachment<EmailAttachment>[]): Partial<Email> {\r\n    return {\r\n        content: fields.html,\r\n        subject: fields.subject,\r\n        attachments: attachments.map(({id, file}) => ({\r\n            id,\r\n            name: file.name,\r\n            size: file.size,\r\n        })),\r\n        toAddresses: fields.to.map(emailSearchItemToEmailAddress),\r\n        ccAddresses: fields.cc.map(emailSearchItemToEmailAddress),\r\n        bccAddresses: fields.bcc.map(emailSearchItemToEmailAddress),\r\n    }\r\n}\r\n","import {useMutation, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport type {Email} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEmailAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport {emailFormFieldsToEmail, emailFormFieldsToEmailRequest} from '../components/EmailForm/helpers'\r\nimport type {EmailFormFields} from '../components/EmailForm/types'\r\nimport {queryKeys} from '../queries'\r\n\r\n\r\nexport function useSaveDraftMutation(emailId: string) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n    const queryClient = useQueryClient()\r\n    const getAttachmentsList = useEmailAttachmentsUIState('getAttachmentsList')\r\n    const attachmentsRef = useAsRef(getAttachmentsList(emailId))\r\n\r\n    return useMutation({\r\n        mutationKey: ['saveDraft', emailId],\r\n        mutationFn: (data: EmailFormFields) => {\r\n            //Optimistically update getEmail query\r\n            queryClient.setQueryData<Email>(\r\n                queryKeys.getEmail(emailId),\r\n                s => s && {...s, ...emailFormFieldsToEmail(data, attachmentsRef.current)},\r\n            )\r\n\r\n            //Send REST request\r\n            return apiRequests(serverOrigin).saveEmailDraft({requestBody: emailFormFieldsToEmailRequest(emailId, data)})\r\n        },\r\n    })\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport type {Service} from '@bpinc/ad-services-dispositions-types'\r\n\r\n\r\nconst serviceToOption = ({id, name}: Pick<Service, 'id' | 'name'>) => {\r\n    return {\r\n        value: id,\r\n        text: name,\r\n        'data-testid': 'option',\r\n        'data-service': 'true',\r\n    }\r\n}\r\n\r\nexport function useEmailServicesOptions() {\r\n    const {services} = useServicesDispositionsState()\r\n\r\n\r\n    return useMemo(() => {\r\n        return Object.values(services).filter(s => s.type === 'EMAIL').map(serviceToOption)\r\n    }, [services])\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useEmailServicesOptions} from '../useEmailServicesOptions'\r\n\r\n\r\ninterface ServiceSelectorProps {\r\n    serviceId: string\r\n    itemId: string\r\n    emailId: string\r\n}\r\n\r\nexport const ServiceSelector: FC<ServiceSelectorProps> = ({itemId, emailId, serviceId}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const [localServiceId, setLocalServiceId] = React.useState(serviceId)\r\n\r\n    useEffect(() => {\r\n        setLocalServiceId(serviceId)\r\n    }, [serviceId])\r\n\r\n    const options = useEmailServicesOptions()\r\n\r\n    const {changeEmailService} = useInteractionStateMethods()\r\n\r\n    const handleChange = (_e: React.SyntheticEvent, {value}: DropdownProps) => {\r\n        if (typeof value !== 'string') {\r\n            throw Error('Invalid type in email service selector')\r\n        }\r\n        setLocalServiceId(value)\r\n        changeEmailService({serviceId: value, emailId, itemId})\r\n    }\r\n\r\n    return (\r\n        <Dropdown\r\n            options={options}\r\n            value={localServiceId}\r\n            onChange={handleChange}\r\n            placeholder={t.GLOBAL.service_selector_no_value()}\r\n            selectOnBlur={false}\r\n            data-testid=\"service-selector\"\r\n            selection\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useEmailAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AttachButton, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useSaveDraftMutation} from '../../mutations'\r\nimport type {EmailFormProps} from './EmailForm'\r\nimport {ServiceSelector} from './ServiceSelector'\r\nimport type {EmailFormFields} from './types'\r\n\r\n\r\ninterface EmailControlsProps extends EmailFormProps {\r\n    className?: string\r\n    form: UseFormReturn<EmailFormFields>\r\n}\r\n\r\nconst buttonStyles = 'w-6 p-2.5 shrink-0'\r\n\r\nexport const EmailControls: FC<EmailControlsProps> = ({\r\n    interactionId,\r\n    serviceId,\r\n    emailId,\r\n    form,\r\n    className,\r\n}) => {\r\n    const {\r\n        t: {EMAIL: i18n},\r\n    } = useLocalizationState()\r\n\r\n    const {sendEmailDraft, saveEmailDraft} = useInteractionStateMethods()\r\n    const {mutateAsync: saveDraft} = useSaveDraftMutation(emailId)\r\n\r\n    const selectedService = useInteractionProp(interactionId, getServiceId)\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const isLastEmailDraft = useInteractionProp(interactionId, i => i?.emailData?.activeDrafts?.length === 1)\r\n    const addAttachment = useEmailAttachmentsUIState('addAttachment')\r\n    const {discardEmailDraft} = useCaseStateMethods()\r\n\r\n    const handleUploadFiles = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            addFilesToAttachmentsList()\r\n\r\n            function addFilesToAttachmentsList() {\r\n                const files = getFilesFromEvent()\r\n                if (!files) {\r\n                    return\r\n                }\r\n\r\n                files.forEach(partial(addAttachment, emailId))\r\n            }\r\n\r\n            function getFilesFromEvent() {\r\n                const input = event.target\r\n                return input.files ? Array.from(input.files) : []\r\n            }\r\n        },\r\n        [addAttachment, emailId],\r\n    )\r\n    async function handleSendEmail() {\r\n        // REST API Request for save the draft before sending the email\r\n        await saveDraft(form.getValues())\r\n        //WS API Request for sending the email\r\n        sendEmailDraft({itemId: interactionId, emailId})\r\n    }\r\n\r\n    async function handleDeleteDraft() {\r\n        if (isLastEmailDraft) {\r\n            //Reset form values to default values\r\n            form.reset()\r\n            //Save the draft with empty values\r\n            saveDraft(form.getValues())\r\n            //WS API Request for completing the interaction\r\n            saveEmailDraft({itemId: interactionId, emailId})\r\n        } else {\r\n            //Simply delete the draft\r\n            //TODO: Add optimistic update?\r\n            discardEmailDraft({interactionStepId, emailId})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer\r\n            className={tcn(\r\n                'flex w-full items-end gap-3 rounded p-2 pr-4 shadow transition-all',\r\n                className,\r\n            )}\r\n        >\r\n            <SemanticButton\r\n                icon=\"paper plane\"\r\n                transparent\r\n                disabled={!selectedService}\r\n                className={buttonStyles}\r\n                onClick={handleSendEmail}\r\n                tooltip={i18n.email_send_button_tooltip()}\r\n            />\r\n            <ServiceSelector\r\n                itemId={interactionId}\r\n                serviceId={serviceId}\r\n                emailId={emailId}\r\n            />\r\n            <div className=\"flex-auto\" id={`email-editor-toolbar-${emailId}`} />\r\n            <div className=\"flex gap-1\">\r\n                <AttachButton\r\n                    className={buttonStyles}\r\n                    handleUploadFiles={handleUploadFiles}\r\n                    tooltip={i18n.email_addAttachment_button_tooltip()}\r\n                />\r\n                <SemanticButton\r\n                    icon=\"trash\"\r\n                    className={buttonStyles}\r\n                    onClick={handleDeleteDraft}\r\n                    tooltip={i18n.email_deleteDraft_button_tooltip()}\r\n                    transparent\r\n                />\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n","import type {FC, RefObject} from 'react'\r\nimport React, {useCallback, useEffect, useLayoutEffect, useState} from 'react'\r\nimport {usePopper} from 'react-popper'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport type {BooleanManager} from '@bpinc/lib-helpers'\r\nimport {isHTMLInputElement} from '@bpinc/lib-html-utils'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button, ClickOutsideWrapper} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {EmailSearchItem} from './types'\r\n\r\n\r\ninterface SuggestionsPopupProps {\r\n    suggestedItems: EmailSearchItem[]\r\n    onSelect: (item: EmailSearchItem) => void\r\n    selectionInputRootRef: RefObject<HTMLElement>\r\n    showEmailSuggestions: BooleanManager\r\n}\r\n\r\nexport const SuggestionsPopup: FC<SuggestionsPopupProps> = ({\r\n    suggestedItems,\r\n    showEmailSuggestions,\r\n    selectionInputRootRef,\r\n    onSelect,\r\n}) => {\r\n    const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null)\r\n    const [referenceElement, setReferenceElement] =\r\n    useState<HTMLInputElement | undefined>(undefined)\r\n\r\n    const {styles: popperStyles, attributes, update} = usePopper(referenceElement, popperElement, {\r\n        placement: 'bottom-start',\r\n    })\r\n\r\n    const handleSelect = useCallback((item: EmailSearchItem) => {\r\n        showEmailSuggestions.setFalse()\r\n        onSelect(item)\r\n    }, [onSelect, showEmailSuggestions])\r\n\r\n    const [selectedOption, setSelectedOption] = useState<EmailSearchItem>(\r\n        suggestedItems[0],\r\n    )\r\n\r\n    useLayoutEffect(() => {\r\n        setReferenceElement(getReferenceInputElement(selectionInputRootRef.current))\r\n    }, [selectionInputRootRef])\r\n\r\n    useLayoutEffect(() => {\r\n        if (showEmailSuggestions.value) {\r\n            update?.()\r\n        }\r\n    }, [showEmailSuggestions.value, update])\r\n\r\n    useEffect(function handleKeyboardNavigation() {\r\n        const handleKeyDown = (evt: KeyboardEvent) => {\r\n            if (evt.key === 'ArrowDown') {\r\n                evt.stopPropagation()\r\n                const currentIndex = suggestedItems.findIndex(\r\n                    i => i.id === selectedOption?.id,\r\n                )\r\n                const nextIndex = (currentIndex + 1) % suggestedItems.length\r\n                setSelectedOption(suggestedItems[nextIndex])\r\n            } else if (evt.key === 'ArrowUp') {\r\n                evt.stopPropagation()\r\n                const currentIndex = suggestedItems.findIndex(\r\n                    i => i.id === selectedOption?.id,\r\n                )\r\n                const nextIndex = currentIndex === 0 ? suggestedItems.length - 1 : currentIndex - 1\r\n                setSelectedOption(suggestedItems[nextIndex])\r\n            } else if (evt.key === 'Enter') {\r\n                evt.stopPropagation()\r\n                handleSelect(selectedOption)\r\n            }\r\n        }\r\n        const rootElement = selectionInputRootRef.current\r\n\r\n        if (selectedOption) {\r\n            rootElement?.addEventListener('keydown', handleKeyDown)\r\n        }\r\n\r\n        return () => {\r\n            rootElement?.removeEventListener('keydown', handleKeyDown)\r\n        }\r\n\r\n    }, [handleSelect, selectionInputRootRef, selectedOption, showEmailSuggestions, suggestedItems])\r\n    return (\r\n        <ClickOutsideWrapper\r\n            show={showEmailSuggestions.value}\r\n            onClickOutside={showEmailSuggestions.setFalse}\r\n        >\r\n            <div\r\n                ref={setPopperElement}\r\n                className=\"bottom-auto right-auto z-[10000] transform-none rounded border bg-primary-contrast p-2 shadow\"\r\n                style={popperStyles.popper}\r\n                {...attributes.popper}\r\n            >\r\n                {suggestedItems.map((i, index) => (\r\n                    <Button\r\n                        key={index}\r\n                        data-element=\"email-suggestion\"\r\n\r\n                        className={tcn('block w-full p-2', {\r\n                            'bg-blue-50': selectedOption?.id === i.id,\r\n                        })}\r\n                        onClick={partial(handleSelect, i)}\r\n                    >\r\n                        {i.displayText}\r\n                    </Button>\r\n                ))}\r\n            </div>\r\n        </ClickOutsideWrapper>\r\n    )\r\n}\r\n\r\n/**\r\n * @param selectionInputRoot root element of the selection input\r\n * @returns the currently focused input element within the selection input.\r\n */\r\nfunction getReferenceInputElement(selectionInputRoot: HTMLElement | null) {\r\n    const activeElement = document.activeElement\r\n\r\n    const activeElementIsInput =\r\n        selectionInputRoot?.contains(activeElement) &&\r\n        isHTMLInputElement(activeElement)\r\n\r\n    if (!activeElement || !activeElementIsInput) {\r\n        return\r\n    }\r\n\r\n    return activeElement\r\n}\r\n","import {useMemo, useRef, useState} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatEmail} from '@bpinc/ad-formatting-helpers'\r\nimport type {EmailContact} from '@bpinc/ad-request-urls'\r\nimport {useDidUnmount} from '@bpinc/lib-helpers'\r\n\r\nimport {useSearchEmailsQuery} from '../../queries/useSearchEmailsQuery'\r\nimport type {EmailFormFields, EmailSearchItem} from './types'\r\n\r\n\r\nexport function useSelectedEmailsState(name: 'to' | 'cc' | 'bcc', control: Control<EmailFormFields>) {\r\n    const [value, setValue] = useState('')\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n\r\n    const {field} = useController({\r\n        name,\r\n        control,\r\n        defaultValue: [],\r\n    })\r\n\r\n    useDidUnmount(() => {\r\n        field.onChange(undefined)\r\n    })\r\n\r\n    const debouncedSetSearchValue = useRef(\r\n        debounce(setSearchValue, 200),\r\n    ).current\r\n\r\n    const handleOnChange = (v: string) => {\r\n        setValue(v)\r\n        debouncedSetSearchValue(v)\r\n    }\r\n\r\n\r\n    const addSelectedItem = (item: EmailSearchItem) => {\r\n        field.onChange([...field.value, item])\r\n        setValue('')\r\n    }\r\n\r\n    const removeSelectedItem = (item: EmailSearchItem) => {\r\n        field.onChange(field.value.filter(i => i.address !== item.address))\r\n    }\r\n\r\n    const addCustomEmail = (newEmail: string) => {\r\n        addSelectedItem({\r\n            id: newEmail,\r\n            displayText: newEmail,\r\n            address: newEmail,\r\n        })\r\n    }\r\n\r\n    const {data: queriedContacts} = useSearchEmailsQuery(searchValue)\r\n\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const suggestedItems: EmailSearchItem[] = useMemo(() => {\r\n        const getName = (contact: EmailContact) => formatFullName(\r\n            contact.contactFirstName,\r\n            contact.contactLastName,\r\n        )\r\n\r\n        return (\r\n            queriedContacts\r\n                ?.filter(c => !!c.email)\r\n                .map(contact => ({\r\n                    id: contact.email!,\r\n                    address: contact.email!,\r\n                    name: getName(contact),\r\n                    displayText: formatEmail({address: contact.email!, name: getName(contact)}),\r\n                    contactId: contact.contactId,\r\n                })) || []\r\n        )\r\n    }, [formatFullName, queriedContacts])\r\n\r\n    return {\r\n        value,\r\n        selectedItems: field.value,\r\n        handleOnChange,\r\n        addSelectedItem,\r\n        addCustomEmail,\r\n        removeSelectedItem,\r\n        suggestedItems,\r\n    }\r\n}\r\n\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\nexport function useSearchEmailsQuery(searchValue: string) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    return useQuery({\r\n        queryKey: queryKeys.searchEmails(searchValue),\r\n        enabled: searchValue.length > 2,\r\n        queryFn: () =>\r\n            apiRequests(serverOrigin).getContactListByEmail({query: searchValue}),\r\n    })\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect, useMemo, useRef} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useWatch} from 'react-hook-form'\r\nimport {uniqBy} from 'lodash-es'\r\n\r\nimport {EMAIL_REGEX} from '@bpinc/ad-regexp-constants'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {SelectionInput} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SuggestionsPopup} from './SuggestionsPopup'\r\nimport type {EmailFormFields} from './types'\r\nimport {useSelectedEmailsState} from './useSelectedEmailsState'\r\n\r\n\r\ninterface EmailSelectionInputProps {\r\n    name: 'to' | 'cc' | 'bcc'\r\n    control: Control<EmailFormFields>\r\n    label: string\r\n}\r\n\r\nexport const EmailSelectionInput: FC<EmailSelectionInputProps> = ({\r\n    label,\r\n    name,\r\n    control,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const showEmailSuggestions = useBoolean()\r\n    const {\r\n        selectedItems,\r\n        suggestedItems,\r\n        addCustomEmail,\r\n        addSelectedItem,\r\n        handleOnChange,\r\n        removeSelectedItem,\r\n        value,\r\n    } = useSelectedEmailsState(name, control)\r\n\r\n\r\n    useEffect(() => {\r\n        showEmailSuggestions.toggle(!!suggestedItems.length)\r\n        //Change only when suggestedItems change\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [suggestedItems])\r\n\r\n    const to = useWatch({name: 'to', control})\r\n    const cc = useWatch({name: 'cc', control})\r\n    const bcc = useWatch({name: 'bcc', control})\r\n\r\n\r\n    const suggestedItemsExcludingSelected = useMemo(() => {\r\n        const allSelectedItems = [...to ?? [], ...cc ?? [], ...bcc ?? []]\r\n        return uniqBy(\r\n            suggestedItems.filter(s => !allSelectedItems.some(i => i.address === s.address)),\r\n            'address')\r\n    }\r\n    , [bcc, cc, suggestedItems, to])\r\n\r\n    const rootRef = useRef<HTMLDivElement>(null)\r\n\r\n\r\n    return (\r\n        <div ref={rootRef} className=\"flex flex-auto overflow-auto\">\r\n            <label className=\"leading-[34px]\">{label}</label>\r\n            <SelectionInput\r\n                items={selectedItems}\r\n                className=\"w-full border-none\"\r\n                value={value}\r\n                onChange={handleOnChange}\r\n                validateCustomValue={v => {\r\n                    if (v && !new RegExp(EMAIL_REGEX).test(v)) {\r\n                        showEmailSuggestions.setFalse()\r\n                        return {\r\n                            valid: false,\r\n                            message: t.ERROR_MESSAGES.error_email_format(),\r\n                        }\r\n                    } else {\r\n                        return {valid: true}\r\n                    }\r\n                }}\r\n                addCustomValue={addCustomEmail}\r\n                onItemRemoved={removeSelectedItem}\r\n                autoFocus\r\n            />\r\n            {showEmailSuggestions.value && (\r\n                <SuggestionsPopup\r\n                    showEmailSuggestions={showEmailSuggestions}\r\n                    suggestedItems={suggestedItemsExcludingSelected}\r\n                    onSelect={addSelectedItem}\r\n                    selectionInputRootRef={rootRef}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","export const HTML_FOOTER_CLASS = '.ad-user-footer'\r\nexport const HTML_HEADER_CLASS = '.ad-user-header'\r\n","import {useEffect} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {ActiveDraft} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {EmailReplyTemplateResult} from '@bpinc/ad-transport-types'\r\nimport {stringToHTML, useEvent} from '@bpinc/lib-helpers'\r\n\r\nimport {useSaveDraftMutation} from '../../mutations'\r\nimport {useGetEmailQuery} from '../../queries/useGetEmailQuery'\r\nimport {HTML_FOOTER_CLASS, HTML_HEADER_CLASS} from './constants'\r\nimport type {EmailFormFields} from './types'\r\n\r\n\r\ninterface UseEmailTemplateFetcherParams {\r\n    draft: ActiveDraft\r\n    form: UseFormReturn<EmailFormFields>\r\n}\r\n\r\n\r\nexport function useEmailTemplateFetcher({draft, form}: UseEmailTemplateFetcherParams) {\r\n    const selfUserId = useSessionState('userId')\r\n    const {data: email, isFetched} = useGetEmailQuery(draft.emailId)\r\n    const {data: refEmail} = useGetEmailQuery(draft.referencedEmailId ?? '')\r\n    const language = refEmail?.langTag ?? undefined\r\n\r\n    const {getEmailTemplate} = useCaseStateMethods()\r\n    const {mutate: saveDraft} = useSaveDraftMutation(draft.emailId)\r\n    const saveDraftHandler = useEvent(saveDraft)\r\n    const headerFooterUserId = email?.headerFooterUserId ?? undefined\r\n\r\n    useEffect(() => {\r\n        fetchEmailTemplate()\r\n\r\n        async function fetchEmailTemplate() {\r\n            if (isFetched && (!headerFooterUserId || headerFooterUserId !== selfUserId)) {\r\n                const emailTemplate = await getEmailTemplate(language)\r\n\r\n                //Save headerFooterUserId as selfUserId\r\n                form.setValue('headerFooterUserId', selfUserId)\r\n\r\n                if (!emailTemplate) {\r\n                    return\r\n                }\r\n\r\n                if (!headerFooterUserId) {\r\n                    insertHeaderFooter(emailTemplate)\r\n                } else {\r\n                    replaceExistingHeaderFooter(emailTemplate)\r\n                }\r\n\r\n                //Save draft\r\n                saveDraftHandler(form.getValues())\r\n\r\n                const emailContentNode = findEmailContentNode(draft.emailId)\r\n                //TODO: Add focus (with MutationObserver in the EmailForm.tsx?)\r\n                emailContentNode?.scrollIntoView()\r\n            }\r\n\r\n            function insertHeaderFooter(emailTemplate: EmailReplyTemplateResult) {\r\n                form.setValue('html', emailTemplate.header + `<div>${form.getValues('html')}</div>` + emailTemplate.footer)\r\n            }\r\n\r\n            function replaceExistingHeaderFooter(emailTemplate: EmailReplyTemplateResult) {\r\n                const htmlString = form.getValues('html')\r\n                const html = stringToHTML(htmlString)\r\n\r\n                if (emailTemplate.header) {\r\n                    const oldHeader = html.querySelector(HTML_HEADER_CLASS)\r\n                    oldHeader?.parentNode?.replaceChild(stringToHTML(emailTemplate.header), oldHeader)\r\n                }\r\n\r\n                if (emailTemplate.footer) {\r\n                    const oldFooter = html.querySelector(HTML_FOOTER_CLASS)\r\n                    oldFooter?.parentNode?.replaceChild(stringToHTML(emailTemplate.footer), oldFooter)\r\n                }\r\n\r\n                form.setValue('html', html.innerHTML)\r\n            }\r\n\r\n            function findEmailContentNode(emailId: string) {\r\n                const input = document.querySelector(`[data-email-editor-id=\"${emailId}\"]>div`)\r\n                const node = input?.querySelector(HTML_HEADER_CLASS)?.nextSibling\r\n\r\n                if (node instanceof HTMLElement) {\r\n                    return node\r\n                }\r\n            }\r\n        }\r\n    }, [draft.emailId, isFetched, headerFooterUserId, language, selfUserId, getEmailTemplate, form, saveDraftHandler])\r\n\r\n}\r\n","import {useEffect} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useInteractionStateConnector} from '@bpinc/ad-interaction-state-context'\r\nimport {stringToHTML, useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport {HTML_FOOTER_CLASS} from './constants'\r\nimport type {EmailFormFields} from './types'\r\n\r\n\r\nexport function usePasteFromKB(interactionId: string, form: UseFormReturn<EmailFormFields>) {\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n    const formRef = useAsRef(form)\r\n\r\n    useEffect(function processPasteEvent() {\r\n        const subs = interactionStateConnector.dispenser.subscribe({\r\n            onPasteFromKB(toIneractionId, articleHtml) {\r\n                if (interactionId === toIneractionId) {\r\n                    const emailHtml = formRef.current.getValues('html')\r\n                    const nextEmailHtml = insertBeforeFooter(emailHtml, articleHtml)\r\n\r\n                    formRef.current.setValue('html', nextEmailHtml)\r\n                }\r\n            },\r\n        })\r\n        return () => {\r\n            subs.unsubscribe()\r\n        }\r\n    }, [interactionId, interactionStateConnector, formRef])\r\n}\r\n\r\nfunction insertBeforeFooter(emailHtml: string, articleHtml: string): string {\r\n    const element = stringToHTML(emailHtml)\r\n\r\n    const footer = element.querySelector(HTML_FOOTER_CLASS)\r\n\r\n    if (footer) {\r\n        element.insertBefore(stringToHTML(articleHtml), footer)\r\n        return element.innerHTML\r\n    }\r\n    return emailHtml + articleHtml\r\n}\r\n","import type {IAllProps} from '@tinymce/tinymce-react'\r\n\r\nimport {TINYMCE_FONT_SIZES, TINYMCE_FONTS} from './constants'\r\n\r\n\r\nexport type TinyMCEConfig = Exclude<IAllProps['init'], undefined>\r\n\r\nexport type TinyMCEFont = {\r\n    fontFamily: string\r\n    fontSize: string\r\n    color: string\r\n    defaultFontStyle: string\r\n}\r\n\r\n/** Self-hosted tinymce script */\r\nexport const getTinymceScriptSrc = (publicUrl: string) => `${publicUrl}/static/js/tinymce/tinymce.js`\r\n\r\nexport const DEFAULT_TINYMCE_FONT: TinyMCEFont = {\r\n    fontFamily: 'Arial',\r\n    fontSize: '14px',\r\n    color: '#000',\r\n    defaultFontStyle: '14px Arial',\r\n}\r\n\r\nexport const getTinymceFont = (font: string, size: number, color: string): TinyMCEFont => ({\r\n    fontFamily: font,\r\n    fontSize: size + 'px',\r\n    color,\r\n    defaultFontStyle: `${size}px ${font}`,\r\n})\r\n\r\n/* eslint-disable max-len */\r\nexport const tinymceConfig: TinyMCEConfig = {\r\n    branding: true,\r\n    browser_spellcheck: true,\r\n    contextmenu: '',\r\n    convert_urls: false,\r\n    default_font_format: DEFAULT_TINYMCE_FONT,\r\n    default_link_target: '_blank',\r\n    elementpath: true,\r\n    end_container_on_empty_block: false,\r\n    extended_valid_elements: 'altglyph,altglyphdef,altglyphitem,animatecolor,animatemotion,animatetransform,circle,clippath,defs,desc,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,font,font-face,font-face-format,font-face-name,g,glyph,glyphref,hkern,image,line,lineargradient,marker,mask,metadata,mpath,path,pattern,polygon,polyline,radialgradient,rect,stop,svg,switch,symbol,text,textpath,title,tref,tspan,use,view,vkern,font[color|face|size],dir',\r\n    external_plugins: {\r\n        default_font: 'custom_plugins/default_font.js',\r\n        img_resize_handler: 'custom_plugins/img_resize_handler.js',\r\n        insert_video: 'custom_plugins/insert_video.js',\r\n    },\r\n    file_picker_types: 'image media',\r\n    font_formats: TINYMCE_FONTS.map(font => font + '=' + font).join(';'),\r\n    fontsize_formats: TINYMCE_FONT_SIZES.map(size => size + 'px').join(' '),\r\n    inline: false,\r\n    invalid_elements: 'applet,area,audio,basefont,data,datalist,details,dialog,embed,fieldset,footer,form,frame,frameset,head,header,html,iframe,input,label,legend,link,main,map,meta,noframes,noscript,object,optgroup,option,output,param,picture,script,select,source,style,summary,template,textarea,title,track,video',\r\n    image_download_proxy: process.env.NODE_ENV !== 'production'\r\n        ? 'https://illustrious-platypus-81596c.netlify.app/.netlify/functions/image-download-proxy?imageUrl='\r\n        : 'WE DON`T HAVE PRODUCTION PROXY',\r\n    menubar: '',\r\n    max_height: 600,\r\n    min_height: 300,\r\n    width: '100%',\r\n    padd_empty_with_br: true,\r\n    paste_block_drop: false,\r\n    paste_data_images: true,\r\n    paste_enable_default_filters: false,\r\n    paste_merge_formats: false,\r\n    plugins: [\r\n        'advlist',\r\n        'anchor',\r\n        'autolink',\r\n        'charmap',\r\n        'code',\r\n        'codesample',\r\n        'directionality',\r\n        'fullscreen',\r\n        'help',\r\n        'hr',\r\n        'image',\r\n        'imagetools',\r\n        'importcss',\r\n        'insertdatetime',\r\n        'link',\r\n        'lists',\r\n        'nonbreaking',\r\n        'noneditable',\r\n        'paste',\r\n        'preview',\r\n        'print',\r\n        'quickbars',\r\n        'searchreplace',\r\n        'table',\r\n        'template',\r\n        'textpattern',\r\n        'toc',\r\n        'visualblocks',\r\n        'visualchars',\r\n        'wordcount',\r\n    ],\r\n    quickbars_insert_toolbar: false,\r\n    quickbars_selection_toolbar: `\r\n        | bold italic underline strikethrough \r\n        | forecolor backcolor removeformat`,\r\n    remove_trailing_brs: false,\r\n    toolbar: `\r\n        | undo redo\r\n        | alignleft aligncenter alignright alignjustify \r\n        | outdent indent\r\n        | numlist bullist\r\n        | fontselect fontsizeselect formatselect forecolor\r\n        | charmap blockquote\r\n        | insertfile image insert_video table link anchor codesample \r\n        | fullscreen fullscreen_inline preview print \r\n        | variables\r\n    `,\r\n    toolbar_items_size: 'small',\r\n    toolbar_mode: 'sliding',\r\n    toolbar_persist: false,\r\n    toolbar_sticky: false,\r\n    valid_children: '+dir[li]',\r\n}\r\n/* eslint-enable max-len */\r\n","export const TINYMCE_FONTS = [\r\n    'Arial',\r\n    'Calibri',\r\n    'Courier New',\r\n    'Cursive',\r\n    'Georgia',\r\n    'Impact',\r\n    'Monospace',\r\n    'Sans Serif',\r\n    'Serif',\r\n    'Times New Roman',\r\n    'Trebuchet MS',\r\n    'Verdana',\r\n]\r\nexport const TINYMCE_FONT_SIZES = [8, 10, 12, 14, 16, 18, 24, 36]\r\n","import type {FC, RefObject} from 'react'\r\nimport {useCallback, useMemo, useState} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\nimport {Editor} from '@tinymce/tinymce-react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {TinyMCEConfig} from '@bpinc/lib-tinymce'\r\nimport {getTinymceScriptSrc, tinymceConfig} from '@bpinc/lib-tinymce'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {EmailFormFields} from '../types'\r\n\r\n\r\ninterface WysiwygEditorProps {\r\n    control: Control<EmailFormFields>\r\n    emailId: string\r\n    inputRef?: RefObject<Editor>\r\n    referencedEmailId?: string\r\n}\r\n\r\nexport const WysiwygEditor: FC<WysiwygEditorProps> = ({control, emailId, inputRef, referencedEmailId}) => {\r\n    const {field} = useController({name: 'html', control})\r\n    const [isEditorLoading, setEditorLoading] = useState(true)\r\n\r\n    const handleEditorInit = useCallback(() => setEditorLoading(false), [])\r\n\r\n    /** Adds the variables plugin */\r\n    const initConfig = useMemo<TinyMCEConfig>(() => ({\r\n        ...tinymceConfig,\r\n        inline: true,\r\n        inline_boundaries: false,\r\n        fixed_toolbar_container: `#email-editor-toolbar-${emailId}`,\r\n        init_instance_callback: function(editor) {\r\n            // This will trick the editor into thinking it was focused\r\n            // without actually focusing it (causing the toolbar to appear)\r\n            editor.fire('focus')\r\n        },\r\n        setup: function(editor) {\r\n            // This prevents the blur event from hiding the toolbar\r\n            editor.on('blur', function() {\r\n                return false\r\n            })\r\n        },\r\n    }), [])\r\n\r\n    const handleOnChange = useCallback((value: string) => {\r\n        field.onChange(value)\r\n    }, [field])\r\n\r\n    assertDefined(process.env.PUBLIC_URL)\r\n\r\n    const id = `email-wysiwyg-editor:${emailId}`\r\n\r\n    return (\r\n        <div\r\n            className={tcn('relative mb-4 flex w-full flex-auto', '[&>div]:flex-auto')}\r\n            data-test-id={id}\r\n            data-email-editor-reference-id={referencedEmailId}\r\n            data-email-editor-id={emailId}\r\n        >\r\n            <Editor\r\n                ref={inputRef}\r\n                id={id}\r\n                init={initConfig}\r\n                onEditorChange={handleOnChange}\r\n                onInit={handleEditorInit}\r\n                tinymceScriptSrc={getTinymceScriptSrc(process.env.PUBLIC_URL)}\r\n                value={field.value}\r\n            />\r\n            {isEditorLoading && <Loader active color=\"primary\" size=\"medium\" />}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport {useController, useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\n\r\nimport type {ActiveDraft} from '@bpinc/ad-interaction-state-types'\r\nimport {useEmailAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AttachmentsList, Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useGetEmailQuery} from '../../queries/useGetEmailQuery'\r\nimport {EmailControls} from './EmailControls'\r\nimport {EmailSelectionInput} from './EmailSelectionInput'\r\nimport {emailAddressToEmailSearchItem} from './helpers'\r\nimport type {EmailFormFields} from './types'\r\nimport {useAttachmentsStateSync} from './useAttachmentsStateSync'\r\nimport {useEmailTemplateFetcher} from './useEmailTemplateFetcher'\r\nimport {usePasteFromKB} from './usePasteFromKB'\r\nimport {useSaveDraftInterval} from './useSaveDraftInterval'\r\nimport {WysiwygEditor} from './WysiwygEditor'\r\n\r\n\r\nconst inputSectionStyles = 'flex items-center border-t border-main-border pt-2'\r\n\r\nexport interface EmailFormProps extends ActiveDraft {\r\n    interactionId: string\r\n}\r\n\r\n\r\nexport const EmailForm: FC<EmailFormProps> = props => {\r\n    const {emailId, referencedEmailId} = props\r\n\r\n    const {data: email, isSuccess: emailLoaded} = useGetEmailQuery(emailId)\r\n\r\n    const form = useForm<EmailFormFields>({\r\n        values: {\r\n            to: email?.toAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            cc: email?.ccAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            bcc: email?.bccAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            subject: email?.subject ?? '',\r\n            html: email?.content ?? '',\r\n            headerFooterUserId: email?.headerFooterUserId,\r\n            //Attachments are initialized in useAttachmentsStateSync\r\n            attachments: [],\r\n        },\r\n    })\r\n\r\n    useEmailTemplateFetcher({draft: props, form})\r\n\r\n    useSaveDraftInterval({emailId, form})\r\n\r\n    usePasteFromKB(props.interactionId, form)\r\n\r\n    const ccEnabled = useBoolean()\r\n    const bccEnabled = useBoolean()\r\n    const {\r\n        t: {EMAIL: i18n},\r\n    } = useLocalizationState()\r\n\r\n    const {field} = useController({\r\n        control: form.control,\r\n        name: 'subject',\r\n    })\r\n    const {getAttachmentsList, removeAttachment} = useEmailAttachmentsUIState(['getAttachmentsList', 'removeAttachment'])\r\n\r\n    const attachmentsList = useMemo(() => getAttachmentsList(emailId), [emailId, getAttachmentsList])\r\n    useAttachmentsStateSync({email, attachmentsList, control: form.control, emailLoaded})\r\n\r\n    return (\r\n        <div className=\"p-2\">\r\n            <div\r\n                className=\"rounded border border-main-border p-2\"\r\n            >\r\n                <div className=\"group min-h-10\">\r\n                    <section className=\"flex justify-between\">\r\n                        <EmailSelectionInput\r\n                            name=\"to\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_to_prefix()}\r\n                        />\r\n                        <div className=\"hidden shrink-0 group-focus-within:block\">\r\n                            <Button\r\n                                className={tcn('block text-sm', {\r\n                                    'text-primary-legacy': ccEnabled.value,\r\n                                })}\r\n                                onClick={ccEnabled.toggle}\r\n                            >\r\n                                {i18n.email_address_cc_prefix()}\r\n                            </Button>\r\n                            <Button\r\n                                className={tcn('block text-sm', {\r\n                                    'text-primary-legacy': bccEnabled.value,\r\n                                })}\r\n                                onClick={bccEnabled.toggle}\r\n                            >\r\n                                {i18n.email_address_bcc_prefix()}\r\n                            </Button>\r\n                        </div>\r\n                    </section>\r\n                    {ccEnabled.value && (\r\n                        <EmailSelectionInput\r\n                            name=\"cc\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_cc_prefix()}\r\n                        />\r\n                    )}\r\n                    {bccEnabled.value && (\r\n                        <EmailSelectionInput\r\n                            name=\"bcc\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_bcc_prefix()}\r\n                        />\r\n                    )}\r\n                </div>\r\n                <section className={tcn(inputSectionStyles, 'h-10 pb-2')}>\r\n                    <label>{i18n.email_subject()}</label>\r\n                    <input {...field} className=\"w-full pl-2\" />\r\n                </section>\r\n                <section\r\n                    className={tcn(\r\n                        inputSectionStyles,\r\n                        'min-h-56 flex-col pb-2',\r\n                        {'min-h-80': attachmentsList.length},\r\n                    )}\r\n                >\r\n                    <WysiwygEditor control={form.control} emailId={emailId} referencedEmailId={referencedEmailId} />\r\n                    {!!attachmentsList.length && (\r\n                        <AttachmentsList\r\n                            list={attachmentsList}\r\n                            className=\"mb-2\"\r\n                            removeAttachment={removeAttachment}\r\n                            attachmentsListGroupId={emailId}\r\n                        />\r\n                    )}\r\n                    <EmailControls {...props} form={form} />\r\n                </section>\r\n            </div>\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useEffect, useRef} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {isEqual} from 'lodash-es'\r\n\r\nimport {useDidUnmount} from '@bpinc/lib-helpers'\r\n\r\nimport {useSaveDraftMutation} from '../../mutations'\r\nimport type {EmailFormFields} from './types'\r\n\r\n\r\ninterface UseSaveDraftParams {\r\n    emailId: string\r\n    form: UseFormReturn<EmailFormFields>\r\n}\r\n/** Saves draft every 5 seconds and on component unmount */\r\nexport function useSaveDraftInterval({emailId, form}: UseSaveDraftParams) {\r\n    const prevStateRef = useRef(form.getValues())\r\n\r\n    const {mutate: saveDraft} = useSaveDraftMutation(emailId)\r\n\r\n    const saveChangedDraft = useCallback(() => {\r\n        const state = form.getValues()\r\n        if (!isEqual(state, prevStateRef.current)) {\r\n            //Save draft\r\n            saveDraft(state)\r\n            //Update previous state\r\n            prevStateRef.current = state\r\n\r\n        }\r\n    }, [form, saveDraft])\r\n\r\n    // Save draft every 5 seconds\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            saveChangedDraft()\r\n        }, 5_000)\r\n        return () => clearInterval(interval)\r\n    }, [saveChangedDraft])\r\n\r\n    useDidUnmount(saveChangedDraft)\r\n}\r\n","import {useEffect} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport type {Email, EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {type Attachment, useEmailAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {EmailFormFields} from './types'\r\n\r\n\r\ninterface UseAttachmentsStateSyncParams {\r\n    email: Email | undefined\r\n    attachmentsList: Attachment<EmailAttachment>[]\r\n    control: Control<EmailFormFields>\r\n    emailLoaded: boolean\r\n}\r\n\r\nexport function useAttachmentsStateSync({\r\n    attachmentsList,\r\n    control,\r\n    email,\r\n    emailLoaded,\r\n}: UseAttachmentsStateSyncParams,\r\n) {\r\n    const stateInitialized = useBoolean()\r\n    const {\r\n        field: {onChange},\r\n    } = useController({\r\n        control,\r\n        name: 'attachments',\r\n    })\r\n\r\n    const initializeAttachmentsList = useEmailAttachmentsUIState('initializeAttachmentsList')\r\n\r\n    const initialAttachments = email?.attachments\r\n\r\n    /** Email draft initial values contain only id and name of the attachment.\r\n     *  Based of this information we initialize the attachments list\r\n     *  and render appropriate UI for each attachment\r\n     */\r\n    useEffect(function initializeAttachments() {\r\n        if (emailLoaded && !stateInitialized.value) {\r\n            stateInitialized.setTrue()\r\n\r\n            if (initialAttachments?.length && email?.id) {\r\n                initializeAttachmentsList(email.id, initialAttachments)\r\n            }\r\n        }\r\n    }, [email?.id, emailLoaded, initialAttachments, initializeAttachmentsList, stateInitialized])\r\n\r\n    /** Each time attachment list changes, we update the form field value */\r\n    useEffect(function syncFormFieldValue() {\r\n        onChange(truthy(attachmentsList.map(({fileData}) => fileData?.id)))\r\n    }, [attachmentsList, control, onChange])\r\n}\r\n","import {createSelector} from 'reselect'\r\n\r\nimport type {ActivityCase} from '@bpinc/ad-case-state-types'\r\n\r\n\r\ntype FormatNameFunction = (\r\n    firstName: string | undefined,\r\n    lastName: string | undefined,\r\n) => string\r\n\r\nconst selectDispositions = createSelector(\r\n    (activity: ActivityCase) => activity.parties,\r\n    (parties: ActivityCase['parties']) => {\r\n        const result = new Set<string>()\r\n\r\n        parties?.forEach(party => {\r\n            if (party.partyType !== 'CONTACT' && party.disposition) {\r\n                result.add(party.disposition)\r\n            }\r\n        })\r\n\r\n        return Array.from(result)\r\n    },\r\n)\r\n\r\nconst selectServices = (activity: ActivityCase) => activity.services\r\n\r\n//TODO: Remove it if it won't be used after the case page is done.\r\nconst selectNotes = createSelector(\r\n    (activity: ActivityCase) => activity.parties,\r\n    (parties: ActivityCase['parties']) => {\r\n        const result = new Set<string>()\r\n\r\n        parties?.forEach(party => {\r\n            if (party.partyType !== 'CONTACT' && party.notes) {\r\n                result.add(party.notes)\r\n            }\r\n        })\r\n\r\n        return Array.from(result)\r\n    },\r\n)\r\n\r\nconst selectAgentsNames = (\r\n    formatNameFunction: FormatNameFunction,\r\n) =>\r\n    createSelector(\r\n        (a: ActivityCase) => a.parties,\r\n        (parties: ActivityCase['parties']) => {\r\n            const result = new Set<string>()\r\n\r\n            parties?.forEach(party => {\r\n                if (party.partyType !== 'CONTACT') {\r\n                    const name = formatNameFunction(\r\n                        party.firstName,\r\n                        party.lastName,\r\n                    )\r\n                    if (name) {\r\n                        result.add(name)\r\n                    }\r\n                }\r\n            })\r\n\r\n            return Array.from(result)\r\n        },\r\n    )\r\n\r\nexport const selectAgentsString = (formatNameFunction: FormatNameFunction) => createSelector(\r\n    selectAgentsNames(formatNameFunction),\r\n    agents => agents.join(', '),\r\n)\r\n\r\nconst selectServicesString = createSelector(selectServices, services =>\r\n    services?.map(service => service.serviceName)?.join(', '),\r\n)\r\n\r\nexport const selectDispositionsString = createSelector(\r\n    selectDispositions,\r\n    dispositions => dispositions?.join(', '),\r\n)\r\n\r\nexport const selectServicesAndDispositionsString = createSelector(\r\n    selectServicesString,\r\n    selectDispositionsString,\r\n    (servicesString, dispositionsString) => {\r\n        return [servicesString, dispositionsString].filter(Boolean).join(': ')\r\n    },\r\n)\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {ActivityCase as ActivityCaseType} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {LegacyIconKey} from '@bpinc/lib-icons'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useActivityCaseTitle} from './useActivityCaseTitle'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityCaseType\r\n    serviceId?: string\r\n}\r\n\r\nexport const ActivityCase: React.FC<Props> = ({activity, serviceId}) => {\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const user = activity.parties?.find(p => p.partyType === 'USER')\r\n    const {userId, firstName = '', lastName = ''} = user || {}\r\n\r\n    const title = useActivityCaseTitle({activity, serviceId})\r\n\r\n    const avatarOptions = useMemo(\r\n        () => ({userId, notFoundPlaceholder: true}),\r\n        [userId],\r\n    )\r\n\r\n    return (\r\n        <div className=\"relative flex p-2\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={40}\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    url={getAvatarUrl(avatarOptions)}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 h-4 w-4 flex-none self-center [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconKey fill=\"var(--c-icon)\" />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">{title}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useCaseState} from '@bpinc/ad-case-state-context'\r\nimport type {ActivityCase} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    selectAgentsString,\r\n    selectDispositionsString,\r\n    selectServicesAndDispositionsString,\r\n} from '../activity-selectors'\r\n\r\n\r\ninterface UseActivityCaseTitleParams {\r\n    activity: ActivityCase\r\n    serviceId?: string\r\n}\r\n\r\nexport function useActivityCaseTitle({activity, serviceId}: UseActivityCaseTitleParams) {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const agentsString = selectAgentsString(formatFullName)(activity)\r\n    const servicesAndDispositionsString =\r\n      selectServicesAndDispositionsString(activity)\r\n    const dispositionString = selectDispositionsString(activity)\r\n    const pendingReasons = useCaseState('casePendingReasons')\r\n    const canHaveDispositions = useServicesDispositionsState(\r\n        s => serviceId && s.services[serviceId].useDispositions,\r\n    )\r\n\r\n    return useMemo(() => {\r\n        const date = new Date(activity.createdTime).toLocaleDateString()\r\n        const time = new Date(activity.createdTime).toLocaleTimeString()\r\n        switch (activity.event) {\r\n            case 'PULLED':\r\n                return t.ACTIVITY_HISTORY.activity_view_case_pulled_label(\r\n                    servicesAndDispositionsString,\r\n                    agentsString,\r\n                    date,\r\n                    time,\r\n                )\r\n            case 'PUSHED':\r\n                return t.ACTIVITY_HISTORY.activity_view_case_pushed_label(\r\n                    servicesAndDispositionsString,\r\n                    agentsString,\r\n                    date,\r\n                    time,\r\n                )\r\n            case 'ASSIGNED': {\r\n                const assignedByName = formatFullName(\r\n                    activity.assignedByFirstName,\r\n                    activity.assignedByLastName,\r\n                )\r\n\r\n                return activity.parties.length\r\n                    ? t.ACTIVITY_HISTORY.activity_view_case_assigned_to_agent_label(\r\n                        assignedByName,\r\n                        agentsString,\r\n                        date,\r\n                        time,\r\n                    )\r\n                    : t.ACTIVITY_HISTORY.activity_view_case_assigned_to_queue_label(\r\n                        assignedByName,\r\n                        servicesAndDispositionsString,\r\n                        date,\r\n                        time,\r\n                    )\r\n            }\r\n            case 'TRANSFERRED': {\r\n                const fromUser = formatFullName(\r\n                    activity.transferredFromFirstName,\r\n                    activity.transferredFromLastName,\r\n                )\r\n                return activity.parties.length\r\n                    ? t.ACTIVITY_HISTORY.activity_view_case_transferred_to_agent_label(\r\n                        fromUser,\r\n                        agentsString,\r\n                        date,\r\n                        time,\r\n                    )\r\n                    : t.ACTIVITY_HISTORY.activity_view_case_transferred_to_queue_label(\r\n                        fromUser,\r\n                        servicesAndDispositionsString,\r\n                        date,\r\n                        time,\r\n                    )\r\n            }\r\n            case 'FOLLOWUP_FROM':\r\n            case 'FOLLOWUP_CREATED':\r\n                return t.ACTIVITY_HISTORY.activity_view_case_created_event_label(\r\n                    agentsString,\r\n                    date,\r\n                    time,\r\n                )\r\n            case 'STATE_CHANGED': {\r\n                switch (activity.status) {\r\n                    case 'Closed': {\r\n                        return t.ACTIVITY_HISTORY.activity_case_state_closed(\r\n                            date,\r\n                            time,\r\n                        )\r\n                    }\r\n                    case 'Open':\r\n                        return t.ACTIVITY_HISTORY.activity_case_state_changed(\r\n                            agentsString,\r\n                            activity.status,\r\n                            date,\r\n                            time,\r\n                        )\r\n                    case 'Pending': {\r\n                        return pendingReasons.data.length\r\n                            ? t.ACTIVITY_HISTORY.activity_case_state_pending(\r\n                                agentsString,\r\n                                activity.status,\r\n                                date,\r\n                                time,\r\n                                activity.pendingReasonName || t.ACTIVITY_HISTORY.activity_case_state_no_message(),\r\n                            )\r\n                            : t.ACTIVITY_HISTORY.activity_case_state_changed(\r\n                                agentsString,\r\n                                activity.status,\r\n                                date,\r\n                                time,\r\n                            )\r\n                    }\r\n                    case 'Resolved': {\r\n                        return canHaveDispositions\r\n                            ? t.ACTIVITY_HISTORY.activity_case_state_disposition(\r\n                                agentsString,\r\n                                activity.status,\r\n                                date,\r\n                                time,\r\n                                dispositionString || t.ACTIVITY_HISTORY.activity_case_state_no_message(),\r\n                            )\r\n                            : t.ACTIVITY_HISTORY.activity_case_state_changed(\r\n                                agentsString,\r\n                                activity.status,\r\n                                date,\r\n                                time,\r\n                            )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        pendingReasons.data.length,\r\n        canHaveDispositions,\r\n        dispositionString,\r\n        agentsString,\r\n        servicesAndDispositionsString,\r\n        activity,\r\n        formatFullName,\r\n        t.ACTIVITY_HISTORY,\r\n    ])\r\n}\r\n","import type {Party} from '@bpinc/ad-case-state-types'\r\n\r\n\r\nexport const getFirstAndLastNames = (\r\n    party?: Party,\r\n): Array<string | undefined> => {\r\n    const names = party\r\n        ? [party.firstName, party.lastName].filter(Boolean)\r\n        : []\r\n    return names.length ? names : ['Anonymous']\r\n}\r\n\r\nexport function getAction(disposition: string | undefined) {\r\n    return typeof disposition === 'undefined'\r\n        ? 'left a note'\r\n        : 'dispositioned interaction'\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {Party, Service} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface Props {\r\n    party?: Party\r\n    service?: Service\r\n}\r\n\r\nexport const CaseActivityService: React.FC<Props> = ({party, service}) => {\r\n    const {notes, disposition, userId, firstName, lastName} = party || {}\r\n    const {serviceName} = service || {}\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const avatarOptions = useMemo(() => ({userId, notFoundPlaceholder: true}), [userId])\r\n\r\n    if (!notes && !disposition) return null\r\n\r\n    return (\r\n        <div className=\"-mx-2 my-2 border-t-[2px] border-white p-2\">\r\n            <div className=\"flex gap-2\">\r\n                <div className=\"mr-2.5 h-8 w-8 flex-none\">\r\n                    <Avatar\r\n                        size={40}\r\n                        firstName={firstName}\r\n                        lastName={lastName}\r\n                        url={getAvatarUrl(avatarOptions)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div className=\"text-gray-500\">\r\n                        {formatFullName(firstName, lastName)}\r\n                    </div>\r\n                    <div>\r\n                        {notes}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"mt-2 text-gray-500\">\r\n                {`${serviceName}: ${disposition}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {pickBy} from 'lodash-es'\r\n\r\nimport type {ChatTranscriptMessage as Message} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {LegacyIconGear, LegacyIconPerson} from '@bpinc/lib-icons'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface Props {\r\n    messages: Message[]\r\n}\r\n\r\nconst fulfillMessages = (messages: Message[] = []): Message[] => {\r\n    const parties: {[id: string]: Message} = {}\r\n    const isDefined = (v: unknown) => typeof v !== 'undefined'\r\n\r\n    messages = messages\r\n        .map(m => {\r\n            const id = m.partyId\r\n            const message = pickBy(m, isDefined) as Message\r\n            parties[id] = {\r\n                ...parties[id],\r\n                ...message,\r\n            }\r\n            return message\r\n        })\r\n\r\n    return messages\r\n        .map(m => ({...parties[m.partyId], ...m}))\r\n        .filter(({type, event}) => {\r\n            const ignoreEvents = ['party_changed', 'party_navigation']\r\n            if (type === 'scenario') {\r\n                ignoreEvents.push('party_joined', 'party_left')\r\n            }\r\n            return !ignoreEvents.includes(event)\r\n        })\r\n}\r\n\r\nconst formatTime = (time: number): string => {\r\n    return new Date(time).toLocaleTimeString(undefined, {hour: 'numeric', minute: 'numeric'})\r\n}\r\n\r\nconst getMessageText = (message: Message): string => {\r\n    const {event, msg} = message\r\n\r\n    switch (event) {\r\n        case 'party_joined': return 'has joined the chat'\r\n        case 'party_message': return msg || ''\r\n        case 'party_file': return 'sent a file'\r\n        case 'party_changed': return ''\r\n        case 'party_navigation': return ''\r\n        case 'party_left': return 'has left the chat'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\nexport const ChatContent: React.FC<Props> = ({messages}) => {\r\n    const [list, setList] = useState<Message[]>([])\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    useEffect(() => {\r\n        setList(fulfillMessages(messages))\r\n    }, [messages])\r\n\r\n    return (\r\n        <div className=\"bg-[--c-chat-content-bg]\">\r\n            {list.map((message, i) => {\r\n                const {type, userId, firstName, lastName} = message\r\n                const name = formatFullName(firstName, lastName) // || 'Chat BOT'\r\n                const time = formatTime(message.timestamp)\r\n                const text = getMessageText(message)\r\n\r\n                return (\r\n                    <div key={i} className=\"flex gap-2 px-2 py-[5px]\">\r\n                        <div className=\"ml-2.5 h-10 w-10 flex-none\">\r\n                            {type === 'internal' ? (\r\n                                <Avatar\r\n                                    size={40}\r\n                                    firstName={firstName}\r\n                                    lastName={lastName}\r\n                                    url={getAvatarUrl({userId, notFoundPlaceholder: true})}\r\n                                />\r\n                            ) : (\r\n                                <div\r\n                                    className=\"h-full w-full border border-current p-1 text-[--c-chat-content-icon-text]\r\n                                    [&_svg]:h-full [&_svg]:w-full [&_svg]:fill-current\"\r\n                                >\r\n                                    {type === 'scenario' ? <LegacyIconGear /> : <LegacyIconPerson />}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"flex-auto [&_b]:mr-[0.3em]\">\r\n                            <div>\r\n                                {name && <b>{name}</b>}\r\n                                <span>{time}</span>\r\n                            </div>\r\n                            <div className=\"mt-1\">\r\n                                {text}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useCaseState} from '@bpinc/ad-case-state-context'\r\nimport type {ActivityChat as ActivityChatType} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {LegacyIconChat} from '@bpinc/lib-icons'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getFirstAndLastNames} from './utils/helpers'\r\nimport {CaseActivityService} from './CaseActivityService'\r\nimport {ChatContent} from './ChatContent'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityChatType\r\n}\r\n\r\nexport const ActivityChat: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const chats = useCaseState('chats')\r\n    const {createdTime, parties, services, globalInteractionId} = activity\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n\r\n    const {data = null} = chats[globalInteractionId] || {}\r\n\r\n    if (!data) return null\r\n\r\n    const fullNameInternal = formatFullName(...getFirstAndLastNames(partyInternal))\r\n    const fullNameExternal = formatFullName(...getFirstAndLastNames(partyExternal))\r\n    const date = formatDate(createdTime)\r\n\r\n    const title = [fullNameExternal, 'chatted on', `${date}, handled by`, fullNameInternal].join(' ')\r\n\r\n    const avatar = {\r\n        firstName: get(partyExternal, 'firstName'),\r\n        lastName: get(partyExternal, 'lastName'),\r\n        size: 40,\r\n        url: getAvatarUrl({\r\n            contactId: partyExternal?.contactId,\r\n            notFoundPlaceholder: true,\r\n        }),\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex p-2\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={avatar.size}\r\n                    firstName={avatar.firstName}\r\n                    lastName={avatar.lastName}\r\n                    url={avatar.url}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 h-4 w-4 flex-none self-center [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconChat />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <ChatContent messages={data.messages} />\r\n                </div>\r\n\r\n                <CaseActivityService party={partyInternal} service={services?.[0]} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/** This is a transformed to TS copy of one we have in the old AD.\r\n * However, here we use our own implementation of the Email regex.\r\n * the old AD uses this regex:\r\n * '[a-zA-Z0-9.!#$%&\\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?' +\r\n * '(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+'\r\n */\r\n\r\nimport {EMAIL_REGEX} from '@bpinc/ad-regexp-constants'\r\n\r\n\r\nexport class EmailAddressValidator {\r\n    private static readonly emailPattern: RegExp = new RegExp(EMAIL_REGEX)\r\n\r\n    static validate(input: string | null | undefined): boolean {\r\n        return input !== null && input !== undefined && this.emailPattern.test(input)\r\n    }\r\n}\r\n\r\n","import type {EmailAddress} from '@bpinc/ad-request-urls'\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\n\r\nimport {EmailAddressValidator} from './email-address-validator'\r\n\r\n/** This is a transformed to TS copy of one we have in the old AD */\r\nexport class EmailAddressTransformers {\r\n    static LABEL(emailAddress: EmailAddress): string {\r\n        let result = ''\r\n        if (emailAddress) {\r\n            const {address, name} = emailAddress\r\n            if (name && name !== address) {\r\n                result += name\r\n                if (address) {\r\n                    result += ` <${address}>`\r\n                }\r\n            } else if (address) {\r\n                result += address\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    static LABEL2(emailAddress: EmailAddress): string {\r\n        if (!emailAddress) {\r\n            return ''\r\n        }\r\n\r\n        const {name, address} = emailAddress\r\n        const displayString = !name\r\n            ? address\r\n            : name.toLowerCase() === address.toLowerCase()\r\n                ? address\r\n                : `${name} (${address})`\r\n\r\n        if (EmailAddressValidator.validate(address)) {\r\n            return sanitizeHtml(\r\n                `<span data-email='${address}'>${displayString}</span>`,\r\n            )\r\n        } else {\r\n            return sanitizeHtml(\r\n                `<span style='border-bottom: 1px dotted red; border-top: 1px solid transparent;' title='${displayString}'>${displayString}</span>`,\r\n            )\r\n        }\r\n    }\r\n}\r\n","import uuid from 'uuid/v4'\r\n\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport type {ActivityEmail, EmailAddress} from '@bpinc/ad-case-state-types'\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\nimport type {LocalizationStateData} from '@bpinc/state-localization'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {EmailAddressTransformers} from './email-transformers'\r\n\r\n\r\nfunction escapeHtml(html: string): string {\r\n    // Simple HTML escaping function\r\n    return html\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n}\r\n\r\n/** This is a transformed to TS copy of one we have in the old AD */\r\nexport function useShowOriginalEmailContent(emailActivity: ActivityEmail) {\r\n    const isChrome = platformInfo.browser === 'chrome'\r\n    const {\r\n        t: {EMAIL: i18n, ACTIVITY_HISTORY: i18nAH},\r\n    } = useLocalizationState()\r\n\r\n    return () => {\r\n        const url = isChrome ? 'about:blank' : 'screenpop.html'\r\n        const openedWindow = window.open(url, uuid())\r\n        const htmlContent = getHTMLContent(emailActivity, i18n, i18nAH)\r\n\r\n        if (openedWindow?.document) {\r\n            openedWindow.document.write(sanitizeHtml(htmlContent))\r\n            openedWindow.document.title = sanitizeHtml(\r\n                emailActivity.emailData.subject,\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction getHTMLContent(\r\n    crmActivity: ActivityEmail,\r\n    i18n: LocalizationStateData['t']['EMAIL'],\r\n    i18nAH: LocalizationStateData['t']['ACTIVITY_HISTORY'],\r\n) {\r\n    function getEraseString(emailData: ActivityEmail['emailData']): string {\r\n        const {eraseTime, eraseReason, eraseLoginId} = emailData\r\n        const date = eraseTime && new Date(eraseTime).toLocaleDateString()\r\n        const time = eraseTime && new Date(eraseTime).toLocaleTimeString()\r\n\r\n        if (!date || !time || !eraseLoginId) {\r\n            return ''\r\n        }\r\n\r\n        return i18nAH.activity_view_email_content_erased(\r\n            date,\r\n            time,\r\n            eraseLoginId,\r\n            eraseReason ?? '',\r\n        )\r\n    }\r\n\r\n    const styledDirections = new Set(['OUTBOUND', 'REPLY'])\r\n\r\n    let htmlContent = `<html><head><style>\r\n    body {\r\n      overflow-wrap: break-word;\r\n    }\r\n    </style></head><body>`\r\n\r\n    if (styledDirections.has(crmActivity.direction)) {\r\n        htmlContent += '<div>'\r\n    }\r\n\r\n    const appendAddresses = (\r\n        prefix: string,\r\n        addresses: EmailAddress[] | undefined,\r\n    ) => {\r\n        if (addresses && addresses.length > 0) {\r\n            htmlContent += `${escapeHtml(prefix)}: ${escapeHtml(\r\n                addresses.map(EmailAddressTransformers.LABEL).join(', '),\r\n            )}<hr>`\r\n        }\r\n    }\r\n\r\n    appendAddresses(\r\n        i18n.email_queue_field_from(),\r\n        crmActivity.emailData.fromAddresses,\r\n    )\r\n    appendAddresses(\r\n        i18n.email_address_to_prefix(),\r\n        crmActivity.emailData.toAddresses,\r\n    )\r\n    appendAddresses(\r\n        i18n.email_address_cc_prefix(),\r\n        crmActivity.emailData.ccAddresses,\r\n    )\r\n    appendAddresses(\r\n        i18n.email_address_bcc_prefix(),\r\n        crmActivity.emailData.bccAddresses,\r\n    )\r\n\r\n    htmlContent += `${escapeHtml(i18n.email_subject())}: ${escapeHtml(\r\n        crmActivity.emailData.subject,\r\n    )}<hr>`\r\n\r\n    if (crmActivity.emailData.eraseTime) {\r\n        htmlContent += getEraseString(crmActivity.emailData)\r\n    } else {\r\n        htmlContent += crmActivity.emailData.content\r\n    }\r\n\r\n    if (styledDirections.has(crmActivity.direction)) {\r\n        htmlContent += '</div>'\r\n    }\r\n\r\n    htmlContent += '</body></html>'\r\n\r\n    return htmlContent\r\n}\r\n","import React, {useEffect, useMemo, useState} from 'react'\r\n\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\n\r\n\r\ninterface Props {\r\n    html: string\r\n    title?: string\r\n}\r\n\r\nexport const EmailContent: React.FC<Props> = ({html, title}) => {\r\n    const [content, setContent] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        setContent(sanitizeHtml(html))\r\n    }, [html])\r\n\r\n    const innerHTML = useMemo(() => ({__html: content}), [content])\r\n\r\n    return (\r\n        <div>\r\n            {title && <div className=\"mb-2 text-lg font-bold\">{title}</div>}\r\n            <div className=\"relative\">\r\n                <div dangerouslySetInnerHTML={innerHTML} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport type {ActivityEmail as ActivityEmailType} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteractionStateRef} from '@bpinc/ad-interaction-state-context'\r\nimport {getDownloadEmailUrl} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {downloadURL} from '@bpinc/lib-helpers'\r\nimport {\r\n    LegacyIconEmail,\r\n    LegacyIconOriginalEmail,\r\n    LegacyIconReply,\r\n    LegacyIconSingleStepTransfer,\r\n} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Avatar, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useShowOriginalEmailContent} from '../email-utils'\r\nimport {EmailContent} from './EmailContent'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityEmailType\r\n    caseId: string\r\n}\r\n\r\nexport const ActivityEmail: React.FC<Props> = ({activity, caseId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {serverOrigin, sessionId} = useSessionState([\r\n        'serverOrigin',\r\n        'sessionId',\r\n    ])\r\n    const {createdTime, emailData, direction, parties} = activity\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n    const isOutbound = direction !== 'INBOUND'\r\n\r\n    const sender = (emailData.fromAddresses || [])[0]\r\n    // const receivers = (emailData.toAddresses || []).map(a => a.name).join(', ')\r\n\r\n    const fullName = formatFullName(\r\n        ...((sender && sender.name) || 'Unidentified').split(' '),\r\n    )\r\n    const date = formatDate(createdTime)\r\n\r\n    const title = [fullName, 'sent on', date].join(' ')\r\n\r\n    const avatar = {\r\n        firstName: get(isOutbound ? partyInternal : partyExternal, 'firstName'),\r\n        lastName: get(isOutbound ? partyInternal : partyExternal, 'lastName'),\r\n        size: 40,\r\n        url: getAvatarUrl({\r\n            userId: isOutbound ? partyInternal?.userId : undefined,\r\n            contactId: isOutbound ? undefined : partyExternal?.contactId,\r\n            notFoundPlaceholder: true,\r\n        }),\r\n    }\r\n    const iconButtonClassName = tcn('!h-5 !w-5 [&_svg]:h-full [&_svg]:w-full')\r\n    const showOriginalEmail = useShowOriginalEmailContent(activity)\r\n    function handleDownloadEmail() {\r\n        assertDefined(sessionId)\r\n        return downloadURL(\r\n            getDownloadEmailUrl(serverOrigin, sessionId, activity.emailId),\r\n            'originalMessage',\r\n        )\r\n    }\r\n\r\n    const interactionsStateRef = useInteractionStateRef()\r\n    function handleReplyEmail() {\r\n        const itemByCaseId = interactionsStateRef.current?.items.find(i => {\r\n            return i.emailData?.caseId === caseId\r\n        })\r\n\r\n        if (itemByCaseId) {\r\n            /** In the old AD we have these lines of code:\r\n             *\r\n             * eventBus.selectInteraction(interactionModel.getLinker().getHost(any.get()));\r\n             * eventBus.navigateTo(DeskNavigationPresenter.Item.CONTEXT);\r\n             *\r\n             * However, it seems, that we dont need this, as we are already in the context of the case.\r\n             * */\r\n\r\n            const emailDraftInput = findEmailDraftInput(activity.emailId)\r\n\r\n            if (emailDraftInput instanceof HTMLElement) {\r\n                emailDraftInput.scrollIntoView()\r\n                emailDraftInput.focus()\r\n            } else {\r\n\r\n                //TODO: create email draft\r\n            }\r\n\r\n        }\r\n\r\n        //TODO: Reply email\r\n        //TODO: Make logic as here: https://github.com/ServicePattern/ServicePattern/blob/6afd9f598a1d237b6feea92b815e3341cd18b084/Web/agentdesktop/src/com/brightpattern/agentdesktop/client/cases/presenter/CaseEventHandler.java#L91\r\n        function findEmailDraftInput(emailId: string) {\r\n            return document.querySelector(`[data-email-editor-reference-id=\"${emailId}\"]>div`)\r\n        }\r\n\r\n    }\r\n\r\n    const controls = (\r\n        <>\r\n            <SemanticButton\r\n                transparent\r\n                icon\r\n                className={iconButtonClassName}\r\n                tooltip={t.EMAIL.show_original_email_body_button_tooltip()}\r\n                onClick={showOriginalEmail}\r\n            >\r\n                <LegacyIconOriginalEmail fill=\"var(--c-icon)\" />\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                transparent\r\n                icon\r\n                className={iconButtonClassName}\r\n                onClick={handleReplyEmail}\r\n            >\r\n                <LegacyIconReply fill=\"var(--c-icon)\" />\r\n            </SemanticButton>\r\n            <SemanticButton transparent icon className={iconButtonClassName}>\r\n                <LegacyIconSingleStepTransfer fill=\"var(--c-icon)\" />\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                size=\"big\"\r\n                transparent\r\n                icon=\"download\"\r\n                tooltip={t.EMAIL.download_original()}\r\n                onClick={handleDownloadEmail}\r\n            />\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <div className=\"group relative flex p-2\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={avatar.size}\r\n                    firstName={avatar.firstName}\r\n                    lastName={avatar.lastName}\r\n                    url={avatar.url}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 mt-1 h-4 w-4 flex-none self-start [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconEmail />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">{title}</div>\r\n\r\n                    <div className=\"hidden flex-none text-[--c-controls-text] group-hover:!flex\">\r\n                        {controls}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <EmailContent\r\n                        title={emailData.subject}\r\n                        html={emailData.content}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"mt-2 text-right text-[--c-controls-text]\">\r\n                    {controls}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {ActivityNotes as ActivityNotesType} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {LegacyIconKey} from '@bpinc/lib-icons'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getAction} from './utils/helpers'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityNotesType\r\n}\r\n\r\nexport const ActivityNotes: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {createdTime, parties} = activity\r\n    const user = parties.find(p => p.partyType === 'USER')\r\n    const {userId, firstName = '', lastName = '', notes = '', disposition} = user || {}\r\n\r\n    const fullName = formatFullName(firstName, lastName)\r\n    const action = getAction(disposition)\r\n    const date = formatDate(createdTime)\r\n\r\n    const title = [fullName, action, 'on', date].join(' ')\r\n    const text = disposition || notes\r\n    const avatarOptions = useMemo(() => ({userId, notFoundPlaceholder: true}), [userId])\r\n\r\n    return (\r\n        <div className=\"relative flex p-2\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={40}\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    url={getAvatarUrl(avatarOptions)}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 h-4 w-4 flex-none self-center [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconKey fill=\"var(--c-icon)\" />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    {text}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport type {ActivityVoice as ActivityVoiceType, Party, Recordings} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {LegacyIconCallInbound} from '@bpinc/lib-icons'\r\nimport {AudioPlayer, Avatar} from '@bpinc/lib-ui-elements'\r\n\r\nimport {CaseActivityService} from './CaseActivityService'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityVoiceType\r\n    recordings?: Recordings\r\n}\r\n\r\nconst getFirstAndLastNames = (party?: Party): Array<string | undefined> => {\r\n    const names = party ? [party.firstName, party.lastName].filter(Boolean) : []\r\n    return names.length ? names : ['Anonymous']\r\n}\r\n\r\nexport const ActivityVoice: React.FC<Props> = ({activity, recordings = []}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {createdTime, parties, services} = activity\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n\r\n    const fullNameInternal = formatFullName(...getFirstAndLastNames(partyInternal))\r\n    const fullNameExternal = formatFullName(...getFirstAndLastNames(partyExternal))\r\n    const date = formatDate(createdTime)\r\n\r\n    const title = [fullNameExternal, 'called on', `${date}, handled by`, fullNameInternal].join(' ')\r\n\r\n    const avatar = {\r\n        firstName: get(partyExternal, 'firstName'),\r\n        lastName: get(partyExternal, 'lastName'),\r\n        size: 40,\r\n        url: getAvatarUrl({\r\n            contactId: partyExternal?.contactId,\r\n            notFoundPlaceholder: true,\r\n        }),\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex p-2 [&:not(:first-child)]:pt-0\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={avatar.size}\r\n                    firstName={avatar.firstName}\r\n                    lastName={avatar.lastName}\r\n                    url={avatar.url}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 h-4 w-4 flex-none self-center [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconCallInbound />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    {recordings.map((recording: string) => {\r\n                        return (\r\n                            <div key={recording} className=\"rounded-[24px] bg-[--c-activity-record-bg] p-3 [&:not(:first-child)]:mt-2\">\r\n                                <AudioPlayer src={recording} />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <CaseActivityService party={partyInternal} service={services?.[0]} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {Activity, Case, Recordings} from '@bpinc/ad-case-state-types'\r\n\r\nimport {ActivityCase} from './ActivityCase'\r\nimport {ActivityChat} from './ActivityChat'\r\nimport {ActivityEmail} from './ActivityEmail'\r\nimport {ActivityNotes} from './ActivityNotes'\r\nimport {ActivityVoice} from './ActivityVoice'\r\n\r\n\r\ninterface Props {\r\n    data: Case\r\n    recordings?: Recordings\r\n    serviceId?: string\r\n}\r\n\r\nexport const CaseContent: React.FC<Props> = ({data, recordings = [], serviceId}) => {\r\n\r\n    return (\r\n        <>\r\n            {data.activities.map((activity: Activity) => {\r\n                switch (activity.mediaType) {\r\n                    case 'NOTES': {\r\n                        return <ActivityNotes key={activity.id} activity={activity} />\r\n                    }\r\n                    case 'CASE': {\r\n                        return <ActivityCase serviceId={serviceId} key={activity.id} activity={activity} />\r\n                    }\r\n                    case 'EMAIL': {\r\n                        return <ActivityEmail caseId={data.id} key={activity.id} activity={activity} />\r\n                    }\r\n                    case 'VOICE': {\r\n                        return <ActivityVoice key={activity.id} activity={activity} recordings={recordings} />\r\n                    }\r\n                    case 'CHAT': {\r\n                        return <ActivityChat key={activity.id} activity={activity} />\r\n                    }\r\n                    default: return null\r\n                }\r\n            })}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\n\r\ninterface CaseFooterProps {\r\n    children: ReactNode\r\n}\r\n\r\nexport const CaseFooter: React.FC<CaseFooterProps> = props => {\r\n\r\n    return (\r\n        <footer className=\"mx-2 flex rounded-t border border-main-border p-2\">\r\n            {props.children}\r\n        </footer>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\nimport type {SearchResultItem} from '@bpinc/lib-user-search-components'\r\nimport {MultipleUserSearch} from '@bpinc/lib-user-search-components'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {User} from './atoms'\r\n\r\n\r\ntype UserSelectProps = {\r\n    className?: string\r\n    user: User | undefined\r\n    placeholder?: string\r\n    setUser: StateSetter<User | undefined>\r\n}\r\n\r\nconst empty: SearchResultItem[] = []\r\n\r\nexport const UserSelect: React.FC<UserSelectProps> = ({\r\n    className,\r\n    user,\r\n    placeholder,\r\n    setUser,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const open = useBoolean()\r\n    const handleClose = useCallback(() => {\r\n        open.setFalse()\r\n        setSearchValue('')\r\n        setSelectedItems([])\r\n    }, [open])\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [selectedItems, setSelectedItems] = useState<SearchResultItem[]>([])\r\n\r\n    useEffect(() => {\r\n        const selectedItem = selectedItems[0]\r\n\r\n        if (selectedItem) {\r\n            handleClose()\r\n            setSelectedItems([])\r\n\r\n            if (selectedItem.type === 'user') {\r\n                setUser({\r\n                    id: selectedItem.id,\r\n                    name: selectedItem.displayText,\r\n                })\r\n            }\r\n        }\r\n\r\n    }, [selectedItems, handleClose, setUser])\r\n\r\n    return (\r\n        <div className=\"relative flex items-center\">\r\n            {open.value ? (\r\n                <MultipleUserSearch\r\n                    searchForUsers\r\n                    withSessionUser\r\n                    className={className}\r\n                    autoFocus\r\n                    uniqueSearchId=\"calendar-owner\"\r\n                    searchValue={searchValue}\r\n                    onClickOutside={handleClose}\r\n                    setSearchValue={setSearchValue}\r\n                    selectedItems={empty}\r\n                    setSelectedItems={setSelectedItems}\r\n                    inputPlaceholder={t.EMAIL.find_agents()}\r\n                    loadingLabel={t.GLOBAL.loading()}\r\n                />\r\n            ) : (\r\n                <button\r\n                    className={tcn(\r\n                        'after:ml-[0.3em] after:inline-block after:h-0 after:w-0 after:border-solid after:content-[\"_\"]',\r\n                        'after:border-x-[0.3em] after:border-b-[0.1em] after:border-t-[0.3em] after:border-[var(--c-icon)_transparent_transparent]',\r\n                    )}\r\n                    onClick={open.toggle}\r\n                >\r\n                    {user?.name || placeholder}\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FormEvent} from 'react'\r\nimport React, {useState} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {QueueItemToMove} from '@bpinc/ad-case-state-types'\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {TextArea} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {User} from './atoms'\r\nimport type {CreateNoteMutationParams} from './mutations'\r\nimport {UserSelect} from './UserSelect'\r\n\r\n\r\ntype AssignEmailModalProps = CommonModalProps & {\r\n    queueItemsToMove: QueueItemToMove[]\r\n    fromUserId?: string\r\n    createNote: (params: CreateNoteMutationParams) => void\r\n}\r\n\r\nexport const AssignEmailModal: React.FC<AssignEmailModalProps> = ({\r\n    onClose,\r\n    queueItemsToMove,\r\n    fromUserId,\r\n    createNote,\r\n    ...restProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const [user, setUser] = useState<User | undefined>(undefined)\r\n    const [notes, setNotes] = useState('')\r\n    const {moveQueueItems} = useCaseStateMethods()\r\n    function handleAssign(e: FormEvent) {\r\n        e.preventDefault()\r\n        assertDefined(user)\r\n        assertDefined(fromUserId)\r\n\r\n        moveQueueItems({\r\n            itemsToMove: queueItemsToMove,\r\n            directions: {\r\n                toQueueType: 'PERSONAL',\r\n                fromQueueType: 'PERSONAL',\r\n                toUserId: user.id,\r\n                fromUserId,\r\n            },\r\n        })\r\n\r\n        if (notes) {\r\n            queueItemsToMove.forEach(q => {\r\n                createNote({\r\n                    user,\r\n                    notes,\r\n                    caseId: q.caseId,\r\n                })\r\n            })\r\n        }\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            className=\"relative w-90 overflow-hidden\"\r\n            aria-labelledby=\"assign_email_modal\"\r\n            data-testid=\"AssignEmailModal\"\r\n            {...restProps}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"assign_email_modal\">\r\n                {t.EMAIL.email_reply_assign_header()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <SmForm>\r\n                    <SmForm.Field>\r\n                        <label>{t.EMAIL.assign_to()}</label>\r\n                        <UserSelect\r\n                            user={user}\r\n                            setUser={setUser}\r\n                            placeholder={t.EMAIL.find_agent()}\r\n                        />\r\n                    </SmForm.Field>\r\n                    <SmForm.Field>\r\n                        <label>\r\n                            {t.DISPOSITION.disposition_notes_tooltip()}\r\n                        </label>\r\n                        <TextArea\r\n                            placeholder={t.DISPOSITION.disposition_notesEmptyText()}\r\n                            value={notes}\r\n                            onChange={e => setNotes(e.target.value)}\r\n                        />\r\n                    </SmForm.Field>\r\n                </SmForm>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton primary onClick={handleAssign} disabled={!user}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_button_assign()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useMutation} from '@tanstack/react-query'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {DefaultService} from '@bpinc/ad-request-urls'\r\n\r\nimport type {User} from '../atoms'\r\n\r\n\r\nexport interface CreateNoteMutationParams {\r\n    user: User\r\n    notes: string\r\n    caseId: string\r\n}\r\n\r\nexport function useCreateNoteMutation() {\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n\r\n    return useMutation({\r\n        mutationFn: ({user, notes, caseId}: CreateNoteMutationParams) => {\r\n            const [firstName, lastName] = getNamesFromDisplayName(user.name)\r\n\r\n            return DefaultService.createCaseActivity({\r\n                requestBody: {\r\n                    media_type: 'NOTES',\r\n                    parties: [\r\n                        {\r\n                            party_type: 'USER',\r\n                            user_id: user.id,\r\n                            first_name: firstName,\r\n                            last_name: lastName,\r\n                            notes: notes,\r\n                            start_time: {\r\n                                date: new Date().toISOString(),\r\n                            },\r\n                        },\r\n                    ],\r\n                    case_ids: [\r\n                        {\r\n                            oid: caseId,\r\n                        },\r\n                    ],\r\n                    has_voice_recording: false,\r\n                    is_agent_assignment: false,\r\n                    is_flagged: false,\r\n                    is_auto_acknowledgement: false,\r\n                },\r\n            })\r\n        },\r\n    })\r\n}\r\n","import type {FC, ReactNode} from 'react'\r\nimport React, {useRef} from 'react'\r\n\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface CaseHeaderInfoProps {\r\n    title: string\r\n    info?: string\r\n    tooltip?: ReactNode\r\n}\r\n\r\nexport const CaseHeaderInfo: FC<CaseHeaderInfoProps> = ({title, info, tooltip}) => {\r\n    const ref = useRef<HTMLDivElement | null>(null)\r\n    if (!info) return null\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            {title}\r\n            {': '}\r\n            {info && tooltip ? (\r\n                <Popup mountNode={ref.current} mode=\"hover\" hoverable content={tooltip} contentClassName=\"z-[1]\">\r\n                    <span className=\"underline decoration-dashed\">{info}</span>\r\n                </Popup>\r\n            ) : (\r\n                info\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useActiveInteractionStepId} from '@bpinc/ad-interaction-state-context'\r\nimport {useOpenSearchContactModal} from '@bpinc/lib-modals-ui'\r\nimport {LinkLikeButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface CaseReporterProps {\r\n    firstName: string | undefined\r\n    lastName: string | undefined\r\n    caseId: string\r\n    interactionMode?: boolean\r\n}\r\n\r\nexport const CaseReporter: FC<CaseReporterProps> = ({caseId, firstName, lastName, interactionMode}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionStepId = useActiveInteractionStepId()\r\n    const {changeReporter} = useCaseStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const reportedByName = firstName || lastName ? formatFullName(firstName, lastName) : t.GLOBAL.unidentified()\r\n    const openSearchContactModal = useOpenSearchContactModal()\r\n\r\n    const handleReporterChange = useCallback(\r\n        function handleReporterChangeCallback(contact: ContactShortType) {\r\n            if (interactionStepId) {\r\n                changeReporter(interactionStepId, caseId, contact)\r\n            }\r\n        },\r\n        [caseId, changeReporter, interactionStepId],\r\n    )\r\n    const openChangeCaseReporterModal = useCallback(\r\n        function handleChangeReporterCallback() {\r\n            openSearchContactModal({\r\n                dataKey: 'change_reporter_modal',\r\n                onSelect: handleReporterChange,\r\n                title: t.CALENDAR_EVENT_FORM.contact_search_dialog_heading(),\r\n            })\r\n        },\r\n        [handleReporterChange, openSearchContactModal, t.CALENDAR_EVENT_FORM],\r\n    )\r\n    return (\r\n        <div>\r\n            {reportedByName}\r\n,\r\n            {' '}\r\n            {interactionMode ? (\r\n                <LinkLikeButton onClick={openChangeCaseReporterModal}>\r\n                    {t.EMAIL.case_view_reporter_label()}\r\n                </LinkLikeButton>\r\n            ) : (\r\n                <u>{t.EMAIL.case_view_reporter_label()}</u>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useState} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {SimpleInput} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface CaseTitleInputProps {\r\n    initialTitle: string\r\n    caseId: string\r\n}\r\n\r\nexport const CaseTitleInput: FC<CaseTitleInputProps> = ({initialTitle, caseId}) => {\r\n    const [title, setTitle] = useState(initialTitle)\r\n    const {updateCaseTitle} = useCaseStateMethods()\r\n\r\n    const handleChange = useCallback(function handleChangeCallback(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.target.value)\r\n    }, [])\r\n\r\n    const handleBlur = useCallback(\r\n        function handleBlurCallback() {\r\n            if (title !== initialTitle) {\r\n                updateCaseTitle({caseId, caseTitle: title})\r\n            }\r\n        },\r\n        [caseId, initialTitle, title, updateCaseTitle],\r\n    )\r\n\r\n    return (\r\n        <SimpleInput\r\n            value={title}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            className=\"-ml-px -mt-px [&:not(:focus):not(:hover)]:!ml-0 [&:not(:focus):not(:hover)]:!mt-0 [&:not(:focus):not(:hover)]:[&_input]:!border-none\"\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CaseTitleInput} from './CaseTitleInput'\r\n\r\n\r\ninterface CaseTitleProps {\r\n    editable?: boolean\r\n    text: string\r\n    caseId: string\r\n}\r\n\r\nexport const CaseTitle: FC<CaseTitleProps> = ({text, editable, caseId}) => {\r\n    return <>{editable ? <CaseTitleInput initialTitle={text} caseId={caseId} /> : text}</>\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLink = function SvgLink(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLink);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"768a4584de75be31d108c80afaed59bb.svg\";","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {getCaseURL} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {SemanticButton, Svg} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport iconLink from '../images/link.svg'\r\n\r\n\r\nconst linkIcon = <Svg src={iconLink} className=\"[&_svg]:!h-[15px] [&_svg]:!w-[15px]\" />\r\n\r\ninterface CopyCaseLinkButtonProps {\r\n    caseId: string\r\n}\r\n\r\nexport const CopyCaseLinkButton: FC<CopyCaseLinkButtonProps> = ({caseId}) => {\r\n    const {serverOrigin} = useSessionState()\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleCopy = useCallback(() => {\r\n        clipboard.copy(getCaseURL(serverOrigin, caseId))\r\n    }, [caseId, serverOrigin])\r\n\r\n    return (\r\n        <SemanticButton\r\n            basic\r\n            icon={linkIcon}\r\n            onClick={handleCopy}\r\n            className=\"!h-9 !w-9 [&_svg]:h-full [&_svg]:w-full\"\r\n            tooltip={t.GLOBAL.copy_shareable_link_button_tooltip()}\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ninterface DeleteCaseButtonProps {\r\n    caseId: string\r\n    caseNumber: string\r\n    itemId: string\r\n}\r\n\r\nexport const DeleteCaseButton: FC<DeleteCaseButtonProps> = ({caseId, caseNumber, itemId}) => {\r\n    const {completeItem} = useInteractionStateMethods()\r\n    const {t} = useLocalizationState()\r\n    const {deleteCases} = useCaseStateMethods()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const handleClick = useCallback(\r\n        function handleClickCallback() {\r\n            function handleOk() {\r\n                completeItem(itemId)\r\n                deleteCases([caseId], undefined)\r\n            }\r\n\r\n            if (itemId) {\r\n                openModal({\r\n                    title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                    body: t.CASE_SEARCH.delete_case_confirmation_label(caseNumber),\r\n                    actions: {\r\n                        ok: {\r\n                            title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                            action: handleOk,\r\n                        },\r\n                        cancel: {\r\n                            title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                        },\r\n                    },\r\n                    className: 'autoSizeModal',\r\n                })\r\n            }\r\n        },\r\n        [\r\n            caseId,\r\n            caseNumber,\r\n            completeItem,\r\n            deleteCases,\r\n            itemId,\r\n            openModal,\r\n            t.CASE_SEARCH,\r\n            t.WINDOW_POPUP_TITLES_AND_MESSAGES,\r\n        ],\r\n    )\r\n    return <SemanticButton basic icon=\"trash\" onClick={handleClick} />\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {LegacyIconSaveClose} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface SaveDraftButtonProps {\r\n    itemId: string\r\n}\r\n\r\nexport const SaveDraftButton: FC<SaveDraftButtonProps> = ({itemId}) => {\r\n    const {saveEmailDraft} = useInteractionStateMethods()\r\n\r\n    const handleClick = useCallback(\r\n        function handleClickCallback() {\r\n            if (itemId) {\r\n                saveEmailDraft({itemId})\r\n            }\r\n        },\r\n        [itemId, saveEmailDraft],\r\n    )\r\n\r\n    return (\r\n        <SemanticButton\r\n            icon\r\n            basic\r\n            className={tcn('h-9 w-15 [&_svg]:h-full [&_svg]:w-9.5')}\r\n            onClick={handleClick}\r\n        >\r\n            <LegacyIconSaveClose fill=\"var(--c-icon)\" />\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {Assignments, Case} from '@bpinc/ad-case-state-types'\r\nimport {useGetContactPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {LegacyIconCaseFlagOn, LegacyIconPinOn} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Avatar, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AssignEmailModal} from './CasePage/AssignEmailModal'\r\nimport {useCreateNoteMutation} from './CasePage/mutations'\r\nimport {CaseHeaderInfo} from './CaseHeaderInfo'\r\nimport {CaseReporter} from './CaseReporter'\r\nimport {CaseTitle} from './CaseTitle'\r\nimport {CopyCaseLinkButton} from './CopyCaseLinkButton'\r\nimport {DeleteCaseButton} from './DeleteCaseButton'\r\nimport {SaveDraftButton} from './SaveDraftButton'\r\n\r\n\r\ninterface CaseHeaderProps {\r\n    data: Case\r\n    serviceId?: string\r\n    assignments?: Assignments\r\n    interactionMode?: boolean\r\n}\r\n\r\nexport const CaseHeader: React.FC<CaseHeaderProps> = ({data, interactionMode, serviceId, assignments}) => {\r\n\r\n    const {pinCase, unpinCase, flagCase, unflagCase} = useCaseStateMethods()\r\n    const getContactPictureUrl = useGetContactPictureUrl()\r\n    const activeItemId = useActiveInteractionId()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const reporter = {\r\n        id: data.reporterId,\r\n        firstName: data.reporterFirstName || 'Unidentified',\r\n        lastName: data.reporterLastName,\r\n        avatarUrl: getContactPictureUrl(data.reporterId, true),\r\n    }\r\n\r\n    const assignment = assignments?.personal[0]\r\n    const assignedToString =\r\n        assignment && formatFullName(assignment.firstName, assignment.lastName)\r\n\r\n    const pinnedBy = assignments?.followUp.map(pin =>\r\n        formatFullName(pin.firstName, pin.lastName),\r\n    )\r\n\r\n    const isPinned = !!pinnedBy?.length\r\n\r\n    const pinnedByString = pinnedBy?.join(', ')\r\n\r\n    const status = data.status\r\n    const isFlagged = data.isFlagged\r\n\r\n    const handlePin = useCallback(() => pinCase(data.id), [data.id, pinCase])\r\n    const handleUnpin = useCallback(\r\n        () => unpinCase(data.id),\r\n        [data.id, unpinCase],\r\n    )\r\n    const handleFlag = useCallback(\r\n        () => flagCase(data.id),\r\n        [data.id, flagCase],\r\n    )\r\n    const handleUnflag = useCallback(\r\n        () => unflagCase(data.id),\r\n        [data.id, unflagCase],\r\n    )\r\n    const headerInfoColumnClassName = tcn('ml-4 mr-2 last:!mr-0')\r\n    const headerInfoIconClassName = tcn(\r\n        'mx-1 inline-block h-4 w-4 [&_svg]:h-full [&_svg]:w-full [&_svg]:fill-[--c-activity-border]',\r\n    )\r\n    const iconButtonClassName = tcn('[&_svg]:h-full [&_svg]:w-full')\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const pinnedByTooltip = useMemo(() => {\r\n        if (!pinnedBy?.length) return null\r\n\r\n        return (\r\n            <>\r\n                {pinnedBy?.map((name, index) => (\r\n                    <CaseHeaderInfo key={index} info={name} title={t.EMAIL.case_view_followups_label()} />\r\n                ))}\r\n            </>\r\n        )\r\n    }, [pinnedBy, t.EMAIL])\r\n\r\n    const openAssignEmailModal = useModalComponentOpener(AssignEmailModal)\r\n    const {mutate: createNote} = useCreateNoteMutation()\r\n\r\n    const assignedToTooltip = useMemo(() => {\r\n        if (!assignedToString || !assignment.date) return null\r\n\r\n        const date = new Date(assignment.date).toLocaleDateString('en-US', {\r\n            month: 'short',\r\n            day: '2-digit',\r\n            year: 'numeric',\r\n        })\r\n        const time = new Date(assignment.date).toLocaleTimeString('en-US', {\r\n            hour: 'numeric',\r\n            minute: '2-digit',\r\n            hour12: true,\r\n        })\r\n\r\n        return (\r\n            <div className=\"flex flex-col gap-1 p-2 \">\r\n                {t.EMAIL.case_view_assignment_personal_label(\r\n                    assignedToString,\r\n                    date,\r\n                    time,\r\n                )}\r\n                <SemanticButton\r\n                    basic\r\n                    className=\"self-end\"\r\n                    primary\r\n                    size=\"small\"\r\n                    onClick={() =>\r\n                        openAssignEmailModal({\r\n                            createNote,\r\n                            queueItemsToMove: [\r\n                                {\r\n                                    caseId: data.id,\r\n                                    queueId: assignments.queueItemId,\r\n                                    service: serviceId,\r\n                                },\r\n                            ],\r\n                        })\r\n                    }\r\n                >\r\n                    {t.EMAIL.email_assign_button()}\r\n                </SemanticButton>\r\n            </div>\r\n        )\r\n    }, [serviceId, assignedToString, assignment, assignments?.queueItemId, createNote, data.id, openAssignEmailModal, t.EMAIL])\r\n\r\n    return (\r\n        <div className=\"flex flex-row flex-nowrap border-b border-[--c-activity-border] p-2\">\r\n            <div className=\"flex-1\">\r\n                <div className=\"relative mb-2 block text-lg font-bold leading-[22px] before:inline-block before:content-[attr(before)]\">\r\n                    <div className=\"absolute inset-x-0 top-0 flex truncate pl-[0.1em] pt-px\">\r\n                        <div className=\"inline-block pr-[0.5em]\">\r\n                            {data.number}\r\n                        </div>\r\n                        {data.title && (\r\n                            <CaseTitle\r\n                                editable={interactionMode}\r\n                                text={data.title}\r\n                                caseId={data.id}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-1 flex flex-row flex-nowrap\">\r\n                    <div className=\"w-10 flex-none\">\r\n                        <Avatar\r\n                            firstName={reporter.firstName}\r\n                            lastName={reporter.lastName}\r\n                            url={reporter.avatarUrl}\r\n                            size={40}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-1 flex-row flex-nowrap\">\r\n                        <div className={headerInfoColumnClassName}>\r\n                            <CaseReporter\r\n                                {...reporter}\r\n                                interactionMode={interactionMode}\r\n                                caseId={data.id}\r\n                            />\r\n\r\n                            {data.categoryName && (\r\n                                <div className=\"mt-1 text-gray-400\">\r\n                                    {data.categoryName}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className={headerInfoColumnClassName}>\r\n                            <CaseHeaderInfo title={t.EMAIL.case_view_status_label()} info={status} />\r\n                            <CaseHeaderInfo title={t.EMAIL.case_view_assignments_label()} info={assignedToString} tooltip={assignedToTooltip} />\r\n                            <CaseHeaderInfo title={t.EMAIL.case_view_followups_label()} info={pinnedByString} tooltip={pinnedByTooltip} />\r\n                        </div>\r\n\r\n                        {(isPinned || isFlagged) && (\r\n                            <div className={headerInfoColumnClassName}>\r\n                                {isPinned && (\r\n                                    <div className={headerInfoIconClassName}>\r\n                                        <LegacyIconPinOn />\r\n                                    </div>\r\n                                )}\r\n                                {isFlagged && (\r\n                                    <div className={headerInfoIconClassName}>\r\n                                        <LegacyIconCaseFlagOn />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"ml-2 flex flex-none items-start\">\r\n                <SemanticButton\r\n                    basic\r\n                    active={isPinned}\r\n                    className={iconButtonClassName}\r\n                    icon=\"pin\"\r\n                    onClick={isPinned ? handleUnpin : handlePin}\r\n                />\r\n                <SemanticButton\r\n                    basic\r\n                    icon=\"flag\"\r\n                    active={data.isFlagged}\r\n                    className={iconButtonClassName}\r\n                    onClick={data.isFlagged ? handleUnflag : handleFlag}\r\n                />\r\n                <CopyCaseLinkButton caseId={data.id} />\r\n                {interactionMode && activeItemId && (\r\n                    <>\r\n                        <SaveDraftButton itemId={activeItemId} />\r\n                        <DeleteCaseButton\r\n                            caseId={data.id}\r\n                            itemId={activeItemId}\r\n                            caseNumber={data.number ?? ''}\r\n                        />\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React, {useEffect} from 'react'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {ActiveDraft} from '@bpinc/ad-interaction-state-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {EmailForm} from './EmailForm/EmailForm'\r\nimport {CaseContent} from './CaseContent'\r\nimport {CaseFooter} from './CaseFooter'\r\nimport {CaseHeader} from './CaseHeader'\r\n\r\n\r\nexport interface CaseProps {\r\n    id: string | undefined\r\n    FooterContent?: ReactNode\r\n    className?: string\r\n    loaderClassName?: string\r\n    activeDrafts?: ActiveDraft[]\r\n    interactionId?: string\r\n    /**serviceId is passed from the queueItem in the Queues and from the interaction in the Email.\r\n     * Check (find) CasePresenterGeneratorData.builder() code in the old AD for the refference */\r\n    serviceId?: string\r\n}\r\n\r\nexport const Case: React.FC<CaseProps> = React.memo(function Case({\r\n    id,\r\n    className,\r\n    loaderClassName,\r\n    FooterContent,\r\n    activeDrafts,\r\n    interactionId,\r\n    serviceId,\r\n}) {\r\n    const {t} = useLocalizationState()\r\n    const cases = useCaseState('cases')\r\n    const {getCase} = useCaseStateMethods()\r\n\r\n    const caseItem = id ? cases[id] : undefined\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            getCase(id)\r\n        }\r\n        // do not track item change\r\n        // eslint-disable-next-line\r\n    }, [id, getCase]);\r\n\r\n    if (!caseItem?.data) {\r\n        return (\r\n            <Loader\r\n                color=\"primary\"\r\n                size=\"big\"\r\n                className={loaderClassName}\r\n                active\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-col', className)}>\r\n            <CaseHeader\r\n                data={caseItem.data}\r\n                serviceId={serviceId}\r\n                interactionMode={!!interactionId}\r\n                assignments={caseItem.assignments}\r\n            />\r\n            <div className=\"grow overflow-auto\">\r\n                <CaseContent\r\n                    serviceId={serviceId}\r\n                    data={caseItem.data}\r\n                    recordings={caseItem.recordings}\r\n                />\r\n                {interactionId &&\r\n                    activeDrafts?.map(draft => (\r\n                        <EmailForm\r\n                            key={draft.emailId}\r\n                            {...draft}\r\n                            interactionId={interactionId}\r\n                        />\r\n                    ))}\r\n            </div>\r\n            <CaseFooter>{FooterContent}</CaseFooter>\r\n        </div>\r\n    )\r\n})\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\n\r\nimport {ActiveInteractionCaseFooterContent} from './ActiveInteractionCaseFooterContent'\r\nimport type {CaseProps} from './Case'\r\nimport {Case} from './Case'\r\n\r\n\r\ntype ActiveCaseProps = CaseProps\r\n\r\nexport const ActiveCase: FC<ActiveCaseProps> = props => {\r\n    const item = useActiveInteraction()\r\n\r\n\r\n    if (!item?.emailData?.caseId) {\r\n        return null\r\n    }\r\n\r\n\r\n    return (\r\n        <Case\r\n            {...props}\r\n            interactionId={item.id}\r\n            activeDrafts={item?.emailData?.activeDrafts}\r\n            FooterContent={\r\n                <ActiveInteractionCaseFooterContent\r\n                    caseId={item.emailData.caseId}\r\n                />\r\n            }\r\n        />\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\nimport type {QueueItem, QueueType} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport type Pagination = {\r\n    skip: number\r\n    size: number\r\n}\r\n\r\nexport type Sorting = {\r\n    field: string\r\n    direction: 'asc' | 'desc'\r\n}\r\n\r\nexport type User = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\n\r\nexport type CaseTab = QueueTab | ViewCaseTab\r\n\r\ninterface QueueTab extends BaseTab {\r\n    id: 'TEAM' | 'PERSONAL' | 'FOLLOWUP'\r\n    type: 'queue'\r\n    closeable: false\r\n}\r\n\r\nexport interface ViewCaseTab extends BaseTab {\r\n    id: string\r\n    case: {\r\n        id: string\r\n        serviceId: string | undefined\r\n        number: number\r\n    }\r\n    type: 'view_case'\r\n    closeable: true\r\n}\r\n\r\ninterface BaseTab {\r\n    queueType: QueueType\r\n    id: string\r\n    closeable: boolean\r\n}\r\n\r\nconst DEFAULT_SORTING_FIELD = 'updateTime'\r\nconst DEFAULT_SERVICE = 'all'\r\nconst INITIAL_QUEUE_TABLE_WIDTH = 400\r\n\r\nexport const PAGINATION_CHUNK_SIZE = 100\r\n\r\nconst DEFAULT_CASE_TABS: CaseTab[] = [\r\n    {\r\n        id: 'TEAM',\r\n        type: 'queue',\r\n        queueType: 'TEAM',\r\n        closeable: false,\r\n\r\n    },\r\n    {\r\n        id: 'PERSONAL',\r\n        type: 'queue',\r\n        queueType: 'PERSONAL',\r\n        closeable: false,\r\n    },\r\n    {\r\n        id: 'FOLLOWUP',\r\n        queueType: 'FOLLOWUP',\r\n        type: 'queue',\r\n        closeable: false,\r\n    },\r\n]\r\n\r\n//-------All tabs-------//\r\nexport const tabsAtom = atom(DEFAULT_CASE_TABS)\r\nexport const selectedTabIdAtom = atom('TEAM')\r\nexport const selectedTabAtom = atom(get => get(tabsAtom).find(tab => tab.id === get(selectedTabIdAtom)))\r\nexport const queueTableWidthAtom = atom<number>(INITIAL_QUEUE_TABLE_WIDTH)\r\n\r\n//-------Personal tab-------//\r\n//@ts-expect-error - User is always defined in JotaiProvider (self user by default).\r\nexport const personalTabUserAtom = atom<User>()\r\n\r\nexport const personalPaginationAtom = atom<Pagination>({\r\n    skip: 0,\r\n    size: 100,\r\n})\r\n\r\nexport const personalActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\n\r\nexport const personalSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\n//-------Team tab-------//\r\nexport const teamIdAtom = atom<string | undefined>(undefined)\r\nexport const serviceFilterAtom = atom(DEFAULT_SERVICE)\r\nexport const teamActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\nexport const teamSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\nexport const teamPaginationAtom = atom<Pagination>({\r\n    skip: 0,\r\n    size: 100,\r\n})\r\n\r\n\r\n//-------Pinned tab-------//\r\nexport const pinnedActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\nexport const pinnedSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {useSetAtom} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ViewCaseTab} from './atoms'\r\nimport {selectedTabIdAtom, tabsAtom} from './atoms'\r\n\r\n\r\ninterface ViewButtonProps {\r\n    queueItem: QueueItem\r\n}\r\n\r\nexport const ViewButton: FC<ViewButtonProps> = ({queueItem}) => {\r\n    const {t} = useLocalizationState()\r\n    const setTabs = useSetAtom(tabsAtom)\r\n    const setSelectedTabId = useSetAtom(selectedTabIdAtom)\r\n\r\n    const handleClick = () => {\r\n        const viewCaseTab: ViewCaseTab = {\r\n            id: queueItem.caseId,\r\n            case: {\r\n                id: queueItem.caseId,\r\n                serviceId: queueItem.service,\r\n                number: Number(queueItem.caseNumber),\r\n            },\r\n            type: 'view_case',\r\n            closeable: true,\r\n            queueType: queueItem.queueType,\r\n        }\r\n\r\n        setTabs(tabs => [...tabs, viewCaseTab])\r\n        setSelectedTabId(viewCaseTab.id)\r\n    }\r\n    return (\r\n        <SemanticButton basic primary onClick={handleClick}>\r\n            {t.EMAIL.email_view_button()}\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import React, {type FC, useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {personalActiveQueueItemAtom} from '../atoms'\r\nimport {ViewButton} from '../ViewButton'\r\n\r\n\r\ninterface CaseFooterContentProps {\r\n    canViewCase?: boolean\r\n}\r\n\r\nexport const PersonalCaseFooterContent: FC<CaseFooterContentProps> = ({\r\n    canViewCase,\r\n}) => {\r\n    const queueItem = useAtomValue(personalActiveQueueItemAtom)\r\n    const {caseId, queueId, queueType} = queueItem ?? {}\r\n    const {t} = useLocalizationState()\r\n    const {openCase} = useCaseStateMethods()\r\n\r\n    const handleOpen = useCallback(\r\n        function handleOpenCallback() {\r\n            assertDefined(queueId)\r\n            assertDefined(caseId)\r\n\r\n            openCase({\r\n                caseId,\r\n                queueId,\r\n                queueType,\r\n            })\r\n        },\r\n        [queueId, caseId, openCase, queueType],\r\n    )\r\n\r\n\r\n    return (\r\n        <>\r\n            {queueItem && canViewCase && <ViewButton queueItem={queueItem} />}\r\n            <SemanticButton basic primary onClick={handleOpen}>\r\n                {t.EMAIL.email_open_button()}\r\n            </SemanticButton>\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {Row} from '@tanstack/react-table'\r\nimport {flexRender} from '@tanstack/react-table'\r\n\r\nimport type {QueueItem as QueueItemType} from '@bpinc/ad-request-urls'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\n\r\ninterface QueueItemRowProps {\r\n    row: Row<QueueItemType>\r\n    isActive: boolean\r\n    isDisabled?: boolean\r\n    setActiveQueueItem: StateSetter<QueueItemType | undefined>\r\n}\r\n\r\nexport const QueueItemRow: FC<QueueItemRowProps> =\r\n    ({\r\n        isActive,\r\n        isDisabled,\r\n        setActiveQueueItem,\r\n        row,\r\n    }) => {\r\n\r\n        const handleClick = useCallback(\r\n            function handleClickCallback() {\r\n                setActiveQueueItem(row.original)\r\n            },\r\n            [row.original, setActiveQueueItem],\r\n        )\r\n\r\n\r\n        return (\r\n            <SmTable.Row\r\n                key={row.id}\r\n                data-element=\"queue-item\"\r\n                onClick={handleClick}\r\n                active={isActive}\r\n                disabled={isDisabled}\r\n            >\r\n                {row.getVisibleCells().map(cell => (\r\n                    <SmTable.Cell key={cell.id} >\r\n                        {flexRender(\r\n                            cell.column.columnDef.cell,\r\n                            cell.getContext(),\r\n                        )}\r\n                    </SmTable.Cell>\r\n                ))}\r\n            </SmTable.Row>\r\n        )\r\n    }\r\n","import type {FC, ReactNode} from 'react'\r\nimport React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport {flexRender} from '@tanstack/react-table'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {QueueItem, QueueItem as QueueItemType} from '@bpinc/ad-request-urls'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\nimport {useEventListener} from '@bpinc/lib-helpers'\r\nimport {useMenuKeysHandler as useTableKeysHandler} from '@bpinc/lib-ui-elements'\r\n\r\nimport {QueueItemRow} from './QueueItemRow'\r\n\r\n\r\ninterface QueueTableProps {\r\n    noSelection?: boolean\r\n    HeaderContent?: ReactNode\r\n    isLoading?: boolean\r\n    table: Table<QueueItemType>\r\n    activeQueueItemAtom: PrimitiveAtom<QueueItem | undefined>\r\n}\r\n\r\nexport const QueueTable: FC<QueueTableProps> = ({\r\n    table,\r\n    noSelection,\r\n    activeQueueItemAtom,\r\n    HeaderContent,\r\n}) => {\r\n    const [activeQueueItem, setActiveQueueItem] = useAtom(activeQueueItemAtom)\r\n\r\n    const handlerTableKeysHandler = useTableKeysHandler(\r\n        'queue-item',\r\n        'queue-table',\r\n    )\r\n    useEventListener('keydown', handlerTableKeysHandler)\r\n\r\n    const headers = table.getHeaderGroups()[0].headers\r\n    const header = headers[0]\r\n    return (\r\n        <div className=\"overflow-auto\">\r\n            <SmTable data-element=\"queue-table\" compact className=\"table-fixed\">\r\n                <colgroup>\r\n                    {headers.map(h => (\r\n                        <col\r\n                            key={h.id}\r\n                            style={{\r\n                                width: h.getSize() || 'auto',\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </colgroup>\r\n                <SmTable.Header className=\"relative\">\r\n                    <SmTable.Row>\r\n                        {!noSelection && (\r\n                            <SmTable.HeaderCell\r\n                                style={{\r\n                                    width: header.getSize() || 'auto',\r\n                                }}\r\n                            >\r\n                                {flexRender(\r\n                                    header.column.columnDef.header,\r\n                                    header.getContext(),\r\n                                )}\r\n                            </SmTable.HeaderCell>\r\n                        )}\r\n                        <th colSpan={headers.length - 1}>\r\n                            {HeaderContent}\r\n                        </th>\r\n                    </SmTable.Row>\r\n                </SmTable.Header>\r\n\r\n                <SmTable.Body>\r\n                    {table.getRowModel().rows.map(row => (\r\n                        <QueueItemRow\r\n                            setActiveQueueItem={setActiveQueueItem}\r\n                            isActive={\r\n                                activeQueueItem?.queueId ===\r\n                                row.original.queueId\r\n                            }\r\n                            key={row.id}\r\n                            row={row}\r\n                        />\r\n                    ))}\r\n                </SmTable.Body>\r\n            </SmTable>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC, ReactElement, ReactNode} from 'react'\r\nimport React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\nimport {flow, property} from 'lodash-es'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {ResizePanel} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Case} from '../Case'\r\nimport {queueTableWidthAtom} from './atoms'\r\nimport {QueueTable} from './QueueTable'\r\nimport {useActivateQueueWhenItemMoved} from './useActivateQueueWhenItemMoved'\r\nimport {useFirstQueueItemActivator} from './useFirstQueueItemActivator'\r\n\r\n\r\nexport interface CaseTabProps {\r\n    table: Table<QueueItem>\r\n    activeQueueItemAtom: PrimitiveAtom<QueueItem | undefined>\r\n    QueueControls?: ReactElement\r\n    noSelection?: boolean\r\n    CaseFooterContent: ReactNode\r\n    TableHeaderContent?: ReactNode\r\n    queueItems: QueueItem[] | undefined\r\n    totalQueueCount: number | undefined\r\n    noData: boolean\r\n}\r\n\r\nexport const CaseTab: FC<CaseTabProps> = ({\r\n    table,\r\n    noData,\r\n    queueItems,\r\n    noSelection,\r\n    QueueControls,\r\n    TableHeaderContent,\r\n    CaseFooterContent,\r\n    activeQueueItemAtom,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const [queueTableWidth, setQueueTableWidth] = useAtom(queueTableWidthAtom)\r\n    const activeQueueItem = useAtomValue(activeQueueItemAtom)\r\n    useFirstQueueItemActivator(queueItems, activeQueueItemAtom)\r\n    useActivateQueueWhenItemMoved(queueItems, activeQueueItemAtom)\r\n\r\n    return (\r\n        <section className=\"flex h-full items-start overflow-hidden\">\r\n            <ResizePanel\r\n                className=\"h-full\"\r\n                minSize={300}\r\n                id=\"queue-panel\"\r\n                maxSizeInPercent={70}\r\n                initialSize={queueTableWidth}\r\n                onDragEnd={flow(property('size'), setQueueTableWidth)}\r\n                direction=\"right\"\r\n                containerClass=\"h-full\"\r\n            >\r\n                <aside className=\"flex h-full min-w-[300px] flex-auto flex-col border-r border-gray-200\">\r\n                    {QueueControls}\r\n                    <QueueTable\r\n                        table={table}\r\n                        noSelection={noSelection}\r\n                        activeQueueItemAtom={activeQueueItemAtom}\r\n                        HeaderContent={TableHeaderContent}\r\n                    />\r\n                </aside>\r\n            </ResizePanel>\r\n\r\n            <article className=\"relative flex h-full w-full flex-col items-center justify-center\">\r\n                {!activeQueueItem || noData ? (\r\n                    <p className=\"text-2xl\">\r\n                        {t.GLOBAL.no_data()}\r\n                    </p>\r\n                ) : (\r\n                    <Case\r\n                        id={activeQueueItem?.caseId}\r\n                        serviceId={activeQueueItem?.service}\r\n                        className=\"w-full overflow-auto\"\r\n                        FooterContent={CaseFooterContent}\r\n                    />\r\n                )}\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n","import {useLayoutEffect} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function useFirstQueueItemActivator(queueItems: QueueItem[] | undefined, activeQueueItemAtom: PrimitiveAtom<QueueItem | undefined>) {\r\n    const [activeQueueItem, setActiveQueueItem] = useAtom(activeQueueItemAtom)\r\n\r\n    useLayoutEffect(() => {\r\n        if (!queueItems?.some(q => q.caseId === activeQueueItem?.caseId)) {\r\n            setActiveQueueItem(queueItems?.[0])\r\n        }\r\n    }, [activeQueueItem, queueItems, setActiveQueueItem])\r\n}\r\n","import {useEffect, useMemo} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useActivateQueueWhenItemMoved(\r\n    queueItems: QueueItem[] = [],\r\n    activeQueueItemAtom: PrimitiveAtom<QueueItem | undefined>,\r\n) {\r\n\r\n    const [activeQueueItem, setActiveQueueItem] = useAtom(activeQueueItemAtom)\r\n    const activeQueueId = activeQueueItem?.queueId\r\n\r\n    const activeQueueItemIndex = useMemo(\r\n        function memoizeActiveQueueItemIndex() {\r\n            return queueItems.findIndex(q => q.queueId === activeQueueId)\r\n        },\r\n        [activeQueueId, queueItems],\r\n    )\r\n\r\n    const previousQueueItemIndex = usePrevious(activeQueueItemIndex)\r\n    const prevQueueDataLength = usePrevious(queueItems?.length)\r\n\r\n    const amountOfDeletedQueueItems = prevQueueDataLength\r\n        ? prevQueueDataLength - queueItems.length\r\n        : 0\r\n\r\n    const activeQueueItemIsDeleted = useMemo(() => {\r\n        const queueReduced = (prevQueueDataLength ?? 0) > queueItems?.length\r\n        const activeQueueItemIsAbsent = activeQueueItemIndex === -1\r\n\r\n        return queueReduced && activeQueueItemIsAbsent\r\n    }, [activeQueueItemIndex, prevQueueDataLength, queueItems?.length])\r\n\r\n    useEffect(\r\n        function activateQueueWhenItemMoved() {\r\n            if (activeQueueItemIsDeleted && activeQueueItemIndex === -1) {\r\n                setActiveQueueItem(queueItems[findClosestIndex()])\r\n            }\r\n\r\n            function findClosestIndex() {\r\n                const newIndex =\r\n                    (previousQueueItemIndex ?? 0) -\r\n                    amountOfDeletedQueueItems +\r\n                    1\r\n\r\n                const toBigIndex = newIndex >= queueItems.length\r\n\r\n                if (toBigIndex) {\r\n                    return queueItems.length - 1\r\n                }\r\n\r\n                const toSmallIndex = newIndex < 0\r\n\r\n                if (toSmallIndex) {\r\n                    return 0\r\n                }\r\n\r\n                return newIndex\r\n            }\r\n        },\r\n        [\r\n            queueItems.length,\r\n            activeQueueId,\r\n            activeQueueItemIndex,\r\n            activeQueueItemIsDeleted,\r\n            amountOfDeletedQueueItems,\r\n            previousQueueItemIndex,\r\n            setActiveQueueItem,\r\n            queueItems,\r\n        ],\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport produce from 'immer'\r\nimport {type PrimitiveAtom, useAtom} from 'jotai'\r\n\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {Pagination as PaginationType} from './atoms'\r\n\r\n\r\ninterface PaginationProps {\r\n    paginationAtom: PrimitiveAtom<PaginationType>\r\n    actualQueueCount: number\r\n    totalQueueCount: number | undefined\r\n}\r\n\r\nexport const Pagination: FC<PaginationProps> = ({\r\n    actualQueueCount,\r\n    paginationAtom,\r\n    totalQueueCount = actualQueueCount,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const [pagination, setPagination] = useAtom(paginationAtom)\r\n\r\n    const noMoreItems = actualQueueCount + pagination.skip * pagination.size >= totalQueueCount\r\n    const noLessItems = pagination.skip === 0\r\n    const paginationFrom = pagination.skip * pagination.size + 1\r\n    const paginationTo = noMoreItems ? totalQueueCount : actualQueueCount + pagination.skip * pagination.size\r\n\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            <p className=\"mr-2 text-sm text-gray-500\">\r\n                {t.GLOBAL.pagination(\r\n                    paginationFrom,\r\n                    paginationTo,\r\n                    totalQueueCount,\r\n                )}\r\n            </p>\r\n            <SemanticButton\r\n                transparent\r\n                icon=\"chevron left\"\r\n                className=\"mr-2\"\r\n                onClick={() =>\r\n                    setPagination(\r\n                        produce(s => {\r\n                            s.skip--\r\n                        }),\r\n                    )\r\n                }\r\n                disabled={noLessItems}\r\n            />\r\n            <SemanticButton\r\n                transparent\r\n                icon=\"chevron right\"\r\n                onClick={() =>\r\n                    setPagination(\r\n                        produce(s => {\r\n                            s.skip++\r\n                        }),\r\n                    )\r\n                }\r\n                disabled={noMoreItems}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC, SyntheticEvent} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {type PrimitiveAtom, useAtom} from 'jotai'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {type DropdownItemProps, type DropdownProps, Dropdown, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {Sorting} from './atoms'\r\n\r\n\r\ninterface SortingControlsProps {\r\n    sortingAtom: PrimitiveAtom<Sorting>\r\n    options: DropdownItemProps[]\r\n    className?: string\r\n}\r\n\r\nexport const SortingControls: FC<SortingControlsProps> = ({\r\n    options,\r\n    sortingAtom,\r\n    className,\r\n}) => {\r\n    const [sorting, setSorting] = useAtom(sortingAtom)\r\n\r\n    const handleSortingDirectionChange = useCallback(\r\n        function handleSortingDirectionChangeCallback() {\r\n            setSorting(s => ({\r\n                ...s,\r\n                direction: s.direction === 'asc' ? 'desc' : 'asc',\r\n            }))\r\n        },\r\n        [setSorting],\r\n    )\r\n\r\n    const handleSortingFieldChange = useCallback(\r\n        (_evt: SyntheticEvent, data: DropdownProps) => {\r\n            setSorting(s => {\r\n                if (typeof data.value !== 'string') {\r\n                    return s\r\n                }\r\n\r\n                return {\r\n                    ...s,\r\n                    field: data.value,\r\n                }\r\n            })\r\n        },\r\n        [setSorting],\r\n    )\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div className={tcn('ml-2 flex items-center gap-1', className)}>\r\n            <p>{t.EMAIL.email_queue_sort_by_label('')}</p>\r\n            <SemanticButton\r\n                className=\"ml-2\"\r\n                icon={sorting.direction === 'asc' ? 'caret up' : 'caret down'}\r\n                onClick={handleSortingDirectionChange}\r\n                basic\r\n                size=\"mini\"\r\n            />\r\n            <Dropdown\r\n                inline\r\n                options={options}\r\n                onChange={handleSortingFieldChange}\r\n                value={sorting.field}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {personalPaginationAtom, personalSortingAtom} from '../atoms'\r\nimport {Pagination} from '../Pagination'\r\nimport {SortingControls} from '../SortingControls'\r\nimport {useSortingOptions} from './useSortingOptions'\r\n\r\n\r\ninterface TableHeaderContentProps {\r\n    noData: boolean\r\n    actualQueueCount: number\r\n    totalQueueCount: number | undefined\r\n}\r\n\r\nexport const TableHeaderContent: FC<TableHeaderContentProps> = ({\r\n    actualQueueCount,\r\n    totalQueueCount,\r\n    noData,\r\n}) => {\r\n    const sortingOptions = useSortingOptions()\r\n\r\n    if (noData) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between\">\r\n            <SortingControls\r\n                sortingAtom={personalSortingAtom}\r\n                options={sortingOptions}\r\n            />\r\n            <Pagination\r\n                paginationAtom={personalPaginationAtom}\r\n                actualQueueCount={actualQueueCount}\r\n                totalQueueCount={totalQueueCount}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {DropdownItemProps} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSortingOptions(): DropdownItemProps[] {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        return [\r\n            {value: 'createTime', text: t.EMAIL.email_queue_field_createTime()},\r\n            {value: 'updateTime', text: t.EMAIL.email_queue_field_updateTime()},\r\n            {value: 'customerUpdate', text: t.EMAIL.email_queue_field_customerUpdate()},\r\n            {value: 'sla', text: t.EMAIL.email_queue_field_serviceLevel()},\r\n            {value: 'from', text: t.EMAIL.email_queue_field_from()},\r\n            {value: 'subject', text: t.EMAIL.email_queue_field_subject()},\r\n            {value: 'flag', text: t.EMAIL.email_queue_field_flag()},\r\n        ]\r\n    }, [t.EMAIL])\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface SlaProps {\r\n    value: number | undefined\r\n}\r\n\r\nexport const Sla: FC<SlaProps> = ({value}) => {\r\n    if (value === undefined || value < 0) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex gap-0.5\">\r\n            {Array.from({length: 5}).map((_, index) => {\r\n                const isFilled = index * 20 < value\r\n                return (\r\n                    <span\r\n                        key={index}\r\n                        className={tcn('h-2 w-2 rounded-sm border border-icon', {\r\n                            'bg-icon': isFilled,\r\n                        })}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Sla} from './Sla'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useBasicColumns() {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.accessor(row => row.from || t.GLOBAL.heading_unknown(), {\r\n            id: 'from',\r\n            header: () => null,\r\n            /** Setting size and minSize to 0 is a hack to use 'auto' for the width */\r\n            size: 0,\r\n            minSize: 0,\r\n\r\n            cell: info => (\r\n                <>\r\n                    <p className=\"m-0 truncate\">{info.getValue()}</p>\r\n                    <p className=\"m-0 truncate\">{info.row.original.subject}</p>\r\n                </>\r\n            ),\r\n        }),\r\n        columnHelper.accessor('serviceName', {\r\n            id: 'serviceName',\r\n            header: () => null,\r\n            cell: info => <p className=\"m-0\">{info.getValue()}</p>,\r\n            size: 90,\r\n        }),\r\n        columnHelper.accessor(row => row.date && formatDate(row.date), {\r\n            id: 'date',\r\n            header: () => null,\r\n            cell: info => <p className=\"m-0\">{info.getValue()}</p>,\r\n            size: 120,\r\n        }),\r\n        columnHelper.accessor('sla', {\r\n            id: 'sla',\r\n            header: () => null,\r\n            cell: info => <Sla value={info.getValue()} />,\r\n            size: 70,\r\n        }),\r\n    ], [t.GLOBAL])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useBasicColumns} from '../useBasicColumns'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useColumns() {\r\n    const basicColumns = useBasicColumns()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: table.getIsAllRowsSelected(),\r\n                            indeterminate: table.getIsSomeRowsSelected(),\r\n                            onChange: checked =>\r\n                                table.toggleAllPageRowsSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            cell: ({row}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: row.getIsSelected(),\r\n                            disabled: !row.getCanSelect(),\r\n                            indeterminate: row.getIsSomeSelected(),\r\n                            onChange: checked =>\r\n                                row.toggleSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            size: 38,\r\n        }),\r\n        ...basicColumns,\r\n    ], [basicColumns])\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmModal} from '@bpinc/lib-external-ui-elements'\r\nimport {Help} from '@bpinc/lib-help-ui'\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\nexport const HelpModal: React.FC<CommonModalProps> = ({onClose, ...restProps}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <Modal\r\n            size=\"small\"\r\n            onClose={onClose}\r\n            aria-labelledby=\"helpModal\"\r\n            data-testid=\"help-modal\"\r\n            {...restProps}\r\n        >\r\n            <SmModal.Header id=\"helpModal\" role=\"heading\">\r\n                {t.GLOBAL.help()}\r\n            </SmModal.Header>\r\n            <SmModal.Content>\r\n                <Help />\r\n            </SmModal.Content>\r\n            <SmModal.Actions>\r\n                <SemanticButton\r\n                    enabledInOffline\r\n                    onClick={() => onClose()}\r\n                    data-testid=\"cancel-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SemanticButton>\r\n            </SmModal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function useSelectedRows(activeQueueItemAtom: PrimitiveAtom<QueueItem | undefined>, table: Table<QueueItem>) {\r\n    const rowSelectedByClick = useAtomValue(activeQueueItemAtom)\r\n    const selectedRows = table.getSelectedRowModel().rows\r\n\r\n    return useMemo(() => {\r\n        const rowsSelectedByCheckbox = selectedRows.map(r => r.original)\r\n\r\n        if (rowsSelectedByCheckbox.length) {\r\n            return rowsSelectedByCheckbox\r\n        }\r\n\r\n        if (rowSelectedByClick) {\r\n            return [rowSelectedByClick]\r\n        }\r\n\r\n        return []\r\n    }, [rowSelectedByClick, selectedRows])\r\n\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useAgentState, useAgentStateMethods} from '@bpinc/ad-agent-state-context'\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useOpenEmailBySupervisorWarningModal} from '@bpinc/ad-modals-ui'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {IconForward} from '@bpinc/lib-icons'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {useSelectedRows} from '../../useSelectedRow'\r\nimport {AssignEmailModal} from '../AssignEmailModal'\r\nimport {personalActiveQueueItemAtom, personalTabUserAtom} from '../atoms'\r\nimport {useCreateNoteMutation} from '../mutations'\r\nimport {UserSelect} from '../UserSelect'\r\n\r\n\r\nexport function usePersonalControls(table: Table<QueueItem>) {\r\n    const {t} = useLocalizationState()\r\n    const isSupervisor = useSessionState('isSupervisor')\r\n    const selectedRows = useSelectedRows(personalActiveQueueItemAtom, table)\r\n    const {moveQueueItems, createCaseEmail} = useCaseStateMethods()\r\n    const {notReadyReasons, selectedAgentStateOption} = useAgentState()\r\n    const {setState} = useAgentStateMethods()\r\n    const openEmailBySupervisorWarningModal =\r\n        useOpenEmailBySupervisorWarningModal()\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    const moveQItemToQ = useCallback(\r\n        function handleGrabCallback() {\r\n            assertDefined(selfUserId)\r\n            moveQueueItems({\r\n                itemsToMove: selectedRows,\r\n                directions: {\r\n                    toQueueType: 'TEAM',\r\n                    fromQueueType: 'PERSONAL',\r\n                    fromUserId: selfUserId,\r\n                },\r\n            })\r\n            table.resetRowSelection()\r\n        },\r\n        [moveQueueItems, selectedRows, selfUserId, table],\r\n    )\r\n\r\n    const handleComposeEmail = useCallback(\r\n        function handleComposeEmailCallback() {\r\n            const isSupervisionState = selectedAgentStateOption?.state === ''\r\n            if (isSupervisionState) {\r\n                openEmailBySupervisorWarningModal({\r\n                    okAction: changeAgentStateAndCreateEmail,\r\n                })\r\n            } else {\r\n                createCaseEmail()\r\n            }\r\n\r\n            function changeAgentStateAndCreateEmail() {\r\n                setState({state: 'not_ready', reason: notReadyReasons?.[0]})\r\n                createCaseEmail()\r\n            }\r\n        },\r\n        [\r\n            selectedAgentStateOption?.state,\r\n            openEmailBySupervisorWarningModal,\r\n            createCaseEmail,\r\n            setState,\r\n            notReadyReasons,\r\n        ],\r\n    )\r\n\r\n    const [user, setUser] = useAtom(personalTabUserAtom)\r\n    const openAssignEmailModal = useModalComponentOpener(AssignEmailModal)\r\n    const {mutate: createNote} = useCreateNoteMutation()\r\n    const handleAssignEmail = useCallback(() => {\r\n        openAssignEmailModal({\r\n            queueItemsToMove: selectedRows,\r\n            fromUserId: user.id,\r\n            createNote,\r\n        })\r\n    }, [createNote, openAssignEmailModal, selectedRows, user.id])\r\n\r\n    return useMemo(\r\n        function memoizeControls() {\r\n            return (\r\n                <div className=\"flex justify-between px-2 pb-2 pt-3\">\r\n                    <div className=\"flex\">\r\n                        {isSupervisor && (\r\n                            <SemanticButton\r\n                                icon\r\n                                basic\r\n                                onClick={handleAssignEmail}\r\n                                tooltip={t.EMAIL.email_assign_button_tooltip()}\r\n                            >\r\n                                <IconForward />\r\n                            </SemanticButton>\r\n                        )}\r\n                        <SemanticButton onClick={moveQItemToQ} primary basic>\r\n                            {t.EMAIL.email_move_to_team_queue_button_tooltip()}\r\n                        </SemanticButton>\r\n                    </div>\r\n                    <UserSelect\r\n                        user={user}\r\n                        setUser={setUser}\r\n                    />\r\n                    <SemanticButton\r\n                        basic\r\n                        onClick={handleComposeEmail}\r\n                        tooltip={t.ADDRESS_BOOK_AREA.addressBook_button_email_tooltip()}\r\n                        icon=\"envelope\"\r\n                    />\r\n                </div>\r\n            )\r\n        },\r\n        [handleAssignEmail, handleComposeEmail, isSupervisor, moveQItemToQ, setUser, t.ADDRESS_BOOK_AREA, t.EMAIL, user],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype OpenEmailBySupervisorWarningModalParams = { okAction: () => void}\r\n\r\nexport function useOpenEmailBySupervisorWarningModal() {\r\n    const {t} = useLocalizationState()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const openEmailBySupervisorWarningModal = useCallback(\r\n        function openEmailBySupervisorWarningModalCallback({okAction}: OpenEmailBySupervisorWarningModalParams) {\r\n            openModal({\r\n                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                body: t.WINDOW_POPUP_TITLES_AND_MESSAGES.openingEmailFromSupervisingStateConfirmation(),\r\n                actions: {\r\n                    ok: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        action: okAction,\r\n                    },\r\n                    cancel: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                    },\r\n                },\r\n                className: 'autoSizeModal',\r\n            })\r\n        },\r\n        [openModal, t.WINDOW_POPUP_TITLES_AND_MESSAGES],\r\n    )\r\n\r\n    return openEmailBySupervisorWarningModal\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {getCoreRowModel, useReactTable} from '@tanstack/react-table'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {usePersonalQueueQuery} from '../../../queries'\r\nimport type {SpecificTabProps} from '../../types'\r\nimport {personalActiveQueueItemAtom, personalPaginationAtom, personalSortingAtom, personalTabUserAtom} from '../atoms'\r\nimport {CaseTab} from '../CaseTab'\r\nimport {PersonalCaseFooterContent} from './PersonalCaseFooterContent'\r\nimport {TableHeaderContent} from './TableHeaderContent'\r\nimport {useColumns} from './useColumns'\r\nimport {usePersonalControls} from './usePersonalControls'\r\n\r\n\r\nconst initialData: QueueItem[] = []\r\n\r\nexport const PersonalTab: FC<SpecificTabProps> = props => {\r\n    const sorting = useAtomValue(personalSortingAtom)\r\n    const pagination = useAtomValue(personalPaginationAtom)\r\n    const user = useAtomValue(personalTabUserAtom)\r\n    const {data, isFetched} = usePersonalQueueQuery({\r\n        length: pagination.size,\r\n        skip: pagination.skip,\r\n        sortBy: sorting.field,\r\n        user: user.id,\r\n        asc: sorting.direction === 'asc',\r\n    })\r\n\r\n    const noData = isFetched && !data?.length\r\n\r\n    const table = useReactTable({\r\n        columns: useColumns(),\r\n        data: data || initialData,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getRowId: row => row.caseId,\r\n    })\r\n\r\n    const QueueControls = usePersonalControls(table)\r\n    return (\r\n        <CaseTab\r\n            table={table}\r\n            noData={noData}\r\n            CaseFooterContent={<PersonalCaseFooterContent canViewCase />}\r\n            TableHeaderContent={\r\n                <TableHeaderContent\r\n                    noData={noData}\r\n                    actualQueueCount={data?.length ?? 0}\r\n                    totalQueueCount={props.totalQueueCount}\r\n                />\r\n            }\r\n            QueueControls={QueueControls}\r\n            queueItems={data}\r\n            activeQueueItemAtom={personalActiveQueueItemAtom}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import {keepPreviousData, useQuery} from '@tanstack/react-query'\r\n\r\nimport type {DefaultService} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\ntype PersonalQueueQueryParams = Parameters<typeof DefaultService.getPersonalQueue>[0]\r\n\r\nexport function usePersonalQueueQuery(params: PersonalQueueQueryParams = {\r\n    length: 100,\r\n    skip: 0,\r\n}) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n    return useQuery({\r\n        queryKey: queryKeys.queue('PERSONAL', params),\r\n        queryFn: () => apiRequests(serverOrigin).getPersonalQueue(params),\r\n        refetchInterval: 20_000,\r\n        placeholderData: keepPreviousData,\r\n    })\r\n}\r\n","import React, {type FC, useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {pinnedActiveQueueItemAtom} from '../atoms'\r\nimport {ViewButton} from '../ViewButton'\r\n\r\n\r\ninterface PinnedCaseFooterContentProps {\r\n    canViewCase?: boolean\r\n}\r\n\r\nexport const PinnedCaseFooterContent: FC<PinnedCaseFooterContentProps> = ({\r\n    canViewCase,\r\n}) => {\r\n    const queueItem = useAtomValue(pinnedActiveQueueItemAtom)\r\n    const {caseId, queueId, queueType} = queueItem ?? {}\r\n    const {t} = useLocalizationState()\r\n    const {openCase} = useCaseStateMethods()\r\n\r\n    const handleOpen = useCallback(\r\n        function handleOpenCallback() {\r\n            assertDefined(queueId)\r\n            assertDefined(caseId)\r\n\r\n            openCase({\r\n                caseId,\r\n                queueId,\r\n                queueType,\r\n            })\r\n        },\r\n        [queueId, caseId, openCase, queueType],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {queueItem && canViewCase && <ViewButton queueItem={queueItem} />}\r\n            <SemanticButton basic primary onClick={handleOpen}>\r\n                {t.EMAIL.email_open_button()}\r\n            </SemanticButton>\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {pinnedSortingAtom} from '../atoms'\r\nimport {SortingControls} from '../SortingControls'\r\nimport {useSortingOptions} from './useSortingOptions'\r\n\r\n\r\ninterface TableHeaderContentProps {\r\n    noData: boolean\r\n}\r\nexport const TableHeaderContent: FC<TableHeaderContentProps> = ({noData}) => {\r\n    const sortingOptions = useSortingOptions()\r\n\r\n    if (!noData) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <SortingControls\r\n            className=\"justify-self-end\"\r\n            sortingAtom={pinnedSortingAtom}\r\n            options={sortingOptions}\r\n        />\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {DropdownItemProps} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSortingOptions(): DropdownItemProps[] {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        return [\r\n            {value: 'createTime', text: t.EMAIL.email_queue_field_createTime()},\r\n            {value: 'updateTime', text: t.EMAIL.email_queue_field_updateTime()},\r\n            {value: 'customerUpdate', text: t.EMAIL.email_queue_field_customerUpdate()},\r\n            {value: 'from', text: t.EMAIL.email_queue_field_from()},\r\n            {value: 'subject', text: t.EMAIL.email_queue_field_subject()},\r\n        ]\r\n    }, [t.EMAIL])\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {getCoreRowModel, useReactTable} from '@tanstack/react-table'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {usePinnedCasesQuery} from '../../../queries'\r\nimport type {SpecificTabProps} from '../../types'\r\nimport {PAGINATION_CHUNK_SIZE, pinnedActiveQueueItemAtom, pinnedSortingAtom} from '../atoms'\r\nimport {CaseTab} from '../CaseTab'\r\nimport {useBasicColumns} from '../useBasicColumns'\r\nimport {PinnedCaseFooterContent} from './PinnedCaseFooterContent'\r\nimport {TableHeaderContent} from './TableHeaderContent'\r\n\r\n\r\nconst initialData: QueueItem[] = []\r\n\r\nexport const PinnedTab: FC<SpecificTabProps> = props => {\r\n    const sorting = useAtomValue(pinnedSortingAtom)\r\n\r\n    const {data, isFetched} = usePinnedCasesQuery({\r\n        limit: PAGINATION_CHUNK_SIZE,\r\n        sortBy: sorting.field,\r\n        asc: sorting.direction === 'asc',\r\n    })\r\n\r\n    const noData = isFetched && !data?.length\r\n\r\n    const table = useReactTable({\r\n        columns: useBasicColumns(),\r\n        data: data || initialData,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getRowId: row => row.caseId,\r\n    })\r\n\r\n    return (\r\n        <CaseTab\r\n            noSelection\r\n            noData={noData}\r\n            table={table}\r\n            CaseFooterContent={<PinnedCaseFooterContent canViewCase />}\r\n            TableHeaderContent={<TableHeaderContent noData={noData} />}\r\n            activeQueueItemAtom={pinnedActiveQueueItemAtom}\r\n            queueItems={data}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import {keepPreviousData, useQuery} from '@tanstack/react-query'\r\n\r\nimport type {DefaultService} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\ntype PinnedCasesQueryParams = Parameters<typeof DefaultService.getPinnedCases>[0]\r\n\r\nexport function usePinnedCasesQuery(params: PinnedCasesQueryParams = {\r\n    limit: 100,\r\n}) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n    return useQuery({\r\n        queryKey: queryKeys.queue('FOLLOWUP', params),\r\n        placeholderData: keepPreviousData,\r\n        queryFn: () => apiRequests(serverOrigin).getPinnedCases(params),\r\n        refetchInterval: 20_000,\r\n    })\r\n}\r\n","import {useCallback} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport produce from 'immer'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nexport function useCloseAsSpamHandler(queueItems: QueueItem[], table?: Table<QueueItem>) {\r\n    const {openModal} = useModalsStateMethods()\r\n    const {closeCasesAsSpam} = useCaseStateMethods()\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback(\r\n        function handleCloseAsSpamCallback() {\r\n            const selectedItemsCount = queueItems?.length ?? 0\r\n\r\n            if (!selectedItemsCount) {\r\n                return\r\n            }\r\n\r\n            openModal({\r\n                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                body:\r\n                selectedItemsCount > 1\r\n                    ? t.EMAIL.spam_confirm_message_multiple(selectedItemsCount.toString())\r\n                    : t.EMAIL.spam_confirm_message_single(queueItems[0].caseNumber ?? ''),\r\n                actions: {\r\n                    ok: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        action: handleOk,\r\n                    },\r\n                    cancel: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                    },\r\n                },\r\n                className: 'autoSizeModal',\r\n            })\r\n\r\n            function handleOk() {\r\n                closeCasesAsSpam(queueItems.map(s => s.caseId), 'TEAM')\r\n                unselectItems()\r\n\r\n                function unselectItems() {\r\n                    table?.setRowSelection(produce(draft => {\r\n                        queueItems.forEach(q => {\r\n                            delete draft[q.caseId]\r\n                        })\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        [closeCasesAsSpam, openModal, queueItems, t.EMAIL, t.WINDOW_POPUP_TITLES_AND_MESSAGES, table],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport produce from 'immer'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nexport function useDeleteCaseHandler(\r\n    queueItems: QueueItem[],\r\n    table?: Table<QueueItem>,\r\n) {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const {deleteCases} = useCaseStateMethods()\r\n\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    return useCallback(\r\n        function handleDeleteCallback() {\r\n            const selectedItemsCount = queueItems.length\r\n\r\n            if (!privileges.SYS_DELETE_CASES || !selectedItemsCount) {\r\n                return\r\n            }\r\n\r\n            openModal({\r\n                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                body:\r\n                    selectedItemsCount > 1\r\n                        ? t.EMAIL.trash_confirm_message_multiple(\r\n                            selectedItemsCount.toString(),\r\n                        )\r\n                        : t.EMAIL.trash_confirm_message_single(\r\n                            queueItems[0].caseNumber ?? '',\r\n                        ),\r\n                actions: {\r\n                    ok: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        action: handleOk,\r\n                    },\r\n                    cancel: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                    },\r\n                },\r\n                className: 'autoSizeModal',\r\n            })\r\n\r\n            function handleOk() {\r\n                deleteCases(\r\n                    queueItems.map(v => v.caseId),\r\n                    'TEAM',\r\n                )\r\n                table?.resetRowSelection()\r\n\r\n                unselectItems()\r\n\r\n                function unselectItems() {\r\n                    table?.setRowSelection(\r\n                        produce(draft => {\r\n                            queueItems.forEach(q => {\r\n                                delete draft[q.caseId]\r\n                            })\r\n                        }),\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        [\r\n            deleteCases,\r\n            openModal,\r\n            privileges.SYS_DELETE_CASES,\r\n            queueItems,\r\n            t.EMAIL,\r\n            t.WINDOW_POPUP_TITLES_AND_MESSAGES,\r\n            table,\r\n        ],\r\n    )\r\n}\r\n","import React, {type FC, useCallback} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {teamActiveQueueItemAtom} from '../atoms'\r\nimport {SetCaseStatusButton} from '../SetCaseStatusButton'\r\nimport {ViewButton} from '../ViewButton'\r\nimport {useCloseAsSpamHandler} from './useCloseAsSpamHandler'\r\nimport {useDeleteCaseHandler} from './useDeleteCaseHandler'\r\n\r\n\r\ninterface TeamCaseFooterContentProps {\r\n    table?: Table<QueueItem>\r\n    canViewCase?: boolean\r\n}\r\n\r\nexport const TeamCaseFooterContent: FC<TeamCaseFooterContentProps> = ({table, canViewCase}) => {\r\n    const {userId: selfUserId, privileges} = useSessionState([\r\n        'userId',\r\n        'privileges',\r\n    ])\r\n    const activeQueueItem = useAtomValue(teamActiveQueueItemAtom)\r\n    const {caseId, queueId, queueType} = activeQueueItem ?? {}\r\n    const {t} = useLocalizationState()\r\n    const {openCase, moveQueueItems} = useCaseStateMethods()\r\n\r\n    const handleOpen = useCallback(() => {\r\n        assertDefined(queueId)\r\n        assertDefined(caseId)\r\n\r\n        openCase({\r\n            caseId,\r\n            queueId,\r\n            queueType,\r\n        })\r\n    }, [queueId, queueType, caseId, openCase])\r\n\r\n    const handleGrab = useCallback(() => {\r\n        assertDefined(activeQueueItem)\r\n        assertDefined(selfUserId)\r\n\r\n        moveQueueItems({\r\n            itemsToMove: [activeQueueItem],\r\n            directions: {\r\n                toQueueType: 'PERSONAL',\r\n                fromQueueType: 'TEAM',\r\n                toUserId: selfUserId,\r\n            },\r\n        })\r\n    }, [activeQueueItem, moveQueueItems, selfUserId])\r\n\r\n    assertDefined(activeQueueItem)\r\n    const handleDelete = useDeleteCaseHandler([activeQueueItem], table)\r\n    const handleCloseAsSpam = useCloseAsSpamHandler([activeQueueItem], table)\r\n    const caseItem = useCaseState(s =>\r\n        caseId ? s.cases[caseId]?.data : undefined,\r\n    )\r\n    const caseStatus = caseItem?.status\r\n    const pendingReasonsId = caseItem?.pendingReasonId\r\n    assertDefined(caseStatus)\r\n    assertDefined(caseId)\r\n    assertDefined(activeQueueItem.service)\r\n\r\n    return (\r\n        <div className=\"flex w-full flex-wrap justify-between gap-y-2\">\r\n            <div className=\"flex flex-wrap gap-y-2\">\r\n                {canViewCase && <ViewButton queueItem={activeQueueItem} />}\r\n                <SemanticButton basic primary onClick={handleOpen}>\r\n                    {t.EMAIL.email_open_button()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    basic\r\n                    primary\r\n                    tooltip={t.EMAIL.email_grab_button_tooltip()}\r\n                    onClick={handleGrab}\r\n                >\r\n                    {t.EMAIL.email_grab_button()}\r\n                </SemanticButton>\r\n                <SemanticButton\r\n                    basic\r\n                    color=\"orange\"\r\n                    onClick={handleCloseAsSpam}\r\n                >\r\n                    {t.EMAIL.button_spam_text()}\r\n                </SemanticButton>\r\n                {privileges.SYS_DELETE_CASES && (\r\n                    <SemanticButton\r\n                        basic\r\n                        color=\"red\"\r\n                        onClick={handleDelete}\r\n                        icon=\"trash\"\r\n                        tooltip={t.EMAIL.button_trash_tooltip()}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div>\r\n                <SetCaseStatusButton\r\n                    key={caseId}\r\n                    caseId={caseId}\r\n                    initialPendingReasonId={pendingReasonsId}\r\n                    service={activeQueueItem.service}\r\n                    initialStatus={caseStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useDefaultServicesByPrivileges} from './useDefaultServicesByPrivileges'\r\n\r\n\r\nexport function useDefaultQueueServiceOptionsByPrivileges() {\r\n    const {t} = useLocalizationState()\r\n\r\n    const localizations = useMemo(() => ({\r\n        all: t.EMAIL.email_teamQueue_allServices(),\r\n        router: t.EMAIL.email_teamQueue_allPullServices(),\r\n        team: t.EMAIL.email_teamQueue_allPushServices(),\r\n    }), [t.EMAIL])\r\n\r\n    const servicesByPrivileges = useDefaultServicesByPrivileges()\r\n    return useMemo(() => {\r\n        return ['all' as const, ...servicesByPrivileges].map(value => ({\r\n            value,\r\n            text: localizations[value],\r\n            'data-testid': 'option',\r\n            'data-service': 'true',\r\n        }))\r\n    }, [localizations, servicesByPrivileges])\r\n\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useDefaultServicesByPrivileges() {\r\n    const privileges = useSessionState('privileges')\r\n\r\n    return useMemo(() => {\r\n        if (privileges.CAN_SEE_CONTENTS_OF_EMAIL_PUSH_QUEUES) {\r\n            return ['router', 'team'] as const\r\n        }\r\n        return []\r\n    }, [privileges.CAN_SEE_CONTENTS_OF_EMAIL_PUSH_QUEUES])\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useQueueCountByServiceQuery} from '../../../queries'\r\nimport {useDefaultQueueServiceOptionsByPrivileges} from '../../useDefaultQueueServiceOptionsByPrivileges'\r\nimport {useEmailServicesOptions} from '../../useEmailServicesOptions'\r\nimport {serviceFilterAtom, teamPaginationAtom, teamSortingAtom} from '../atoms'\r\nimport {Pagination} from '../Pagination'\r\nimport {SortingControls} from '../SortingControls'\r\nimport {useSortingOptions} from './useSortingOptions'\r\n\r\n\r\ninterface TableHeaderContentProps {\r\n    actualQueueCount: number\r\n    totalQueueCount: number | undefined\r\n    noData: boolean\r\n}\r\n\r\nexport const TableHeaderContent: FC<TableHeaderContentProps> = ({\r\n    actualQueueCount,\r\n    totalQueueCount,\r\n    noData,\r\n}) => {\r\n    const optionsByPrivileges = useDefaultQueueServiceOptionsByPrivileges()\r\n    const serviceOptions = useEmailServicesOptions()\r\n\r\n    const {data: queueCountByService, refetch} = useQueueCountByServiceQuery({\r\n        serviceIds: serviceOptions.map(o => o.value),\r\n    })\r\n\r\n    const finalServiceOptions = useMemo(() => {\r\n        return [...optionsByPrivileges, ...serviceOptions]\r\n            .filter(\r\n                option =>\r\n                    option.value === 'all' ||\r\n                    queueCountByService?.[option.value],\r\n            )\r\n            .map(option => {\r\n                const count = queueCountByService?.[option.value]\r\n                return {\r\n                    ...option,\r\n                    text: count ? `${option.text} (${count})` : option.text,\r\n                }\r\n            })\r\n    }, [optionsByPrivileges, queueCountByService, serviceOptions])\r\n\r\n    const [serviceFilter, setServiceFilter] = useAtom(serviceFilterAtom)\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const sortingOptions = useSortingOptions()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between\">\r\n            <div className=\"ml-2 flex items-center\">\r\n                <p className=\"mr-1\">\r\n                    {t.EMAIL.email_teamQueue_service_label()}\r\n                </p>\r\n                <Dropdown\r\n                    onOpen={refetch}\r\n                    options={finalServiceOptions}\r\n                    inline\r\n                    value={serviceFilter}\r\n                    onChange={(_event, data) => {\r\n                        if (typeof data.value === 'string') {\r\n                            setServiceFilter(data.value)\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            {!noData && (\r\n                <SortingControls\r\n                    sortingAtom={teamSortingAtom}\r\n                    options={sortingOptions}\r\n                />\r\n            )}\r\n            {!noData && (\r\n                <Pagination\r\n                    paginationAtom={teamPaginationAtom}\r\n                    actualQueueCount={actualQueueCount}\r\n                    totalQueueCount={totalQueueCount}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport type {DefaultService} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\ntype QueueCountQueryParams = Parameters<typeof DefaultService.getQueueCountByService>[0]\r\n\r\nexport function useQueueCountByServiceQuery(params: QueueCountQueryParams = {}) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    return useQuery({\r\n        queryKey: queryKeys.queueCountByService(),\r\n        queryFn: () => apiRequests(serverOrigin).getQueueCountByService(params),\r\n    })\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {DropdownItemProps} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSortingOptions(): DropdownItemProps[] {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        return [\r\n            {value: 'createTime', text: t.EMAIL.email_queue_field_createTime()},\r\n            {value: 'updateTime', text: t.EMAIL.email_queue_field_updateTime()},\r\n            {value: 'customerUpdate', text: t.EMAIL.email_queue_field_customerUpdate()},\r\n            {value: 'sla', text: t.EMAIL.email_queue_field_serviceLevel()},\r\n            {value: 'from', text: t.EMAIL.email_queue_field_from()},\r\n            {value: 'subject', text: t.EMAIL.email_queue_field_subject()},\r\n            {value: 'flag', text: t.EMAIL.email_queue_field_flag()},\r\n        ]\r\n    }, [t.EMAIL])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useBasicColumns} from '../useBasicColumns'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useColumns() {\r\n    const basicColumns = useBasicColumns()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: table.getIsAllRowsSelected(),\r\n                            indeterminate: table.getIsSomeRowsSelected(),\r\n                            onChange: checked =>\r\n                                table.toggleAllPageRowsSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            cell: ({row}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: row.getIsSelected(),\r\n                            disabled: !row.getCanSelect(),\r\n                            indeterminate: row.getIsSomeSelected(),\r\n                            onChange: checked =>\r\n                                row.toggleSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            size: 38,\r\n        }),\r\n        ...basicColumns,\r\n    ], [basicColumns])\r\n}\r\n","import React, {type FC, useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {DirectoryObject} from '@bpinc/ad-directory-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\n\r\nimport {teamIdAtom} from '../atoms'\r\n\r\n\r\ninterface TeamSelectorProps {\r\n    teams: DirectoryObject[]\r\n}\r\n\r\nexport const TeamSelector: FC<TeamSelectorProps> = ({teams}) => {\r\n    const selfTeamId = useSessionState('teamId')\r\n    const [teamId, setTeamId] = useAtom(teamIdAtom)\r\n\r\n    const options = useMemo(() => {\r\n        return teams.filter(team => team.supervised || team.id === selfTeamId).map(team => ({\r\n            key: team.id,\r\n            text: team.name,\r\n            value: team.id,\r\n        }))\r\n    }, [selfTeamId, teams])\r\n\r\n    if (options.length < 2) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Dropdown\r\n            className=\"ml-2\"\r\n            options={options}\r\n            onChange={(_evt, data) => {\r\n                if (typeof data.value === 'string') {\r\n                    setTeamId(data.value)\r\n                }\r\n            }}\r\n            value={teamId || selfTeamId}\r\n            inline\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {getCoreRowModel, useReactTable} from '@tanstack/react-table'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {useTeamQueueQuery} from '../../../queries'\r\nimport type {SpecificTabProps} from '../../types'\r\nimport {\r\n    serviceFilterAtom,\r\n    teamActiveQueueItemAtom,\r\n    teamIdAtom,\r\n    teamPaginationAtom,\r\n    teamSortingAtom,\r\n} from '../atoms'\r\nimport {CaseTab} from '../CaseTab'\r\nimport {TableHeaderContent} from './TableHeaderContent'\r\nimport {TeamCaseFooterContent} from './TeamCaseFooterContent'\r\nimport {useColumns} from './useColumns'\r\nimport {useTeamControls} from './useTeamControls'\r\n\r\n\r\nconst initialData: QueueItem[] = []\r\n\r\nexport const TeamTab: FC<SpecificTabProps> = props => {\r\n    const teamId = useAtomValue(teamIdAtom)\r\n    const serviceFilter = useAtomValue(serviceFilterAtom)\r\n    const sorting = useAtomValue(teamSortingAtom)\r\n    const pagination = useAtomValue(teamPaginationAtom)\r\n    const {data, isFetched} = useTeamQueueQuery({\r\n        services: !serviceFilter || serviceFilter === 'all' ? undefined : [serviceFilter],\r\n        team: teamId,\r\n        length: pagination.size,\r\n        skip: pagination.skip,\r\n        sortBy: sorting.field,\r\n        asc: sorting.direction === 'asc',\r\n    })\r\n\r\n    const noData = isFetched && !data?.length\r\n\r\n    const table = useReactTable({\r\n        columns: useColumns(),\r\n        data: data || initialData,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getRowId: row => row.caseId,\r\n    })\r\n\r\n    const QueueControls = useTeamControls(table)\r\n    return (\r\n        <CaseTab\r\n            noData={noData}\r\n            CaseFooterContent={<TeamCaseFooterContent table={table} canViewCase />}\r\n            TableHeaderContent={\r\n                <TableHeaderContent\r\n                    actualQueueCount={data?.length ?? 0}\r\n                    noData={noData}\r\n                    totalQueueCount={props.totalQueueCount}\r\n                />\r\n            }\r\n            table={table}\r\n            queueItems={data}\r\n            QueueControls={QueueControls}\r\n            activeQueueItemAtom={teamActiveQueueItemAtom}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import {keepPreviousData, useQuery} from '@tanstack/react-query'\r\n\r\nimport type {DefaultService} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\ntype TeamQueueQueryParams = Parameters<typeof DefaultService.getTeamQueue>[0]\r\n\r\nexport function useTeamQueueQuery(params: TeamQueueQueryParams = {\r\n    skip: 0,\r\n    length: 100,\r\n}) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    return useQuery({\r\n        queryKey: queryKeys.queue('TEAM', params),\r\n        queryFn: () => apiRequests(serverOrigin).getTeamQueue(params),\r\n        placeholderData: keepPreviousData,\r\n        refetchInterval: 20_000,\r\n    })\r\n}\r\n","import React, {useCallback, useEffect, useMemo} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useDirectoryState, useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {IconForward} from '@bpinc/lib-icons'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {useSelectedRows} from '../../useSelectedRow'\r\nimport {AssignEmailModal} from '../AssignEmailModal'\r\nimport {teamActiveQueueItemAtom, teamIdAtom} from '../atoms'\r\nimport {useCreateNoteMutation} from '../mutations'\r\nimport {TeamSelector} from './TeamSelector'\r\nimport {useCloseAsSpamHandler} from './useCloseAsSpamHandler'\r\nimport {useDeleteCaseHandler} from './useDeleteCaseHandler'\r\n\r\n\r\nexport function useTeamControls(table: Table<QueueItem>) {\r\n    const {t} = useLocalizationState()\r\n    const selfTeamId = useSessionState('teamId')\r\n    const teamId = useAtomValue(teamIdAtom) || selfTeamId\r\n\r\n    const {teams, isTeamsLoading} = useDirectoryState([\r\n        'teams',\r\n        'isTeamsLoading',\r\n    ])\r\n\r\n    const {getAgentTeams} = useDirectoryStateMethods()\r\n\r\n    //TODO: Find the better place for this hook\r\n    useEffect(() => {\r\n        if (!isTeamsLoading && !teams.length) {\r\n            getAgentTeams()\r\n        }\r\n    }, [teams, isTeamsLoading, getAgentTeams])\r\n\r\n    const currentTeamIsSupervised = useMemo(() => {\r\n        return teams.find(team => team.id === teamId)?.supervised\r\n    }, [teamId, teams])\r\n\r\n    const selectedRows = useSelectedRows(teamActiveQueueItemAtom, table)\r\n    const {moveQueueItems} = useCaseStateMethods()\r\n\r\n    const {userId: selfUserId, privileges} = useSessionState()\r\n\r\n    const handleGrab = useCallback(\r\n        function handleGrabCallback() {\r\n            assertDefined(selfUserId)\r\n            moveQueueItems({\r\n                directions: {\r\n                    fromQueueType: 'TEAM',\r\n                    toQueueType: 'PERSONAL',\r\n                    toUserId: selfUserId,\r\n                },\r\n                itemsToMove: selectedRows,\r\n            })\r\n            table.resetRowSelection()\r\n        },\r\n        [moveQueueItems, selectedRows, selfUserId, table],\r\n    )\r\n\r\n    const handleDelete = useDeleteCaseHandler(selectedRows, table)\r\n    const handleCloseAsSpam = useCloseAsSpamHandler(selectedRows, table)\r\n\r\n    const {mutate: createNote} = useCreateNoteMutation()\r\n\r\n    const openAssignEmailModal = useModalComponentOpener(AssignEmailModal)\r\n    const handleAssignEmail = useCallback(() => {\r\n        openAssignEmailModal({\r\n            queueItemsToMove: selectedRows,\r\n            createNote,\r\n        })\r\n    }, [createNote, openAssignEmailModal, selectedRows])\r\n\r\n    return useMemo(\r\n        function memoizeControls() {\r\n            return (\r\n                <div className=\"flex justify-between px-2 pb-2 pt-3\">\r\n                    <div className=\"flex\">\r\n                        {currentTeamIsSupervised && (\r\n                            <SemanticButton\r\n                                icon\r\n                                basic\r\n                                onClick={handleAssignEmail}\r\n                                tooltip={t.EMAIL.email_assign_button_tooltip()}\r\n                            >\r\n                                <IconForward />\r\n                            </SemanticButton>\r\n                        )}\r\n                        <SemanticButton basic primary onClick={handleGrab}>\r\n                            {t.EMAIL.email_grab_button()}\r\n                        </SemanticButton>\r\n                    </div>\r\n                    <div>\r\n                        <SemanticButton basic color=\"orange\" onClick={handleCloseAsSpam}>\r\n                            {t.EMAIL.button_spam_text()}\r\n                        </SemanticButton>\r\n                        {privileges.SYS_DELETE_CASES && (\r\n                            <SemanticButton\r\n                                basic\r\n                                color=\"red\"\r\n                                onClick={handleDelete}\r\n                                icon=\"trash\"\r\n                                tooltip={t.EMAIL.button_trash_tooltip()}\r\n                            />\r\n                        )}\r\n                        <TeamSelector teams={teams} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        },\r\n        [\r\n            currentTeamIsSupervised,\r\n            handleAssignEmail,\r\n            handleCloseAsSpam,\r\n            handleDelete,\r\n            handleGrab,\r\n            privileges.SYS_DELETE_CASES,\r\n            t.EMAIL,\r\n            teams,\r\n        ],\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useQueueCountInvalidator, useQueueCountQuery} from '../../queries'\r\nimport {useQueryManager} from '../../useQueryManager'\r\nimport {Case} from '../Case'\r\nimport {PersonalCaseFooterContent} from './PersonalTab/PersonalCaseFooterContent'\r\nimport {PersonalTab} from './PersonalTab/PersonalTab'\r\nimport {usePersonalTabName} from './PersonalTab/usePersonalTabName'\r\nimport {PinnedCaseFooterContent} from './PinnedTab/PinnedCaseFooterContent'\r\nimport {PinnedTab} from './PinnedTab/PinnedTab'\r\nimport {TeamCaseFooterContent} from './TeamTab/TeamCaseFooterContent'\r\nimport {TeamTab} from './TeamTab/TeamTab'\r\nimport {useTeamTabName} from './TeamTab/useTeamTabName'\r\nimport type {CaseTab} from './atoms'\r\nimport {\r\n    personalTabUserAtom,\r\n    selectedTabIdAtom,\r\n    serviceFilterAtom,\r\n    tabsAtom,\r\n    teamIdAtom,\r\n} from './atoms'\r\n\r\n\r\ntype CaseTabWithTitle = CaseTab & { title: string }\r\n\r\nexport const CasePageContent: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const [tabId, setTabId] = useAtom(selectedTabIdAtom)\r\n    const [tabs, setTabs] = useAtom(tabsAtom)\r\n    const user = useAtomValue(personalTabUserAtom)\r\n    const teamId = useAtomValue(teamIdAtom)\r\n    const serviceFilter = useAtomValue(serviceFilterAtom)\r\n\r\n    const {data: queueCount} = useQueueCountQuery({\r\n        team: teamId,\r\n        service: serviceFilter,\r\n        user: user.id,\r\n    })\r\n\r\n    useQueueCountInvalidator()\r\n\r\n    const teamTabName = useTeamTabName()\r\n    const personalTabName = usePersonalTabName()\r\n\r\n    const tabsWithTitle = useMemo(\r\n        function memoizeTabs() {\r\n            function insertCount(\r\n                label: string,\r\n                count = 0,\r\n                highlightedCount = 0,\r\n            ) {\r\n                if (highlightedCount) {\r\n                    return `${label} (${highlightedCount}/${count})`\r\n                }\r\n\r\n                return `${label} (${count})`\r\n            }\r\n\r\n            function getTitle(tab: CaseTab) {\r\n                switch (tab.type) {\r\n                    case 'queue': {\r\n                        switch (tab.queueType) {\r\n                            case 'TEAM':\r\n                                return insertCount(\r\n                                    teamTabName,\r\n                                    queueCount?.team,\r\n                                )\r\n                            case 'PERSONAL':\r\n                                return insertCount(\r\n                                    personalTabName,\r\n                                    queueCount?.personal,\r\n                                    queueCount?.personalHighlighted,\r\n                                )\r\n                            default:\r\n                                return insertCount(\r\n                                    t.EMAIL.emailFollowUpQueue_header(),\r\n                                    queueCount?.followUp,\r\n                                )\r\n                        }\r\n                    }\r\n                    case 'view_case': {\r\n                        return tab.case.number.toString()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return tabs.map(tab => ({\r\n                ...tab,\r\n                title: getTitle(tab),\r\n            }))\r\n        },\r\n        [\r\n            personalTabName,\r\n            queueCount?.followUp,\r\n            queueCount?.personal,\r\n            queueCount?.personalHighlighted,\r\n            queueCount?.team,\r\n            t.EMAIL,\r\n            tabs,\r\n            teamTabName,\r\n        ],\r\n    )\r\n\r\n    const renderTab = useCallback(function renderTabCallback({\r\n        title,\r\n    }: CaseTabWithTitle) {\r\n        return title\r\n    },\r\n    [])\r\n\r\n    const renderTabContent = useCallback(\r\n        function renderTabContentCallback(tab: CaseTab) {\r\n            if (tab.type === 'queue') {\r\n                switch (tab.queueType) {\r\n                    case 'TEAM':\r\n                        return <TeamTab totalQueueCount={queueCount?.team} />\r\n                    case 'PERSONAL':\r\n                        return (\r\n                            <PersonalTab\r\n                                totalQueueCount={queueCount?.personal}\r\n                            />\r\n                        )\r\n                    default:\r\n                        return (\r\n                            <PinnedTab totalQueueCount={queueCount?.followUp} />\r\n                        )\r\n                }\r\n            }\r\n\r\n            if (tab.type === 'view_case') {\r\n                const FooterContent =\r\n                    tab.queueType === 'PERSONAL' ? (\r\n                        <PersonalCaseFooterContent />\r\n                    ) : tab.queueType === 'TEAM' ? (\r\n                        <TeamCaseFooterContent />\r\n                    ) : (\r\n                        <PinnedCaseFooterContent />\r\n                    )\r\n\r\n                return (\r\n                    <Case\r\n                        id={tab.case.id}\r\n                        serviceId={tab.case.serviceId}\r\n                        FooterContent={FooterContent}\r\n                    />\r\n                )\r\n            }\r\n        },\r\n        [queueCount?.followUp, queueCount?.personal, queueCount?.team],\r\n    )\r\n\r\n    const [selectedTabId, setSelectedTabId] = useAtom(selectedTabIdAtom)\r\n    const onTabClose = useCallback(\r\n        function onTabCloseCallback(id: string) {\r\n            setTabs(t => t.filter(tab => tab.id !== id))\r\n\r\n            if (selectedTabId === id) {\r\n                setSelectedTabId(tabs[0].id)\r\n            }\r\n\r\n        },\r\n        [selectedTabId, setSelectedTabId, setTabs, tabs],\r\n    )\r\n    useQueryManager()\r\n\r\n    return (\r\n        <div className=\"flex h-full flex-col\" data-testid=\"cases-page\">\r\n            <Tabs\r\n                onChange={setTabId}\r\n                className=\"flex h-full min-h-0 flex-col\"\r\n                tabsContentClassName=\"flex flex-col flex-auto h-auto\"\r\n                tabs={tabsWithTitle}\r\n                activeTabId={tabId}\r\n                renderTab={renderTab}\r\n                onTabClose={onTabClose}\r\n                renderTabContent={renderTabContent}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useQuery} from '@tanstack/react-query'\r\n\r\nimport type {DefaultService} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\ntype QueueCountQueryParams = Parameters<typeof DefaultService.getQueueCount>[0]\r\n\r\nexport function useQueueCountQuery(params: QueueCountQueryParams = {}) {\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n    return useQuery({\r\n        queryKey: queryKeys.queueCount(params),\r\n        queryFn: () => apiRequests(serverOrigin).getQueueCount(params),\r\n    })\r\n}\r\n","import {useEffect} from 'react'\r\nimport {useIsFetching, useQueryClient} from '@tanstack/react-query'\r\n\r\nimport {queryKeys} from './query-keys'\r\n\r\n\r\nexport function useQueueCountInvalidator() {\r\n    const queryClient = useQueryClient()\r\n    const isFetchingQueue = !!useIsFetching({queryKey: queryKeys.queue()})\r\n\r\n    /** Invalidate (refetch) queue count, when queue request is refetched */\r\n    useEffect(() => {\r\n        if (isFetchingQueue) {\r\n            queryClient.invalidateQueries({queryKey: queryKeys.queueCount()})\r\n        }\r\n    }, [isFetchingQueue, queryClient])\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {teamIdAtom} from '../atoms'\r\n\r\n\r\nexport function useTeamTabName() {\r\n    const teamId = useAtomValue(teamIdAtom)\r\n    const selfTeamId = useSessionState('teamId')\r\n    const teams = useDirectoryState('teams')\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        const team = teams.find(t => t.id === teamId)\r\n        const teamName = team && team.id !== selfTeamId ? team.name : ''\r\n\r\n        return teamName\r\n            ? t.EMAIL.queuePostfix(teamName)\r\n            : t.EMAIL.emailTeamQueue_header()\r\n    }, [selfTeamId, t.EMAIL, teamId, teams])\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {personalTabUserAtom} from '../atoms'\r\n\r\n\r\nexport function usePersonalTabName() {\r\n    const selfUserId = useSessionState('userId')\r\n    const user = useAtomValue(personalTabUserAtom)\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => {\r\n        return selfUserId !== user.id\r\n            ? t.EMAIL.queuePostfix(user.name)\r\n            : t.EMAIL.emailPersonalQueue_header()\r\n    }, [selfUserId, t.EMAIL, user])\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\nimport {useQueryClient} from '@tanstack/react-query'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useCaseStateConnector} from '@bpinc/ad-case-state-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {selectedTabAtom} from './components/CasePage/atoms'\r\nimport {queryKeys} from './queries'\r\n\r\n\r\nexport function useQueryManager() {\r\n    const caseStateConnector = useCaseStateConnector()\r\n    const queryClient = useQueryClient()\r\n    const tab = useAtomValue(selectedTabAtom)\r\n\r\n    const invalidateQueriesForCurrentTab = useCallback(() => {\r\n        assertDefined(tab)\r\n\r\n        queryClient.invalidateQueries({queryKey: queryKeys.queueCount()})\r\n        queryClient.invalidateQueries({queryKey: queryKeys.queue(tab.queueType)})\r\n\r\n    }, [queryClient, tab])\r\n\r\n\r\n    //TODO: Add optimistic updates\r\n    useEffect(() => {\r\n        const subscription = caseStateConnector.dispenser.subscribe({\r\n            onQueueItemsMoved: invalidateQueriesForCurrentTab,\r\n            onCasesDeleted: invalidateQueriesForCurrentTab,\r\n            onCasesClosedAsSpam: invalidateQueriesForCurrentTab,\r\n        })\r\n        return () => {\r\n            subscription.unsubscribe()\r\n        }\r\n    }, [caseStateConnector.dispenser, invalidateQueriesForCurrentTab, queryClient])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createStore, Provider} from 'jotai'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {personalTabUserAtom} from './atoms'\r\n\r\n\r\nconst store = createStore()\r\n\r\nexport const JotaiProvider: FCWithChildren = ({children}) => {\r\n    const {\r\n        userId: selfUserId,\r\n        firstName: selfFirstName,\r\n        lastName: selfLastName,\r\n    } = useSessionState(['userId', 'firstName', 'lastName'])\r\n    const {formatFullName} = useFormatting()\r\n\r\n    //Use useMemo instead of useEffect, because we want to initialize the store before rendering the children\r\n    useMemo(function initializeStore() {\r\n        assertDefined(selfUserId)\r\n        store.set(personalTabUserAtom, {\r\n            id: selfUserId,\r\n            name: formatFullName(selfFirstName, selfLastName),\r\n        })\r\n    }, [formatFullName, selfFirstName, selfLastName, selfUserId])\r\n\r\n    return <Provider store={store}>{children}</Provider>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {ReactQueryDevtools} from '@tanstack/react-query-devtools'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useLocalStorageForState} from '@bpinc/ad-local-settings-context'\r\n\r\nimport {queueTableWidthAtom} from './atoms'\r\nimport {CasePageContent} from './CasePageContent'\r\nimport {JotaiProvider} from './JotaiProvider'\r\n\r\n\r\nexport const CasePage: React.FC = () => {\r\n    const [queueTableWidth, setQueueTableWidth] = useAtom(queueTableWidthAtom)\r\n    useLocalStorageForState(\r\n        queueTableWidth,\r\n        'adQueueTableWidth',\r\n        setQueueTableWidth,\r\n        queueTableWidth,\r\n    )\r\n\r\n    const {getCasePendingReasons} = useCaseStateMethods()\r\n\r\n    useEffect(function onDidMount() {\r\n        getCasePendingReasons()\r\n    }, [getCasePendingReasons])\r\n\r\n    return (\r\n        <JotaiProvider>\r\n            <CasePageContent />\r\n            <ReactQueryDevtools initialIsOpen={false} buttonPosition=\"bottom-left\" />\r\n        </JotaiProvider>\r\n    )\r\n}\r\n","import type {AriaAttributes, CSSProperties, ReactNode, RefCallback} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface Option {\r\n    value: string\r\n    label: string\r\n}\r\n\r\nexport type DropdownProps = AriaAttributes & {\r\n    inputRef?: RefCallback<HTMLSelectElement>\r\n    options?: Option[]\r\n    className?: string\r\n    value?: Option['value']\r\n    name?: string\r\n    label?: ReactNode\r\n    error?: ReactNode\r\n    placeholder?: string\r\n    noValueLabel?: string | null\r\n    labelClassName?: string\r\n    errorClassName?: string\r\n    onChange(value: Option['value'] | undefined, extra: { name?: string }): void\r\n    style?: CSSProperties\r\n}\r\n\r\nconst DEFAULT_LABEL = 'Please select'\r\n\r\nexport const Dropdown: React.FC<DropdownProps> = props => {\r\n    const {\r\n        options,\r\n        onChange,\r\n        className,\r\n        name,\r\n        label,\r\n        error,\r\n        value,\r\n        noValueLabel = DEFAULT_LABEL,\r\n        inputRef,\r\n        placeholder,\r\n        labelClassName,\r\n        errorClassName,\r\n        ...selectProps\r\n    } = props\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const el = e.target\r\n        if (el) {\r\n            const newValue = el.value || undefined\r\n            onChange(newValue, {name})\r\n        }\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                className,\r\n                'relative flex min-w-0 justify-between',\r\n                {\r\n                    'text-red-500': error,\r\n                },\r\n            )}\r\n        >\r\n            {label && <label className={tcn(labelClassName, 'mt-1.5 flex-1')}>{label}</label>}\r\n\r\n            <select\r\n                placeholder={placeholder}\r\n                ref={inputRef}\r\n                value={value || ''}\r\n                onChange={handleChange}\r\n                {...selectProps}\r\n                className=\"max-w-full flex-[2] rounded-md border border-gray-400 bg-white p-1\"\r\n            >\r\n                {noValueLabel && <option value=\"\">{noValueLabel}</option>}\r\n                {options?.map((o, i) => (\r\n                    <option key={i} value={o.value}>\r\n                        {o.label || o.value}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {error && <p className={errorClassName} role=\"alert aria-atomic\">{error}</p>}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRawProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor, FieldRawConstructor} from '@bpinc/lib-forms-base'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {DropdownProps} from './Dropdown'\r\nimport {Dropdown} from './Dropdown'\r\n\r\n\r\ntype SelectFieldProps = FieldImplementationProps<\r\n    Omit<DropdownProps, 'onChange' | 'label'> & {\r\n        label?: string\r\n    }>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    options,\r\n    onChange,\r\n    label,\r\n    ...props\r\n}: FieldRenderImplementationProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    const ariaId1 = uuid()\r\n\r\n    return (\r\n        <Dropdown\r\n            {...props}\r\n            inputRef={ref}\r\n            label={label}\r\n            placeholder={label}\r\n            errorClassName=\"self-end text-red-500\"\r\n            aria-labelledby={ariaId1}\r\n            options={options}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport function SelectFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\nexport function SelectField<TFormValues extends FieldValues>(props: FieldProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRawProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor, FieldRawConstructor} from '@bpinc/lib-forms-base'\r\nimport type {InputFieldProps} from '@bpinc/lib-jskit-ui'\r\nimport {InputField} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ntype TextFieldProps = FieldImplementationProps<InputFieldProps>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>(props: FieldRenderImplementationProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return (\r\n        <InputField {...props} />\r\n    )\r\n}\r\n\r\nexport function TextFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\nexport function TextField<TFormValues extends FieldValues>(props: FieldProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import React, {useCallback} from 'react'\r\nimport type {UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport {IconCloseCircle} from '@bpinc/lib-icons'\r\n\r\n\r\ninterface RemoveRowProps {\r\n    index: number\r\n    remove: UseFieldArrayRemove\r\n}\r\n\r\nexport const RemoveRow: React.FC<RemoveRowProps> = ({index, remove}) => {\r\n    const handleRemove = useCallback(\r\n        function handleRemoveCallback() {\r\n            remove(index)\r\n        },\r\n        [index, remove],\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex shrink-0 items-center\">\r\n            <button\r\n                onClick={handleRemove}\r\n                data-index={index}\r\n                aria-label=\"Remove entry\"\r\n                title=\"Remove entry\"\r\n                className=\"cursor-pointer border-[none] bg-[none]\"\r\n            >\r\n                <IconCloseCircle />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport type {\r\n    Control,\r\n    FieldArrayPath,\r\n    FieldValues,\r\n    Path,\r\n    UseFieldArrayRemove,\r\n} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport {AddressTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype AddressFieldArrayContentProps<TValues extends FieldValues> = {\r\n    index: number\r\n    control: Control<TValues>\r\n    name: FieldArrayPath<TValues>\r\n    remove: UseFieldArrayRemove\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\ntype STATES_CODE = keyof typeof STATES\r\n\r\nexport const AddressFieldArrayContent = <TValues extends FieldValues>({\r\n    index,\r\n    control,\r\n    name,\r\n    remove,\r\n    typeClassName,\r\n    layoutClassName,\r\n    style,\r\n}: AddressFieldArrayContentProps<TValues>) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatAddressType} = useFormatting()\r\n\r\n    const optionsAddressStates = useMemo(() => {\r\n        return Object.keys(STATES).map(code => ({\r\n            value: code,\r\n            label: STATES[code as STATES_CODE],\r\n        }))\r\n    }, [])\r\n\r\n    const optionsAddressTypes = useMemo(() => {\r\n        return Object.keys(AddressTypes).map(type => ({\r\n            value: type,\r\n            label: formatAddressType(type),\r\n        }))\r\n    }, [formatAddressType])\r\n\r\n    const {field: typeField} = useController({\r\n        name: `${name}.${index}.type` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: addressLine1Field} = useController({\r\n        name: `${name}.${index}.address_line1` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: addressLine2Field} = useController({\r\n        name: `${name}.${index}.address_line2` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: cityField} = useController({\r\n        name: `${name}.${index}.city` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: stateField} = useController({\r\n        name: `${name}.${index}.state` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: zipField} = useController({\r\n        name: `${name}.${index}.postcode` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    return (\r\n        <div role=\"row\" className={tcn('flex items-start', layoutClassName)}>\r\n            <SelectFieldRaw\r\n                style={style}\r\n                className={typeClassName}\r\n                field={typeField}\r\n                options={optionsAddressTypes}\r\n                placeholder={t.FORMS.address_type()}\r\n                aria-label={t.FORMS.address_type()}\r\n            />\r\n            <div className={tcn('flex min-w-0 flex-col', layoutClassName)}>\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={addressLine1Field}\r\n                    placeholder={t.FORMS.address_line_1()}\r\n                    aria-label={t.FORMS.address_line_1()}\r\n                />\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={addressLine2Field}\r\n                    placeholder={t.FORMS.address_line_2()}\r\n                    aria-label={t.FORMS.address_line_2()}\r\n                />\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={cityField}\r\n                    aria-label={t.FORMS.city()}\r\n                    placeholder={t.FORMS.city()}\r\n                />\r\n                <div role=\"row\" className={tcn('flex items-start', layoutClassName)}>\r\n                    <SelectFieldRaw\r\n                        style={style}\r\n                        field={stateField}\r\n                        options={optionsAddressStates}\r\n                        placeholder={t.FORMS.state()}\r\n                    />\r\n                    <TextFieldRaw\r\n                        style={style}\r\n                        field={zipField}\r\n                        aria-label={t.FORMS.zip()}\r\n                        placeholder={t.FORMS.zip()}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <RemoveRow index={index} remove={remove} />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport type {FieldArray, FieldValues, UseFieldArrayAppend} from 'react-hook-form'\r\n\r\nimport type {FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype AddRowProps<\r\n    TFieldType extends FieldArray,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>\r\n> = {\r\n    initialValues: TFieldType\r\n    append: UseFieldArrayAppend<TValues, TFieldName>\r\n    AddButtonIcon: SVGRComponent\r\n    addButtonText?: string\r\n}\r\n\r\n\r\nexport function AddRow<\r\n    TFieldType extends FieldArray,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>\r\n>({\r\n    append,\r\n    AddButtonIcon,\r\n    initialValues,\r\n    addButtonText,\r\n}: AddRowProps<TFieldType, TValues, TFieldName>) {\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleAdd = useCallback(\r\n        function handleAddCallback() {\r\n            append(initialValues as FieldArray<TValues, TFieldName>)\r\n        },\r\n        [append, initialValues],\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onClick={handleAdd}\r\n                className=\"group/add-btn flex cursor-pointer border-[none] bg-[none] pl-0\"\r\n                title={t.CONTACT.add_entry_button_tooltip()}\r\n            >\r\n                <AddButtonIcon aria-hidden />\r\n                {addButtonText && (\r\n                    <span className=\"ml-1 align-middle text-main-secondary group-hover/add-btn:text-black\">\r\n                        {addButtonText}\r\n                    </span>\r\n                )}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype FieldArrayItemProps = {\r\n    label?: string\r\n    layoutClassName?: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const FieldArrayItem: React.FC<FieldArrayItemProps> = ({label, layoutClassName, children}) => {\r\n    return (\r\n        <div className={tcn('flex min-w-0 flex-col', layoutClassName)}>\r\n            {label && <label>{label}</label>}\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport type {FieldArray as FieldArrayType, FieldValues} from 'react-hook-form'\r\nimport {useFieldArray} from 'react-hook-form'\r\n\r\nimport type {FieldArrayInnerControlProps, FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\n\r\nimport {AddRow} from './AddRow'\r\nimport {FieldArrayItem} from './FieldArrayItem'\r\n\r\n\r\ntype FieldArrayProps = {\r\n    label?: string\r\n    layoutClassName?: string\r\n    className?: string\r\n    AddButtonIcon: SVGRComponent\r\n    addButtonText?: string\r\n}\r\n\r\nexport const FieldArray = <\r\n    TFieldType extends FieldArrayType,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>,\r\n>({\r\n    control,\r\n    name,\r\n    AddButtonIcon,\r\n    addButtonText,\r\n    renderComponents,\r\n    layoutClassName,\r\n    initialValues,\r\n    label,\r\n    className,\r\n}: FieldArrayInnerControlProps<TFieldType, TValues, TFieldName> & FieldArrayProps) => {\r\n    const {fields, append, remove} = useFieldArray({\r\n        control,\r\n        name,\r\n    })\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col', layoutClassName, className)}>\r\n            {fields.map((_, index) => (\r\n                <FieldArrayItem\r\n                    key={index}\r\n                    layoutClassName={layoutClassName}\r\n                    label={label}\r\n                >\r\n                    {renderComponents(index, remove, fields.length)}\r\n                </FieldArrayItem>\r\n            ))}\r\n            <AddRow\r\n                append={append}\r\n                initialValues={initialValues}\r\n                AddButtonIcon={AddButtonIcon}\r\n                addButtonText={addButtonText}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerAddressType} from '@bpinc/ad-contacts-state-types'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport {IconAddAddress} from '@bpinc/lib-icons'\r\n\r\nimport {AddressFieldArrayContent} from './AddressFieldArrayContent'\r\nimport {FieldArray} from './FieldArray'\r\n\r\n\r\ntype AddressFieldType = Partial<ServerAddressType>\r\n\r\nconst INITIAL_VALUES: AddressFieldType = {\r\n    address_line1: '',\r\n    address_line2: '',\r\n    city: '',\r\n    postcode: '',\r\n}\r\n\r\ntype AddressFieldArrayProps = {\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const AddressFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, AddressFieldType>,\r\n>({\r\n    name,\r\n    style,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: FieldArrayControlProps<AddressFieldType, TValues, TFieldName> & AddressFieldArrayProps) => {\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <AddressFieldArrayContent\r\n                    style={style}\r\n                    layoutClassName={layoutClassName}\r\n                    typeClassName={typeClassName}\r\n                    remove={remove}\r\n                    name={name}\r\n                    control={control}\r\n                    index={index}\r\n                />\r\n            )\r\n        },\r\n        [style, layoutClassName, control, name, typeClassName],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            className={className}\r\n            layoutClassName={layoutClassName}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddAddress}\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React from 'react'\r\n\r\n\r\nexport const ViewItem: React.FC<{\r\n    label?: JSX.Element | string\r\n    value?: JSX.Element | string\r\n    viewStyle?: CSSProperties\r\n}> = ({\r\n    label,\r\n    value,\r\n    viewStyle,\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"flex w-full items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight] overflow-hidden\">\r\n            <span className=\"w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]\">\r\n                {label}\r\n            </span>\r\n\r\n            <div\r\n                className=\"flex-auto\"\r\n                style={viewStyle}\r\n            >\r\n                {value}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useId} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport type {ContactAddress, FormDefinitionFieldAddressList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {AddressFieldArray} from '../common/FieldArray/AddressFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const AddressListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldAddressList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatAddressType} = useFormatting()\r\n    const ariaId1 = useId()\r\n    const ariaId2 = useId()\r\n\r\n    if (view) {\r\n        const addresses = form.getValues()[field.name || ''] as ContactAddress[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {addresses?.map((address, index) => {\r\n                    const value = [\r\n                        address.address_line1,\r\n                        address.address_line2,\r\n                        address.city,\r\n                        STATES[address.state as keyof typeof STATES],\r\n                        address.postcode,\r\n                    ]\r\n                        .filter(Boolean)\r\n                        .join(', ')\r\n\r\n                    return (\r\n                        <ViewItem\r\n                            key={index}\r\n                            viewStyle={viewStyle}\r\n                            label={formatAddressType(address.type)}\r\n                            value={(\r\n                                <a\r\n                                    tabIndex={0}\r\n                                    aria-labelledby={`${ariaId1} ${ariaId2}`}\r\n                                    id={ariaId2}\r\n                                >\r\n                                    {value}\r\n                                </a>\r\n                            )}\r\n                        />\r\n                    )\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <AddressFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import type {ComponentProps, HTMLProps, ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {TextAreaProps as BaseTextareaProps} from '@bpinc/lib-jskit-ui'\r\nimport {TextArea as TextAreaUI} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface DirectProps {\r\n    label?: ReactNode\r\n    labelClassName?: string\r\n    wrapperClassName?: string\r\n    error?: ReactNode\r\n    errorClassName?: string\r\n}\r\n\r\ntype TextAreaBaseProps = Omit<ComponentProps<'textarea'>, 'value'> &\r\nOmit<BaseTextareaProps, keyof Omit<HTMLProps<HTMLTextAreaElement>, 'value'>>\r\n\r\nexport type TextAreaProps = DirectProps & Omit<TextAreaBaseProps, keyof DirectProps | 'inputRef' | 'ref'> & { inputClassName?: string }\r\n\r\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\r\n    const {\r\n        id,\r\n        className,\r\n        inputClassName,\r\n        label,\r\n        error,\r\n        value,\r\n        onChange,\r\n        onKeyDown,\r\n        onBlur,\r\n        minRows = 1,\r\n        maxRows = 8,\r\n        placeholder = '',\r\n        labelClassName,\r\n        wrapperClassName,\r\n        errorClassName,\r\n        ...other\r\n    } = props\r\n\r\n    return (\r\n        <div className={tcn(wrapperClassName, 'flex w-full flex-row')}>\r\n            {label && <label className={tcn('my-1 block', labelClassName)} htmlFor={id}>{label}</label>}\r\n            <div className=\"flex w-full flex-col\">\r\n                <div\r\n                    className={tcn(\r\n                        className,\r\n                        'box-border w-full flex-1 rounded border border-[#abb6bb] bg-white p-2',\r\n                        'focus:border-[#4b85a0] focus:shadow-inner',\r\n                        'hover:border-[#96a7b0] hover:shadow-inner',\r\n                        {\r\n                            'self-end border-[#ff8997] bg-[#ffdee2] text-red-500': error,\r\n                        },\r\n                    )}\r\n                >\r\n                    <TextAreaUI\r\n                        ref={ref}\r\n                        className={tcn(\r\n                            inputClassName,\r\n                            'm-0 box-border block w-full resize-none overflow-auto border-none bg-transparent p-0 leading-tight focus:outline-none',\r\n                        )}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onKeyDown={onKeyDown}\r\n                        onBlur={onBlur}\r\n                        minRows={minRows}\r\n                        maxRows={maxRows}\r\n                        placeholder={placeholder}\r\n                        id={id}\r\n                        {...other}\r\n                    />\r\n                </div>\r\n                {error && <p className={errorClassName} role=\"alert aria-atomic\">{error}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {FieldImplementationProps, FieldProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {TextAreaProps} from './TextArea'\r\nimport {TextArea as TextAreaUI} from './TextArea'\r\n\r\n\r\ntype TextAreaFieldProps = FieldImplementationProps<TextAreaProps & {\r\n    dataKey?: string\r\n}>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    errorClassName,\r\n    ...props\r\n}: FieldRenderImplementationProps<TextAreaFieldProps, TFormValues>): ReactElement {\r\n    const ariaId1 = uuid()\r\n\r\n    return (\r\n        <TextAreaUI\r\n            {...props}\r\n            aria-labelledby={ariaId1}\r\n            errorClassName={tcn('self-end text-red-500', errorClassName)}\r\n        />\r\n    )\r\n}\r\n\r\nexport function TextAreaField<TFormValues extends FieldValues>(props: FieldProps<TextAreaFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import React from 'react'\r\nimport type {Control} from 'react-hook-form'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {TextField} from '../TextField'\r\nimport {TextAreaField} from './TextAreaField'\r\n\r\n\r\nconst labelClassName = `w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]`\r\nconst editItemClassName = `flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]`\r\n\r\nexport const GeneralTextFormField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    control: Control\r\n\r\n    multiline: boolean\r\n    placeholder: string\r\n    label: string | null\r\n    required: boolean\r\n    name: string\r\n    type?: string\r\n    minRows: number\r\n}> = ({\r\n    pageItem,\r\n    control,\r\n\r\n    multiline,\r\n    placeholder,\r\n    label,\r\n    required,\r\n    name,\r\n    type = 'text',\r\n    minRows,\r\n}) => {\r\n    const style = getFormElementStyle(pageItem)\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return multiline ? (\r\n        <TextAreaField\r\n            placeholder={placeholder}\r\n            label={label}\r\n            required={required}\r\n            name={name}\r\n            control={control}\r\n            minRows={minRows}\r\n            wrapperClassName={editItemClassName}\r\n            style={style}\r\n            labelClassName={labelClassName}\r\n        />\r\n    ) : (\r\n        <TextField\r\n            placeholder={placeholder}\r\n            label={label}\r\n            required={required}\r\n            name={name}\r\n            control={control}\r\n            style={editStyle}\r\n            type={type as any}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldAmount, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const AmountField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldAmount\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n        const viewValue = form.getValues()[field.name || '']\r\n\r\n        if (field.hideEmpty && !viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"number\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import type {FormDefinition} from '@bpinc/ad-request-urls'\r\n\r\nimport {checkIsLayout} from './checkIsLayout'\r\nimport {getAllFormFields} from './getAllFormFields'\r\nimport {getFormElementMappingString} from './getFormElementMappingString'\r\n\r\n/**\r\n * Form values are stored as a map of field names to values.\r\n * This function creates a map of lead mapping strings to form values.\r\n */\r\nexport function createLeadMappingStringToFormValueMap(\r\n    formValues: Record<string, unknown>,\r\n    formDefinition: FormDefinition,\r\n): Record<string, unknown> {\r\n    const nonLayoutFields = getAllFormFields(formDefinition)\r\n        .filter(({field}) => !checkIsLayout(field))\r\n\r\n    return Object.entries(formValues)\r\n        .reduce((acc, [fieldName, value]) => {\r\n            const field = nonLayoutFields.find(it => it.field?.name === fieldName)\r\n            const mappingString = getFormElementMappingString(field)\r\n\r\n            if (!mappingString) {\r\n                return acc\r\n            }\r\n\r\n            return {\r\n                ...acc,\r\n                [mappingString]: value,\r\n            }\r\n        }, {})\r\n}\r\n","import type {FormDefinition} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function getAllFormFields(form?: FormDefinition) {\r\n    return form?.layout?.pages\r\n        ?.flatMap(page => page?.fields || [])\r\n        .flat() || []\r\n}\r\n","import type {\r\n    FormDefinitionField,\r\n    FormDefinitionFieldContainer,\r\n    FormDefinitionFieldSection,\r\n} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function checkIsLayout(field: FormDefinitionField): field is FormDefinitionFieldSection | FormDefinitionFieldContainer {\r\n    return field.type === 'STATIC' &&\r\n    (field.staticType === 'SECTION' || field.staticType === 'CONTAINER')\r\n}\r\n","import type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\n\r\n/**\r\n * Mapping string is a string that is used to map form element to a specific scenario variable\r\n * It is specified in different ways for different form elements\r\n */\r\nexport function getFormElementMappingString(field: FormDefinitionPageItem | undefined) {\r\n    if (\r\n        field?.field.type === 'CUSTOM' &&\r\n        field?.field.leadMappingString\r\n    ) {\r\n        return field.field.leadMappingString\r\n    }\r\n\r\n    if (\r\n        field?.field.type === 'STATIC' &&\r\n        field?.field.staticType === 'MESSENGER' &&\r\n        field?.field.mapping\r\n    ) {\r\n        return field.field.mapping\r\n    }\r\n\r\n    return ''\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ActionCase, FormButtonAction, FormDefinition} from '@bpinc/ad-request-urls'\r\nimport {createLeadMappingStringToFormValueMap} from '@bpinc/lib-form-builder/src/utils'\r\nimport type {SemanticButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useButtonActionConditionsChecker} from './useButtonActionConditionsChecker'\r\nimport {useButtonHandlers} from './useButtonHandlers'\r\nimport {useButtonPrivilegesChecker} from './useButtonPrivilegesChecker'\r\n\r\n\r\nexport type ChangeFormPageId = (newPage: string) => void\r\n\r\nexport type FormBuilderButtonProps = SemanticButtonProps & {\r\n    contactId?: string\r\n    values?: Record<string, unknown>\r\n    changeFormPageId?: ChangeFormPageId\r\n    formDefinition?: FormDefinition\r\n    action: FormButtonAction\r\n    actionCases?: ActionCase[]\r\n    children: React.ReactNode\r\n    dataKey?: string\r\n}\r\n\r\nexport const FormBuilderButton: React.FC<FormBuilderButtonProps> = ({\r\n    contactId,\r\n    values,\r\n    formDefinition,\r\n    changeFormPageId,\r\n    action,\r\n    actionCases,\r\n    children,\r\n    dataKey,\r\n    ...props\r\n}) => {\r\n    const mappingToFormValues = values && formDefinition\r\n        ? createLeadMappingStringToFormValueMap(values || {}, formDefinition)\r\n        : values\r\n\r\n    const handleClick = useButtonHandlers({\r\n        contactId,\r\n        actionCases,\r\n        action,\r\n        values: mappingToFormValues,\r\n        changeFormPageId,\r\n    })\r\n\r\n    const hasPrivileges = useButtonPrivilegesChecker(action)\r\n    const isConditionsPassed = useButtonActionConditionsChecker({values: mappingToFormValues, actionCases})\r\n\r\n    const disabled = !isConditionsPassed || !hasPrivileges\r\n\r\n    return (\r\n        <SemanticButton\r\n            {...props}\r\n            data-testid={dataKey}\r\n            data-form-field=\"true\"\r\n            data-field-type=\"button\"\r\n            data-disabled={disabled || undefined}\r\n            onClick={handleClick}\r\n            basic\r\n            disabled={disabled}\r\n        >\r\n            {children}\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractions, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedChatServiceId, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {ActionCase, FormButtonAction} from '@bpinc/ad-request-urls'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {checkConditions} from '@bpinc/lib-form-builder'\r\nimport {useDisconnectButtonClickHandler} from '@bpinc/lib-helpers-ui'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\nimport type {ChangeFormPageId} from './FormBuilderButton'\r\n\r\n\r\n type UseButtonHandlersParams = {\r\n     contactId?: string\r\n     actionCases?: ActionCase[]\r\n     action: FormButtonAction\r\n     values?: Record<string, unknown>\r\n     changeFormPageId?: ChangeFormPageId\r\n }\r\n\r\nexport function useButtonHandlers({\r\n    contactId,\r\n    actionCases,\r\n    values,\r\n    action,\r\n    changeFormPageId,\r\n}: UseButtonHandlersParams) {\r\n    const {initiateCall, initiateChat} = useInteractionStateMethods()\r\n    const contact = useContact(contactId)\r\n    const {addMessageToPending} = useInteractionChatStateMethods()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {privileges} = useSessionState()\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n    const canStartExternalChatPrivilege = privilegesLoaded && privileges.CAN_START_EXTERNAL_CHAT\r\n\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const {services} = useServicesDispositionsState()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const {showNotification, hideNotificationsByTag} = useNotificationsState('methods')\r\n    const {getServiceAndDIDNumbersErrors} = useErrorValidation()\r\n\r\n    const {dispositions} = useServicesDispositionsState()\r\n\r\n    const associatedChatServiceId = getAssociatedChatServiceId(services, selectedService)\r\n\r\n    const startAction = useCallback(\r\n        function startActionCallback(actionCallback: (actionCase: ActionCase) => void) {\r\n            actionCases?.forEach(actionCase => {\r\n                const validConditions = checkConditions({\r\n                    conditions: actionCase?.conditions,\r\n                    values,\r\n                })\r\n\r\n                if (!validConditions) {\r\n                    return\r\n                }\r\n\r\n                actionCallback(actionCase)\r\n            })\r\n        },\r\n        [values, actionCases],\r\n    )\r\n\r\n    const startCallAction = useCallback(\r\n        function startCallCallback(actionCase: ActionCase) {\r\n            if (actionCase?.numberToCall) {\r\n                const errors = getServiceAndDIDNumbersErrors({\r\n                    skip: ['noChatInService'],\r\n                    interactionType: 'call',\r\n                })\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                initiateCall({\r\n                    phone: actionCase.numberToCall,\r\n                    serviceId: selectedService,\r\n                    accessNumberId: selectedDIDNumber,\r\n                    contactId,\r\n                    firstName: contact?.data?.firstName,\r\n                    lastName: contact?.data?.firstName,\r\n                    origination: 'contact-profile',\r\n                })\r\n                setActivePage({name: AppRoutes.Interactions})\r\n            }\r\n        },\r\n        [\r\n            contact?.data?.firstName,\r\n            contactId,\r\n            getServiceAndDIDNumbersErrors,\r\n            hideNotificationsByTag,\r\n            initiateCall,\r\n            selectedDIDNumber,\r\n            selectedService,\r\n            setActivePage,\r\n            showNotification,\r\n        ],\r\n    )\r\n\r\n    const startSMSChatAction = useCallback(\r\n        function startSMSChatCallback(actionCase: ActionCase) {\r\n            if (!canStartExternalChatPrivilege) {\r\n                return\r\n            }\r\n\r\n            if (actionCase?.numberToSMS) {\r\n                if (actionCase?.messageToSMS) {\r\n                    addMessageToPending(\r\n                        {\r\n                            content: actionCase.messageToSMS,\r\n                            channel: 'sms',\r\n                            type: 'message',\r\n                        },\r\n                        actionCase.numberToSMS,\r\n                    )\r\n                }\r\n\r\n                const errors = getServiceAndDIDNumbersErrors({interactionType: 'sms'})\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                initiateChat({\r\n                    channel: 'sms',\r\n                    address: actionCase.numberToSMS,\r\n                    serviceId: associatedChatServiceId,\r\n                    displayData: {\r\n                        firstName: contact?.data?.firstName,\r\n                        lastName: contact?.data?.lastName,\r\n                    },\r\n                    accessNumberId: selectedDIDNumber,\r\n                    contactId,\r\n                    origination: 'contact-profile',\r\n                })\r\n                setActivePage({name: AppRoutes.Interactions})\r\n            }\r\n        },\r\n        [\r\n            contact?.data?.firstName,\r\n            contact?.data?.lastName,\r\n            addMessageToPending,\r\n            associatedChatServiceId,\r\n            canStartExternalChatPrivilege,\r\n            contactId,\r\n            getServiceAndDIDNumbersErrors,\r\n            initiateChat,\r\n            hideNotificationsByTag,\r\n            selectedDIDNumber,\r\n            setActivePage,\r\n            showNotification,\r\n        ],\r\n    )\r\n\r\n    const searchKBAction = useCallback(\r\n        function searchKBCallback(actionCase: ActionCase) {\r\n            if (actionCase?.searchText) {\r\n                setActivePage({\r\n                    name: AppRoutes.KnowledgeBase,\r\n                    params: {\r\n                        searchText: actionCase.searchText,\r\n                    },\r\n                })\r\n            }\r\n        },\r\n        [setActivePage],\r\n    )\r\n\r\n    const changeFormPageAction = useCallback(\r\n        function changeFormPageActionCallback(actionCase: ActionCase) {\r\n            if (!actionCase.page) {\r\n                return\r\n            }\r\n\r\n            changeFormPageId?.(actionCase.page)\r\n        },\r\n        [changeFormPageId],\r\n    )\r\n\r\n    const items = useInteractions()\r\n    const handleDisconnectButtonClick = useDisconnectButtonClickHandler()\r\n\r\n    const completeItemAction = useCallback(\r\n        function completeItemActionCallback() {\r\n            const itemWithTheSameContactId = items.find(item => item.contactId === contactId)\r\n            if (itemWithTheSameContactId) {\r\n                handleDisconnectButtonClick(itemWithTheSameContactId, {\r\n                    completeAfterDisconnect: true,\r\n                    openInteractionsPageOnError: true,\r\n                })\r\n            }\r\n        },\r\n        [contactId, handleDisconnectButtonClick, items],\r\n    )\r\n\r\n    const sendDispositionAction = useCallback(\r\n        function sendDispositionActionCallback(actionCase: ActionCase) {\r\n            const itemWithTheSameContactId = items.find(item => item.contactId === contactId)\r\n\r\n            if (!itemWithTheSameContactId) {\r\n                return\r\n            }\r\n\r\n            const dispositionName = actionCase.disposition\r\n\r\n            const serviceId = isWorkItem(itemWithTheSameContactId)\r\n                ? itemWithTheSameContactId?.workitemData?.serviceId\r\n                : itemWithTheSameContactId?.scenarioData?.serviceId\r\n\r\n            const dispositionsObject = serviceId ? dispositions[serviceId] : {}\r\n\r\n            const dispositionToSelect = Object.values(dispositionsObject).find(\r\n                disposition => disposition.name === dispositionName,\r\n            )\r\n\r\n            if (dispositionToSelect) {\r\n                interactionStateMethods.setDisposition({\r\n                    itemId: itemWithTheSameContactId.id,\r\n                    disposition: {\r\n                        id: dispositionToSelect.id,\r\n                        name: dispositionToSelect.name,\r\n                    },\r\n                })\r\n            }\r\n\r\n            handleDisconnectButtonClick(itemWithTheSameContactId, {\r\n                completeAfterDisconnect: true,\r\n                openInteractionsPageOnError: true,\r\n                disposition: dispositionToSelect,\r\n            })\r\n        },\r\n        [contactId, dispositions, handleDisconnectButtonClick, interactionStateMethods, items],\r\n    )\r\n\r\n    const completeItem = useCallback(\r\n        function completeItemCallback() {\r\n            startAction(completeItemAction)\r\n        },\r\n        [completeItemAction, startAction],\r\n    )\r\n\r\n    const sendDisposition = useCallback(\r\n        function sendDispositionCallback() {\r\n            startAction(sendDispositionAction)\r\n        },\r\n        [startAction, sendDispositionAction],\r\n    )\r\n\r\n    const startCall = useCallback(\r\n        function startCallCallback() {\r\n            startAction(startCallAction)\r\n        },\r\n        [startAction, startCallAction],\r\n    )\r\n\r\n    const startSMSChat = useCallback(\r\n        function startSMSChatCallback() {\r\n            startAction(startSMSChatAction)\r\n        },\r\n        [startAction, startSMSChatAction],\r\n    )\r\n\r\n    const searchKB = useCallback(\r\n        function startSMSChatCallback() {\r\n            startAction(searchKBAction)\r\n        },\r\n        [searchKBAction, startAction],\r\n    )\r\n\r\n    const changeFormPage = useCallback(\r\n        function changeFormPageCallback() {\r\n            startAction(changeFormPageAction)\r\n        },\r\n        [changeFormPageAction, startAction],\r\n    )\r\n\r\n    return useCallback(\r\n        function handleClickCallback() {\r\n            if (action === 'Start SMS') {\r\n                startSMSChat()\r\n            }\r\n\r\n            if (action === 'Call number') {\r\n                startCall()\r\n            }\r\n\r\n            if (action === 'Search Knowledge Base') {\r\n                searchKB()\r\n            }\r\n\r\n            if (action === 'Complete') {\r\n                completeItem()\r\n            }\r\n\r\n            if (action === 'Disposition') {\r\n                sendDisposition()\r\n            }\r\n\r\n            if (action === 'Go To Page') {\r\n                changeFormPage()\r\n            }\r\n        },\r\n        [\r\n            action,\r\n            startSMSChat,\r\n            startCall,\r\n            searchKB,\r\n            completeItem,\r\n            sendDisposition,\r\n            changeFormPage,\r\n        ],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {FormButtonAction} from '@bpinc/ad-request-urls'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useButtonPrivilegesChecker(action?: FormButtonAction) {\r\n    const {privileges, phoneDeviceCapabilities} = useSessionState()\r\n    const {selectedService} = useServiceState()\r\n    const {outboundChatChannels} = useServicesDispositionsState()\r\n\r\n    return useMemo(function memoizeHasPrivileges() {\r\n        const privilegesLoaded = !!Object.keys(privileges).length\r\n        const canStartExternalChatPrivilege =\r\n            privilegesLoaded && !!privileges.CAN_START_EXTERNAL_CHAT\r\n\r\n        if (action === 'Start SMS') {\r\n            return canStartExternalChatPrivilege && !!withOutboundChatChannel()\r\n        }\r\n\r\n        if (action === 'Call number') {\r\n            return !!phoneDeviceCapabilities.canDial\r\n        }\r\n\r\n        return true\r\n\r\n        function withOutboundChatChannel() {\r\n            return selectedService && outboundChatChannels[selectedService]?.includes('SMS')\r\n        }\r\n    }, [outboundChatChannels, phoneDeviceCapabilities.canDial, privileges, selectedService, action])\r\n\r\n}\r\n","import type {ActionCase} from '@bpinc/ad-request-urls'\r\nimport {checkConditions} from '@bpinc/lib-form-builder'\r\n\r\n\r\ntype UseButtonConditionsParams = {\r\n    values?: Record<string, unknown>\r\n    actionCases?: ActionCase[]\r\n}\r\n\r\nexport function useButtonActionConditionsChecker({values, actionCases}: UseButtonConditionsParams) {\r\n    return actionCases?.some(actionCase => {\r\n        return checkConditions({\r\n            values,\r\n            conditions: actionCase?.conditions,\r\n        })\r\n    })\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\n\r\ninterface ImageProps {\r\n    style?: CSSProperties\r\n    value?: string\r\n    className?: string\r\n}\r\n\r\nexport const Image: React.FC<ImageProps> = ({\r\n    style,\r\n    value,\r\n    className,\r\n}) => {\r\n    const finalStyle = useMemo(() => ({\r\n        ...style,\r\n        minHeight: style?.height,\r\n    }), [style])\r\n\r\n    return (\r\n        <img\r\n            className={className}\r\n            src={value ? `data:image;base64,${value}` : undefined}\r\n            style={finalStyle}\r\n            alt=\"form-image\"\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\n\r\ninterface SpacerProps {\r\n    height?: CSSProperties['height']\r\n}\r\n\r\nexport const Spacer: React.FC<SpacerProps> = ({height}) => {\r\n    const style = useMemo(() => {\r\n        if (typeof height !== 'number') {\r\n            return {}\r\n        }\r\n\r\n        return {\r\n            flexShrink: 0,\r\n            height: height * 2,\r\n        }\r\n    }, [height])\r\n\r\n    return (\r\n        <div style={style} />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldButton} from '@bpinc/ad-request-urls'\r\nimport {FormBuilderButton} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const ButtonField: React.FC<{\r\n    field: FormDefinitionFieldButton\r\n}> = ({\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        formDefinition,\r\n        changeFormPageId,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    return (\r\n        <FormBuilderButton\r\n            actionCases={field.properties.actionCase}\r\n            action={field.properties.action}\r\n            values={form.getValues()}\r\n            formDefinition={formDefinition}\r\n            changeFormPageId={changeFormPageId}\r\n        >\r\n            {field.value}\r\n        </FormBuilderButton>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {FieldImplementationProps, FieldProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor} from '@bpinc/lib-forms-base'\r\nimport type {CheckboxProps} from '@bpinc/lib-ui-elements'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype CheckboxFieldProps = FieldImplementationProps<Omit<CheckboxProps, 'onChange' | 'checked' | 'type'>> & ({\r\n    type?: 'checkbox'\r\n    radioValue?: never\r\n} | {\r\n    type: 'radio'\r\n    radioValue: string\r\n})\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    value,\r\n    type = 'checkbox',\r\n    radioValue,\r\n    ...props\r\n}: FieldRenderImplementationProps<CheckboxFieldProps, TFormValues>): ReactElement {\r\n    const checked = type === 'checkbox' ? value : value === radioValue\r\n\r\n    if (type === 'checkbox') {\r\n        return (\r\n            <Checkbox\r\n                {...props}\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            type=\"radio\"\r\n            checked={checked}\r\n            value={radioValue ?? ''}\r\n        />\r\n    )\r\n}\r\n\r\nexport function CheckboxFieldBase<TFormValues extends FieldValues>(props: FieldProps<CheckboxFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport {noop} from 'lodash-es'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldCheckbox, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {ViewItem} from '../common/ViewItem'\r\nimport {CheckboxFieldBase} from './CheckboxFieldBase'\r\n\r\n\r\nexport const CheckboxField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldCheckbox\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={(\r\n                    <Checkbox\r\n                        checked={viewValue}\r\n                        onChange={noop}\r\n                    />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    const style = getFormElementStyle(pageItem)\r\n\r\n    const isChecked = form.getValues(field.name || '')\r\n\r\n    return (\r\n        <CheckboxFieldBase\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            className={classNames(`flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]`, {\r\n                'line-through': field.crossOutWhenChecked && isChecked,\r\n            })}\r\n            style={style}\r\n            label={field.label}\r\n            required={field.required}\r\n            disabled={field.intentCheckOnly}\r\n            type=\"checkbox\"\r\n        />\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport {SmRef} from '@bpinc/lib-external-ui-elements'\r\nimport type {\r\n    DateTimeBaseProps,\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {DateTimeBase, FieldConstructor} from '@bpinc/lib-forms-base'\r\n\r\n\r\ntype DatePickerFieldProps = FieldImplementationProps<DateTimeBaseProps>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    error,\r\n    ...props\r\n}: FieldRenderImplementationProps<DatePickerFieldProps, TFormValues>): ReactElement {\r\n    return (\r\n        <div>\r\n            <SmRef innerRef={ref}>\r\n                <DateTimeBase {...props} />\r\n            </SmRef>\r\n            {error && <p className=\"self-end text-red-500\" role=\"alert aria-atomic\">{error}</p>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport function DatePicker<TFormValues extends FieldValues>(props: FieldProps<DatePickerFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport type {FormDefinitionFieldDatetime, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {ViewItem} from '../common/ViewItem'\r\nimport {DatePicker} from './DatePicker'\r\n\r\n\r\nexport const DateTimeField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldDatetime\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const fieldValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !fieldValue) {\r\n            return null\r\n        }\r\n\r\n        const viewValue = fieldValue ? formatDate(fieldValue) : ''\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <DatePicker\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label || ''}\r\n            required={field.required}\r\n            control={form.control}\r\n            style={editStyle}\r\n            name={field.name || ''}\r\n            className={classNames(\r\n                `w-full`,\r\n                `[&>.field]:w-full [&>.field>*]:w-full`,\r\n                `[&>.field>*>input]:p-[5px] [&>.field>*>input]:flex-auto`,\r\n                `[&>.field>*>input]:border [&>.field>*>input]:border-default [&>.field>*>input]:rounded-none [&>.field>*>input]:leading-6`,\r\n            )}\r\n            labelClassName={'!leading-3 caption-s text-primary-on-primary cursor-pointer'}\r\n            displayFormat={field.displayFormat ?? undefined}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldEmail, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const EmailField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldEmail\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={(\r\n                    <a\r\n                        data-value={viewValue}\r\n                        tabIndex={0}\r\n                    >\r\n                        {viewValue}\r\n                    </a>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"email\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport {SmRef} from '@bpinc/lib-external-ui-elements'\r\nimport type {FieldRawProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldRawConstructor} from '@bpinc/lib-forms-base'\r\n\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    ...props\r\n}: FieldRenderImplementationProps<unknown, TFormValues>): ReactElement {\r\n    return (\r\n        <SmRef innerRef={ref}>\r\n            <input\r\n                hidden\r\n                data-form-field=\"true\"\r\n                data-field-type=\"hidden-field\"\r\n                {...props}\r\n            />\r\n        </SmRef>\r\n    )\r\n}\r\n\r\n\r\nexport function HiddenFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<unknown, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React from 'react'\r\nimport type {Control, FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport type {FieldSubPathsByValue, RulesTypes} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport type {DropdownProps} from '../Dropdown'\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {HiddenFieldRaw} from './HiddenField'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype SelectAndTextFieldRowProps<\r\n    TFieldType,\r\n    TValues extends FieldValues,\r\n> = {\r\n    control: Control<TValues>\r\n    idFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    selectFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    textFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    options: DropdownProps['options']\r\n    remove: UseFieldArrayRemove\r\n    index: number\r\n    textFiledRules?: RulesTypes\r\n    inputType?: 'tel' | 'email'\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const SelectAndTextFieldRow = <\r\n    TFieldType,\r\n    TValues extends FieldValues,\r\n>({\r\n    idFieldName,\r\n    selectFieldName,\r\n    textFieldName,\r\n    textFiledRules,\r\n    style,\r\n    control,\r\n    index,\r\n    options,\r\n    remove,\r\n    inputType,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: SelectAndTextFieldRowProps<TFieldType, TValues>) => {\r\n    const {\r\n        field: idField,\r\n    } = useController({\r\n        name: idFieldName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: selectField,\r\n    } = useController({\r\n        name: selectFieldName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: textField,\r\n        fieldState,\r\n    } = useController({\r\n        name: textFieldName,\r\n        control,\r\n        rules: textFiledRules,\r\n    })\r\n    const error = fieldState.error?.message\r\n\r\n    return (\r\n        <div role=\"row\" className={tcn(layoutClassName, 'flex flex-row')}>\r\n            <HiddenFieldRaw field={idField} />\r\n            <SelectFieldRaw className={typeClassName} field={selectField} style={style} options={options} />\r\n            <TextFieldRaw field={textField} style={style} type={inputType} error={error} />\r\n            <RemoveRow index={index} remove={remove} />\r\n        </div>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerEmailType} from '@bpinc/ad-contacts-state-types'\r\nimport {EmailTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue, FieldSubPathsByValue} from '@bpinc/lib-forms-base'\r\nimport {useEmailValidationRules} from '@bpinc/lib-forms-base'\r\nimport {IconAddEmail} from '@bpinc/lib-icons'\r\nimport type {OptionalBy} from '@bpinc/lib-types-helpers'\r\n\r\nimport {FieldArray} from './FieldArray'\r\nimport {SelectAndTextFieldRow} from './SelectAndTextFieldRow'\r\n\r\n\r\ntype EmailFieldType = OptionalBy<ServerEmailType, 'id'>\r\n\r\nconst INITIAL_VALUES: EmailFieldType = {type: EmailTypes.BUSINESS, email_address: ''}\r\n\r\ntype EmailFieldArrayProps = {\r\n    typeClassName?: string\r\n    className?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const EmailFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, EmailFieldType>\r\n>({\r\n    name,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n    style,\r\n}: FieldArrayControlProps<EmailFieldType, TValues, TFieldName> & EmailFieldArrayProps) => {\r\n    const {formatEmailType} = useFormatting()\r\n    const emailValidationRules = useEmailValidationRules()\r\n\r\n    const optionsEmailTypes = useMemo(() => {\r\n        return Object.keys(EmailTypes).map(type => ({\r\n            value: type,\r\n            label: formatEmailType(type),\r\n        }))\r\n    }, [formatEmailType])\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <SelectAndTextFieldRow\r\n                    idFieldName={`${name}.${index}.id` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    selectFieldName={`${name}.${index}.type` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    textFieldName={`${name}.${index}.email_address` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    control={control}\r\n                    layoutClassName={layoutClassName}\r\n                    typeClassName={typeClassName}\r\n                    index={index}\r\n                    options={optionsEmailTypes}\r\n                    textFiledRules={emailValidationRules}\r\n                    inputType=\"email\"\r\n                    remove={remove}\r\n                    style={style}\r\n                />\r\n            )\r\n        },\r\n        [layoutClassName, typeClassName, name, control, optionsEmailTypes, emailValidationRules, style],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            className={className}\r\n            layoutClassName={layoutClassName}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddEmail}\r\n        />\r\n    )\r\n}\r\n","import React, {useId} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ContactEmail, FormDefinitionFieldEmailList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {EmailFieldArray} from '../common/FieldArray/EmailFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const EmailListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldEmailList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatEmailType} = useFormatting()\r\n    const ariaId1 = useId()\r\n    const ariaId2 = useId()\r\n\r\n    if (view) {\r\n        const emails = form.getValues()[field.name || ''] as ContactEmail[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {emails?.map((email, index) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={formatEmailType(email.type)}\r\n                        value={(\r\n                            <a\r\n                                tabIndex={0}\r\n                                aria-labelledby={`${ariaId1} ${ariaId2}`}\r\n                                id={ariaId2}\r\n                            >\r\n                                {email.email_address}\r\n                            </a>\r\n                        )}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <EmailFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldImage, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {Image} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const ImageField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldImage\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n        const style = getFormElementStyle(pageItem)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <Image\r\n                style={{...viewStyle, ...style}}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    // TODO: Implement ImageField\r\n    return null\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldLabel} from '@bpinc/ad-request-urls'\r\nimport {parseTemplateToString} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const LabelField: React.FC<{\r\n    field: FormDefinitionFieldLabel\r\n}> = ({\r\n    field,\r\n}) => {\r\n    const {runtimeVariables} = useContext(FormBuilderContext)\r\n    const label = parseTemplateToString(field.value || '', runtimeVariables)\r\n    return <h4>{label}</h4>\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionFieldLink} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport const LinkField: React.FC<{\r\n    field: FormDefinitionFieldLink\r\n}> = ({\r\n    field,\r\n}) => {\r\n    return (\r\n        <a\r\n            href={field.linkUrl}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"underline\"\r\n        >\r\n            {field.initialValue || field.linkUrl}\r\n        </a>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useEffect, useMemo} from 'react'\r\nimport type {FieldPathValue, FieldValues, Path} from 'react-hook-form'\r\nimport {useController, useWatch} from 'react-hook-form'\r\n\r\nimport type {MessengerData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {HiddenFieldRaw} from './HiddenField'\r\n\r\n\r\ntype MessengerFieldItemProps<TValues> = {\r\n    typeFiledName: Path<TValues>\r\n    userIdFieldName: Path<TValues>\r\n    userNameFieldName: Path<TValues>\r\n    accountIdFieldName: Path<TValues>\r\n    availableMessengers: MessengerData[]\r\n    userNameDefault?: string\r\n    userIdDefault?: string\r\n    typeClassName?: string\r\n    accountIdDefault?: string\r\n    style?: CSSProperties\r\n}\r\n\r\n\r\nconst MESSENGERS_WITH_USER_NAME: ContactMessenger['type'][] = ['telegram', 'twitter']\r\n\r\nexport const MessengerFieldItem = <TValues extends FieldValues>({\r\n    control,\r\n    userNameFieldName,\r\n    typeFiledName,\r\n    userIdFieldName,\r\n    accountIdFieldName,\r\n    availableMessengers,\r\n    userNameDefault,\r\n    accountIdDefault,\r\n    userIdDefault,\r\n    typeClassName,\r\n    style,\r\n}: FieldControlProps<TValues, FieldValues> & MessengerFieldItemProps<TValues>) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {\r\n        field: accountIdField,\r\n    } = useController({\r\n        name: accountIdFieldName,\r\n        defaultValue: (accountIdDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n        control,\r\n    })\r\n\r\n    const {field: typeField} = useController({\r\n        name: typeFiledName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: userIdField,\r\n    } = useController({\r\n        name: userIdFieldName,\r\n        control,\r\n        defaultValue: (userIdDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n    })\r\n\r\n    const {\r\n        field: userNameField,\r\n    } = useController({\r\n        name: userNameFieldName,\r\n        control,\r\n        defaultValue: (userNameDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n    })\r\n\r\n    const accountField = useWatch({control, name: accountIdFieldName})\r\n    const currentType = useMemo(() => availableMessengers.find(messenger => messenger.id === accountField)?.type, [accountField, availableMessengers])\r\n\r\n    const showUserName = currentType ? MESSENGERS_WITH_USER_NAME.includes(currentType) : false\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    const options = useMemo<{label: string; value: string}[]>(() => {\r\n        return availableMessengers.map(messenger => ({value: messenger.id, label: getMessengerName(messenger.type)}))\r\n    }, [availableMessengers, getMessengerName])\r\n\r\n\r\n    useEffect(function synchronizeTypeField() {\r\n        typeField.onChange(currentType)\r\n    }, [currentType, typeField])\r\n\r\n    useEffect(function synchronizeUserNameField() {\r\n        if (!showUserName) {\r\n            userNameField.onChange('')\r\n        }\r\n    }, [showUserName, userNameField])\r\n\r\n    return (\r\n        <>\r\n            <SelectFieldRaw\r\n                className={typeClassName}\r\n                style={style}\r\n                field={accountIdField}\r\n                placeholder={t.UNDEFINED.contact_messenger()}\r\n                options={options}\r\n            />\r\n            <HiddenFieldRaw field={typeField} />\r\n            <TextFieldRaw\r\n                style={style}\r\n                placeholder={t.UNDEFINED.contact_messenger_user_id_placeholder()}\r\n                field={userIdField}\r\n            />\r\n            {\r\n                showUserName && (\r\n                    <TextFieldRaw\r\n                        style={style}\r\n                        placeholder={t.UNDEFINED.contact_messenger_username_placeholder()}\r\n                        field={userNameField}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {\r\n    FieldArray,\r\n    FieldArrayPath,\r\n    FieldValues,\r\n    Path,\r\n    UseFieldArrayRemove,\r\n} from 'react-hook-form'\r\nimport {useFieldArray} from 'react-hook-form'\r\n\r\nimport type {MessengerData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {IconAddMessenger} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {AddRow} from './AddRow'\r\nimport {FieldArrayItem} from './FieldArrayItem'\r\nimport {MessengerFieldItem} from './MessengerFieldItem'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype MessengersFieldArrayFormType = {type: ContactMessenger['type'] | null; user_name: string; user_id: string; account_id: string}\r\n\r\nconst INITIAL_VALUES: MessengersFieldArrayFormType = {type: null, user_name: '', user_id: '', account_id: ''}\r\n\r\ntype MessengersFieldArrayProps<TValues extends FieldValues> = {\r\n    name: FieldArrayPath<TValues>\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    availableMessengers: MessengerData[]\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const MessengersFieldArray = <TValues extends FieldValues>({\r\n    availableMessengers,\r\n    name,\r\n    control,\r\n    className,\r\n    layoutClassName,\r\n    typeClassName,\r\n    style,\r\n}: FieldControlProps<TValues, FieldValues> & MessengersFieldArrayProps<TValues>) => {\r\n    const {fields, append, remove: removeItem} = useFieldArray({\r\n        control,\r\n        name,\r\n    })\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            field: Partial<MessengersFieldArrayFormType>,\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <div role=\"row\" className={tcn(layoutClassName, 'flex flex-row')}>\r\n                    <MessengerFieldItem\r\n                        control={control}\r\n                        typeFiledName={`${name}.${index}.type` as Path<TValues>}\r\n                        userIdFieldName={`${name}.${index}.user_id` as Path<TValues>}\r\n                        userNameFieldName={`${name}.${index}.user_name` as Path<TValues>}\r\n                        accountIdFieldName={`${name}.${index}.account_id` as Path<TValues>}\r\n                        availableMessengers={availableMessengers}\r\n                        accountIdDefault={field.account_id}\r\n                        userIdDefault={field.user_id}\r\n                        userNameDefault={field.user_name}\r\n                        typeClassName={typeClassName}\r\n                        style={style}\r\n                    />\r\n                    <RemoveRow index={index} remove={remove} />\r\n                </div>\r\n            )\r\n        },\r\n        [availableMessengers, control, layoutClassName, name, style, typeClassName],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col', layoutClassName, className)}>\r\n            {fields.map((field, index) => (\r\n                <FieldArrayItem key={index}>\r\n                    {renderComponents(field as TValues, index, removeItem)}\r\n                </FieldArrayItem>\r\n            ))}\r\n            {Boolean(availableMessengers.length) && (\r\n                <AddRow\r\n                    append={append}\r\n                    initialValues={INITIAL_VALUES as FieldArray<TValues>}\r\n                    AddButtonIcon={IconAddMessenger}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useInteractionChatState} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ContactMessenger, FormDefinitionFieldMessenger, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {MessengerView} from '@bpinc/lib-forms-ui'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {MessengersFieldArray} from '../common/FieldArray/MessengersFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const MessengersField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldMessenger\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n        contactData,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const availableMessengers = useInteractionChatState('messengers')\r\n\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    if (view) {\r\n        const messengers = form.getValues()[field.name || ''] as ContactMessenger[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!messengers) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {messengers?.map((messenger, index) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={getMessengerName(messenger.type)}\r\n                        value={(\r\n                            <MessengerView\r\n                                messenger={messenger}\r\n                                {...contactData}\r\n                            />\r\n                        )}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <MessengersFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            availableMessengers={availableMessengers}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldNotes, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\n\r\n\r\nexport const NotesField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldNotes\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {form} = useContext(FormBuilderContext)\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\n\r\nimport {usePhoneClickHandler} from './usePhoneClickHandler'\r\n\r\n\r\nexport const PhoneLink: React.FC<{\r\n    phone: string\r\n}> = ({\r\n    phone,\r\n}) => {\r\n    const phoneClickHandler = usePhoneClickHandler()\r\n\r\n    return (\r\n        <a\r\n            onClick={phoneClickHandler}\r\n            data-phone={phone}\r\n            tabIndex={0}\r\n        >\r\n            {formatPhone(phone)}\r\n        </a>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\n\r\n\r\nexport const usePhoneClickHandler = () => {\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    return useCallback((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n\r\n        const el = e.currentTarget\r\n        const phone = el.getAttribute('data-phone')\r\n\r\n        if (!phone) {\r\n            return\r\n        }\r\n\r\n        interactionStateMethods.initiateCall({\r\n            phone,\r\n            serviceId: selectedService,\r\n            accessNumberId: selectedDIDNumber,\r\n        })\r\n\r\n        return\r\n    }, [selectedService, selectedDIDNumber, interactionStateMethods])\r\n\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldPhone, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {PhoneLink} from '../common/PhoneLink'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const PhoneField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldPhone\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={<PhoneLink phone={viewValue} />}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"tel\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerPhoneType} from '@bpinc/ad-contacts-state-types'\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue, FieldSubPathsByValue} from '@bpinc/lib-forms-base'\r\nimport {usePhoneValidationRules} from '@bpinc/lib-forms-base'\r\nimport {IconAddPhone} from '@bpinc/lib-icons'\r\nimport type {OptionalBy} from '@bpinc/lib-types-helpers'\r\n\r\nimport {FieldArray} from './FieldArray'\r\nimport {SelectAndTextFieldRow} from './SelectAndTextFieldRow'\r\n\r\n\r\ntype PhoneFieldType = OptionalBy<ServerPhoneType, 'id'>\r\n\r\nconst INITIAL_VALUES: PhoneFieldType = {type: PhoneTypes.BUSINESS, phone: ''}\r\n\r\ntype PhonesFieldArrayProp = {\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const PhonesFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, PhoneFieldType>,\r\n>({\r\n    name,\r\n    style,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: FieldArrayControlProps<PhoneFieldType, TValues, TFieldName> & PhonesFieldArrayProp) => {\r\n    const {formatPhoneType} = useFormatting()\r\n    const phoneValidationRules = usePhoneValidationRules()\r\n\r\n    const optionsPhoneTypes = useMemo(() => {\r\n        return Object.keys(PhoneTypes).map(type => ({\r\n            value: type,\r\n            label: formatPhoneType(type),\r\n        }))\r\n    }, [formatPhoneType])\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <SelectAndTextFieldRow\r\n                    idFieldName={`${name}.${index}.id` as FieldSubPathsByValue<TValues, ServerPhoneType>}\r\n                    selectFieldName={`${name}.${index}.type` as FieldSubPathsByValue<TValues, ServerPhoneType> }\r\n                    textFieldName={`${name}.${index}.phone` as FieldSubPathsByValue<TValues, ServerPhoneType>}\r\n                    control={control}\r\n                    typeClassName={typeClassName}\r\n                    index={index}\r\n                    options={optionsPhoneTypes}\r\n                    textFiledRules={phoneValidationRules}\r\n                    inputType=\"tel\"\r\n                    remove={remove}\r\n                    layoutClassName={layoutClassName}\r\n                    style={style}\r\n                />\r\n            )\r\n        },\r\n        [typeClassName, name, control, optionsPhoneTypes, phoneValidationRules, layoutClassName, style],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            layoutClassName={layoutClassName}\r\n            className={className}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddPhone}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ContactPhone, FormDefinitionFieldPhoneList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {PhonesFieldArray} from '../common/FieldArray/PhonesFieldArray'\r\nimport {PhoneLink} from '../common/PhoneLink'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const PhoneListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldPhoneList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatPhoneType} = useFormatting()\r\n\r\n    if (view) {\r\n        const listValue = form.getValues()[field.name || ''] as ContactPhone[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {listValue?.map((phone, index: number) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={formatPhoneType(phone.type)}\r\n                        value={<PhoneLink phone={phone.phone} />}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <PhonesFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldKeyValueList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {SelectField as SelectFieldBase} from '../common/SelectField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const SelectField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldKeyValueList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const options = useMemo(() => field.listNameDataItems.map(option => ({\r\n        value: option.id,\r\n        label: option.name,\r\n    }) || []), [field])\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    if (view) {\r\n        const selectedOptionId = form.getValues()[field.name || '']\r\n        const viewValue = options?.find(option => option.value === selectedOptionId)?.label\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !selectedOptionId) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <SelectFieldBase\r\n            name={field.name || ''}\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label || ''}\r\n            required={field.required}\r\n            control={form.control}\r\n            style={editStyle}\r\n            options={options}\r\n            className=\"flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]\"\r\n            labelClassName=\"w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle} from '@bpinc/lib-form-builder'\r\nimport {Spacer} from '@bpinc/lib-form-builder-ui'\r\n\r\n\r\nexport const SpacerField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n}> = ({\r\n    pageItem,\r\n}) => {\r\n    const {height} = getFormElementStyle(pageItem)\r\n\r\n    return <Spacer height={height} />\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldText, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const TextFormField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldText\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n            pageItem={pageItem}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {AddressListField} from './AddressListField'\r\nimport {AmountField} from './AmountField'\r\nimport {ButtonField} from './ButtonField'\r\nimport {CheckboxField} from './CheckboxField'\r\nimport {DateTimeField} from './DateTimeField'\r\nimport {EmailField} from './EmailField'\r\nimport {EmailListField} from './EmailListField'\r\nimport {ImageField} from './ImageField'\r\nimport {LabelField} from './LabelField'\r\nimport {LinkField} from './LinkField'\r\nimport {MessengersField} from './MessengersField'\r\nimport {NotesField} from './NotesField'\r\nimport {PhoneField} from './PhoneField'\r\nimport {PhoneListField} from './PhoneListField'\r\nimport {SelectField} from './SelectField'\r\nimport {SpacerField} from './SpacerField'\r\nimport {TextFormField} from './TextFormField'\r\nimport {useConditionalFieldCheck} from './useConditionalFieldCheck'\r\n\r\n\r\nexport const FormElementResolver: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n}> = ({\r\n    pageItem,\r\n}) => {\r\n    const {field} = pageItem\r\n\r\n    const isConditionMet = useConditionalFieldCheck(field)\r\n    if (!isConditionMet) {\r\n        return null\r\n    }\r\n\r\n    if (field?.type === 'CUSTOM') {\r\n        switch (field?.customType) {\r\n            case 'TEXT':\r\n                return <TextFormField pageItem={pageItem} field={field} />\r\n            case 'EMAIL':\r\n                return <EmailField pageItem={pageItem} field={field} />\r\n            case 'PHONE':\r\n                return <PhoneField pageItem={pageItem} field={field} />\r\n            case 'PHONE_LIST':\r\n                return <PhoneListField pageItem={pageItem} field={field} />\r\n            case 'EMAIL_LIST':\r\n                return <EmailListField pageItem={pageItem} field={field} />\r\n            case 'ADDRESS_LIST':\r\n                return <AddressListField pageItem={pageItem} field={field} />\r\n            case 'DATETIME':\r\n                return <DateTimeField pageItem={pageItem} field={field} />\r\n            case 'CHECKBOX':\r\n                return <CheckboxField pageItem={pageItem} field={field} />\r\n            case 'KEY_VALUE_LIST':\r\n                return <SelectField pageItem={pageItem} field={field} />\r\n            case 'NOTES':\r\n                return <NotesField pageItem={pageItem} field={field} />\r\n            case 'AMOUNT':\r\n                return <AmountField pageItem={pageItem} field={field} />\r\n            case 'IMAGE':\r\n                return <ImageField pageItem={pageItem} field={field} />\r\n        }\r\n    }\r\n\r\n    if (field?.type === 'STATIC') {\r\n        switch (field?.staticType) {\r\n            case 'LINK':\r\n                return <LinkField field={field} />\r\n            case 'TEXT':\r\n                return <LabelField field={field} />\r\n            case 'SPACER':\r\n                return <SpacerField pageItem={pageItem} />\r\n            case 'BUTTON':\r\n                return <ButtonField field={field} />\r\n            case 'MESSENGER':\r\n                return <MessengersField pageItem={pageItem} field={field} />\r\n        }\r\n    }\r\n\r\n    if (\r\n        !(field?.type === 'STATIC' && field?.staticType === 'CONTAINER') &&\r\n        !(field?.type === 'STATIC' && field?.staticType === 'SECTION')\r\n    ) {\r\n        console.warn('Not supported field type', field)\r\n    }\r\n\r\n    return null\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionField} from '@bpinc/ad-request-urls'\r\nimport {checkConditions, isFieldWithConditions} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../FormBuilder'\r\n\r\n\r\nexport function useConditionalFieldCheck(field: FormDefinitionField) {\r\n    const {intents, runtimeVariables} = useContext(FormBuilderContext)\r\n\r\n    return useMemo(() => {\r\n        if (!isFieldWithConditions(field)) {\r\n            return true\r\n        }\r\n        return !!checkConditions({\r\n            conditions: field.conditions,\r\n            values: runtimeVariables,\r\n            intents,\r\n        })\r\n    }, [field, runtimeVariables, intents])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {checkIsLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from './FormBuilder'\r\nimport {FormElementResolver} from './FormElementResolver'\r\n\r\n/**\r\n * Renders all form fields in a single column.\r\n * It is used in Communicator.\r\n */\r\nexport function CompactForm() {\r\n    const {formDefinition, pageIndex} = useContext(FormBuilderContext)\r\n\r\n    const pageFields = useMemo(() => {\r\n        return formDefinition?.layout?.pages?.[pageIndex]?.fields || []\r\n    }, [formDefinition?.layout?.pages, pageIndex])\r\n\r\n    const flatFields = pageFields.filter(item => !checkIsLayout(item.field))\r\n\r\n    return (\r\n        <>\r\n            {flatFields.map(pageItem => (\r\n                <FormElementResolver\r\n                    key={pageItem.field.id}\r\n                    pageItem={pageItem}\r\n                />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {type RecursiveFormLayout, calculateContainerStyle, isRecuriveFormLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormElementResolver} from './FormElementResolver'\r\n\r\n\r\nexport const FormLayout: React.FC<{\r\n    contentItem: RecursiveFormLayout | FormDefinitionPageItem\r\n}> = ({\r\n    contentItem,\r\n}) => {\r\n    if (!isRecuriveFormLayout(contentItem)) {\r\n        return <FormElementResolver pageItem={contentItem} />\r\n    }\r\n\r\n    return (\r\n        <div\r\n            data-testid={contentItem.key}\r\n            className=\"gap-6\"\r\n            style={calculateContainerStyle(contentItem)}\r\n        >\r\n            {contentItem.content.map(it => {\r\n                const key = isRecuriveFormLayout(it) ? it.key : it.field.id\r\n\r\n                return (\r\n                    <FormLayout\r\n                        key={key}\r\n                        contentItem={it}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo, useRef} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {type FieldValues, useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinition} from '@bpinc/ad-request-urls'\r\nimport {createLeadMappingStringToFormValueMap, getFormCSSVariables} from '@bpinc/lib-form-builder'\r\nimport type {ChangeFormPageId} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {CompactForm} from './CompactForm'\r\nimport {WideForm} from './WideForm'\r\n\r\n\r\ntype FormBuilderCommons = {\r\n    formDefinition: FormDefinition\r\n    changeFormPageId?: ChangeFormPageId\r\n    view?: boolean\r\n    contactData?: {\r\n        contactId: string\r\n        firstName: string\r\n        lastName: string\r\n    }\r\n    /** List of intent ID detected for the associated interaction */\r\n    intents?: string[]\r\n    /** Compact mode is used in Communicator. Form fields are displayed in a single column */\r\n    compact?: boolean\r\n}\r\ntype FormBuilderProps = FormBuilderCommons & {\r\n    pageIndex?: number\r\n    onFormAvailable: (form: UseFormReturn) => void\r\n    variables?: Record<string, unknown>\r\n    defaultValues?: Record<string, unknown>\r\n    shouldResetOnChange?: boolean\r\n}\r\n\r\ntype FormBuilderContextValue = FormBuilderCommons & {\r\n    runtimeVariables: Record<string, unknown>\r\n    form: UseFormReturn\r\n    pageIndex: number\r\n}\r\n\r\nexport let FormBuilderContext: Context<FormBuilderContextValue>\r\n\r\nexport const FormBuilder: React.FC<FormBuilderProps> = ({\r\n    variables = {},\r\n    formDefinition,\r\n    intents = [],\r\n    pageIndex = 0,\r\n    changeFormPageId,\r\n    view = false,\r\n    onFormAvailable,\r\n    contactData,\r\n    defaultValues,\r\n    shouldResetOnChange = false,\r\n    compact = false,\r\n}) => {\r\n    const form = useForm<FieldValues>({\r\n        defaultValues,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n    })\r\n\r\n    const isMountedRef = useRef(false)\r\n\r\n    useEffect(() => {\r\n        if (!isMountedRef.current) {\r\n            isMountedRef.current = true\r\n            return\r\n        }\r\n\r\n        if (shouldResetOnChange) {\r\n            form.reset(defaultValues)\r\n            /**\r\n             * Form could be changed outside the component, so we need to trigger the validation.\r\n             * If we reset the form with default values, we need to trigger the form validation\r\n             * manually, because the form is not dirty and the validation is not triggered.\r\n             * setTimeout is a workaround to trigger the validation after the form is rendered.\r\n             */\r\n            setTimeout(form.trigger)\r\n        }\r\n    }, [shouldResetOnChange, defaultValues, form])\r\n\r\n    useEffect(() => {\r\n        onFormAvailable?.(form)\r\n    }, [form, onFormAvailable])\r\n\r\n    const formValues = form.watch()\r\n    const runtimeVariables = useMemo(() => ({\r\n        ...variables,\r\n        ...createLeadMappingStringToFormValueMap(formValues, formDefinition),\r\n    }), [formDefinition, variables, formValues])\r\n\r\n    const formCSSVariables = useMemo(() => getFormCSSVariables(formDefinition), [formDefinition])\r\n\r\n    const contextValue = useMemo<FormBuilderContextValue>(() => ({\r\n        formDefinition,\r\n        pageIndex,\r\n        changeFormPageId,\r\n        view,\r\n        contactData,\r\n        form,\r\n        runtimeVariables,\r\n        intents,\r\n        compact,\r\n    }), [\r\n        formDefinition,\r\n        pageIndex,\r\n        changeFormPageId,\r\n        view,\r\n        contactData,\r\n        form,\r\n        runtimeVariables,\r\n        intents,\r\n        compact,\r\n    ])\r\n\r\n    if (!FormBuilderContext) {\r\n        FormBuilderContext = createContext<FormBuilderContextValue>(contextValue)\r\n    }\r\n\r\n    return (\r\n        <FormBuilderContext.Provider value={contextValue}>\r\n            <div\r\n                style={formCSSVariables}\r\n                className=\"\r\n                    flex\r\n                    flex-auto\r\n                    flex-col\r\n                    gap-6\r\n                    bg-[--form-backgroundColor]\r\n                    text-[--form-textColor]\r\n                \"\r\n            >\r\n                {compact ? <CompactForm /> : <WideForm />}\r\n            </div>\r\n\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n        </FormBuilderContext.Provider>\r\n    )\r\n\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {transformFormDefinitionsToLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from './FormBuilder'\r\nimport {FormLayout} from './FormLayout'\r\n\r\n/**\r\n * Renders a form with multiple columns as it is defined in the form definition.\r\n * It is used in fullscreen Agent Desktop.\r\n */\r\nexport function WideForm() {\r\n    const {formDefinition, pageIndex} = useContext(FormBuilderContext)\r\n\r\n    const pageFields = useMemo(() => {\r\n        return formDefinition?.layout?.pages?.[pageIndex]?.fields || []\r\n    }, [formDefinition?.layout?.pages, pageIndex])\r\n\r\n    const pageLayouts = useMemo(() => {\r\n        return transformFormDefinitionsToLayout(pageFields)\r\n    }, [pageFields])\r\n\r\n    return (\r\n        <>\r\n            {pageLayouts.map(pageLayout => (\r\n                <FormLayout\r\n                    key={pageLayout.key}\r\n                    contentItem={pageLayout}\r\n                />\r\n            ),\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useEffect, useMemo} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport type {FormDefinition} from '@bpinc/ad-request-urls'\r\nimport {useAsRef, useEvent} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport const useActiveItemFormEffects = ({\r\n    pageIndex,\r\n    formDefinition,\r\n    form,\r\n}: {\r\n    form: UseFormReturn | null\r\n    pageIndex: number\r\n    formDefinition?: FormDefinition\r\n}) => {\r\n    const {shownWorkspaceItem} = useInteractionWorkspaceState()\r\n    const activeItemRef = useAsRef(shownWorkspaceItem)\r\n    const {setFormValues, setNotes} = useInteractionStateMethods()\r\n\r\n    const pageFields = useMemo(() => {\r\n        return formDefinition?.layout?.pages?.[pageIndex]?.fields || []\r\n    }, [formDefinition?.layout?.pages, pageIndex])\r\n\r\n    useEffect(() => {\r\n        if (shownWorkspaceItem?.state === 'wrap_up') {\r\n            form?.trigger()\r\n        }\r\n    }, [shownWorkspaceItem?.state, form])\r\n\r\n    const resetForm = useEvent(() => {\r\n        form?.reset(shownWorkspaceItem?.details?.formData?.values)\r\n    })\r\n\r\n    useEffect(() => {\r\n        resetForm()\r\n    }, [pageIndex, resetForm])\r\n\r\n    const debouncedSetFormValues = useMemo(() =>\r\n        debounce((formData: Record<string, unknown>) => {\r\n            if (!activeItemRef.current?.id) {\r\n                return\r\n            }\r\n            setFormValues(activeItemRef.current?.id, formData)\r\n        }, 300), [activeItemRef, setFormValues])\r\n\r\n    const debouncedSetNotes = useMemo(() =>\r\n        debounce((notes: string[]) => {\r\n            if (!activeItemRef.current?.id) {\r\n                return\r\n            }\r\n            setNotes({\r\n                itemId: activeItemRef.current?.id,\r\n                notes,\r\n            })\r\n        }, 300), [activeItemRef, setNotes])\r\n\r\n    const onFormChange = useEvent((fields: Record<string, any>) => {\r\n        if (!activeItemRef.current) {\r\n            return\r\n        }\r\n\r\n        const mergedValues = {\r\n            ...activeItemRef.current?.details?.formData?.values,\r\n            ...fields,\r\n        }\r\n\r\n        /**\r\n         * structuredClone is needed to remove frozen objects created by immer\r\n         */\r\n        const newFormValues = structuredClone(mergedValues)\r\n\r\n        debouncedSetFormValues(newFormValues)\r\n\r\n        const notes = pageFields\r\n            .filter(fieldItem =>\r\n                fieldItem.field?.type === 'CUSTOM' &&\r\n                fieldItem.field?.customType === 'NOTES',\r\n            )\r\n            .map(fieldItem => fieldItem.field?.name || '')\r\n            .map(fieldName => String(newFormValues[fieldName])) || []\r\n\r\n        if (notes.length) {\r\n            debouncedSetNotes(notes)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = form?.watch(onFormChange)\r\n        return () => subscription?.unsubscribe()\r\n    }, [form, onFormChange])\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {FormBuilder} from '@bpinc/ad-form-builder'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useActiveItemFormEffects} from './useActiveItemFormEffects'\r\n\r\n\r\nexport const ActivityFormTab: React.FC<{\r\n    className?: string\r\n}> = ({className}) => {\r\n    const {shownWorkspaceItem} = useInteractionWorkspaceState()\r\n    const {setFormPageId} = useInteractionStateMethods()\r\n\r\n    const formDefinition = useMemo(\r\n        () => shownWorkspaceItem?.details?.formDefinitions?.find(\r\n            definition => definition.type === 'SCREENPOP',\r\n        ), [shownWorkspaceItem?.details?.formDefinitions],\r\n    )\r\n\r\n    const values = shownWorkspaceItem?.details?.formData?.values\r\n    const variables = shownWorkspaceItem?.details?.formData?.variables\r\n    const pageIndex = shownWorkspaceItem?.details?.formData?.shownPageIndex || 0\r\n    const intents = shownWorkspaceItem?.receivedIntentsIds\r\n\r\n    const [form, setForm] = useState<UseFormReturn | null>(null)\r\n\r\n    const changeFormPageId = useCallback(async (newPageId: string) => {\r\n        assertDefined(shownWorkspaceItem)\r\n        const isFormValid = await form?.trigger()\r\n        if (!isFormValid) return\r\n        setFormPageId(shownWorkspaceItem.id, newPageId)\r\n    }, [form, setFormPageId, shownWorkspaceItem])\r\n\r\n    useActiveItemFormEffects({pageIndex, formDefinition, form})\r\n\r\n    if (!formDefinition) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <FormBuilder\r\n                formDefinition={formDefinition}\r\n                defaultValues={values}\r\n                variables={variables}\r\n                intents={intents}\r\n                pageIndex={pageIndex}\r\n                changeFormPageId={changeFormPageId}\r\n                onFormAvailable={setForm}\r\n                shouldResetOnChange\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Frame} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface Props {\r\n    content: string\r\n    className?: string\r\n}\r\n\r\nexport const FrameTabContent: React.FC<Props> = ({content, className}) => {\r\n    const innerHTML = useMemo(() => ({\r\n        __html: sanitizeHtml(content),\r\n    }), [content])\r\n\r\n    return (\r\n        <Frame className={tcn('h-full w-full', className)}>\r\n            <div dangerouslySetInnerHTML={innerHTML} />\r\n        </Frame>\r\n    )\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLink = function SvgLink(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLink);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"768a4584de75be31d108c80afaed59bb.svg\";","import type {FC, ReactNode} from 'react'\r\nimport React from 'react'\r\nimport classNames from 'classnames'\r\n\r\n\r\nexport const ProfileHeaderWrapper: FC<{\r\n    children: ReactNode\r\n}> = ({\r\n    children,\r\n}) => {\r\n    return (\r\n        <div className=\"flex w-full flex-row justify-between border-b border-gray-300 p-2.5\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ProfileHeaderColumn: FC<{\r\n    children?: ReactNode\r\n    type?: 'avatar' | 'controls'\r\n}> = ({\r\n    children,\r\n    type,\r\n}) => {\r\n    return (\r\n        <div\r\n            className={classNames('flex-auto', {\r\n                ['flex-none pr-2.5']: type === 'avatar',\r\n                ['relative flex justify-end items-end whitespace-nowrap min-w-[200px] flex-none']: type === 'controls',\r\n            })}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import type {RefObject} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {getContactUrl} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {SemanticButton, Svg} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport imgLink from '../../../images/link.svg'\r\nimport {ProfileHeaderColumn, ProfileHeaderWrapper} from './ProfileHeaderLayout'\r\n\r\n\r\ninterface Props {\r\n    contact: ContactType\r\n    actionsRef: RefObject<HTMLDivElement>\r\n}\r\n\r\nexport const ProfileHeaderView: React.FC<Props> = ({contact, actionsRef}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    const avatarUrl = getAvatarUrl({contactId: contact.Id.oid})\r\n\r\n    const handleGetShareLinkClick = useCallback(() => {\r\n        const contactId = contact.Id.oid\r\n        const url = getContactUrl(serverOrigin, contactId)\r\n        clipboard.copy(url)\r\n    }, [contact.Id.oid, serverOrigin])\r\n\r\n    return (\r\n        <ProfileHeaderWrapper>\r\n            <ProfileHeaderColumn type=\"avatar\">\r\n                <AvatarLegacy\r\n                    firstName={contact.firstName}\r\n                    lastName={contact.lastName}\r\n                    url={avatarUrl}\r\n                    type=\"contact\"\r\n                    size={74}\r\n                />\r\n            </ProfileHeaderColumn>\r\n\r\n            <ProfileHeaderColumn>\r\n                <div className=\"my-1 mb-0.5 w-3/4 py-1 text-left text-base text-black no-underline\">\r\n                    {formatFullName(contact.firstName, contact.lastName)}\r\n                </div>\r\n\r\n                <div className=\"flex flex-row\">\r\n                    <div className=\"flex-auto\">\r\n                        <div className=\"py-1 pr-2.5\">\r\n                            {contact.title}\r\n                        </div>\r\n\r\n                        <div className=\"py-1 pr-2.5\">\r\n                            {contact.companyName}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex-auto\">\r\n                        <div className=\"py-1 pr-2.5\">\r\n                            {contact.primaryPhone && formatPhone(contact.primaryPhone.phone)}\r\n                        </div>\r\n\r\n                        <div className=\"py-1 pr-2.5\">\r\n                            {contact.primaryEmail && contact.primaryEmail.emailAddress}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ProfileHeaderColumn>\r\n\r\n            <ProfileHeaderColumn type=\"controls\">\r\n                <div className=\"absolute right-0 top-0 m-0\">\r\n                    <SemanticButton\r\n                        basic\r\n                        tooltip={t.GLOBAL.copy_shareable_link_button_tooltip()}\r\n                        icon={<Svg src={imgLink} className=\"block h-3.5 w-3.5\" />}\r\n                        onClick={handleGetShareLinkClick}\r\n                    />\r\n                </div>\r\n                <div ref={actionsRef} />\r\n            </ProfileHeaderColumn>\r\n        </ProfileHeaderWrapper>\r\n    )\r\n}\r\n","import type {ActivityType, PartyContactShortType, PartyType, PartyUserShortType} from '@bpinc/ad-activities-state-types'\r\n\r\n\r\ntype PartyShortType = PartyUserShortType | PartyContactShortType\r\nexport const formatDate = (timestamp: string): string => {\r\n    const date = new Date(timestamp)\r\n    const options = {weekday: 'short', hour: 'numeric', minute: 'numeric'} as const\r\n\r\n    return date.toLocaleDateString(undefined, options)\r\n}\r\nexport function isPartyUserShortType(party: PartyShortType): party is PartyUserShortType {\r\n    return party.partyType === 'USER' && 'firstName' in party\r\n}\r\n\r\nexport const getActivityOpener = (activity: ActivityType) => {\r\n    return activity.messages.find(message => message.firstName) as PartyType\r\n}\r\n\r\nexport const getParties = (messages: PartyType[]) => {\r\n    const map: { [key: string]: PartyType } = {}\r\n\r\n    messages.forEach((message: PartyType) => {\r\n        const {partyId} = message\r\n        let key: keyof PartyType\r\n\r\n        for (key in message) {\r\n            if (Object.prototype.hasOwnProperty.call(message, key)) {\r\n                if (key !== 'event' && typeof message[key] !== 'undefined') {\r\n                    map[partyId] = {\r\n                        ...(map[partyId] || {}),\r\n                        [key]: message[key],\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    return map\r\n}\r\n\r\nexport const formatLongDate = (timestamp?: string | number): string => {\r\n    if (!timestamp) return ''\r\n\r\n    const date = new Date(timestamp)\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n    } as const\r\n\r\n    return date.toLocaleDateString(undefined, options)\r\n}\r\nexport const getFullName = (party: Partial<PartyType>) =>\r\n    [party.firstName, party.lastName].join(' ')\r\n\r\nexport const getTime = (party: PartyType) => {\r\n    const date = new Date(party.timestamp)\r\n    return date.toLocaleDateString(undefined, {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n    })\r\n}\r\n","import React from 'react'\r\n\r\nimport type {PartyType} from '@bpinc/ad-activities-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getFullName, getTime} from '../utils/helpers'\r\n\r\n\r\ninterface Props {\r\n    className?: string\r\n    message?: PartyType\r\n    parties?: {\r\n        [key: string]: PartyType\r\n    }\r\n    agent?: {\r\n        firstName: string\r\n        lastName: string\r\n    }\r\n    text?: string\r\n}\r\n\r\nexport const ActivityMessage: React.FC<Props> = props => {\r\n    const {className, parties, message, agent, text} = props\r\n    let party\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {t} = useLocalizationState()\r\n    const activityMessageClassName = tcn('flex flex-row px-2 py-[5px] [&_b]:mr-1')\r\n    const activityMessageContentClassName = tcn('relative flex-auto pr-5')\r\n    const activityMessageIconClassName = tcn(\r\n        'absolute right-0 top-0 h-3 w-5 rounded bg-[--c-activity-message-icon]',\r\n        'before:absolute before:left-[3px] before:top-full before:border-[3px]',\r\n        'before:border-b-transparent before:border-l-[--c-activity-message-icon] before:border-r-transparent before:border-t-[--c-activity-message-icon]',\r\n        'after:absolute after:inset-x-0 after:top-0 after:text-center after:text-[8px] after:uppercase after:leading-[12px]',\r\n    )\r\n    const activityMessageIconSmsClassName = tcn('after:content-[\"sms\"]')\r\n\r\n    const renderAvatar = (avatar: Partial<PartyType>) => {\r\n        const url = getAvatarUrl({\r\n            userId: avatar.userId,\r\n            contactId: avatar.contactId,\r\n        })\r\n\r\n        return (\r\n            <AvatarLegacy\r\n                size={40}\r\n                url={url}\r\n                firstName={avatar.firstName}\r\n                lastName={avatar.lastName}\r\n                type={avatar.userId ? 'user' : 'contact'}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (agent) {\r\n        return (\r\n            <div className={tcn(className, activityMessageClassName)}>\r\n                <div className=\"mr-2.5\">\r\n                    {renderAvatar(agent)}\r\n                </div>\r\n                <div className={activityMessageContentClassName}>\r\n                    <div>\r\n                        <b>{getFullName(agent)}</b>\r\n                    </div>\r\n                    <div>{text}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (message && parties) {\r\n        const {partyId, event} = message\r\n\r\n        switch (event) {\r\n            case 'party_joined': {\r\n                party = parties[partyId]\r\n                if (\r\n                    party && party.type &&\r\n                    ['internal', 'external'].includes(party.type)\r\n                ) {\r\n                    return (\r\n                        <div\r\n                            className={tcn(\r\n                                className,\r\n                                activityMessageClassName,\r\n                                'bg-[--c-activity-message-bg]',\r\n                            )}\r\n                        >\r\n                            <div className=\"mr-2.5\">\r\n                                {renderAvatar(party)}\r\n                            </div>\r\n                            <div className={activityMessageContentClassName}>\r\n                                <div>\r\n                                    <b>{getFullName(party)}</b>\r\n                                    {getTime(party)}\r\n                                </div>\r\n                                <div>\r\n                                    {' ' + t.EXTERNAL_CHAT.party_joined_chat_2() + ' '}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                break\r\n            }\r\n            case 'party_left': {\r\n                party = parties[partyId]\r\n                if (\r\n                    party &&\r\n                    party.type &&\r\n                    ['internal', 'external'].includes(party.type)\r\n                ) {\r\n                    return (\r\n                        <div\r\n                            className={tcn(className, activityMessageClassName, 'bg-[--c-activity-message-bg]')}\r\n                        >\r\n                            <div className=\"mr-2.5\">\r\n                                {renderAvatar(party)}\r\n                            </div>\r\n                            <div className={activityMessageContentClassName}>\r\n                                <div>\r\n                                    <b>{getFullName(party)}</b>\r\n                                    {getTime(party)}\r\n                                </div>\r\n                                <div>\r\n                                    {' ' + t.EXTERNAL_CHAT.party_left_chat_2() + ' '}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                break\r\n            }\r\n            case 'party_message': {\r\n                party = parties[partyId]\r\n                if (\r\n                    party &&\r\n          party.type &&\r\n          ['internal', 'external'].includes(party.type)\r\n                ) {\r\n                    return (\r\n                        <div className={tcn(className, activityMessageClassName)}>\r\n                            <div className=\"mr-2.5\">\r\n                                {renderAvatar(party)}\r\n                            </div>\r\n                            <div className={activityMessageContentClassName}>\r\n                                <div>\r\n                                    <b>{getFullName(party)}</b>\r\n                                    {getTime(party)}\r\n                                </div>\r\n                                <div>{party.msg}</div>\r\n                                {party.channel === 'sms' && (\r\n                                    <div\r\n                                        className={tcn(\r\n                                            activityMessageIconClassName,\r\n                                            activityMessageIconSmsClassName,\r\n                                        )}\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                break\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\n\r\nimport {useActivitiesState, useActivitiesStateMethods} from '@bpinc/ad-activities-state-context'\r\nimport type {\r\n    ActivitiesListItemServiceType,\r\n    ActivitiesListItemType,\r\n    PartyType,\r\n    PartyUserShortType,\r\n} from '@bpinc/ad-activities-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {LegacyIconCallInbound, LegacyIconCallOutbound, LegacyIconChat} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {formatLongDate, getActivityOpener, getParties} from '../utils/helpers'\r\nimport {ActivityMessage} from './ActivityMessage'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivitiesListItemType\r\n    services?: ActivitiesListItemServiceType[]\r\n    agents: PartyUserShortType[] | undefined\r\n}\r\n\r\nexport const Activity: React.FC<Props> = ({activity, services, agents}) => {\r\n    const activities = useActivitiesState('activities')\r\n    const {getActivity} = useActivitiesStateMethods()\r\n    const {privileges, userId: selfUserId} = useSessionState()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n    const activityItemContentBlockClassName = tcn('mt-[5px] bg-[--c-activity-item-content] p-2 first:m-0')\r\n    const activityItemClassName = tcn('flex flex-row')\r\n    const activityItemContentHeadingClassName = tcn(\r\n        'mb-2 flex flex-row leading-[16px] text-gray-500',\r\n        '[&_svg]:mr-1 [&_svg]:inline-block [&_svg]:h-4 [&_svg]:w-4 [&_svg]:align-middle',\r\n    )\r\n\r\n    const id = activity.globalInteractionId\r\n\r\n    const isSelf = agents?.some(agent => agent.userId === selfUserId)\r\n\r\n    const privilegesAreReady = !!Object.values(privileges).length\r\n\r\n    const hasSufficientPrivileges =\r\n        privileges.CAN_SEE_ACTIVITIES ||\r\n        privileges.LISTEN_ALL_RECORDINGS ||\r\n        (isSelf && privileges.CAN_SEE_OWN_ACTIVITIES)\r\n\r\n    useEffect(() => {\r\n        if (privilegesAreReady && hasSufficientPrivileges && activity.mediaType === 'CHAT') {\r\n            getActivity({id})\r\n        }\r\n    }, [activity, id, getActivity, privilegesAreReady, hasSufficientPrivileges])\r\n\r\n    const {data, isLoading} = activities[id] || {data: [], isLoading: false}\r\n\r\n    const parties = useMemo(() => {\r\n        if (data) {\r\n            let resultParties: { [key: string]: PartyType } = {}\r\n            data.forEach(item => {\r\n                resultParties = {\r\n                    ...resultParties,\r\n                    ...getParties(item.messages),\r\n                }\r\n            })\r\n            return resultParties\r\n        }\r\n    }, [data])\r\n\r\n    if (isLoading) return <div>{t.GLOBAL.loading()}</div>\r\n\r\n    const renderAvatar = (party: Partial<PartyType>) => {\r\n        const url = getAvatarUrl({\r\n            userId: party.userId,\r\n            contactId: party.contactId,\r\n        })\r\n\r\n        return (\r\n            <div className=\"flex-none px-2\">\r\n                <AvatarLegacy\r\n                    size={40}\r\n                    url={url}\r\n                    firstName={party.firstName}\r\n                    lastName={party.lastName}\r\n                    type={party.userId ? 'user' : 'contact'}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderServices = (agent: PartyUserShortType) => {\r\n        const serviceName = services?.find(service => service.serviceId === agent.serviceId)?.serviceName\r\n        const disposition = agent.disposition\r\n\r\n        if (!disposition && !agent.notes) {\r\n            return\r\n        }\r\n\r\n        return (\r\n            <div className={activityItemContentBlockClassName} key={agent.partyId}>\r\n                <ActivityMessage className=\"p-0\" agent={agent} text={agent.notes} />\r\n                {serviceName && disposition && <div className=\"mt-2 text-gray-500\">{`${serviceName}: ${disposition}`}</div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderVoiceContent = (agent: PartyUserShortType) => {\r\n        if (!agent) return null\r\n\r\n        const HeaderIcon =\r\n            activity.direction === 'OUTBOUND'\r\n                ? LegacyIconCallOutbound\r\n                : LegacyIconCallInbound\r\n\r\n        return (\r\n            <div className={activityItemClassName}>\r\n                {renderAvatar(agent)}\r\n                <div className=\"flex-auto\">\r\n                    <div className={activityItemContentBlockClassName}>\r\n                        <div className={activityItemContentHeadingClassName}>\r\n                            <HeaderIcon />\r\n                            {t.ACTIVITY_HISTORY.heading_user_started_call_on_date(\r\n                                formatFullName(agent.firstName, agent.lastName),\r\n                                'call',\r\n                                formatLongDate(agent.startTime?.date),\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    {agents?.map(renderServices)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderChatContent = () => {\r\n        if (!data) return null\r\n\r\n        return data.map((item, i) => {\r\n            const opener = getActivityOpener(item)\r\n            const openerName = opener?.firstName ?? '' + ' ' + opener?.lastName ?? ''\r\n            const messages = item.messages.filter(message => message.event)\r\n\r\n            return (\r\n                <div key={i} className={activityItemClassName}>\r\n                    {renderAvatar(opener)}\r\n                    <div className=\"flex-auto\">\r\n                        <div className={activityItemContentBlockClassName}>\r\n                            <div className={activityItemContentHeadingClassName}>\r\n                                <LegacyIconChat />\r\n                                {t.ACTIVITY_HISTORY.heading_user_started_call_on_date(\r\n                                    openerName,\r\n                                    'chat',\r\n                                    formatLongDate(opener.timestamp),\r\n                                )}\r\n                            </div>\r\n                            {messages.map((message, j) => (\r\n                                <ActivityMessage key={j} message={message} parties={parties} />\r\n                            ))}\r\n                        </div>\r\n                        {agents?.map(renderServices)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-auto flex-col\">\r\n            {activity.mediaType === 'VOICE' && agents?.map(renderVoiceContent)}\r\n            {activity.mediaType === 'CHAT' && renderChatContent()}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useActivitiesState, useActivitiesStateMethods} from '@bpinc/ad-activities-state-context'\r\nimport type {ActivitiesListItemType, PartyUserShortType} from '@bpinc/ad-activities-state-types'\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {toHHMMSS} from '@bpinc/lib-helpers'\r\nimport {LegacyIconCallInbound, LegacyIconCallOutbound, LegacyIconChat} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {TableColumn} from '@bpinc/lib-ui-elements'\r\nimport {Table} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {formatDate, isPartyUserShortType} from '../utils/helpers'\r\nimport {Activity} from './Activity'\r\n\r\n\r\ninterface Props {\r\n    contactId: string\r\n}\r\n\r\nexport const Activities: React.FC<Props> = ({contactId}) => {\r\n    const {\r\n        activitiesList,\r\n        activitiesListLoading,\r\n    } = useActivitiesState(['activitiesList', 'activitiesListLoading'])\r\n    const {getActivitiesList} = useActivitiesStateMethods()\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const activitiesRowIconClassName = tcn('mt-px h-4 w-4 align-middle')\r\n\r\n    const contact = useContact(contactId)?.data\r\n\r\n    const defaultSelectedIndex = activitiesList.length ? 0 : -1\r\n\r\n    const columns: TableColumn[] = useMemo(\r\n        function memoizeColumns() {\r\n            return [\r\n                {name: 'icon', title: '', width: '36px'},\r\n                {\r\n                    name: 'time',\r\n                    title: t.UNDEFINED.activity_datetime(),\r\n                    width: '15%',\r\n                },\r\n                {\r\n                    name: 'agent',\r\n                    title: t.UNDEFINED.activity_agent(),\r\n                    width: '20%',\r\n                },\r\n                {\r\n                    name: 'disposition',\r\n                    title: t.UNDEFINED.activity_disposition(),\r\n                    width: '15%',\r\n                },\r\n                {\r\n                    name: 'notes',\r\n                    title: t.UNDEFINED.activity_details(),\r\n                    width: '50%',\r\n                },\r\n            ]\r\n        },\r\n        [t],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!contact) {\r\n            return\r\n        }\r\n        getActivitiesList({id: contact.Id.oid})\r\n    }, [contact, getActivitiesList])\r\n\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState(\r\n        defaultSelectedIndex,\r\n    )\r\n\r\n    useEffect(() => {\r\n        setSelectedRowIndex(defaultSelectedIndex)\r\n        // do not track defaultSelectedIndex\r\n        // eslint-disable-next-line\r\n    }, [contact, activitiesList, setSelectedRowIndex])\r\n\r\n    const renderItem = useCallback((item: ActivitiesListItemType, column: TableColumn) => {\r\n        switch (column.name) {\r\n            case 'icon': {\r\n                if (item.mediaType === 'CHAT') {\r\n                    return <LegacyIconChat className={activitiesRowIconClassName} />\r\n                }\r\n                if (item.mediaType === 'VOICE') {\r\n                    return item.direction === 'OUTBOUND'\r\n                        ? <LegacyIconCallOutbound className={activitiesRowIconClassName} />\r\n                        : <LegacyIconCallInbound className={activitiesRowIconClassName} />\r\n                }\r\n                return ''\r\n            }\r\n            case 'time': {\r\n                return formatDate(item.createdTime.date)\r\n            }\r\n            case 'agent': {\r\n                return item.parties.filter(isPartyUserShortType)?.map(agent => formatFullName(agent.firstName, agent.lastName)).filter(Boolean).join(', ') ?? ''\r\n            }\r\n            case 'disposition': {\r\n                return item.parties.filter(isPartyUserShortType)?.map(agent => agent.disposition).filter(Boolean).join(', ') ?? ''\r\n            }\r\n            case 'notes': {\r\n                const getNote = (agent: PartyUserShortType) => {\r\n                    const duration = agent.duration && toHHMMSS(agent.duration)\r\n                    const {notes} = agent\r\n                    return [duration, notes].filter(Boolean).join(', ')\r\n                }\r\n                return item.parties.filter(isPartyUserShortType)?.map(getNote).filter(Boolean).join('; ') ?? ''\r\n            }\r\n            default: {\r\n                return ''\r\n            }\r\n        }\r\n    }, [activitiesRowIconClassName, formatFullName])\r\n\r\n    const rowClassName = useCallback((item: ActivitiesListItemType, i: number) => {\r\n        return tcn({'bg-highlight-folder-color': selectedRowIndex === i})\r\n    }, [selectedRowIndex])\r\n\r\n    const selectedActivity = activitiesList[selectedRowIndex]\r\n\r\n    const onRowClick = useCallback((\r\n        _e: React.MouseEvent | React.KeyboardEvent,\r\n        _item: ActivitiesListItemType,\r\n        i: number,\r\n    ) => {\r\n        return setSelectedRowIndex(i)\r\n    }, [])\r\n\r\n    const activitiesDividerClassName = tcn(\r\n        'absolute left-1/2 right-0 top-[15px] ml-[-3px] h-full w-1.5',\r\n        'after:m-auto after:block after:w-px after:bg-[--c-activities-divider]',\r\n    )\r\n\r\n    return (\r\n        <div className=\"relative h-full flex-auto\">\r\n            <div className=\"absolute left-0 top-0 flex h-full w-[calc(50%-3px)] flex-col\">\r\n                <Table\r\n                    columns={columns}\r\n                    data={activitiesList}\r\n                    isLoading={activitiesListLoading}\r\n                    rowClassName={rowClassName}\r\n                    renderItem={renderItem}\r\n                    onRowClick={onRowClick}\r\n                    onRowEnterPress={onRowClick}\r\n                />\r\n            </div>\r\n\r\n            <div className={activitiesDividerClassName} />\r\n\r\n            <div className=\"absolute inset-y-[15px] right-0 w-[calc(50%-3px)] overflow-y-auto overflow-x-hidden\">\r\n                {selectedActivity && (\r\n                    <Activity\r\n                        activity={selectedActivity}\r\n                        services={selectedActivity.services}\r\n                        agents={selectedActivity.parties.filter(isPartyUserShortType)}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {EmailTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {Modal, SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {isStringInEnum} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype AddEmailModalProps = CommonModalProps & {\r\n    email?: string\r\n    contactId?: string\r\n    firstName?: string\r\n    lastName?: string\r\n    onConfirm?: () => void\r\n}\r\n\r\nexport const AddEmailModal: React.FC<AddEmailModalProps> = ({\r\n    onClose,\r\n    email,\r\n    contactId,\r\n    firstName,\r\n    lastName,\r\n    onConfirm,\r\n    ...other\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {addEmail} = useContactsStateMethods()\r\n    const {formatEmailType, formatFullName} = useFormatting()\r\n    const [value, setValue] = useState<EmailTypes>(EmailTypes.PRIMARY)\r\n\r\n    const name = formatFullName(firstName, lastName)\r\n\r\n    const options = useMemo(() => {\r\n        return Object.keys(EmailTypes).map(type => ({\r\n            value: type,\r\n            content: formatEmailType(type, false),\r\n        }))\r\n    }, [formatEmailType])\r\n\r\n    function handleSelect(innerValue: string | undefined) {\r\n        if (!isStringInEnum(EmailTypes, innerValue)) {\r\n            throw Error('Invalid email type')\r\n        }\r\n        setValue(innerValue)\r\n    }\r\n\r\n    function handleConfirm() {\r\n        contactId && email && addEmail({contactId, type: value, email})\r\n        onConfirm?.()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            data-testid=\"contact-add-email-modal\"\r\n            {...other}\r\n        >\r\n            <Modal.Header>\r\n                {t.CONTACT.add_email_heading()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className=\"body-m\">\r\n                <div className=\"flex flex-col gap-4\">\r\n                    <p>\r\n                        {t.CONTACT.add_email_description_1()}\r\n                        {' '}\r\n                        <b>{email}</b>\r\n                        {' '}\r\n                        {t.CONTACT.add_email_description_2()}\r\n                        {' '}\r\n                        <b>{name}</b>\r\n                        {' '}\r\n                        {t.CONTACT.add_email_description_3()}\r\n                    </p>\r\n                    <p>\r\n                        {t.CONTACT.add_email_description_4()}\r\n                        <SelectField\r\n                            layoutClassName=\"inline-block min-w-[187px] mx-4\"\r\n                            placeholder={t.CONTACT.add_email_email_type_placeholder()}\r\n                            value={value}\r\n                            onValueChange={handleSelect}\r\n                            options={options}\r\n                            data-testid=\"phone-type-dropdown\"\r\n                        />\r\n                        {t.CONTACT.add_email_description_5()}\r\n                    </p>\r\n                </div>\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <Button variant=\"secondary\" onClick={() => onClose()} data-testid=\"cancel-button\">\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleConfirm} data-testid=\"add-button\">\r\n                    {t.CONTACT.add_email_confirmation_button()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {Modal, SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {isStringInEnum} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype AddPhoneModalProps = CommonModalProps & {\r\n    phone?: string\r\n    contactId?: string\r\n    firstName?: string\r\n    lastName?: string\r\n    onConfirm?: () => void\r\n}\r\n\r\nexport const AddPhoneModal: React.FC<AddPhoneModalProps> = ({onClose, phone, contactId, firstName, lastName, onConfirm, ...other}) => {\r\n    const {t} = useLocalizationState()\r\n    const {addPhone} = useContactsStateMethods()\r\n    const {formatPhoneType, formatFullName} = useFormatting()\r\n    const [value, setValue] = useState<PhoneTypes>(PhoneTypes.BUSINESS)\r\n\r\n    const name = formatFullName(firstName, lastName)\r\n    const formattedPhone = formatPhone(phone)\r\n\r\n    const options = useMemo(() => {\r\n        return Object.keys(PhoneTypes).map(type => ({\r\n            value: type,\r\n            content: formatPhoneType(type),\r\n        }))\r\n    }, [formatPhoneType])\r\n\r\n    function handleSelect(innerValue: string | undefined) {\r\n        if (!isStringInEnum(PhoneTypes, innerValue)) {\r\n            throw Error('Invalid phone type')\r\n        }\r\n        setValue(innerValue)\r\n    }\r\n\r\n    function handleConfirm() {\r\n        if (contactId && phone) {\r\n            addPhone({contactId, type: value, phone})\r\n        }\r\n        onConfirm?.()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            data-testid=\"contact-add-phone-modal\"\r\n            {...other}\r\n        >\r\n            <Modal.Header>\r\n                {t.CONTACT.add_phone_heading()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"body-m\">\r\n                {!!formattedPhone && (\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        <p>\r\n                            {t.CONTACT.add_phone_description_1()}\r\n                            {' '}\r\n                            <b>{formattedPhone}</b>\r\n                            {' '}\r\n                            {t.CONTACT.add_phone_description_2()}\r\n                            {' '}\r\n                            <b>{name}</b>\r\n                            {' '}\r\n                            {t.CONTACT.add_phone_description_3()}\r\n                        </p>\r\n                        <p>\r\n                            {t.CONTACT.add_phone_description_4()}\r\n                            <SelectField\r\n                                layoutClassName=\"inline-block min-w-[187px] mx-4\"\r\n                                placeholder={t.CONTACT.add_phone_phone_type_placeholder()}\r\n                                value={value}\r\n                                onValueChange={handleSelect}\r\n                                options={options}\r\n                                data-testid=\"phone-type-dropdown\"\r\n                            />\r\n                            {t.CONTACT.add_phone_description_5()}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={() => onClose()} data-testid=\"cancel-button\" variant=\"secondary\" >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </Button>\r\n                <Button onClick={handleConfirm} data-testid=\"add-button\" variant=\"primary\">\r\n                    {t.CONTACT.add_phone_confirmation_button()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useActiveInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getChannel,\r\n    getChatParties,\r\n    isCall,\r\n    isExternalChat,\r\n    isWorkItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {isMessengerChannel} from '@bpinc/ad-transport-types'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useOpenAddEmailModal, useOpenAddPhoneModal} from '../components/modals'\r\n\r\n\r\nexport function useHandleUseContact() {\r\n    const activeInteraction = useActiveInteraction()\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const openAddEmailModal = useOpenAddEmailModal()\r\n    const openAddPhoneModal = useOpenAddPhoneModal()\r\n    const channel = getChannel(activeInteraction)\r\n    const {getContactDetails} = useContactsStateMethods()\r\n\r\n    return useCallback((contact: ContactShortType) => {\r\n        assertDefined(activeInteraction)\r\n\r\n        const contactId = contact.id\r\n        const {firstName: contactFirstName, lastName: contactLastName} = contact\r\n\r\n        if (isCall(activeInteraction)) {\r\n            const parties = activeInteraction.allParties || []\r\n\r\n            if (parties.length) {\r\n                const {id: partyId, theirItemId, phone: partyPhone} = parties[0]\r\n\r\n                interactionStateMethods.useContact({\r\n                    partyId,\r\n                    itemId: theirItemId || '',\r\n                    contactId: contactId,\r\n                    firstName: contactFirstName || '',\r\n                    lastName: contactLastName || '',\r\n                })\r\n\r\n                if (partyPhone && phoneIsAbsent(partyPhone)) {\r\n                    openAddPhoneModal({\r\n                        phone: partyPhone,\r\n                        contactId,\r\n                        firstName: contactFirstName,\r\n                        lastName: contactLastName,\r\n                    })\r\n                }\r\n                return Promise.resolve()\r\n            }\r\n\r\n        } else if (isExternalChat(activeInteraction)) {\r\n            const parties = getChatParties(activeInteraction)\r\n\r\n            if (parties?.length) {\r\n                const {\r\n                    email,\r\n                    item_id: itemId,\r\n                    party_id: partyId,\r\n                    first_name: partyFirstName,\r\n                    last_name: partyLastName,\r\n                    phone: partyPhone,\r\n                } = parties[0]\r\n\r\n                const firstNameComputed = contactFirstName || partyFirstName || ''\r\n                const lastNameComputed = contactLastName || partyLastName || ''\r\n\r\n                interactionStateMethods.useContact({\r\n                    itemId,\r\n                    partyId,\r\n                    contactId: contactId,\r\n                    firstName: firstNameComputed,\r\n                    lastName: lastNameComputed,\r\n                })\r\n\r\n                if (partyPhone && phoneIsAbsent(partyPhone)) {\r\n                    openAddPhoneModal({\r\n                        phone: partyPhone,\r\n                        contactId,\r\n                        firstName: firstNameComputed,\r\n                        lastName: lastNameComputed,\r\n                    })\r\n                }\r\n\r\n                if (email) {\r\n                    openAddEmailModal({\r\n                        email,\r\n                        contactId,\r\n                        firstName: contactFirstName,\r\n                        lastName: contactLastName,\r\n                    })\r\n                }\r\n\r\n                if (isMessengerChannel(channel)) {\r\n                    setTimeout(() => {\r\n                        getContactDetails({id: contactId, force: true})\r\n                    }, 500)\r\n                }\r\n                return Promise.resolve()\r\n            }\r\n\r\n        } else if (isWorkItem(activeInteraction)) {\r\n            interactionStateMethods.useContact({\r\n                itemId: activeInteraction.id,\r\n                contactId: contactId,\r\n                firstName: contactFirstName ?? '',\r\n                lastName: contactLastName ?? '',\r\n            })\r\n            return Promise.resolve()\r\n        }\r\n        return Promise.reject()\r\n\r\n        function phoneIsAbsent(checkingPhone: string) {\r\n            return contact.phones?.every(p => p !== checkingPhone)\r\n        }\r\n    }, [activeInteraction, interactionStateMethods, openAddPhoneModal, channel, openAddEmailModal, getContactDetails])\r\n\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AddEmailModal} from './AddEmailModal'\r\n\r\n\r\nexport function useOpenAddEmailModal() {\r\n    return useModalComponentOpener(AddEmailModal)\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AddPhoneModal} from './AddPhoneModal'\r\n\r\n\r\nexport function useOpenAddPhoneModal() {\r\n    return useModalComponentOpener(AddPhoneModal)\r\n}\r\n","import {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isCall, isEmail, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\n\r\n\r\nexport function useIsUseContactButtonVisible() {\r\n    return useActiveInteractionProp(i => isCall(i) || isExternalChat(i) || isEmail(i))\r\n}\r\n","import type {ReactNode, RefObject} from 'react'\r\nimport type React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\ninterface ProfileActionsProps {\r\n    profileActionsRef: RefObject<HTMLDivElement>\r\n    children: ReactNode\r\n}\r\n\r\nexport const ProfileActions: React.FC<ProfileActionsProps> = ({profileActionsRef, children}) => {\r\n    return profileActionsRef.current && ReactDOM.createPortal(children, profileActionsRef.current)\r\n}\r\n","import type {RefObject} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {FieldValues, UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useContactFormDefinition, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsUnflatten} from '@bpinc/ad-contacts-state-types'\r\nimport {unflatten} from '@bpinc/lib-flat'\r\nimport {createLeadMappingStringToFormValueMap} from '@bpinc/lib-form-builder'\r\nimport {dirtyValues as getDirtyValues} from '@bpinc/lib-forms-base'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton as ButtonUI} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ProfileActions} from './ProfileActions'\r\n\r\n\r\ninterface EditActionsProps {\r\n    contactId: string\r\n    actionsRef: RefObject<HTMLDivElement>\r\n    onEditMode?: (edit: boolean) => void\r\n    form: UseFormReturn | null\r\n}\r\n\r\nexport const EditActions: React.FC<EditActionsProps> = ({\r\n    contactId,\r\n    actionsRef,\r\n    onEditMode,\r\n    form,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    const {saveContactDetails} = useContactsStateMethods()\r\n\r\n    const contactDetailsFormDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n\r\n    const handleSave = useCallback(() => {\r\n        const dirtyValues = getDirtyValues(\r\n            form?.formState.dirtyFields || {},\r\n            form?.getValues() || {},\r\n        )\r\n        const onSuccess = () => onEditMode?.(false)\r\n        const onError = () => {\r\n            onEditMode?.(false)\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.ContactSaveError,\r\n                tags: ['current-view'],\r\n                message: t.CONTACT.save_error(),\r\n            })\r\n        }\r\n\r\n        const onValid = () => {\r\n            assertDefined(contactDetailsFormDefinition)\r\n\r\n            if (!Object.keys(dirtyValues).length) {\r\n                onEditMode?.(false)\r\n                return\r\n            }\r\n\r\n            const flatContactDetails = createLeadMappingStringToFormValueMap(dirtyValues, contactDetailsFormDefinition)\r\n            const newDetails = unflatten<FieldValues, ContactDetailsUnflatten>(flatContactDetails)\r\n\r\n            saveContactDetails(contactId, newDetails, {onSuccess, onError})\r\n        }\r\n\r\n        form?.handleSubmit(onValid)()\r\n    }, [\r\n        form,\r\n        onEditMode,\r\n        showNotification,\r\n        t.CONTACT,\r\n        contactDetailsFormDefinition,\r\n        saveContactDetails,\r\n        contactId,\r\n    ])\r\n\r\n\r\n    return (\r\n        <ProfileActions profileActionsRef={actionsRef}>\r\n            <ButtonUI onClick={handleSave} basic primary>\r\n                {t.UNDEFINED.button_save_contact_text()}\r\n            </ButtonUI>\r\n\r\n            <ButtonUI onClick={() => onEditMode?.(false)} basic color=\"orange\">\r\n                {t.UNDEFINED.button_cancel_contact_text()}\r\n            </ButtonUI>\r\n        </ProfileActions>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useContact, useContactFormDefinition} from '@bpinc/ad-contacts-state-context'\r\nimport {contactToShortContact} from '@bpinc/ad-contacts-state-methods'\r\nimport {FormBuilder} from '@bpinc/ad-form-builder'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useHandleUseContact, useIsUseContactButtonVisible} from '@bpinc/lib-contact-details'\r\nimport {createFormValues} from '@bpinc/lib-form-builder'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {EditActions} from './EditActions'\r\nimport {ProfileActions} from './ProfileActions'\r\n\r\n\r\nexport const Details: FC<{\r\n    contactId: string\r\n    editMode?: boolean\r\n    actionsRef: React.RefObject<HTMLDivElement>\r\n    onMerge?: () => void\r\n    onEditMode?: (edit: boolean) => void\r\n}> = ({\r\n    contactId,\r\n    actionsRef,\r\n    editMode,\r\n    onMerge,\r\n    onEditMode,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {privileges} = useSessionState()\r\n\r\n    const [form, setForm] = useState<UseFormReturn | null>(null)\r\n\r\n    const formDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n    const contact = useContact(contactId)\r\n    const contactVariables = contact?.details || {}\r\n\r\n    const contactData = useMemo(() => contact?.data\r\n        ? {\r\n            contactId,\r\n            firstName: contact.data.firstName,\r\n            lastName: contact.data.lastName,\r\n        }\r\n        : undefined,\r\n    [contactId, contact?.data])\r\n\r\n    const iseUseButtonVisible = useIsUseContactButtonVisible()\r\n    const handleUse = useHandleUseContact()\r\n\r\n    if (!formDefinition) {\r\n        return null\r\n    }\r\n\r\n\r\n    const defaultValues = createFormValues(formDefinition, contactVariables)\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <EditActions\r\n                    actionsRef={actionsRef}\r\n                    onEditMode={onEditMode}\r\n                    contactId={contactId}\r\n                    form={form}\r\n                />\r\n            ) : (\r\n                <ProfileActions profileActionsRef={actionsRef}>\r\n                    {privileges.EDIT_CONTACTS && (\r\n                        <SemanticButton onClick={() => onEditMode?.(true)} basic primary>\r\n                            {t.UNDEFINED.button_edit_contact_text()}\r\n                        </SemanticButton>\r\n                    )}\r\n                    {onMerge && (\r\n                        <SemanticButton onClick={onMerge} basic primary>\r\n                            {t.GLOBAL.merge()}\r\n                        </SemanticButton>\r\n                    )}\r\n                    {iseUseButtonVisible && (\r\n                        <SemanticButton\r\n                            basic\r\n                            primary\r\n                            onClick={() => {\r\n                                assertDefined(contact?.data)\r\n                                handleUse(contactToShortContact(contact.data))\r\n                            }}\r\n                        >\r\n                            {t.UNDEFINED.button_use_contact_text()}\r\n                        </SemanticButton>\r\n                    )}\r\n                </ProfileActions>\r\n            )}\r\n\r\n            <FormBuilder\r\n                formDefinition={formDefinition}\r\n                onFormAvailable={setForm}\r\n                variables={contactVariables}\r\n                defaultValues={defaultValues}\r\n                view={!editMode}\r\n                contactData={contactData}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {Activities} from '@bpinc/ad-activities-ui'\r\nimport type {TabI} from '@bpinc/lib-ui-elements'\r\n\r\nimport {Details} from './Details'\r\n\r\n\r\ninterface Props {\r\n    contactId: string\r\n    tab: TabI<string>\r\n    editMode?: boolean\r\n    actionsRef: React.RefObject<HTMLDivElement>\r\n    onMerge?: () => void\r\n    onEditMode?: (edit: boolean) => void\r\n}\r\n\r\nexport const ProfileTabContent: FC<Props> = ({\r\n    contactId,\r\n    tab,\r\n    editMode,\r\n    actionsRef,\r\n    onMerge,\r\n    onEditMode,\r\n}) => {\r\n    if (tab.id === 'details') {\r\n        return (\r\n            <Details\r\n                contactId={contactId}\r\n                editMode={editMode}\r\n                actionsRef={actionsRef}\r\n                onMerge={onMerge}\r\n                onEditMode={onEditMode}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (tab.id === 'activities') {\r\n        return <Activities contactId={contactId} />\r\n    }\r\n\r\n    return <div>{`Content of \"${tab.title}\" tab`}</div>\r\n}\r\n","import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useContact, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {TabI} from '@bpinc/lib-ui-elements'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ProfileHeaderView} from './ProfileHeader/ProfileHeaderView'\r\nimport {ProfileTabContent} from './ProfileTabContent'\r\n\r\n\r\ninterface Props {\r\n    contactId: string\r\n    className?: string\r\n    editMode?: boolean\r\n    onMerge?: () => void\r\n    onEditMode?: (edit: boolean) => void\r\n}\r\n\r\nexport const Profile: React.FC<Props> = ({contactId, className, editMode, onMerge, onEditMode}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const tabs: TabI<string>[] = useMemo(() => [\r\n        {id: 'details', title: t.CRM.crm_details_tab()},\r\n        {id: 'activities', title: t.CRM.crm_history_tab()},\r\n        {id: 'pending', title: t.CRM.crm_pending_tab()},\r\n        {id: 'cases', title: t.CRM.crm_case_tab()},\r\n    ], [t])\r\n\r\n    const {\r\n        getContact,\r\n        getContactDetails,\r\n        getContactFormsDefinitions,\r\n    } = useContactsStateMethods()\r\n\r\n    const [activeTabId, setActiveTabId] = useState(tabs[0].id)\r\n\r\n    useEffect(() => {\r\n        getContactFormsDefinitions({})\r\n        getContact({id: contactId})\r\n        getContactDetails({id: contactId})\r\n    }, [contactId, getContact, getContactDetails, getContactFormsDefinitions])\r\n\r\n    const actionsRef = useRef<HTMLDivElement>(null)\r\n\r\n    const renderTabContent = useCallback((tab: TabI<string>) => {\r\n        return (\r\n            <ProfileTabContent\r\n                key={contactId}\r\n                tab={tab}\r\n                editMode={editMode}\r\n                contactId={contactId}\r\n                actionsRef={actionsRef}\r\n                onMerge={onMerge}\r\n                onEditMode={onEditMode}\r\n            />\r\n        )\r\n    }, [contactId, editMode, onMerge, onEditMode])\r\n\r\n    const contact = useContact(contactId)?.data\r\n\r\n    if (!contact) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-auto flex-col', className)}>\r\n            <ProfileHeaderView\r\n                contact={contact}\r\n                actionsRef={actionsRef}\r\n            />\r\n\r\n            <div className=\"relative flex flex-auto flex-col overflow-auto\">\r\n                <Tabs\r\n                    className=\"flex w-full flex-auto flex-col overflow-y-auto overflow-x-hidden\"\r\n                    tabs={tabs}\r\n                    activeTabId={activeTabId}\r\n                    renderTabContent={renderTabContent}\r\n                    onChange={setActiveTabId}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {RefObject} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton as ButtonUI} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ProfileActions} from './ProfileActions'\r\n\r\n\r\ninterface CreateActionsProps {\r\n    actionsRef: RefObject<HTMLDivElement>\r\n    closeCreateTab: Toggle\r\n    form: UseFormReturn | null\r\n    onContactCreated?: (contactId: string) => void\r\n}\r\n\r\nexport const CreateActions: React.FC<CreateActionsProps> = ({\r\n    actionsRef,\r\n    closeCreateTab,\r\n    form,\r\n    onContactCreated,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    const {createContact} = useContactsStateMethods()\r\n\r\n    const handleSave = useCallback(() => {\r\n        assertDefined(form)\r\n\r\n        const onSuccess = (contactId: string) => {\r\n            onContactCreated?.(contactId)\r\n            closeCreateTab()\r\n        }\r\n        const onError = () => {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.ContactSaveError,\r\n                tags: ['current-view'],\r\n                message: t.CONTACT.save_error(),\r\n            })\r\n        }\r\n\r\n        const onValid = () => {\r\n            createContact({details: form.getValues()}, {onSuccess, onError})\r\n        }\r\n\r\n        form?.handleSubmit(onValid)()\r\n\r\n    }, [form, onContactCreated, closeCreateTab, showNotification, t.CONTACT, createContact])\r\n\r\n    return (\r\n        <ProfileActions profileActionsRef={actionsRef}>\r\n            <ButtonUI onClick={handleSave} basic primary>\r\n                {t.UNDEFINED.button_save_contact_text()}\r\n            </ButtonUI>\r\n            <ButtonUI onClick={closeCreateTab} basic color=\"orange\">\r\n                {t.UNDEFINED.button_cancel_contact_text()}\r\n            </ButtonUI>\r\n        </ProfileActions>\r\n    )\r\n}\r\n","import type {RefObject} from 'react'\r\nimport React from 'react'\r\n\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\n\r\nimport {ProfileHeaderColumn, ProfileHeaderWrapper} from './ProfileHeaderLayout'\r\n\r\n\r\ninterface Props {\r\n    actionsRef: RefObject<HTMLDivElement>\r\n}\r\n\r\nexport const ProfileHeaderForm: React.FC<Props> = ({actionsRef}) => {\r\n    return (\r\n        <ProfileHeaderWrapper>\r\n            <ProfileHeaderColumn type=\"avatar\">\r\n                <AvatarLegacy\r\n                    type=\"contact\"\r\n                    size={74}\r\n                />\r\n            </ProfileHeaderColumn>\r\n            <ProfileHeaderColumn type=\"controls\">\r\n                <div ref={actionsRef} />\r\n            </ProfileHeaderColumn>\r\n        </ProfileHeaderWrapper>\r\n    )\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useContactFormDefinition, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\nimport {FormBuilder} from '@bpinc/ad-form-builder'\r\nimport {createFormValues} from '@bpinc/lib-form-builder'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {CreateActions} from './Details/CreateActions'\r\nimport {ProfileHeaderForm} from './ProfileHeader/ProfileHeaderForm'\r\n\r\n\r\ninterface Props {\r\n    className?: string\r\n    onCancel: () => void\r\n    initialData?: ContactDetailsType\r\n    onContactCreated?: (contactId: string) => void\r\n}\r\n\r\nexport const ProfileCreate: React.FC<Props> = ({className, onCancel, initialData, onContactCreated}) => {\r\n    const {\r\n        getContactFormsDefinitions,\r\n    } = useContactsStateMethods()\r\n\r\n    useEffect(() => {\r\n        getContactFormsDefinitions({})\r\n    }, [getContactFormsDefinitions])\r\n\r\n    const actionsRef = useRef<HTMLDivElement>(null)\r\n    const [form, setForm] = useState<UseFormReturn | null>(null)\r\n\r\n    const formDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n    const defaultValues = formDefinition && initialData && createFormValues(formDefinition, initialData)\r\n\r\n    if (!formDefinition) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-auto flex-col', className)}>\r\n            <ProfileHeaderForm actionsRef={actionsRef} />\r\n\r\n            <div className=\"relative flex flex-auto flex-col overflow-auto\">\r\n                <CreateActions\r\n                    actionsRef={actionsRef}\r\n                    closeCreateTab={onCancel}\r\n                    form={form}\r\n                    onContactCreated={onContactCreated}\r\n                />\r\n                <FormBuilder\r\n                    formDefinition={formDefinition}\r\n                    onFormAvailable={setForm}\r\n                    defaultValues={defaultValues}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {ActiveCase} from '@bpinc/ad-case-ui'\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Iframe} from '@bpinc/lib-ui-elements'\r\n\r\nimport {ActivityFormTab} from './ActivityForm/ActivityFormTab'\r\nimport {FrameTabContent} from './FrameTabContent'\r\nimport {Profile} from './Profile'\r\n\r\n\r\nexport const TabContent: React.FC = () => {\r\n    const {\r\n        shownWorkspaceTabId,\r\n        shownWorkspaceTabs,\r\n    } = useInteractionWorkspaceState()\r\n\r\n    return (\r\n        <>\r\n            {shownWorkspaceTabs?.map(tab => {\r\n                const hiddenStyles = tcn({\r\n                    'hidden': shownWorkspaceTabId !== tab.id,\r\n                })\r\n\r\n                switch (tab.type) {\r\n                    case 'profile':\r\n                        return (\r\n                            <Profile\r\n                                key={tab.id}\r\n                                contactId={tab.contactId}\r\n                                className={hiddenStyles}\r\n                            />\r\n                        )\r\n                    case 'iframe':\r\n                        return (\r\n                            <Iframe\r\n                                src={tab.url}\r\n                                key={tab.id}\r\n                                className={tcn('h-full w-full', hiddenStyles)}\r\n                            />\r\n                        )\r\n                    case 'case':\r\n                        return <ActiveCase key={tab.id} id={tab.id} className={hiddenStyles} />\r\n                    case 'iframe-html':\r\n                        return <FrameTabContent key={tab.id} content={tab.content} className={hiddenStyles} />\r\n                    case 'activityForm':\r\n                        return <ActivityFormTab key={tab.id} className={hiddenStyles} />\r\n                    default:\r\n                        return null\r\n                }\r\n            })}\r\n        </>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContactDisplayName} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport type {ScreenPopTab} from '@bpinc/ad-screen-pop-state-types'\r\nimport {IconClose} from '@bpinc/lib-icons'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype TabTitleContentProps = {\r\n    tab: ScreenPopTab\r\n}\r\n\r\nexport const TabTitleContent: React.FC<TabTitleContentProps> = ({tab}) => {\r\n    const {\r\n        removeItemTab,\r\n    } = useInteractionWorkspaceState()\r\n    const contactId = tab.type === 'profile' ? tab.contactId : undefined\r\n    const tabTitleText = useContactDisplayName(contactId) || tab.title\r\n\r\n    return (\r\n        <>\r\n            <span>{tabTitleText}</span>\r\n            {tab.type === 'iframe-html' || tab.type === 'iframe' && (\r\n                <SemanticButton\r\n                    transparent\r\n                    className=\"ml-1 flex h-6 w-6 items-center justify-center opacity-70 transition-opacity duration-300 hover:opacity-100\"\r\n                    onClick={e => {\r\n                        e.preventDefault()\r\n                        e.stopPropagation()\r\n                        removeItemTab(tab.id)\r\n                    }}\r\n                >\r\n                    <IconClose className=\"h-3.5 w-3.5\" />\r\n                </SemanticButton>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport type {ScreenPopTab} from '@bpinc/ad-screen-pop-state-types'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useAutoRedirectToActivityFormTab} from '../hooks/useAutoRedirectToActivityFormTab'\r\nimport {TabContent} from './TabContent'\r\nimport {TabTitleContent} from './TabTitleContent'\r\n\r\n\r\nconst DEFAULT_PROFILE_PAGE_TABS: ScreenPopTab[] = []\r\n\r\nexport const InteractionWorkspacePage: React.FC = () => {\r\n    const {\r\n        shownWorkspaceTabs,\r\n        shownWorkspaceTabId,\r\n        activateItemTab,\r\n    } = useInteractionWorkspaceState()\r\n\r\n    const tabs = shownWorkspaceTabs || DEFAULT_PROFILE_PAGE_TABS\r\n\r\n    useAutoRedirectToActivityFormTab()\r\n\r\n    const changeActiveTab = useCallback((tabId: string) => {\r\n        activateItemTab(tabId)\r\n    }, [activateItemTab])\r\n\r\n    if (!tabs.length || !shownWorkspaceTabId) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Tabs\r\n            activeTabId={shownWorkspaceTabId}\r\n            renderTabContent={TabContent}\r\n            renderTab={tab => <TabTitleContent tab={tab} /> }\r\n            tabs={tabs}\r\n            onChange={changeActiveTab}\r\n            className=\"flex h-full w-full flex-1 flex-col\"\r\n        />\r\n    )\r\n}\r\n","import produce from 'immer'\r\n\r\nimport type {MediaType} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\nexport interface PageTitleState {\r\n    pageIsVisible: boolean\r\n    events: Event[]\r\n}\r\n\r\ninterface Event {\r\n    type: 'interaction' | 'chatMessage' | 'calendar'\r\n    title?: string\r\n    id: string\r\n}\r\n\r\nexport type Action =\r\n    | InteractionAppearedAction\r\n    | InteractionDisappearedAction\r\n    | CalendarEventAppearedAction\r\n    | CalendarEventDisappearedAction\r\n    | ChatMessageAppearedAction\r\n    | PageVisibilityChangedAction\r\n    | ResetStateAction\r\n\r\ninterface InteractionAppearedAction {\r\n    type: 'interactionAppeared'\r\n    mediaType: MediaType | undefined\r\n    id: string\r\n}\r\n\r\ninterface InteractionDisappearedAction {\r\n    type: 'interactionDisappeared'\r\n    id: string\r\n}\r\n\r\ninterface CalendarEventDisappearedAction {\r\n    type: 'calendarEventDisappeared'\r\n    id: string\r\n}\r\n\r\ninterface CalendarEventAppearedAction {\r\n    type: 'calendarEventAppeared'\r\n    id: string\r\n}\r\n\r\ninterface ChatMessageAppearedAction {\r\n    type: 'chatMessageAppeared'\r\n    id: string\r\n}\r\n\r\ninterface PageVisibilityChangedAction {\r\n    type: 'pageVisibilityChanged'\r\n    pageIsVisible: boolean\r\n}\r\n\r\ninterface ResetStateAction {\r\n    type: 'resetState'\r\n}\r\n\r\nexport const initialState = {\r\n    events: [],\r\n    pageIsVisible: true,\r\n}\r\n\r\nexport const reducer = produce((state: PageTitleState, action: Action) => {\r\n    if (isPageVisibilityChanged(action)) {\r\n        state.pageIsVisible = action.pageIsVisible\r\n        state.events = initialState.events\r\n    }\r\n\r\n    if (!state.pageIsVisible) {\r\n        if (isInteractionAppeared(action)) {\r\n            state.events.push({\r\n                type: 'interaction',\r\n                title: getIncomingTitle(action.mediaType),\r\n                id: action.id,\r\n            })\r\n        }\r\n        if (isNewInteractionDisappeared(action)) {\r\n            const eventIndex = state.events.findIndex(e => e.id === action.id)\r\n            state.events.splice(eventIndex, 1)\r\n        }\r\n\r\n        if (isCalendarEventAppeared(action)) {\r\n            state.events.push({\r\n                type: 'calendar',\r\n                title: getIncomingTitle('calendar'),\r\n                id: action.id,\r\n            })\r\n        }\r\n\r\n        if (isCalendarEventDisappeared(action)) {\r\n            const eventIndex = state.events.findIndex(e => e.id === action.id)\r\n            state.events.splice(eventIndex, 1)\r\n        }\r\n\r\n        if (isChatMessageAppeared(action)) {\r\n            state.events.push({\r\n                type: 'chatMessage',\r\n                title: getIncomingTitle('chatMessage'),\r\n                id: action.id,\r\n            })\r\n        }\r\n    }\r\n})\r\n\r\nfunction isInteractionAppeared(action: Action): action is InteractionAppearedAction {\r\n    return action.type === 'interactionAppeared'\r\n}\r\n\r\nfunction isNewInteractionDisappeared(action: Action): action is InteractionDisappearedAction {\r\n    return action.type === 'interactionDisappeared'\r\n}\r\n\r\nfunction isCalendarEventAppeared(action: Action): action is CalendarEventAppearedAction {\r\n    return action.type === 'calendarEventAppeared'\r\n}\r\n\r\nfunction isCalendarEventDisappeared(action: Action): action is CalendarEventDisappearedAction {\r\n    return action.type === 'calendarEventDisappeared'\r\n}\r\n\r\nfunction isChatMessageAppeared(action: Action): action is ChatMessageAppearedAction {\r\n    return action.type === 'chatMessageAppeared'\r\n}\r\n\r\nfunction isPageVisibilityChanged(action: Action): action is PageVisibilityChangedAction {\r\n    return action.type === 'pageVisibilityChanged'\r\n}\r\n\r\nfunction isResetState(action: Action): action is ResetStateAction {\r\n    return action.type === 'resetState'\r\n}\r\n\r\nfunction getIncomingTitle(type?: MediaType | 'calendar' | 'chatMessage') {\r\n    switch (type) {\r\n        case 'chatMessage':\r\n            return 'GLOBAL.heading_incomingMessage'\r\n        case 'workitem':\r\n            return 'GLOBAL.heading_incomingPreview'\r\n        case 'voice':\r\n            return 'GLOBAL.heading_incomingCall'\r\n        case 'forum':\r\n            return 'GLOBAL.heading_incomingForum'\r\n        case 'chat':\r\n            return 'GLOBAL.heading_incomingChat'\r\n        case 'email':\r\n            return 'GLOBAL.heading_incomingEmail'\r\n        case 'calendar':\r\n            return 'GLOBAL.heading_calendarAlert'\r\n    }\r\n}\r\n","import {useReducer} from 'react'\r\n\r\nimport {\r\n    useCalendarEventsDispatchers,\r\n    useChatMessagesDispatcher,\r\n    useInteractionDispatchers,\r\n    useLogoutStateResetter,\r\n    usePageVisibilityChangedDispatcher,\r\n    useTitleBlinker,\r\n} from './hooks'\r\nimport {initialState, PageTitleState, reducer} from './reducer'\r\n\r\nexport function usePageTitle() {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n    useTitleBlinker(state as PageTitleState)\r\n    \r\n    useInteractionDispatchers(dispatch)\r\n    useCalendarEventsDispatchers(dispatch)\r\n    useChatMessagesDispatcher(dispatch)\r\n    usePageVisibilityChangedDispatcher(dispatch)\r\n    \r\n    useLogoutStateResetter(dispatch)\r\n}\r\n","import {useCallback, useEffect, useRef} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {PageTitleState} from '../reducer'\r\n\r\n\r\nexport function useTitleBlinker(state: PageTitleState) {\r\n    const {t} = useLocalizationState()\r\n\r\n    const initialTitleRef = useRef(document.title)\r\n    const blinkingInterval = useRef(0)\r\n\r\n    const blinkTitle = useCallback(\r\n        function blinkTitleCallback(newTitleTranslationKey: string | undefined) {\r\n            const defaultString = 'Unknown / incoming'\r\n            const title = newTitleTranslationKey ? get(t, newTitleTranslationKey)() : defaultString\r\n\r\n            blinkingInterval.current = setInterval(() => {\r\n                document.title = document.title === title ? initialTitleRef.current : title\r\n            }, 700)\r\n        }, [t],\r\n    )\r\n\r\n    const stopBlinking = useCallback(\r\n        function stopBlinkingCallback() {\r\n            clearInterval(blinkingInterval.current)\r\n            document.title = initialTitleRef.current\r\n        }, [],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        if (state.events.length) {\r\n            const lastEvent = state.events[state.events.length - 1]\r\n            blinkTitle(lastEvent?.title)\r\n        } else {\r\n            stopBlinking()\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(blinkingInterval.current)\r\n        }\r\n    }, [blinkTitle, state.events, stopBlinking])\r\n}\r\n","import {type Dispatch, useEffect, useMemo} from 'react'\r\n\r\nimport {useInteractions, useModalInteractionIds} from '@bpinc/ad-interaction-state-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\n\r\nimport type {Action} from '../reducer'\r\n\r\n\r\nexport function useInteractionDispatchers(dispatch: Dispatch<Action>) {\r\n    const items = useInteractions()\r\n    const modalItemIds = useModalInteractionIds()\r\n\r\n    const modalItems = useMemo(function getModalItems() {\r\n        return modalItemIds.map(id => items.find(item => item.id === id)).filter(Boolean) as Item[]\r\n    }, [items, modalItemIds])\r\n\r\n    const prevModalItems = usePrevious(modalItems)\r\n    const prevModalItemsLength = prevModalItems?.length ?? 0\r\n\r\n    useEffect(() => {\r\n        if (modalItems.length > prevModalItemsLength) {\r\n            const lastModalItem = modalItems[modalItems.length - 1]\r\n            dispatch({type: 'interactionAppeared', id:  lastModalItem.id, mediaType: lastModalItem.mediaType})\r\n        } else if (modalItems.length < prevModalItemsLength) {\r\n            const lastModalItem = prevModalItems?.[prevModalItems.length - 1]\r\n            lastModalItem && dispatch({type: 'interactionDisappeared', id:  lastModalItem.id})\r\n        }\r\n    }, [dispatch, modalItems, modalItems.length, prevModalItems, prevModalItemsLength])\r\n}\r\n","import type {Dispatch} from 'react'\r\nimport {useEffect} from 'react'\r\n\r\nimport {useCalendarAlertState} from '@bpinc/cal-alert-state-context'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\n\r\nimport type {Action} from '../reducer'\r\n\r\n\r\nexport function useCalendarEventsDispatchers(dispatch: Dispatch<Action>) {\r\n    const calendarEventAlerts = useCalendarAlertState('calendarEventAlerts')\r\n\r\n    const prevCalendarItems = usePrevious(calendarEventAlerts)\r\n    const prevCalendarItemsLength = prevCalendarItems?.length ?? 0\r\n\r\n    useEffect(() => {\r\n        if (calendarEventAlerts.length > prevCalendarItemsLength) {\r\n            const lastCalendarAlert = calendarEventAlerts[calendarEventAlerts.length - 1]\r\n            dispatch({type: 'calendarEventAppeared', id: lastCalendarAlert.id})\r\n        } else if (calendarEventAlerts.length < prevCalendarItemsLength) {\r\n            const lastCalendarAlert = prevCalendarItems?.[prevCalendarItems.length - 1]\r\n            lastCalendarAlert && dispatch({type: 'calendarEventDisappeared', id: lastCalendarAlert.id})\r\n        }\r\n    }, [calendarEventAlerts, calendarEventAlerts.length, dispatch, prevCalendarItems, prevCalendarItemsLength])\r\n}\r\n","import type {Dispatch} from 'react'\r\nimport {useEffect} from 'react'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\n\r\nimport type {Action} from '../reducer'\r\n\r\n\r\nexport function useChatMessagesDispatcher(dispatch: Dispatch<Action>) {\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector?.dispenser.subscribe({\r\n            onNewMessage: newMessage => {\r\n                dispatch({\r\n                    type: 'chatMessageAppeared',\r\n                    id: newMessage.msg_id,\r\n                })\r\n\r\n            },\r\n        })\r\n        return () => {\r\n            subscription?.unsubscribe()\r\n        }\r\n    }, [dispatch, interactionChatStateConnector?.dispenser])\r\n}\r\n","import {Dispatch, useEffect} from 'react'\r\n\r\nimport {usePageVisibility} from '@bpinc/lib-helpers'\r\n\r\nimport {Action} from '../reducer'\r\n\r\nexport function usePageVisibilityChangedDispatcher(dispatch: Dispatch<Action>) {\r\n    const pageIsVisible = usePageVisibility()\r\n    \r\n    useEffect(() => {\r\n        dispatch({type: 'pageVisibilityChanged', pageIsVisible})\r\n    }, [dispatch, pageIsVisible])\r\n}\r\n","import type {Dispatch} from 'react'\r\nimport {useCallback} from 'react'\r\n\r\nimport {useOnLogout} from '@bpinc/ad-session-context'\r\n\r\nimport type {Action} from '../reducer'\r\n\r\n\r\nexport function useLogoutStateResetter(dispatch: Dispatch<Action>) {\r\n    const resetState = useCallback(function resetStateCallback() {\r\n        dispatch({type: 'resetState'})\r\n    }, [])\r\n\r\n    useOnLogout(resetState)\r\n}\r\n","import type {ModalVisualParams} from '@bpinc/state-modals-types'\r\n\r\n/** Default visual properties of modals */\r\nexport const defaultModalsConfig: ModalVisualParams & {__ts__: number} = {\r\n    /* Date when default config was set */\r\n    __ts__: Date.now(),\r\n    notification: {\r\n        compact: true,\r\n        hideWhileActiveInteraction: false,\r\n        position: undefined,\r\n    },\r\n    calendar_event_notification: {\r\n        position: undefined,\r\n    },\r\n    quality_management_monitor: {\r\n        position: undefined,\r\n    },\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {Modal, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype ExitSupervisingWarningModalProps = CommonModalProps & {\r\n    actionCallback: () => void\r\n}\r\n\r\nexport const ExitSupervisingWarningModal: FC<\r\n    ExitSupervisingWarningModalProps\r\n> = ({actionCallback, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            header={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning()}\r\n            content={t.WINDOW_POPUP_TITLES_AND_MESSAGES.openingEmailFromSupervisingStateConfirmation()}\r\n            actions={\r\n                <Modal.Actions>\r\n                    <SemanticButton onClick={() => props.onClose()} enabledInOffline>\r\n                        {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonClose()}\r\n                    </SemanticButton>\r\n                    <SemanticButton\r\n                        primary\r\n                        onClick={() => {\r\n                            actionCallback()\r\n                            props.onClose()\r\n                        }}\r\n                    >\r\n                        {t.GLOBAL.ok()}\r\n                    </SemanticButton>\r\n                </Modal.Actions>\r\n            }\r\n        />\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRemoteAssistStateConnector} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useRemoteAssistStateSubscription() {\r\n    const connector = useRemoteAssistStateConnector()\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    const setItemState = useInteractionUIItemStateSetter()\r\n\r\n    useEffect(\r\n        function remoteAssistStateSubscription() {\r\n            const subscription = connector.dispenser.subscribe({\r\n                onSessionStarted: ({globalInteractionId, clientUrl}) => {\r\n                    const realItem = itemsRef.current.find(item => {\r\n                        return getGlobalInteractionId(item) === globalInteractionId\r\n                    })\r\n                    const internalChatItem = itemsRef.current.find(item => {\r\n                        return item.id === globalInteractionId\r\n                    })\r\n                    const item = realItem ?? internalChatItem\r\n                    if (!item) {\r\n                        return\r\n                    }\r\n                    setItemState(item.id, itemState => ({\r\n                        ...itemState,\r\n                        chatMessage: itemState.chatMessage + ' ' + clientUrl,\r\n                    }))\r\n                },\r\n            })\r\n            return () => subscription.unsubscribe()\r\n        },\r\n        [connector, setItemState, itemsRef],\r\n    )\r\n}\r\n","import {useBPClientStateSubscription} from './useBPClientStateSubscription'\r\nimport {useCaseStateSubscription} from './useCaseStateSubscription'\r\nimport {useInteractionChatStateSubscription} from './useInteractionChatStateSubscription'\r\nimport {useInteractionStateSubscription} from './useInteractionStateSubscription'\r\nimport {useRemoteAssistStateSubscription} from './useRemoteAssistStateSubscription'\r\n\r\n\r\nexport function useStateSubscriptions() {\r\n    useBPClientStateSubscription()\r\n    useCaseStateSubscription()\r\n    useInteractionChatStateSubscription()\r\n    useInteractionStateSubscription()\r\n    useRemoteAssistStateSubscription()\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {useCommunicatorFloatingStateSetter} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationStateRef} from '@bpinc/lib-communicator-navigation-state'\r\n\r\n\r\nexport function useBPClientStateSubscription() {\r\n    const connector = useBpClientStateConnector()\r\n    const navigationStateRef = useNavigationStateRef()\r\n    const setCommunicatorFloatingState = useCommunicatorFloatingStateSetter()\r\n\r\n    useEffect(\r\n        function bpClientSubscription() {\r\n            const {setActivePage, activePage} = navigationStateRef.current\r\n            const subscription = connector?.dispenser.subscribe({\r\n                onNavigateToInteraction: () => {\r\n                    setCommunicatorFloatingState(state => (state === 'closed' ? 'floating' : state))\r\n                    if (activePage.name !== AppRoutes.Interactions) {\r\n                        setActivePage({name: AppRoutes.Interactions})\r\n                    }\r\n                },\r\n            })\r\n            return () => subscription?.unsubscribe()\r\n        },\r\n        [setCommunicatorFloatingState, connector, navigationStateRef],\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useCaseStateConnector, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useOpenInfoModal} from '@bpinc/lib-modals-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {ExitSupervisingWarningModal} from './ExitSupervisingWarningModal'\r\n\r\n\r\nexport function useCaseStateSubscription() {\r\n    const caseStateConnector = useCaseStateConnector()\r\n    const {openCase, replyEmail} = useCaseStateMethods()\r\n    const {t} = useLocalizationState()\r\n    const openInfoModal = useOpenInfoModal()\r\n    const openExitSupervisingWarningModal = useModalComponentOpener(\r\n        ExitSupervisingWarningModal,\r\n    )\r\n\r\n    useEffect(() => {\r\n        const subscription = caseStateConnector?.dispenser.subscribe({\r\n            onQueueMovementFailed: (failedItemsCount: number) => {\r\n                openInfoModal({\r\n                    body: t.EMAIL.itemsWithoutServiceStillInPersonalQueue(\r\n                        failedItemsCount.toString(),\r\n                    ),\r\n                })\r\n            },\r\n            onCaseOpenAttemptedWhileSupervising: params => {\r\n                openExitSupervisingWarningModal({\r\n                    actionCallback: () =>\r\n                        openCase({\r\n                            ...params,\r\n                            forceOpenWhileSupervising: true,\r\n                        }),\r\n                })\r\n            },\r\n            onReplyEmailAttemptedWhileSupervising: params => {\r\n                openExitSupervisingWarningModal({\r\n                    actionCallback: () =>\r\n                        replyEmail({\r\n                            ...params,\r\n                            forceOpenWhileSupervising: true,\r\n                        }),\r\n                })\r\n            },\r\n        })\r\n        return () => {\r\n            subscription?.unsubscribe()\r\n        }\r\n    }, [\r\n        caseStateConnector?.dispenser,\r\n        openCase,\r\n        openExitSupervisingWarningModal,\r\n        openInfoModal,\r\n        replyEmail,\r\n        t.EMAIL,\r\n        t.GLOBAL,\r\n        t.WINDOW_POPUP_TITLES_AND_MESSAGES,\r\n    ])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {CobrowsingStartedData, SwitchItemChannelData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useOpenChannel} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nexport function useInteractionChatStateSubscription() {\r\n    const interactionChatState = useInteractionChatStateConnector()\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    const openChannel = useOpenChannel()\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatState.dispenser.subscribe({\r\n            onSwitchItemChannel: openChannelOnSwitch,\r\n            onCobrowsingStarted: openCobrowsingWindow,\r\n        })\r\n\r\n        return () => {\r\n            subscription.unsubscribe()\r\n        }\r\n\r\n        function openChannelOnSwitch({interactionStepId, channel}: SwitchItemChannelData) {\r\n            const item = itemsRef.current.find(it => {\r\n                return getInteractionStepId(it) === interactionStepId\r\n            })\r\n            if (!item) {\r\n                return\r\n            }\r\n            openChannel(channel, item.id)\r\n        }\r\n\r\n        function openCobrowsingWindow(cobrowsingPayload: CobrowsingStartedData) {\r\n            cobrowsingPayload.cobrowsingLink && window.open(cobrowsingPayload.cobrowsingLink, '_blank', '')\r\n        }\r\n\r\n    }, [interactionChatState, itemsRef, openChannel])\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useInteractionStateConnector} from '@bpinc/ad-interaction-state-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useCommunicatorFloatingStateSetter} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationStateRef} from '@bpinc/lib-communicator-navigation-state'\r\nimport {isParallelItemAtom} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useInteractionStateSubscription() {\r\n    const navigationStateRef = useNavigationStateRef()\r\n    const setCommunicatorFloatingState = useCommunicatorFloatingStateSetter()\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n    const isParallelItem = useAtomValue(isParallelItemAtom)\r\n    const openInteractionsPage = useCallback(\r\n        function openInteractionsPageCallback(item: Item) {\r\n            const {activePage, setActivePage} = navigationStateRef.current\r\n            setCommunicatorFloatingState(state => (state === 'closed' ? 'floating' : state))\r\n            if (activePage.name !== AppRoutes.Interactions) {\r\n                if (!isParallelItem(item.id)) {\r\n                    setActivePage({\r\n                        name: AppRoutes.Interactions,\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        [isParallelItem, navigationStateRef, setCommunicatorFloatingState],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionStateConnector?.dispenser.subscribe({\r\n            onItemAccepted: openInteractionsPage,\r\n            onActiveItemChanged: openInteractionsPage,\r\n        })\r\n        return () => subscription?.unsubscribe()\r\n    }, [\r\n        interactionStateConnector?.dispenser,\r\n        openInteractionsPage,\r\n    ])\r\n}\r\n","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgAgent = function SvgAgent(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 14,\n    viewBox: \"0 0 16 14\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Rectangle 7830\",\n    fill: \"rgba(255,255,255,0)\",\n    d: \"M1 0h14v14H1z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.795 14v-.875h5.88a.584.584 0 0 0 .385-.135.437.437 0 0 0 .162-.353V6.61a5.291 5.291 0 0 0-1.837-4.107A6.343 6.343 0 0 0 8 .855a6.343 6.343 0 0 0-4.385 1.648A5.291 5.291 0 0 0 1.778 6.61v4.967h-.444a1.34 1.34 0 0 1-.939-.363 1.173 1.173 0 0 1-.394-.9V8.665a1.042 1.042 0 0 1 .259-.7 2.041 2.041 0 0 1 .63-.494l.015-1.075a5.961 5.961 0 0 1 .63-2.537 6.868 6.868 0 0 1 1.55-2.033A7.04 7.04 0 0 1 5.319.478 7.494 7.494 0 0 1 8 0a7.474 7.474 0 0 1 2.679.483 7.1 7.1 0 0 1 2.234 1.345 6.78 6.78 0 0 1 1.55 2.03 6.04 6.04 0 0 1 .632 2.538l.015 1.053a2.058 2.058 0 0 1 .621.439.919.919 0 0 1 .268.663v1.895a.918.918 0 0 1-.268.663 2.056 2.056 0 0 1-.621.439v1.089a1.279 1.279 0 0 1-.42.967 1.427 1.427 0 0 1-1.016.4Zm-2.12-5.654a.693.693 0 0 1-.479-.184.589.589 0 0 1-.2-.455.615.615 0 0 1 .2-.464.676.676 0 0 1 .479-.193.676.676 0 0 1 .479.193.615.615 0 0 1 .2.464.589.589 0 0 1-.2.455.693.693 0 0 1-.479.184Zm4.65 0a.693.693 0 0 1-.479-.184.589.589 0 0 1-.2-.455.615.615 0 0 1 .2-.464.676.676 0 0 1 .479-.193.676.676 0 0 1 .479.193.615.615 0 0 1 .2.464.589.589 0 0 1-.2.455.693.693 0 0 1-.479.184Zm-7.021-1.39a4.143 4.143 0 0 1 1.285-3.35 4.735 4.735 0 0 1 3.455-1.385 4.883 4.883 0 0 1 3.05 1.017 4.172 4.172 0 0 1 1.623 2.673 6.659 6.659 0 0 1-3.278-.887 5.847 5.847 0 0 1-2.321-2.406A5.7 5.7 0 0 1 5.78 5.272 6.125 6.125 0 0 1 3.3 6.956Z\",\n    fill: \"rgba(0,0,0,0.87)\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgAgent);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"2285a73f29a06aad3fb2f42564dc2cec.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgBackwards = function SvgBackwards(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Rewind 15 secs\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.072 2 4.607 4.854l.55.352 3.915 2.5v-1.95l3.346 1.91V5.294a7.94 7.94 0 1 1-8.364 7.924.418.418 0 1 0-.836 0 8.782 8.782 0 1 0 9.2-8.771V2.043l-3.346 1.91Zm2.509 1.484v1.3a.418.418 0 0 0 0 .136v1.306l-2.4-1.371Zm-3.345.042v2.656L6.159 4.854Zm1.255 6.345c0 .941-.836 1.255-1.673 1.255v.836h1.673v4.6h.836V9.873Zm2.614 0-.457 3.074.725.341a1.464 1.464 0 1 1 1.09 2.44 1.442 1.442 0 0 1-1.464-1.255h-.836a2.261 2.261 0 0 0 2.3 2.091 2.3 2.3 0 1 0-.845-4.436l.213-1.416h2.515v-.837Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgBackwards);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"14928801dbbf257fc8d021fb80f16d54.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgChat = function SvgChat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 18,\n    height: 17.215,\n    viewBox: \"0 0 18 17.215\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 0C4.062 0 0 3.478 0 7.823a7.505 7.505 0 0 0 3.507 6.168 2.317 2.317 0 0 1-.11.625 6.378 6.378 0 0 1-.97 2.021l-.4.564.7.012a5.377 5.377 0 0 0 4.046-1.839 10.245 10.245 0 0 0 2.232.27c4.937 0 9-3.478 9-7.823S13.937 0 9 0Zm0 .736c4.6 0 8.264 3.2 8.264 7.087S13.596 14.91 9 14.91a9.617 9.617 0 0 1-2.268-.27l-.221-.049-.147.184a5.506 5.506 0 0 1-2.943 1.582 7.441 7.441 0 0 0 .687-1.545 4.3 4.3 0 0 0 .159-.981v-.2l-.172-.11a6.8 6.8 0 0 1-3.36-5.7C.737 3.937 4.401.737 9 .737Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgChat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"42bc94eda1eac630b1ae920445001afe.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgChevronDown = function SvgChevronDown(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17.889 10.006-1.454-1.454-4.429 4.429-4.429-4.429-1.454 1.454 5.883 5.882Z\",\n    fill: \"#757575\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgChevronDown);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0dce51339d163af4fa244c572784345d.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgChevronRight = function SvgChevronRight(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 5,\n    height: 10,\n    viewBox: \"0 0 5 10\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M.99 9.808A.538.538 0 0 1 .584 10a.621.621 0 0 1-.583-.665.732.732 0 0 1 .176-.485l3.428-3.856L.177 1.149A.743.743 0 0 1 .001.664a.621.621 0 0 1 .583-.665.521.521 0 0 1 .4.192l3.81 4.284A.751.751 0 0 1 5 4.999a.765.765 0 0 1-.2.519Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgChevronRight);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"9e1686086ea5e0933e7065544ed84689.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgClient = function SvgClient(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 14,\n    viewBox: \"0 0 16 14\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Rectangle 7830\",\n    fill: \"rgba(255,255,255,0)\",\n    d: \"M0 0h16v14H0z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"account_box_FILL0_wght200_GRAD0_opsz24 (1)\",\n    d: \"M1.875 12.455a8.82 8.82 0 0 1 2.745-1.827A8.523 8.523 0 0 1 8 9.961a8.523 8.523 0 0 1 3.38.667 8.82 8.82 0 0 1 2.745 1.827V1.413a.515.515 0 0 0-.168-.37.515.515 0 0 0-.37-.168H2.413a.515.515 0 0 0-.37.168.515.515 0 0 0-.168.37ZM8 7.942a2.534 2.534 0 0 0 1.863-.762 2.534 2.534 0 0 0 .762-1.863 2.534 2.534 0 0 0-.762-1.863A2.534 2.534 0 0 0 8 2.692a2.534 2.534 0 0 0-1.863.762 2.534 2.534 0 0 0-.762 1.863 2.534 2.534 0 0 0 .762 1.863A2.534 2.534 0 0 0 8 7.942ZM2.413 14a1.369 1.369 0 0 1-1.009-.4 1.369 1.369 0 0 1-.4-1.009V1.418a1.369 1.369 0 0 1 .4-1.009 1.369 1.369 0 0 1 1.009-.4h11.173a1.369 1.369 0 0 1 1.009.4 1.369 1.369 0 0 1 .4 1.009v11.173a1.369 1.369 0 0 1-.4 1.009 1.369 1.369 0 0 1-1.009.4Zm.236-.875h10.7v-.151a7.73 7.73 0 0 0-2.514-1.611 7.8 7.8 0 0 0-2.837-.526 7.885 7.885 0 0 0-2.812.517 7.908 7.908 0 0 0-2.539 1.586ZM8 7.067a1.683 1.683 0 0 1-1.233-.517 1.683 1.683 0 0 1-.517-1.233 1.683 1.683 0 0 1 .517-1.233A1.683 1.683 0 0 1 8 3.567a1.683 1.683 0 0 1 1.233.517 1.683 1.683 0 0 1 .517 1.233 1.683 1.683 0 0 1-.517 1.233A1.683 1.683 0 0 1 8 7.067Zm0-.402Z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgClient);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"9615169cd8c518f54a70b4308b2da5f3.svg\";","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgClose = function SvgClose(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(-.148)\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    \"data-name\": \"Ellipse 264\",\n    cx: 12,\n    cy: 12,\n    r: 12,\n    transform: \"translate(.148)\",\n    fill: \"rgba(255,255,255,0)\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 4802\",\n    d: \"m11.562 13.286-4.715 4.715-1.286-1.285 4.715-4.715-4.715-4.715 1.286-1.285 4.715 4.715 4.714-4.715 1.285 1.285-4.714 4.715 4.714 4.715-1.285 1.285Z\",\n    fill: \"#767676\"\n  }))));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgClose);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"35764bcc3f0a6548c05862ed3e35d057.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgCollapse = function SvgCollapse(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.429 3a.428.428 0 0 0-.3.735l6.122 6.122H5.146a.428.428 0 1 0 0 .857h5.564V5.146a.428.428 0 1 0-.857 0v4.106L3.736 3.13A.428.428 0 0 0 3.429 3Zm17.129 0a.428.428 0 0 0-.294.13l-6.122 6.122V5.146a.428.428 0 1 0-.857 0v5.564h5.568a.428.428 0 1 0 0-.857h-4.106l6.122-6.122a.428.428 0 0 0-.311-.735ZM5.146 13.284a.428.428 0 1 0 0 .857h4.106L3.13 20.263a.429.429 0 1 0 .606.606l6.122-6.122v4.106a.428.428 0 1 0 .857 0v-5.569Zm8.138 0v5.568a.428.428 0 1 0 .857 0v-4.106l5.269 5.264.857.857a.428.428 0 0 0 .35.13l.042-.006a.428.428 0 0 0 .214-.729l-.832-.832-.031-.02-5.265-5.265h4.106a.428.428 0 1 0 0-.857Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgCollapse);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"d942639bfdbf8eeb00cc837e9afc5a64.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDissatisfied = function SvgDissatisfied(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 6\",\n    d: \"M0 0h16v16H0Z\",\n    fill: \"rgba(0,0,0,0)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 7\",\n    d: \"M0 8a8 8 0 0 1 7.992-8A8 8 0 0 1 16 8a8 8 0 0 1-8.008 8A8 8 0 0 1 0 8Zm1.6 0A6.4 6.4 0 0 0 8 14.4 6.4 6.4 0 0 0 14.4 8 6.4 6.4 0 0 0 8 1.6 6.4 6.4 0 0 0 1.6 8Zm9.16 4.4A3.2 3.2 0 0 0 8 10.8a3.186 3.186 0 0 0-2.76 1.6H3.9A4.4 4.4 0 0 1 8 9.6a4.4 4.4 0 0 1 4.1 2.8ZM9.6 6a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 12 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 9.6 6ZM4 6a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 6.4 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 4 6Z\",\n    fill: \"#f24850\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDissatisfied);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"69fceef7bd94877bbd6afed79ecc8ad5.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDownload = function SvgDownload(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.962 1.939a.475.475 0 0 0-.051.013.409.409 0 0 0-.319.408v12.474l-2.563-2.561a.411.411 0 0 0-.383-.115.406.406 0 0 0-.319.287.41.41 0 0 0 .115.415l3.265 3.265.293.281.293-.281 3.261-3.268a.415.415 0 0 0-.587-.587l-2.564 2.564V2.36a.409.409 0 0 0-.446-.421ZM4.654 8.073V21.95h14.693V8.073h-4.081a.408.408 0 1 0 0 .816h3.265v12.245H5.47V8.89h3.265a.408.408 0 1 0 0-.816Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDownload);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e7e4228faf8ab85ce18146a6daf930c1.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDragGrip = function SvgDragGrip(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 6.708,\n    height: 10.708,\n    viewBox: \"0 0 6.708 10.708\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M.854 10.708a.854.854 0 1 1 .6-.25.823.823 0 0 1-.6.25Zm5 0a.854.854 0 1 1 .6-.25.823.823 0 0 1-.6.25Zm-5-4.5a.854.854 0 1 1 .6-.25.823.823 0 0 1-.6.25Zm5 0a.854.854 0 1 1 .6-.25.823.823 0 0 1-.6.25Zm-5-4.5a.854.854 0 0 1-.6-1.454.854.854 0 0 1 1.2 1.2.823.823 0 0 1-.6.254Zm5 0a.854.854 0 0 1-.6-1.454.854.854 0 0 1 1.2 1.2.823.823 0 0 1-.6.254Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDragGrip);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"18453649166e080e132e7ae89aedd0a7.svg\";","var _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDragGripBig = function SvgDragGripBig(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 21,\n    height: 6,\n    viewBox: \"0 0 21 10\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"#707070\",\n    strokeWidth: 2\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 1h21M0 5h21M0 9h21\"\n  }))));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDragGripBig);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"134b68ae8300e3a324deb59d37970925.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgDuplicate = function SvgDuplicate(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.571 3v.857h11.572v14.572h-3.429v.857H21V3ZM3 4.714V21h12.857V4.714Zm.857.857H15v14.572H3.857ZM9 9.857v2.571H6.429v.857H9v2.571h.857v-2.57h2.571v-.857H9.857V9.857Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgDuplicate);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0f13edf389176637d7fd26bdbe033d9a.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgEditColumns = function SvgEditColumns(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20,\n    height: 14,\n    viewBox: \"0 0 20 14\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 14V0h20v14Zm1.25-1.167h5V1.167h-5Zm6.25 0h5V1.167h-5Zm6.25 0h5V1.167h-5Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgEditColumns);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"973886c6112744db23d582e66232c407.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgEmail = function SvgEmail(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20,\n    height: 15,\n    viewBox: \"0 0 20 14.4\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0v14.4h20V0Zm.8.8h18.4v1l-7.866 6.855A2.075 2.075 0 0 1 10 9.2a2.075 2.075 0 0 1-1.334-.544L.8 1.8Zm0 2.06 7.341 6.4A2.869 2.869 0 0 0 10 10a2.87 2.87 0 0 0 1.859-.74l7.341-6.4V13.6H.8Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgEmail);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"6efea337a51a05b4406c21723a0f2847.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgExpand = function SvgExpand(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.452 3.001a.45.45 0 0 0-.058 0h-.388v.388a.45.45 0 0 0 0 .119v4.889a.45.45 0 1 0 .9 0V4.541l5.978 5.978a.45.45 0 0 0 .367.136l.044-.006a.45.45 0 0 0 .225-.766L4.542 3.905h3.861a.45.45 0 1 0 0-.9H3.509a.45.45 0 0 0-.057-.004Zm17.084 0h-4.938a.45.45 0 1 0 0 .9h3.861l-5.978 5.978a.45.45 0 1 0 .636.636l5.978-5.974v3.861a.45.45 0 1 0 .9 0V3.511a.45.45 0 0 0 0-.124v-.382h-.381a.45.45 0 0 0-.075 0ZM10.193 13.344a.45.45 0 0 0-.309.136l-5.978 5.978v-3.861a.45.45 0 1 0-.9 0v4.878a.45.45 0 0 0 0 .149v.369h.371a.45.45 0 0 0 .148 0h4.878a.45.45 0 1 0 0-.9H4.542l5.978-5.978a.45.45 0 0 0-.327-.772Zm3.6 0a.45.45 0 0 0-.336.749l.022.023 5.978 5.978h-3.859a.45.45 0 1 0 0 .9h4.878a.45.45 0 0 0 .149 0h.369v-.371a.45.45 0 0 0 0-.148v-4.878a.45.45 0 1 0-.9 0v3.861l-5.98-5.978a.45.45 0 0 0-.319-.136Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgExpand);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e83f9c4d3a70ed9513785b97c6143337.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgExternal = function SvgExternal(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.571 3A.575.575 0 0 0 3 3.571v10.858a.575.575 0 0 0 .571.571h10.858a.575.575 0 0 0 .571-.571V3.571A.575.575 0 0 0 14.429 3Zm0 .571h10.858v10.858H3.571Zm9.709.855H9A.287.287 0 1 0 9 5h3.6l-6.088 6.084a.286.286 0 1 0 .4.4L13 5.4V9a.286.286 0 1 0 .571 0V4.75a.29.29 0 0 0-.07-.23.282.282 0 0 0-.221-.094Z\",\n    fill: \"#2185d0\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgExternal);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"346e59157332b560a61d615772ff98f2.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgExternalLink = function SvgExternalLink(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.571 3A.575.575 0 0 0 3 3.571v10.858a.575.575 0 0 0 .571.571h10.858a.575.575 0 0 0 .571-.571V3.571A.575.575 0 0 0 14.429 3Zm0 .571h10.858v10.858H3.571Zm9.709.855H9A.287.287 0 1 0 9 5h3.6l-6.088 6.084a.286.286 0 1 0 .4.4L13 5.4V9a.286.286 0 1 0 .571 0V4.75a.29.29 0 0 0-.07-.23.282.282 0 0 0-.221-.094Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgExternalLink);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"c89d7dcc4e0470628ee119b28a499cb1.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFastForward = function SvgFastForward(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Fast forward 15 secs\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.927 2v1.953l-3.345-1.91v2.4a8.781 8.781 0 1 0 9.2 8.771.418.418 0 1 0-.836 0 7.945 7.945 0 1 1-8.364-7.924v2.376l3.345-1.91v1.953l.644-.412 3.822-2.443Zm-2.509 1.484 2.4 1.371-2.4 1.371v-1.3a.418.418 0 0 0 0-.136Zm3.345.043 2.077 1.327-2.077 1.328V3.526Zm-6.272 6.764c0 .941-.836 1.255-1.673 1.255v.836h1.673v4.6h.836v-6.691Zm2.614 0-.457 3.074.725.341a1.464 1.464 0 1 1 1.091 2.439A1.442 1.442 0 0 1 12 14.89h-.836a2.261 2.261 0 0 0 2.3 2.091 2.3 2.3 0 1 0-.846-4.438l.212-1.417h2.515v-.835Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFastForward);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"f48ab4418587a78a43e00eba136d55a0.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFavorite = function SvgFavorite(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.4 21.048a.539.539 0 0 1-.228-.076.421.421 0 0 1-.152-.418l1.671-6.224-5.011-4.062a.36.36 0 0 1-.152-.418.365.365 0 0 1 .342-.27l6.453-.342 2.316-6.03a.5.5 0 0 1 .379-.228.384.384 0 0 1 .342.228l2.315 6.035 6.453.342a.365.365 0 0 1 .342.266.428.428 0 0 1-.114.418l-5.01 4.061 1.67 6.225a.379.379 0 0 1-.152.418.342.342 0 0 1-.418 0l-5.428-3.493-5.428 3.492a.209.209 0 0 1-.19.076Z\",\n    fill: \"#dadadb\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFavorite);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e925c9cca53e7d3f55fc7fa360fba475.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFilter = function SvgFilter(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Component 428 \\\\u2013 43\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.759 3.059a.389.389 0 0 0-.316.389v1.167a.389.389 0 0 0 .109.267l6.113 6.49v6.855a.392.392 0 0 0 .194.328l3.889 2.333a.389.389 0 0 0 .583-.328v-9.188l6.052-6.429.012-.012.048-.049a.371.371 0 0 0 .049-.061.184.184 0 0 0 .024-.024.407.407 0 0 0 .036-.158v-.024a.406.406 0 0 0 0-.061V3.448a.39.39 0 0 0-.386-.389H3.759Zm.462.778h15.556v.632l-6 6.368h-3.552l-6-6.368Zm6.222 7.778h3.111v8.264l-3.111-1.859Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFilter);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"bbc9737afc0033b6e98bad0f3c30ef16.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFullscreen = function SvgFullscreen(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Full screen\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 2.763v5.684a.474.474 0 1 0 .947 0V3.71h4.737a.474.474 0 1 0 0-.947Zm12.316 0a.474.474 0 0 0-.033.947h4.77v4.737a.476.476 0 0 0 .435.479h.046A.476.476 0 0 0 21 8.447V2.763ZM3.466 15.071a.476.476 0 0 0-.466.481v5.684h5.684a.372.372 0 0 0 .046 0 .474.474 0 0 0-.046-.946H3.947v-4.738a.474.474 0 0 0-.481-.481Zm17.053 0a.476.476 0 0 0-.466.481v4.737h-4.737a.474.474 0 1 0 0 .947H21v-5.684a.474.474 0 0 0-.481-.481Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFullscreen);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0169fa2e02bd0e3169ee27700b3bd4a7.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgIncomingCall = function SvgIncomingCall(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.614 3.003a1.52 1.52 0 0 0-.986.292 14.373 14.373 0 0 0-1.471 1.236 7.32 7.32 0 0 0-.771.843 1.4 1.4 0 0 0-.385.911 6.95 6.95 0 0 0 .759 2.848 23.367 23.367 0 0 0 4.8 6.306 23.365 23.365 0 0 0 6.306 4.8 6.947 6.947 0 0 0 2.848.759 1.4 1.4 0 0 0 .91-.387 7.327 7.327 0 0 0 .843-.771 14.3 14.3 0 0 0 1.235-1.47 1.24 1.24 0 0 0-.127-1.758 230.362 230.362 0 0 0-3.662-2.425 1.4 1.4 0 0 0-1.412.092c-.361.19-1.333.748-1.611.907a17.288 17.288 0 0 1-2.712-2.365 17.18 17.18 0 0 1-2.367-2.711c.159-.277.715-1.246.906-1.611a1.385 1.385 0 0 0 .084-1.419c-.121-.191-.665-1.019-1.216-1.851S7.518 3.607 7.382 3.421a1.032 1.032 0 0 0-.768-.418Zm8.666 0a.409.409 0 0 0-.288.11L11.949 5.87l3.044 2.756a.409.409 0 1 0 .549-.605l-1.923-1.742h6.555a.409.409 0 1 0 0-.818h-6.555l1.923-1.74a.409.409 0 0 0-.262-.716Zm-8.741.835a.454.454 0 0 1 .179.058c.066.091.639.95 1.188 1.781s1.111 1.686 1.209 1.844a.942.942 0 0 1-.121.6c-.18.344-1.021 1.815-1.021 1.815l-.117.205.12.2a18.4 18.4 0 0 0 2.625 3.058 18.534 18.534 0 0 0 3.055 2.622l.2.12.206-.117s1.469-.84 1.815-1.022a.92.92 0 0 1 .6-.118 318.36 318.36 0 0 1 3.619 2.4.54.54 0 0 1-.073.618 14.321 14.321 0 0 1-1.155 1.373 6.718 6.718 0 0 1-.744.684 2.523 2.523 0 0 1-.392.222 5.8 5.8 0 0 1-2.526-.681 22.6 22.6 0 0 1-6.076-4.64 22.6 22.6 0 0 1-4.629-6.075 5.808 5.808 0 0 1-.681-2.526 2.5 2.5 0 0 1 .222-.393 6.7 6.7 0 0 1 .681-.745 14.368 14.368 0 0 1 1.373-1.156.628.628 0 0 1 .444-.126Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgIncomingCall);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"8338bbc513608e7026413cb0320bdc2c.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLaptop = function SvgLaptop(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.8 6a1.206 1.206 0 0 0-1.2 1.2v9.6H2v.363a.534.534 0 0 0 .428.523l1.35.27a2.279 2.279 0 0 0 .448.044h15.547a2.282 2.282 0 0 0 .448-.045l1.351-.27a.533.533 0 0 0 .428-.522V16.8h-1.6V7.2A1.206 1.206 0 0 0 19.2 6Zm0 .8h6a.4.4 0 0 0 .4.4h1.6a.4.4 0 0 0 .4-.4h6a.394.394 0 0 1 .4.4v9.6H4.4V7.2a.394.394 0 0 1 .4-.4Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLaptop);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"26ed280ebeb631e2e09a39368369e3a2.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgNeutral = function SvgNeutral(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 3\",\n    d: \"M0 0h16v16H0Z\",\n    fill: \"rgba(0,0,0,0)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 8\",\n    d: \"M0 8a8 8 0 0 1 7.992-8A8 8 0 0 1 16 8a8 8 0 0 1-8.008 8A8 8 0 0 1 0 8Zm1.6 0A6.4 6.4 0 0 0 8 14.4 6.4 6.4 0 0 0 14.4 8 6.4 6.4 0 0 0 8 1.6 6.4 6.4 0 0 0 1.6 8Zm4 2.8V9.6h4.8v1.2Zm4-4.8a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 12 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 9.6 6ZM4 6a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 6.4 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 4 6Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgNeutral);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"4fd9e90151fa206333fa2531f6f8ae28.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgPause = function SvgPause(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 30,\n    height: 30,\n    viewBox: \"0 0 30 30\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.818 3a2.181 2.181 0 0 0-2.182 2.182v19.636A2.181 2.181 0 0 0 6.818 27H9a2.181 2.181 0 0 0 2.182-2.182V5.182A2.181 2.181 0 0 0 9 3Zm13.091 0a2.181 2.181 0 0 0-2.182 2.182v19.636A2.181 2.181 0 0 0 19.909 27h2.182a2.181 2.181 0 0 0 2.182-2.182V5.182A2.181 2.181 0 0 0 22.091 3Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgPause);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"fd0ff4a9e3d1c9a937865092a2ed80ea.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgPencil = function SvgPencil(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Component 607 \\\\u2013 22\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.871 3a1.5 1.5 0 0 0-1.061.439L15 5.25 18.75 9l1.811-1.811a1.5 1.5 0 0 0 0-2.121l-1.629-1.629A1.5 1.5 0 0 0 17.871 3ZM13.5 6.75l-8.805 8.805s.688-.062.945.195.045 1.935.36 2.25 1.983.093 2.222.333.223.973.223.973L17.25 10.5ZM3.75 18l-.708 2a.748.748 0 0 0 .958.958h.007l.019-.006L6 20.25l-1.125-1.125Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgPencil);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"d235f2bc7b19b9aa6511e29ee8e906de.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgPlay = function SvgPlay(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Play Button\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 30,\n    height: 30,\n    viewBox: \"0 0 30 30\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.807 3.041a1.008 1.008 0 0 0-1.019 1v21.917a1.008 1.008 0 0 0 1.019 1 1.035 1.035 0 0 0 .591-.187l20.22-10.866a.987.987 0 0 0-.03-1.824L5.401 3.226a1.035 1.035 0 0 0-.594-.185Z\",\n    fill: \"#757575\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgPlay);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"a1cd77dd088c3784afe94ae1fa1c7142.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgReset = function SvgReset(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Reset icon\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.559 2.997a.391.391 0 0 0-.385.4v4.3h4.3a.392.392 0 1 0 0-.783H5.551a8.213 8.213 0 1 1-1.769 5.087.392.392 0 1 0-.783 0 9.01 9.01 0 1 0 1.957-5.59V3.394a.391.391 0 0 0-.4-.4Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgReset);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"b2df7e9ff956508ecff879ee5af76f55.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgRewind = function SvgRewind(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 20.031,\n    height: 14.422,\n    viewBox: \"0 0 20.031 14.422\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M.8 0a.8.8 0 0 0-.8.8v12.818a.8.8 0 0 0 1.275.645l.022-.017L9.615 8.2v5.416a.8.8 0 0 0 1.275.645l.022-.017 8.749-6.363a.8.8 0 0 0 .013-1.34L10.892.156a.8.8 0 0 0-1.277.645v5.418L1.277.156A.8.8 0 0 0 .8 0Z\",\n    fill: \"rgba(117,117,117,0.75)\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgRewind);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"903385af674c3a9e7ef6adea1d9ff4d8.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSatisfied = function SvgSatisfied(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 1\",\n    d: \"M0 0h16v16H0Z\",\n    fill: \"rgba(0,0,0,0)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Path 2\",\n    d: \"M0 8a8 8 0 0 1 7.992-8A8 8 0 0 1 16 8a8 8 0 0 1-8.008 8A8 8 0 0 1 0 8Zm1.6 0A6.4 6.4 0 0 0 8 14.4 6.4 6.4 0 0 0 14.4 8 6.4 6.4 0 0 0 8 1.6 6.4 6.4 0 0 0 1.6 8Zm2.3 1.6h1.336a3.2 3.2 0 0 0 2.76 1.6 3.2 3.2 0 0 0 2.76-1.6h1.336a4.4 4.4 0 0 1-4.1 2.8A4.4 4.4 0 0 1 3.9 9.6ZM9.6 6a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 12 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 9.6 6ZM4 6a1.2 1.2 0 0 1 1.2-1.2A1.2 1.2 0 0 1 6.4 6a1.2 1.2 0 0 1-1.2 1.2A1.2 1.2 0 0 1 4 6Z\",\n    fill: \"#3cb34a\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSatisfied);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e9ebb4beef3462d21429b009759ae4ff.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgScreenRecording = function SvgScreenRecording(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Screen recording\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.379 4.129a.375.375 0 0 0-.375.375v1.811a.375.375 0 0 0 0 .122v11.122a.375.375 0 0 0 0 .122v1.815a.375.375 0 0 0 .375.375h17.24a.375.375 0 0 0 .375-.375v-1.812a.375.375 0 0 0 0-.122V6.441a.375.375 0 0 0 0-.122V4.504a.375.375 0 0 0-.374-.375Zm.375.75h1.125v1.124H3.754Zm1.874 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.124v1.124h-1.125ZM3.754 6.753h16.491v10.494H3.754Zm6.724 2.623a.375.375 0 0 0-.353.375v4.5a.375.375 0 0 0 .567.321l3.748-2.249a.375.375 0 0 0 0-.643l-3.747-2.251a.375.375 0 0 0-.18-.053h-.035Zm.4 1.037L13.523 12l-2.648 1.587Zm-7.124 7.583h1.125v1.124H3.754Zm1.874 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.5v1.124h-1.5Zm2.249 0h1.124v1.124h-1.125Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgScreenRecording);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"8bbb1a5bd3872d27561237f20a6876c4.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgShare = function SvgShare(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.4 3a3.606 3.606 0 0 0-3.6 3.555L8.726 9.1a3.6 3.6 0 1 0 0 5.8l5.074 2.545a3.612 3.612 0 1 0 1.541-2.993L10.425 12l4.916-2.452A3.6 3.6 0 1 0 17.4 3Zm0 .72A2.88 2.88 0 1 1 15.814 9a.363.363 0 0 0-.337-.259s-.01 0-.011 0a2.876 2.876 0 0 1-.922-1.8.361.361 0 0 0-.023-.405A2.876 2.876 0 0 1 17.4 3.72Zm-3.521 3.6a3.591 3.591 0 0 0 .877 1.71l-4.623 2.318a3.583 3.583 0 0 0-.844-1.733ZM6.6 9.12a2.87 2.87 0 0 1 1.766.6s.007.008.011.011a.168.168 0 0 0 .011.023.35.35 0 0 0 .113.09s.01 0 .011 0a2.88 2.88 0 0 1 .956 1.924.364.364 0 0 0 .011.3.385.385 0 0 0-.011.09 2.865 2.865 0 0 1-.968 2 .37.37 0 0 0-.09.079A2.88 2.88 0 1 1 6.6 9.12Zm3.533 3.533 4.624 2.318a3.591 3.591 0 0 0-.877 1.71l-4.59-2.3a3.583 3.583 0 0 0 .843-1.728ZM17.4 14.52a2.865 2.865 0 1 1-1.9.709.17.17 0 0 0 .023-.023s.01 0 .011 0a.36.36 0 0 0 .146-.112 2.864 2.864 0 0 1 1.72-.574Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgShare);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"55afe22f7543d78d3cda7d36924636c7.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSuggestion = function SvgSuggestion(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 14,\n    height: 14,\n    viewBox: \"0 0 14 14\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m7 14-2.253-2.218H1.422a1.39 1.39 0 0 1-1.017-.4 1.348 1.348 0 0 1-.405-1V1.4a1.348 1.348 0 0 1 .405-1A1.39 1.39 0 0 1 1.422 0h11.156a1.393 1.393 0 0 1 1.018.4 1.349 1.349 0 0 1 .4 1v8.983a1.349 1.349 0 0 1-.4 1 1.393 1.393 0 0 1-1.018.4H9.253Zm-5.578-3.079h3.7L7 12.773l1.881-1.852h3.7a.538.538 0 0 0 .394-.151.52.52 0 0 0 .153-.388V1.4a.52.52 0 0 0-.153-.388.538.538 0 0 0-.394-.151H1.422a.538.538 0 0 0-.394.151.52.52 0 0 0-.153.388v8.983a.52.52 0 0 0 .153.388.538.538 0 0 0 .394.15ZM.875.861ZM8.028 6.9 10.3 5.891 8.028 4.879 7 2.639l-1.028 2.24L3.7 5.891 5.972 6.9 7 9.143Z\",\n    fill: \"#4d4d4d\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSuggestion);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"1cf158d0781756c921e02af1766ea393.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSystem = function SvgSystem(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 14,\n    viewBox: \"0 0 16 14\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    \"data-name\": \"Rectangle 7991\",\n    fill: \"rgba(255,255,255,0)\",\n    d: \"M0 0h16v14H0z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m6.506 14-.289-2.25a4.32 4.32 0 0 1-.829-.353 4.074 4.074 0 0 1-.758-.516l-2.136.882L1 9.235l1.846-1.352q-.035-.211-.059-.435a4.235 4.235 0 0 1-.023-.435 3.888 3.888 0 0 1 .023-.412q.023-.216.059-.487L1 4.762l1.494-2.5 2.12.868a5.5 5.5 0 0 1 .776-.524 4.5 4.5 0 0 1 .811-.36l.3-2.25h2.992l.289 2.265a4.621 4.621 0 0 1 .814.36 5.511 5.511 0 0 1 .728.509l2.182-.868L15 4.762l-1.908 1.4a1.962 1.962 0 0 1 .074.442q.008.2.008.4t-.015.382a4.381 4.381 0 0 1-.071.487l1.877 1.367-1.494 2.528-2.146-.9a5.7 5.7 0 0 1-.753.523 3.874 3.874 0 0 1-.788.346L9.493 14Zm1.472-5.056a1.961 1.961 0 0 0 1.42-.565 1.925 1.925 0 0 0 0-2.758 2.068 2.068 0 0 0-2.842 0 1.93 1.93 0 0 0 0 2.758 1.959 1.959 0 0 0 1.422.565Zm0-.778a1.176 1.176 0 0 1-.851-.34 1.15 1.15 0 0 1 0-1.653 1.234 1.234 0 0 1 1.7 0 1.15 1.15 0 0 1 0 1.653 1.176 1.176 0 0 1-.849.341ZM8 7Zm-.8 6.222h1.566l.3-2.106a4.519 4.519 0 0 0 1.089-.427 5.1 5.1 0 0 0 .986-.744l2 .827.8-1.322-1.752-1.279a3.553 3.553 0 0 0 .132-.611 4.863 4.863 0 0 0 .032-.56 4.615 4.615 0 0 0-.032-.56 3.27 3.27 0 0 0-.132-.581l1.783-1.309-.8-1.322-2.043.832a4.073 4.073 0 0 0-.955-.726 3.886 3.886 0 0 0-1.12-.449L8.809.779h-1.6L6.96 2.87a3.969 3.969 0 0 0-1.113.4 4.751 4.751 0 0 0-1.009.767l-2-.812-.8 1.322 1.737 1.259a2.488 2.488 0 0 0-.14.568 4.92 4.92 0 0 0-.04.637 4.318 4.318 0 0 0 .04.588 3.622 3.622 0 0 0 .125.568L2.038 9.446l.8 1.322 1.982-.817a4.5 4.5 0 0 0 .979.741 4.66 4.66 0 0 0 1.143.435Z\",\n    fill: \"rgba(0,0,0,0.87)\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSystem);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"363086e480cea2f7097a375fa650b0d9.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTranscript = function SvgTranscript(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.173 3.018A1.179 1.179 0 0 0 3 4.191v13.688a1.179 1.179 0 0 0 1.173 1.173h12.659l1.459 1.447a1.571 1.571 0 0 0 2.269 0 1.681 1.681 0 0 0 0-2.268l-1.134-1.119V4.191a1.179 1.179 0 0 0-1.174-1.173Zm0 .782h14.079a.385.385 0 0 1 .391.391V16.34l-3.637-3.588a.39.39 0 0 0-.173-.1l-2.346-.626a.392.392 0 0 0-.477.485l.665 2.346a.389.389 0 0 0 .1.171l3.268 3.242H4.173a.385.385 0 0 1-.391-.391V4.191a.385.385 0 0 1 .391-.391ZM6.52 6.538a.391.391 0 1 0 0 .782h9.386a.391.391 0 1 0 0-.782Zm0 2.738a.391.391 0 1 0 0 .782h9.386a.391.391 0 1 0 0-.782Zm0 2.738a.391.391 0 1 0 0 .782h3.91a.391.391 0 1 0 0-.782Zm8.012 1.368 5.183 5.147-1.167 1.168-5.148-5.152-.013-.045Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTranscript);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"802f86cc4dd0da1238669ec48546a956.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgVoiceRecording = function SvgVoiceRecording(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.657 3.221a1.216 1.216 0 0 0-.362.062 1.65 1.65 0 0 0-.674.424l-4.69 4.692H3.21A1.213 1.213 0 0 0 2 9.609V14.4a1.213 1.213 0 0 0 1.21 1.21h2.721l4.679 4.654a1.343 1.343 0 0 0 1.485.424 1.429 1.429 0 0 0 .7-1.372V4.544a1.277 1.277 0 0 0-.774-1.26 1.11 1.11 0 0 0-.364-.063Zm.012.8a.311.311 0 0 1 .1.012c.114.039.225.14.225.512v14.771c0 .426-.14.616-.237.661s-.292.05-.6-.262l-5.026-5.028-.025-.012a2.7 2.7 0 0 1-.1-.374V9.709c0-.148.134-.4.1-.374a.189.189 0 0 0 .025-.025l5.052-5.041a.726.726 0 0 1 .486-.248Zm5.627.724a.4.4 0 0 0-.087.761 7.288 7.288 0 0 1 0 13 .4.4 0 1 0 .349.711 8.075 8.075 0 0 0 0-14.423.391.391 0 0 0-.225-.05Zm-1.422 2.119a.4.4 0 0 0-.112.761 4.976 4.976 0 0 1 .012 8.759.4.4 0 0 0 .387.7 5.785 5.785 0 0 0-.012-10.168.4.4 0 0 0-.237-.05ZM3.21 9.221h2.071a1.534 1.534 0 0 0-.075.487v4.591a1.587 1.587 0 0 0 .075.487H3.21a.385.385 0 0 1-.387-.387v-4.79a.385.385 0 0 1 .387-.388Zm10.992.15a.4.4 0 0 0-.037.786 1.91 1.91 0 0 1 0 3.693.4.4 0 1 0 .2.774 2.709 2.709 0 0 0 0-5.24.407.407 0 0 0-.163-.012Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgVoiceRecording);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"68bac96df0e52612a83b70b5799b36e0.svg\";","import React from 'react'\r\n\r\nimport type {InteractionMetadata, Transcript as TranscriptType} from '@bpinc/ad-evaluation-state-types'\r\nimport {MS_IN_SECOND} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Intents} from './Intents'\r\nimport type {CommonMessageProps} from './Message'\r\nimport {AgentMessage, ClientMessage, SuggestionMessage, SystemMessage} from './Message'\r\n\r\n\r\nconst SYSTEM_USERID = 'system'\r\nconst SYSTEM_USER = 'Chat System Msg'\r\nconst SUGGESTION_USERID = 'suggestion'\r\n\r\ntype TranscriptProps = {\r\n    meta: InteractionMetadata\r\n    transcripts: TranscriptType[]\r\n    currentTimeline: number\r\n    duration: number\r\n}\r\n\r\nexport const Transcript: React.FC<TranscriptProps> = ({\r\n    meta,\r\n    transcripts,\r\n    currentTimeline,\r\n    duration,\r\n}) => {\r\n    const {t: {EVALUATION_PAGE: messages}} = useLocalizationState()\r\n    const {\r\n        selectedParty: {\r\n            intents,\r\n        },\r\n    } = meta\r\n\r\n    return (\r\n        <div className=\"scrollbar-on-hover flex flex-1 flex-col gap-7 overflow-y-auto\">\r\n            <div className=\"bg-white pb-4 pt-2\">\r\n                {intents && <Intents intents={intents} />}\r\n                <div className=\"flex flex-col\">\r\n                    {transcripts.map((transcript, idx) => {\r\n                        // Until new requirements are provided\r\n                        if (isNotAllowedType(transcript)) {\r\n                            return null\r\n                        }\r\n\r\n                        const user = transcript.user\r\n                        const prevTranscript = transcripts[idx - 1]\r\n                        const nextTranscript = transcripts[idx + 1]\r\n                        const timeStart = Math.floor(transcript.timeOffset / MS_IN_SECOND)\r\n                        const timeEnd = nextTranscript ? Math.floor(nextTranscript.timeOffset / MS_IN_SECOND) : duration\r\n                        const active = timeStart <= currentTimeline && currentTimeline < timeEnd\r\n\r\n                        const props: Omit<CommonMessageProps, 'user'> = {\r\n                            transcript,\r\n                            active,\r\n                            timeStart,\r\n                            showUser: prevTranscript ? !isSameSender(prevTranscript, transcript) : true,\r\n                        }\r\n\r\n                        if (isSystemMessage(transcript)) {\r\n                            return <SystemMessage key={idx} user={messages.system()} {...props} />\r\n                        }\r\n\r\n                        if (isSuggestionMessage(transcript)) {\r\n                            return <SuggestionMessage key={idx} user={messages.suggestion()} {...props} />\r\n                        }\r\n\r\n                        if (isClientMessage(transcript)) {\r\n                            return <ClientMessage key={idx} user={user || messages.client()} {...props} />\r\n                        }\r\n\r\n                        return <AgentMessage key={idx} user={user || messages.agent()} {...props} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction isNotAllowedType(t: TranscriptType) {\r\n    return t.type && t.type !== 'EMAIL'\r\n}\r\n\r\nfunction isSystemMessage(t: TranscriptType) {\r\n    return t.userId === SYSTEM_USERID || t.user === SYSTEM_USER\r\n}\r\n\r\nfunction isSuggestionMessage(t: TranscriptType) {\r\n    return t.userId === SUGGESTION_USERID\r\n}\r\n\r\nfunction isClientMessage(t: TranscriptType) {\r\n    return !t.agent\r\n}\r\n\r\nfunction isSameSender(t0: TranscriptType, t1: TranscriptType) {\r\n    if (isSystemMessage(t0) || isSystemMessage(t1)) {\r\n        return isSystemMessage(t0) && isSystemMessage(t1)\r\n    }\r\n    if (isSuggestionMessage(t0) || isSuggestionMessage(t1)) {\r\n        return isSuggestionMessage(t0) && isSuggestionMessage(t1)\r\n    }\r\n    if (isClientMessage(t0) || isClientMessage(t1)) {\r\n        return isClientMessage(t0) && isClientMessage(t1)\r\n    }\r\n\r\n    return t0.userId === t1.userId && t0.user === t1.user\r\n}\r\n","import React, {\r\n    useCallback,\r\n    useLayoutEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useEvaluationStateMethods} from '@bpinc/ad-evaluation-state-context'\r\nimport {\r\n    type InteractionData,\r\n    type InteractionFormsState,\r\n    type InteractionMetadata,\r\n    type InteractionParticipant,\r\n    type InteractionScreenRecording,\r\n    type InteractionSearchItem,\r\n    type InteractionSegments,\r\n    type Transcript as TranscriptType,\r\n    EvaluationPageName,\r\n} from '@bpinc/ad-evaluation-state-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {TabI} from '@bpinc/lib-ui-elements'\r\nimport {ResizePanel, Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {buildInteractionTitle, buildTabId} from '../../utils/tabs'\r\nimport {EvaluationForm} from './EvaluationForm'\r\nimport {Header} from './Header'\r\nimport {ScreenRecording} from './ScreenRecording'\r\nimport {Summary} from './Summary'\r\nimport {Timeline} from './Timeline'\r\nimport {Transcript} from './Transcript'\r\n\r\n\r\nenum LeftPanelTab {\r\n    SUMMARY = 'summary',\r\n    TRANSCRIPT = 'transcript',\r\n    SCREEN_RECORDING = 'screen-recording',\r\n}\r\n\r\nenum RightPanelTab {\r\n    EVALUATION = 'evaluation',\r\n    ALL_EVALS = 'all-evals',\r\n}\r\n\r\ntype InteractionProps = {\r\n    interaction: InteractionData\r\n    interactionStartTime: number\r\n    meta: InteractionMetadata\r\n    segments: InteractionSegments\r\n    participants: InteractionParticipant[]\r\n    transcripts: TranscriptType[]\r\n    searchItem: InteractionSearchItem\r\n    forms: InteractionFormsState\r\n    screenRecording?: InteractionScreenRecording\r\n}\r\n\r\nexport const Interaction: React.FC<InteractionProps> = ({\r\n    interaction,\r\n    interactionStartTime,\r\n    meta,\r\n    segments,\r\n    participants,\r\n    transcripts,\r\n    searchItem,\r\n    forms,\r\n    screenRecording,\r\n}) => {\r\n    const {\r\n        dateTime,\r\n        duration,\r\n        service,\r\n    } = interaction\r\n    const activeForm = forms.activeFormId ?\r\n        forms.loadedItems[forms.activeFormId] : undefined\r\n\r\n    const {addTab} = useEvaluationStateMethods()\r\n    const contentRef = useRef<HTMLDivElement>(null)\r\n    const [panelSize, setPanelSize] = useState(0)\r\n    const [currentTimeline, setCurrentTimeline] = useState(0)\r\n    const {t: {EVALUATION_PAGE: messages}} = useLocalizationState()\r\n    const [activeLeftTab, setActiveLeftTab]\r\n        = useState<LeftPanelTab>(LeftPanelTab.SUMMARY)\r\n    const [activeRightTab, setActiveRightTab]\r\n        = useState<RightPanelTab>(RightPanelTab.EVALUATION)\r\n\r\n    const openInteraction = useCallback((cdrId?: string) => {\r\n        const giid = interaction.globalInteractionId\r\n        const search = searchItem.search\r\n        const title =\r\n            buildInteractionTitle(\r\n                search.title,\r\n                searchItem.relatedIndex,\r\n                search.totalLength,\r\n                searchItem.item.agentName,\r\n            )\r\n        addTab({\r\n            page: EvaluationPageName.INTERACTION,\r\n            tabId: buildTabId(EvaluationPageName.INTERACTION, giid, cdrId),\r\n            searchType: search.type,\r\n            title,\r\n            searchId: search.id,\r\n            giid,\r\n            cdrId,\r\n        })\r\n    }, [interaction, searchItem, addTab])\r\n\r\n    const showTimeline = useMemo(() => {\r\n        const party = meta.selectedParty\r\n        return party.hasVoiceRecording || party.hasScreenRecording ||\r\n            meta.mediaType !== 'EMAIL' && party.transcriptsBatch && !party.transcriptsBatch.empty\r\n    }, [meta])\r\n\r\n    useLayoutEffect(() => {\r\n        if (contentRef.current) {\r\n            const panelWidth =\r\n                Math.round(contentRef.current.getBoundingClientRect().width / 2)\r\n            setPanelSize(panelWidth)\r\n        }\r\n    }, [])\r\n\r\n    const leftTabs = useMemo<TabI<LeftPanelTab>[]>(() => {\r\n        const tabs: TabI<LeftPanelTab>[] = [\r\n            {id: LeftPanelTab.SUMMARY, title: messages.summary()},\r\n            {id: LeftPanelTab.TRANSCRIPT, title: messages.transcript()},\r\n        ]\r\n\r\n        if (meta.selectedParty.hasScreenRecording) {\r\n            tabs.push({\r\n                id: LeftPanelTab.SCREEN_RECORDING,\r\n                title: messages.screen_recording(),\r\n            })\r\n        }\r\n\r\n        return tabs\r\n    }, [messages, meta.selectedParty.hasScreenRecording])\r\n\r\n    const rightTabs = useMemo<TabI<RightPanelTab>[]>(() => [\r\n        {id: RightPanelTab.EVALUATION, title: messages.evaluation()},\r\n        {id: RightPanelTab.ALL_EVALS, title: messages.all_evals()},\r\n    ], [messages])\r\n\r\n    const onLeftTabChange = useCallback((id: LeftPanelTab) => {\r\n        setActiveLeftTab(id)\r\n    }, [])\r\n\r\n    const onRightTabChange = useCallback((id: RightPanelTab) => {\r\n        setActiveRightTab(id)\r\n    }, [])\r\n\r\n    const renderLeftTabContent = useCallback(() => {\r\n        if (activeLeftTab === LeftPanelTab.SUMMARY) {\r\n            return (\r\n                <Summary\r\n                    interaction={interaction}\r\n                    participants={participants}\r\n                    meta={meta}\r\n                    openInteraction={openInteraction}\r\n                />\r\n            )\r\n        }\r\n        if (activeLeftTab === LeftPanelTab.TRANSCRIPT) {\r\n            return (\r\n                <Transcript\r\n                    meta={meta}\r\n                    transcripts={transcripts}\r\n                    currentTimeline={currentTimeline}\r\n                    duration={duration}\r\n                />\r\n            )\r\n        }\r\n        if (activeLeftTab === LeftPanelTab.SCREEN_RECORDING) {\r\n            return (\r\n                <ScreenRecording\r\n                    meta={meta}\r\n                    screenRecording={screenRecording}\r\n                />\r\n            )\r\n        }\r\n        return null\r\n    }, [\r\n        activeLeftTab,\r\n        interaction,\r\n        meta,\r\n        participants,\r\n        transcripts,\r\n        screenRecording,\r\n        duration,\r\n        currentTimeline,\r\n        openInteraction,\r\n    ])\r\n\r\n    const renderRightTabContent = useCallback(() => {\r\n        if (activeRightTab === RightPanelTab.EVALUATION) {\r\n            return (\r\n                <EvaluationForm\r\n                    forms={forms}\r\n                    interaction={interaction}\r\n                    meta={meta}\r\n                    searchItem={searchItem}\r\n                />\r\n            )\r\n        }\r\n        return null\r\n    }, [activeRightTab, interaction, meta, forms, searchItem])\r\n\r\n    const tabsClassName = 'flex flex-col flex-1'\r\n    const tabsContentClassName = 'flex overflow-hidden'\r\n    const tabsHeaderClassName = 'bg-transparent h-[42px] mb-0.5'\r\n    const tabClassName = tcn(\r\n        'text-eval-text-dark shadow-none hover:shadow-none hover:after:bg-eval-text-dark focus:shadow-none',\r\n        'whitespace-nowrap after:absolute after:-bottom-0.5 after:left-0 after:h-px after:w-full',\r\n    )\r\n    const activeTabClassName =\r\n        'shadow-none hover:shadow-none active:shadow-none focus:shadow-none after:h-0.5 after:bg-eval-text-dark'\r\n\r\n    return (\r\n        <div className=\"flex h-full w-full flex-col\">\r\n            <div className=\"px-8\">\r\n                <Header\r\n                    metadata={meta}\r\n                    searchItem={searchItem}\r\n                    form={activeForm}\r\n                    agent={meta.calleeParty}\r\n                    client={meta.callerParty}\r\n                    startTime={dateTime}\r\n                    duration={duration}\r\n                    service={service}\r\n                />\r\n            </div>\r\n            <div\r\n                ref={contentRef}\r\n                className=\"flex flex-1 gap-4 overflow-hidden px-8\"\r\n            >\r\n                {panelSize && (\r\n                    <>\r\n                        <ResizePanel\r\n                            className=\"relative\"\r\n                            direction=\"right\"\r\n                            containerClass=\"h-full overflow-x-auto\"\r\n                            borderClass={tcn(\r\n                                'mx-1 w-2 rounded bg-[--c-table-resizer]',\r\n                                'opacity-0 transition-opacity duration-300 hover:opacity-100',\r\n                                'after:absolute after:inset-y-[calc(50%-10px)]',\r\n                                'after:inset-x-px after:border-x-2 after:border-[--c-legacy-icon-default]',\r\n                            )}\r\n                            initialSize={panelSize}\r\n                        >\r\n                            <Tabs\r\n                                className={tabsClassName}\r\n                                headerClassName={tabsHeaderClassName}\r\n                                tabClassName={tabClassName}\r\n                                tabsContentClassName={tabsContentClassName}\r\n                                activeTabClassName={activeTabClassName}\r\n                                tabs={leftTabs}\r\n                                renderTabContent={renderLeftTabContent}\r\n                                activeTabId={activeLeftTab}\r\n                                onChange={onLeftTabChange}\r\n                            />\r\n                        </ResizePanel>\r\n                        <Tabs\r\n                            className={tabsClassName}\r\n                            headerClassName={tabsHeaderClassName}\r\n                            tabClassName={tabClassName}\r\n                            tabsContentClassName={tabsContentClassName}\r\n                            activeTabClassName={activeTabClassName}\r\n                            tabs={rightTabs}\r\n                            renderTabContent={renderRightTabContent}\r\n                            activeTabId={activeRightTab}\r\n                            onChange={onRightTabChange}\r\n                        />\r\n                    </>\r\n                )}\r\n            </div>\r\n            {showTimeline && (\r\n                <Timeline\r\n                    meta={meta}\r\n                    segments={segments}\r\n                    participants={participants}\r\n                    transcripts={transcripts}\r\n                    interactionStartTime={interactionStartTime}\r\n                    duration={duration}\r\n                    currentTimeline={currentTimeline}\r\n                    setCurrentTimeline={setCurrentTimeline}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useRef, useState} from 'react'\r\nimport {type XYCoord, useDrag, useDrop} from 'react-dnd'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {ResizeTableColumn} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useSearchResultsTableState} from '../ui-context/SearchResultsUIContextProvider'\r\n\r\n\r\nconst dragStyles = tcn(\r\n    'before:absolute before:inset-x-0 before:top-0 before:hidden before:h-1 before:bg-[--c-dropzone-line-bg]',\r\n    'after:absolute after:inset-x-0 after:bottom-0 after:hidden after:h-1 after:bg-[--c-dropzone-line-bg]',\r\n)\r\n\r\nexport const useMetricDndLogic = (metric: ResizeTableColumn) => {\r\n    const {columns, setColumns} = useSearchResultsTableState()\r\n\r\n    const dropRef = useRef<HTMLElement | null>(null)\r\n\r\n    const [dropPosition, setDropPosition] = useState<'before' | 'after' | null>(null)\r\n    const [{canDrop}, drop] = useDrop<ResizeTableColumn, unknown, {canDrop: boolean}>({\r\n        collect: monitor => ({\r\n            canDrop: monitor.canDrop(),\r\n            isOver: monitor.isOver(),\r\n        }),\r\n        accept: ['metric'],\r\n        hover(_, monitor) {\r\n            const dropBoundingRect = dropRef.current?.getBoundingClientRect()\r\n\r\n            if (!dropBoundingRect || !monitor.isOver()) {\r\n                return\r\n            }\r\n\r\n            const hoveringOverFirstHalf = isHoveringOverFirstHalf(\r\n                monitor.getClientOffset(),\r\n                dropBoundingRect,\r\n            )\r\n\r\n            setDropPosition(hoveringOverFirstHalf ? 'before' : 'after')\r\n        },\r\n\r\n        canDrop: (draggedItem, monitor) => {\r\n            if (!monitor.isOver()) {\r\n                return false\r\n            }\r\n\r\n            return draggedItem.name !== metric.name\r\n        },\r\n        drop: draggedItem => {\r\n            const dropIndex = getDropIndex()\r\n            const newConfig = [...columns]\r\n            const previousMetricIndex = columns.findIndex(\r\n                m => m.name === draggedItem.name,\r\n            )\r\n            newConfig.splice(previousMetricIndex, 1)\r\n            newConfig.splice(dropIndex, 0, {\r\n                ...draggedItem,\r\n            })\r\n\r\n            setColumns(newConfig)\r\n            function getDropIndex() {\r\n                const draggedItemIdx = columns.findIndex(\r\n                    m => m.name === draggedItem.name,\r\n                )\r\n\r\n                let result = columns.findIndex(\r\n                    m => m.name === metric.name,\r\n                )\r\n\r\n                if (dropPosition === 'before' && result > draggedItemIdx && result !== 0) {\r\n                    result--\r\n                }\r\n\r\n                if (dropPosition === 'after' && result < draggedItemIdx && result !== columns.length - 1) {\r\n                    result++\r\n                }\r\n                return result\r\n            }\r\n        },\r\n    })\r\n\r\n    const [{isDragging}, dragRef, dragPreviewRef] = useDrag({\r\n        type: 'metric',\r\n        item: metric,\r\n        collect(monitor) {\r\n            return {\r\n                isDragging: monitor.isDragging(),\r\n            }\r\n        },\r\n    })\r\n\r\n    drop(dropRef)\r\n\r\n    const dndStyles = tcn(dragStyles, {\r\n        'before:block': canDrop && dropPosition === 'before',\r\n        'after:block': canDrop && dropPosition === 'after',\r\n        'opacity-50': isDragging,\r\n    })\r\n\r\n    return {dropRef, dndStyles, dragRef, dragPreviewRef}\r\n}\r\n\r\n\r\nexport function isHoveringOverFirstHalf(\r\n    clientOffset: XYCoord | null,\r\n    dropBoundingRect: DOMRect,\r\n): boolean {\r\n    const hoverMiddleY = (dropBoundingRect.bottom - dropBoundingRect.top) / 2\r\n\r\n    if (!clientOffset) {\r\n        return false\r\n    }\r\n\r\n    const hoverClientY = clientOffset.y - dropBoundingRect.top\r\n\r\n    return hoverClientY < hoverMiddleY\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\n\r\nimport {useGetAgentAvatarUrl} from '../../../hooks/useGetAgentAvatarUrl'\r\nimport {convertTeamName} from '../utils/helpers'\r\n\r\n\r\ninterface AgentCellProps {\r\n    agentName: string\r\n    team: string | null\r\n    agentLogin: string | null\r\n}\r\n\r\nexport const AgentCell: FC<AgentCellProps> = React.memo(({agentName, team, agentLogin}) => {\r\n    const getAvatarUrl = useGetAgentAvatarUrl()\r\n    const avatarUrl = getAvatarUrl(agentLogin)\r\n\r\n    return (\r\n        <div className=\"flex h-14 items-center\">\r\n            <AvatarLegacy\r\n                headPhones\r\n                fullName={agentName}\r\n                type=\"user\"\r\n                size={32}\r\n                url={avatarUrl}\r\n                className=\"ml-1.5 mr-4 mt-1 grow-0\"\r\n            />\r\n            <div className=\"flex flex-col gap-y-1 truncate\">\r\n                <span className=\"truncate text-base font-bold leading-[17px] text-eval-text-dark\">\r\n                    {agentName}\r\n                </span>\r\n                {team && (\r\n                    <div className=\"truncate text-sm leading-[17px] text-eval-text-light\">\r\n                        {convertTeamName(team)}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {TableItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {IconChat, IconLaptop, IconTranscript, IconVoiceRecording} from '../../../icons'\r\n\r\n\r\nenum RecordingValue {\r\n    VOICE_RECORDING = 'hasVoiceRecording',\r\n    SCREEN_RECORDING = 'hasScreenRecording',\r\n    TRANSCRIPT = 'hasTranscript',\r\n    CHAT_TRANSCRIPT = 'hasChatTranscript',\r\n    ERASED_VOICE = 'erasedVoiceRecording',\r\n    ERASED_CHAT = 'erasedChatTranscript',\r\n    ERASED_SCREEN = 'erasedScreenRecording',\r\n}\r\n\r\ninterface RecordingCellProps {\r\n    item: TableItem\r\n}\r\n\r\nexport const RecordingCell: FC<RecordingCellProps> = React.memo(({item}) => {\r\n    const iconClassName = tcn('flex h-6 w-6 items-center justify-center')\r\n\r\n    return (\r\n        <div className=\"flex h-14 items-center gap-x-1.5\">\r\n            {!!item?.[RecordingValue.VOICE_RECORDING] && (\r\n                <div className={iconClassName}>\r\n                    <IconVoiceRecording\r\n                        className={tcn({'[&_path]:fill-primary-legacy': !item?.[RecordingValue.ERASED_VOICE]})}\r\n                    />\r\n                </div>\r\n            )}\r\n            {!!item?.[RecordingValue.SCREEN_RECORDING] && (\r\n                <div className={iconClassName}>\r\n                    <IconLaptop\r\n                        className={tcn({'[&_path]:fill-primary-legacy': !item?.[RecordingValue.ERASED_SCREEN]})}\r\n                    />\r\n                </div>\r\n            )}\r\n            {!!item?.[RecordingValue.CHAT_TRANSCRIPT] && (\r\n                <div className={iconClassName}>\r\n                    <IconChat className={tcn({'[&_path]:fill-primary-legacy': !item?.[RecordingValue.ERASED_CHAT]})} />\r\n                </div>\r\n            )}\r\n            {!!item?.[RecordingValue.TRANSCRIPT] && (\r\n                <div className={iconClassName}>\r\n                    <IconTranscript className=\"[&_path]:fill-primary-legacy\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import React, {type ReactElement, useCallback, useEffect, useState} from 'react'\r\nimport {produce} from 'immer'\r\nimport {noop, uniq} from 'lodash-es'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport type {CustomFieldFilters, FiltersOrder, FilterType, QuerySettings} from '@bpinc/ad-evaluation-state-types'\r\nimport {\r\n    type Filters,\r\n    CUSTOM_FIELD_ORDER_PREFIX,\r\n    isKeyArrayNonValueFilter,\r\n    isKeyArrayValueFilter,\r\n    isKeyBooleanFilter,\r\n    isKeyTimeRangeValue,\r\n} from '@bpinc/ad-evaluation-state-types'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\n\r\n\r\ntype UpdateValueType = <K extends keyof Filters, >(\r\n    key: K,\r\n    newValue: Required<Filters>[K]['value'],\r\n) => void\r\n\r\ntype FiltersContext = {\r\n    filters: Filters\r\n    order: FiltersOrder\r\n    searchName: string\r\n    customFilters: CustomFieldFilters\r\n    updateFilterValue: UpdateValueType\r\n    addFilter: (type: FilterType, filterKey: keyof Filters) => void\r\n    removeFilter: (filterKey: keyof Filters) => void\r\n    saveSearch: () => void\r\n    makeSearch: () => void\r\n    addCustomFilter: (type: FilterType, key: string, name?: string) => void\r\n    removeCustomFilter: (key: string) => void\r\n    updateCustomFilterValue: (key: string, value: string[]) => void\r\n    setSearchName: (value: string) => void\r\n    changeRandomize: () => void\r\n    isRandomize: boolean\r\n    searchResultsMode: boolean\r\n    onClosePanel?: () => void\r\n    onCloneFilters?: () => void\r\n    resetFilters: () => void\r\n}\r\n\r\nexport const SearchFiltersContext = createContext<FiltersContext>({\r\n    filters: {},\r\n    customFilters: {},\r\n    searchName: '',\r\n    updateFilterValue: noop,\r\n    addFilter: noop,\r\n    removeFilter: noop,\r\n    saveSearch: noop,\r\n    addCustomFilter: noop,\r\n    removeCustomFilter: noop,\r\n    updateCustomFilterValue: noop,\r\n    setSearchName: noop,\r\n    changeRandomize: noop,\r\n    isRandomize: false,\r\n    order: {\r\n        and: [],\r\n        or: [],\r\n    },\r\n    searchResultsMode: false,\r\n    onClosePanel: noop,\r\n    onCloneFilters: noop,\r\n    makeSearch: noop,\r\n    resetFilters: noop,\r\n})\r\n\r\nSearchFiltersContext.displayName = 'SearchFiltersContext'\r\n\r\ntype FiltersProviderProps = {\r\n    children: ReactElement\r\n    query: QuerySettings\r\n    onSave: (newQuery: QuerySettings) => void\r\n    searchResultsMode?: boolean\r\n    onClosePanel?: () => void\r\n    onCloneFilters?: () => void\r\n    onSearchByQuery?: (newQuery: QuerySettings) => void\r\n}\r\n\r\nexport const SearchContextProvider: React.FC<FiltersProviderProps> = ({\r\n    children, onSave, query, searchResultsMode = false, onClosePanel, onCloneFilters, onSearchByQuery,\r\n}) => {\r\n    const {value: isRandomize, toggle: toggleRandomize} = useBoolean(query.randomizeSearch || false)\r\n    const [stateFilters, updateFilters] = useState(() => query.filters)\r\n    const [searchName, setSearchName] = useState(() => query.name)\r\n    const [stateOrder, updateOrder] = useState(() => query.order)\r\n    const [customFilters, updateCustomFilters] = useState<CustomFieldFilters>(() => query.customFilters)\r\n\r\n    useEffect(() => {\r\n        updateOrder(query.order)\r\n        updateFilters(query.filters)\r\n        setSearchName(query.name)\r\n        updateCustomFilters(query.customFilters)\r\n    }, [query])\r\n\r\n    useEffect(() => {\r\n        toggleRandomize(query.randomizeSearch || false)\r\n    }, [query.randomizeSearch, toggleRandomize])\r\n\r\n    const updateFilterValue = useCallback<UpdateValueType>((key, newValue) => {\r\n        updateFilters(produce(draft => {\r\n            const existed = draft[key]\r\n            if (existed) {\r\n                existed.value = newValue\r\n                if (!newValue && 'emptyValue' in existed) {\r\n                    existed.emptyValue = true\r\n                }\r\n                if (newValue && 'emptyValue' in existed) {\r\n                    existed.emptyValue = false\r\n                }\r\n            }\r\n            return draft\r\n        }))\r\n    }, [updateFilters])\r\n\r\n    const addCustomFilter = useCallback((type: FilterType, key: string, name?: string) => {\r\n        updateCustomFilters(produce(draft => {\r\n            draft[key] = {\r\n                filterType: type,\r\n                value: [],\r\n                name,\r\n            }\r\n            return draft\r\n        }))\r\n\r\n        if (type === 'AND') {\r\n            updateOrder(produce(draft => {\r\n                draft.and.push(`${CUSTOM_FIELD_ORDER_PREFIX}${key}`)\r\n                draft.and = uniq(draft.and)\r\n                return draft\r\n            }))\r\n            return\r\n        }\r\n        updateOrder(produce(draft => {\r\n            draft.or.push(key)\r\n            draft.or = uniq(draft.or)\r\n            return draft\r\n        }))\r\n\r\n    }, [updateCustomFilters])\r\n\r\n    const removeCustomFilter = useCallback((key: string) => {\r\n        updateCustomFilters(produce(draft => {\r\n            if (key in draft) {\r\n                delete draft[key]\r\n            }\r\n            return draft\r\n        }))\r\n        updateOrder(produce(draft => {\r\n            draft.and = draft.and.filter(existingKey => existingKey !== `${CUSTOM_FIELD_ORDER_PREFIX}${key}`)\r\n            draft.or = draft.or.filter(existingKey => existingKey !== `${CUSTOM_FIELD_ORDER_PREFIX}${key}`)\r\n            return draft\r\n        }))\r\n\r\n    }, [updateCustomFilters, updateOrder])\r\n\r\n    const updateCustomFilterValue = useCallback((key: string, value: string[]) => {\r\n        updateCustomFilters(produce(draft => {\r\n            if (key in draft) {\r\n                draft[key].value = value\r\n            }\r\n            return draft\r\n        }))\r\n    }, [updateCustomFilters])\r\n\r\n    const addFilter = useCallback((type: FilterType, key: keyof Filters) => {\r\n        updateFilters(produce(draft => {\r\n            if (key === 'kmTemplate') {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    value: {\r\n                        kmTemplateUsed: true,\r\n                        values: [],\r\n                    },\r\n                }\r\n                return draft\r\n            }\r\n            if (isKeyArrayValueFilter(key)) {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    value: [],\r\n                }\r\n            }\r\n\r\n            if (isKeyBooleanFilter(key)) {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    value: true,\r\n                }\r\n                return draft\r\n            }\r\n\r\n            if (isKeyTimeRangeValue(key)) {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    value: {type: 'Last24h'},\r\n                }\r\n                return draft\r\n            }\r\n\r\n            if (key === 'sentiment') {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    value: {},\r\n                }\r\n                return draft\r\n            }\r\n\r\n            if (isKeyArrayNonValueFilter(key)) {\r\n                draft[key] = {\r\n                    filterType: type,\r\n                    emptyValue: true,\r\n                }\r\n            }\r\n            return draft\r\n        }))\r\n\r\n        if (type === 'AND') {\r\n            updateOrder(produce(draft => {\r\n                draft.and.push(key)\r\n                draft.and = uniq(draft.and)\r\n                return draft\r\n            }))\r\n            return\r\n        }\r\n        updateOrder(produce(draft => {\r\n            draft.or.push(key)\r\n            draft.or = uniq(draft.or)\r\n            return draft\r\n        }))\r\n    }, [updateFilters, updateOrder])\r\n\r\n    const removeFilter = useCallback((key: keyof Filters) => {\r\n        updateFilters(produce(draft => {\r\n            delete draft[key]\r\n            return draft\r\n        }))\r\n\r\n        updateOrder(produce(draft => {\r\n            draft.and = draft.and.filter(existingKey => existingKey !== key)\r\n            draft.or = draft.or.filter(existingKey => existingKey !== key)\r\n            return draft\r\n        }))\r\n    }, [updateFilters, updateOrder])\r\n\r\n    const saveSearch = useCallback(() => {\r\n        onSave({filters: stateFilters, name: searchName, order: stateOrder, customFilters, randomizeSearch: isRandomize})\r\n    }, [stateFilters, searchName, onSave, stateOrder, customFilters, isRandomize])\r\n\r\n    const makeSearch = useCallback(() => {\r\n        onSearchByQuery?.({filters: stateFilters, name: searchName, order: stateOrder, customFilters, randomizeSearch: isRandomize})\r\n    }, [stateFilters, searchName, onSearchByQuery, stateOrder, customFilters, isRandomize])\r\n\r\n    const resetFilters = useCallback(() => {\r\n        updateFilters(query.filters)\r\n        updateCustomFilters(query.customFilters)\r\n    }, [query.filters, query.customFilters])\r\n\r\n    const value = {\r\n        filters: stateFilters,\r\n        customFilters,\r\n        searchName,\r\n        order: stateOrder,\r\n        updateFilterValue,\r\n        addFilter,\r\n        removeFilter,\r\n        saveSearch,\r\n        addCustomFilter,\r\n        removeCustomFilter,\r\n        updateCustomFilterValue,\r\n        setSearchName: setSearchName,\r\n        isRandomize: isRandomize,\r\n        changeRandomize: toggleRandomize,\r\n        searchResultsMode,\r\n        onClosePanel,\r\n        onCloneFilters,\r\n        makeSearch,\r\n        resetFilters,\r\n    }\r\n\r\n    return (\r\n        <SearchFiltersContext.Provider value={value} >\r\n            {children}\r\n        </SearchFiltersContext.Provider >\r\n    )\r\n}\r\n\r\nexport const useGetFilters = () => useContextSelector(SearchFiltersContext, value => value.filters)\r\nexport const useGetCustomFilters = () => useContextSelector(SearchFiltersContext, value => value.customFilters)\r\nexport const useGetName = () => useContextSelector(SearchFiltersContext, value => value.searchName)\r\nexport const useUpdateName = () => useContextSelector(SearchFiltersContext, value => value.setSearchName)\r\nexport const useGetOrder = () => useContextSelector(SearchFiltersContext, value => value.order)\r\nexport const useGetFilter = <K extends keyof Filters>(key: K) => useContextSelector(SearchFiltersContext, value => value.filters[key])\r\nexport const useGetCustomFilter = (key: string) => useContextSelector(SearchFiltersContext, value => value.customFilters[key])\r\nexport const useUpdateFilters = () => useContextSelector(SearchFiltersContext, value => value.updateFilterValue)\r\nexport const useAddFilter = () => useContextSelector(SearchFiltersContext, value => value.addFilter)\r\nexport const useRemoveFilter = () => useContextSelector(SearchFiltersContext, value => value.removeFilter)\r\nexport const useSaveSearch = () => useContextSelector(SearchFiltersContext, value => value.saveSearch)\r\nexport const useRandomize = () => useContextSelector(SearchFiltersContext, value => value.isRandomize)\r\nexport const useChangeRandomize = () => useContextSelector(SearchFiltersContext, value => value.changeRandomize)\r\nexport const useAddCustomFilter = () => useContextSelector(SearchFiltersContext, value => value.addCustomFilter)\r\nexport const useRemoveCustomFilter = () => useContextSelector(SearchFiltersContext, value => value.removeCustomFilter)\r\nexport const useUpdateCustomFilterValue = () => useContextSelector(SearchFiltersContext, value => value.updateCustomFilterValue)\r\nexport const useGetSearchResultMode = () => useContextSelector(SearchFiltersContext, value => value.searchResultsMode)\r\nexport const useClosePanel = () => useContextSelector(SearchFiltersContext, value => value.onClosePanel)\r\nexport const useCloneFilters = () => useContextSelector(SearchFiltersContext, value => value.onCloneFilters)\r\nexport const useMakeSearch = () => useContextSelector(SearchFiltersContext, value => value.makeSearch)\r\nexport const useResetFilters = () => useContextSelector(SearchFiltersContext, value => value.resetFilters)\r\n","import type {ChangeEvent} from 'react'\r\nimport React, {useCallback, useState} from 'react'\r\n\r\nimport type {FilterType} from '@bpinc/ad-evaluation-state-types'\r\nimport {type FiltersGroupTypes, filtersGroups} from '@bpinc/ad-evaluation-state-types'\r\nimport {SearchInput} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {FiltersGroup} from './FiltersGroup'\r\n\r\n\r\nconst groupsList: (keyof FiltersGroupTypes)[] = (Object.keys(filtersGroups) as (keyof FiltersGroupTypes)[])\r\n\r\ntype Props = {\r\n    filtersMode: FilterType\r\n}\r\n\r\nexport const FilterSelectionModal: React.FC<Props> = ({filtersMode}) => {\r\n    const {t} = useLocalizationState()\r\n    const [filterValue, setFilterValue] = useState('')\r\n    const onSearchChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setFilterValue(e.target.value)\r\n    }, [setFilterValue])\r\n\r\n    const [openedGroup, setOpenedGroup] = useState<(keyof FiltersGroupTypes) | ''>('')\r\n\r\n    const openGroup = useCallback((newOpenedGroup: keyof FiltersGroupTypes) => {\r\n        if (filterValue.length > 0) {\r\n            return\r\n        }\r\n        setOpenedGroup(newOpenedGroup)\r\n    }, [setOpenedGroup, filterValue])\r\n\r\n    const closeGroup = useCallback(() => {\r\n        if (filterValue.length > 0) {\r\n            return\r\n        }\r\n        setOpenedGroup('')\r\n    }, [setOpenedGroup, filterValue])\r\n\r\n    return (\r\n        <div\r\n            className=\"max-h-[720px] w-[365px] overflow-auto rounded border border-solid\r\n        border-[--evaluation-box-border] bg-white px-4 py-[13px] shadow-DEFAULT\"\r\n        >\r\n            <div className=\"text-base font-bold text-eval-text-dark\">\r\n                {t.EVALUATION_PAGE.add_filter()}\r\n            </div>\r\n            <SearchInput className=\"mt-3\" value={filterValue} onChange={onSearchChange} />\r\n            {groupsList.map(groupName => (\r\n                <FiltersGroup\r\n                    key={groupName}\r\n                    name={groupName}\r\n                    filtersList={filtersGroups[groupName]}\r\n                    onOpen={openGroup}\r\n                    onClose={closeGroup}\r\n                    opened={openedGroup === groupName}\r\n                    filterValue={filterValue}\r\n                    filtersMode={filtersMode}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {useEvaluationStateMethods} from '@bpinc/ad-evaluation-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {MS_IN_MINUTE} from '@bpinc/lib-helpers'\r\n\r\n\r\nconst REFRESH_STATISTICS_INTERVAL = 30 * MS_IN_MINUTE\r\n\r\nexport function useRefreshEvalStatistics() {\r\n    const {sessionId} = useSessionState()\r\n    const {getEvalsStatistics} = useEvaluationStateMethods()\r\n    const intervalId = useRef<number>()\r\n\r\n    useEffect(() => {\r\n        if (!sessionId) {\r\n            return\r\n        }\r\n\r\n        getEvalsStatistics(sessionId)\r\n        intervalId.current = setInterval(() => {\r\n            getEvalsStatistics(sessionId)\r\n        }, REFRESH_STATISTICS_INTERVAL)\r\n        return () => clearInterval(intervalId.current)\r\n    }, [sessionId, getEvalsStatistics])\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSearch = function SvgSearch(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"data-name\": \"Saved search\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.286 3A1.292 1.292 0 0 0 3 4.286v15.428A1.292 1.292 0 0 0 4.286 21h15.428A1.292 1.292 0 0 0 21 19.714V4.286A1.292 1.292 0 0 0 19.714 3Zm0 .857h15.428a.427.427 0 0 1 .429.429v15.428a.427.427 0 0 1-.429.429H4.286a.427.427 0 0 1-.429-.429V4.286a.427.427 0 0 1 .429-.429Zm6.643 3a4.071 4.071 0 1 0 2.556 7.234l3.355 3.355.606-.606-3.355-3.355a4.066 4.066 0 0 0-3.162-6.628Zm0 .857a3.214 3.214 0 1 1-3.214 3.214 3.208 3.208 0 0 1 3.214-3.214Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSearch);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"b7825a98c0028a1bc52a578a7692af05.svg\";","import React from 'react'\r\nimport {DndProvider} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\n\r\nimport {createPlatformSpecific} from '@bpinc/ad-platform-specific-web-impl'\r\nimport {UIContextProvider} from '@bpinc/ad-ui-context'\r\nimport {AuthorizationModule} from '@bpinc/lib-authorization-module'\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\n\r\nimport {FullscreenEvaluation} from './FullscreenEvaluation'\r\n\r\n\r\nconst EvaluationProviders = createProviderWrapper([\r\n    UIContextProvider,\r\n])\r\n\r\nexport const FullscreenEvaluationApp: React.FC = () => {\r\n    return (\r\n        <AuthorizationModule\r\n            platformSpecific={createPlatformSpecific('omni-qm')}\r\n            app=\"omni-qm\"\r\n            appRemoteName=\"omniQm\"\r\n        >\r\n            {() => (\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <EvaluationProviders>\r\n                        <FullscreenEvaluation />\r\n                    </EvaluationProviders>\r\n                </DndProvider>\r\n            )}\r\n        </AuthorizationModule>\r\n    )\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useEvaluationState, useEvaluationStateMethods} from '@bpinc/ad-evaluation-state-context'\r\nimport type {\r\n    NodeFolder,\r\n    NodeLeaf,\r\n    TreeElem,\r\n    TreeElemsMap,\r\n    TreeProps,\r\n} from '@bpinc/ad-evaluation-state-types'\r\nimport {Tree} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useAllSearchesStorageControls} from '../../hooks/useAllSearchesStorageControls'\r\nimport {useTreeModalsController} from './hooks/useTreeModalsController'\r\nimport {Folder} from './Folder'\r\nimport {RootFolder} from './RootFolder'\r\nimport {Search} from './Search'\r\n\r\n\r\nexport const SavedSearchesTree = ({\r\n    elements,\r\n    personalRootId,\r\n    publicRootId,\r\n    onDoubleClickSearch,\r\n}: TreeProps) => {\r\n    const {\r\n        getStorageOpenNodesPersonal,\r\n        getStorageOpenNodesPublic,\r\n        setStorageOpenNodesPersonal,\r\n        setStorageOpenNodesPublic,\r\n    } = useAllSearchesStorageControls()\r\n\r\n    const selectedSearchId = useEvaluationState('selectedSearchId')\r\n    const {setSelectedSearch} = useEvaluationStateMethods()\r\n\r\n    const [openedPersonal, setOpenedPersonal] = useState<string[]>(() => getStorageOpenNodesPersonal())\r\n    const [openedPublic, setOpenedPublic] = useState<string[]>(() => getStorageOpenNodesPublic())\r\n    const [convertedElements, setConvertedElements] = useState<TreeElemsMap>({})\r\n\r\n    const {\r\n        removeElem,\r\n        addFolder,\r\n        addSearch,\r\n    } = useTreeModalsController(convertedElements)\r\n\r\n    const toggleNodePersonal = useCallback((nodeId: string) => {\r\n        let newOpened\r\n        if (openedPersonal.includes(nodeId)) {\r\n            newOpened = openedPersonal.filter(id => id !== nodeId)\r\n        } else {\r\n            newOpened = [...openedPersonal, nodeId]\r\n        }\r\n        setOpenedPersonal(newOpened)\r\n        setStorageOpenNodesPersonal(newOpened)\r\n    }, [openedPersonal, setOpenedPersonal, setStorageOpenNodesPersonal])\r\n\r\n    const toggleNodePublic = useCallback((nodeId: string) => {\r\n        let newOpened\r\n        if (openedPublic.includes(nodeId)) {\r\n            newOpened = openedPublic.filter(id => id !== nodeId)\r\n        } else {\r\n            newOpened = [...openedPublic, nodeId]\r\n        }\r\n        setOpenedPublic(newOpened)\r\n        setStorageOpenNodesPublic(newOpened)\r\n    }, [openedPublic, setOpenedPublic, setStorageOpenNodesPublic])\r\n\r\n    useEffect(() => {\r\n        const convertedElems = elements.reduce<TreeElemsMap>((acc, element) => {\r\n            acc[element.id] = {\r\n                id: element.id,\r\n                name: element.name,\r\n                isLeaf: element.type === 'QUERY',\r\n                parentId: element.parentId,\r\n                privacy: element.privacy,\r\n            }\r\n            return acc\r\n        }, {})\r\n\r\n        setConvertedElements(convertedElems)\r\n    }, [elements])\r\n\r\n    const personalRoot = useMemo(() => {\r\n        return convertedElements[personalRootId] || null\r\n    }, [personalRootId, convertedElements])\r\n\r\n    const publicRoot = useMemo(() => {\r\n        return convertedElements[publicRootId] || null\r\n    }, [publicRootId, convertedElements])\r\n\r\n    const openTreeChildren = useCallback((nodeId: string) => {\r\n        return Object.keys(convertedElements).reduce<TreeElem[]>((acc, elemId) => {\r\n            const elem = convertedElements[elemId]\r\n            if (elem?.parentId === nodeId) {\r\n                return [...acc, elem]\r\n            }\r\n            return acc\r\n        }, []).sort((a, b) => {\r\n            return Number(a.isLeaf) - Number(b.isLeaf)\r\n        })\r\n\r\n    }, [convertedElements])\r\n\r\n    //@todo: speak about renaming items with project managers\r\n    // there are no backend, and probably its not necessary\r\n    const renameElem = (elemId: string) => {}\r\n\r\n    const isChildOf = useCallback((possibleParentId: string, elementId: string) => {\r\n        let elemParentId = convertedElements[elementId].parentId\r\n        while (elemParentId) {\r\n            if (elemParentId === possibleParentId) {\r\n                return true\r\n            }\r\n            elemParentId = convertedElements[elemParentId]?.parentId || ''\r\n        }\r\n        return false\r\n    }, [convertedElements])\r\n\r\n    const renderNonLeafNode = useCallback((nodeData: NodeFolder, handleNodeIconClick: (event: MouseEvent<HTMLDivElement>) => void) => {\r\n        const privacy = convertedElements[nodeData.id].privacy || 'PERSONAL'\r\n        if (nodeData.id === personalRootId || nodeData.id === publicRootId) {\r\n            return (\r\n                <RootFolder\r\n                    nodeData={nodeData}\r\n                    handleNodeIconClick={handleNodeIconClick}\r\n                    addFolder={addFolder}\r\n                    addSearch={addSearch}\r\n                    privacy={privacy}\r\n                    isChildOf={isChildOf}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <Folder\r\n                nodeData={nodeData}\r\n                handleNodeIconClick={handleNodeIconClick}\r\n                addFolder={addFolder}\r\n                addSearch={addSearch}\r\n                removeElem={removeElem}\r\n                renameElem={renameElem}\r\n                privacy={privacy}\r\n                isChildOf={isChildOf}\r\n            />\r\n        )\r\n    }, [addFolder, addSearch, removeElem, renameElem, personalRootId, publicRootId, convertedElements, isChildOf])\r\n\r\n    const renderLeafNode = useCallback((nodeData: NodeLeaf) => {\r\n        const privacy = convertedElements[nodeData.id].privacy || 'PERSONAL'\r\n        return (\r\n            <Search\r\n                nodeData={nodeData}\r\n                selected={nodeData.id === selectedSearchId}\r\n                onSelect={setSelectedSearch}\r\n                removeElem={removeElem}\r\n                renameElem={renameElem}\r\n                onDoubleClick={onDoubleClickSearch}\r\n                isChildOf={isChildOf}\r\n                privacy={privacy}\r\n            />\r\n        )\r\n    }, [\r\n        removeElem,\r\n        renameElem,\r\n        onDoubleClickSearch,\r\n        convertedElements,\r\n        isChildOf,\r\n        selectedSearchId,\r\n        setSelectedSearch,\r\n    ])\r\n\r\n    return (\r\n        <div className=\"px-1.5\">\r\n            <div className=\"mb-[30px]\">\r\n                <Tree\r\n                    onNodeIconClick={toggleNodePersonal}\r\n                    rootNode={personalRoot}\r\n                    getChildren={openTreeChildren}\r\n                    expandedNodes={openedPersonal}\r\n                    initialDepth={0}\r\n                    renderNonLeafNode={renderNonLeafNode}\r\n                    renderLeafNode={renderLeafNode}\r\n                    depthWidth={0}\r\n                />\r\n            </div>\r\n            <Tree\r\n                onNodeIconClick={toggleNodePublic}\r\n                rootNode={publicRoot}\r\n                getChildren={openTreeChildren}\r\n                expandedNodes={openedPublic}\r\n                renderNonLeafNode={renderNonLeafNode}\r\n                renderLeafNode={renderLeafNode}\r\n                initialDepth={0}\r\n                depthWidth={0}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"iFrame\":\"agent_NonCallCases_iFrame_rm769\",\"tabsContent\":\"agent_NonCallCases_tabsContent_cio2A\",\"tabs\":\"agent_NonCallCases_tabs_ME0ot\"};","import type {FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {removeHttp, removeLastSlash} from '@bpinc/lib-helpers'\r\nimport type {TabI} from '@bpinc/lib-ui-elements'\r\nimport {Iframe, Tabs} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../styles/NonCallCases.module.less'\r\n\r\n\r\nexport const NonCallCases: FC = () => {\r\n    const {nonCallCasesUrls} = useSessionState()\r\n\r\n    const tabs = useMemo(\r\n        function memoizeTabs() {\r\n            return nonCallCasesUrls?.map(url => ({id: url, title: flow(removeLastSlash, removeHttp)(url)})) ?? []\r\n        },\r\n        [nonCallCasesUrls],\r\n    )\r\n\r\n    const [activeTabId, setActiveTabId] = useState<string>()\r\n\r\n    const renderTabContent = useCallback(function renderTabCallback({id}: TabI<string>) {\r\n        return <Iframe src={id} className={styles.iFrame} />\r\n    }, [])\r\n\r\n    useEffect(function initializeActiveTab() {\r\n        if (tabs.length && !activeTabId) setActiveTabId(tabs[0].id)\r\n    }, [activeTabId, tabs])\r\n\r\n    return activeTabId ? (\r\n        <Tabs\r\n            data-testid=\"non-call-cases-page\"\r\n            tabs={tabs}\r\n            activeTabId={activeTabId}\r\n            onChange={setActiveTabId}\r\n            renderTabContent={renderTabContent}\r\n            className={styles.tabs}\r\n            tabsContentClassName={styles.tabsContent}\r\n        />\r\n    ) : <div data-testid=\"non-call-cases-page\" />\r\n}\r\n","import type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\n\r\n\r\nexport const MAX_CONTACTS_FOR_MERGE = 3\r\nexport const DEFAULT_SEARCH_TAB: SearchPageTab = {id: 'search', type: 'search', title: '', closeable: false}\r\n\r\nexport type SearchPageTab = ContactTab | CaseTab | SearchTab | CreateContactTab | MergeContactsTab\r\n\r\nexport interface ContactTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'contact'\r\n    props: {\r\n        editMode?: boolean\r\n        onMerge: (() => void) | undefined\r\n        onEditMode?: (edit: boolean) => void\r\n    }\r\n}\r\n\r\ninterface CaseTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'case'\r\n}\r\n\r\ninterface SearchTab {\r\n    id: string\r\n    title: string\r\n    closeable: false\r\n    type: 'search'\r\n}\r\n\r\nexport interface CreateContactTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'create_contact'\r\n    props: {\r\n        initialData?: ContactDetailsType\r\n        onContactCreated?: (contactId: string) => void\r\n    }\r\n}\r\n\r\ninterface MergeContactsTab {\r\n    id: string\r\n    title: string\r\n    closeable: false\r\n    type: 'merge_contacts'\r\n}\r\n\r\n","import {atom} from 'jotai'\r\n\r\nimport type {CaseServiceFilter, CasesSortBy, CaseStatus} from '@bpinc/ad-request-urls'\r\n\r\nimport type {SearchPageTab} from './utils'\r\nimport {DEFAULT_SEARCH_TAB} from './utils'\r\n\r\n\r\nexport const searchQueryAtom = atom<string>('')\r\nexport const searchPageTabsAtom = atom<SearchPageTab[]>([DEFAULT_SEARCH_TAB])\r\nexport const searchPageActiveTabIdAtom = atom<string>(DEFAULT_SEARCH_TAB.id)\r\n\r\nexport const selectedContactIdAtom = atom<string | undefined>(undefined)\r\nexport const selectedCaseIdAtom = atom<string | undefined>(undefined)\r\nexport const selectedCaseTabWidthAtom = atom<number>(600)\r\n\r\nexport const casesStatusesAtom = atom<CaseStatus[]>([])\r\nexport const casesSortingAtom = atom<{\r\n    sortBy: CasesSortBy\r\n    asc: boolean\r\n}>({\r\n    sortBy: 'score',\r\n    asc: false,\r\n})\r\nexport const casesServiceAtom = atom<CaseServiceFilter | undefined>(undefined)\r\nexport const casesTeamIdAtom = atom<string | undefined>(undefined)\r\n\r\nexport const mergingContactsAtom = atom<string[]>([])\r\n","import {useCallback} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {searchPageActiveTabIdAtom, searchPageTabsAtom} from './atoms'\r\nimport type {SearchPageTab} from './utils'\r\n\r\n\r\nexport function useSearchPageTabsActions() {\r\n    const [tabs, setTabs] = useAtom(searchPageTabsAtom)\r\n    const [activeTabId, setActiveTabId] = useAtom(searchPageActiveTabIdAtom)\r\n\r\n    const handleTabOpen = useCallback((tab: SearchPageTab) => {\r\n        const targetTab = tabs.find(it => it.id === tab.id)\r\n        if (targetTab) {\r\n            // tab is open. focus it\r\n            setActiveTabId(tab.id)\r\n        } else {\r\n            // open new tab\r\n            setTabs([...tabs, tab])\r\n            setActiveTabId(tab.id)\r\n        }\r\n    }, [setActiveTabId, setTabs, tabs])\r\n\r\n    const handleTabClose = useCallback((id: string) => {\r\n        if (id === activeTabId) setActiveTabId(tabs[0].id)\r\n        setTabs(tabs.filter(tab => tab.id !== id))\r\n    }, [activeTabId, setActiveTabId, setTabs, tabs])\r\n\r\n\r\n    const handleTabUpdate = useCallback((tab: SearchPageTab) => {\r\n        setTabs(currentTabs => currentTabs.map(t => {\r\n            if (t.id === tab.id) {\r\n                return tab\r\n            }\r\n            return t\r\n        }))\r\n    }, [setTabs])\r\n\r\n    return {handleTabOpen, handleTabClose, handleTabUpdate}\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {mergingContactsAtom} from './atoms'\r\nimport {useSearchPageTabsActions} from './useSearchPageTabsActions'\r\nimport {MAX_CONTACTS_FOR_MERGE} from './utils'\r\n\r\n\r\nexport function useMergeContactsActions() {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const [mergingContacts, setMergingContacts] = useAtom(mergingContactsAtom)\r\n    const {handleTabOpen, handleTabClose} = useSearchPageTabsActions()\r\n    const canAddContactForMerge = MAX_CONTACTS_FOR_MERGE > mergingContacts.length && privileges.EDIT_CONTACTS && privileges.DELETE_CONTACTS\r\n\r\n    const addContactForMerge = useCallback((contactId: string) => {\r\n        setMergingContacts(contacts => {\r\n            return Array.from(new Set([...contacts, contactId]))\r\n        })\r\n        handleTabOpen({\r\n            id: 'merge',\r\n            type: 'merge_contacts',\r\n            title: t.GLOBAL.merge(),\r\n            closeable: false,\r\n        })\r\n    }, [handleTabOpen, setMergingContacts, t.GLOBAL])\r\n\r\n    const removeContactFromMerge = useCallback((contactId: string) => {\r\n        const contacts = mergingContacts.filter(id => id !== contactId)\r\n        setMergingContacts(contacts)\r\n        if (!contacts.length) {\r\n            handleTabClose('merge')\r\n        }\r\n    }, [handleTabClose, mergingContacts, setMergingContacts])\r\n\r\n    const closeContactsMerge = useCallback(() => {\r\n        setMergingContacts([])\r\n        handleTabClose('merge')\r\n    }, [handleTabClose, mergingContacts, setMergingContacts])\r\n\r\n    return {\r\n        addContactForMerge: canAddContactForMerge ? addContactForMerge : undefined,\r\n        removeContactFromMerge,\r\n        canAddContactForMerge,\r\n        closeContactsMerge,\r\n    }\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useOpenSearchContactModal} from '@bpinc/lib-modals-ui'\r\nimport {LinkLikeButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMergeContactsActions} from '../useMergeContactsActions'\r\n\r\n\r\nexport const AddContactForMere: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const openSearchContactModal = useOpenSearchContactModal()\r\n    const {addContactForMerge} = useMergeContactsActions()\r\n\r\n    const handleOpenSearchContactModal = useCallback(() => {\r\n        openSearchContactModal({\r\n            dataKey: 'calendar-event-form-add-contact-modal',\r\n            onSelect: ({id}) => addContactForMerge?.(id),\r\n            title: t.MERGE_FORM.add_contact(),\r\n            selectButtonTitle: t.GLOBAL.add(),\r\n        })\r\n    }, [addContactForMerge, openSearchContactModal, t.MERGE_FORM])\r\n\r\n    return (\r\n        <LinkLikeButton\r\n            onClick={handleOpenSearchContactModal}\r\n        >\r\n            <span>{`+ ${t.MERGE_FORM.add_contact()}`}</span>\r\n        </LinkLikeButton>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype MergeActionsProps = {\r\n    onReset: () => void\r\n    onConfirm: () => void\r\n    isSubmitting: boolean\r\n    disabled: boolean\r\n}\r\n\r\nexport const MergeActions: React.FC<MergeActionsProps> = ({onReset, onConfirm, isSubmitting, disabled}) => {\r\n    const {t} = useLocalizationState()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center p-3.5\">\r\n            <SemanticButton basic primary onClick={onConfirm} disabled={disabled} loading={isSubmitting}>\r\n                {t.GLOBAL.confirm()}\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                basic\r\n                primary\r\n                onClick={() => {\r\n                    openModal({\r\n                        title: t.GLOBAL.reset(),\r\n                        body: t.MERGE_FORM.confirm_reset(),\r\n                        actions: {\r\n                            ok: {\r\n                                title: t.GLOBAL.reset(),\r\n                                action: () => onReset(),\r\n                            },\r\n                            cancel: {\r\n                                title: t.GLOBAL.cancel(),\r\n                            },\r\n                        },\r\n                    })\r\n                }}\r\n                disabled={disabled || isSubmitting}\r\n            >\r\n                {t.GLOBAL.reset()}\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController, useWatch} from 'react-hook-form'\r\n\r\nimport {SmCheckbox} from '@bpinc/lib-external-ui-elements'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport type {MergeContactFormType, MergeFormElementField} from './types'\r\n\r\n\r\ntype MergeFieldProps = {\r\n    field: MergeFormElementField\r\n    control: Control<MergeContactFormType>\r\n}\r\n\r\nexport const MergeField: React.FC<MergeFieldProps> = ({field: fieldData, control}) => {\r\n    const {field: {\r\n        name,\r\n        onChange,\r\n        value,\r\n    }} = useController({\r\n        name: fieldData.name,\r\n        defaultValue: fieldData.defaultValue,\r\n        control,\r\n    })\r\n\r\n    const formValues = useWatch({control})\r\n\r\n    const label = (\r\n        <label\r\n            htmlFor={name}\r\n            className={tcn('[&:after]:!top-1/2 [&:after]:!-translate-y-1/2 [&:before]:!top-1/2 [&:before]:!-translate-y-1/2', {\r\n                '[&:after]:!scale-[47%]': fieldData.type === 'radio',\r\n                '[&:after]:!opacity-95': value === fieldData.value,\r\n            })}\r\n        >\r\n            {fieldData.content}\r\n        </label>\r\n    )\r\n\r\n    return (\r\n        <SmCheckbox\r\n            name={name}\r\n            type={fieldData.type}\r\n            radio={fieldData.type === 'radio'}\r\n            label={label}\r\n            disabled={fieldData.disabled}\r\n            onChange={(_, data) => {\r\n                if (data.checked && fieldData.validate && !fieldData.validate(formValues)) {\r\n                    return\r\n                }\r\n                if (data.type === 'radio') {\r\n                    onChange(data.value)\r\n                } else if (data.type === 'checkbox') {\r\n                    onChange(data.checked ? data.value : null)\r\n                }\r\n            }}\r\n            value={fieldData.value}\r\n            checked={value === fieldData.value}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMergeContactsActions} from '../useMergeContactsActions'\r\n\r\n\r\ntype MergeContactInfoProps = {\r\n    contact: ContactType | undefined\r\n}\r\n\r\nexport const MergeContactInfo: React.FC<MergeContactInfoProps> = ({contact}) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {removeContactFromMerge} = useMergeContactsActions()\r\n\r\n    const url = getAvatarUrl({contactId: contact?.Id.oid})\r\n\r\n    return (\r\n        <div className=\"flex gap-2\">\r\n            <AvatarLegacy\r\n                size={40}\r\n                url={url}\r\n                firstName={contact?.firstName}\r\n                lastName={contact?.lastName}\r\n                type=\"contact\"\r\n            />\r\n            <div>\r\n                <p className=\"font-bold\">{formatFullName(contact?.firstName, contact?.lastName)}</p>\r\n                {/*TODO: update after backend implementation*/}\r\n                <p className=\"text-main-secondary\">{t.MERGE_FORM.created('--/--/----')}</p>\r\n            </div>\r\n            <SemanticButton\r\n                transparent\r\n                icon=\"close\"\r\n                onClick={() => removeContactFromMerge(contact?.Id.oid || '')}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport type {MergeFormArrayFields, MergeFormFieldValidator} from './types'\r\n\r\n\r\nconst MAX_ARRAY_ELEMENTS_AMOUNT: Record<MergeFormArrayFields, number> = {\r\n    phones: 5,\r\n    emails: 3,\r\n    addresses: 3,\r\n    messengers: 1,\r\n}\r\n\r\nexport function useGetMergeFormFieldValidator(): (type: MergeFormArrayFields) => MergeFormFieldValidator {\r\n    const {t} = useLocalizationState()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    return useCallback((type: MergeFormArrayFields) => {\r\n        const alertTexts = {\r\n            addresses: t.MERGE_FORM.max_addresses(MAX_ARRAY_ELEMENTS_AMOUNT[type]),\r\n            phones: t.MERGE_FORM.max_phones(MAX_ARRAY_ELEMENTS_AMOUNT[type]),\r\n            emails: t.MERGE_FORM.max_emails(MAX_ARRAY_ELEMENTS_AMOUNT[type]),\r\n            messengers: t.MERGE_FORM.max_messengers(MAX_ARRAY_ELEMENTS_AMOUNT[type]),\r\n        }\r\n\r\n        return values => {\r\n            if (truthy(values.Contact?.[type] || []).length >= MAX_ARRAY_ELEMENTS_AMOUNT[type]) {\r\n                openModal({\r\n                    title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                    body: alertTexts[type],\r\n                    actions: {\r\n                        ok: {\r\n                            title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        },\r\n                    },\r\n                })\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    }, [openModal, t.MERGE_FORM, t.WINDOW_POPUP_TITLES_AND_MESSAGES])\r\n}\r\n\r\n","import type {ReactNode} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport {isEqual, omit} from 'lodash-es'\r\n\r\nimport type {ServerAddressType, ServerEmailType, ServerPhoneType} from '@bpinc/ad-contacts-state-types'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport {Image} from '@bpinc/lib-form-builder-ui'\r\nimport {parseMessengers} from '@bpinc/lib-forms-base'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\n\r\nimport {MergeContactInfo} from './MergeContactInfo'\r\nimport type {\r\n    MergeContactData,\r\n    MergeFormArrayFields,\r\n    MergeFormContactData,\r\n    MergeFormContactRow,\r\n    MergeFormRowData,\r\n} from './types'\r\nimport {useGetMergeFormFieldValidator} from './useGetMergeFormFieldValidator'\r\n\r\n\r\nexport function useMergeFormFields(fromRows: MergeFormRowData[], contacts: MergeContactData[]): MergeFormContactData[] {\r\n    const getMessengerName = useGetMessengerName()\r\n    const getMergeFormFieldValidator = useGetMergeFormFieldValidator()\r\n\r\n\r\n    return useMemo(() => {\r\n        const mergeContactsData: MergeFormContactData[] = []\r\n        const arrayFieldsCount: Record<MergeFormArrayFields, number> = {\r\n            phones: 0,\r\n            emails: 0,\r\n            addresses: 0,\r\n            messengers: 0,\r\n        }\r\n\r\n        contacts.forEach(({details: contactDetails, data: contactData, isLoading}) => {\r\n            const contactDataRows: MergeFormContactRow[] = []\r\n            mergeContactsData.push({rows: contactDataRows})\r\n\r\n            fromRows.forEach(({mapping, type, element}) => {\r\n                const fields: MergeFormContactRow['fields'] = []\r\n                contactDataRows.push({fields})\r\n\r\n                const filedValue = contactDetails && mapping ? contactDetails[mapping] : null\r\n                const stringFileValue = typeof filedValue === 'string' ? filedValue : ''\r\n\r\n                if (isLoading || !mapping || (!filedValue && mapping !== 'id')) {\r\n                    return\r\n                }\r\n\r\n                const getArrayFieldName = (arrayType: MergeFormArrayFields, value: object) => {\r\n                    const name = mergeContactsData\r\n                        .map(d => d.rows)\r\n                        .flat()\r\n                        .map(r => r.fields)\r\n                        .flat()\r\n                        .find(v => v.value === JSON.stringify(omit(value, 'id')))\r\n                        ?.name\r\n\r\n                    if (name) {\r\n                        return name\r\n                    }\r\n\r\n                    const index = arrayFieldsCount[arrayType]\r\n                    arrayFieldsCount[arrayType]++\r\n\r\n                    return `${mapping}.[${index}]`\r\n                }\r\n\r\n                const otherContactsValues = contacts\r\n                    .filter(c => c.data?.Id.oid !== contactData?.Id.oid && c.details)\r\n                    .map(c => c.details?.[mapping])\r\n                    .filter(Boolean)\r\n\r\n                const firstContactSringifiedValue = typeof otherContactsValues[0] === 'string'\r\n                    ? otherContactsValues[0]\r\n                    : undefined\r\n\r\n                const addSingleField = (content: ReactNode, value: string) => {\r\n                    const allValuesIsEqual = otherContactsValues.length\r\n                        ? otherContactsValues.every(v => isEqual(v, value))\r\n                        : true\r\n\r\n                    fields.push({\r\n                        name: mapping,\r\n                        disabled: allValuesIsEqual,\r\n                        defaultValue: firstContactSringifiedValue || value,\r\n                        content,\r\n                        type: allValuesIsEqual ? 'checkbox' : 'radio',\r\n                        value,\r\n                    })\r\n                }\r\n\r\n                const addArrayField = (content: ReactNode, value: object, arrayType: MergeFormArrayFields) => {\r\n                    const name = getArrayFieldName(arrayType, value)\r\n                    const hasSameValue = contacts\r\n                        .filter(c => c.data?.Id.oid !== contactData?.Id.oid && c.details)\r\n                        .map(c => c.details?.[mapping])\r\n                        .every(values => {\r\n                            return Array.isArray(values) && values.some(v => isEqual(omit(v, 'id'), omit(value, 'id')))\r\n                        })\r\n\r\n                    const stringifiedValue = JSON.stringify(omit(value, 'id'))\r\n\r\n                    fields.push({\r\n                        name,\r\n                        disabled: hasSameValue,\r\n                        defaultValue: hasSameValue ? stringifiedValue : undefined,\r\n                        content: content,\r\n                        type: 'checkbox',\r\n                        value: stringifiedValue,\r\n                        validate: getMergeFormFieldValidator(arrayType),\r\n                    })\r\n                }\r\n\r\n                if (mapping === 'id') {\r\n                    fields.push({\r\n                        name: mapping,\r\n                        disabled: false,\r\n                        type: 'radio',\r\n                        defaultValue: firstContactSringifiedValue || contactData?.Id.oid || '',\r\n                        content: <MergeContactInfo contact={contactData} />,\r\n                        value: contactData?.Id.oid || '',\r\n                    })\r\n                    return\r\n                }\r\n                switch (element?.type) {\r\n                    case 'phoneList': {\r\n                        const phones = (filedValue as ServerPhoneType[]).filter(item => item.type === type)\r\n                        phones.forEach(phone => {\r\n                            addArrayField(phone.phone, phone, 'phones')\r\n                        })\r\n                        return\r\n                    }\r\n                    case 'emailList': {\r\n                        const emails = (filedValue as ServerEmailType[]).filter(item => item.type === type)\r\n                        emails.forEach(email => {\r\n                            addArrayField(email.email_address, email, 'emails')\r\n                        })\r\n                        return\r\n                    }\r\n                    case 'addressList': {\r\n                        const addresses = (filedValue as ServerAddressType[]).filter(item => item.type === type)\r\n                        addresses.forEach(address => {\r\n                            const formattedAddress = [\r\n                                address.address_line1,\r\n                                address.address_line2,\r\n                                address.city,\r\n                                STATES[address.state as keyof typeof STATES],\r\n                                address.postcode,\r\n                            ]\r\n                                .filter(Boolean)\r\n                                .join(', ')\r\n\r\n                            addArrayField(\r\n                                formattedAddress,\r\n                                address,\r\n                                'addresses',\r\n                            )\r\n                        })\r\n\r\n                        return\r\n                    }\r\n                    case 'messengers': {\r\n                        const messengers = parseMessengers(filedValue)?.filter(item => item.type === type) || []\r\n                        messengers.forEach(messenger => {\r\n                            addArrayField(\r\n                                `${getMessengerName(messenger.type)} ${messenger?.user_name}`,\r\n                                messenger,\r\n                                'messengers',\r\n                            )\r\n                        })\r\n                        return\r\n                    }\r\n                    case 'dateTime': {\r\n                        addSingleField(formatDate(stringFileValue, {birthday: true}), stringFileValue)\r\n                        return\r\n                    }\r\n                    case 'image': {\r\n                        addSingleField(<Image value={stringFileValue} />, stringFileValue)\r\n                        return\r\n                    }\r\n                    default: {\r\n                        addSingleField(stringFileValue, stringFileValue)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        return mergeContactsData\r\n    }, [contacts, fromRows, getMessengerName])\r\n}\r\n\r\n","import {useMemo} from 'react'\r\n\r\nimport type {ServerAddressType, ServerEmailType, ServerPhoneType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {FormElement, FormElementType} from '@bpinc/lib-form-builder'\r\nimport {parseMessengers} from '@bpinc/lib-forms-base'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {MergeContactData, MergeFormRowData} from './types'\r\n\r\n\r\nconst SKIPPED_ELEMENT_TYPES: FormElementType[] = [\r\n    'checkbox',\r\n    'select',\r\n    'spacer',\r\n    'button',\r\n    'radio',\r\n    'label',\r\n]\r\n\r\n\r\nexport function useMergeFormRows(formElements: FormElement[], contacts: MergeContactData[]) {\r\n    const {t} = useLocalizationState()\r\n    const getMessengerName = useGetMessengerName()\r\n    const {formatEmailType, formatPhoneType, formatAddressType} = useFormatting()\r\n    return useMemo(() => {\r\n        const visibleRows: MergeFormRowData[] = formElements.length ? [\r\n            {\r\n                label: t.MERGE_FORM.master_record(),\r\n                mapping: 'id',\r\n                element: undefined,\r\n            },\r\n        ] : []\r\n\r\n        formElements.forEach(element => {\r\n            const {mapping, type: elementType} = element\r\n            if (!mapping || !elementType) {\r\n                return\r\n            }\r\n            if (SKIPPED_ELEMENT_TYPES.includes(elementType)) {\r\n                return\r\n            }\r\n\r\n            const values = contacts.map(c => c.details?.[mapping]).filter(Boolean).flat()\r\n            if (!values.length) {\r\n                return\r\n            }\r\n\r\n            switch (elementType) {\r\n                case 'phoneList': {\r\n                    visibleRows.push({\r\n                        label: t.MERGE_FORM.phone_number(),\r\n                        element,\r\n                    })\r\n                    const allPhonesTypes = (values as ServerPhoneType[]).map(v => v.type)\r\n                    const phonesTypes = Array.from(new Set(allPhonesTypes))\r\n                    phonesTypes.forEach(type => {\r\n                        visibleRows.push({\r\n                            label: formatPhoneType(type),\r\n                            mapping,\r\n                            type,\r\n                            element,\r\n                        })\r\n                    })\r\n                    break\r\n                }\r\n                case 'emailList': {\r\n                    visibleRows.push({\r\n                        label: t.MERGE_FORM.email(),\r\n                        element,\r\n                    })\r\n                    const allEmailTypes = (values as ServerEmailType[]).map(v => v.type)\r\n                    const emailTypes = Array.from(new Set(allEmailTypes))\r\n                    emailTypes.forEach(type => {\r\n                        visibleRows.push({\r\n                            label: formatEmailType(type),\r\n                            mapping,\r\n                            type,\r\n                            element,\r\n                        })\r\n                    })\r\n                    break\r\n                }\r\n                case 'addressList': {\r\n                    visibleRows.push({\r\n                        label: t.MERGE_FORM.address(),\r\n                        element,\r\n                    })\r\n                    const allAddressTypes = (values as ServerAddressType[]).map(v => v.type)\r\n                    const addressTypes = Array.from(new Set(allAddressTypes))\r\n                    addressTypes.forEach(type => {\r\n                        visibleRows.push({\r\n                            label: formatAddressType(type),\r\n                            mapping,\r\n                            type,\r\n                            element,\r\n                        })\r\n                    })\r\n                    break\r\n                }\r\n                case 'messengers': {\r\n                    visibleRows.push({\r\n                        label: t.MERGE_FORM.messenger(),\r\n                        element,\r\n                    })\r\n                    const allMessengersTypes = values.map(parseMessengers).flat().map(v => v?.type)\r\n                    const messengersTypes = Array.from(new Set(allMessengersTypes))\r\n                    messengersTypes.forEach(type => {\r\n                        if (!type) {\r\n                            return\r\n                        }\r\n                        visibleRows.push({\r\n                            label: getMessengerName(type),\r\n                            mapping,\r\n                            type,\r\n                            element,\r\n                        })\r\n                    })\r\n                    break\r\n                }\r\n                default: {\r\n                    visibleRows.push({\r\n                        label: element.label || '',\r\n                        mapping,\r\n                        element,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        return visibleRows\r\n    }, [contacts, formElements, formatAddressType, formatEmailType, formatPhoneType, getMessengerName, t.MERGE_FORM])\r\n}\r\n","import {useAtomValue} from 'jotai'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\n\r\nimport {mergingContactsAtom} from '../atoms'\r\nimport type {MergeContactData} from './types'\r\nimport {useMergeFormElements} from './useMergeFormElements'\r\nimport {useMergeFormFields} from './useMergeFormFields'\r\nimport {useMergeFormRows} from './useMergeFormRows'\r\n\r\n\r\nexport function useMergeFormData() {\r\n    const formElements = useMergeFormElements()\r\n    const mergingContacts = useAtomValue(mergingContactsAtom)\r\n    const contactsData = useContactsState(s => mergingContacts.map(id => {\r\n        const {contactDetailsLoading, details, data, isLoading} = s.contacts[id] || {}\r\n\r\n        return {\r\n            isLoading: (isLoading || contactDetailsLoading) ?? true,\r\n            details,\r\n            data: data || undefined,\r\n        } satisfies MergeContactData\r\n    }))\r\n\r\n    const formRows = useMergeFormRows(formElements, contactsData)\r\n    const mergeContactsData = useMergeFormFields(formRows, contactsData)\r\n\r\n    return {\r\n        formRows,\r\n        contactsData,\r\n        mergeContactsData,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useContactFormDefinition} from '@bpinc/ad-contacts-state-context'\r\nimport {checkIsLayout, createFormElement} from '@bpinc/lib-form-builder'\r\n\r\n\r\nexport function useMergeFormElements() {\r\n    const formDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n\r\n    return useMemo(() => {\r\n        if (!formDefinition) {\r\n            return []\r\n        }\r\n\r\n        const formElements = formDefinition.layout.pages.map(page => page.fields).flat()\r\n        const formFields = formElements.filter(field => !checkIsLayout(field.field))\r\n        return formFields?.map(createFormElement) ?? []\r\n    }, [formDefinition])\r\n}\r\n","import {useMemo} from 'react'\r\nimport type {UseFormHandleSubmit} from 'react-hook-form/dist/types/form'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsType, ContactDetailsUnflatten} from '@bpinc/ad-contacts-state-types'\r\nimport {flatten, unflatten} from '@bpinc/lib-flat'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {mergingContactsAtom} from '../atoms'\r\nimport {useMergeContactsActions} from '../useMergeContactsActions'\r\nimport type {ContactDetailsUnflattenContact, MergeContactFormType} from './types'\r\n\r\n\r\ntype UseOnSubmitParams = {\r\n    handleSubmit: UseFormHandleSubmit<MergeContactFormType>\r\n}\r\n\r\nexport function useOnSubmit({\r\n    handleSubmit,\r\n}: UseOnSubmitParams) {\r\n    const {t} = useLocalizationState()\r\n    const mergingContacts = useAtomValue(mergingContactsAtom)\r\n    const {closeContactsMerge} = useMergeContactsActions()\r\n    const {mergeContacts, getContactDetails} = useContactsStateMethods()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    return useMemo(\r\n        function memoizeSubmit() {\r\n            return handleSubmit(async function onSubmit(data) {\r\n                const continueSubmit = await new Promise(resolve => {\r\n                    openModal({\r\n                        title: t.GLOBAL.confirm(),\r\n                        body: t.MERGE_FORM.confirm_merge(),\r\n                        actions: {\r\n                            ok: {\r\n                                title: t.GLOBAL.continue(),\r\n                                action: () => resolve(true),\r\n                            },\r\n                            cancel: {\r\n                                title: t.GLOBAL.cancel(),\r\n                                action: () => resolve(false),\r\n                            },\r\n                        },\r\n                        afterClose: () => resolve(false),\r\n                    })\r\n                })\r\n\r\n                if (!continueSubmit) {\r\n                    return\r\n                }\r\n\r\n                const {id: targetContactId, ...mergedContactData} = data\r\n                const currentDetails = await getContactDetails({id: targetContactId})\r\n                if (!currentDetails) {\r\n                    return\r\n                }\r\n                const details = getUnfalttenContactDetails()\r\n\r\n                await mergeContacts({\r\n                    id: targetContactId,\r\n                    mergedDetails: details,\r\n                    removeIds: mergingContacts.filter(id => id !== targetContactId),\r\n                })\r\n\r\n                closeContactsMerge()\r\n\r\n                function getUnfalttenContactDetails() {\r\n                    const {\r\n                        Contact: {emails, addresses, phones, messengers, ...restContactData} = {},\r\n                        ...restData\r\n                    } = mergedContactData\r\n\r\n                    const contactDetailsUnflatten = {\r\n                        ...restData,\r\n                        Contact: {\r\n                            ...restContactData,\r\n                            phones: truthy(phones || []).map(p => JSON.parse(p)) as ContactDetailsUnflattenContact['phones'],\r\n                            addresses: truthy(addresses || []).map(p => JSON.parse(p)) as ContactDetailsUnflattenContact['addresses'],\r\n                            emails: truthy(emails || []).map(p => JSON.parse(p)) as ContactDetailsUnflattenContact['emails'],\r\n                            messengers: truthy(messengers || []).map(p => JSON.parse(p)) as ContactDetailsUnflattenContact['messengers'],\r\n                        },\r\n                    } satisfies ContactDetailsUnflatten\r\n                    const flattenContactDetails = flatten<ContactDetailsUnflatten, ContactDetailsType>(contactDetailsUnflatten, {maxDepth: 2})\r\n\r\n                    return unflatten<ContactDetailsType, ContactDetailsUnflatten>({...currentDetails, ...flattenContactDetails})\r\n                }\r\n            })\r\n        },\r\n        [closeContactsMerge, getContactDetails, handleSubmit, mergeContacts, mergingContacts, openModal, t.GLOBAL, t.MERGE_FORM],\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useMergeContactsActions} from '../useMergeContactsActions'\r\nimport {AddContactForMere} from './AddContactForMere'\r\nimport {MergeActions} from './MergeActions'\r\nimport {MergeField} from './MergeField'\r\nimport type {MergeContactFormType} from './types'\r\nimport {useLoadMergeContactsData} from './useLoadMergeContactsData'\r\nimport {useMergeFormData} from './useMergeFormData'\r\nimport {useOnSubmit} from './useOnSubmit'\r\n\r\n\r\nfunction getFieldClassName(rowIndex: number) {\r\n    return tcn('row-auto bg-main-bg px-4 py-3', {\r\n        'bg-black bg-opacity-5': rowIndex % 2,\r\n        'sticky top-0 z-10 border-b border-main-border': rowIndex === 0,\r\n    })\r\n}\r\n\r\n\r\nexport const Merge: React.FC = () => {\r\n    useLoadMergeContactsData()\r\n    const {canAddContactForMerge} = useMergeContactsActions()\r\n    const {formRows, contactsData, mergeContactsData} = useMergeFormData()\r\n    const subgridRowSan = useMemo(() => ({gridRow: `1/${formRows.length + 1}`}), [formRows.length])\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        formState: {\r\n            isSubmitting,\r\n        },\r\n        reset,\r\n    } = useForm<MergeContactFormType>()\r\n\r\n    useEffect(() => {\r\n        if (mergeContactsData.length) {\r\n            reset()\r\n        }\r\n    }, [mergeContactsData.length, reset])\r\n\r\n    const isLoading = contactsData.some(item => item.isLoading)\r\n    const onSubmit = useOnSubmit({handleSubmit})\r\n\r\n    return (\r\n        <div className=\"flex flex-1 flex-col overflow-hidden\" >\r\n            <div className=\"flex flex-1 flex-col overflow-hidden border-b border-main-border bg-main-bg\">\r\n                <div className=\"relative grid auto-cols-fr auto-rows-max overflow-y-auto\">\r\n                    <div className=\"grid grid-rows-subgrid\" style={subgridRowSan}>\r\n                        {formRows.map(({label, mapping}, rowIndex) => (\r\n                            <div key={rowIndex} className={tcn(getFieldClassName(rowIndex), {'font-bold': !mapping})}>\r\n                                {label}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    {mergeContactsData.map(({rows}, contactIndex) => {\r\n                        return (\r\n                            <div key={contactIndex} className=\"relative grid grid-rows-subgrid\" style={subgridRowSan}>\r\n                                {rows.map(({fields}, rowIndex) => (\r\n                                    <div key={rowIndex} className={getFieldClassName(rowIndex)}>\r\n                                        {\r\n                                            !isLoading && fields.map((field, fieldIndex) => (\r\n                                                <div key={fieldIndex} >\r\n                                                    <MergeField field={field} control={control} />\r\n                                                </div>\r\n                                            ))\r\n                                        }\r\n                                    </div>\r\n                                ))}\r\n                                {isLoading && <Loader active color=\"primary\" size=\"huge\" className=\"z-10\" />}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    {\r\n                        canAddContactForMerge && (\r\n                            <div className=\"grid grid-rows-subgrid\" style={subgridRowSan}>\r\n                                {formRows.map((_, rowIndex) => (\r\n                                    <div key={rowIndex} className={tcn(getFieldClassName(rowIndex), {'flex items-center justify-end': !rowIndex})}>\r\n                                        {!rowIndex && <AddContactForMere />}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n                {!formRows.length && <Loader active color=\"primary\" size=\"huge\" className=\"z-10\" />}\r\n            </div>\r\n            <MergeActions\r\n                disabled={isLoading}\r\n                onReset={() => reset()}\r\n                onConfirm={onSubmit}\r\n                isSubmitting={isSubmitting}\r\n            />\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={control} />}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\n\r\nimport {mergingContactsAtom} from '../atoms'\r\n\r\n\r\nexport function useLoadMergeContactsData() {\r\n    const mergingContacts = useAtomValue(mergingContactsAtom)\r\n\r\n    const {\r\n        getContact,\r\n        getContactDetails,\r\n        getContactFormsDefinitions,\r\n    } = useContactsStateMethods()\r\n\r\n    useEffect(function loadContacts() {\r\n        mergingContacts.forEach(contactId => {\r\n            getContact({id: contactId, force: true})\r\n            getContactDetails({id: contactId, force: true})\r\n        })\r\n    }, [getContact, getContactDetails, mergingContacts])\r\n\r\n    useEffect(function loadContactFromDefinition() {\r\n        getContactFormsDefinitions({})\r\n    }, [getContactFormsDefinitions])\r\n}\r\n","import React, {type FC, useEffect, useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useDirectoryState, useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {casesTeamIdAtom} from '../atoms'\r\n\r\n\r\nconst ALL_TEAMS_ID = 'all_teams'\r\n\r\nexport const TeamSelector: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const selfTeamId = useSessionState('teamId')\r\n    const [teamId, setTeamId] = useAtom(casesTeamIdAtom)\r\n\r\n    const {teams, isTeamsLoading} = useDirectoryState([\r\n        'teams',\r\n        'isTeamsLoading',\r\n    ])\r\n\r\n    const {getAgentTeams} = useDirectoryStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (!isTeamsLoading && !teams.length) {\r\n            getAgentTeams()\r\n        }\r\n    }, [teams, isTeamsLoading, getAgentTeams])\r\n\r\n    const options = useMemo(() => {\r\n        return [\r\n            {text: t.GLOBAL.all_teams(), value: ALL_TEAMS_ID},\r\n            ...teams.filter(team => team.supervised || team.id === selfTeamId).map(team => ({\r\n                text: team.name,\r\n                value: team.id,\r\n            })),\r\n        ]\r\n    }, [selfTeamId, t.GLOBAL, teams])\r\n\r\n    if (options.length < 2 || isTeamsLoading) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Dropdown\r\n            className=\"ml-2\"\r\n            options={options}\r\n            onChange={(_evt, data) => {\r\n                if (typeof data.value === 'string') {\r\n                    setTeamId(data.value === ALL_TEAMS_ID ? undefined : data.value)\r\n                }\r\n            }}\r\n            value={teamId || ALL_TEAMS_ID}\r\n            inline\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {TeamSelector} from './TeamSelector'\r\nimport {useCloseAsSpamHandler} from './useCloseAsSpamHandler'\r\nimport {useDeleteCaseHandler} from './useDeleteCaseHandler'\r\n\r\n\r\ntype CasesListHeaderProps = {\r\n    table: Table<CasesListItem>\r\n}\r\n\r\nexport const CasesListHeader: React.FC<CasesListHeaderProps> = ({table}) => {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const handleCloseAsSpam = useCloseAsSpamHandler(table)\r\n    const handleDeleteCase = useDeleteCaseHandler(table)\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-end gap-2 p-2\">\r\n            <TeamSelector />\r\n            <SemanticButton\r\n                onClick={handleCloseAsSpam}\r\n                basic\r\n                color=\"orange\"\r\n                className=\"mr-0\"\r\n            >\r\n                {t.EMAIL.button_spam_text()}\r\n            </SemanticButton>\r\n            {privileges.SYS_DELETE_CASES && (\r\n                <SemanticButton\r\n                    onClick={handleDeleteCase}\r\n                    basic\r\n                    color=\"red\"\r\n                    icon=\"trash\"\r\n                    tooltip={t.EMAIL.button_trash_tooltip()}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nexport function useCloseAsSpamHandler(table: Table<CasesListItem>) {\r\n    const {openModal} = useModalsStateMethods()\r\n    const {closeCasesAsSpam} = useCaseStateMethods()\r\n    const {t} = useLocalizationState()\r\n\r\n    return useCallback(\r\n        function handleCloseAsSpamCallback() {\r\n            const selectedRows = table.getSelectedRowModel().flatRows\r\n            const selectedItemsCount = selectedRows.length\r\n\r\n            if (!selectedItemsCount) {\r\n                return\r\n            }\r\n\r\n            openModal({\r\n                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                body:\r\n                selectedItemsCount > 1\r\n                    ? t.EMAIL.spam_confirm_message_multiple(selectedItemsCount.toString())\r\n                    : t.EMAIL.spam_confirm_message_single(selectedRows[0].original.title ?? ''),\r\n                actions: {\r\n                    ok: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        action: handleOk,\r\n                    },\r\n                    cancel: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                    },\r\n                },\r\n                className: 'autoSizeModal',\r\n            })\r\n\r\n            function handleOk() {\r\n                closeCasesAsSpam(selectedRows.map(s => s.original.id))\r\n                table.resetRowSelection()\r\n            }\r\n        },\r\n        [closeCasesAsSpam, openModal, t.EMAIL, t.WINDOW_POPUP_TITLES_AND_MESSAGES, table],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nexport function useDeleteCaseHandler(\r\n    table: Table<CasesListItem>,\r\n) {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const {deleteCases} = useCaseStateMethods()\r\n\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    return useCallback(\r\n        function handleDeleteCallback() {\r\n            const selectedRows = table.getSelectedRowModel().flatRows\r\n            const selectedItemsCount = selectedRows.length\r\n\r\n            if (!privileges.SYS_DELETE_CASES || !selectedItemsCount) {\r\n                return\r\n            }\r\n\r\n            openModal({\r\n                title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n                body:\r\n                    selectedItemsCount > 1\r\n                        ? t.EMAIL.trash_confirm_message_multiple(\r\n                            selectedItemsCount.toString(),\r\n                        )\r\n                        : t.EMAIL.trash_confirm_message_single(\r\n                            selectedRows[0].original.title ?? '',\r\n                        ),\r\n                actions: {\r\n                    ok: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                        action: handleOk,\r\n                    },\r\n                    cancel: {\r\n                        title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                    },\r\n                },\r\n                className: 'autoSizeModal',\r\n            })\r\n\r\n            function handleOk() {\r\n                deleteCases(\r\n                    selectedRows.map(v => v.original.id),\r\n                )\r\n                table.resetRowSelection()\r\n            }\r\n        },\r\n        [deleteCases, openModal, privileges.SYS_DELETE_CASES, t.EMAIL, t.WINDOW_POPUP_TITLES_AND_MESSAGES, table],\r\n    )\r\n}\r\n","import type {VisibilityState} from '@tanstack/react-table'\r\n\r\nimport type {CaseStatus} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport const DEFAULT_VISIBLE_COLUMNS: VisibilityState = {\r\n    select: true,\r\n    title: true,\r\n    ownerName: true,\r\n    categoryName: true,\r\n    status: true,\r\n    createdTime: true,\r\n    sla: true,\r\n    lastService: false,\r\n    lastDisposition: false,\r\n}\r\n\r\nexport const ALL_CASE_STATUSES: CaseStatus[] = ['New', 'Open', 'Pending', 'Resolved', 'Closed']\r\n","import React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {Button, Checkbox, PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {DEFAULT_VISIBLE_COLUMNS} from './constants'\r\n\r\n\r\ntype CasesColumnsSelectProps = {\r\n    table: Table<CasesListItem>\r\n}\r\n\r\nexport const CasesColumnsSelect: React.FC<CasesColumnsSelectProps> = ({table}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <PopupButton\r\n            transparent\r\n            className=\"text-[14px] !text-main\"\r\n            popupContent={\r\n                <div className=\"flex flex-col gap-1.5 p-2\">\r\n                    <Checkbox\r\n                        checked={table.getIsAllColumnsVisible()}\r\n                        onChange={value => {\r\n                            table.toggleAllColumnsVisible(value)\r\n                        }}\r\n                        label={t.EMAIL.search_queue_case_content_all()}\r\n                    />\r\n                    {table\r\n                        .getAllLeafColumns()\r\n                        .filter(c => c.getCanHide())\r\n                        .map(column => {\r\n                            const header = column.columnDef.header\r\n                            return (\r\n                                <Checkbox\r\n                                    key={column.id}\r\n                                    onChange={value => {\r\n                                        column.toggleVisibility(value)\r\n                                    }}\r\n                                    checked={column.getIsVisible()}\r\n                                    label={typeof header === 'string' ? header : null }\r\n                                />\r\n                            )\r\n                        })}\r\n                    <Button\r\n                        transparent\r\n                        className=\"pl-[26px]\"\r\n                        onClick={() => {\r\n                            table.setColumnVisibility(DEFAULT_VISIBLE_COLUMNS)\r\n                        }}\r\n                    >\r\n                        {t.EMAIL.search_queue_case_restore_default()}\r\n                    </Button>\r\n                </div>\r\n            }\r\n        >\r\n            {t.EMAIL.search_queue_case_content_label()}\r\n        </PopupButton>\r\n    )\r\n}\r\n","import React, {type SyntheticEvent, useCallback, useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {type DropdownProps, Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {casesServiceAtom} from '../atoms'\r\n\r\n\r\nexport const CasesServiceSelect: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const [service, setService] = useAtom(casesServiceAtom)\r\n    const handleSortingFieldChange = useCallback(\r\n        (_evt: SyntheticEvent, data: DropdownProps) => {\r\n            const selectedService = typeof data.value === 'string' && data.value === 'team' ? 'team' : undefined\r\n            setService(selectedService)\r\n        },\r\n        [setService],\r\n    )\r\n    const options = useMemo(() => ([\r\n        {text: t.EMAIL.search_queue_all_team_services(), value: 'all'},\r\n        {text: t.EMAIL.search_queue_team_services(), value: 'team'},\r\n    ]), [t.EMAIL])\r\n\r\n    return (\r\n        <Dropdown\r\n            inline\r\n            options={options}\r\n            onChange={handleSortingFieldChange}\r\n            value={service || 'all'}\r\n            hideIcon\r\n            trigger={\r\n                <p className=\"cursor-pointer font-normal\">\r\n                    {t.EMAIL.email_teamQueue_service_label()}\r\n                    {': '}\r\n                    {service === 'team'\r\n                        ? t.EMAIL.search_queue_team_services()\r\n                        : t.EMAIL.search_queue_all_team_services()\r\n                    }\r\n                </p>\r\n            }\r\n        />\r\n    )\r\n}\r\n","import type {FC, SyntheticEvent} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {CasesSortBy} from '@bpinc/ad-request-urls'\r\nimport {type DropdownProps, Dropdown, SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {casesSortingAtom} from '../atoms'\r\nimport {useCaseOrderOptions} from './useCaseOrderOptions'\r\n\r\n\r\nexport const CasesSorting: FC = () => {\r\n    const options = useCaseOrderOptions()\r\n    const [sorting, setSorting] = useAtom(casesSortingAtom)\r\n\r\n    const handleSortingDirectionChange = useCallback(\r\n        function handleSortingDirectionChangeCallback() {\r\n            setSorting(s => ({\r\n                ...s,\r\n                asc: !s.asc,\r\n            }))\r\n        },\r\n        [setSorting],\r\n    )\r\n\r\n    const handleSortingFieldChange = useCallback(\r\n        (_evt: SyntheticEvent, data: DropdownProps) => {\r\n            setSorting(s => {\r\n                if (typeof data.value !== 'string') {\r\n                    return s\r\n                }\r\n\r\n                return {\r\n                    ...s,\r\n                    asc: data.value === 'score' ? false : s.asc,\r\n                    sortBy: data.value as CasesSortBy,\r\n                }\r\n            })\r\n        },\r\n        [setSorting],\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex items-center gap-0.5\">\r\n            <Dropdown\r\n                inline\r\n                options={options}\r\n                onChange={handleSortingFieldChange}\r\n                value={sorting.sortBy}\r\n                hideIcon\r\n            />\r\n            <SemanticButton\r\n                transparent\r\n                icon={sorting.asc ? 'caret up' : 'caret down'}\r\n                className=\"[&>i]:flex [&>i]:items-center [&>i]:justify-center [&>i]:text-[18px]\"\r\n                onClick={handleSortingDirectionChange}\r\n                disabled={sorting.sortBy === 'score'}\r\n                basic\r\n                size=\"mini\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {CasesSortBy} from '@bpinc/ad-request-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useCaseOrderOptions = () => {\r\n    const {t: {EMAIL}} = useLocalizationState()\r\n    return useMemo(() => [\r\n        {value: 'score', text: EMAIL.email_queue_field_relevance()},\r\n        {value: 'createTime', text: EMAIL.email_queue_field_createTime()},\r\n        {value: 'updateTime', text: EMAIL.email_queue_field_updateTime()},\r\n        {value: 'customerUpdate', text: EMAIL.email_queue_field_customerUpdate()},\r\n        {value: 'slaTarget', text: EMAIL.email_queue_field_slaTarget()},\r\n        {value: 'sla', text: EMAIL.email_queue_field_serviceLevel()},\r\n        {value: 'flag', text: EMAIL.email_queue_field_flag()},\r\n        {value: 'service', text: EMAIL.search_queue_case_content_last_service()},\r\n        {value: 'disposition', text: EMAIL.search_queue_case_content_disposition()},\r\n        {value: 'status', text: EMAIL.search_queue_case_content_state()},\r\n    ] satisfies {value: CasesSortBy; text: string}[], [EMAIL])\r\n}\r\n","import React from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {Checkbox, PopupButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {casesStatusesAtom} from '../atoms'\r\nimport {ALL_CASE_STATUSES} from './constants'\r\nimport {useCaseStatusOptions} from './useCaseStatusOptions'\r\n\r\n\r\nexport const CasesStatusesSelect: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const [statuses, setStatuses] = useAtom(casesStatusesAtom)\r\n    const caseStatusOptions = useCaseStatusOptions()\r\n    const isAllSelected = ALL_CASE_STATUSES.every(s => statuses.includes(s))\r\n    const selected = ALL_CASE_STATUSES\r\n        .filter(s => statuses.includes(s))\r\n        .map(s => caseStatusOptions.find(option => option.value === s)?.value || '')\r\n        .join(', ')\r\n\r\n\r\n    return (\r\n        <PopupButton\r\n            transparent\r\n            className=\"text-[14px] !text-main\"\r\n            popupContent={<div className=\"flex flex-col gap-1.5 p-2\">\r\n                <Checkbox\r\n                    checked={isAllSelected}\r\n                    onChange={() => {\r\n                        setStatuses(isAllSelected ? [] : ALL_CASE_STATUSES)\r\n                    }}\r\n                    label={t.EMAIL.search_queue_case_content_all()}\r\n                />\r\n                {caseStatusOptions\r\n                    .map(({value, text}) => {\r\n                        return (\r\n                            <Checkbox\r\n                                key={value}\r\n                                onChange={() => {\r\n                                    setStatuses(curStatuses => {\r\n                                        if (curStatuses.includes(value)) {\r\n                                            return curStatuses.filter(s => s !== value)\r\n                                        }\r\n                                        return [...curStatuses, value]\r\n                                    })\r\n                                }}\r\n                                checked={statuses.includes(value)}\r\n                                label={text}\r\n                            />\r\n                        )\r\n                    })}\r\n            </div>}\r\n        >\r\n            {t.EMAIL.search_queue_case_status_label()}\r\n            {': '}\r\n            <span className=\"text-main-secondary\">{(isAllSelected || !selected) ? t.EMAIL.search_queue_case_content_all() : selected}</span>\r\n        </PopupButton>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {CaseStatus} from '@bpinc/ad-request-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useCaseStatusOptions = () => {\r\n    const {t: {GLOBAL}} = useLocalizationState()\r\n\r\n    return useMemo(() => [\r\n        {value: 'New', text: GLOBAL.case_status_new()},\r\n        {value: 'Open', text: GLOBAL.case_status_open()},\r\n        {value: 'Pending', text: GLOBAL.case_status_pending()},\r\n        {value: 'Resolved', text: GLOBAL.case_status_resolved()},\r\n        {value: 'Closed', text: GLOBAL.case_status_closed()},\r\n    ] satisfies {value: CaseStatus; text: string}[], [])\r\n}\r\n","import React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\nimport {flexRender} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {CasesColumnsSelect} from './CasesColumnsSelect'\r\nimport {CasesServiceSelect} from './CasesServiceSelect'\r\nimport {CasesSorting} from './CasesSorting'\r\nimport {CasesStatusesSelect} from './CasesStatusesSelect'\r\n\r\n\r\ntype CasesTableHeaderProps = {\r\n    table: Table<CasesListItem>\r\n}\r\n\r\nexport const CasesTableHeader: React.FC<CasesTableHeaderProps> = ({table}) => {\r\n    const [checkboxColumn, ...restHeaders] = table.getLeafHeaders()\r\n\r\n    return (\r\n        <>\r\n            <SmTable.HeaderCell>\r\n                {flexRender(\r\n                    checkboxColumn.column.columnDef.header,\r\n                    checkboxColumn.getContext(),\r\n                )}\r\n            </SmTable.HeaderCell>\r\n            <SmTable.HeaderCell colSpan={restHeaders.length}>\r\n                <div className=\"flex items-center justify-between gap-2\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CasesStatusesSelect />\r\n                        <CasesServiceSelect />\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CasesSorting />\r\n                        <CasesColumnsSelect table={table} />\r\n                    </div>\r\n                </div>\r\n            </SmTable.HeaderCell>\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {Row} from '@tanstack/react-table'\r\nimport {flexRender} from '@tanstack/react-table'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {selectedCaseIdAtom} from '../atoms'\r\n\r\n\r\ntype CasesTableRowProps = {\r\n    row: Row<CasesListItem>\r\n}\r\n\r\nexport const CasesTableRow: FC<CasesTableRowProps> = ({\r\n    row,\r\n}) => {\r\n    const [selectedCaseId, setSelectedCaseId] = useAtom(selectedCaseIdAtom)\r\n\r\n    return (\r\n        <SmTable.Row\r\n            key={row.id + '_1'}\r\n            tabIndex={0}\r\n            onClick={() => setSelectedCaseId(row.id)}\r\n            onKeyDown={(e: KeyboardEvent) => {\r\n                if (!['Enter', ' '].includes(e.key)) {\r\n                    return\r\n                }\r\n                setSelectedCaseId(row.id)\r\n            }}\r\n            active={row.id === selectedCaseId}\r\n            className=\"cursor-pointer border-b-0\"\r\n        >\r\n            {row.getVisibleCells().map(cell => (\r\n                <SmTable.Cell key={cell.id}>\r\n                    {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext(),\r\n                    )}\r\n                </SmTable.Cell>\r\n            ))}\r\n        </SmTable.Row>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport type {Table} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {CasesTableHeader} from './CasesTableHeader'\r\nimport {CasesTableRow} from './CasesTableRow'\r\n\r\n\r\ntype CasesTableProps = {\r\n    table: Table<CasesListItem>\r\n}\r\n\r\nexport const CasesTable = ({\r\n    table,\r\n}: CasesTableProps) => {\r\n    const headers = table.getLeafHeaders()\r\n\r\n    return (\r\n        <div\r\n            className=\"overflow-auto border-t\"\r\n            onKeyDown={e => {\r\n                if (['Enter', ' '].includes(e.key)) {\r\n                    e.preventDefault()\r\n                }\r\n            }}\r\n        >\r\n            <SmTable compact striped className=\"w-full table-fixed border-none\">\r\n                <colgroup>\r\n                    {headers.map(h => (\r\n                        <col\r\n                            key={h.id}\r\n                            data-id={h.id}\r\n                            style={{\r\n                                width: h.column.columnDef.size || 'auto',\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </colgroup>\r\n                <SmTable.Header className=\"sticky top-0 z-[1]\">\r\n                    <CasesTableHeader table={table} />\r\n                </SmTable.Header>\r\n                <SmTable.Body>\r\n                    {table.getRowModel().rows.map(row => (\r\n                        <CasesTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                        />\r\n                    ))}\r\n                </SmTable.Body>\r\n            </SmTable>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport type {CellContext} from '@tanstack/react-table'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst columnHelper = createColumnHelper<CasesListItem>()\r\n\r\nexport const useCasesTableColumns = () => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <Checkbox\r\n                    checked={table.getIsAllRowsSelected()}\r\n                    indeterminate={table.getIsSomeRowsSelected()}\r\n                    onChange={checked => table.toggleAllPageRowsSelected(checked)}\r\n                />\r\n            ),\r\n            cell: ({row}) => (\r\n                <Checkbox\r\n                    checked={row.getIsSelected()}\r\n                    disabled={!row.getCanSelect()}\r\n                    onChange={checked => row.toggleSelected(checked)}\r\n                />\r\n            ),\r\n            enableHiding: false,\r\n            size: 41,\r\n        }),\r\n        columnHelper.accessor(item => formatFullName(item.reporterFirstName, item.reporterLastName) || t.GLOBAL.unidentified(), {\r\n            id: 'title',\r\n            header: t.CASE_SEARCH.caseSearch_case_column(),\r\n            cell: ({getValue, row}) => {\r\n                const title = row.original.title\r\n                return (\r\n                    <>\r\n                        <p className=\"truncate\" title={getValue()}>{getValue()}</p>\r\n                        {title && <p className=\"truncate\" title={title}>{title}</p>}\r\n                    </>\r\n                )\r\n            },\r\n            enableHiding: false,\r\n            size: 0,\r\n        }),\r\n        columnHelper.accessor('queuedCase.ownerName', {\r\n            id: 'ownerName',\r\n            header: t.EMAIL.search_queue_case_content_location(),\r\n            size: 100,\r\n        }),\r\n        columnHelper.accessor('categoryName', {\r\n            id: 'categoryName',\r\n            header: t.EMAIL.search_queue_case_category(),\r\n            size: 100,\r\n        }),\r\n        columnHelper.accessor('status', {\r\n            id: 'status',\r\n            header: t.EMAIL.case_view_status_label(),\r\n            cell: renderTruncatedValue,\r\n            size: 80,\r\n        }),\r\n        columnHelper.accessor(item => formatDate(item.createdTime), {\r\n            id: 'createdTime',\r\n            header: t.EMAIL.search_queue_case_content_date(),\r\n            size: 110,\r\n        }),\r\n        columnHelper.accessor('queuedCase.sla', {\r\n            id: 'sla',\r\n            header: t.EMAIL.search_queue_case_content_sla(),\r\n            size: 70,\r\n        }),\r\n        columnHelper.accessor('lastService', {\r\n            id: 'lastService',\r\n            header: t.EMAIL.search_queue_case_content_last_service(),\r\n            cell: renderTruncatedValue,\r\n            size: 0,\r\n        }),\r\n        columnHelper.accessor('lastDisposition', {\r\n            id: 'lastDisposition',\r\n            header: t.EMAIL.search_queue_case_content_disposition(),\r\n            cell: renderTruncatedValue,\r\n            size: 80,\r\n        }),\r\n    ], [formatFullName, t.CASE_SEARCH, t.EMAIL])\r\n}\r\n\r\nconst renderTruncatedValue = (context: CellContext<CasesListItem, string>) => {\r\n    return <div className=\"truncate\" title={context.getValue()}>{context.getValue()}</div>\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport type {RowSelectionState, VisibilityState} from '@tanstack/react-table'\r\nimport {getCoreRowModel, useReactTable} from '@tanstack/react-table'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {\r\n    casesServiceAtom,\r\n    casesSortingAtom,\r\n    casesStatusesAtom,\r\n    casesTeamIdAtom,\r\n    searchQueryAtom,\r\n    selectedCaseIdAtom,\r\n} from '../atoms'\r\nimport {CasesListHeader} from './CasesListHeader'\r\nimport {CasesTable} from './CasesTable'\r\nimport {DEFAULT_VISIBLE_COLUMNS} from './constants'\r\nimport {useCasesTableColumns} from './useCasesTableColumns'\r\n\r\n\r\nexport const CasesList: React.FC = () => {\r\n    const query = useAtomValue(searchQueryAtom)\r\n    const setSelectedCaseId = useSetAtom(selectedCaseIdAtom)\r\n    const statuses = useAtomValue(casesStatusesAtom)\r\n    const sorting = useAtomValue(casesSortingAtom)\r\n    const service = useAtomValue(casesServiceAtom)\r\n    const teamId = useAtomValue(casesTeamIdAtom)\r\n    const {casesList, casesListLoading} = useCaseState([\r\n        'casesList',\r\n        'casesListLoading',\r\n    ])\r\n    const {getCasesList} = useCaseStateMethods()\r\n\r\n    const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(DEFAULT_VISIBLE_COLUMNS)\r\n    const [rowSelection, setRowSelection] = useState<RowSelectionState>({})\r\n\r\n    const table = useReactTable({\r\n        columns: useCasesTableColumns(),\r\n        data: casesList,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getRowId: row => row.id,\r\n        state: {\r\n            rowSelection,\r\n            columnVisibility,\r\n        },\r\n        onRowSelectionChange: setRowSelection,\r\n        onColumnVisibilityChange: setColumnVisibility,\r\n    })\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            getCasesList({\r\n                query,\r\n                statuses,\r\n                service,\r\n                teamId,\r\n                sortBy: sorting.sortBy,\r\n                asc: sorting.asc,\r\n            })\r\n        }, 500)\r\n\r\n        return () => {\r\n            timeout && clearTimeout(timeout)\r\n        }\r\n    }, [query, statuses, getCasesList, sorting, service, teamId])\r\n\r\n    useEffect(function selectFirstCase() {\r\n        setSelectedCaseId(casesList[0]?.id)\r\n    }, [casesList, setSelectedCaseId])\r\n\r\n    return (\r\n        <div className=\"relative flex flex-1 flex-col  overflow-hidden\">\r\n            <CasesListHeader table={table} />\r\n            <CasesTable table={table} />\r\n            <Loader active={casesListLoading} color=\"primary\" size=\"huge\" />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useOnKeyPressHandler} from '@bpinc/lib-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface CaseFooterContentProps {\r\n    caseId: string\r\n}\r\n\r\nexport const CaseFooterContent: FC<CaseFooterContentProps> = ({caseId}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {openCase} = useCaseStateMethods()\r\n\r\n    const handleCaseOpenClick = useCallback(() => {\r\n        if (caseId) {\r\n            openCase({caseId})\r\n        }\r\n    }, [caseId, openCase])\r\n\r\n    const onKeyPressHandler = useOnKeyPressHandler(handleCaseOpenClick)\r\n\r\n    return (\r\n        <SemanticButton\r\n            basic\r\n            primary\r\n            onClick={handleCaseOpenClick}\r\n            onKeyDown={onKeyPressHandler}\r\n        >\r\n            {t.EMAIL.email_open_button()}\r\n        </SemanticButton>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {Case} from '@bpinc/ad-case-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {selectedCaseIdAtom} from '../atoms'\r\nimport {CaseFooterContent} from './CaseFooterContent'\r\n\r\n\r\nexport const CaseView = () => {\r\n    const {t} = useLocalizationState()\r\n    const selectedCaseId = useAtomValue(selectedCaseIdAtom)\r\n\r\n    if (!selectedCaseId) {\r\n        return (\r\n            <div className=\"m-auto text-[28px] text-[--c-no-data-text]\">\r\n                {t.GLOBAL.no_data()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Case\r\n            id={selectedCaseId}\r\n            FooterContent={<CaseFooterContent caseId={selectedCaseId} />}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useAtom} from 'jotai'\r\nimport {flow, property} from 'lodash-es'\r\n\r\nimport {ResizePanel} from '@bpinc/lib-ui-elements'\r\n\r\nimport {selectedCaseTabWidthAtom} from '../atoms'\r\nimport {CasesList} from './CasesList'\r\nimport {CaseView} from './CaseView'\r\n\r\n\r\nexport const CasesLayout: React.FC = () => {\r\n    const [casesListWidth, setCasesListWidth] = useAtom(selectedCaseTabWidthAtom)\r\n\r\n    return (\r\n        <section className=\"flex h-full items-start overflow-hidden\">\r\n            <ResizePanel\r\n                className=\"h-full\"\r\n                minSize={400}\r\n                maxSizeInPercent={70}\r\n                initialSize={casesListWidth}\r\n                onDragEnd={flow(property('size'), setCasesListWidth)}\r\n                direction=\"right\"\r\n                containerClass=\"h-full\"\r\n            >\r\n                <aside className=\"flex h-full min-w-0 flex-auto flex-col border-r border-gray-200\">\r\n                    <CasesList />\r\n                </aside>\r\n            </ResizePanel>\r\n            <article className=\"relative flex h-full w-full flex-1 flex-col overflow-hidden\">\r\n                <CaseView />\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMergeContactsActions} from './useMergeContactsActions'\r\nimport {useSearchPageTabsActions} from './useSearchPageTabsActions'\r\nimport type {ContactTab, CreateContactTab} from './utils'\r\n\r\n\r\ninterface OpenContactItem {\r\n    id: string\r\n    firstName: string | undefined\r\n    lastName: string | undefined\r\n}\r\n\r\nexport function useContactsActions() {\r\n    const {t} = useLocalizationState()\r\n    const {handleTabOpen, handleTabClose, handleTabUpdate} = useSearchPageTabsActions()\r\n    const {formatFullName} = useFormatting()\r\n    const {addContactForMerge} = useMergeContactsActions()\r\n\r\n    const handleContactOpen = useCallback((item: OpenContactItem, editMode?: boolean) => {\r\n        const newTab: ContactTab = {\r\n            id: item.id,\r\n            type: 'contact',\r\n            title: formatFullName(item.firstName, item.lastName),\r\n            props: {\r\n                editMode,\r\n                onMerge: addContactForMerge ? () => addContactForMerge(item.id) : undefined,\r\n                onEditMode: edit => handleTabUpdate({...newTab, props: {...newTab.props, editMode: edit}}),\r\n            },\r\n            closeable: true,\r\n        }\r\n\r\n        handleTabOpen(newTab)\r\n    }, [addContactForMerge, formatFullName, handleTabOpen, handleTabUpdate])\r\n\r\n    const handleContactCreate = useCallback((\r\n        title?: string,\r\n        initialData?: ContactDetailsType,\r\n        onContactCreated?: (contactId: string) => void,\r\n    ) => {\r\n        const newTab: CreateContactTab = {\r\n            id: 'create',\r\n            type: 'create_contact',\r\n            title: title || t.GLOBAL.anonymous(),\r\n            closeable: true,\r\n            props: {\r\n                initialData,\r\n                onContactCreated,\r\n            },\r\n        }\r\n        handleTabOpen(newTab)\r\n    }, [t, handleTabOpen])\r\n\r\n    const handleContactCreateCancel = useCallback(() => {\r\n        handleTabClose('create')\r\n    }, [handleTabClose])\r\n\r\n    return {handleContactCreate, handleContactOpen, handleContactCreateCancel}\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useHandleUseContact, useIsUseContactButtonVisible} from '@bpinc/lib-contact-details'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {useContactsActions} from '../useContactsActions'\r\nimport {useMergeContactsActions} from '../useMergeContactsActions'\r\n\r\n\r\ntype ContactActionsProps = {\r\n    selectedContact: ContactShortType | undefined\r\n}\r\n\r\nexport const ContactActions = ({\r\n    selectedContact,\r\n}: ContactActionsProps) => {\r\n    const {t} = useLocalizationState()\r\n    const {privileges} = useSessionState()\r\n    const {openModal} = useModalsStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const {deleteContact} = useContactsStateMethods()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const iseUseButtonVisible = useIsUseContactButtonVisible()\r\n    const handleUse = useHandleUseContact()\r\n    const {handleContactCreate, handleContactOpen} = useContactsActions()\r\n    const {addContactForMerge} = useMergeContactsActions()\r\n\r\n    const handleOpen = useCallback(() => {\r\n        if (selectedContact) {\r\n            handleContactOpen(selectedContact)\r\n        }\r\n    }, [selectedContact, handleContactOpen])\r\n\r\n    const handleEdit = useCallback(() => {\r\n        if (selectedContact) {\r\n            handleContactOpen(selectedContact, true)\r\n        }\r\n    }, [handleContactOpen, selectedContact])\r\n\r\n    const handleMerge = useCallback(() => {\r\n        if (selectedContact && addContactForMerge) {\r\n            addContactForMerge(selectedContact.id)\r\n        }\r\n    }, [addContactForMerge, selectedContact])\r\n\r\n    const handleDelete = useCallback(() => {\r\n        const onError = () =>\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.ContactDeleteError,\r\n                tags: ['current-view'],\r\n                message: t.CONTACT.delete_error(),\r\n            })\r\n        const onConfirm = () => {\r\n            if (selectedContact) {\r\n                deleteContact(selectedContact.id)\r\n                    .catch(onError)\r\n            } else {\r\n                onError()\r\n            }\r\n        }\r\n        const name =\r\n            formatFullName(\r\n                selectedContact?.firstName,\r\n                selectedContact?.lastName,\r\n            ) || ''\r\n\r\n        openModal({\r\n            title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning(),\r\n            body: t.UNDEFINED.contact_deleting_confirmation(name),\r\n            actions: {\r\n                ok: {\r\n                    title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk(),\r\n                    action: onConfirm,\r\n                },\r\n                cancel: {\r\n                    title: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel(),\r\n                },\r\n            },\r\n        })\r\n    }, [\r\n        formatFullName,\r\n        selectedContact,\r\n        openModal,\r\n        t.WINDOW_POPUP_TITLES_AND_MESSAGES,\r\n        t.UNDEFINED,\r\n        t.CONTACT,\r\n        showNotification,\r\n        deleteContact,\r\n    ])\r\n\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center p-3.5\">\r\n            <SemanticButton onClick={handleOpen} basic primary>\r\n                {t.UNDEFINED.button_view_contact_text()}\r\n            </SemanticButton>\r\n            {privileges.EDIT_CONTACTS && (\r\n                <SemanticButton basic primary onClick={handleEdit}>\r\n                    {t.UNDEFINED.button_edit_contact_text()}\r\n                </SemanticButton>\r\n            )}\r\n            {addContactForMerge && (\r\n                <SemanticButton basic primary onClick={handleMerge}>\r\n                    {t.GLOBAL.merge()}\r\n                </SemanticButton>\r\n            )}\r\n            {iseUseButtonVisible && (\r\n                <SemanticButton\r\n                    basic\r\n                    primary\r\n                    onClick={() => {\r\n                        assertDefined(selectedContact)\r\n                        handleUse(selectedContact)\r\n                    }}\r\n                >\r\n                    {t.UNDEFINED.button_use_contact_text()}\r\n                </SemanticButton>\r\n            )}\r\n            <SemanticButton basic primary onClick={() => handleContactCreate()}>\r\n                {t.UNDEFINED.button_create_contact_text()}\r\n            </SemanticButton>\r\n            {privileges.DELETE_CONTACTS && (\r\n                <SemanticButton basic color=\"red\" onClick={handleDelete}>\r\n                    {t.UNDEFINED.button_delete_contact_text()}\r\n                </SemanticButton>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {Row} from '@tanstack/react-table'\r\nimport {flexRender} from '@tanstack/react-table'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {useContactsActions} from '../useContactsActions'\r\n\r\n\r\ntype ContactsTableRowProps = {\r\n    row: Row<ContactShortType>\r\n}\r\n\r\nexport const ContactsTableRow: FC<ContactsTableRowProps> = ({\r\n    row,\r\n}) => {\r\n    const {handleContactOpen} = useContactsActions()\r\n\r\n    return (\r\n        <SmTable.Row\r\n            key={row.id}\r\n            tabIndex={0}\r\n            data-id={row.id}\r\n            onClick={row.getToggleSelectedHandler()}\r\n            onKeyDown={(e: KeyboardEvent) => {\r\n                if (!['Enter', ' '].includes(e.key)) {\r\n                    return\r\n                }\r\n                if (!row.getIsSelected()) {\r\n                    row.toggleSelected()\r\n                    return\r\n                }\r\n                handleContactOpen(row.original)\r\n            }}\r\n            onDoubleClick={() => {\r\n                row.toggleSelected(true)\r\n                handleContactOpen(row.original)\r\n            }}\r\n            active={row.getIsSelected()}\r\n            className=\"cursor-pointer\"\r\n        >\r\n            {row.getVisibleCells().map(cell => (\r\n                <SmTable.Cell key={cell.id} >\r\n                    {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext(),\r\n                    )}\r\n                </SmTable.Cell>\r\n            ))}\r\n        </SmTable.Row>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport type {Column} from '@tanstack/react-table'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst columnHelper = createColumnHelper<ContactShortType>()\r\n\r\nexport const useContactTableColumns = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.accessor('firstName', {\r\n            id: 'firstName',\r\n            header: () => t.UNDEFINED.contact_first_name(),\r\n            meta: {\r\n                width: '20%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('lastName', {\r\n            id: 'lastName',\r\n            header: () => t.UNDEFINED.contact_last_name(),\r\n            meta: {\r\n                width: '20%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('phone', {\r\n            id: 'phone',\r\n            header: () => t.UNDEFINED.contact_phone(),\r\n            meta: {\r\n                width: '10%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('email', {\r\n            id: 'email',\r\n            header: () => t.UNDEFINED.contact_email(),\r\n            meta: {\r\n                width: '50%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('source', {\r\n            id: 'source',\r\n            header: () => t.UNDEFINED.column_type(),\r\n            meta: {\r\n                width: '100px',\r\n            },\r\n        }),\r\n    ], [t.UNDEFINED])\r\n}\r\n\r\nexport function getContactTableColumnWidth(column: Column<ContactShortType>) {\r\n    return (column.columnDef.meta && 'width' in column.columnDef.meta) ? column.columnDef.meta.width as string : 'auto'\r\n}\r\n\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport type {OnChangeFn} from '@tanstack/react-table'\r\nimport {type RowSelectionState, flexRender, getCoreRowModel, useReactTable} from '@tanstack/react-table'\r\nimport {useSetAtom} from 'jotai'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {SmTable} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {selectedContactIdAtom} from '../atoms'\r\nimport {ContactsTableRow} from './ContactsTableRow'\r\nimport {getContactTableColumnWidth, useContactTableColumns} from './useContactTableColumns'\r\n\r\n\r\ntype ContactsTableProps = {\r\n    data: ContactShortType[]\r\n    selectedContactId?: string\r\n}\r\n\r\nexport const ContactsTable = ({\r\n    data,\r\n    selectedContactId,\r\n}: ContactsTableProps) => {\r\n    const setSelectedContactId = useSetAtom(selectedContactIdAtom)\r\n    const rowSelection = useMemo<RowSelectionState>(() => {\r\n        return selectedContactId ? {[selectedContactId]: true} : {}\r\n    }, [selectedContactId])\r\n\r\n    const onRowSelectionChange = useCallback<OnChangeFn<RowSelectionState>>(updaterOrValue => {\r\n        const newValue = typeof updaterOrValue === 'function' ? updaterOrValue(rowSelection) : updaterOrValue\r\n        const contactId = Object.entries(newValue).find(([_, selected]) => selected)?.[0]\r\n        const contact = data.find(c => c.id === contactId)\r\n        setSelectedContactId(contact?.id || data[0]?.id)\r\n    }, [data, rowSelection, setSelectedContactId])\r\n\r\n    const table = useReactTable({\r\n        columns: useContactTableColumns(),\r\n        data,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getRowId: row => row.id,\r\n        enableMultiRowSelection: false,\r\n        state: {\r\n            rowSelection,\r\n        },\r\n        onRowSelectionChange,\r\n    })\r\n\r\n    const headers = table.getHeaderGroups()[0].headers\r\n\r\n    return (\r\n        <div\r\n            className=\"overflow-auto\"\r\n            onKeyDown={e => {\r\n                if (['Enter', ' '].includes(e.key)) {\r\n                    e.preventDefault()\r\n                }\r\n            }}\r\n        >\r\n            <SmTable compact striped className=\"w-full border-none\">\r\n                <colgroup>\r\n                    {headers.map(h => (\r\n                        <col\r\n                            key={h.id}\r\n                            style={{\r\n                                width: getContactTableColumnWidth(h.column),\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </colgroup>\r\n                <SmTable.Header className=\"sticky top-0 z-[1]\">\r\n                    {headers.map(h => (\r\n                        <SmTable.HeaderCell key={h.id}>\r\n                            {flexRender(\r\n                                h.column.columnDef.header,\r\n                                h.getContext(),\r\n                            )}\r\n                        </SmTable.HeaderCell>\r\n                    ))}\r\n                </SmTable.Header>\r\n                <SmTable.Body>\r\n                    {table.getRowModel().rows.map(row => (\r\n                        <ContactsTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                        />\r\n                    ))}\r\n                </SmTable.Body>\r\n            </SmTable>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo, useRef} from 'react'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useEvent, useEventListener} from '@bpinc/lib-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {searchQueryAtom, selectedContactIdAtom} from '../atoms'\r\nimport {ContactActions} from './ContactActions'\r\nimport {ContactsTable} from './ContactsTable'\r\n\r\n\r\ntype ContactsProps = {\r\n    searchId?: string\r\n}\r\n\r\nexport const Contacts: React.FC<ContactsProps> = ({\r\n    searchId,\r\n}) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const query = useAtomValue(searchQueryAtom)\r\n    const [selectedContactId, setSelectedContactId] = useAtom(selectedContactIdAtom)\r\n    const {search, contactList, contactListLoading} = useContactsState([\r\n        'search',\r\n        'contactList',\r\n        'contactListLoading',\r\n    ])\r\n    const contactsStateMethods = useContactsStateMethods()\r\n\r\n    const [list, isLoading] = useMemo(() => {\r\n        if (searchId) {\r\n            return [\r\n                search[searchId]?.list ?? [],\r\n                search[searchId]?.isLoading ?? true,\r\n            ]\r\n        }\r\n        return [contactList, contactListLoading]\r\n    }, [contactList, contactListLoading, search, searchId])\r\n\r\n    const selectedContact = useMemo(\r\n        () => list.find(it => it.id === selectedContactId),\r\n        [list, selectedContactId],\r\n    )\r\n\r\n    useEffect(function subscribeToContacts() {\r\n        const timeout = setTimeout(() => {\r\n            contactsStateMethods.getContactList({query, searchId})\r\n        }, 1000)\r\n\r\n        return () => {\r\n            timeout && clearTimeout(timeout)\r\n        }\r\n    }, [query, contactsStateMethods, searchId])\r\n\r\n    useEffect(function resetSelectedContact() {\r\n        // update selectedId when list changes\r\n        if (selectedContactId) {\r\n            const selectedIdIsStillInList = list.some(\r\n                ({id}) => id === selectedContactId,\r\n            )\r\n            if (!selectedIdIsStillInList) {\r\n                setSelectedContactId(list[0]?.id)\r\n            }\r\n        } else if (list.length) {\r\n            setSelectedContactId(list[0]?.id)\r\n        } else {\r\n            setSelectedContactId(undefined)\r\n        }\r\n    }, [list, selectedContactId, setSelectedContactId])\r\n\r\n    const handleKeyDown = useEvent((event: KeyboardEvent) => {\r\n        const currentIndex = list.findIndex(it => it.id === selectedContactId)\r\n\r\n        let selectedId = ''\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                selectedId = (currentIndex === 0 || currentIndex === -1)\r\n                    ? list[list.length - 1].id\r\n                    : list[currentIndex - 1].id\r\n                break\r\n            case 'ArrowDown':\r\n                selectedId = (currentIndex === list.length - 1 || currentIndex === -1)\r\n                    ? list[0]?.id\r\n                    : list[currentIndex + 1]?.id\r\n                break\r\n        }\r\n\r\n        if (selectedId) {\r\n            event.stopPropagation()\r\n            event.preventDefault()\r\n\r\n            setSelectedContactId(selectedId)\r\n\r\n            const selectedRow = ref.current?.querySelector<HTMLTableRowElement>(`tr[data-id='${selectedId}']`)\r\n            selectedRow?.scrollIntoView({block: 'center', behavior: 'smooth'})\r\n            selectedRow?.focus()\r\n        }\r\n    })\r\n\r\n    useEventListener('keydown', handleKeyDown)\r\n\r\n    return (\r\n        <div className=\"flex flex-1 flex-col overflow-hidden\">\r\n            <div className=\"flex flex-1 flex-col overflow-hidden border-b border-main-border\" ref={ref}>\r\n                <ContactsTable\r\n                    data={list}\r\n                    selectedContactId={selectedContactId}\r\n                />\r\n            </div>\r\n            <Loader active={isLoading} color=\"primary\" size=\"huge\" />\r\n            <ContactActions\r\n                selectedContact={selectedContact}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useLocalStorageForState} from '@bpinc/ad-local-settings-context'\r\nimport {LegacyIconContacts, LegacyIconSearchCases} from '@bpinc/lib-icons'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\nimport {SearchInput, Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {searchQueryAtom} from './atoms'\r\nimport {CasesLayout} from './Cases'\r\nimport {Contacts} from './Contacts'\r\n\r\n\r\ninterface SearchPageConditionTabType {\r\n    id: string\r\n    title: string\r\n    Icon: SVGRComponent\r\n}\r\n\r\n\r\nexport const Search: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const [searchQuery, setSearchQuery] = useAtom(searchQueryAtom)\r\n\r\n    const conditionTabs: SearchPageConditionTabType[] = useMemo(() => {\r\n        return [\r\n            {\r\n                id: 'contacts',\r\n                title: t.UNDEFINED.search_tab_contacts(),\r\n                Icon: LegacyIconContacts,\r\n            },\r\n            {\r\n                id: 'cases',\r\n                title: t.UNDEFINED.search_tab_cases(),\r\n                Icon: LegacyIconSearchCases,\r\n            },\r\n        ]\r\n    }, [t])\r\n\r\n    const [activeConditionTabId, setActiveConditionTabId] = useState(conditionTabs[0].id)\r\n\r\n    useLocalStorageForState(activeConditionTabId, 'adSearchActiveTab', setActiveConditionTabId, conditionTabs[0].id)\r\n\r\n    const handleKeywordClear = useCallback(() => setSearchQuery(''), [setSearchQuery])\r\n    const handleKeywordChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(e.target.value)\r\n    }, [setSearchQuery])\r\n\r\n    const renderHeader = useCallback((content: React.ReactNode) => {\r\n        return (\r\n            <div className=\"mx-[15%] flex flex-auto flex-row flex-nowrap items-center justify-center\">\r\n                <SearchInput\r\n                    className=\"mr-4\"\r\n                    tabIndex={0}\r\n                    value={searchQuery}\r\n                    onChange={handleKeywordChange}\r\n                    placeholder={t.UNDEFINED.contact_search_input_placeholder()}\r\n                    clearable\r\n                    onClear={handleKeywordClear}\r\n                />\r\n                {content}\r\n            </div>\r\n        )\r\n    }, [searchQuery, handleKeywordChange, t.UNDEFINED, handleKeywordClear])\r\n\r\n    const renderTab = useCallback(({title, Icon}: SearchPageConditionTabType) => {\r\n        return (\r\n            <div className=\"flex whitespace-nowrap py-[5px] text-lg leading-[30px]\">\r\n                <Icon className=\"mr-2.5 h-[30px] w-[30px] align-top [&_path]:fill-main\" />\r\n                {title}\r\n            </div>\r\n        )\r\n    }, [])\r\n\r\n    const renderTabContent = useCallback(\r\n        (tab: SearchPageConditionTabType) => {\r\n            switch (tab.id) {\r\n                case 'contacts':\r\n                    return (\r\n                        <Contacts searchId={searchQuery} />\r\n                    )\r\n                case 'cases':\r\n                    return (\r\n                        <CasesLayout />\r\n                    )\r\n            }\r\n            return null\r\n        },\r\n        [],\r\n    )\r\n    return (\r\n        <Tabs\r\n            className=\"flex flex-auto flex-col overflow-auto\"\r\n            tabsContentClassName=\"flex-auto h-auto flex flex-col\"\r\n            tabs={conditionTabs}\r\n            activeTabId={activeConditionTabId}\r\n            renderHeader={renderHeader}\r\n            renderTab={renderTab}\r\n            renderTabContent={renderTabContent}\r\n            onChange={setActiveConditionTabId}\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {Case} from '@bpinc/ad-case-ui'\r\nimport {Profile, ProfileCreate} from '@bpinc/ad-interaction-workspace-ui'\r\nimport {Tabs} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {searchPageActiveTabIdAtom, searchPageTabsAtom} from './atoms'\r\nimport {Merge} from './Merge'\r\nimport {Search} from './Search'\r\nimport {useContactsActions} from './useContactsActions'\r\nimport {useSearchPageTabsActions} from './useSearchPageTabsActions'\r\nimport {useUrlBasedNavigation} from './useUrlBasedNavigation'\r\nimport type {SearchPageTab} from './utils'\r\n\r\n\r\nexport const SearchPage: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const tabs = useAtomValue(searchPageTabsAtom)\r\n    const [activeTabId, setActiveTabId] = useAtom(searchPageActiveTabIdAtom)\r\n\r\n    const {handleTabClose} = useSearchPageTabsActions()\r\n    const {handleContactCreateCancel} = useContactsActions()\r\n\r\n    useUrlBasedNavigation()\r\n\r\n    const renderTab = useCallback(({title, id}: SearchPageTab) => {\r\n        if (id === 'search') {\r\n            return t.SCREENPOP_FORM.searchButton()\r\n        }\r\n        return title\r\n    }, [t.SCREENPOP_FORM])\r\n\r\n    const renderTabContent = useCallback(\r\n        (tab: SearchPageTab) => {\r\n            switch (tab.type) {\r\n                case 'search':\r\n                    return (\r\n                        <Search />\r\n                    )\r\n                case 'create_contact':\r\n                    return <ProfileCreate {...tab.props} onCancel={handleContactCreateCancel} />\r\n                case 'contact':\r\n                    return <Profile contactId={tab.id} {...tab.props} />\r\n                case 'case':\r\n                    //TODO: Render appropriate Footer (FooterContent prop)\r\n                    return <Case id={tab.id} />\r\n                case 'merge_contacts':\r\n                    return <Merge />\r\n            }\r\n        },\r\n        [handleContactCreateCancel],\r\n    )\r\n\r\n    return (\r\n        <Tabs\r\n            data-testid=\"search-page\"\r\n            className=\"flex flex-auto flex-col overflow-auto\"\r\n            tabsContentClassName=\"flex-auto flex flex-col h-auto\"\r\n            tabs={tabs}\r\n            activeTabId={activeTabId}\r\n            renderTabContent={renderTabContent}\r\n            renderTab={renderTab}\r\n            onChange={setActiveTabId}\r\n            onTabClose={handleTabClose}\r\n        />\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport produce from 'immer'\r\nimport {useSetAtom} from 'jotai'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {AppRoutes} from '@bpinc/ad-navigation-state-context'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {searchPageActiveTabIdAtom, searchPageTabsAtom} from './atoms'\r\nimport {useMergeContactsActions} from './useMergeContactsActions'\r\n\r\n\r\nexport function useUrlBasedNavigation() {\r\n    const params = useParams()\r\n    const {formatFullName} = useFormatting()\r\n    const {getContact} = useContactsStateMethods()\r\n    const caseItem = useCaseState(s => params.caseId ? s.cases[params.caseId] : undefined)\r\n    const {getCase} = useCaseStateMethods()\r\n\r\n    const setTabs = useSetAtom(searchPageTabsAtom)\r\n    const setActiveTabId = useSetAtom(searchPageActiveTabIdAtom)\r\n    const {addContactForMerge} = useMergeContactsActions()\r\n\r\n    /** Fetches contact by contactId from params and opens a corresponding contact tab  */\r\n    useEffect(() => {\r\n        openContactTab()\r\n        async function openContactTab() {\r\n            const contactId = params.contactId\r\n            if (!contactId) {\r\n                return\r\n            }\r\n\r\n            const contact = await getContact({id: contactId})\r\n\r\n            if (!contact) {\r\n                console.error(`Contact with id ${contactId} not found`)\r\n                return\r\n            }\r\n\r\n            setTabs(produce(draft => {\r\n                draft.push({\r\n                    id: contactId,\r\n                    type: 'contact',\r\n                    title: formatFullName(contact.firstName, contact.lastName),\r\n                    closeable: true,\r\n                    props: {editMode: false, onMerge: addContactForMerge ? () => addContactForMerge(contactId) : undefined},\r\n                })\r\n            }))\r\n            setActiveTabId(contactId)\r\n            history.replaceState(null, '', AppRoutes.search)\r\n        }\r\n    }, [formatFullName, getContact, addContactForMerge, params.contactId, setActiveTabId, setTabs])\r\n\r\n\r\n    /** Fetches case by caseId if there is caseId in params */\r\n    useEffect(() => {\r\n        const caseId = params.caseId\r\n        if (!caseId) {\r\n            return\r\n        }\r\n\r\n        getCase(caseId)\r\n    }, [getCase, params.caseId, setActiveTabId, setTabs])\r\n\r\n    const prevCaseItem = usePrevious(caseItem)\r\n\r\n    /** After the case is fetched in the previous useEffect, we open a case tab in this useEffect */\r\n    useEffect(() => {\r\n        if (params.caseId && !prevCaseItem?.data && caseItem?.data) {\r\n            setTabs(produce(draft => {\r\n                assertDefined(caseItem?.data)\r\n                assertDefined(caseItem.data.number)\r\n                draft.push({\r\n                    id: caseItem.data.id,\r\n                    type: 'case',\r\n                    title: caseItem.data.number?.toString(),\r\n                    closeable: true,\r\n                })\r\n            }))\r\n            setActiveTabId(caseItem.data.id)\r\n            history.replaceState(null, '', AppRoutes.search)\r\n        }\r\n    }, [caseItem, params.caseId, prevCaseItem?.data, setActiveTabId, setTabs])\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {memo} from 'react'\r\n\r\nimport type {KBFeatures} from '@bpinc/kb-types'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\n\r\n\r\nconst {KBPageLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBPage')\r\n\r\nconst features: Partial<KBFeatures> = {\r\n    autoOpenInteractionTab: true,\r\n    dualView: true,\r\n    multiTabs: true,\r\n    openInNewTab: true,\r\n}\r\n\r\nexport const MainAreaKB: FC = memo(function MainAreaKB() {\r\n    const kbBridge = useKbBridgeConnector()\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    return <KBPageLoader features={features} kbBridge={kbBridge} />\r\n})\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CasePage} from '@bpinc/ad-case-ui'\r\nimport {OldEvaluationApp} from '@bpinc/ad-evaluation-ui'\r\nimport {InteractionWorkspacePage} from '@bpinc/ad-interaction-workspace-ui'\r\nimport {AppRoutes} from '@bpinc/ad-navigation-state-context'\r\nimport {NonCallCases} from '@bpinc/ad-non-call-cases-ui'\r\nimport {SearchPage} from '@bpinc/ad-searchpage-ui'\r\nimport type {Privileges} from '@bpinc/ad-session-types'\r\nimport {SmMessage} from '@bpinc/lib-external-ui-elements'\r\nimport {createComponentLoader, ErrorBoundary} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MainAreaKB} from '../mainpage/components/KnowledgeBase/MainAreaKB'\r\n\r\n\r\nconst {ChatCenterPageLoader} = createComponentLoader('chatCenter', () => import('chatCenter'), 'ChatCenterPage')\r\nconst {SupervisionPageLoader} = createComponentLoader('supervision', () => import('supervision'), 'SupervisionPage')\r\nconst {CampaignsPageLoader} = createComponentLoader('campaigns', () => import('campaigns'), 'CampaignsPage')\r\nconst {CalendarPageLoader} = createComponentLoader('calendar', () => import('calendar'), 'CalendarPage')\r\nconst {InteractionSearchPageLoader} = createComponentLoader('interactionSearch', import('interactionSearch'), 'InteractionSearchPage')\r\nconst {HomePageLoader} = createComponentLoader('homePage', () => import('homePage'), 'HomePage')\r\nconst {EvaluationPageLoader} = createComponentLoader('omniQm', () => import('omniQm'), 'EvaluationPage')\r\n\r\nconst ErrorBoundaryFallback: FC = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return <SmMessage error>{t.ERROR_MESSAGES.unhandled_router_error()}</SmMessage>\r\n}\r\n\r\nexport type AppRoutesType = typeof AppRoutes[keyof typeof AppRoutes]\r\ninterface RouteConfig {\r\n    path: AppRoutesType\r\n    checkPrivileges?: (privileges: Privileges) => boolean\r\n    Component: React.FC\r\n    load?: () => Promise<Record<string, unknown>>\r\n    allowSubRoutes?: boolean\r\n}\r\n\r\ntype RoutesConfig = {\r\n    [key in AppRoutesType]: RouteConfig\r\n}\r\n\r\nexport const routesConfig: RoutesConfig = {\r\n    [AppRoutes.interactionWorkspace]: {\r\n        path: AppRoutes.interactionWorkspace,\r\n        Component: withErrorBoundaryFallback(InteractionWorkspacePage),\r\n    },\r\n    [AppRoutes.calendar]: {\r\n        path: AppRoutes.calendar,\r\n        load: () => import('calendar'),\r\n        checkPrivileges: privileges => !!privileges.CAN_USE_CALENDAR,\r\n        Component: withErrorBoundaryFallback(CalendarPageLoader),\r\n    },\r\n    [AppRoutes.searchContact]: {\r\n        path: AppRoutes.searchContact,\r\n        Component: withErrorBoundaryFallback(SearchPage),\r\n        allowSubRoutes: true,\r\n    },\r\n    [AppRoutes.searchCase]: {\r\n        path: AppRoutes.searchCase,\r\n        Component: withErrorBoundaryFallback(SearchPage),\r\n        allowSubRoutes: true,\r\n    },\r\n    [AppRoutes.search]: {\r\n        path: AppRoutes.search,\r\n        Component: withErrorBoundaryFallback(SearchPage),\r\n        allowSubRoutes: true,\r\n    },\r\n    [AppRoutes.cases]: {\r\n        path: AppRoutes.cases,\r\n        checkPrivileges: privileges => !!privileges.SYS_HANDLE_EMAILS,\r\n        Component: withErrorBoundaryFallback(CasePage),\r\n    },\r\n    [AppRoutes.chat]: {\r\n        path: AppRoutes.chat,\r\n        load: () => import('chatCenter'),\r\n        checkPrivileges: privileges => !!privileges.CAN_START_INTERNAL_CHAT,\r\n        Component: withErrorBoundaryFallback(ChatCenterPageLoader),\r\n    },\r\n    [AppRoutes.interactionSearch]: {\r\n        path: AppRoutes.interactionSearch,\r\n        Component: withErrorBoundaryFallback(InteractionSearchPageLoader),\r\n    },\r\n    [AppRoutes.home]: {\r\n        path: AppRoutes.home,\r\n        Component: withErrorBoundaryFallback(HomePageLoader),\r\n        allowSubRoutes: true,\r\n    },\r\n    [AppRoutes.supervision]: {\r\n        load: () => import('supervision'),\r\n        path: AppRoutes.supervision,\r\n        checkPrivileges: privileges =>\r\n            !!privileges.SYS_VIEW_LIST_OF_AGENTS ||\r\n            !!privileges.SYS_VIEW_QUEUE_STATUS,\r\n        Component: withErrorBoundaryFallback(SupervisionPageLoader),\r\n    },\r\n    [AppRoutes.nonCallCases]: {\r\n        path: AppRoutes.nonCallCases,\r\n        Component: withErrorBoundaryFallback(NonCallCases),\r\n    },\r\n    [AppRoutes.campaigns]: {\r\n        path: AppRoutes.campaigns,\r\n        checkPrivileges: privileges => !!privileges.CAN_OPERATE_CAMPAIGNS,\r\n        Component: withErrorBoundaryFallback(CampaignsPageLoader),\r\n    },\r\n    // Save access to old app until new React app is ready\r\n    [AppRoutes.oldOmniQm]: {\r\n        path: AppRoutes.oldOmniQm,\r\n        checkPrivileges: privileges =>\r\n            !!privileges.EVALUATE_OWN_INTERACTIONS ||\r\n            !!privileges.CONFIRM_EVALUATIONS_OF_SELF ||\r\n            !!privileges.CONFIRM_EVALUATIONS_OF_SUPERVISED_AGENTS ||\r\n            !!privileges.DELETE_EVALS_COMPLETED_BY_ANYONE ||\r\n            !!privileges.DELETE_EVALS_COMPLETED_BY_THEMSELVES ||\r\n            !!privileges.ASSIGN_EVALUATIONS_AND_CALIBRATIONS ||\r\n            !!privileges.MANAGE_EVALUATIONS_ACCROSS_TEAMS ||\r\n            !!privileges.SEE_EVALS_OF_SELF,\r\n        Component: withErrorBoundaryFallback(OldEvaluationApp),\r\n    },\r\n    [AppRoutes.omniQm]: {\r\n        path: AppRoutes.omniQm,\r\n        checkPrivileges: privileges =>\r\n            !!privileges.EVALUATE_OWN_INTERACTIONS ||\r\n            !!privileges.CONFIRM_EVALUATIONS_OF_SELF ||\r\n            !!privileges.CONFIRM_EVALUATIONS_OF_SUPERVISED_AGENTS ||\r\n            !!privileges.DELETE_EVALS_COMPLETED_BY_ANYONE ||\r\n            !!privileges.DELETE_EVALS_COMPLETED_BY_THEMSELVES ||\r\n            !!privileges.ASSIGN_EVALUATIONS_AND_CALIBRATIONS ||\r\n            !!privileges.MANAGE_EVALUATIONS_ACCROSS_TEAMS ||\r\n            !!privileges.SEE_EVALS_OF_SELF,\r\n        Component: withErrorBoundaryFallback(EvaluationPageLoader),\r\n    },\r\n    [AppRoutes.knowledgeBase]: {\r\n        path: AppRoutes.knowledgeBase,\r\n        Component: withErrorBoundaryFallback(MainAreaKB),\r\n    },\r\n}\r\n\r\nfunction withErrorBoundaryFallback(Component: React.FC) {\r\n    return () => (\r\n        <ErrorBoundary fallback={ErrorBoundaryFallback}>\r\n            <Component />\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport {useLocation} from 'react-router-dom'\r\n\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport {useNavigationState as useADNavigationState} from '@bpinc/ad-navigation-state-context'\r\n\r\n\r\nexport const useAutoRedirectToActivityFormTab = () => {\r\n    const {\r\n        shownWorkspaceTabs,\r\n        shownWorkspaceItem,\r\n        activateItemTab,\r\n    } = useInteractionWorkspaceState()\r\n    const location = useLocation()\r\n\r\n    const activeItemId = shownWorkspaceItem?.id\r\n\r\n    const {getParams, setParams} = useADNavigationState()\r\n\r\n    useEffect(() => {\r\n        const routeParams = getParams()\r\n\r\n        if (!activeItemId) {\r\n            return\r\n        }\r\n\r\n        const tabs = shownWorkspaceTabs ?? []\r\n\r\n        const activityFormTabId = tabs?.find(tab => tab.type === 'activityForm')?.id\r\n\r\n        if (routeParams.tab === 'activityForm' && activityFormTabId) {\r\n            activateItemTab(activityFormTabId)\r\n            // if we don't clear the params,\r\n            // user will not be redirected next time he attempts to complete interaction\r\n            setParams({})\r\n        }\r\n    }, [\r\n        location,\r\n        activeItemId,\r\n        getParams,\r\n        setParams,\r\n        shownWorkspaceTabs,\r\n        activateItemTab,\r\n    ])\r\n}\r\n","import React, {useCallback, useRef} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useTimezonesState} from '@bpinc/ad-timezones-state-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const OldEvaluationApp = () => {\r\n    const {language} = useLocalizationState()\r\n    const {sessionId, userId} = useSessionState()\r\n    const {localTimezone} = useTimezonesState()\r\n    const iframeRef = useRef<HTMLIFrameElement | null>(null)\r\n    const loadIframe = useCallback(async () => {\r\n        if (iframeRef.current) {\r\n            // its very bad hack,\r\n            // needs to be replaced with backend method or smth\r\n            const resultHTML = await (await fetch(`/admin/EvaluationHome.jsp?token=${sessionId}`)).text()\r\n            const regex = /initializer\\.init\\([^,]+,[^,]+,\\s*(\\{.*\\})\\s*,/\r\n\r\n            const match = resultHTML.match(regex)\r\n            let resultPermissions\r\n            if (match && match[1]) {\r\n                try {\r\n                    resultPermissions = JSON.parse(match[1]) //\r\n                } catch {\r\n                    // nothing\r\n                }\r\n            }\r\n\r\n            iframeRef.current.contentWindow?.postMessage({\r\n                token: sessionId, type: 'init-evaluation', loginId: userId, timezone: localTimezone, locale: language, permissions: resultPermissions || {}},\r\n            document.location.origin)\r\n        }\r\n\r\n    }, [iframeRef, language, sessionId, userId, localTimezone])\r\n\r\n    return (\r\n        <div style={{height: '100%'}}>\r\n            <iframe\r\n                id=\"containerIframe\"\r\n                ref={iframeRef}\r\n                src=\"/agent/evaluation-page/main.html\"\r\n                onLoad={loadIframe}\r\n                width={'100%'}\r\n                height={'100%'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"listWrapper\":\"agent_Notifications_listWrapper_NVyLi\",\"listItem\":\"agent_Notifications_listItem_5BLxr\"};","import React, {cloneElement, isValidElement, useMemo} from 'react'\r\n\r\nimport {SmMessage, SmTransition} from '@bpinc/lib-external-ui-elements'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {AriaStatus} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from './Notifications.module.less'\r\n\r\n\r\nconst LIMIT = 3\r\n\r\ntype Props = {\r\n    omit?: string[]\r\n    show?: string[]\r\n    className?: string\r\n}\r\n\r\nconst duration = {hide: 0, show: 300}\r\n\r\n// TODO: remove <ServiceSelect /> from this component, move it to prop or content\r\nexport const Notifications: React.FC<Props> = ({omit, show, className}) => {\r\n    const {\r\n        notifications: notifications,\r\n        methods: {hideNotificationById},\r\n    } = useNotificationsState()\r\n\r\n    const notificationsToRender = useMemo(() => {\r\n        let filteredList = truthy(Object.values(notifications)).filter(n => !n.delayed)\r\n\r\n        if (show) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return show.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        if (omit) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return !omit.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        return filteredList.slice(0, LIMIT)\r\n    }, [notifications, omit, show])\r\n\r\n    return (\r\n        <div className={tcn(className, styles.listWrapper)}>\r\n            <SmTransition.Group animation=\"fade down\" duration={duration}>\r\n                {notificationsToRender.map(notification => {\r\n                    let content: React.ReactNode\r\n\r\n                    if (notification.content) {\r\n                        content = isValidElement(notification.content)\r\n                            ? cloneElement(notification.content, {onHide: () => hideNotificationById(notification.id)})\r\n                            : notification.content\r\n                    } else {\r\n                        content = notification.message\r\n                    }\r\n\r\n                    return (\r\n                        <div key={notification.id} className={styles.listItem}>\r\n                            <div>\r\n                                <SmMessage\r\n                                    onDismiss={\r\n                                        notification.closable\r\n                                            ? () => hideNotificationById(notification.id)\r\n                                            : undefined\r\n                                    }\r\n                                    content={content}\r\n                                    error={notification.type === 'error'}\r\n                                    info={notification.type === 'info'}\r\n                                    warning={notification.type === 'warning'}\r\n                                    success={notification.type === 'success'}\r\n                                />\r\n                            </div>\r\n                            <AriaStatus>{content}</AriaStatus>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </SmTransition.Group>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"agent_MainPage_content_GcMZQ\",\"basicMessage\":\"agent_MainPage_basicMessage_QMmIV\",\"popover\":\"agent_MainPage_popover_eX3Yo\",\"fixed\":\"agent_MainPage_fixed_WImF6\",\"opened\":\"agent_MainPage_opened_8oMDL\",\"communicator\":\"agent_MainPage_communicator_3pdIU\",\"createFavoriteButton\":\"agent_MainPage_createFavoriteButton_YTKJ0\",\"incomingMessagesModalsStack\":\"agent_MainPage_incomingMessagesModalsStack_8exp0\",\"favoriteFormError\":\"agent_MainPage_favoriteFormError_8apyg\"};","import type {FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue} from 'jotai'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {\r\n    MAIN_CONTENT_MIN_WIDTH,\r\n    MAX_COMMUNICATOR_WIDTH_IN_PERCENT,\r\n    MIN_COMMUNICATOR_WIDTH,\r\n    useCommunicatorUIState,\r\n    useMainPageUIState,\r\n} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {IconPin24, IconPinFilled24} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications} from '@bpinc/lib-notifications-context'\r\nimport {Notifications as NotificationsUI} from '@bpinc/lib-notifications-ui'\r\nimport type {OnDragEndParams} from '@bpinc/lib-ui-elements'\r\nimport {canPinFloating, createComponentLoader, Floating} from '@bpinc/lib-ui-elements'\r\nimport {parallelItemsAtom} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../../styles/MainPage.module.less'\r\n\r\n\r\nconst ERROR_IDS_TO_SHOW = [Notifications.ContactCreationError, Notifications.ContactMergeError]\r\nconst EXCEPTION_SELECTORS = ['[data-chat-actions-menu]', '[data-testid=\"channel-selector\"]', '[data-modal=\"true\"]']\r\nconst {CommunicatorWidgetLoader} = createComponentLoader('communicator', import('communicator'), 'CommunicatorWidget')\r\nconst {ParallelChatInteractionLoader} = createComponentLoader('communicator', import('communicator'), 'ParallelChatInteraction')\r\n\r\nexport const CommunicationPanel: FC = () => {\r\n    const {floatingState, setFloatingState, width, setWidth, openerRef, setParallelInteractionsWidth, parallelInteractionsWidth} = useCommunicatorUIState()\r\n\r\n    const {t} = useLocalizationState()\r\n    const {kbFloatingState, mainContentNode} = useMainPageUIState(['mainContentNode', 'kbFloatingState'])\r\n    const mainContentObserverEntry = useResizeObserver(mainContentNode)\r\n\r\n    const [mainContentWidth, setMainContentWidth] = useState(0)\r\n    const throttledSetMainContentWidth = useMemo(() => throttle(size => setMainContentWidth(size), 200), [])\r\n\r\n    useEffect(() => {\r\n        throttledSetMainContentWidth(mainContentObserverEntry?.contentRect.width ?? 0)\r\n    }, [mainContentObserverEntry?.contentRect.width, throttledSetMainContentWidth])\r\n\r\n    const getLocation = useNavigationState('getLocationState')\r\n    const isWorkspacePage = getLocation() === AppRoutes.interactionWorkspace\r\n    const parallelItems = useAtomValue(parallelItemsAtom)\r\n\r\n    const contentMinWidth = MAIN_CONTENT_MIN_WIDTH - (kbFloatingState === 'pinned' ? 15 : 0)\r\n\r\n    const showParallelItems = parallelItems.length > 0 && isWorkspacePage\r\n\r\n    const onDragEnd = useCallback(\r\n        function onDragEndCallback({size}: OnDragEndParams) {\r\n            if (showParallelItems) {\r\n                setParallelInteractionsWidth(size)\r\n                setWidth(size / (parallelItems.length + 1))\r\n            } else {\r\n                setWidth(size)\r\n            }\r\n        },\r\n        [parallelItems.length, setParallelInteractionsWidth, setWidth, showParallelItems],\r\n    )\r\n\r\n    const canPin = useMemo(() => {\r\n        return canPinFloating({\r\n            mainContentWidth,\r\n            floatingState,\r\n            floatingSize: showParallelItems ? parallelInteractionsWidth : width,\r\n            contentMinWidth: contentMinWidth,\r\n        })\r\n    }, [floatingState, width, mainContentWidth, contentMinWidth, showParallelItems, parallelInteractionsWidth])\r\n\r\n    const onClickPin = useCallback(() => {\r\n        setFloatingState(state => (state === 'pinned' ? 'floating' : 'pinned'))\r\n    }, [setFloatingState])\r\n\r\n    return (\r\n        <Floating\r\n            side=\"left\"\r\n            resizeable\r\n            maxSizeInPercent={MAX_COMMUNICATOR_WIDTH_IN_PERCENT}\r\n            minSize={showParallelItems ? MIN_COMMUNICATOR_WIDTH * (parallelItems.length + 1) : MIN_COMMUNICATOR_WIDTH}\r\n            data-testid=\"communicator_panel\"\r\n            className={styles.communicator}\r\n            state={floatingState}\r\n            setState={setFloatingState}\r\n            showEar={false}\r\n            openerRef={openerRef}\r\n            size={showParallelItems ? parallelInteractionsWidth : width}\r\n            onDragEnd={onDragEnd}\r\n            canPin={canPin}\r\n            unmountOnHide={false}\r\n            exceptionSelectors={EXCEPTION_SELECTORS}\r\n            closeByEscape={floatingState === 'floating'}\r\n        >\r\n            <NotificationsUI show={ERROR_IDS_TO_SHOW} />\r\n            <div className=\"grid flex-auto grid-cols-[repeat(auto-fit,minmax(100px,1fr))] overflow-hidden bg-neutral-100\">\r\n                <div className=\"flex flex-auto flex-col overflow-hidden bg-primary-background\">\r\n                    {canPin && (\r\n                        <Button\r\n                            variant=\"ghost\"\r\n                            className=\"absolute right-2 top-2\"\r\n                            icon={floatingState === 'pinned' ? <IconPinFilled24 /> : <IconPin24 />}\r\n                            onClick={onClickPin}\r\n                            tooltip={t.COMMUNICATION_PANEL.pin_tooltip()}\r\n                        />\r\n                    )}\r\n                    <CommunicatorWidgetLoader />\r\n                </div>\r\n                {showParallelItems && parallelItems.map(i => <ParallelChatInteractionLoader parallelItem={i} key={i.activeItemId} />)}\r\n            </div>\r\n        </Floating>\r\n    )\r\n}\r\n","import {useCallback, useMemo, useRef, useState} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useOnLogout} from '@bpinc/ad-session-context'\r\nimport {useOpenChannel} from '@bpinc/lib-helpers-ui'\r\n\r\nimport type {\r\n    ChannelOption,\r\n    ChannelState,\r\n    SelectedChannel,\r\n    SelectedPhone,\r\n    Touched,\r\n} from './types'\r\nimport {useOptions} from './useOptions'\r\n\r\n\r\n//TODO: Check if we need this initialOption or we can throw an error if it's not provided\r\nexport const initialOption: ChannelOption = {value: 'sms', text: 'SMS'}\r\n\r\nexport function useChannel(): ChannelState {\r\n    const channelOptions = useOptions()\r\n    const openChannel = useOpenChannel()\r\n\r\n    const channelOptionsRef = useRef(channelOptions)\r\n    channelOptionsRef.current = channelOptions\r\n\r\n    //------------Select logic------------//\r\n    const [selectedChannel, setSelectedChannel] = useState<SelectedChannel>({})\r\n    const [selectedPhone, setSelectedPhone] = useState<SelectedPhone>({})\r\n\r\n    const getSelectedChannel = useCallback((itemId: string) => {\r\n        if (selectedChannel[itemId]) {\r\n            return selectedChannel[itemId]\r\n        }\r\n\r\n        if (channelOptions) {\r\n            return channelOptions[0]\r\n        }\r\n\r\n        return undefined\r\n    }, [channelOptions, selectedChannel])\r\n\r\n    const getSelectedPhone = useCallback((itemId: string) => {\r\n        const channel = getSelectedChannel(itemId)\r\n        if (channel?.value !== 'sms') {\r\n            return undefined\r\n        }\r\n\r\n        if (selectedPhone[itemId]) {\r\n            return selectedPhone[itemId]\r\n        }\r\n\r\n        if (channel) {\r\n            return channel?.phones?.[0]\r\n        }\r\n    }, [getSelectedChannel, selectedPhone])\r\n\r\n    const selectCurrentItemChannel = useCallback(\r\n        function selectCurrentItemChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            setSelectedChannel(\r\n                produce(channels => {\r\n                    channels[itemId] = channel\r\n                }),\r\n            )\r\n            setSelectedPhone(produce(phones => {\r\n                phones[itemId] = phoneId ? channel.phones?.find(p => p.id === phoneId) : undefined\r\n            }))\r\n\r\n            return channel\r\n        },\r\n\r\n        [],\r\n    )\r\n    //------------Select logic end------------//\r\n\r\n    //------------Reset logic------------//\r\n    const resetChannel = useCallback(function resetChannelCallback() {\r\n        setSelectedChannel({'': initialOption})\r\n    }, [])\r\n\r\n    const resetSelectedChannel = useCallback(function deleteChannelCallback(item: Item) {\r\n        setSelectedChannel(\r\n            produce(channels => {\r\n                delete channels[item.id]\r\n            }),\r\n        )\r\n    }, [])\r\n\r\n\r\n    const [touchedState, setTouchedState] = useState<Touched>({})\r\n\r\n    const isTouched = useCallback((itemId: string) => {\r\n        return touchedState[itemId || '']\r\n    }, [touchedState])\r\n\r\n    const setIsTouched = useCallback(\r\n        (itemId: string, touched: boolean) => {\r\n            setTouchedState(\r\n                produce(draft => {\r\n                    draft[itemId] = touched\r\n                }),\r\n            )\r\n        },\r\n        [],\r\n    )\r\n\r\n    function resetAllTouched() {\r\n        setTouchedState({})\r\n    }\r\n\r\n    function resetTouched(item: Item) {\r\n        setTouchedState(\r\n            produce(draft => {\r\n                delete draft[item.id]\r\n            }),\r\n        )\r\n    }\r\n\r\n\r\n    useOnLogout(() => {\r\n        resetChannel()\r\n        resetAllTouched()\r\n    })\r\n    useOnItemRemoved(item => {\r\n        resetSelectedChannel(item)\r\n        resetTouched(item)\r\n    })\r\n\r\n\r\n    const setSelectedChannelImpl = useCallback(\r\n        function setSelectedChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            openChannel(channel.value)\r\n            selectCurrentItemChannel(itemId, channel, phoneId)\r\n            setIsTouched(itemId, true)\r\n        },\r\n        [openChannel, selectCurrentItemChannel, setIsTouched],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizedChannelState() {\r\n            return {\r\n                getSelectedChannel,\r\n                getSelectedPhone,\r\n                setSelectedChannel: setSelectedChannelImpl,\r\n                channelOptions,\r\n                isTouched,\r\n                setIsTouched,\r\n            }\r\n        },\r\n        [getSelectedChannel, getSelectedPhone, setSelectedChannelImpl, channelOptions, isTouched, setIsTouched],\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useContext} from 'react'\r\n\r\nimport {throwNoProviderError} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {initialOption, useChannel} from './state'\r\nimport type {ChannelState} from './types'\r\n\r\n\r\nconst contextName = 'ChannelStateContext'\r\nconst initialState: ChannelState = {\r\n    getSelectedChannel: () => initialOption,\r\n    getSelectedPhone: () => undefined,\r\n    isTouched: () => false,\r\n    channelOptions: [initialOption],\r\n    setIsTouched: throwNoProviderError(contextName),\r\n    setSelectedChannel: throwNoProviderError(contextName),\r\n}\r\n\r\nconst ChannelStateContext = React.createContext<ChannelState>(initialState)\r\nChannelStateContext.displayName = contextName\r\n\r\nexport const ChannelStateProvider: FCWithChildren<ReactElement | ReactFragment> = props => {\r\n    const channelState: ChannelState = useChannel()\r\n\r\n    return (\r\n        <ChannelStateContext.Provider value={channelState}>\r\n            {props.children}\r\n        </ChannelStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChannelState = () => useContext(ChannelStateContext)\r\n","import {useCallback} from 'react'\r\n\r\nimport {useBrowserTabMetaInfo} from '@bpinc/ad-current-tab-data-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {useScreenPopStateMethods} from '@bpinc/ad-screen-pop-state-context'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\nimport {formatHTMLAsOneLineString} from '@bpinc/lib-html-utils'\r\n\r\n\r\nexport function useLinkOpener(itemId: string) {\r\n    const {addTabs} = useScreenPopStateMethods()\r\n    const browserTabInfo = useBrowserTabMetaInfo()\r\n    const appType = browserTabInfo?.app\r\n    const {saveOpenedSuggestionUrl} = useInteractionStateMethods()\r\n\r\n    return useCallback(function openLink(suggestion: VoiceTranscriptCommonMessage) {\r\n        if (!suggestion.suggestionURL) {\r\n            return\r\n        }\r\n\r\n\r\n        saveOpenedSuggestionUrl(itemId, suggestion.suggestionURL)\r\n\r\n        if (appType === 'ad' && suggestion.openURLIn === 'AGENT_DESKTOP') {\r\n            const tabId = suggestion.msgId ?? suggestion.suggestionURL\r\n\r\n            addTabs(itemId, [\r\n                {\r\n                    id: tabId,\r\n                    type: 'iframe',\r\n                    url: suggestion.suggestionURL,\r\n                    title: formatHTMLAsOneLineString(suggestion.text),\r\n                },\r\n            ])\r\n\r\n        } else {\r\n            try {\r\n                window.open(normalizeExternalURL(suggestion.suggestionURL), suggestion.openURLIn == 'NEW_TAB' ? '_blank' : undefined, 'noopener,noreferrer')\r\n            } catch (e) {\r\n                const errorText = e instanceof Error ? e.message : 'unknown error'\r\n                console.error(`error opening window for url ${suggestion.suggestionURL}: ${errorText}`)\r\n            }\r\n        }\r\n    }, [appType, itemId, addTabs, saveOpenedSuggestionUrl])\r\n}\r\n","import type {ChatMessage, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {voiceTranscriptMessageTypes} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatMessageDate,\r\n    ExternalChatMessage,\r\n    ExternalChatMessageWithDate,\r\n    HistoryCallMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n    HistoryOutboundMessagingCampaignMessage,\r\n    HistoryRemoteAssistMessage,\r\n    HistoryVoiceTranscriptMessage,\r\n} from './types'\r\n\r\n\r\nexport function isChatMessageDate(message: ExternalChatMessageWithDate): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isHistoryMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryMessage {\r\n    return !!message && !isChatMessageDate(message) && 'globalInteractionId' in message\r\n}\r\n\r\nexport function isActivityMessageGroup(message: ExternalChatMessageWithDate | undefined): message is ActivityMessageGroup {\r\n    return !!message && !isChatMessageDate(message) && 'serviceId' in message && message.displayType === 'activityGroup'\r\n}\r\n\r\nexport function isChatMessage(message: ExternalChatMessageWithDate | undefined): message is ChatMessage {\r\n    return !!message && !isActivityMessageGroup(message) && !isHistoryMessage(message)\r\n}\r\n\r\nexport function isVoiceTranscriptMessage(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptCommonMessage {\r\n    return typeof message === 'object' && 'type' in message && voiceTranscriptMessageTypes.includes(message.type as VoiceTranscriptMessageType)\r\n}\r\n\r\nexport function isExternalChatMessage(\r\n    message: ChatCommonMessagesType,\r\n): message is ExternalChatMessage {\r\n    return typeof message === 'object' && !isVoiceTranscriptMessage(message)\r\n}\r\n\r\nexport function isExternalChatMessageDate(message: ChatCommonMessagesType | undefined): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isVoiceTranscriptSuggestion(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptSuggestion {\r\n    return isVoiceTranscriptMessage(message) && message.type === 'suggestion'\r\n}\r\n\r\nexport function isCallOrVoiceTranscript(message: ExternalChatMessageWithDate | ChatMessageDate | VoiceTranscriptSuggestion): boolean {\r\n    return !isVoiceTranscriptSuggestion(message) && (\r\n        typeof message === 'string' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE_TRANSCRIPT'\r\n    )\r\n}\r\n\r\nexport function isHistoryCallMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'VOICE'\r\n}\r\n\r\nexport function isHistoryEmailMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'EMAIL'\r\n}\r\n\r\nexport function isHistoryVoiceTranscriptMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryVoiceTranscriptMessage {\r\n    return isHistoryMessage(message) && message.mediaType === 'VOICE_TRANSCRIPT'\r\n}\r\n\r\nexport function isHistoryRemoteAssistMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryRemoteAssistMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'REMOTE_ASSIST'\r\n}\r\n\r\nexport function isHistoryOutboundMessagingCampaignMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryOutboundMessagingCampaignMessage {\r\n    return isHistoryMessage(message) && (message as HistoryOutboundMessagingCampaignMessage).serviceType == 'OUTBOUND_MESSAGING'\r\n}\r\n\r\nexport function isHistoryFileMessageMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryFileMessage {\r\n    return isHistoryMessage(message) && (message as HistoryFileMessage).displayType === 'file'\r\n}\r\n\r\n","import type {FileError, FileRejection} from 'react-dropzone'\r\nimport {ErrorCode} from 'react-dropzone'\r\n\r\nimport type {ActivitiesListItemType, PartyUserShortType} from '@bpinc/ad-activities-state-types'\r\nimport {CHAT_PROHIBITED_EXTENSIONS} from '@bpinc/ad-constants'\r\nimport type {ChatMessage, MessageDisplayType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {addTime, formatDate, getFileNameAndExtension} from '@bpinc/lib-helpers'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatScrollNodeType,\r\n    ExternalChatMessageFileData,\r\n    ExternalChatMessageWithDate,\r\n    HistoryChatMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n} from '../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessage,\r\n    isHistoryCallMessage,\r\n    isHistoryFileMessageMessage,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../types'\r\n\r\n\r\nexport function isScrollAtBottom(\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    return ((scrollNode?.scrollTop || 0) + (scrollNode?.clientHeight || 0)) >= (scrollNode?.scrollHeight || 0)\r\n}\r\n\r\n\r\nexport function getMessageId(message: ChatCommonMessagesType): string {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        if (message.chatMessageData?.displayType === 'error') {\r\n            return `${message.timestamp}-error`\r\n        }\r\n\r\n        if (message.chatMessageData) {\r\n            return getExternalChatMessageId(message.chatMessageData)\r\n        }\r\n\r\n        return getVoiceTranscriptMessageId(message)\r\n    }\r\n\r\n    if (isExternalChatMessage(message)) {\r\n\r\n        if (isActivityMessageGroup(message)) {\r\n            return getActivitiyMessageGroupMessageId(message)\r\n        }\r\n\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        if (displayType === 'scenario') {\r\n            return getScenarioMessageId(message)\r\n        }\r\n\r\n        if (isHistoryMessage(message)) {\r\n            return geHistoryMessageId(message)\r\n        }\r\n\r\n\r\n        return getExternalChatMessageId(message)\r\n\r\n    }\r\n\r\n    return message\r\n\r\n    function getActivitiyMessageGroupMessageId(msg: ActivityMessageGroup) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${msg.partyId}-${\r\n            msg.notes ? 'notes' : 'disposition'\r\n        }`\r\n    }\r\n    function getScenarioMessageId(msg: ChatMessage | HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msg}-scenario`\r\n    }\r\n    function getVoiceTranscriptMessageId(msg: VoiceTranscriptCommonMessage) {\r\n        return `${msg.partyId}-${msg.msgId}-${msg.timestamp}`\r\n    }\r\n\r\n    function getExternalChatMessageId(msg: ChatMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.source\r\n        }`\r\n    }\r\n\r\n    function geHistoryMessageId(msg: HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.direction\r\n        }`\r\n    }\r\n}\r\n\r\n\r\nexport function findFirstVisibleItemWithOffset(\r\n    scrollNode: ChatScrollNodeType,\r\n    startIndex: number,\r\n    messages: ChatCommonMessagesType[],\r\n): {id: string; offset: number} {\r\n    const item = scrollNode?.querySelector<HTMLDivElement>(`[data-index='${startIndex}']`)\r\n    if (!item) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    const offset = (scrollNode?.scrollTop || 0) - item.offsetTop\r\n    if (offset > 0) {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const message = messages[startIndex]\r\n    if (!message) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    if (typeof message === 'string') {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const id = getMessageId(messages[startIndex] || '')\r\n    return {id, offset}\r\n}\r\n\r\n//TODO: Discuss error messages with the management\r\nexport function getFileErrors(t: MessagesDeclaration, file: File) {\r\n    if (!file.name) {\r\n        return null\r\n    }\r\n\r\n    const {extension, name} = getFileNameAndExtension(file.name)\r\n    const isBadExtension = CHAT_PROHIBITED_EXTENSIONS.includes(`.${extension}`)\r\n\r\n    const errors: FileError[] = []\r\n\r\n    if (isBadExtension) {\r\n        errors.push({code: ErrorCode.FileInvalidType, message: t.EXTERNAL_CHAT.invalid_file_extension_error(name)})\r\n    }\r\n\r\n    if (!errors.length) {\r\n        return null\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\nexport function getFileRejection(t: MessagesDeclaration, file: File): FileRejection | null {\r\n    const errors = getFileErrors(t, file)\r\n\r\n    if (!errors) {\r\n        return null\r\n    }\r\n\r\n    return {\r\n        file,\r\n        errors,\r\n    }\r\n}\r\n\r\nexport function activityToChatMessage(selfUserId: string | undefined) {\r\n    return function activityToChatMessageInner(\r\n        activity: ActivitiesListItemType,\r\n    ): ActivityMessageGroup[] {\r\n        return activity.parties.reduce<ActivityMessageGroup[]>(\r\n            (activityMessages, party) => {\r\n                if (party.partyType === 'USER' && (party.disposition || party.notes)) {\r\n                    const userParty = party as PartyUserShortType\r\n                    activityMessages.push(\r\n                        partyUserShortTypeToActivityMessageGroup(\r\n                            userParty,\r\n                            activity,\r\n                            selfUserId,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                return activityMessages\r\n            },\r\n            [],\r\n        )\r\n    }\r\n}\r\n\r\nfunction partyUserShortTypeToActivityMessageGroup(\r\n    party: PartyUserShortType,\r\n    activity: ActivitiesListItemType,\r\n    selfUserId: string | undefined,\r\n): ActivityMessageGroup {\r\n    const id = activity.Id.oid\r\n    const createdTime = party.startTime?.date || activity.createdTime.date\r\n    const mediaType = activity.mediaType\r\n    const serviceId = party.serviceId\r\n    const service = serviceId ? activity.services?.find(s => s.serviceId === serviceId) : undefined\r\n    return {\r\n        mediaType,\r\n        msgId: id,\r\n        displayType: 'activityGroup' as const,\r\n        notes: party.notes,\r\n        disposition: party.disposition,\r\n        timestamp: createdTime ? addTime(createdTime, 'seconds', party.duration ?? 0).getTime() : 0,\r\n        serviceId: service?.serviceId ?? party.serviceId,\r\n        serviceName: service?.serviceName ?? '',\r\n        firstName: party.firstName,\r\n        lastName: party.lastName,\r\n        userId: party.userId,\r\n        isSelf: party.userId === selfUserId,\r\n        partyId: party.partyId,\r\n    }\r\n}\r\n\r\nexport function getDispositionTitle(\r\n    {firstName, lastName, timestamp, mediaType}: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    const fullName = formatFullName(firstName, lastName)\r\n    const date = formatDate(timestamp, 'll')\r\n    const time = formatDate(timestamp, 'h:mm A')\r\n\r\n    return mediaType === 'CHAT'\r\n        ? t.EXTERNAL_CHAT.disposition_message_title(fullName, date, time)\r\n        : t.VOICE_CALL.disposition_message_title(fullName, date, time)\r\n}\r\n\r\nexport function getDispositionText(\r\n    message: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    return `${getDispositionTitle(message, t, formatFullName)}\\n\\n` +\r\n    `${message.disposition}\\n\\n` +\r\n    `${t.EXTERNAL_CHAT.disposition_message_service_name()} ${message.serviceName}`\r\n}\r\n\r\nexport function getHistoryOrChatMessageText(\r\n    message: HistoryMessage | ChatMessage,\r\n    t: MessagesDeclaration,\r\n) {\r\n    const fileData = getExternalChatFileData(message)\r\n    if (fileData) {\r\n        return fileData.fileName\r\n    }\r\n\r\n    if (isChatMessage(message)) {\r\n        if (message.page) {\r\n            return message.title || t.EXTERNAL_CHAT.external_chat_customer_navigates_to()\r\n        }\r\n        return getHtmlMessageText(message.msg || '')\r\n    }\r\n\r\n    if (isHistoryCallMessage(message)) {\r\n        const title = message.isMissedCall\r\n            ? t.ACTIVITY_HISTORY.call_message_missed()\r\n            : message.direction === 'incoming'\r\n                ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n                : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n\r\n        return `${title}\\n\\n` +\r\n          `${formatDate(message.timestamp, 'LT')}, ${message.duration}\\n\\n`\r\n    }\r\n\r\n\r\n    if ('msg' in message && typeof message.msg === 'string') {\r\n        return getHtmlMessageText(message.msg)\r\n    }\r\n}\r\n\r\nexport function getHtmlMessageText(htmlContent: string) {\r\n    const messageTextElem = document.createElement('div')\r\n    messageTextElem.innerHTML = htmlContent\r\n    messageTextElem.style.opacity = '0'\r\n    messageTextElem.style.position = 'absolute'\r\n    messageTextElem.style.display = 'hidden'\r\n    messageTextElem.style.zIndex = '-1000'\r\n\r\n    document.body.append(messageTextElem)\r\n    const elementText = messageTextElem.innerText\r\n    messageTextElem.remove()\r\n\r\n    return elementText\r\n}\r\n\r\nexport function getExternalChatMessageDisplayType(message: ExternalChatMessageWithDate | undefined): MessageDisplayType | undefined {\r\n    if (isChatMessage(message)) {\r\n        return message.displayType\r\n    }\r\n    if (isHistoryMessage(message)) {\r\n        return (message as HistoryFileMessage | HistoryChatMessage).displayType\r\n    }\r\n    if (isActivityMessageGroup(message)) {\r\n        return message.displayType\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport function getExternalChatMessageDisplayName(\r\n    message: ExternalChatMessageWithDate,\r\n    formatFullName: (first: string | undefined, last: string | undefined) => string,\r\n) {\r\n    const users = isHistoryCallMessage(message) ? message.users : undefined\r\n    if (users?.length) {\r\n        return users.map(user => formatFullName(user.firstName, user.lastName)).join(', ')\r\n    }\r\n\r\n    const displayName = isChatMessage(message) ? message.displayName : undefined\r\n    if (displayName) {\r\n        return displayName\r\n    }\r\n\r\n    const {firstName, lastName} = isHistoryMessage(message) ? message : {firstName: undefined, lastName: undefined}\r\n    if (firstName || lastName) {\r\n        return formatFullName(firstName, lastName)\r\n    }\r\n}\r\n\r\nexport function isSystemExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'system'\r\n}\r\n\r\nexport function isInviteExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'invite'\r\n}\r\n\r\nexport function isErrorExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'error'\r\n}\r\n\r\nexport function isLocationExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'location'\r\n}\r\n\r\nexport function getExternalChatFileData(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): ExternalChatMessageFileData | undefined {\r\n    if (isChatMessage(message) && message.displayType === 'file') {\r\n        return {\r\n            fileId: message.fileId,\r\n            fileError: message.fileError,\r\n            fileIsMasked: message.fileIsMasked,\r\n            fileProgress: message.fileProgress,\r\n            fileName: message.fileName,\r\n            fileType: message.fileType,\r\n            refMsgId: undefined,\r\n        }\r\n    }\r\n    if (isHistoryFileMessageMessage(message)) {\r\n        return {\r\n            fileId: message.fileId,\r\n            refMsgId: message.refMsgId,\r\n            fileType: message.fileType,\r\n            fileName: message.fileName,\r\n            fileError: undefined,\r\n            fileIsMasked: undefined,\r\n            fileProgress: undefined,\r\n        }\r\n    }\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport {noop} from 'lodash-es'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport {useEvent, useEventListener, useValueUpdated} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\ntype ChatMessagesContextType = {\r\n    hasSelection: boolean\r\n    setHasSelection: StateSetter<boolean>\r\n    messages: ChatCommonMessagesType[]\r\n    selectedMessages: ChatCommonMessagesType[]\r\n    getClipboardBuffer: () => string\r\n    setClipboardBuffer: StateSetter<string>\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nconst ChatMessagesContext = createContext<ChatMessagesContextType>({\r\n    hasSelection: false,\r\n    setHasSelection: noop,\r\n    messages: [],\r\n    selectedMessages: [],\r\n    getClipboardBuffer: () => '',\r\n    setClipboardBuffer: noop,\r\n    scrollContainer: null,\r\n})\r\nChatMessagesContext.displayName = 'ChatMessagesContextProvider'\r\n\r\ninterface ChatMessagesContextProviderProps {\r\n    messages: ChatCommonMessagesType[]\r\n    children: ReactElement\r\n    interactionId: string\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\n\r\nexport const ChatMessagesContextProvider: React.FC<ChatMessagesContextProviderProps> = ({children, messages, interactionId, scrollContainer}) => {\r\n    const [hasSelection, setHasSelection] = useState(false)\r\n    const [clipboardBuffer, setClipboardBuffer] = useState('')\r\n    const [selectedMessages, setSelectedMessages] = useState<ChatCommonMessagesType[]>([])\r\n    const firstSelectedMessageRef = useRef<string>()\r\n    const getClipboardBuffer = useEvent(() => clipboardBuffer)\r\n    const interactionChanged = useValueUpdated(interactionId)\r\n\r\n    useEffect(() => {\r\n        if (!interactionChanged) {\r\n            return\r\n        }\r\n\r\n        setHasSelection(false)\r\n        setClipboardBuffer('')\r\n        setSelectedMessages([])\r\n    }, [interactionChanged])\r\n\r\n    useEventListener('mouseup', e => {\r\n        if (!firstSelectedMessageRef.current || !(e instanceof MouseEvent)) {\r\n            return\r\n        }\r\n\r\n        const lastSelectedMessageId = getNearestMessageId(e.target)\r\n        if (!lastSelectedMessageId) {\r\n            return\r\n        }\r\n\r\n        const firstSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === firstSelectedMessageRef.current)\r\n        const lastSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === lastSelectedMessageId)\r\n        const indexes = [firstSelectedMessageIndex, lastSelectedMessageIndex].sort((a, b) => a - b)\r\n\r\n        const selected = messages.slice(indexes[0], indexes[1] + 1)\r\n        const selection = window.getSelection()\r\n        const range = (selection?.rangeCount ?? 0) > 0 ? selection?.getRangeAt(0) : undefined\r\n\r\n        // If selected more than one message extend selection to include whole messages\r\n        if (selected.length > 1 && selection && range) {\r\n            const forwardSelection = firstSelectedMessageIndex < lastSelectedMessageIndex\r\n            const firstElement = document.querySelector(`[data-message-id-selection='${firstSelectedMessageRef.current}']`)\r\n            const lastElement = document.querySelector(`[data-message-id-selection='${lastSelectedMessageId}']`)\r\n            const startElement = forwardSelection ? firstElement : lastElement\r\n            const endElement = forwardSelection ? lastElement : firstElement\r\n            range.setStartBefore(startElement || range.startContainer)\r\n            range.setEndAfter(endElement || range.endContainer)\r\n            if (forwardSelection) {\r\n                selection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset)\r\n            } else {\r\n                selection.setBaseAndExtent(range.endContainer, range.endOffset, range.startContainer, range.startOffset)\r\n            }\r\n        }\r\n        setSelectedMessages(selected)\r\n    })\r\n\r\n    const mouseDownHandler = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        firstSelectedMessageRef.current = getNearestMessageId(e.target)\r\n    }, [])\r\n\r\n    const value = useMemo<ChatMessagesContextType>(\r\n        () => ({\r\n            hasSelection,\r\n            setHasSelection,\r\n            messages,\r\n            selectedMessages,\r\n            setClipboardBuffer,\r\n            getClipboardBuffer,\r\n            scrollContainer,\r\n        }),\r\n        [getClipboardBuffer, hasSelection, messages, scrollContainer, selectedMessages],\r\n    )\r\n\r\n    return (\r\n        <ChatMessagesContext.Provider value={value}>\r\n            <div onMouseDown={mouseDownHandler}>\r\n                {children}\r\n            </div>\r\n        </ChatMessagesContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChatHasSelection = () => useContextSelector(ChatMessagesContext, data => data.hasSelection)\r\nexport const useChatSetHasSelection = () => useContextSelector(ChatMessagesContext, data => data.setHasSelection)\r\nexport const useChatMessages = () => useContextSelector(ChatMessagesContext, data => data.messages)\r\nexport const useChatSelectedMessages = () => useContextSelector(ChatMessagesContext, data => data.selectedMessages)\r\nexport const useChatGetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.getClipboardBuffer)\r\nexport const useChatSetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.setClipboardBuffer)\r\nexport const useChatScrollContainer = () => useContextSelector(ChatMessagesContext, data => data.scrollContainer)\r\n\r\n\r\nfunction getNearestMessageId(target: EventTarget | null) {\r\n    let element: Element | undefined = undefined\r\n    if (target instanceof HTMLElement) {\r\n        element = target.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    } else if (target instanceof Node) {\r\n        element = target.parentElement?.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    }\r\n\r\n    return element?.getAttribute('data-message-id-selection') || undefined\r\n}\r\n","import type {FC, HTMLAttributes} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface MessageActionProps extends HTMLAttributes<HTMLButtonElement> {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const MessageAction: FC<MessageActionProps> = ({\r\n    className,\r\n    children,\r\n    ...buttonProps\r\n}) => {\r\n    return (\r\n        <button\r\n            {...buttonProps}\r\n            className={tcn(\r\n                'flex items-center gap-1 rounded border px-2 py-0.5 shadow-4 state-layer-bg-neutral-0 svg-color-current border-default',\r\n                'transition-colors',\r\n                'hover:state-layer-mix-dark-on-white-1',\r\n                'focus:state-layer-mix-dark-on-white-2',\r\n                'active:state-layer-mix-dark-on-white-3',\r\n                className,\r\n            )}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserDetailsState} from '@bpinc/ad-user-details-state-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    getDispositionText,\r\n    getExternalChatMessageDisplayName,\r\n    getHistoryOrChatMessageText,\r\n    getHtmlMessageText,\r\n} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessageDate,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../../../types'\r\n\r\n\r\nexport function useGetFormattedClipboardMessage() {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const contacts = useContactsState('contacts')\r\n    const users = useUserDetailsState('userDetails')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const interaction = useInteraction(interactionId)\r\n    const sessionUser = useSessionState(['firstName', 'lastName'])\r\n\r\n\r\n    return useCallback(\r\n        function getFormatClipboardMessage(\r\n            message: ChatCommonMessagesType,\r\n        ) {\r\n            const messageData = getMessageData()\r\n\r\n            if (!messageData) {\r\n                return ''\r\n            }\r\n\r\n            return `[${messageData.date}] ${messageData.name}\\n\\n${messageData.text}\\n\\n`\r\n\r\n\r\n            function getMessageData() {\r\n                if (isExternalChatMessageDate(message)) {\r\n                    return\r\n                }\r\n\r\n                if (isVoiceTranscriptMessage(message)) {\r\n                    const {endTime, partyId, text: messageText} = message\r\n                    const callParty = interaction?.parties?.find(party => party.id === partyId)\r\n                    const chartParty = interaction?.chatParties?.find(party => party.party_id === partyId)\r\n\r\n                    const name = callParty\r\n                        ? formatFullName(callParty.firstName, callParty.lastName)\r\n                        : chartParty\r\n                            ? formatFullName(chartParty.first_name, chartParty.last_name)\r\n                            : formatFullName(sessionUser.firstName, sessionUser.lastName)\r\n\r\n                    const text = getHtmlMessageText(messageText)\r\n\r\n                    return {\r\n                        date: formatDate(endTime, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isActivityMessageGroup(message)) {\r\n                    const {timestamp, lastName, firstName, notes} = message\r\n                    const text = notes || getDispositionText(message, t, formatFullName)\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name: formatFullName(firstName, lastName),\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isHistoryMessage(message) || isChatMessage(message)) {\r\n                    const {timestamp, contactId, userId} = message\r\n                    const displayName = getExternalChatMessageDisplayName(message, formatFullName)\r\n                    const contactData = contactId ? contacts[contactId]?.data : userId ? users[userId]?.data : undefined\r\n                    const userOrContactName = contactData\r\n                        ? formatFullName(contactData.firstName, contactData.lastName)\r\n                        : ''\r\n                    const name = displayName || userOrContactName\r\n\r\n                    const text = getHistoryOrChatMessageText(message, t)\r\n\r\n                    if (!text) {\r\n                        return\r\n                    }\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                return null\r\n            }\r\n        }, [contacts, formatFullName, interaction?.chatParties, interaction?.parties, sessionUser.firstName, sessionUser.lastName, t, users])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {maskActivityHistoryMessages} from '@bpinc/ad-contacts-state-methods'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {\r\n    useInteractionChatDataSelector,\r\n    useInteractionChatStateMethods,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MaskedTextChunks} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {getContactId, getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {SelectionData, Toggle} from '@bpinc/lib-helpers'\r\nimport {getErrorMessage, Mask, stringToHTMLFragment} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy, IconKnowledgeBase, IconMask} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getExternalChatMessageDisplayType} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {isChatMessage, isExternalChatMessageDate, isHistoryMessage, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatMessages,\r\n    useChatSelectedMessages,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface GetSelectionPopupContentParams {\r\n    selectedText: string\r\n    toggleShow: Toggle\r\n    selectionData: SelectionData | undefined\r\n}\r\n\r\nexport function useSelectionActions(item: Item, withMask = false) {\r\n    const {t} = useLocalizationState()\r\n    const messages = useChatMessages()\r\n    const selectedMessages = useChatSelectedMessages()\r\n    const {serverOrigin, loginId, sessionId, privileges} = useSessionState()\r\n    const {updateActivityHistoryMessageText} = useContactsStateMethods()\r\n    const getFormatClipboardMessage = useGetFormattedClipboardMessage()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n\r\n    const masked = useInteractionChatDataSelector(\r\n        getInteractionStepId(item),\r\n        s => s?.masked,\r\n    )\r\n\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n\r\n    const isCommunicator = useIsCommunicator()\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    return function getSelectionPopupContent({\r\n        toggleShow,\r\n        selectedText,\r\n        selectionData,\r\n    }: GetSelectionPopupContentParams) {\r\n        const {range} = selectionData ?? {}\r\n        const uniqueMessageId = getRangeMessageId(range)\r\n\r\n        const selectedMessage = messages.find(\r\n            message =>\r\n                uniqueMessageId &&\r\n                equalUniqueMessageId(\r\n                    uniqueMessageId,\r\n                    composedMessageUniqueId(message),\r\n                ),\r\n        )\r\n\r\n        function canMask() {\r\n            if (\r\n                !withMask ||\r\n                isExternalChatMessageDate(selectedMessage) ||\r\n                !privileges.CAN_MASK_INTERACTION_CONTENT\r\n            ) {\r\n                return false\r\n            }\r\n\r\n            if (!isVoiceTranscriptMessage(selectedMessage)) {\r\n                const displayType =\r\n                    getExternalChatMessageDisplayType(selectedMessage)\r\n\r\n                return displayType === 'message'\r\n            }\r\n\r\n            return false\r\n        }\r\n        function handleMaskClick() {\r\n            if (\r\n                isVoiceTranscriptMessage(selectedMessage) ||\r\n                isExternalChatMessageDate(selectedMessage)\r\n            ) {\r\n                return\r\n            }\r\n\r\n            if (isHistoryMessage(selectedMessage)) {\r\n                //Activity history message (both in active chat session and AH)\r\n                const maskedMessageBeforeMasking = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskSelectedHistory(range)\r\n\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskActivityHistoryMessages({\r\n                    loginId,\r\n                    sessionId,\r\n                    serverOrigin,\r\n                    globalInteractionId: selectedMessage.globalInteractionId,\r\n                    messages: [\r\n                        {\r\n                            messageId: selectedMessage.msgId,\r\n                            maskedText,\r\n                        },\r\n                    ],\r\n                })\r\n                    .then(() => {\r\n                        const contactId = getContactId(item)\r\n\r\n                        if (contactId) {\r\n                            updateActivityHistoryMessageText({\r\n                                contactId,\r\n                                messageId: selectedMessage.msgId,\r\n                                messageText: maskedText,\r\n                            })\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        //TODO: Ask for real error message text\r\n                        showNotification({\r\n                            type: 'error',\r\n                            id: Notifications.ChatMessageMaskError,\r\n                            tags: ['current-view'],\r\n                            message:\r\n                                t.EXTERNAL_CHAT.masking_failed_error_message(),\r\n                            duration: 5000,\r\n                        })\r\n                        bpLogger.error(getErrorMessage(err))\r\n\r\n                        const selectedMessageNode = getMessageTextElement(\r\n                            composedMessageUniqueId(selectedMessage),\r\n                        )\r\n                        if (selectedMessageNode) {\r\n                            selectedMessageNode.innerHTML =\r\n                                maskedMessageBeforeMasking\r\n                        }\r\n                    })\r\n\r\n                //Active chat session, current chat message\r\n            } else if (\r\n                isChatMessage(selectedMessage) &&\r\n                selectedMessage.msgId\r\n            ) {\r\n                const textChunks =\r\n                    masked?.messages?.[selectedMessage.msgId]?.textChunks\r\n                const updatedTextChunks = maskSelectedText(range, textChunks)\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskMessage({\r\n                    itemId: getInteractionStepId(item),\r\n                    messageId: selectedMessage.msgId,\r\n                    maskedText,\r\n                    textChunks: updatedTextChunks,\r\n                })\r\n            }\r\n\r\n            toggleShow(false)\r\n        }\r\n        async function handleSearchKnowledgeBaseClick() {\r\n            toggleShow(false)\r\n\r\n            if (isCommunicator) {\r\n                openInteractionSlidingModal(item.id, 'knowledgeBase')\r\n            } else {\r\n                setKBFloatingState(s => (s === 'closed' ? 'floating' : s))\r\n            }\r\n            setupInteractionKB(selectedText)\r\n        }\r\n        function handleCopyClick() {\r\n            toggleShow(false)\r\n\r\n            let textToCopy = ''\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //If several messages selected, copy all of them\r\n            if (selectedMessages.length > 1) {\r\n                textToCopy = selectedMessages.reduce<string>((res, message) => {\r\n                    return res + getFormatClipboardMessage(message)\r\n                }, '')\r\n                textToAddToCopyBuffer = textToCopy\r\n            //Otherwise copy only selected message, but add formatted message to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToCopy = selectedText\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            console.info('📋 Clipboard text\\n', textToCopy)\r\n            setClipboardBuffer(textToAddToCopyBuffer)\r\n            navigator.clipboard.writeText(textToCopy)\r\n        }\r\n\r\n        function handleAddToCopy() {\r\n            toggleShow(false)\r\n\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //More than one message selected, add all of them to \"Add to copy\" buffer\r\n            if (selectedMessages.length > 1) {\r\n                textToAddToCopyBuffer = selectedMessages.reduce<string>(\r\n                    (res, message) => {\r\n                        return res + getFormatClipboardMessage(message)\r\n                    },\r\n                    '',\r\n                )\r\n            //Only one message selected, add it to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            const addToCopyBuffer = getClipboardBuffer()\r\n            const newClipboardData = addToCopyBuffer + textToAddToCopyBuffer\r\n            console.info('📋 Clipboard text\\n', newClipboardData)\r\n\r\n            navigator.clipboard.writeText(newClipboardData)\r\n            setClipboardBuffer(newClipboardData)\r\n        }\r\n\r\n        if (!selectedText) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {!isAfterCallWork(item) && (\r\n                    <MessageAction\r\n                        onClick={handleSearchKnowledgeBaseClick}\r\n                        data-testid=\"search-kb-button\"\r\n                    >\r\n                        <IconKnowledgeBase className=\"size-4\" />\r\n                        {t.GLOBAL.search()}\r\n                    </MessageAction>\r\n                )}\r\n                {canMask() && (\r\n                    <MessageAction\r\n                        onClick={handleMaskClick}\r\n                        data-testid=\"mask-content-button\"\r\n                    >\r\n                        <IconMask />\r\n                        {t.EXTERNAL_CHAT.mask()}\r\n                    </MessageAction>\r\n                )}\r\n                <MessageAction onClick={handleCopyClick} data-testid=\"copy\">\r\n                    <IconCopy />\r\n                    {t.GLOBAL.copy()}\r\n                </MessageAction>\r\n                {!!getClipboardBuffer().length && (\r\n                    <MessageAction\r\n                        onClick={handleAddToCopy}\r\n                        data-testid=\"add-to-copy\"\r\n                    >\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getRangeMessageId(\r\n    range: Range | undefined,\r\n): UniqueMessageId | undefined {\r\n    const commonElement = getCommonAncestorElement(range)\r\n    return getElementMessageId(commonElement)\r\n}\r\n\r\nexport function getElementMessageId(\r\n    element: Element | null | undefined,\r\n): UniqueMessageId | undefined {\r\n    const messageElement = element?.closest(uniqueMessageIdSelector())\r\n    const messageId = messageElement?.getAttribute('data-message-id')\r\n    let globalInteractionId =\r\n        messageElement?.getAttribute('data-global-interaction-id') ?? undefined\r\n    if (globalInteractionId === 'current') {\r\n        globalInteractionId = undefined\r\n    }\r\n    if (messageId) {\r\n        return {messageId, globalInteractionId}\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n\r\nfunction getCommonAncestorElement(range: Range | undefined) {\r\n    return range?.commonAncestorContainer.nodeType === Node.ELEMENT_NODE\r\n        ? (range?.commonAncestorContainer as Element)\r\n        : range?.commonAncestorContainer.parentElement\r\n}\r\n\r\nfunction maskSelectedHistory(range: Range | undefined) {\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    let fragment = range.extractContents()\r\n    const tempSpan = getFragmentWithinSpanNode(fragment)\r\n\r\n    Mask.obscureHTML(tempSpan)\r\n\r\n    fragment = document.createDocumentFragment()\r\n\r\n    Array.from(tempSpan.childNodes).forEach(node => {\r\n        fragment.appendChild(node)\r\n    })\r\n\r\n    range.insertNode(fragment)\r\n}\r\n\r\nfunction maskSelectedText(\r\n    range: Range | undefined,\r\n    maskedTextChunks: MaskedTextChunks = {},\r\n) {\r\n    const updatedMaskedTextChunks = {...maskedTextChunks}\r\n\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    extendUnmasked(range)\r\n\r\n    const fragment = range.extractContents()\r\n    const span = getFragmentWithinSpanNode(fragment)\r\n    const unmaskedSpan = revealUnmasked(span, updatedMaskedTextChunks)\r\n    const id = uuid()\r\n\r\n    unmaskedSpan.classList.add('bp-masked')\r\n    unmaskedSpan.id = id\r\n\r\n    const unmaskedText = unmaskedSpan.innerHTML\r\n\r\n    Mask.obscureHTML(unmaskedSpan)\r\n\r\n    updatedMaskedTextChunks[id] = {\r\n        originalText: unmaskedText,\r\n        maskedText: unmaskedSpan.innerHTML,\r\n    }\r\n\r\n    range.insertNode(unmaskedSpan)\r\n    return updatedMaskedTextChunks\r\n}\r\n\r\nfunction getFragmentWithinSpanNode(fragment: DocumentFragment) {\r\n    const span = document.createElement('span')\r\n\r\n    fragment.childNodes.forEach(node => {\r\n        const nodeCopy = node.cloneNode(true)\r\n        span.append(nodeCopy)\r\n    })\r\n\r\n    return span\r\n}\r\n\r\nfunction extendUnmasked(range: Range) {\r\n    const startElement = range.startContainer.parentElement\r\n\r\n    if (isMasked(startElement) || isAnchorTag(startElement)) {\r\n        range.setStartBefore(range.startContainer)\r\n        range.setStartBefore(range.startContainer)\r\n    }\r\n\r\n    const endElement = range.endContainer.parentElement\r\n\r\n    if (isMasked(endElement) || isAnchorTag(endElement)) {\r\n        range.setEndAfter(range.endContainer)\r\n        range.setEndAfter(range.endContainer)\r\n    }\r\n}\r\n\r\nfunction isMasked(element: HTMLElement | null | undefined) {\r\n    return element?.classList.contains('bp-masked')\r\n}\r\n\r\nfunction isAnchorTag(element: HTMLElement | null | undefined) {\r\n    return element?.nodeName === 'A'\r\n}\r\n\r\nfunction revealUnmasked(html: HTMLElement, maskedTextChunks: MaskedTextChunks) {\r\n    const htmlClone = html.cloneNode(true) as HTMLElement\r\n\r\n    revealUnmaskedInner(htmlClone)\r\n\r\n    return htmlClone\r\n\r\n    function revealUnmaskedInner(htmlInner: HTMLElement) {\r\n        if (htmlInner.classList.contains('bp-masked')) {\r\n            const textChunkId = htmlInner.id\r\n            const unmasked = stringToHTMLFragment(\r\n                maskedTextChunks[textChunkId].originalText,\r\n            )\r\n\r\n            delete maskedTextChunks[htmlInner.id]\r\n\r\n            htmlInner.replaceWith(unmasked)\r\n            return\r\n        }\r\n\r\n        Array.from(htmlInner.children).forEach(htmlElement => {\r\n            revealUnmaskedInner(htmlElement as HTMLElement)\r\n        })\r\n    }\r\n}\r\n\r\nexport interface UniqueMessageId {\r\n    globalInteractionId: string | undefined\r\n    messageId: string | undefined\r\n}\r\n\r\nexport function equalUniqueMessageId(\r\n    id1: UniqueMessageId,\r\n    id2: UniqueMessageId,\r\n) {\r\n    return (\r\n        id1.messageId === id2.messageId &&\r\n        id1.globalInteractionId === id2.globalInteractionId\r\n    )\r\n}\r\n\r\nexport function composedMessageUniqueId(\r\n    composedChatMessage: ChatCommonMessagesType,\r\n): UniqueMessageId {\r\n    return {\r\n        messageId: isExternalChatMessageDate(composedChatMessage)\r\n            ? composedChatMessage\r\n            : composedChatMessage.msgId,\r\n        globalInteractionId:\r\n            !isExternalChatMessageDate(composedChatMessage) &&\r\n            !isVoiceTranscriptMessage(composedChatMessage) &&\r\n            isHistoryMessage(composedChatMessage)\r\n                ? composedChatMessage.globalInteractionId\r\n                : undefined,\r\n    }\r\n}\r\n\r\nfunction getMaskedText(uniqueMessageId: UniqueMessageId) {\r\n    return getMessageTextElement(uniqueMessageId)?.innerHTML ?? ''\r\n}\r\n\r\nfunction getMessageTextElement(uniqueMessageId: UniqueMessageId) {\r\n    return uniqueMessageId.messageId\r\n        ? document.querySelector(uniqueMessageIdSelector(uniqueMessageId))\r\n            ?.children[0]\r\n        : undefined\r\n}\r\n\r\nfunction uniqueMessageIdSelector(uniqueMessageId?: UniqueMessageId): string {\r\n    if (uniqueMessageId) {\r\n        const {messageId, globalInteractionId} = uniqueMessageId\r\n        return `[data-message-id=\"${messageId}\"][data-global-interaction-id=\"${\r\n            globalInteractionId ?? 'current'\r\n        }\"]`\r\n    } else {\r\n        return `[data-message-id][data-global-interaction-id]`\r\n    }\r\n}\r\n","import type {CSSProperties, ReactNode} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useInteractionChatDataSelector, useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {stringToHTMLFragment, useBoolean} from '@bpinc/lib-helpers'\r\nimport {isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isChatMessage, isExternalChatMessageDate, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useChatMessages, useChatScrollContainer} from './ChatMessagesContext'\r\nimport type {UniqueMessageId} from './useSelectionActions'\r\nimport {composedMessageUniqueId, equalUniqueMessageId, getElementMessageId} from './useSelectionActions'\r\n\r\n\r\ninterface WithUnmaskActionProps {\r\n    interactionId: string\r\n    className?: string\r\n    children: ReactNode\r\n}\r\n\r\n\r\nexport const WithUnmaskAction: React.FC<WithUnmaskActionProps> = React.memo(({interactionId, children, className}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const messages = useChatMessages()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const unmaskPopupWrapperRef = useRef<HTMLDivElement>(null)\r\n    const [popupRect, setPopupRect] = useState<DOMRectReadOnly>()\r\n    const [unmaskChunkId, setUnmaskChunkId] = useState<string>()\r\n    const [unmaskMessageId, setUnmaskMessageId] = useState<UniqueMessageId>()\r\n\r\n    const maskedMessageNodeRef = useRef<HTMLElement | null>(null)\r\n\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const masked = useInteractionChatDataSelector(interactionStepId, s => s?.masked)\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    useEffect(() => {\r\n        const unmaskPopupWrapperNode = unmaskPopupWrapperRef.current\r\n        unmaskPopupWrapperNode?.addEventListener('click', togglePopup)\r\n\r\n        function togglePopup(e: MouseEvent) {\r\n            const maskedMessageNode = e.target\r\n            if (!maskedMessageNode || !isHTMLElement(maskedMessageNode)) {\r\n                return\r\n            }\r\n            maskedMessageNodeRef.current = maskedMessageNode\r\n\r\n            if (maskedMessageNode.classList.contains('bp-masked') && maskedMessageNode.id) {\r\n                setUnmaskChunkId(maskedMessageNode.id)\r\n                const unmaskElementMessageId = getElementMessageId(maskedMessageNode)\r\n\r\n                if (unmaskElementMessageId) {\r\n                    setUnmaskMessageId(unmaskElementMessageId)\r\n                }\r\n\r\n                setPopupRect(maskedMessageNode.getBoundingClientRect())\r\n\r\n                toggleShow()\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            unmaskPopupWrapperNode?.removeEventListener('click', togglePopup)\r\n        }\r\n    }, [toggleShow])\r\n\r\n    const handleUnmask = useCallback(\r\n        function handleUnmaskCallback() {\r\n            const messageToUnmask = messages.find(\r\n                msg =>\r\n                    unmaskMessageId &&\r\n                    !isVoiceTranscriptMessage(msg) &&\r\n                    equalUniqueMessageId(unmaskMessageId, composedMessageUniqueId(msg)),\r\n            )\r\n\r\n            if (!unmaskChunkId || !unmaskMessageId || isVoiceTranscriptMessage(messageToUnmask) || isExternalChatMessageDate(messageToUnmask)) {\r\n                return\r\n            }\r\n\r\n            if (isChatMessage(messageToUnmask)) {\r\n                const unmaskedTextChunk = unmaskMessageId?.messageId\r\n                    ? masked?.messages?.[unmaskMessageId.messageId]?.textChunks?.[unmaskChunkId]?.originalText\r\n                    : undefined\r\n\r\n                if (!unmaskedTextChunk) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                const unmaskedTextChunkHTML = stringToHTMLFragment(unmaskedTextChunk)\r\n\r\n                maskedMessageNodeRef.current?.replaceWith(unmaskedTextChunkHTML)\r\n\r\n                const maskedText =\r\n                    unmaskPopupWrapperRef.current?.querySelector(`[data-message-id=\"${messageToUnmask.msgId}\"]`)\r\n                        ?.children[0]?.innerHTML ?? ''\r\n\r\n                if (!maskedText) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                maskMessage({\r\n                    itemId: interactionStepId,\r\n                    messageId: unmaskMessageId.messageId!,\r\n                    maskedText,\r\n                })\r\n            }\r\n            toggleShow(false)\r\n        },\r\n        [interactionStepId, maskMessage, masked?.messages, messages, toggleShow, unmaskChunkId, unmaskMessageId],\r\n    )\r\n\r\n    const coordinates = useMemo<CSSProperties>(\r\n        function memoizePopupCoordinates() {\r\n            return {\r\n                position: 'fixed',\r\n                top: popupRect?.y ?? 0,\r\n                left: popupRect?.x ?? 0,\r\n            }\r\n        },\r\n        [popupRect],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div ref={unmaskPopupWrapperRef} className={className}>{children}</div>\r\n            <Popup\r\n                show={show}\r\n                data-testid=\"selection-popup\"\r\n                placement=\"top-start\"\r\n                contentClassName=\"border-none bg-transparent shadow-none p-0\"\r\n                data-visible={show}\r\n                onClickOutside={toggleShow}\r\n                style={coordinates}\r\n                mountNode={scrollContainer}\r\n                content={\r\n                    <MessageAction\r\n                        onClick={handleUnmask}\r\n                        data-testid=\"unmask-content-button\"\r\n                    >\r\n                        <IconUnmask />\r\n                        {t.EMAIL.button_unMaskSelectedText_text()}\r\n                    </MessageAction>\r\n                }\r\n            />\r\n        </>\r\n    )\r\n})\r\n","import type {ReactNode} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport type {SelectionData} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {WithSelectionPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChatScrollContainer, useChatSetHasSelection} from './ChatMessagesContext'\r\nimport {useSelectionActions} from './useSelectionActions'\r\nimport {WithUnmaskAction} from './WithUnmaskAction'\r\n\r\n\r\ntype WithActionsPopupProps = {\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithSelectionActions: React.FC<WithActionsPopupProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    interactionId,\r\n}) => {\r\n    const setHasSelection = useChatSetHasSelection()\r\n    const interaction = useInteraction(interactionId)\r\n    assertDefined(interaction)\r\n    const getPopupContent = useSelectionActions(interaction, withMaskAction)\r\n    const onSelectionChange = useCallback(\r\n        (selection?: SelectionData) => {\r\n            setHasSelection(!!selection?.range?.toString())\r\n        },\r\n        [setHasSelection],\r\n    )\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    return (\r\n        <WithSelectionPopup\r\n            getPopupContent={getPopupContent}\r\n            onSelectionChange={onSelectionChange}\r\n            mountNode={scrollContainer}\r\n            popupContentClassName=\"border-none bg-transparent shadow-none flex gap-1\"\r\n        >\r\n            {withMaskAction ? (\r\n                <WithUnmaskAction interactionId={interactionId}>\r\n                    {children}\r\n                </WithUnmaskAction>\r\n            ) : (\r\n                children\r\n            )}\r\n        </WithSelectionPopup>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesContextProvider} from './ChatMessagesContext'\r\nimport {WithSelectionActions} from './WithSelectionActions'\r\n\r\n\r\ntype ChatMessagesSelectionActionsProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nexport const ChatMessagesSelectionActions: React.FC<ChatMessagesSelectionActionsProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    messages,\r\n    interactionId,\r\n    scrollContainer,\r\n}) => {\r\n    return (\r\n        <ChatMessagesContextProvider messages={messages} interactionId={interactionId} scrollContainer={scrollContainer}>\r\n            <WithSelectionActions withMaskAction={withMaskAction} interactionId={interactionId}>\r\n                {children}\r\n            </WithSelectionActions>\r\n        </ChatMessagesContextProvider>\r\n    )\r\n}\r\n","import type {FC, ReactElement} from 'react'\r\n\r\nimport {useActiveChatChecker} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {IconMask, IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useFileMasker} from '../ExternalMessages/messages/FileMessage/useFileMasker'\r\n\r\n\r\ninterface WithAttachmentMaskActionProps {\r\n    fileIsMasked: boolean\r\n    canMask: boolean\r\n    globalInteractionId: string | undefined\r\n    interactionStepId: string\r\n    fileId: string\r\n    contactId: string\r\n    children: ReactElement\r\n}\r\n\r\nexport const WithAttachmentMaskAction: FC<WithAttachmentMaskActionProps> = ({\r\n    fileIsMasked,\r\n    canMask,\r\n    interactionStepId,\r\n    globalInteractionId,\r\n    fileId,\r\n    contactId,\r\n    children,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const isActiveChat = useActiveChatChecker(interactionStepId)\r\n\r\n    const maskFile = useFileMasker({\r\n        interactionStepId,\r\n        itemContactId: contactId,\r\n        globalInteractionId,\r\n        fileId,\r\n        isActiveChat,\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"group relative\"\r\n        >\r\n            {fileIsMasked && <IconMask className=\"absolute left-1/2 top-1/2 z-[1] size-6 -translate-x-1/2 -translate-y-1/2\" />}\r\n            {canMask && (\r\n                <MessageAction onClick={maskFile} className=\"absolute right-2 top-2 z-[1] opacity-0 transition-opacity group-hover:opacity-100\">\r\n                    {fileIsMasked ? <IconUnmask /> : <IconMask />}\r\n                    <p>\r\n                        {fileIsMasked\r\n                            ? t.EXTERNAL_CHAT.unmask()\r\n                            : t.EXTERNAL_CHAT.mask()}\r\n                    </p>\r\n                </MessageAction>\r\n            )}\r\n            <div\r\n                className={\r\n                    tcn(\r\n                        'border border-transparent',\r\n                        {\r\n                            'overflow-hidden rounded-xs border-[rgba(0,0,0,0.1)]': fileIsMasked,\r\n                        })\r\n                }\r\n            >\r\n                <div\r\n                    className={tcn({\r\n                        'pointer-events-none blur-[6px] state-layer-bg-white state-layer-mix-dark-on-white-1': fileIsMasked,\r\n                    })}\r\n                >\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {maskActivityHistoryMessages} from '@bpinc/ad-contacts-state-methods'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getErrorMessage} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface UseFileMaskerParams {\r\n    globalInteractionId?: string\r\n    itemContactId: string\r\n    fileId: string\r\n    interactionStepId: string\r\n    isActiveChat: boolean\r\n}\r\n\r\nexport function useFileMasker({\r\n    globalInteractionId,\r\n    interactionStepId,\r\n    itemContactId,\r\n    isActiveChat,\r\n    fileId,\r\n}: UseFileMaskerParams) {\r\n    const {loginId, sessionId, serverOrigin} = useSessionState()\r\n    const {maskFile} = useContactsStateMethods()\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const {toggleFileMask} = useInteractionChatStateMethods()\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    return useCallback(() => {\r\n        if (isFileInCurrentChatSession()) {\r\n            toggleFileMask({\r\n                itemId: interactionStepId,\r\n                fileId,\r\n            })\r\n        } else if (isFileInAH(globalInteractionId)) {\r\n            maskActivityHistoryMessages({\r\n                loginId,\r\n                sessionId,\r\n                serverOrigin,\r\n                globalInteractionId,\r\n                fileIds: [fileId],\r\n            })\r\n                .then(() => {\r\n                    if (itemContactId) {\r\n                        maskFile({fileId, contactId: itemContactId})\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    //TODO: Ask for real error message text\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.ChatFileMaskError,\r\n                        tags: ['current-view'],\r\n                        message: i18n.activity_history_file_masking_error(),\r\n                        duration: 5000,\r\n                    })\r\n                    bpLogger.error(getErrorMessage(err))\r\n                })\r\n        }\r\n        function isFileInCurrentChatSession() {\r\n            return isActiveChat && !globalInteractionId\r\n        }\r\n\r\n        function isFileInAH(checkingGlobalInteractionId?: string): checkingGlobalInteractionId is string {\r\n            return !!checkingGlobalInteractionId\r\n        }\r\n    }, [\r\n        i18n,\r\n        itemContactId,\r\n        fileId,\r\n        globalInteractionId,\r\n        interactionStepId,\r\n        isActiveChat,\r\n        loginId,\r\n        maskFile,\r\n        serverOrigin,\r\n        sessionId,\r\n        showNotification,\r\n        toggleFileMask,\r\n    ])\r\n}\r\n","import type {HTMLAttributes, ReactNode} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport * as Tooltip from '@radix-ui/react-tooltip'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatHasSelection,\r\n    useChatMessages,\r\n    useChatScrollContainer,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface WithHoverOverActionsProps extends HTMLAttributes<HTMLElement> {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithHoverOverActions: React.FC<WithHoverOverActionsProps> = ({children, messageId, ...triggerHtmlProps}) => {\r\n    const getFormattedClipboardMessage = useGetFormattedClipboardMessage()\r\n    const hasSelection = useChatHasSelection()\r\n    const messages = useChatMessages()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const scrollContainer = useChatScrollContainer()\r\n    const message = useMemo(() => messages.find(m => getMessageId(m) === messageId), [messageId, messages])\r\n    const t = useLocalizationState('t')\r\n    const open = useBoolean()\r\n\r\n    const handleCopyToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n\r\n        const result = getFormattedClipboardMessage(message)\r\n\r\n        console.info('📋 Clipboard text\\n', result)\r\n        navigator.clipboard.writeText(result)\r\n        setClipboardBuffer(result)\r\n        open.setFalse()\r\n    }, [getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n    const handleAddToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        const result = getFormattedClipboardMessage(message)\r\n        const stored = getClipboardBuffer()\r\n        const newClipboardData = stored + result\r\n        navigator.clipboard.writeText(newClipboardData)\r\n        setClipboardBuffer(newClipboardData)\r\n        console.info('📋 Clipboard text\\n', newClipboardData)\r\n        open.setFalse()\r\n    }, [getClipboardBuffer, getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n\r\n    return (\r\n        <Tooltip.Root open={hasSelection ? false : open.value} onOpenChange={open.toggle} >\r\n            <Tooltip.Trigger asChild>\r\n                <div {...triggerHtmlProps}>\r\n                    {children}\r\n                </div>\r\n            </Tooltip.Trigger>\r\n            <Tooltip.Portal container={scrollContainer}>\r\n                <Tooltip.Content collisionBoundary={scrollContainer} side=\"top\" align=\"end\" className=\"z-10 flex gap-1\" hideWhenDetached>\r\n                    <MessageAction onClick={handleCopyToClipboard}>\r\n                        <IconCopy />\r\n                        {t.GLOBAL.copy()}\r\n                    </MessageAction>\r\n                    <MessageAction onClick={handleAddToClipboard}>\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                </Tooltip.Content>\r\n            </Tooltip.Portal>\r\n        </Tooltip.Root>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {createSelector} from 'reselect'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedItems, isCall, isChat} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InteractionStateDataWithComputeds, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport function useBotSuggestions(itemId: string) {\r\n    const botSuggestionSelector = useMemo(() => selectBotSuggestions(itemId), [itemId])\r\n    return useInteractionStateSelector(botSuggestionSelector)\r\n}\r\n\r\nexport function useBotSuggestionsByType(itemId: string) {\r\n    const botSuggestionSelector = useMemo(() => selectBotSuggestionsByType(itemId), [itemId])\r\n    return useInteractionStateSelector(botSuggestionSelector)\r\n}\r\n\r\nfunction selectBotSuggestionsByType(itemId: string) {\r\n    return createSelector(\r\n        (state: InteractionStateDataWithComputeds) => state.items.find(item => item.id === itemId),\r\n        (state: InteractionStateDataWithComputeds) => state.items,\r\n        (item, items) => {\r\n            const associatedItems = getAssociatedItems({item, items})\r\n            const allItems = truthy([...associatedItems, item])\r\n\r\n            return allItems.reduce<Record<'voice' | 'chat', VoiceTranscriptSuggestion[]>>((acc, innerItem) => {\r\n                if (isCall(innerItem)) {\r\n                    acc.voice = innerItem?.botSuggestions ?? []\r\n                } else if (isChat(innerItem)) {\r\n                    acc.chat = innerItem?.botSuggestions ?? []\r\n                }\r\n                return acc\r\n            }, {voice: [], chat: []})\r\n        })\r\n}\r\n\r\nfunction selectBotSuggestions(itemId: string) {\r\n    return createSelector(\r\n        (state: InteractionStateDataWithComputeds) => state.items.find(item => item.id === itemId),\r\n        (state: InteractionStateDataWithComputeds) => state.items,\r\n        (item, items) => {\r\n            const associatedItems = getAssociatedItems({item, items})\r\n            const allItems = truthy([...associatedItems, item])\r\n\r\n            return allItems.flatMap(innerItem => innerItem?.botSuggestions ?? [])\r\n        })\r\n}\r\n","import {atom} from 'jotai'\r\n\r\n\r\nexport const predefinedMessagesSearchAtom = atom('')\r\nexport const predefinedSearchInsertPositionAtom = atom(-1)\r\nexport const chatPopupContentAtom = atom<'predefinedMessages' | 'emojiPicker' | undefined>(undefined)\r\nexport const attachmentButtonElementAtom = atom<HTMLButtonElement | null>(null)\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue} from 'jotai'\r\nimport {uniq} from 'lodash-es'\r\n\r\nimport {mimeTypeToExternalChatFileType} from '@bpinc/ad-formatting-helpers'\r\nimport {Attachment as AttachmentUI, InlineAlert, Modal} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {getFileRejection} from '../../../helpers'\r\nimport {attachmentButtonElementAtom} from './atoms'\r\n\r\n\r\ntype UploadErrorModalProps = CommonModalProps & {\r\n    rejection: Exclude<ReturnType<typeof getFileRejection>, null>[]\r\n    totalFilesAmount: number\r\n    onCloseCallback?: () => void\r\n}\r\n\r\nexport const UploadErrorModal: FC<UploadErrorModalProps> = ({\r\n    rejection,\r\n    onClose,\r\n    onCloseCallback,\r\n    totalFilesAmount,\r\n    ...props\r\n}) => {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const t = useLocalizationState('t')\r\n    const errorMessages = uniq(rejection.flatMap(r => r.errors.map(e => e.message)))\r\n\r\n    function handleClose() {\r\n        onClose()\r\n        onCloseCallback?.()\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} onClose={handleClose}>\r\n            <Modal.Header type=\"error\">\r\n                {t.CHAT_CENTER.upload_failed()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <InlineAlert variant=\"error\">\r\n                    <ul className=\"m-0 p-0\">\r\n                        {errorMessages.map((message, index) => (\r\n                            <li key={index}>{message}</li>\r\n                        ))}\r\n                    </ul>\r\n                </InlineAlert>\r\n                <p className=\"my-6\">\r\n                    {t.CHAT_CENTER.failed_to_upload(\r\n                        rejection.length,\r\n                        totalFilesAmount,\r\n                    )}\r\n                </p>\r\n                <div className=\"flex flex-col gap-2\">\r\n                    {rejection.map((err, index) =>\r\n                        mimeTypeToExternalChatFileType(err.file.type) ===\r\n                    'attachment' ? (\r\n                                <AttachmentUI.File\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ) : (\r\n                                <AttachmentUI.Image\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ),\r\n                    )}\r\n                </div>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => {\r\n                        attachmentButton?.click()\r\n                        handleClose()\r\n                    }}\r\n                >\r\n                    {t.CHAT_CENTER.select_files()}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={() => handleClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getContactId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\nimport {useChannelState} from '../channel-context'\r\n\r\n\r\ninterface InitiateChatProps {\r\n    chatItem: Item\r\n}\r\n\r\n\r\n//TODO: Extend this function to use it for text messages as well (error validation logic is slightly different)\r\n\r\n/**\r\n * Initiates a chat with the selected channel and address.\r\n * @returns boolean. true if the chat was initiated, false otherwise.\r\n */\r\nexport function useInitiateChatByAttachment({\r\n    chatItem,\r\n}: InitiateChatProps): () => boolean {\r\n    const {showNotification, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const contacts = useContactsState('contacts')\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const selectedChannel = getSelectedChannel(chatItem.id)\r\n    const selectedPhone = getSelectedPhone(chatItem.id)\r\n    const contactMessengers = getMessengers(contacts, chatItem)\r\n    const phone = selectedPhone?.phone || getPhoneFromItem(chatItem)\r\n    const errorValidation = useErrorValidation()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const contactId = getContactId(chatItem)\r\n    const itemService = getServiceId(chatItem)\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const service = itemService || selectedService\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatServiceId = getAssociatedChatServiceId(\r\n        services,\r\n        selectedService,\r\n    )\r\n    return useEvent(() => {\r\n        /**\r\n         * Get the messenger address based on the selected channel value or fallback to the phone number.\r\n         */\r\n        const messengerAddress = contactMessengers?.find(\r\n            messenger => messenger.type === selectedChannel?.value,\r\n        )?.userId\r\n\r\n        const address = messengerAddress || phone\r\n\r\n        /**\r\n         * If there is no phone number or messenger available do nothing.\r\n         */\r\n        if (!address) {\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Check for any validation errors.\r\n         */\r\n        const errors = [\r\n            ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                service,\r\n                didNumber: selectedDIDNumber,\r\n                interactionType: 'sms',\r\n            }),\r\n            ...errorValidation.getChannelError({\r\n                selectedChannel: selectedChannel?.value,\r\n            }),\r\n        ]\r\n\r\n        /**\r\n         * If there are any errors, show the first one and return.\r\n         */\r\n        if (errors.length) {\r\n            showNotification(errors[0])\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * If there are no errors, hide existing 'interaction-init' errors and start the chat initiation process.\r\n         */\r\n        hideNotificationsByTag('interaction-init')\r\n\r\n        initiateChat({\r\n            channel: selectedChannel?.value,\r\n            address,\r\n            displayData: chatItem?.displayData,\r\n            serviceId: associatedChatServiceId,\r\n            accessNumberId: selectedDIDNumber,\r\n            contactId,\r\n            origination: 'interaction',\r\n        })\r\n\r\n        return true\r\n    })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dropzone\":\"agent_Dropzone_dropzone_NnIGW\",\"dropzoneDisabled\":\"agent_Dropzone_dropzoneDisabled_Z62xX\",\"dropzoneTitle\":\"agent_Dropzone_dropzoneTitle_GjrhI\",\"dropzoneSubtitle\":\"agent_Dropzone_dropzoneSubtitle_3av8B\"};","import React, {useEffect} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {getFileErrors} from '../../../../helpers'\r\nimport type {ChatProps} from '../../../../types'\r\nimport {UploadErrorModal} from '../../ChatForm/UploadErrorModal'\r\nimport {useOnDrop} from './useOnDrop'\r\nimport {useShowChecker} from './useShowChecker'\r\n\r\nimport styles from './Dropzone.module.less'\r\n\r\n\r\nexport const Dropzone: React.FC<ChatProps> = ({itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const show = useShowChecker()\r\n    const onDrop = useOnDrop(itemId)\r\n\r\n    const {getRootProps, getInputProps, fileRejections, acceptedFiles} = useDropzone({\r\n        onDrop,\r\n        validator: partial(getFileErrors, t),\r\n    })\r\n\r\n    const openUploadErrorModal = useModalComponentOpener(UploadErrorModal)\r\n\r\n    const acceptedFilesLengthRef = useAsRef(acceptedFiles.length)\r\n    useEffect(function addErrorMessageOnReject() {\r\n        if (fileRejections.length) {\r\n            openUploadErrorModal({\r\n                rejection: fileRejections,\r\n                totalFilesAmount: acceptedFilesLengthRef.current + fileRejections.length,\r\n            })\r\n        }\r\n    }, [acceptedFilesLengthRef, fileRejections, openUploadErrorModal])\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            className={show ? styles.dropzone : styles.dropzoneDisabled}\r\n            data-testid=\"attachments-dropzone\"\r\n            data-visible={show}\r\n        >\r\n            <input {...getInputProps()} />\r\n            <div className={styles.dropzoneContent}>\r\n                <p className={styles.dropzoneTitle}>{t.GLOBAL.drop_files_here()}</p>\r\n                <p className={styles.dropzoneSubtitle}>{t.GLOBAL.drag_and_drop_subtitle()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useShowChecker() {\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const dragCounterRef = useRef(0)\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('dragenter', onDragEnter)\r\n        document.addEventListener('dragleave', onDragLeave)\r\n        document.addEventListener('drop', onDragLeave)\r\n\r\n        return () => {\r\n            document.removeEventListener('dragenter', onDragEnter)\r\n            document.removeEventListener('dragleave', onDragLeave)\r\n            document.removeEventListener('drop', onDragLeave)\r\n        }\r\n\r\n        function onDragEnter() {\r\n            dragCounterRef.current++\r\n            toggleShow(true)\r\n        }\r\n\r\n        function onDragLeave() {\r\n            dragCounterRef.current--\r\n            if (dragCounterRef.current === 0) {\r\n                toggleShow(false)\r\n            }\r\n        }\r\n    }, [toggleShow])\r\n\r\n    return show\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useInteraction, useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isCall, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useInitiateChatByAttachment} from '../../../../hooks/useInitiateChatByAttachment'\r\n\r\n\r\nexport function useOnDrop(itemId: string) {\r\n    const addAttachment = useChatAttachmentsUIState('addAttachment')\r\n    const chatItem = useInteraction(itemId)\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    itemsRef.current = items\r\n\r\n    assertDefined(chatItem)\r\n    const initiateChat = useInitiateChatByAttachment({chatItem})\r\n    const shouldInitiateChat =\r\n        isPotentialInteraction(chatItem) || isCall(chatItem)\r\n\r\n    return useCallback(\r\n        function onDropCallback(acceptedFiles: File[]) {\r\n            if (!acceptedFiles.length) {\r\n                return\r\n            }\r\n\r\n            if (chatItem) {\r\n                if (shouldInitiateChat) {\r\n                    initiateChat()\r\n                }\r\n                const interactionStepId = getInteractionStepId(chatItem)\r\n                addAttachments(interactionStepId)\r\n            }\r\n\r\n            function addAttachments(interactionStepId: string) {\r\n                acceptedFiles.forEach(file => addAttachment(interactionStepId, file))\r\n            }\r\n        },\r\n        [chatItem, shouldInitiateChat, initiateChat, addAttachment],\r\n    )\r\n}\r\n","import {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\n\r\nimport {getMessageId} from '../helpers/common'\r\n\r\n\r\nexport function useFirstUnreadMessage(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const first = chatData?.messages?.find(m => (m.source === 'customer' || m.source === 'agent') && !m.isRead)\r\n    if (!first) {\r\n        return null\r\n    }\r\n\r\n    return getMessageId(first)\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isScrollAtBottom} from '../../../helpers'\r\nimport {useFirstUnreadMessage} from '../../../hooks/useFirstUnreadMessage'\r\nimport type {ChatScrollNodeType} from '../../../types'\r\n\r\n\r\ntype ScrollToFirstUnreadBadgeProps = {\r\n    itemId: string\r\n    scrollNode: ChatScrollNodeType\r\n}\r\n\r\nexport const ScrollToFirstUnreadBadge: React.FC<ScrollToFirstUnreadBadgeProps> = ({itemId, scrollNode}) => {\r\n    const {t} = useLocalizationState()\r\n    const [unreadMessagesClicked, setUnreadMessagesClicked] = useState(true)\r\n    const [scrollAtBottom, setScrollAtBottom] = useState(false)\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const firstUnreadMessageId = useFirstUnreadMessage(itemId)\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector?.dispenser.subscribe({\r\n            onNewMessage: newMessage => {\r\n                if (newMessage.item_id === interactionStepId) {\r\n                    setUnreadMessagesClicked(false)\r\n                }\r\n            },\r\n        })\r\n        return () => {\r\n            subscription?.unsubscribe()\r\n        }\r\n    }, [interactionChatStateConnector?.dispenser, interactionStepId])\r\n\r\n    useEffect(() => {\r\n        const scrollAtBottomThrottled = throttle(() => {\r\n            setScrollAtBottom(isScrollAtBottom(scrollNode))\r\n        }, 500)\r\n        scrollNode?.addEventListener('scroll', scrollAtBottomThrottled)\r\n        return () => {\r\n            scrollNode?.removeEventListener('scroll', scrollAtBottomThrottled)\r\n        }\r\n    }, [scrollNode])\r\n\r\n    const handleClick = useCallback(\r\n        function handleClickCallback() {\r\n            if (!firstUnreadMessageId) {\r\n                return\r\n            }\r\n\r\n            setUnreadMessagesClicked(true)\r\n            scrollerApi?.scrollTo(firstUnreadMessageId, 'end')\r\n        }, [firstUnreadMessageId, scrollerApi],\r\n    )\r\n\r\n\r\n    if (!firstUnreadMessageId || unreadMessagesClicked || scrollAtBottom) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            enabledInOffline\r\n            transparent\r\n            onClick={handleClick}\r\n            className=\"absolute bottom-4 left-4 z-10 h-8 items-center\r\n            rounded border border-solid border-primary-legacy bg-white px-6 text-primary-legacy\r\n            hover:border-primary-hover hover:text-primary-hover\r\n            active:border-primary-active active:text-primary-active\"\r\n        >\r\n            {t.CHAT_CENTER.unread_messages_button_text()}\r\n            <SmIcon name=\"caret down\" className=\"leading-[16px]\" />\r\n        </Button>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {formatChatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {areSameDays} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface GetTimeStamp<T> {\r\n    (message: T): number\r\n}\r\ninterface Conditions<T> {\r\n    (message: T): boolean\r\n}\r\n\r\ninterface AddKeyDatesCallback {\r\n    <T>(messages: T[], getTimestamp: GetTimeStamp<T>, additionalConditions?: Conditions<T>): (T | string)[]\r\n}\r\n\r\nexport function useKeyDatesInserter(): AddKeyDatesCallback {\r\n    function addKeyDates<T>(\r\n        messages: T[],\r\n        getTimestamp: (message: T) => number,\r\n        additionalConditions?: (message: T) => boolean,\r\n    ) {\r\n        return messages.reduce(\r\n            (acc: (T | string)[], message: T, index, messagesArray) => {\r\n                if (index === 0) {\r\n                    addTime(acc, message)\r\n                } else {\r\n                    if (\r\n                        (additionalConditions ? additionalConditions(message) : true) &&\r\n                        showTimeBeforeMessage(\r\n                            new Date(getTimestamp(messagesArray[index - 1])),\r\n                            new Date(getTimestamp(message)),\r\n                        )\r\n                    )\r\n                        addTime(acc, message)\r\n                }\r\n\r\n                acc.push(message)\r\n\r\n                return acc\r\n            },\r\n            [],\r\n        )\r\n\r\n        function addTime(acc: (T | string)[], message: T) {\r\n            const time = formatChatDate(getTimestamp(message))\r\n            acc.push(time)\r\n        }\r\n    }\r\n\r\n    return useCallback(addKeyDates, [])\r\n}\r\n\r\n//****************************\r\nfunction showTimeBeforeMessage(currentTime: Date, nextTime: Date) {\r\n    return !areSameDays(currentTime, nextTime)\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useActivitiesAsMessages} from './useActivitiesAsMessages'\r\n\r\n\r\nexport function useActivitiesMessagesTillCreatedTime(\r\n    contactId: string,\r\n    latestCreatedTime?: number,\r\n) {\r\n    const activitiesMessages = useActivitiesAsMessages(contactId)\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedActivitiesMessages() {\r\n            let finalLatestCreatedTime = latestCreatedTime\r\n            if (!latestCreatedTime) {\r\n                finalLatestCreatedTime = new Date().getTime()\r\n            }\r\n\r\n            return latestCreatedTime\r\n                ? activitiesMessages.filter(\r\n                    message =>\r\n                        finalLatestCreatedTime &&\r\n                        message.timestamp &&\r\n                        message.timestamp >= finalLatestCreatedTime,\r\n                )\r\n                : []\r\n        },\r\n        [latestCreatedTime, activitiesMessages],\r\n    )\r\n}\r\n","import {useEffect, useMemo} from 'react'\r\n\r\nimport {useActivitiesState, useActivitiesStateMethods} from '@bpinc/ad-activities-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {activityToChatMessage} from '../../../../helpers'\r\n\r\n\r\nexport function useActivitiesAsMessages(contactId: string) {\r\n    const activitiesListByContactId = useActivitiesState('activitiesListByContactId')\r\n    const {getActivitiesList} = useActivitiesStateMethods()\r\n    const {userId: selfUserId} = useSessionState()\r\n    const activitiesList = activitiesListByContactId[contactId]\r\n\r\n    useEffect(function initializeActivitiesList() {\r\n        if (contactId && !activitiesList) {\r\n            getActivitiesList({id: contactId})\r\n        }\r\n    }, [activitiesList, getActivitiesList, contactId])\r\n\r\n\r\n    return useMemo(function memoizeActivitiesMessages() {\r\n        return activitiesList?.data?.flatMap(activityToChatMessage(selfUserId)) ?? []\r\n    }, [activitiesList, selfUserId])\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ChatMessage, MessageDisplayType} from '@bpinc/ad-interaction-message-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getChatParties, getInteractionStepId, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../channel-context'\r\n\r\n\r\nexport function useMessagesList(itemId: string) {\r\n    const chatActiveItem = useInteraction(itemId)\r\n    const {channelOptions} = useChannelState()\r\n    const {t} = useLocalizationState()\r\n    const chatData = useInteractionChatData(getInteractionStepId(chatActiveItem))\r\n\r\n    const masked = chatData?.masked\r\n\r\n    const messagesList = useMemo(\r\n        function memoizeList() {\r\n            return (isExternalChat(chatActiveItem) && chatData?.messages) || []\r\n        },\r\n        [chatActiveItem, chatData],\r\n    )\r\n\r\n    const addUserId = useCallback(\r\n        (message: ChatMessage) => {\r\n            const partiesList = getChatParties(chatActiveItem)\r\n            const currentParty = partiesList?.find(party => party.party_id === message.partyId)\r\n            const userId = message.userId || (currentParty && currentParty.user_id)\r\n            return {...message, userId}\r\n        },\r\n        [chatActiveItem],\r\n    )\r\n\r\n    const maskMessage = useCallback(\r\n        function maskMessageCallback(message: ChatMessage): ChatMessage {\r\n            const maskedMessage = message.msgId ? masked?.messages?.[message.msgId] : undefined\r\n            const fileIsMasked = message.fileId ? masked?.files.includes(message.fileId) : undefined\r\n\r\n            if (maskedMessage || fileIsMasked) {\r\n                const updatedMessage = {...message}\r\n\r\n                updatedMessage.maskedText = maskedMessage?.maskedText\r\n                updatedMessage.fileIsMasked = fileIsMasked\r\n\r\n                return updatedMessage\r\n            }\r\n\r\n            return message\r\n\r\n        }, [masked],\r\n    )\r\n\r\n    const localizeSystemMessage = useCallback(\r\n        (message: ChatMessage): ChatMessage => {\r\n            message.eventType = message.msg\r\n            if (message.needLocalization && message.msg) {\r\n                let args: string[] = []\r\n                const partyName = message.partyName || 'unknown party'\r\n                if (message.msg === 'external_chat_party_joined_new' || message.msg === 'external_chat_party_left_new') {\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT[message.msg](),\r\n                    }\r\n                }\r\n                // @DEPRECATED (remove after tests)\r\n                if (message.msg === 'external_chat_party_joined' || message.msg === 'external_chat_party_left') {\r\n                    args = [partyName]\r\n                }\r\n                // @DEPRECATED (remove after tests)\r\n                // special case - special message for supervisor in Coaching mode\r\n                if (message.msg === 'external_chat_party_joined_new' && message.qmMode === 'whisper') {\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT.external_chat_party_coaching(partyName),\r\n                    }\r\n                }\r\n\r\n                if (message.msg === 'message_connection_accepted') {\r\n                    if (message.channel === 'sms') {\r\n                        args = [t.GLOBAL.chat_type_sms()]\r\n                    } else {\r\n                        const selectedChannel = channelOptions.find(channel => channel.value === message.channel)\r\n\r\n                        args = selectedChannel ? [selectedChannel?.text] : []\r\n                    }\r\n                }\r\n\r\n                if (message.msg in t.EXTERNAL_CHAT) {\r\n                    const msg = message.msg as Exclude<keyof typeof t.EXTERNAL_CHAT, 'sms_messages_number'>\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT[msg](args[0], args[1], args[2]),\r\n                    }\r\n                }\r\n            }\r\n            return message\r\n        },\r\n        [channelOptions, t],\r\n    )\r\n\r\n    const msgHasDisplayTypes = useCallback((displayTypes: MessageDisplayType[]) => {\r\n        return function skipMsgWithDisplayTypesInner(message: ChatMessage) {\r\n            return displayTypes.some(type => type === message.displayType)\r\n        }\r\n    }, [])\r\n\r\n    return useMemo(\r\n        () => ({\r\n            messagesList,\r\n            addUserId,\r\n            localizeSystemMessage,\r\n            msgHasDisplayTypes: msgHasDisplayTypes,\r\n            maskMessage,\r\n        }),\r\n        [messagesList, addUserId, localizeSystemMessage, msgHasDisplayTypes, maskMessage],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport type {ChatMessage as ChatMessageType} from '@bpinc/ad-interaction-message-types'\r\n\r\nimport {useMessagesList} from '../../../../hooks/useMessagesList'\r\n\r\n\r\nexport function useNormalizedChatMessages(itemId: string) {\r\n    const {messagesList, addUserId, localizeSystemMessage, maskMessage} = useMessagesList(itemId)\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedMessages() {\r\n            return {\r\n                normalizedChatMessages: messagesList.reduce<ChatMessageType[]>((messages, message) => {\r\n                    const normalizedMessage = flow(addUserId, localizeSystemMessage, maskMessage)(message)\r\n\r\n                    messages.push(normalizedMessage)\r\n\r\n                    return messages\r\n                }, []),\r\n            }\r\n        },\r\n        [addUserId, localizeSystemMessage, maskMessage, messagesList],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {formatDate, useInnerHTML} from '@bpinc/lib-helpers'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport {useCallMessageVoiceTranscriptName} from './useCallMessageVoiceTranscriptName'\r\n\r\n\r\ninterface CallMessageVoiceTranscriptProps {\r\n    message: HistoryVoiceTranscriptMessage\r\n}\r\n\r\nexport const CallMessageVoiceTranscript: React.FC<CallMessageVoiceTranscriptProps> = ({\r\n    message,\r\n}) => {\r\n    const name = useCallMessageVoiceTranscriptName(message)\r\n    const sanitizedText = useChatMessageSanitizer({message: message.msg})\r\n\r\n    const messageHTML = useInnerHTML(sanitizedText)\r\n\r\n    return (\r\n        <section className=\"flex w-full gap-2.5\" data-testid=\"transcript-message\">\r\n            <div className=\"shrink-0 caption-s text-neutral-fade\" data-testid=\"transcript-message-time\">\r\n                {formatDate(message.endTimestamp, 'h:mm A')}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n                {name && (\r\n                    <div\r\n                        className=\"break-all caption-s text-neutral-fade\"\r\n                        data-testid=\"transcript-message-name\"\r\n                    >\r\n                        {name}\r\n                    </div>\r\n                )}\r\n                <div\r\n                    className=\"break-words body\"\r\n                    data-testid=\"transcript-message-text\"\r\n                    dangerouslySetInnerHTML={messageHTML}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\n\r\n\r\nexport function useCallMessageVoiceTranscriptName(\r\n    voiceTranscriptMessage: HistoryVoiceTranscriptMessage,\r\n) {\r\n    const contacts = useContactsState('contacts')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(\r\n        function memoizeName() {\r\n            if (voiceTranscriptMessage.type === 'suggestion') {\r\n                return\r\n            }\r\n\r\n            const contactData = voiceTranscriptMessage.contactId && contacts[voiceTranscriptMessage.contactId]?.data\r\n            const contactName = contactData && formatFullName(contactData.firstName, contactData.lastName)\r\n            const nonContactName = formatFullName(voiceTranscriptMessage.firstName, voiceTranscriptMessage.lastName)\r\n\r\n            return contactData ? contactName : nonContactName\r\n        },\r\n        [\r\n            contacts,\r\n            formatFullName,\r\n            voiceTranscriptMessage.contactId,\r\n            voiceTranscriptMessage.firstName,\r\n            voiceTranscriptMessage.lastName,\r\n            voiceTranscriptMessage.type,\r\n        ],\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {stopPropagation, useBoolean} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconTranscriptOptions, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useTranscriptOptions} from './hooks/useTranscriptOptions'\r\n\r\n\r\ntype Props = {\r\n    isOpenModal?: boolean\r\n    contentVoiceTranscript: JSX.Element | null\r\n}\r\n\r\nexport const TranscriptDropdown: FC<Props> = React.memo(({contentVoiceTranscript, isOpenModal = false}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: open, toggle, setFalse} = useBoolean()\r\n    const transcriptOptions = useTranscriptOptions({\r\n        isOpenModal,\r\n        contentVoiceTranscript,\r\n        handleCloseView: setFalse,\r\n    })\r\n\r\n    return (\r\n        <TriggerDropdown\r\n            modal={false}\r\n            open={open}\r\n            onClick={stopPropagation}\r\n            onFocus={stopPropagation}\r\n            onOpenChange={toggle}\r\n            className=\"rounded-xs\"\r\n            align=\"end\"\r\n            side=\"bottom\"\r\n            options={transcriptOptions.map(({renderIcon, optionName, onClick}, i) => (\r\n                <button key={i} className=\"flex items-center gap-2\" onClick={onClick}>\r\n                    {renderIcon()}\r\n                    <div className=\"min-w-[140px] caption-s text-primary-on-primary\">{optionName}</div>\r\n                </button>\r\n            ))}\r\n        >\r\n            <ButtonIcon\r\n                tooltip={\r\n                    open\r\n                        ? t.ACTIVITY_HISTORY.call_message_collapse_voice_transcript()\r\n                        : t.ACTIVITY_HISTORY.call_message_expand_voice_transcript()\r\n                }\r\n                data-testid=\"voice-transcript-button\"\r\n                className=\"rounded-xs\"\r\n\r\n            >\r\n                <IconTranscriptOptions className=\"size-4\" />\r\n            </ButtonIcon>\r\n        </TriggerDropdown>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {IconDownloadTranscript, IconViewTranscript} from '@bpinc/lib-jskit-ui'\r\nimport {useCloseGlobalSlidingModal, useOpenGlobalSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype TranscriptOptions = {\r\n    renderIcon: () => JSX.Element\r\n    onClick: () => void\r\n    optionName: string\r\n}\r\n\r\ntype UseTranscriptionOptionsType = {\r\n    isOpenModal: boolean\r\n    handleCloseView: () => void\r\n    contentVoiceTranscript: JSX.Element | null\r\n}\r\n\r\nexport const useTranscriptOptions = ({isOpenModal, contentVoiceTranscript, handleCloseView}: UseTranscriptionOptionsType): TranscriptOptions[] => {\r\n    const {t} = useLocalizationState()\r\n    const openGlobalSlidingModal = useOpenGlobalSlidingModal()\r\n    const closeGlobalSlidingModal = useCloseGlobalSlidingModal()\r\n    const iconClassName = 'icon-default size-4'\r\n\r\n    const handleOpenViewTranscript = useCallback(() => {\r\n        openGlobalSlidingModal('voiceTranscript', {contentVoiceTranscript})\r\n    }, [openGlobalSlidingModal, contentVoiceTranscript])\r\n\r\n    const handleCloseViewTranscript = useCallback(() => {\r\n        closeGlobalSlidingModal('voiceTranscript')\r\n    }, [closeGlobalSlidingModal])\r\n\r\n    const viewOption = {\r\n        optionName: isOpenModal ? t.ACTIVITY_HISTORY.close_transcript_option() : t.ACTIVITY_HISTORY.view_transcript_option(),\r\n        onClick: isOpenModal ? handleCloseViewTranscript : handleOpenViewTranscript,\r\n        renderIcon: () => <IconViewTranscript className={iconClassName} />,\r\n    }\r\n\r\n    //TODO: add func for download call transcript file\r\n    const downloadOption = {\r\n        optionName: t.ACTIVITY_HISTORY.download_transcript_option(),\r\n        onClick: handleCloseView,\r\n        renderIcon: () => <IconDownloadTranscript className={iconClassName} />,\r\n    }\r\n\r\n    return [viewOption, downloadOption]\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {CHAT_VOICE_RECORDING_PLAYER_GROUP} from '@bpinc/ad-constants'\r\nimport {IconInteractionCall, IconMissedCall16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AudioPlayer, Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useContentVoiceTranscript} from './hooks/useContentVoiceTranscript'\r\nimport type {CallMessageProps} from './CallMessageContent'\r\nimport {TranscriptDropdown} from './TranscriptDropdown'\r\n\r\n\r\ntype Props = CallMessageProps & {\r\n    isOpenModal?: boolean\r\n    hasVoiceTranscript?: boolean\r\n    title: string\r\n    createdTime?: string\r\n    ariaLabel?: string\r\n    recordingLink: string\r\n    containerClassName?: string\r\n    audioPlayerClassName?: string\r\n}\r\n\r\nexport const CallMessageRecording: FC<Props> = React.memo(props => {\r\n    const {\r\n        isOpenModal,\r\n        hasVoiceTranscript,\r\n        isMissedCall,\r\n        duration,\r\n        title,\r\n        recordingLink,\r\n        sentiment,\r\n        createdTime,\r\n        ariaLabel,\r\n        containerClassName,\r\n        audioPlayerClassName,\r\n    } = props\r\n    const {t} = useLocalizationState()\r\n    const contentVoiceTranscript = useContentVoiceTranscript(props)\r\n\r\n    const renderTranscriptDropdown = useCallback(() => {\r\n        return (\r\n            <>\r\n                {hasVoiceTranscript && <TranscriptDropdown isOpenModal={isOpenModal} contentVoiceTranscript={contentVoiceTranscript} /> }\r\n            </>\r\n        )\r\n    }, [contentVoiceTranscript, hasVoiceTranscript, isOpenModal])\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col gap-1', containerClassName)} data-testid=\"call-content\" data-missed={isMissedCall}>\r\n            <div className=\"flex items-center justify-between gap-2\" aria-label={ariaLabel}>\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"flex items-center gap-1\">\r\n                        {isMissedCall\r\n                            ? <IconMissedCall16 className=\"size-4\" aria-hidden />\r\n                            : <IconInteractionCall className=\"size-4 icon-default\" aria-hidden />\r\n                        }\r\n                        <span\r\n                            className=\"caption-s text-primary-on-primary\"\r\n                            aria-hidden\r\n                            data-testid=\"call-title\"\r\n                        >\r\n                            {title}\r\n                        </span>\r\n                    </div>\r\n                    {!!duration && (\r\n                        <span>\r\n                            <span className=\"aria-description\">{t.ACTIVITY_HISTORY.call_message_duration_aria()}</span>\r\n                            <div className=\"flex items-center gap-2 caption-s text-neutral-fade\">\r\n                                <span aria-hidden className=\"flex size-0.5 items-center rounded-full bg-neutral-500\" />\r\n                                <span data-testid=\"call-duration\">{duration}</span>\r\n                            </div>\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                    {sentiment && <Sentiment sentiment={sentiment} className=\"mr-1 w-5\" />}\r\n                    <span>\r\n                        <span className=\"aria-description\">\r\n                            {t.ACTIVITY_HISTORY.call_message_created_time_aria()}\r\n                        </span>\r\n                        <span data-testid=\"call-start-time\" className=\"caption-s text-neutral-fade\">{createdTime}</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex select-none flex-nowrap\">\r\n                <AudioPlayer\r\n                    isNewAudioPlayerUI\r\n                    src={recordingLink}\r\n                    skipUnmount\r\n                    playerGroupTag={CHAT_VOICE_RECORDING_PLAYER_GROUP}\r\n                    pauseGroupWhenPlaying\r\n                    renderOptionalNode={renderTranscriptDropdown}\r\n                    className={audioPlayerClassName}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {getMessageId} from '../../../../../../helpers'\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../../types'\r\nimport type {CallMessageProps} from '../CallMessageContent'\r\nimport {CallMessageRecording} from '../CallMessageRecording'\r\nimport {CallMessageVoiceTranscript} from '../CallMessageVoiceTranscript'\r\n\r\n\r\n type Props = CallMessageProps & {\r\n     title: string\r\n     createdTime?: string\r\n     ariaLabel?: string\r\n }\r\nexport const useContentVoiceTranscript = (props: Props) => {\r\n    const {\r\n        direction,\r\n        duration,\r\n        timestamp,\r\n        hasVoiceRecording,\r\n        recordingLink,\r\n        isMissedCall,\r\n        voiceTranscript,\r\n        createdTime,\r\n        ariaLabel,\r\n        title,\r\n    } = props\r\n\r\n    return useMemo(() => {\r\n        return (\r\n            <div>\r\n                {recordingLink && (\r\n                    <CallMessageRecording\r\n                        isOpenModal\r\n                        audioPlayerClassName=\"bg-transparent shadow-none\"\r\n                        containerClassName=\"bg-primary-container-variant1 rounded-xs px-3 py-2\"\r\n                        hasVoiceRecording={hasVoiceRecording}\r\n                        recordingLink={recordingLink}\r\n                        voiceTranscript={voiceTranscript}\r\n                        timestamp={timestamp}\r\n                        duration={duration}\r\n                        isMissedCall={isMissedCall}\r\n                        title={title}\r\n                        createdTime={createdTime}\r\n                        hasVoiceTranscript={!!voiceTranscript?.length}\r\n                        ariaLabel={ariaLabel}\r\n                        direction={direction}\r\n                    />\r\n                )}\r\n                <div className=\"scrollbar-general mt-4 flex select-none flex-col gap-4 overflow-y-auto\" data-testid=\"voice-transcript-messages\">\r\n                    {voiceTranscript && voiceTranscript.map((message: HistoryVoiceTranscriptMessage) => (\r\n                        <CallMessageVoiceTranscript message={message} key={getMessageId(message)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }, [ariaLabel, createdTime, direction, duration, hasVoiceRecording, isMissedCall, recordingLink, timestamp, title, voiceTranscript])\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {IconInteractionCall, IconMissedCall16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {CallMessageProps} from './CallMessageContent'\r\n\r\n\r\ntype Props = CallMessageProps & {\r\n    hasVoiceTranscript?: boolean\r\n    title: string\r\n    createdTime?: string\r\n    ariaLabel?: string\r\n}\r\n\r\nexport const EmptyCallMessage: FC<Props> = React.memo(({\r\n    isMissedCall,\r\n    duration,\r\n    title,\r\n    sentiment,\r\n    ariaLabel,\r\n    createdTime,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between gap-4\" aria-label={ariaLabel}>\r\n            <div className=\"flex items-center gap-1\">\r\n                {isMissedCall\r\n                    ? <IconMissedCall16 className=\"size-4\" aria-hidden />\r\n                    : <IconInteractionCall className=\"size-4 icon-default\" aria-hidden />\r\n                }\r\n                <div\r\n                    className={tcn('flex items-center gap-1 caption-s text-neutral-on-secondary', {\r\n                        'text-on-error': isMissedCall,\r\n                    })}\r\n                >\r\n                    <span\r\n                        aria-hidden\r\n                        data-testid=\"call-title\"\r\n                    >\r\n                        {title}\r\n                    </span>\r\n                    {!!duration && (<span data-testid=\"call-duration\">{`(${duration})`}</span>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-1\">\r\n                {sentiment && <Sentiment sentiment={sentiment} className=\"mr-1 w-5\" />}\r\n                <span className=\"flex items-center\">\r\n                    <span className=\"aria-description\">\r\n                        {t.ACTIVITY_HISTORY.call_message_created_time_aria()}\r\n                    </span>\r\n                    <span data-testid=\"call-start-time\" className=\"caption-s text-neutral-fade\">{createdTime}</span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport type {ExternalChatMessageSentiment} from '@bpinc/ad-transport-types'\r\nimport {formatDate} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport {CallMessageRecording} from './CallMessageRecording'\r\nimport {EmptyCallMessage} from './EmptyCallMessage'\r\n\r\n\r\nexport interface CallMessageProps {\r\n    direction?: string\r\n    duration?: string\r\n    timestamp?: number\r\n    sentiment?: ExternalChatMessageSentiment\r\n    hasVoiceRecording?: boolean\r\n    recordingLink?: string\r\n    isMissedCall: boolean\r\n    voiceTranscript?: HistoryVoiceTranscriptMessage[]\r\n}\r\n\r\nexport const CallMessageContent: React.FC<CallMessageProps> = ({\r\n    direction,\r\n    duration,\r\n    timestamp,\r\n    hasVoiceRecording,\r\n    recordingLink,\r\n    isMissedCall,\r\n    voiceTranscript,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const hasVoiceTranscript = !!voiceTranscript?.length\r\n    const createdTime = formatDate(timestamp, 'LT')\r\n\r\n    const ariaDirection =\r\n        direction === 'incoming'\r\n            ? t.ACTIVITY_HISTORY.call_message_incoming_aria_label()\r\n            : t.ACTIVITY_HISTORY.call_message_outgoing_aria_label()\r\n\r\n    const ariaLabel = [\r\n        ariaDirection,\r\n        t.ACTIVITY_HISTORY.call_message_created_time_aria() + createdTime,\r\n        t.ACTIVITY_HISTORY.call_message_duration_aria() + duration,\r\n    ].join('; ')\r\n\r\n    const title = isMissedCall\r\n        ? t.ACTIVITY_HISTORY.call_message_missed()\r\n        : direction === 'incoming'\r\n            ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n            : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n    if (!hasVoiceRecording || !recordingLink) {\r\n        return (\r\n            <EmptyCallMessage\r\n                timestamp={timestamp}\r\n                duration={duration}\r\n                isMissedCall={isMissedCall}\r\n                title={title}\r\n                createdTime={createdTime}\r\n                ariaLabel={ariaLabel}\r\n                direction={direction}\r\n                {...props}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CallMessageRecording\r\n            hasVoiceRecording={hasVoiceRecording}\r\n            recordingLink={recordingLink}\r\n            voiceTranscript={voiceTranscript}\r\n            timestamp={timestamp}\r\n            duration={duration}\r\n            isMissedCall={isMissedCall}\r\n            title={title}\r\n            createdTime={createdTime}\r\n            hasVoiceTranscript={hasVoiceTranscript}\r\n            ariaLabel={ariaLabel}\r\n            direction={direction}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\n\r\n\r\ntype EmailMessageProps = {\r\n    caseId: string\r\n    caseNumber: string\r\n    caseTitle: string\r\n}\r\n\r\nexport const EmailMessage: React.FC<EmailMessageProps> = ({caseId, caseNumber, caseTitle}) => {\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const handleClick = useCallback(function handleClickCallback(evt: MouseEvent) {\r\n        evt.preventDefault()\r\n\r\n        setActivePage({\r\n            name: AppRoutes.Cases,\r\n            params: {\r\n                id: caseId,\r\n            },\r\n        })\r\n    }, [setActivePage, caseId])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SmIcon name=\"envelope\" color=\"grey\" />\r\n            </div>\r\n            <div>\r\n                <a href=\"#\" onClick={handleClick}>\r\n                    {`#${caseNumber}`}\r\n                </a>\r\n                {' '}\r\n                <span>\r\n                    {caseTitle}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"remoteAssistMessage\":\"agent_RemoteAssistMessage_remoteAssistMessage_GuCjK\",\"remoteAssistMessageHeader\":\"agent_RemoteAssistMessage_remoteAssistMessageHeader_1NdA1\",\"remoteAssistMessageIcon\":\"agent_RemoteAssistMessage_remoteAssistMessageIcon_wYT2a\",\"remoteAssistMessageContent\":\"agent_RemoteAssistMessage_remoteAssistMessageContent_BkraK\",\"remoteAssistContentRow\":\"agent_RemoteAssistMessage_remoteAssistContentRow_gezxx\"};","import React from 'react'\r\n\r\nimport {getMomentUTC} from '@bpinc/lib-helpers'\r\nimport {IconRemoteAssistSession} from '@bpinc/lib-icons'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from './RemoteAssistMessage.module.less'\r\n\r\n\r\ntype RemoteAssistMessageProps = {\r\n    duration: number\r\n    privateIp?: string\r\n    publicIp?: string\r\n    osVersion?: string\r\n}\r\n\r\nexport const RemoteAssistMessage: React.FC<RemoteAssistMessageProps> = props => {\r\n    const {duration, privateIp, publicIp, osVersion} = props\r\n    const {t} = useLocalizationState()\r\n\r\n    const durationValue = getMomentUTC(duration * 1000, 'm:s')\r\n    const privateIpValue = privateIp || t.ACTIVITY_HISTORY.remote_assist_empty_private_ip_display_value()\r\n    const publicIpValue = publicIp || t.ACTIVITY_HISTORY.remote_assist_empty_public_ip_display_value()\r\n    const osVersionValue = osVersion || t.ACTIVITY_HISTORY.remote_assist_empty_os_version_display_value()\r\n\r\n    return (\r\n        <div className={styles.remoteAssistMessage}>\r\n            <div className={styles.remoteAssistMessageHeader}>\r\n                <IconRemoteAssistSession\r\n                    className={styles.remoteAssistMessageIcon}\r\n                    aria-hidden\r\n                />\r\n                <span>{t.ACTIVITY_HISTORY.remote_assist_title()}</span>\r\n            </div>\r\n            <div className={styles.remoteAssistMessageContent}>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_duration_label()}</span>\r\n                    <span>{durationValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_os_version_label()}</span>\r\n                    <span>{osVersionValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_private_ip_label()}</span>\r\n                    <span>{privateIpValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_public_ip_label()}</span>\r\n                    <span>{publicIpValue}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {omit, pickBy} from 'lodash-es'\r\n\r\nimport type {PartyType} from '@bpinc/ad-activities-state-types'\r\nimport type {\r\n    ActivityHistoryItem,\r\n    Email,\r\n    FileMessage,\r\n    RemoteAssistSession,\r\n    TextMessageEvent,\r\n    TextMessageFromContact,\r\n    TextMessageType,\r\n    VoiceCallFromContact,\r\n    VoiceTranscriptItem,\r\n} from '@bpinc/ad-contacts-state-types'\r\nimport {\r\n    isCall,\r\n    isEmail,\r\n    isFile,\r\n    isMessage,\r\n    isRemoteAssistSession,\r\n    isTranscriptMessage,\r\n} from '@bpinc/ad-contacts-state-types'\r\nimport {formatCallDuration, getSentimentFrom} from '@bpinc/ad-formatting-helpers'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    HistoryCallMessage,\r\n    HistoryChatMessage,\r\n    HistoryEmailMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n    HistoryRemoteAssistMessage,\r\n    HistoryVoiceTranscriptMessage,\r\n} from '../../../../types'\r\nimport {CallMessageContent} from './CallMessageContent'\r\nimport {EmailMessage} from './EmailMessage'\r\nimport {RemoteAssistMessage} from './RemoteAssistMessage'\r\n\r\n\r\nconst fulfillMessages = (messages: PartyType[] = []): PartyType[] => {\r\n    const parties: Record<string, Partial<PartyType>> = {}\r\n    const notUndefined = (v: unknown) => v !== undefined\r\n\r\n    messages.forEach(m => {\r\n        const id = m.partyId\r\n        const partyData: Partial<PartyType> = {\r\n            partyId: id,\r\n            contactId: m.contactId,\r\n            firstName: m.firstName,\r\n            lastName: m.lastName,\r\n            phone: m.phone,\r\n            userId: m.userId,\r\n        }\r\n        parties[id] = {\r\n            ...parties[id],\r\n            ...pickBy(partyData, notUndefined),\r\n        }\r\n    })\r\n\r\n    return messages\r\n        .filter(({event}) => !['party_changed', 'party_navigation'].includes(event ?? ''))\r\n        .map(m => ({...m, ...parties[m.partyId]}))\r\n}\r\n\r\n\r\ninterface ReducerParams {\r\n    selfUserId: string | undefined\r\n}\r\n\r\nexport function activityHistoryToHistoryMessageReducer({\r\n    selfUserId,\r\n}: ReducerParams) {\r\n    return function historyMessagesReducer(messages: HistoryMessage[], message: ActivityHistoryItem): HistoryMessage[] {\r\n        const isSelf = message.userId === selfUserId\r\n\r\n        if (isCall(message)) {\r\n            messages.push(getHistoryCallMessage(message, selfUserId))\r\n        }\r\n\r\n        if (isMessage(message)) {\r\n            messages.push(getHistoryChatMessage(message, isSelf))\r\n        }\r\n\r\n        if (isFile(message)) {\r\n            messages.push(getHistoryFileMessage(message, isSelf))\r\n        }\r\n\r\n        if (isEmail(message)) {\r\n            messages.push(getHistoryEmailMessage(message, isSelf))\r\n        }\r\n\r\n        if (isRemoteAssistSession(message)) {\r\n            messages.push(getHistoryRemoteAssistMessage(message, selfUserId))\r\n        }\r\n\r\n        return messages\r\n    }\r\n}\r\n\r\nexport function mapActivityToActivityHistoryItems(data?: PartyType[]): ActivityHistoryItem[] | undefined {\r\n    if (!data) {\r\n        return undefined\r\n    }\r\n    return fulfillMessages(data).reduce<ActivityHistoryItem[]>((messages, activityItem) => {\r\n        if (activityItem.type && activityItem.event) {\r\n            messages.push({\r\n                ...activityItem,\r\n                mediaType: 'CHAT',\r\n                nickName: '',\r\n                createdTime: activityItem.timestamp,\r\n                phone: activityItem.phone ?? '',\r\n                type: activityItem.type as TextMessageType,\r\n                event: activityItem.event as TextMessageEvent,\r\n                msg: activityItem.msg ?? '',\r\n                channel: activityItem.channel as ExternalChatChannelType | undefined,\r\n                firstName: activityItem.firstName ?? '',\r\n                lastName: activityItem.lastName ?? '',\r\n            })\r\n        }\r\n        return messages\r\n    }, [])\r\n}\r\n\r\nfunction getHistoryCallMessage(call: VoiceCallFromContact, selfUserId?: string): HistoryCallMessage {\r\n    const direction = call.direction === 'INBOUND' ? 'incoming' : 'outgoing'\r\n    const duration = formatCallDuration(call.counterpartDuration)\r\n\r\n    const selfUser = call.users?.find(user => user.userId === selfUserId)\r\n    const isSelf = selfUser && call.users && call.users.length === 1\r\n    const wasMissedByParty = !!selfUser?.partyFailureCause && selfUser?.partyFailureCause !== 'OTHER'\r\n\r\n    // call can not be missed if there were no self party (that is, other agent's calls are never shown as missed)\r\n    const isMissedCall = !!selfUser && (call.duration === 0 || wasMissedByParty) && call.direction === 'INBOUND'\r\n\r\n    const voiceTranscript = call.transcript?.reduce<HistoryVoiceTranscriptMessage[]>((total, msg) => {\r\n        if (isTranscriptMessage(msg)) {\r\n            total.push(getHistoryVoiceTranscriptMessage(msg, selfUserId))\r\n        }\r\n        return total\r\n    }, [])\r\n\r\n    return {\r\n        direction,\r\n        users: call.users,\r\n        timestamp: call.createdTime,\r\n        mediaType: 'VOICE',\r\n        globalInteractionId: call.globalInteractionId,\r\n        msg: (\r\n            <CallMessageContent\r\n                direction={direction}\r\n                timestamp={call.createdTime}\r\n                sentiment={call.sentiment}\r\n                duration={duration}\r\n                isMissedCall={isMissedCall}\r\n                hasVoiceRecording={call.hasVoiceRecording}\r\n                recordingLink={call.recordingLink}\r\n                voiceTranscript={voiceTranscript}\r\n            />\r\n        ),\r\n        msgId: `${call.createdTime}`,\r\n        isSelf,\r\n        isMissedCall,\r\n        hasVoiceRecording: call.hasVoiceRecording,\r\n        duration,\r\n        firstName: undefined,\r\n        lastName: undefined,\r\n    }\r\n}\r\n\r\nfunction getHistoryChatMessage(msg: TextMessageFromContact, isSelf?: boolean): HistoryChatMessage {\r\n    return {\r\n        mediaType: 'CHAT',\r\n        msg: msg.msg,\r\n        msgId: msg.msgId || String(msg.timestamp),\r\n        timestamp: msg.timestamp,\r\n        userId: msg.userId,\r\n        contactId: msg.contactId,\r\n        direction: msg.type === 'external' ? 'incoming' : 'outgoing',\r\n        isSelf,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n        channel: msg.channel,\r\n        displayType: msg.type === 'scenario' ? 'scenario' : 'message',\r\n    }\r\n}\r\n\r\nfunction getHistoryEmailMessage(msg: Email, isSelf?: boolean): HistoryEmailMessage {\r\n    const direction = msg.direction === 'INBOUND' ? 'incoming' : 'outgoing'\r\n\r\n    return {\r\n        msgId: msg.caseId,\r\n        direction,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        timestamp: msg.createdTime,\r\n        mediaType: 'EMAIL',\r\n        isSelf,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n        msg: <EmailMessage caseId={msg.caseId} caseNumber={msg.caseNumber} caseTitle={msg.caseTitle} />,\r\n    }\r\n}\r\n\r\nfunction getHistoryRemoteAssistMessage(msg: RemoteAssistSession, selfUserId?: string): HistoryRemoteAssistMessage {\r\n    const selfAgent = msg.users?.find(user => !!selfUserId && user.userId === selfUserId)\r\n    const lastAgent = msg.users?.toSorted((user1, user2) => user2.startTime - user1.startTime)?.[0]\r\n    const agent = selfAgent || lastAgent\r\n\r\n    return {\r\n        mediaType: 'REMOTE_ASSIST',\r\n        direction: 'outgoing',\r\n        msgId: `${msg.createdTime}`,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        timestamp: msg.createdTime,\r\n        isSelf: !!selfUserId && agent?.userId === selfUserId,\r\n        firstName: agent?.firstName,\r\n        lastName: agent?.lastName,\r\n        userId: agent?.userId,\r\n        msg: (\r\n            <RemoteAssistMessage\r\n                duration={msg.counterpartDuration}\r\n                privateIp={msg.privateIp}\r\n                publicIp={msg.publicIp}\r\n                osVersion={msg.osVersion}\r\n            />\r\n        ),\r\n    }\r\n}\r\n\r\nfunction getHistoryFileMessage(msg: FileMessage, isSelf?: boolean): HistoryFileMessage {\r\n    return {\r\n        globalInteractionId: msg.globalInteractionId,\r\n        direction: msg.userId ? 'outgoing' : 'incoming',\r\n        msgId: msg.fileId || uuid(),\r\n        displayType: 'file',\r\n        fileId: msg.fileId,\r\n        fileType: msg.fileType,\r\n        fileName: msg.fileName,\r\n        timestamp: msg && msg.timestamp ? Number(msg.timestamp) : Date.now(),\r\n        mediaType: 'CHAT',\r\n        isSelf,\r\n        msg: msg.text,\r\n        refMsgId: msg.refMsgId,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n    }\r\n}\r\n\r\nfunction getHistoryVoiceTranscriptMessage(\r\n    msg: VoiceTranscriptItem,\r\n    selfUserId?: string,\r\n): HistoryVoiceTranscriptMessage {\r\n    const isSelf = msg?.userId === selfUserId\r\n\r\n    return {\r\n        ...omit(getHistoryChatMessage(msg as unknown as TextMessageFromContact, isSelf), 'channel'),\r\n        confidence: msg.confidence,\r\n        endTimestamp: msg.endTimestamp,\r\n        mediaType: 'VOICE_TRANSCRIPT',\r\n        sentiment: msg.sentimentScore !== undefined ? getSentimentFrom(msg.sentimentScore) : undefined,\r\n        type: undefined,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useActivitiesState} from '@bpinc/ad-activities-state-context'\r\nimport type {PartyType} from '@bpinc/ad-activities-state-types'\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {activityHistoryToHistoryMessageReducer, mapActivityToActivityHistoryItems} from './helpers'\r\n\r\n\r\nexport function useNormalizedHistoryMessages(\r\n    contactId: string,\r\n    itemId: string,\r\n) {\r\n    const activityHistory = useContactsState('activityHistory')\r\n\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    const activities = useActivitiesState('activities')\r\n\r\n    const previousActivity = useInteractionProp(itemId, i => i?.previousActivity)\r\n    const previousActivityData = previousActivity ? activities[previousActivity.globalInteractionId] : undefined\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedHistoryMessages() {\r\n            const activityHistoryItem = contactId ? activityHistory[contactId] : undefined\r\n\r\n            const activityHistoryMessages = activityHistoryItem?.messages\r\n            const previousActivityMessages = mapActivityToActivityHistoryItems(\r\n                previousActivityData?.data?.reduce<PartyType[]>((all, next) => {\r\n                    all.push(...next.messages)\r\n                    return all\r\n                }, []),\r\n            )\r\n            const messages = activityHistoryMessages || previousActivityMessages || []\r\n\r\n            return messages.reduce(activityHistoryToHistoryMessageReducer({selfUserId}), [])\r\n        },\r\n        [contactId, activityHistory, previousActivityData?.data, selfUserId],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {orderBy} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getExternalChatMessageDisplayType} from '../../../../helpers'\r\nimport {useKeyDatesInserter} from '../../../../hooks/useKeyDatesInserter'\r\nimport type {ExternalChatMessage, ExternalChatMessageWithDate} from '../../../../types'\r\nimport {\r\n    isCallOrVoiceTranscript,\r\n    isExternalChatMessageDate,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n    isVoiceTranscriptSuggestion,\r\n} from '../../../../types'\r\nimport {useActivitiesMessagesTillCreatedTime} from './useActivitiesMessagesTillCreatedTime'\r\nimport {useNormalizedChatMessages} from './useNormalizedChatMessages'\r\nimport {useNormalizedHistoryMessages} from './useNormalizedHistoryMessages'\r\n\r\n\r\nconst defaultBotSuggestions: VoiceTranscriptSuggestion[] = []\r\n\r\nexport function useNormalizedMessagesWithDates(\r\n    type: ChatType,\r\n    contactId: string,\r\n    itemId: string,\r\n    botSuggestions: VoiceTranscriptSuggestion[] = defaultBotSuggestions,\r\n) {\r\n    const typeToMediaFilter = {\r\n        messages: 'chat',\r\n        calls: 'voice',\r\n        all: 'all',\r\n        transcript: 'all', //useNormalizedMessagesWithDates isn't called for transcript tab\r\n    } as const\r\n\r\n    const insertKeyDates = useKeyDatesInserter()\r\n    const normalizedHistoryMessages = useNormalizedHistoryMessages(contactId, itemId)\r\n    const {normalizedChatMessages} = useNormalizedChatMessages(itemId)\r\n    const activityHistory = useContactsState('activityHistory')\r\n    const latestCreatedTime = activityHistory[contactId]?.activityCreatedTimeByMedia?.[typeToMediaFilter[type]]\r\n\r\n    const activitiesMessages = useActivitiesMessagesTillCreatedTime(contactId, latestCreatedTime)\r\n\r\n    return useMemo(\r\n        function memoizeMessagesWithDates() {\r\n            const allMessages = orderBy(\r\n                [...normalizedHistoryMessages, ...botSuggestions, ...activitiesMessages, ...normalizedChatMessages],\r\n                'timestamp',\r\n            )\r\n\r\n            const filteredByTypeMessages = filterMessagesByTypeAndStartTime(allMessages, type, latestCreatedTime)\r\n\r\n            return {\r\n                messagesWithDates: insertKeyDates(filteredByTypeMessages, getTimestamp, additionalConditions),\r\n            }\r\n        },\r\n        [\r\n            botSuggestions,\r\n            normalizedHistoryMessages,\r\n            activitiesMessages,\r\n            normalizedChatMessages,\r\n            type,\r\n            latestCreatedTime,\r\n            insertKeyDates,\r\n        ],\r\n    )\r\n}\r\n\r\nfunction filterMessagesByTypeAndStartTime<T extends Exclude<ExternalChatMessage | VoiceTranscriptSuggestion, string>[]>(\r\n    messages: T,\r\n    type: ChatType,\r\n    latestCreatedTime: number | undefined,\r\n) {\r\n    return messages.reduce(filterReducer(type, latestCreatedTime), [])\r\n}\r\n\r\nfunction getTimestamp<T extends {timestamp: number}>(message: T): number {\r\n    return message.timestamp\r\n}\r\n\r\nfunction isChatMessage(value: {timestamp: number}): value is ChatMessage {\r\n    return 'displayName' in value && 'itemId' in value && 'partyId' in value\r\n}\r\n\r\nfunction additionalConditions<T extends {timestamp: number}>(message: T): boolean {\r\n    return isChatMessage(message) ? message.displayType !== 'navigation' : true\r\n}\r\n\r\nfunction filterReducer<T extends ExternalChatMessage | VoiceTranscriptSuggestion>(\r\n    type: ChatType, latestCreatedTime: number | undefined,\r\n) {\r\n    function allowMessage(messages: T[], message: T, predicate?: (msg: T) => boolean) {\r\n        if (\r\n            (!latestCreatedTime || latestCreatedTime <= message.timestamp) &&\r\n            (isVoiceTranscriptSuggestion(message) || !predicate || predicate(message))\r\n        ) {\r\n            messages.push(message)\r\n        }\r\n\r\n        return messages\r\n    }\r\n\r\n    function cleanKeyDates<N extends ExternalChatMessageWithDate | VoiceTranscriptSuggestion>(messages: N[], message: N) {\r\n        const lastIndex = messages.length - 1\r\n        if (isExternalChatMessageDate(messages[lastIndex])) {\r\n            messages.splice(lastIndex, 1, message)\r\n        } else {\r\n            messages.push(message)\r\n        }\r\n\r\n        return messages\r\n    }\r\n\r\n    return function checkByTypeReducer(messages: T[], message: T) {\r\n        if (isExternalChatMessageDate(message)) {\r\n            return cleanKeyDates(messages, message)\r\n        }\r\n        if (type === 'messages') {\r\n            return allowMessage(messages, message, isMessage)\r\n        }\r\n        if (type === 'calls') {\r\n            return allowMessage(messages, message, isCallOrVoiceTranscript)\r\n        }\r\n\r\n        return allowMessage(messages, message)\r\n    }\r\n}\r\n\r\n//**Private Functions***************************************\r\n\r\nfunction isMessage(message: ExternalChatMessageWithDate | VoiceTranscriptSuggestion): boolean {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        return false\r\n    }\r\n\r\n    if (isExternalChatMessageDate(message)) {\r\n        return true\r\n    }\r\n\r\n\r\n    const mediaType = isHistoryMessage(message) ? message.mediaType : undefined\r\n    if (mediaType === 'VOICE_TRANSCRIPT') {\r\n        return false\r\n    }\r\n\r\n    const displayType = getExternalChatMessageDisplayType(message)\r\n    return (\r\n        displayType === 'message' ||\r\n        displayType === 'file' ||\r\n        displayType === 'system' ||\r\n        mediaType === 'CHAT'\r\n    )\r\n}\r\n\r\n","import {useCallback, useRef} from 'react'\r\n\r\nimport {useActivityHistoryByContactId} from '@bpinc/ad-contacts-state-context'\r\nimport {chatTypeToMedia} from '@bpinc/ad-formatting-helpers'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\n\r\nconst MAX_ERRORS_NUMBER_IN_A_ROW = 5\r\n\r\nexport function useMessagesLoader(\r\n    itemId: string,\r\n    contactId: string,\r\n    type: ChatType,\r\n) {\r\n    const fetchMore = useFetchMoreExternalMessages(itemId, contactId, type)\r\n    const hasActiveRequest = useRef(false)\r\n    const errorsCountRef = useRef(0)\r\n\r\n    return useCallback(() => {\r\n        const fetchData = () => {\r\n            if (\r\n                hasActiveRequest.current ||\r\n                errorsCountRef.current > MAX_ERRORS_NUMBER_IN_A_ROW\r\n            ) {\r\n                return Promise.resolve(false)\r\n            }\r\n            hasActiveRequest.current = true\r\n\r\n            return fetchMore()\r\n                .then(r => {\r\n                    errorsCountRef.current = 0\r\n                    hasActiveRequest.current = false\r\n                    return r\r\n                }).catch(err => {\r\n                    errorsCountRef.current += 1\r\n                    hasActiveRequest.current = false\r\n                    console.error(err || 'Error while trying load messages again until scroll')\r\n                    fetchData()\r\n                })\r\n        }\r\n\r\n        fetchData()\r\n    }, [fetchMore])\r\n}\r\n\r\nfunction useFetchMoreExternalMessages(itemId: string, contactId: string, type: ChatType) {\r\n    const contactActivityHistoryRef = useAsRef(useActivityHistoryByContactId(contactId))\r\n    const getMessagesRef = useAsRef(useContactActivityHistory().getMessages)\r\n\r\n    return useCallback(\r\n        function fetchMoreExternalMessages() {\r\n            const {isLoading, reachedLimitByMedia} = contactActivityHistoryRef.current || {}\r\n            if (isLoading || type === 'transcript' || reachedLimitByMedia?.[chatTypeToMedia[type]] || !contactId) {\r\n                return Promise.resolve(false)\r\n            }\r\n\r\n            return getMessagesRef.current({contactId, type})\r\n                .then(() => true)\r\n                .catch(err => console.error(err || 'Error while trying loadMessages when top is reached'))\r\n        },\r\n        [contactActivityHistoryRef, contactId, getMessagesRef, type],\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"noMessages\":\"agent_NoMessages_noMessages_UX4AP\",\"noRecent\":\"agent_NoMessages_noRecent_7ixir\",\"searchForOlder\":\"agent_NoMessages_searchForOlder_QGkjJ\"};","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useExternalActivityHistoryLoaded} from './useExternalActivityHistoryLoaded'\r\n\r\nimport styles from './NoMessages.module.less'\r\n\r\n\r\ninterface NoMessagesProps {\r\n    type: ChatType\r\n    contactId: string\r\n}\r\n\r\nexport const NoMessages = ({type, contactId}: NoMessagesProps) => {\r\n    const {isLoading: activityHistoryIsLoading, getMessages} = useContactActivityHistory()\r\n    const {t} = useLocalizationState()\r\n\r\n    const allActivityHistoryLoaded = useExternalActivityHistoryLoaded(contactId)\r\n\r\n    const searchForOlder = useCallback(\r\n        function searchForOlderCallback() {\r\n            getMessages({type, contactId})\r\n        },\r\n        [contactId, getMessages, type],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {!activityHistoryIsLoading && allActivityHistoryLoaded ? (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_found(type)}</p>\r\n                </div>\r\n            ) : (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_while_loading(type)}</p>\r\n                    <Button className={styles.searchForOlder} onClick={searchForOlder}>\r\n                        {t.INTERNAL_CHAT.chat_history_search_for_older(type)}\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\n\r\n\r\nexport function useExternalActivityHistoryLoaded(contactId: string) {\r\n    const activityHistory = useContactsState('activityHistory')\r\n\r\n    return useMemo(\r\n        () => get(activityHistory[contactId], 'reachedLimit', true),\r\n        [activityHistory, contactId],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\n\r\nimport {NoMessages} from './NoMessages'\r\n\r\n\r\ntype NoMessagesPlaceholderProps = {\r\n    contactId: string\r\n    type: ChatType\r\n}\r\n\r\nexport const NoMessagesPlaceholder: React.FC<NoMessagesPlaceholderProps> = ({contactId, type}) => {\r\n\r\n    if (type !== 'messages' && type !== 'calls') {\r\n        return null\r\n    }\r\n\r\n    return <NoMessages type={type} contactId={contactId} />\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageWrapper\":\"agent_Chat_messageWrapper_drgLf\",\"messageTopInfo\":\"agent_Chat_messageTopInfo_VoA3v\",\"incoming\":\"agent_Chat_incoming_6DHeo\",\"messageBlock\":\"agent_Chat_messageBlock_i7M0B\",\"outgoing\":\"agent_Chat_outgoing_JD3jd\",\"avatar\":\"agent_Chat_avatar_mUd4N\",\"placementTop\":\"agent_Chat_placementTop_Awuqp\",\"remoteAssistMessageAvatar\":\"agent_Chat_remoteAssistMessageAvatar_FEd8Z\",\"message\":\"agent_Chat_message_x5tfb\",\"urgent\":\"agent_Chat_urgent_KfI8l\",\"messageContent\":\"agent_Chat_messageContent_nw7Cp\",\"messageContentHtml\":\"agent_Chat_messageContentHtml_AuPlx\",\"voice\":\"agent_Chat_voice_GZnDG\",\"voiceRecording\":\"agent_Chat_voiceRecording_crXBM\",\"emi\":\"agent_Chat_emi_LuUC3\",\"errorMessageContent\":\"agent_Chat_errorMessageContent_4XIXs\",\"messageTopInfoGap\":\"agent_Chat_messageTopInfoGap_jZaVp\",\"transcriptSuggestionAvatar\":\"agent_Chat_transcriptSuggestionAvatar_FScZp\",\"timeChannel\":\"agent_Chat_timeChannel_N1P8J\",\"channelIcon\":\"agent_Chat_channelIcon_nzkb9\",\"selectionPopupOption\":\"agent_Chat_selectionPopupOption_UTtPT\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useGetUserPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface ExternalMessageAvatar {\r\n    userId?: string\r\n    displayName?: string\r\n    isSelf?: boolean\r\n    isScenarioAvatar?: boolean\r\n    showUserAvatar?: boolean\r\n    className?: string\r\n    isConference?: boolean\r\n}\r\n\r\nconst avatarClassName = 'm-0 mr-1.5'\r\n\r\nexport const MessageAvatar: React.FC<ExternalMessageAvatar> = ({\r\n    userId,\r\n    displayName,\r\n    isSelf,\r\n    isScenarioAvatar,\r\n    className,\r\n    isConference,\r\n    showUserAvatar = true,\r\n}) => {\r\n    const getUserPictureUrl = useGetUserPictureUrl()\r\n\r\n    const avatarUrl = useMemo(() => {\r\n        if (isConference) {\r\n            return undefined\r\n        }\r\n        return !isSelf && userId ? getUserPictureUrl(userId) : ''\r\n    }, [getUserPictureUrl, isConference, isSelf, userId])\r\n\r\n    const [firstName, lastName] = useMemo(() => {\r\n        return displayName ? displayName.split(' ') : ['', '']\r\n    }, [displayName])\r\n\r\n    if (isScenarioAvatar) {\r\n        return (\r\n            <Avatar\r\n                className={tcn(className, styles.avatar, avatarClassName)}\r\n                type=\"scenario\"\r\n                size=\"28\"\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showUserAvatar && (\r\n                <Avatar\r\n                    className={tcn(className, styles.avatar, avatarClassName)}\r\n                    url={avatarUrl}\r\n                    size=\"28\"\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    type={isConference ? 'conference' : 'contact'}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface Props {\r\n    className?: string\r\n    displayName?: string\r\n    isError?: boolean\r\n    isOutgoing?: boolean\r\n    messageId?: string\r\n    sendTime?: number\r\n    showName?: boolean\r\n    showTime?: boolean\r\n}\r\n\r\nexport const MessageContent: React.FC<React.PropsWithChildren<Props>> = props => {\r\n    const {children, className, isError, messageId} = props\r\n\r\n    const combinedClassName = tcn(className, {\r\n        [styles.errorMessageContent]: isError,\r\n    })\r\n\r\n    return (\r\n        <SelectionItem\r\n            data-message-id-selection={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            className={combinedClassName}\r\n            itemId={messageId}\r\n        >\r\n            {children}\r\n        </SelectionItem>\r\n    )\r\n}\r\n","import {formatDate} from '@bpinc/lib-helpers'\r\nimport {IconRobot} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface WithTopInfoProps {\r\n    displayName?: string\r\n    isOutgoing?: boolean\r\n    isDelivered?: boolean\r\n    isRead?: boolean\r\n    isSystemMessage?: boolean\r\n    showTime?: boolean\r\n    sendTime?: number\r\n    showName?: boolean\r\n}\r\n\r\nexport const WithTopInfo: React.FC<React.PropsWithChildren<WithTopInfoProps>> = props => {\r\n    const {\r\n        children,\r\n        displayName,\r\n        isOutgoing,\r\n        isSystemMessage,\r\n        sendTime,\r\n        showTime,\r\n        showName,\r\n    } = props\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const siblingClassName = tcn('text-neutral-fade [&:not(:last-child)]:mr-2')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-between pb-1 text-sm leading-[16px]\">\r\n                <div className={tcn('flex items-center justify-start', {'w-full justify-end': isOutgoing})}>\r\n                    {isSystemMessage && <IconRobot className=\"mr-2\" />}\r\n                    {(showName || isSystemMessage) && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"party-display-name\"\r\n                        >\r\n                            {isSystemMessage ? t.EXTERNAL_CHAT.system_message() : displayName}\r\n                        </span>\r\n                    )}\r\n                    {showTime && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"message-time\"\r\n                        >\r\n                            {formatDate(sendTime, 'h:mm A')}\r\n                        </span>\r\n                    )}\r\n                    {/* @TODO - implement isDelivered && isRead */}\r\n                    {/* {isOutgoing && isDelivered && !isRead && <IconDelivered className=\"[&:not(:last-child)]:mr-2\" />} */}\r\n                    {/* {isOutgoing && isRead && <IconRead className=\"[&:not(:last-child)]:mr-2 [&_path]:fill-primary-600\" />} */}\r\n                </div>\r\n            </div>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {isScenarioMessage} from '@bpinc/ad-interaction-state-methods'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {\r\n    getExternalChatFileData,\r\n    getExternalChatMessageDisplayName,\r\n    getExternalChatMessageDisplayType,\r\n    getMessageId,\r\n    isErrorExternalChatMessage,\r\n} from '../../../../helpers'\r\nimport type {ExternalChatMessage} from '../../../../types'\r\nimport {isActivityMessageGroup, isChatMessage, isHistoryCallMessage, isHistoryMessage} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {MessageAvatar} from './MessageAvatar'\r\nimport {MessageContent} from './MessageContent'\r\nimport {WithTopInfo} from './WithTopInfo'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ntype WithOptionalNameAndAvatarProps = {\r\n    className?: string\r\n    message: ExternalChatMessage\r\n    children: ReactNode\r\n    isFullWidth?: boolean\r\n    messageClassName?: string\r\n    withoutBorder?: boolean\r\n}\r\n\r\nexport const WithOptionalNameAndAvatar: React.FC<WithOptionalNameAndAvatarProps> = React.memo(\r\n    function WithOptionalNameAndAvatar({className, children, message, isFullWidth, messageClassName, withoutBorder}) {\r\n        const {formatFullName} = useFormatting()\r\n        const {userId, isSelf, timestamp} = message\r\n        const id = getMessageId(message)\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        const isChat = isChatMessage(message)\r\n        const isLink = isChat ? !!message.page : false\r\n        const source = isChat ? message.source : undefined\r\n\r\n        const isActivityGroup = isActivityMessageGroup(message)\r\n        const isNotes = isActivityGroup ? !!message.notes : false\r\n        const isDisposition = isActivityGroup ? !!message.disposition : false\r\n\r\n        const isHistory = isHistoryMessage(message)\r\n        const direction = isHistory ? message.direction : undefined\r\n        const mediaType = isHistory ? message.mediaType : undefined\r\n        const isEmail = mediaType === 'EMAIL' && !isActivityGroup\r\n        const isCall = mediaType === 'VOICE' && !isActivityGroup\r\n\r\n        const callUsers = isHistoryCallMessage(message) ? message.users : undefined\r\n\r\n        const isError = isErrorExternalChatMessage(message)\r\n        const isFile = !!getExternalChatFileData(message)\r\n\r\n        const isTextMessage = !isActivityGroup && !isEmail && !isFile && !isCall\r\n        const isRemoteAssistSession = mediaType === 'REMOTE_ASSIST'\r\n        const isCallConference = callUsers && callUsers.length > 1\r\n\r\n        const isOutgoing =\r\n            direction === 'outgoing' ||\r\n            source === 'agent' ||\r\n            source === 'system' ||\r\n            displayType === 'navigation' ||\r\n            displayType === 'activityGroup' ||\r\n            isError ||\r\n            isDisposition ||\r\n            isSelf && !isCall\r\n\r\n        const isCustomMessage = displayType === 'activityGroup' || mediaType === 'REMOTE_ASSIST'\r\n\r\n        const fullName = getExternalChatMessageDisplayName(message, formatFullName)\r\n\r\n        const isSystemMessage = isOutgoing && (!isSelf && !message?.userId)\r\n\r\n        const showName = Boolean(isSystemMessage || (isCall && !isOutgoing && !isSelf) || (!isOutgoing && fullName))\r\n\r\n        const isScenario = isScenarioMessage(displayType)\r\n\r\n        const finalDirection = isOutgoing ? 'outgoing' : 'incoming'\r\n\r\n        const finalUserId = callUsers?.[0].userId ?? userId\r\n\r\n        const messageItemClassName = tcn(\r\n            styles.messageBlock,\r\n            styles[finalDirection],\r\n        )\r\n        return (\r\n            <div\r\n                className={messageItemClassName}\r\n                data-disposition={isDisposition || undefined}\r\n                data-email={isEmail || undefined}\r\n                data-error={isError || undefined}\r\n                data-file={isFile || undefined}\r\n                data-incoming={!isOutgoing || undefined}\r\n                data-testid=\"message-item\"\r\n                data-link={isLink || undefined}\r\n                data-notes={isNotes || undefined}\r\n                data-outgoing={isOutgoing || undefined}\r\n                data-remote-assist-session={isRemoteAssistSession || undefined}\r\n                data-text-message={isTextMessage || undefined}\r\n            >\r\n                <div className={tcn('z-0 flex max-w-[71%] flex-auto flex-col', {'w-full max-w-full': isFullWidth})}>\r\n                    <section className={tcn(styles.message, styles[finalDirection])}>\r\n                        {finalDirection === 'incoming' && !withoutBorder && (\r\n                            <MessageAvatar\r\n                                userId={finalUserId}\r\n                                isConference={isCallConference}\r\n                                displayName={fullName}\r\n                                isScenarioAvatar={isScenario}\r\n                                showUserAvatar\r\n                            />\r\n                        )}\r\n                        {isCustomMessage ? (\r\n                            children\r\n                        ) : (\r\n                            <MessageContent\r\n                                className={tcn('relative', {'w-full max-w-full': isFullWidth}, className)}\r\n                                isError={isError}\r\n                                messageId={id}\r\n                            >\r\n                                <WithHoverOverActions\r\n                                    messageId={id}\r\n                                    className={tcn(\r\n                                        `relative inline-block\r\n                                        whitespace-normal break-all rounded border p-2\r\n                                        border-on-secondary text-primary-on-primary before:absolute\r\n                                        before:-bottom-px before:z-[-1] before:h-0 before:w-0 before:rounded-b-[33%]\r\n                                        before:border-b-4 before:border-t-0\r\n                                        before:border-transparent before:border-b-secondary-100 before:content-[''] after:absolute\r\n                                        after:bottom-0 after:z-0 after:h-0 after:w-0 after:rounded-b-[33%] after:border-b-[9px]\r\n                                        after:border-t-0 after:border-transparent after:content-[''] hover:text-primary-on-primary`,\r\n                                        {\r\n                                            // we could use rounded-bl-md instead of rounded-bl-[8px],\r\n                                            // however we couldn't, the layout goes break down\r\n                                            [`rounded-bl-[8px] bg-secondary-50\r\n                                            before:left-[-5px] before:border-l-[9px] before:border-r-0\r\n                                            after:left-[-5px] after:border-l-[8px]\r\n                                            after:border-r-0 after:border-b-secondary-50`]: finalDirection === 'incoming',\r\n                                            [`rounded-br-[8px] bg-primary-background\r\n                                            before:right-[-5px] before:border-l-0 before:border-r-[9px]\r\n                                            after:right-[-5px] after:border-l-0\r\n                                            after:border-r-[8px] after:border-b-neutral-0`]: finalDirection === 'outgoing',\r\n                                        },\r\n                                        messageClassName,\r\n                                    )}\r\n                                >\r\n                                    {withoutBorder\r\n                                        ? children\r\n                                        : (\r\n                                            <WithTopInfo\r\n                                                displayName={fullName}\r\n                                                isOutgoing={isOutgoing}\r\n                                                isSystemMessage={isSystemMessage}\r\n                                                sendTime={timestamp}\r\n                                                showName={showName}\r\n                                                showTime={!isCall || isActivityGroup}\r\n                                            >\r\n                                                {children}\r\n                                            </WithTopInfo>\r\n                                        )\r\n                                    }\r\n                                </WithHoverOverActions>\r\n                            </MessageContent>\r\n                        )}\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n)\r\n","import {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nconst dotStyles = 'size-1.5 rounded bg-inverse-disabled inline-block'\r\n\r\nexport const DotsTransforming = () => {\r\n    return (\r\n        <>\r\n            <div className={tcn(dotStyles, 'ml-1.5 mr-1 animate-[dot-transform_1s_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'mr-1 animate-[dot-transform_1s_500ms_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'animate-[dot-transform_1s_1.5s_alternate_infinite]')} />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ExternalChatParty, TypingParty} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {WithOptionalNameAndAvatar} from '../../ExternalMessages/messages/WithOptionalNameAndAvatar'\r\nimport {DotsTransforming} from './DotsTransforming'\r\n\r\n\r\ninterface Props {\r\n    party: ExternalChatParty\r\n    typingParty: TypingParty\r\n}\r\n\r\nfunction removeLastThreeDots(str: string): string {\r\n    return str.replace(/\\.\\.\\.$/, '')\r\n}\r\nexport const TypingIndicator: React.FC<Props> = ({party, typingParty}) => {\r\n    const {first_name: firstName, last_name: lastName, user_id: userId} = party\r\n\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const name = formatFullName(firstName, lastName)\r\n    const displayName = name || t.EXTERNAL_CHAT.display_name_placeholder()\r\n\r\n    const content = removeLastThreeDots(\r\n        userId\r\n            ? t.EXTERNAL_CHAT.agent_is_typing(name)\r\n            : t.EXTERNAL_CHAT.party_is_typing(),\r\n    )\r\n\r\n    const timestamp = party?.timestamp\r\n        ? Number(party.timestamp)\r\n        : Date.now().valueOf()\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar\r\n            message={{\r\n                itemId: party.item_id,\r\n                partyId: party.party_id,\r\n                timestamp,\r\n                type: 'message',\r\n                displayType: 'message',\r\n                displayName,\r\n            }}\r\n        >\r\n            {content}\r\n            {' '}\r\n            {typingParty.message}\r\n            <DotsTransforming />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\nimport type {ListRange} from 'react-virtuoso'\r\n\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, getTypingParties} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatCommonMessagesType} from '../../../../types'\r\nimport {TypingIndicator} from './TypingIndicator'\r\n\r\n\r\ntype TypingPartiesProps = {\r\n    itemId: string\r\n    rangeRef: RefObject<ListRange | undefined>\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>\r\n}\r\n\r\nexport const TypingParties: React.FC<TypingPartiesProps> = ({itemId, rangeRef, messagesRef}) => {\r\n    const bottom = useRef<HTMLDivElement>(null)\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const typingParties = getTypingParties(chatData)\r\n    const hasTypingParties = typingParties.length > 0\r\n    const lastRenderedItem = rangeRef.current?.endIndex\r\n    const lastMessageIndex = messagesRef.current.length - 1\r\n    const isLastMessageRenderedRef = useAsRef(lastMessageIndex === lastRenderedItem)\r\n\r\n    useEffect(() => {\r\n        if (!hasTypingParties) {\r\n            return\r\n        }\r\n\r\n        if (!isLastMessageRenderedRef.current) {\r\n            return\r\n        }\r\n\r\n        bottom.current?.scrollIntoView({behavior: 'auto', block: 'start'})\r\n    }, [hasTypingParties, isLastMessageRenderedRef])\r\n\r\n    return (\r\n        <>\r\n            {typingParties.map((party, i) => (\r\n                <TypingIndicator\r\n                    key={i}\r\n                    party={party}\r\n                    typingParty={chatData?.typingParties[party.party_id]}\r\n                />\r\n            ))}\r\n            {hasTypingParties && <div ref={bottom} />}\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useRef} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\nimport produce from 'immer'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, getServiceNameFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {isExternalChatMessageDate} from '../../../types'\r\nimport {useMessagesLoader} from '../useMessagesLoader'\r\nimport {NoMessagesPlaceholder} from './NoMessagesPlaceholder'\r\nimport {TypingParties} from './TypingParties'\r\nimport {useInitialScrollPosition} from './useInitialScrollPosition'\r\nimport {useSaveScrollPositionEffect} from './useSaveScrollPositionEffect'\r\n\r\n\r\nconst VIEWPORT_INCREASE = 200 //Viewport increasing to prevent new messages from blinking\r\n\r\ntype VirtualizedMessagesProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    type: ChatType\r\n    renderMessage: (message: ChatCommonMessagesType) => React.ReactNode\r\n}\r\n\r\nexport const VirtualizedMessages = React.memo<VirtualizedMessagesProps>(\r\n    function VirtualizedMessages({\r\n        messages,\r\n        itemId,\r\n        type,\r\n        contactId,\r\n        scrollNode,\r\n        renderMessage,\r\n    }) {\r\n        const {t} = useLocalizationState()\r\n        const setItemState = useInteractionUIItemStateSetter()\r\n        const virtuosoRef = useRef<VirtuosoHandle>(null)\r\n        const rangeRef = useRef<ListRange | undefined>(undefined)\r\n        const messagesRef = useAsRef(messages)\r\n        const initialRender = useRef(false)\r\n\r\n        const interaction = useInteraction(itemId)\r\n        const serviceName = getServiceNameFromItem(interaction)\r\n        const channel = getChannel(interaction)\r\n        const ChannelIcon = getChannelImageIcon(channel)\r\n\r\n        const loadMoreMessages = useMessagesLoader(itemId, contactId, type)\r\n\r\n        useEffect(() => {\r\n            setItemState(itemId, produce(s => {\r\n                s.scrollerApi = {\r\n                    scrollToLast: () => {\r\n                        virtuosoRef.current?.scrollToIndex({index: 'LAST'})\r\n                    },\r\n                    scrollTo: (id, align) => {\r\n                        const index = messagesRef.current?.findIndex(m => id === getMessageId(m))\r\n                        virtuosoRef.current?.scrollToIndex({\r\n                            index,\r\n                            align,\r\n                        })\r\n                    },\r\n                }\r\n            }))\r\n        }, [itemId, messagesRef, setItemState])\r\n\r\n        useSaveScrollPositionEffect(messages, virtuosoRef, rangeRef, scrollNode)\r\n\r\n        const initialScrollPosition = useInitialScrollPosition(itemId, type, messagesRef, rangeRef, scrollNode)\r\n        const generateMessageKey = useCallback((_index: number, message: ChatCommonMessagesType) => getMessageId(message), [])\r\n        const channelTitle = channel ? (\r\n            channel === 'remoteassist'\r\n                ? t.ACTIVITY_HISTORY.remote_assist_title()\r\n                : t.GLOBAL[`chat_type_${channel}`]()\r\n        ) : ''\r\n        const renderHeader = useCallback(() => serviceName ? (\r\n            <div className=\"my-6 flex justify-center\">\r\n                <div className=\"text-neutral-on-secondary\">\r\n                    <p className=\"text-center font-semibold caption-s\">\r\n                        {serviceName}\r\n                    </p>\r\n                    <div className=\"flex items-center justify-center\">\r\n                        {ChannelIcon && <ChannelIcon className=\"mr-1 size-4 icon-disabled\" />}\r\n                        {' '}\r\n                        <p className=\"text-center caption-s\">\r\n                            {channelTitle}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : null, [ChannelIcon, channelTitle, serviceName])\r\n        const virtuosoComponents = useMemo(() => ({\r\n            Header: renderHeader,\r\n            Footer: () => (\r\n                <TypingParties\r\n                    itemId={itemId}\r\n                    messagesRef={messagesRef}\r\n                    rangeRef={rangeRef}\r\n                />\r\n            ),\r\n        }), [itemId, messagesRef, renderHeader])\r\n        const setListRange = useCallback((r: ListRange) => {\r\n            rangeRef.current = r\r\n        }, [])\r\n        const onHeightChange = useCallback((height: number) => {\r\n            if (scrollNode && scrollNode.clientHeight >= height) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages, scrollNode])\r\n\r\n        //Debounce is needed because for some reason Virtuoso calls onHeightChange twice\r\n        const debouncedOnHeightChange = useMemo(() => debounce(onHeightChange, 100), [onHeightChange])\r\n\r\n        const onTopStateChange = useCallback((atTop: boolean) => {\r\n            if (!initialRender.current) {\r\n                initialRender.current = true\r\n                return\r\n            }\r\n            if (atTop) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages])\r\n\r\n        const messageRenderer = useCallback((_index: number, message: ChatCommonMessagesType) => {\r\n            return renderMessage(message)\r\n        }, [renderMessage])\r\n\r\n        const showNoMessagesPlaceholder = messages.length < 1 || messages.length == 1 && isExternalChatMessageDate(messages[0])\r\n        if (showNoMessagesPlaceholder) {\r\n            return <NoMessagesPlaceholder type={type} contactId={contactId} />\r\n        }\r\n\r\n        return (\r\n            <Virtuoso\r\n                tabIndex={undefined} // by default Virtuoso add the tabIndex=\"0\" but for better support SelectionContainer we should set it undefined\r\n                ref={virtuosoRef}\r\n                followOutput\r\n                data={messages}\r\n                itemContent={messageRenderer}\r\n                computeItemKey={generateMessageKey}\r\n                atTopStateChange={onTopStateChange}\r\n                initialTopMostItemIndex={initialScrollPosition}\r\n                customScrollParent={scrollNode || undefined}\r\n                components={virtuosoComponents}\r\n                rangeChanged={setListRange}\r\n                totalListHeightChanged={debouncedOnHeightChange}\r\n                increaseViewportBy={VIEWPORT_INCREASE}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {RefObject} from 'react'\r\nimport {useLayoutEffect} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\n\r\nimport {useAsRef, usePreviousValueRef, useValueUpdated} from '@bpinc/lib-helpers'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useSaveScrollPositionEffect(\r\n    messages: ChatCommonMessagesType[],\r\n    virtuosoRef: RefObject<VirtuosoHandle>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const messagesRef = useAsRef(messages)\r\n    const messagesPrevRef = usePreviousValueRef(messages)\r\n    const messagesLengthChanged = useValueUpdated(messages.length)\r\n\r\n    useLayoutEffect(() => {\r\n        if (!rangeRef.current ||\r\n            isScrollAtBottom(scrollNode) ||\r\n            getMessageId(messagesRef.current[0]) === getMessageId(messagesPrevRef.current?.[0] || '')\r\n        ) {\r\n            return\r\n        }\r\n\r\n        if (messagesLengthChanged) {\r\n            const {offset, id} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesPrevRef.current || [])\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === id)\r\n            virtuosoRef.current?.scrollToIndex({index, offset, align: 'start'})\r\n        }\r\n    }, [messagesLengthChanged, messagesPrevRef, messagesRef, rangeRef, scrollNode, virtuosoRef])\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport {useLayoutEffect, useMemo} from 'react'\r\nimport type {IndexLocationWithAlign, ListRange} from 'react-virtuoso'\r\nimport produce from 'immer'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionUIChatTypeTopItemId, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport {useFirstUnreadMessage} from '../../../hooks/useFirstUnreadMessage'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useInitialScrollPosition(\r\n    itemId: string,\r\n    type: ChatType,\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const setInteractionUIState = useInteractionUIItemStateSetter()\r\n    const firstUnreadMessageIdRef = useAsRef(useFirstUnreadMessage(itemId))\r\n    const topItemRef = useAsRef(useInteractionUIChatTypeTopItemId(itemId, type))\r\n\r\n    useLayoutEffect(() => {\r\n        //Save current scroll position on unmount\r\n        return () => {\r\n            if (!rangeRef.current) {\r\n                return\r\n            }\r\n\r\n            if (isScrollAtBottom(scrollNode)) {\r\n                setInteractionUIState(itemId, produce(state => {\r\n                    delete state.tabTopItemId[type]\r\n                }))\r\n                return\r\n            }\r\n\r\n            const {id, offset} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesRef.current)\r\n            setInteractionUIState(itemId, produce(state => {\r\n                state.tabTopItemId[type] = {id, offset}\r\n            }))\r\n        }\r\n\r\n    }, [itemId, messagesRef, rangeRef, scrollNode, setInteractionUIState, type])\r\n\r\n    return useMemo<IndexLocationWithAlign>(() => {\r\n        if (firstUnreadMessageIdRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === firstUnreadMessageIdRef.current)\r\n            return {index, align: 'end'}\r\n        }\r\n\r\n        if (topItemRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === topItemRef.current?.id)\r\n            return {index, align: 'start', offset: (topItemRef.current?.offset || 0)}\r\n        }\r\n\r\n        return {index: 'LAST'}\r\n    }, [firstUnreadMessageIdRef, messagesRef, topItemRef])\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {ActivityHistoryType} from '@bpinc/ad-contacts-state-types'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-transport-types'\r\nimport {formatDate} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface MessageTopInfoProps {\r\n    isScenario?: boolean\r\n    displayName?: string\r\n    showName?: boolean\r\n    gapBeforeTime?: boolean\r\n    channel?: ExternalChatChannelType\r\n    mediaType?: ActivityHistoryType\r\n    timestamp: number\r\n    showTime?: boolean\r\n    direction: 'incoming' | 'outgoing'\r\n}\r\n\r\nexport const MessageTopInfo: React.FC<MessageTopInfoProps> = ({\r\n    isScenario,\r\n    displayName,\r\n    showName,\r\n    timestamp,\r\n    gapBeforeTime,\r\n    channel,\r\n    mediaType,\r\n    direction,\r\n    showTime,\r\n}) => {\r\n    const finalGapBeforeTime = gapBeforeTime || (showTime && showName)\r\n\r\n    const ChannelIcon = getChannelImageIcon(channel, {omit: ['web'], default: undefined})\r\n\r\n    return (\r\n        <p className={tcn(styles.messageTopInfo, styles[direction])}>\r\n            <span data-testid=\"party-display-name\">\r\n                {showName && displayName}\r\n            </span>\r\n            <span className={finalGapBeforeTime ? styles.messageTopInfoGap : ''} />\r\n            {showTime && (\r\n                <span className={tcn(styles.timeChannel, styles[direction])}>\r\n                    {!isScenario && mediaType !== 'EMAIL' && ChannelIcon && (\r\n                        <ChannelIcon\r\n                            data-testid=\"channel\"\r\n                            data-value={channel}\r\n                            className={styles.channelIcon}\r\n                            title={channel}\r\n                        />\r\n                    )}\r\n                    <span data-testid=\"message-time\">\r\n                        {formatDate(timestamp, 'h:mm A')}\r\n                    </span>\r\n                </span>\r\n            )}\r\n        </p>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"agent_Chat_messageBlock_i7M0B\",\"outgoing\":\"agent_Chat_outgoing_JD3jd\",\"message\":\"agent_Chat_message_x5tfb\",\"errorMessage\":\"agent_ErrorMessage_errorMessage_LqBft\",\"errorMessageAvatar\":\"agent_ErrorMessage_errorMessageAvatar_fhbT1\"};","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {MessageAvatar} from '../MessageAvatar'\r\nimport {MessageContent} from '../MessageContent'\r\nimport {MessageTopInfo} from '../MessageTopInfo'\r\n\r\nimport styles from './ErrorMessage.module.less'\r\n\r\n\r\nexport const ErrorMessage: FCWithChildren<string> = ({children}) => {\r\n    return (\r\n        <div className={tcn(styles.messageBlock, styles.outgoing)}>\r\n            <MessageTopInfo direction=\"outgoing\" isScenario timestamp={0} />\r\n            <section className={tcn(styles.message, styles.outgoing)}>\r\n                <MessageContent className={styles.errorMessage} isError>\r\n                    {children}\r\n                </MessageContent>\r\n            </section>\r\n            <MessageAvatar className={styles.errorMessageAvatar} isScenarioAvatar />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {IconACWDisposition24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {WithHoverOverActions} from '../../../ChatMessagesActions'\r\n\r\n\r\ninterface DispositionMessageProps {\r\n    title: string\r\n    disposition?: string\r\n    serviceName?: string\r\n    messageId: string\r\n}\r\n\r\nexport const DispositionMessage: React.FC<DispositionMessageProps> = ({title, disposition, serviceName, messageId}) => {\r\n    const {t} = useLocalizationState()\r\n    const messageContentClassName = tcn('break-words font-normal caption-s text-neutral-on-secondary')\r\n    const rowMessageClassName = tcn('flex w-full items-center gap-1')\r\n\r\n    return (\r\n        <SelectionItem\r\n            touchedOnly\r\n            focusOnSelection\r\n            tabIndex={0}\r\n            itemId={messageId}\r\n            className=\"w-full rounded-xs border py-1.5 pl-2 pr-3 bg-primary-container-variant1 border-action\"\r\n        >\r\n            <WithHoverOverActions messageId={messageId}>\r\n                <div className=\"flex w-full flex-col gap-2\">\r\n                    <div className={rowMessageClassName}>\r\n                        <IconACWDisposition24 className=\"size-4 icon-neutral\" />\r\n                        <div className=\"font-semibold caption-xs text-primary-on-primary\">\r\n                            {t.ACTIVITY_HISTORY.disposition_title()}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={tcn('flex w-full gap-1', messageContentClassName)}\r\n                        data-testid=\"disposition-title\"\r\n                    >\r\n                        {title}\r\n                    </div>\r\n                    <div className={rowMessageClassName}>\r\n                        <span className={messageContentClassName}>\r\n                            {t.EXTERNAL_CHAT.disposition_message_service_name()}\r\n                        </span>\r\n                        <span\r\n                            className={tcn(messageContentClassName, 'font-semibold')}\r\n                            data-testid=\"disposition-service\"\r\n                        >\r\n                            {serviceName}\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        className={rowMessageClassName}\r\n                        data-testid=\"disposition\"\r\n                    >\r\n                        <span className={messageContentClassName}>\r\n                            {t.EXTERNAL_CHAT.disposition_message_name()}\r\n                        </span>\r\n                        <span className={tcn(messageContentClassName, 'font-semibold')}>\r\n                            {disposition}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </WithHoverOverActions>\r\n        </SelectionItem>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {IconAgentNotes} from '@bpinc/lib-jskit-ui'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const NotesMessage: FCWithChildren<string> = ({children}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <div\r\n            className=\"flex w-full flex-col gap-2 rounded-xs border py-1.5 pl-2 pr-3 bg-warning-variant border-on-warning\"\r\n            data-testid=\"notes\"\r\n        >\r\n            <div className=\"flex items-center gap-1\">\r\n                <IconAgentNotes className=\"size-4\" />\r\n                <div className=\"font-semibold caption-xs text-primary-on-primary\">\r\n                    {t.ACTIVITY_HISTORY.agent_notes_title()}\r\n                </div>\r\n            </div>\r\n            <div className=\"w-full gap-1 break-words caption-s text-neutral-on-secondary\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {getMessageId} from '../../../../../helpers'\r\nimport type {ActivityMessageGroup as ActivityMessageGroupType} from '../../../../../types'\r\nimport {WithHoverOverActions} from '../../../ChatMessagesActions'\r\nimport {WithOptionalNameAndAvatar} from '../WithOptionalNameAndAvatar'\r\nimport {DispositionMessage} from './DispositionMessage'\r\nimport {NotesMessage} from './NotesMessage'\r\nimport {useDispositionTitle} from './useDispositionTitle'\r\n\r\n\r\ntype ActivityMessageGroupProps = {\r\n    message: ActivityMessageGroupType\r\n}\r\n\r\nexport const ActivityMessageGroup: React.FC<ActivityMessageGroupProps> = ({message}) => {\r\n    const {notes, disposition, serviceName} = message\r\n    const messageId = getMessageId(message)\r\n\r\n    const dispositionTitle = useDispositionTitle(message)\r\n\r\n    return (\r\n        <div>\r\n            {notes && (\r\n                <WithOptionalNameAndAvatar isFullWidth message={message}>\r\n                    <WithHoverOverActions messageId={messageId} className=\"w-full\">\r\n                        <NotesMessage>{notes}</NotesMessage>\r\n                    </WithHoverOverActions>\r\n                </WithOptionalNameAndAvatar>\r\n            )}\r\n            {disposition && (\r\n                <WithOptionalNameAndAvatar isFullWidth message={message}>\r\n                    <DispositionMessage\r\n                        messageId={messageId}\r\n                        title={dispositionTitle}\r\n                        disposition={disposition}\r\n                        serviceName={serviceName}\r\n                    />\r\n                </WithOptionalNameAndAvatar>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getDispositionTitle} from '../../../../../helpers'\r\nimport type {ActivityMessageGroup as ActivityMessageGroupType} from '../../../../../types'\r\n\r\n\r\nexport function useDispositionTitle(message: ActivityMessageGroupType) {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(function memoizeDispositionTitle() {\r\n        return getDispositionTitle(message, t, formatFullName)\r\n\r\n    }, [formatFullName, message, t])\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgBotSuggestion = function SvgBotSuggestion(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m12 21-2.575-2.5h-3.8a1.6 1.6 0 0 1-1.162-.448A1.5 1.5 0 0 1 4 16.93V4.575a1.5 1.5 0 0 1 .463-1.127A1.6 1.6 0 0 1 5.625 3h12.75a1.606 1.606 0 0 1 1.163.448A1.506 1.506 0 0 1 20 4.575V16.93a1.506 1.506 0 0 1-.462 1.127 1.606 1.606 0 0 1-1.163.448h-3.8Zm-6.375-3.464H9.85L12 19.619l2.15-2.083h4.225a.62.62 0 0 0 .45-.17.581.581 0 0 0 .175-.436V4.575a.581.581 0 0 0-.175-.436.62.62 0 0 0-.45-.17H5.625a.62.62 0 0 0-.45.17.581.581 0 0 0-.175.436V16.93a.581.581 0 0 0 .175.436.62.62 0 0 0 .45.17ZM5 3.969Zm8.175 7.922 2.6-1.139-2.6-1.139L12 7.094l-1.175 2.52-2.6 1.139 2.6 1.139L12 14.41Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgBotSuggestion);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"21ff305d2488d9478cc624e673ec8bab.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFacebook = function SvgFacebook(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-4.974 0-9 3.645-9 8.1a7.687 7.687 0 0 0 2.842 5.895V21l3.695-2.115A10.817 10.817 0 0 0 12 19.2c4.974 0 9-3.645 9-8.1S16.974 3 12 3Z\",\n    fill: \"#448aff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m6.275 13.908 4.771-5.146 2.385 2.339 4.294-2.339-4.771 5.146-2.385-2.339Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFacebook);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"57f727bf2f169e0b19d872ec87e1ebc4.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLine = function SvgLine(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.25 21h11.5A3.25 3.25 0 0 0 21 17.75V6.25A3.25 3.25 0 0 0 17.75 3H6.25A3.25 3.25 0 0 0 3 6.25v11.5A3.25 3.25 0 0 0 6.25 21Z\",\n    fill: \"#00c300\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.556 11.21c0-2.932-2.94-5.318-6.553-5.318S5.451 8.276 5.451 11.21c0 2.629 2.332 4.831 5.481 5.247.214.046.5.141.578.323a1.348 1.348 0 0 1 .021.593s-.076.462-.094.561c-.028.166-.132.648.568.354a21.147 21.147 0 0 0 5.146-3.807 4.728 4.728 0 0 0 1.405-3.271Zm-9.119 1.745h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .687 0v2.26h.958a.344.344 0 0 1 0 .688Zm1.347-.344a.344.344 0 1 1-.687 0V10.01a.344.344 0 1 1 .687 0Zm3.135 0a.344.344 0 0 1-.618.206L11.966 11v1.61a.344.344 0 0 1-.688 0v-2.6a.344.344 0 0 1 .235-.326.338.338 0 0 1 .109-.017.346.346 0 0 1 .274.137l1.335 1.818V10.01a.344.344 0 0 1 .688 0Zm2.107-1.646a.344.344 0 1 1 0 .688h-.958v.615h.958a.344.344 0 1 1 0 .688h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .344-.344h1.3a.344.344 0 1 1 0 .687h-.958v.615h.958Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLine);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0c921db40ddee9f34a5d15b376ee0df7.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSms = function SvgSms(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 11.2a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133A.722.722 0 0 0 8 11.2Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251ZM3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSms);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"910dfbe6763a148f8a6af4b2866390ff.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTelegram = function SvgTelegram(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#29b6f6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17.109 7.525-1.844 9.415a.574.574 0 0 1-.613.43.659.659 0 0 1-.43-.135l-3.994-3.315-1.954-.987-2.508-.667s-.447-.129-.447-.5c0-.308.459-.454.459-.454l10.493-4.169a2 2 0 0 1 .555-.11c.144 0 .308.062.308.246a1.439 1.439 0 0 1-.025.246Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11.649 14.855-1.687 1.661a.322.322 0 0 1-.171.059.243.243 0 0 1-.108-.021l.475-2.936Z\",\n    fill: \"#b0bec5\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.968 9.007a.246.246 0 0 0-.345-.046l-6.496 3.884s1.037 2.9 1.195 3.4.286.514.286.514l.475-2.936 4.84-4.478a.246.246 0 0 0 .045-.338Z\",\n    fill: \"#cfd8dc\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTelegram);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"3b81ec51938bfa793e8ba0cb4f274188.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTwitter = function SvgTwitter(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#03a9f4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.224 8.73a4.6 4.6 0 0 1-1.306.415 3.333 3.333 0 0 0 1.306-1.415 5.926 5.926 0 0 1-1.651.648 2 2 0 0 0-1.563-.648A2.176 2.176 0 0 0 12 10.09v.94c-1.741 0-3.439-1.438-4.5-2.832a2.42 2.42 0 0 0-.29 1.16 3.038 3.038 0 0 0 1.3 2.145 3.828 3.828 0 0 1-1.306-.472v.027a2.065 2.065 0 0 0 1.7 2.088 2.548 2.548 0 0 1-1.236.246c.272.913 1.642 1.4 2.58 1.416a5.19 5.19 0 0 1-3.047.944 2.958 2.958 0 0 1-.424-.008 6.359 6.359 0 0 0 3.482.955 6.1 6.1 0 0 0 6.094-6.312c0-.1 0-.435-.008-.533a3.528 3.528 0 0 0 .879-1.124\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTwitter);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"6157ddd8a81feea7b302231a623e132e.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgViber = function SvgViber(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3.426c-1.191 0-4.815 0-6.819 1.738-1.193 1.129-1.755 2.762-1.755 5.121v1.286c0 2.36.562 3.992 1.769 5.134a6.358 6.358 0 0 0 2.423 1.221l.321.092v2.288c0 .268.082.268.109.268.056 0 .144-.017.313-.159.041-.038.338-.344 1.787-1.886l.146-.156.219.013c.485.029.986.044 1.487.044 1.191 0 4.815 0 6.819-1.738 1.193-1.129 1.755-2.761 1.755-5.121v-1.286c0-2.36-.562-3.992-1.769-5.134-1.99-1.725-5.614-1.725-6.805-1.725Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.443 13.623a9.161 9.161 0 0 0-1.477-.911 2.611 2.611 0 0 0-.994-.3.814.814 0 0 0-.479.223c-.307.279-.407.629-.945.629a3.863 3.863 0 0 1-2.105-1.118 3.357 3.357 0 0 1-1.228-1.917c0-.49.377-.588.684-.868a.7.7 0 0 0 .252-.435 2.068 2.068 0 0 0-.334-.9 8.2 8.2 0 0 0-1-1.345.663.663 0 0 0-.494-.234 1.894 1.894 0 0 0-.957.315 2.088 2.088 0 0 0-.929 1.1 1 1 0 0 0-.028.191 2.759 2.759 0 0 0 .408 1.377 14.5 14.5 0 0 0 1.977 2.749 9.6 9.6 0 0 0 .778.759 9.94 9.94 0 0 0 .834.708 16.219 16.219 0 0 0 3.02 1.8 3.553 3.553 0 0 0 1.5.372 1.325 1.325 0 0 0 .223-.025 2.236 2.236 0 0 0 1.209-.846 1.532 1.532 0 0 0 .346-.871.568.568 0 0 0-.261-.453Zm.257-2.067a.448.448 0 0 1-.468-.426v-.426a4.04 4.04 0 0 0-4.21-3.833.428.428 0 1 1 0-.852 4.938 4.938 0 0 1 5.146 4.685v.426a.448.448 0 0 1-.468.43Zm-2.873-.852a.463.463 0 0 1-.452-.319 1.341 1.341 0 0 0-1-.912.424.424 0 0 1-.336-.519.474.474 0 0 1 .57-.306 2.242 2.242 0 0 1 1.672 1.522.424.424 0 0 1-.334.52.517.517 0 0 1-.121.018Z\",\n    fill: \"#7e57c2\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.095 11.126a.426.426 0 0 1-.426-.426 2.553 2.553 0 0 0-2.418-2.549.426.426 0 0 1 .045-.851 3.4 3.4 0 0 1 3.225 3.4.426.426 0 0 1-.426.426Z\",\n    fill: \"#7e57c2\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-2.025 0-5.28.977-7.1 1.85C3.538 6.138 3 7.946 3 10.286v1.285c0 2.34.538 4.147 1.9 5.436a6.8 6.8 0 0 0 2.6 1.331V20.3c0 .684.472.7.558.7a.944.944 0 0 0 .607-.267c.072-.061.909-.949 1.819-1.92.542.033 1.057.045 1.511.045 2.025 0 5.18-.178 7.1-1.85 1.359-1.288 1.9-3.1 1.9-5.436v-1.286c0-2.34-.538-4.147-1.9-5.436C17.18 3.177 14.025 3 12 3Zm7.65 8.422v.149c0 2.1-.47 3.535-1.479 4.505-1.747 1.5-5.075 1.5-6.172 1.5-.334 0-.876 0-1.515-.043L8.4 19.75v-2.513a6.03 6.03 0 0 1-2.571-1.161c-1.008-.97-1.479-2.4-1.479-4.506v-1.282c0-2.1.47-3.535 1.479-4.505 1.746-1.5 5.075-1.5 6.171-1.5s4.424 0 6.171 1.5c1.009.97 1.479 2.4 1.479 4.505v1.134Z\",\n    fill: \"#7e57c2\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgViber);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"705a55fc7f1f462947be817d84a580cc.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWebChat = function SvgWebChat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWebChat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"14effeb1e434fca9cf40a30e4b4c1cfa.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWechat = function SvgWechat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.689 3c-4.23 0-7.691 2.884-7.691 6.489a6.076 6.076 0 0 0 2.884 5.047l-.961 2.884 3.028-1.875a8.4 8.4 0 0 0 2.74.433c4.23 0 7.691-2.884 7.691-6.489S14.919 3 10.689 3Z\",\n    fill: \"#8bc34a\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.933 14.068c.38-2.708 3.331-4.51 6.614-4.05.137.02 1.617.409 1.758.429a3.465 3.465 0 0 0 0-1.33c-.046-.006-.137-.083-.183-.09-5.07-1.443-9.06 1.238-9.098 4.913a5.88 5.88 0 0 0 .07 1.82 7.053 7.053 0 0 0 .97.046 4.36 4.36 0 0 1-.13-1.738Z\",\n    fill: \"#7cb342\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 14.751a5.52 5.52 0 0 0-5.75-5.288 5.52 5.52 0 0 0-5.75 5.288 5.52 5.52 0 0 0 5.75 5.288 6.515 6.515 0 0 0 2.212-.385L19.674 21l-.619-2.307A5.033 5.033 0 0 0 21 14.751Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.866 7.478a.961.961 0 1 1-.962-.961.964.964 0 0 1 .962.961Zm4.807-.961a.961.961 0 1 0 .961.961.964.964 0 0 0-.961-.961Z\",\n    fill: \"#33691e\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.996 13.254a.721.721 0 1 1-.721-.721.739.739 0 0 1 .721.721Zm3.605-.721a.721.721 0 1 0 .721.721.739.739 0 0 0-.721-.721Z\",\n    fill: \"#546e7a\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWechat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"720e2babef2e76400cb343b776053cba.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWhatsapp = function SvgWhatsapp(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m3.46 20.54 1.207-4.386A8.5 8.5 0 0 1 18.052 5.941a8.394 8.394 0 0 1 2.489 5.988 8.5 8.5 0 0 1-8.5 8.464 8.525 8.525 0 0 1-4.073-1.034Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.454 20.77a.223.223 0 0 1-.216-.282l1.183-4.3A8.725 8.725 0 0 1 18.214 5.78a8.622 8.622 0 0 1 2.556 6.15 8.742 8.742 0 0 1-12.833 7.677l-4.426 1.156a.206.206 0 0 1-.057.007Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.032 3.447a8.48 8.48 0 1 1 0 16.959 8.534 8.534 0 0 1-4.07-1.032l-4.514 1.179 1.208-4.392a8.474 8.474 0 0 1 7.376-12.714m0-.447a8.922 8.922 0 0 0-7.86 13.22l-1.157 4.215a.445.445 0 0 0 .117.432.449.449 0 0 0 .433.118l4.345-1.134A8.972 8.972 0 0 0 21 11.93 8.945 8.945 0 0 0 12.032 3Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.01 6.982a7.014 7.014 0 0 0-10.93 8.659l.168.265-.711 2.579 2.661-.694.257.152a7.047 7.047 0 0 0 3.579.974 7.02 7.02 0 0 0 7.031-6.99 6.928 6.928 0 0 0-2.055-4.945Z\",\n    fill: \"#40c351\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.854 8.28c-.163-.363-.335-.37-.491-.377-.127-.006-.272-.005-.418-.005a.8.8 0 0 0-.581.273 2.443 2.443 0 0 0-.763 1.817 4.238 4.238 0 0 0 .89 2.254 8.948 8.948 0 0 0 3.723 3.29c1.841.726 2.216.582 2.615.545a2.2 2.2 0 0 0 1.471-1.036 1.825 1.825 0 0 0 .127-1.036c-.055-.091-.2-.145-.418-.255s-1.29-.636-1.489-.709-.345-.109-.491.109-.563.709-.69.854-.255.164-.472.055a5.966 5.966 0 0 1-1.753-1.081 6.566 6.566 0 0 1-1.212-1.509c-.127-.218-.014-.336.1-.445s.218-.255.327-.382a1.49 1.49 0 0 0 .218-.363.4.4 0 0 0-.018-.382c-.057-.117-.481-1.19-.675-1.617Z\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWhatsapp);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"a39c903b5cca1b36c65e91151a83b019.svg\";","// extracted by mini-css-extract-plugin\nexport default {\"messageRow\":\"agent_Message_messageRow_UOs4p\",\"incoming\":\"agent_Message_incoming_bnpcD\",\"outgoing\":\"agent_Message_outgoing_pKbZe\",\"time\":\"agent_Message_time_wb5xv\",\"message\":\"agent_Message_message_chWfh\",\"link\":\"agent_Message_link_J61uY\",\"error\":\"agent_Message_error_NKpnz\",\"html\":\"agent_Message_html_rIkTi\",\"closable\":\"agent_Message_closable_a7mGz\",\"sentiment\":\"agent_Message_sentiment_jM9aL\",\"icon\":\"agent_Message_icon_XNLkK\"};","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {formatDate, useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem, Sentiment, Svg} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getMessageId} from '../../../../helpers'\r\nimport type {Direction} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {useLinkOpener} from '../hooks/useLinkOpener'\r\nimport {getTranscriptMessageIcon} from './utils'\r\n\r\nimport styles from './Message.module.less'\r\n\r\n\r\nexport type MessageProps = MessageAdditionalProps & {\r\n    message: VoiceTranscriptCommonMessage\r\n}\r\n\r\nexport interface MessageAdditionalProps {\r\n    itemId: string\r\n    direction: Direction\r\n    closeButton?: ReactElement\r\n    content: string\r\n    isHtml: boolean\r\n    isLink: boolean\r\n}\r\n\r\nexport const Message = React.forwardRef<HTMLDivElement, MessageProps>(({\r\n    message,\r\n    itemId,\r\n    direction,\r\n    closeButton,\r\n    isLink,\r\n    isHtml,\r\n    content,\r\n}, ref) => {\r\n    const {\r\n        endTime,\r\n        sentiment,\r\n        chatMessageData,\r\n    } = message\r\n\r\n    //Already sanitized in useVoiceTranscriptMessagesContentMap\r\n    const innerHTML = useInnerHTML(content)\r\n\r\n    const iconSrc = getTranscriptMessageIcon(message)\r\n    const messageId = getMessageId(message)\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    const bubbleElement = (\r\n        <SelectionItem\r\n            ref={ref}\r\n            itemId={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            data-message-id-selection={messageId}\r\n            className={tcn(styles.message, styles[direction], {\r\n                [styles.html]: isHtml,\r\n                [styles.link]: isLink,\r\n                [styles.closable]: !!closeButton,\r\n                [styles.error]: chatMessageData?.displayType === 'error',\r\n            })}\r\n        >\r\n            <WithHoverOverActions messageId={messageId}>\r\n                <div\r\n                    dangerouslySetInnerHTML={innerHTML}\r\n                    onClickCapture={evt => {\r\n                        if (isLink) {\r\n                            evt.preventDefault()\r\n                            evt.stopPropagation()\r\n                            openLink(message)\r\n                        }\r\n                    }}\r\n                />\r\n            </WithHoverOverActions>\r\n            {closeButton}\r\n        </SelectionItem>\r\n    )\r\n\r\n    return (\r\n        <div className={tcn(styles.messageRow, styles[direction])}>\r\n            <div className={tcn(styles.time, styles[direction])}>{formatDate(endTime, 'h:mm A')}</div>\r\n            {bubbleElement}\r\n            {iconSrc && <Svg src={iconSrc} className={tcn(styles.icon, styles[direction])} />}\r\n            {sentiment && (\r\n                <Sentiment sentiment={sentiment} className={tcn(styles.sentiment, styles[direction])} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport botSuggestionIcon from './images/bot-suggestion.svg'\r\nimport facebookIcon from './images/facebook.svg'\r\nimport lineIcon from './images/line.svg'\r\nimport smsIcon from './images/sms.svg'\r\nimport telegramIcon from './images/telegram.svg'\r\nimport twitterIcon from './images/twitter.svg'\r\nimport viberIcon from './images/viber.svg'\r\nimport webChatIcon from './images/web-chat.svg'\r\nimport wechatIcon from './images/wechat.svg'\r\nimport whatsappIcon from './images/whatsapp.svg'\r\n\r\n\r\nexport function getTranscriptMessageIcon(transcriptMessage: VoiceTranscriptCommonMessage) {\r\n    if (isSuggestion(transcriptMessage)) {\r\n        return botSuggestionIcon\r\n    }\r\n    if (isCurrentChatTranscriptMessage(transcriptMessage) && transcriptMessage.chatMessageData.channel) {\r\n        switch (transcriptMessage.chatMessageData.channel) {\r\n            case 'sms':\r\n                return smsIcon\r\n            case 'whatsapp':\r\n                return whatsappIcon\r\n            case 'facebook':\r\n                return facebookIcon\r\n            case 'line':\r\n                return lineIcon\r\n            case 'telegram':\r\n                return telegramIcon\r\n            case 'twitter':\r\n                return twitterIcon\r\n            case 'viber':\r\n                return viberIcon\r\n            case 'web':\r\n                return webChatIcon\r\n            case 'wechat':\r\n                return wechatIcon\r\n        }\r\n    }\r\n}\r\n","import type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface ParseLinkParams {\r\n    text: string\r\n    url: string\r\n    target: string\r\n}\r\nexport function parseTranscriptLinksAsHTML({text, url, target}: ParseLinkParams) {\r\n    const parsedUrl = normalizeExternalURL(url)\r\n    return `<a href=${parsedUrl} target=\"${target}\">${text}</a>`\r\n}\r\n\r\nexport function chatMessageToVoiceTranscript(message: ChatMessage): ChatSessionTranscriptMessage {\r\n    return {\r\n        partyId: message.partyId,\r\n        msgId: message.msgId ?? '',\r\n        text: message.msg ?? '',\r\n        startTime: message.timestamp,\r\n        endTime: message.timestamp,\r\n        sentiment: message.sentiment,\r\n        type: 'chatMessage',\r\n        format: 'HTML',\r\n        isSelf: message.isSelf,\r\n        chatMessageData: message,\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {MessageProps} from '../../VoiceTranscript/messages/Message'\r\nimport {Message} from '../../VoiceTranscript/messages/Message'\r\nimport {parseTranscriptLinksAsHTML} from '../../VoiceTranscript/utils'\r\n\r\n\r\ntype BotSuggestionProps = Omit<MessageProps, 'content' | 'isLink' | 'isHtml'>\r\n\r\nexport const BotSuggestion: React.FC<BotSuggestionProps> = ({message, itemId, ...rest}) => {\r\n    const {text = ''} = message\r\n    const isHtml = isHTMLSuggestion(message)\r\n    const isLink = isLinkSuggestion(message)\r\n\r\n    const content = isLink\r\n        ? parseTranscriptLinksAsHTML({\r\n            text: message.text,\r\n            target: itemId,\r\n            url: message.suggestionURL,\r\n        })\r\n        : text\r\n\r\n\r\n    return (\r\n        <Message\r\n            message={message}\r\n            isHtml={isHtml}\r\n            isLink={isLink}\r\n            content={content}\r\n            itemId={itemId}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessageDate} from '../../../../../types'\r\n\r\n\r\ntype DateMessageProps = {\r\n    message: ChatMessageDate\r\n}\r\n\r\nexport const DateMessage: React.FC<DateMessageProps> = React.memo(function DateMessage({message}) {\r\n    return (\r\n        <div\r\n            className=\"text-neutral-on-fade words-break flex w-full select-none items-center justify-center gap-1 px-8 py-4 caption-s\"\r\n            data-testid=\"date-separator\"\r\n        >\r\n            {message}\r\n        </div>\r\n    )\r\n})\r\n","import {useCallback, useEffect, useMemo, useRef} from 'react'\r\n\r\nimport {\r\n    useInteractionChatStateMethods,\r\n    useInteractionChatStateSelector,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessageSource} from '@bpinc/ad-interaction-message-types'\r\nimport {useIntersectionObserver, usePageVisibility} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatScrollNodeType, HistoryMessage} from '../types'\r\n\r\n\r\ninterface UseMarkAsReadVisibilitySensor {\r\n    msgId?: string | undefined\r\n    scrollNode: ChatScrollNodeType\r\n    mediaType?: HistoryMessage['mediaType']\r\n    source?: MessageSource\r\n    isRead?: boolean\r\n    historyMessageGlobalInteractionId?: string\r\n\r\n    isDIDChat: boolean\r\n    itemGlobalInteractionId?: string\r\n    itemInteractionStepId: string\r\n    itemContactId: string\r\n}\r\n\r\nexport function useMarkAsReadVisibilitySensor({\r\n    msgId,\r\n    scrollNode,\r\n    mediaType,\r\n    isDIDChat,\r\n    itemInteractionStepId,\r\n    itemContactId,\r\n    itemGlobalInteractionId,\r\n    source,\r\n    isRead,\r\n    historyMessageGlobalInteractionId,\r\n}: UseMarkAsReadVisibilitySensor) {\r\n\r\n    const pageIsVisible = usePageVisibility()\r\n\r\n    const {markMessageAsRead, markPersonalMessageAsRead} = useInteractionChatStateMethods()\r\n\r\n    const unreadActivityHistory = useInteractionChatStateSelector(\r\n        s =>\r\n            !!itemContactId &&\r\n            !!msgId &&\r\n            !!historyMessageGlobalInteractionId &&\r\n            !!s.unreadPersonalMessages[itemContactId]?.[historyMessageGlobalInteractionId]?.[msgId],\r\n    )\r\n\r\n    const visibilitySensorIsActive = useMemo(() => {\r\n        if (!pageIsVisible) {\r\n            return false\r\n        }\r\n\r\n        if (isActivityHistoryMessage()) {\r\n            return unreadActivityHistory\r\n        }\r\n\r\n        return itemIsActivated() && isNotServiceMessage() && !isRead\r\n\r\n        function isActivityHistoryMessage() {\r\n            return mediaType\r\n        }\r\n        function itemIsActivated() {\r\n            return !!itemInteractionStepId\r\n        }\r\n\r\n        function isNotServiceMessage() {\r\n            return source === 'customer' || source === 'agent'\r\n        }\r\n    }, [itemInteractionStepId, isRead, mediaType, pageIsVisible, source, unreadActivityHistory])\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    const {isIntersecting} = useIntersectionObserver(ref, {\r\n        root: scrollNode,\r\n        enabled: visibilitySensorIsActive,\r\n    })\r\n\r\n    const markAsRead = useCallback(\r\n        function handleVisibleCallback(visible: boolean) {\r\n            if (visible) {\r\n                if (unreadActivityHistory) {\r\n                    if (historyMessageGlobalInteractionId) {\r\n                        markPersonalMessageAsRead({\r\n                            globalInteractionId: historyMessageGlobalInteractionId,\r\n                            messageId: msgId!,\r\n                            contactId: itemContactId,\r\n                        })\r\n                    }\r\n                } else if (msgId) {\r\n                    if (itemInteractionStepId) {\r\n                        markMessageAsRead({\r\n                            interactionStepId: itemInteractionStepId,\r\n                            messageId: msgId,\r\n                        })\r\n                    }\r\n                    if (itemGlobalInteractionId) {\r\n                        if (isDIDChat && itemContactId) {\r\n                            markPersonalMessageAsRead({\r\n                                globalInteractionId: itemGlobalInteractionId,\r\n                                messageId: msgId,\r\n                                contactId: itemContactId,\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [\r\n            unreadActivityHistory,\r\n            msgId,\r\n            markPersonalMessageAsRead,\r\n            historyMessageGlobalInteractionId,\r\n            itemContactId,\r\n            itemInteractionStepId,\r\n            itemGlobalInteractionId,\r\n            markMessageAsRead,\r\n            isDIDChat,\r\n        ],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (isIntersecting && visibilitySensorIsActive) {\r\n            markAsRead(true)\r\n        }\r\n    }, [markAsRead, isIntersecting, visibilitySensorIsActive])\r\n\r\n    return ref\r\n}\r\n","import React from 'react'\r\n\r\nimport {Attachment} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ninterface AttachmentFileMessageProps {\r\n    fileName: string\r\n    fileLink: string\r\n}\r\n\r\nexport const AttachmentFileMessage = React.forwardRef<HTMLDivElement, AttachmentFileMessageProps>(({\r\n    fileLink,\r\n    fileName,\r\n}, attachmentRef) => {\r\n\r\n    return (\r\n        <div ref={attachmentRef}>\r\n            <Attachment.File height=\"44\" name={fileName} link={fileLink} withDownloadButton />\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport {AudioPlayer} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface AudioFileMessageProps {\r\n    fileLink: string\r\n}\r\n\r\nexport const AudioFileMessage: React.FC<AudioFileMessageProps> = ({fileLink}) => {\r\n    return (\r\n        <AudioPlayer src={fileLink} showDownloadButton isNewAudioPlayerUI />\r\n    )\r\n}\r\n","import type {HTMLAttributes} from 'react'\r\nimport React from 'react'\r\nimport * as Dialog from '@radix-ui/react-dialog'\r\n\r\nimport {formatChatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {IconClose24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface ImageFileMessageProps extends HTMLAttributes<HTMLImageElement> {\r\n    fileName: string\r\n    fileLink: string\r\n    senderName: string | undefined\r\n    timestamp: number\r\n}\r\n\r\nexport const ImageFileMessage = React.forwardRef<\r\n    HTMLImageElement,\r\n    ImageFileMessageProps\r\n>(\r\n    (\r\n        {\r\n            fileLink,\r\n            fileName,\r\n            className,\r\n            senderName,\r\n            timestamp,\r\n            ...htmlImageProps\r\n        },\r\n        ref,\r\n    ) => {\r\n        const open = useBoolean(false)\r\n\r\n        useEscapeManager(open.setFalse, {enabled: open.value})\r\n\r\n        return (\r\n            <Dialog.Root open={open.value} onOpenChange={open.toggle}>\r\n                <Dialog.Trigger asChild>\r\n                    <img\r\n                        ref={ref}\r\n                        {...htmlImageProps}\r\n                        className={tcn('cursor-zoom-in rounded-xs', className)}\r\n                        alt={fileName}\r\n                        src={fileLink}\r\n                        title={fileName}\r\n                        data-testid=\"attachment\"\r\n                        data-value={fileName}\r\n                    />\r\n                </Dialog.Trigger>\r\n                <Dialog.Portal>\r\n                    <Dialog.Overlay\r\n                        className={tcn(\r\n                            'fixed left-0 top-0 z-10 h-full w-full bg-inverse-overlay',\r\n                            'data-[state=open]:animate-fade-in-100',\r\n                            'data-state=[closed]:animate-fade-out-100',\r\n                        )}\r\n                    />\r\n                    <Dialog.Content\r\n                        className={tcn(\r\n                            'fixed left-1/2 top-1/2 z-20 max-h-[90vw] max-w-[90vw] -translate-x-1/2 -translate-y-1/2',\r\n                            'data-[state=open]:animate-fade-in-100',\r\n                            'data-state=[closed]:animate-fade-out-100',\r\n                        )}\r\n                    >\r\n                        <Dialog.Close className=\"absolute right-0 top-0 translate-y-[calc(-100%-10px)]\">\r\n                            <IconClose24 className=\"size-8 icon-reversed\" />\r\n                        </Dialog.Close>\r\n                        <img\r\n                            ref={ref}\r\n                            {...htmlImageProps}\r\n                            className={'h-auto w-auto'}\r\n                            alt={fileName}\r\n                            src={fileLink}\r\n                            title={fileName}\r\n                            data-testid=\"attachment\"\r\n                            data-value={fileName}\r\n                        />\r\n                        <p className=\"mt-2 caption-s text-inverse-disabled\">\r\n                            {fileName}\r\n                        </p>\r\n                        <p className=\"caption-s text-inverse-disabled\">\r\n                            <b className=\"text-inverse-disabled\">\r\n                                {senderName}\r\n                            </b>\r\n                            {', '}\r\n                            <b className=\"text-inverse-disabled\">\r\n                                {formatChatDate(timestamp)}\r\n                            </b>\r\n                        </p>\r\n                    </Dialog.Content>\r\n                </Dialog.Portal>\r\n            </Dialog.Root>\r\n        )\r\n    },\r\n)\r\n","import React from 'react'\r\n\r\nimport type {ActivityMediaType} from '@bpinc/ad-activities-state-types'\r\nimport type {MessageSource} from '@bpinc/ad-interaction-message-types'\r\nimport {paramsToQueryString, requestUrls} from '@bpinc/ad-request-urls'\r\nimport {FileProgress} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ExternalChatMessageFileData} from '../../../../../types'\r\nimport {WithAttachmentMaskAction} from '../../../ChatMessagesActions'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {AttachmentFileMessage} from './AttachmentFileMessage'\r\nimport {AudioFileMessage} from './AudioFileMessage'\r\nimport {ImageFileMessage} from './ImageFileMessage'\r\n\r\n\r\ninterface SessionProps {\r\n    id?: string\r\n    domain?: string\r\n    loginId?: string\r\n}\r\n\r\ninterface FileMessageContentProps {\r\n    canMask: boolean\r\n    session?: SessionProps\r\n    globalInteractionId?: string\r\n    mediaType?: ActivityMediaType | 'EMAIL' | 'VOICE_TRANSCRIPT' | 'REMOTE_ASSIST'\r\n    source?: MessageSource\r\n    isRead?: boolean\r\n    fileData: ExternalChatMessageFileData\r\n    markAsReadData: MarkAsReadProps\r\n    timestamp: number\r\n    senderName: string | undefined\r\n    msg?: string\r\n}\r\n\r\nexport const FileMessageContent: React.FC<FileMessageContentProps> = ({\r\n    session = {},\r\n    canMask,\r\n    mediaType,\r\n    source,\r\n    isRead,\r\n    fileData,\r\n    markAsReadData,\r\n    globalInteractionId,\r\n    msg,\r\n    senderName,\r\n    timestamp,\r\n}) => {\r\n    const {\r\n        refMsgId,\r\n        fileId = '',\r\n        fileType = 'attachment',\r\n        fileName = '',\r\n        fileProgress = 0,\r\n        fileError,\r\n        fileIsMasked = false,\r\n    } = fileData\r\n    const {id: sessionId, domain, loginId} = session\r\n    const queryString = paramsToQueryString({\r\n        token: sessionId,\r\n        user: loginId,\r\n        tenant: domain,\r\n        id: fileId,\r\n        no_disposition: 0,\r\n    })\r\n    const fileLink = `${requestUrls.getChatAttachmentDownload}?${queryString}`\r\n    const {t} = useLocalizationState()\r\n\r\n    const fileIsLoading = !fileId && !fileError\r\n\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId: refMsgId,\r\n        historyMessageGlobalInteractionId: globalInteractionId,\r\n        mediaType,\r\n        source,\r\n        isRead,\r\n        ...markAsReadData,\r\n    })\r\n\r\n    if (fileIsLoading && fileProgress) {\r\n        return <FileProgress progress={fileProgress} />\r\n    }\r\n\r\n    if (!fileId) {\r\n        const attachmentText = t.INTERNAL_CHAT.chat_removedAttachment_label()\r\n        return (\r\n            <>\r\n                <div>\r\n                    [\r\n                    {attachmentText}\r\n                    {' '}\r\n                    <del data-testid=\"file-name\">{fileName}</del>\r\n                    ]\r\n                </div>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileError) {\r\n        return (\r\n            <>\r\n                <div data-testid=\"file-error\">{fileError}</div>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileType === 'attachment' || fileType === 'video') {\r\n        return (\r\n            <>\r\n                <WithAttachmentMaskAction\r\n                    fileId={fileId}\r\n                    fileIsMasked={fileIsMasked}\r\n                    canMask={canMask}\r\n                    globalInteractionId={globalInteractionId}\r\n                    interactionStepId={markAsReadData.itemInteractionStepId}\r\n                    contactId={markAsReadData.itemContactId}\r\n                >\r\n                    <AttachmentFileMessage\r\n                        ref={ref}\r\n                        fileName={fileName}\r\n                        fileLink={fileLink}\r\n                    />\r\n                </WithAttachmentMaskAction>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileType === 'audio') {\r\n        return (\r\n            <WithAttachmentMaskAction\r\n                fileId={fileId}\r\n                fileIsMasked={fileIsMasked}\r\n                canMask={canMask}\r\n                globalInteractionId={globalInteractionId}\r\n                interactionStepId={markAsReadData.itemInteractionStepId}\r\n                contactId={markAsReadData.itemContactId}\r\n            >\r\n                <AudioFileMessage\r\n                    fileLink={fileLink}\r\n                />\r\n            </WithAttachmentMaskAction>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WithAttachmentMaskAction\r\n                fileId={fileId}\r\n                fileIsMasked={fileIsMasked}\r\n                canMask={canMask}\r\n                globalInteractionId={globalInteractionId}\r\n                interactionStepId={markAsReadData.itemInteractionStepId}\r\n                contactId={markAsReadData.itemContactId}\r\n            >\r\n                <ImageFileMessage\r\n                    ref={ref as React.RefObject<HTMLImageElement>}\r\n                    fileName={fileName}\r\n                    fileLink={fileLink}\r\n                    senderName={senderName}\r\n                    timestamp={timestamp}\r\n                />\r\n            </WithAttachmentMaskAction>\r\n            <p className=\"mt-1 caption-xs text-neutral-fade\">{fileName}</p>\r\n            {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n        </>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"file\":\"agent_FileMessage_file_JZUYk\",\"isError\":\"agent_FileMessage_isError_gJF8O\",\"maskFilePopup\":\"agent_FileMessage_maskFilePopup_KMI7v\",\"maskedFileImageWrapper\":\"agent_FileMessage_maskedFileImageWrapper_TNxcX\",\"maskedAttachment\":\"agent_FileMessage_maskedAttachment_TqLyM\",\"selectionPopupOption\":\"agent_FileMessage_selectionPopupOption_wXL8h\",\"voice\":\"agent_FileMessage_voice_fmzfp\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {getExternalChatMessageDisplayName} from '../../../../../helpers'\r\nimport type {ExternalChatMessage, ExternalChatMessageFileData} from '../../../../../types'\r\nimport {isHistoryMessage} from '../../../../../types'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {WithOptionalNameAndAvatar} from '../WithOptionalNameAndAvatar'\r\nimport {FileMessageContent} from './FileMessageContent'\r\n\r\nimport styles from './FileMessage.module.less'\r\n\r\n\r\ntype FileMessageProps = {\r\n    message: ExternalChatMessage\r\n    fileData: ExternalChatMessageFileData\r\n    markAsReadData: MarkAsReadProps\r\n}\r\n\r\nexport const FileMessage: React.FC<FileMessageProps> = ({message, fileData, markAsReadData}) => {\r\n    const {fileError, fileType} = fileData\r\n    const {sessionId, domain, loginId, privileges} = useSessionState()\r\n    const session = useMemo(() => ({id: sessionId, domain, loginId}), [sessionId, domain, loginId])\r\n    const canMask = !!privileges.CAN_MASK_INTERACTION_CONTENT\r\n    const globalInteractionId = isHistoryMessage(message) ? message.globalInteractionId : undefined\r\n    const isAudioFile = fileType === 'audio'\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar\r\n            message={message}\r\n            className={tcn(styles.file, {\r\n                [styles.isError]: fileError,\r\n                [styles.voice]: isAudioFile,\r\n            })}\r\n        >\r\n            <FileMessageContent\r\n                timestamp={message.timestamp}\r\n                senderName={getExternalChatMessageDisplayName(message, formatFullName)}\r\n                fileData={fileData}\r\n                markAsReadData={markAsReadData}\r\n                canMask={canMask}\r\n                session={session}\r\n                globalInteractionId={globalInteractionId}\r\n            />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useHandleCancelInviteClick} from './useHandleCancelInviteClick'\r\n\r\n\r\ntype InviteMessageProps = {\r\n    message: ChatMessage\r\n}\r\n\r\nexport const InviteMessage: React.FC<InviteMessageProps> = React.memo(({message}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleCancelClick = useHandleCancelInviteClick(message)\r\n\r\n    return (\r\n        <div className=\"select-none pb-2.5\" data-testid=\"message-item\" data-outgoing=\"true\" data-invitation=\"true\">\r\n            <span className=\"mr-[5px]\">{t.EXTERNAL_CHAT.external_chat_party_inviting()}</span>\r\n            <SemanticButton\r\n                size=\"mini\"\r\n                negative\r\n                onClick={handleCancelClick}\r\n                tooltip={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                data-testid=\"cancel-invitation-button\"\r\n            >\r\n                {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n})\r\n","import {useCallback} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\n\r\n\r\nexport function useHandleCancelInviteClick(message: ChatMessage) {\r\n    const {itemId, partyId, inviteId} = message\r\n    const {removeInviteFromChat} = useInteractionChatStateMethods()\r\n\r\n    return useCallback(\r\n        function handleCancelClickCallback() {\r\n            removeInviteFromChat({\r\n                itemId: itemId,\r\n                partyId: partyId,\r\n                messageId: inviteId || '',\r\n            })\r\n        },\r\n        [inviteId, itemId, partyId, removeInviteFromChat],\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmImage} from '@bpinc/lib-external-ui-elements'\r\nimport {iconLocation} from '@bpinc/lib-icons'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    link?: string\r\n    latitude?: number\r\n    longitude?: number\r\n}\r\n\r\nconst googleMapsUrl = (latitude: number, longitude: number) => {\r\n    return `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`\r\n}\r\n\r\nexport const LocationMessage: React.FC<Props> = ({link, latitude, longitude}) => {\r\n\r\n    const {EXTERNAL_CHAT: i18n} = useLocalizationState('t')\r\n    const url = link || ((latitude && longitude) ? googleMapsUrl(latitude, longitude) : undefined)\r\n\r\n    return (\r\n        <SmImage\r\n            src={iconLocation}\r\n            title={i18n.location_message_icon_tooltip()}\r\n            as=\"a\"\r\n            href={url}\r\n            target=\"_blank\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {IconOutboundCampaign} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {getMessageId} from '../../../../helpers'\r\nimport type {HistoryOutboundMessagingCampaignMessage} from '../../../../types'\r\nimport {MessageContent} from './MessageContent'\r\nimport {MessageTopInfo} from './MessageTopInfo'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ntype OutboundMessagingCampaignMessageProps = {\r\n    message: HistoryOutboundMessagingCampaignMessage\r\n}\r\n\r\nexport const OutboundMessagingCampaignMessage: React.FC<OutboundMessagingCampaignMessageProps> = ({message}) => {\r\n    const {serviceName, serviceAddress, msg, timestamp} = message\r\n    const topInfo = `${serviceName} ${formatPhone(serviceAddress)}`\r\n    const id = getMessageId(message)\r\n\r\n    const sanitizedMessage = useChatMessageSanitizer({message: msg})\r\n\r\n    const messageInnerHTML = useInnerHTML(sanitizedMessage)\r\n\r\n    return (\r\n        <div\r\n            className={tcn(styles.messageBlock, styles.outgoing)}\r\n            data-testid=\"message-item\"\r\n            data-outgoing-campaign=\"true\"\r\n            data-outgoing=\"true\"\r\n        >\r\n            <div className={styles.messageWrapper}>\r\n                <MessageTopInfo\r\n                    direction=\"outgoing\"\r\n                    timestamp={timestamp}\r\n                    showName\r\n                    gapBeforeTime\r\n                    displayName={topInfo}\r\n                />\r\n                <section className={tcn(styles.message, styles.outgoing)}>\r\n                    <MessageContent messageId={id}>\r\n                        <span dangerouslySetInnerHTML={messageInnerHTML} />\r\n                    </MessageContent>\r\n                </section>\r\n            </div>\r\n            <IconOutboundCampaign className={styles.avatar} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {IconSendInvitation, Link} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface PageLinkMessageProps {\r\n    link: string\r\n    partyId?: string\r\n    title?: string\r\n}\r\n\r\nexport const PageLinkMessage: React.FC<PageLinkMessageProps> = ({\r\n    link,\r\n    title,\r\n    partyId,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const item = useActiveInteraction()\r\n    const partyData = item?.chatParties?.find(party => party.party_id === partyId)\r\n    const contactId = partyData?.contact_id\r\n    const contactData = useContact(contactId)?.data\r\n    const {formatFullName} = useFormatting()\r\n    const displayNameContact = formatFullName(contactData?.firstName, contactData?.lastName)\r\n    const partyName = formatFullName(partyData?.first_name, partyData?.last_name)\r\n    const externalChatName = formatFullName(item?.externalChatData?.firstName, item?.externalChatData?.lastName)\r\n    const displayNameText = displayNameContact || partyName || externalChatName || !!contactData?.phones?.length && contactData?.phones?.[0]?.phone\r\n        || !!contactData?.emails?.length && contactData?.emails[0]?.emailAddress || t.EXTERNAL_CHAT.display_name_placeholder()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center bg-transparent py-4\">\r\n            <div className=\"flex flex-wrap items-center justify-center\">\r\n                <IconSendInvitation className=\"mr-2 size-4 icon-default\" />\r\n                {displayNameText && (<span className=\"mr-1 font-semibold caption-s text-neutral-on-secondary\">{displayNameText}</span>)}\r\n                <span className=\"caption-s text-neutral-fade\">\r\n                    {t.ACTIVITY_HISTORY.navigate_to()}\r\n                </span>\r\n                <Link\r\n                    href={link}\r\n                    title={link}\r\n                    data-testid=\"link\"\r\n                    className=\"!caption-s\"\r\n                >\r\n                    {title || t.EXTERNAL_CHAT.external_chat_customer_navigates_to()}\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype VoiceTranscriptConfidenceProps = {\r\n    confidence: number\r\n    className?: string\r\n}\r\n\r\nfunction hsv2rgb(h: number, s: number, v: number) {\r\n    // adapted from http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/\r\n    let rgb, i, data = []\r\n    if (s === 0) {\r\n        rgb = [v, v, v]\r\n    } else {\r\n        h = h / 60\r\n        i = Math.floor(h)\r\n        data = [v * (1 - s), v * (1 - s * (h - i)), v * (1 - s * (1 - (h - i)))]\r\n        switch (i) {\r\n            case 0:\r\n                rgb = [v, data[2], data[0]]\r\n                break\r\n            case 1:\r\n                rgb = [data[1], v, data[0]]\r\n                break\r\n            case 2:\r\n                rgb = [data[0], v, data[2]]\r\n                break\r\n            case 3:\r\n                rgb = [data[0], data[1], v]\r\n                break\r\n            case 4:\r\n                rgb = [data[2], data[0], v]\r\n                break\r\n            default:\r\n                rgb = [v, data[0], data[1]]\r\n                break\r\n        }\r\n    }\r\n    return '#' + rgb.map(code => {\r\n        return ('0' + Math.round(code * 255).toString(16)).slice(-2)\r\n    }).join('')\r\n}\r\n\r\ntype ConfidenceGrade = 'high' | 'medium' | 'low'\r\n\r\nexport const VoiceTranscriptConfidence: React.FC<VoiceTranscriptConfidenceProps> = ({className, confidence}) => {\r\n\r\n    const {t} = useLocalizationState()\r\n    const color = hsv2rgb(Math.floor(confidence * 120), .66, 1)\r\n    const style = useMemo(() => ({backgroundColor: color}), [color])\r\n\r\n    const confidenceGrade: ConfidenceGrade = confidence > .7 ? 'high' : confidence > .4 ? 'medium' : 'low'\r\n    const confidencePercentage = Math.floor(confidence * 100)\r\n\r\n    const messages = useMemo<Record<ConfidenceGrade, string>>(() => ({\r\n        'high': t.ACTIVITY_HISTORY.call_message_transcript_confidence_high(),\r\n        'medium': t.ACTIVITY_HISTORY.call_message_transcript_confidence_medium(),\r\n        'low': t.ACTIVITY_HISTORY.call_message_transcript_confidence_low(),\r\n    }), [t])\r\n    const title = messages[confidenceGrade] + ` (${confidencePercentage}%)`\r\n\r\n    return (\r\n        <span\r\n            className={className}\r\n            style={style}\r\n            title={title}\r\n            data-testid=\"message-confidence\"\r\n            data-value={confidencePercentage}\r\n            data-confidence-low={confidenceGrade === 'low'}\r\n            data-confidence-medium={confidenceGrade === 'medium'}\r\n            data-confidence-high={confidenceGrade === 'high'}\r\n        />\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"plainMessage\":\"agent_PlainMessage_plainMessage_gEaYP\",\"sentiment\":\"agent_PlainMessage_sentiment_jQ32U\",\"sentimentLeft\":\"agent_PlainMessage_sentimentLeft_Uh6NW\",\"sentimentRight\":\"agent_PlainMessage_sentimentRight_kUWim\",\"visible\":\"agent_PlainMessage_visible_kcCDF\"};","import React from 'react'\r\n\r\nimport {CHAT_MESSAGE_ALLOWED_ATTRIBUTES, CHAT_MESSAGE_ALLOWED_TAGS} from '@bpinc/ad-constants'\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useChatSentimentsOn} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ExternalChatMessage} from '../../../../../types'\r\nimport {isChatMessage, isHistoryMessage, isHistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {VoiceTranscriptConfidence} from '../../VoiceTranscriptConfidence'\r\n\r\nimport styles from './PlainMessage.module.less'\r\n\r\n\r\ntype PlainMessageProps = {\r\n    message: ExternalChatMessage\r\n    markAsReadData: MarkAsReadProps\r\n}\r\n\r\nexport const PlainMessage: React.FC<PlainMessageProps> = ({\r\n    markAsReadData,\r\n    message,\r\n}) => {\r\n    const {\r\n        scrollNode,\r\n        itemGlobalInteractionId,\r\n        itemInteractionStepId,\r\n        isDIDChat,\r\n        itemContactId,\r\n        interactionItemId,\r\n    } = markAsReadData\r\n\r\n    const {msgId, userId} = message\r\n\r\n    const isHistory = isHistoryMessage(message)\r\n    const mediaType = isHistory ? message.mediaType : undefined\r\n    const globalInteractionId = isHistory ? message.globalInteractionId : undefined\r\n    const confidence = isHistoryVoiceTranscriptMessage(message) ? message.confidence : undefined\r\n\r\n    const isChat = isChatMessage(message)\r\n    const source = isChat ? message.source : undefined\r\n    const sentiment = isChat ? message.sentiment : undefined\r\n    const isRead = isChat ? message.isRead : undefined\r\n    const maskedText = isChat ? message.maskedText : undefined\r\n\r\n    const msg = isChat || isHistory ? message.msg : undefined\r\n\r\n    const sanitizedText = useChatMessageSanitizer({\r\n        message: msg,\r\n        allowedAttributes: CHAT_MESSAGE_ALLOWED_ATTRIBUTES,\r\n        allowedTags: CHAT_MESSAGE_ALLOWED_TAGS,\r\n    })\r\n    const messageInnerHTML = useInnerHTML(maskedText || sanitizedText)\r\n    const chatSentimentsOn = useChatSentimentsOn(interactionItemId)\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId,\r\n        historyMessageGlobalInteractionId: globalInteractionId,\r\n        scrollNode,\r\n        mediaType,\r\n        source,\r\n        isRead,\r\n        itemContactId,\r\n        isDIDChat,\r\n        itemInteractionStepId,\r\n        itemGlobalInteractionId,\r\n    })\r\n\r\n    return (\r\n        <div data-message-id={msgId} data-global-interaction-id={globalInteractionId ?? 'current'} ref={ref}>\r\n            {userId && sentiment && (\r\n                <Sentiment\r\n                    sentiment={sentiment}\r\n                    className={tcn({[styles.visible]: chatSentimentsOn}, styles.sentimentLeft)}\r\n                />\r\n            )}\r\n            {userId && confidence && (\r\n                <VoiceTranscriptConfidence confidence={confidence} />\r\n            )}\r\n\r\n            <span\r\n                dangerouslySetInnerHTML={messageInnerHTML}\r\n                className={styles.plainMessage}\r\n                data-testid=\"message-content\"\r\n            />\r\n\r\n            {!userId && sentiment && (\r\n                <Sentiment\r\n                    sentiment={sentiment}\r\n                    className={tcn({[styles.visible]: chatSentimentsOn}, styles.sentimentRight)}\r\n                />\r\n            )}\r\n            {!userId && confidence && (\r\n                <VoiceTranscriptConfidence confidence={confidence} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport {IconJoin, IconLeaveParty} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useGetSystemMessageIcon = () => {\r\n    return useCallback((message: ChatMessage) => {\r\n        switch (message.eventType) {\r\n            case 'external_chat_party_joined_new':\r\n                if (message.qmMode !== 'whisper') {\r\n                    return <IconJoin className=\"size-4 icon-default\" />\r\n                }\r\n                return null\r\n            case 'external_chat_party_left_new':\r\n                return <IconLeaveParty className=\"size-4 icon-default\" />\r\n            default:\r\n                return null\r\n        }\r\n    }, [])\r\n}\r\n\r\nconst useGetTypeReceivedData = () => {\r\n    const {t} = useLocalizationState()\r\n    return useCallback((message: string) => {\r\n        switch (message) {\r\n            case 'external_chat_file_received':\r\n                return t.EXTERNAL_CHAT.file()\r\n            case 'external_chat_contact_received':\r\n                return t.EXTERNAL_CHAT.contact()\r\n            case 'external_chat_url_received':\r\n                return t.EXTERNAL_CHAT.url()\r\n            default:\r\n                return null\r\n        }\r\n    }, [t.EXTERNAL_CHAT])\r\n}\r\n\r\nexport const useGetTextContentSystemMessage = () => {\r\n    const {t} = useLocalizationState()\r\n    const getTypeReceivedData = useGetTypeReceivedData()\r\n    return useCallback((msg: ChatMessage) => {\r\n        const name = `\"${msg.partyName}\"`\r\n        if (msg.needLocalization && msg.eventType && msg.partyName && msg.msg) {\r\n            switch (msg.eventType) {\r\n                case 'external_chat_party_joined_new':\r\n                case 'external_chat_party_left_new':\r\n                    return (\r\n                        <>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{msg.partyName}</span>\r\n                            <span className=\"caption-s text-neutral-fade\">{msg.msg}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_party_coaching':\r\n                    return (\r\n                        <>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{msg.partyName}</span>\r\n                            <span className=\"caption-s text-neutral-fade\">{t.EXTERNAL_CHAT.external_chat_party_coaching_new()}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_file_received':\r\n                case 'external_chat_contact_received':\r\n                case 'external_chat_url_received':\r\n                    return (\r\n                        <>\r\n                            <span className=\"caption-s text-neutral-fade\">{getTypeReceivedData(msg.eventType)}</span>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{name}</span>\r\n                            <span>{t.EXTERNAL_CHAT.received()}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_file_sent':\r\n                    return (\r\n                        <>\r\n                            <span className=\"caption-s text-neutral-fade\">{t.EXTERNAL_CHAT.external_chat_file_sent_new()}</span>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{name}</span>\r\n                        </>\r\n                    )\r\n                default:\r\n                    return <span className=\"caption-s text-neutral-fade\">{msg.msg}</span>\r\n            }\r\n\r\n        }\r\n    }, [getTypeReceivedData, t.EXTERNAL_CHAT])\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\n\r\nimport {useGetSystemMessageIcon, useGetTextContentSystemMessage} from './utils'\r\n\r\n\r\ntype SystemMessageProps = {\r\n    message: ChatMessage\r\n}\r\n\r\nexport const SystemMessage: React.FC<SystemMessageProps> = ({message}) => {\r\n    const getTextContentSystemMessage = useGetTextContentSystemMessage()\r\n    const getSystemMessageIcon = useGetSystemMessageIcon()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center pb-2.5\">\r\n            <div\r\n                className=\"flex flex-col\"\r\n                data-testid=\"message-item\"\r\n                data-system=\"true\"\r\n            >\r\n                <div className=\"flex items-center gap-2\">\r\n                    {getSystemMessageIcon(message)}\r\n                    <div className=\"flex items-center gap-1\">\r\n                        {getTextContentSystemMessage(message)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {\r\n    getExternalChatFileData,\r\n    isErrorExternalChatMessage,\r\n    isInviteExternalChatMessage,\r\n    isLocationExternalChatMessage,\r\n    isSystemExternalChatMessage,\r\n} from '../../../helpers'\r\nimport type {ChatScrollNodeType, ExternalChatMessageWithDate} from '../../../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isChatMessageDate,\r\n    isHistoryCallMessage,\r\n    isHistoryEmailMessage,\r\n    isHistoryOutboundMessagingCampaignMessage,\r\n    isHistoryRemoteAssistMessage,\r\n    isVoiceTranscriptSuggestion,\r\n} from '../../../types'\r\nimport {ActivityMessageGroup} from './messages/ActivityMessageGroup'\r\nimport {BotSuggestion} from './messages/BotSuggestion'\r\nimport {DateMessage} from './messages/DateMessage'\r\nimport {FileMessage} from './messages/FileMessage'\r\nimport {InviteMessage} from './messages/InviteMessage'\r\nimport {LocationMessage} from './messages/LocationMessage'\r\nimport {OutboundMessagingCampaignMessage} from './messages/OutboundMessagingCampaignMessage'\r\nimport {PageLinkMessage} from './messages/PageLinkMessage'\r\nimport {PlainMessage} from './messages/PlainMessage'\r\nimport {SystemMessage} from './messages/SystemMessage'\r\nimport {WithOptionalNameAndAvatar} from './messages/WithOptionalNameAndAvatar'\r\n\r\n\r\nexport type MarkAsReadProps = {\r\n    scrollNode: ChatScrollNodeType\r\n    itemInteractionStepId: string\r\n    itemContactId: string\r\n    isDIDChat: boolean\r\n    itemGlobalInteractionId: string\r\n    interactionItemId: string\r\n}\r\n\r\ntype ExternalChatMessageProps = MarkAsReadProps & {\r\n    message: ExternalChatMessageWithDate | VoiceTranscriptSuggestion\r\n}\r\n\r\nexport const ExternalChatMessage: React.FC<ExternalChatMessageProps> = React.memo(function ExternalChatMessage({\r\n    message,\r\n    scrollNode,\r\n    itemInteractionStepId,\r\n    itemContactId,\r\n    isDIDChat,\r\n    itemGlobalInteractionId,\r\n    interactionItemId,\r\n}) {\r\n    const markAsReadData = useMemo(() => ({scrollNode,\r\n        itemInteractionStepId,\r\n        itemContactId,\r\n        isDIDChat,\r\n        itemGlobalInteractionId,\r\n        interactionItemId}), [interactionItemId, isDIDChat, itemContactId, itemGlobalInteractionId, itemInteractionStepId, scrollNode])\r\n\r\n    const fileData = useMemo(() => {\r\n        if (isVoiceTranscriptSuggestion(message)) {\r\n            return\r\n        }\r\n        return getExternalChatFileData(message)\r\n    }, [message])\r\n\r\n    if (isVoiceTranscriptSuggestion(message)) {\r\n        return <BotSuggestion itemId={interactionItemId} direction=\"outgoing\" message={message} />\r\n    }\r\n\r\n    if (isChatMessageDate(message)) {\r\n        return <DateMessage message={message} />\r\n    }\r\n\r\n    if (isActivityMessageGroup(message)) {\r\n        return <ActivityMessageGroup message={message} />\r\n    }\r\n\r\n    if (isHistoryOutboundMessagingCampaignMessage(message)) {\r\n        return <OutboundMessagingCampaignMessage message={message} />\r\n    }\r\n\r\n    if (isHistoryCallMessage(message)) {\r\n        return (\r\n            <WithOptionalNameAndAvatar\r\n                messageClassName=\"w-full\"\r\n                className=\"min-w-[300px]\"\r\n                message={message}\r\n            >\r\n                {message.msg}\r\n            </WithOptionalNameAndAvatar>\r\n        )\r\n    }\r\n    if (isHistoryEmailMessage(message)) {\r\n        return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n    }\r\n\r\n    if (isChatMessage(message)) {\r\n        if (isSystemExternalChatMessage(message)) {\r\n            return <SystemMessage message={message} />\r\n        }\r\n        if (isInviteExternalChatMessage(message)) {\r\n            return <InviteMessage message={message} />\r\n        }\r\n        if (isErrorExternalChatMessage(message)) {\r\n            return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n        }\r\n        if (isLocationExternalChatMessage(message)) {\r\n            const {page, longitude, latitude} = message\r\n            return (\r\n                <WithOptionalNameAndAvatar message={message}>\r\n                    <LocationMessage link={page} longitude={longitude} latitude={latitude} />\r\n                </WithOptionalNameAndAvatar>\r\n            )\r\n        }\r\n\r\n        const {page, title, partyId} = message\r\n        if (page) {\r\n            return (\r\n                <WithOptionalNameAndAvatar\r\n                    message={message}\r\n                    isFullWidth\r\n                    withoutBorder\r\n                    messageClassName=\"w-full !border-none !bg-transparent after:content-none before:content-none\"\r\n                >\r\n                    <PageLinkMessage link={page} title={title} partyId={partyId} />\r\n                </WithOptionalNameAndAvatar>\r\n            )\r\n        }\r\n    }\r\n\r\n    if (fileData) {\r\n        return <FileMessage markAsReadData={markAsReadData} message={message} fileData={fileData} />\r\n    }\r\n\r\n    if (isHistoryRemoteAssistMessage(message)) {\r\n        return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n    }\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar message={message}>\r\n            <PlainMessage message={message} markAsReadData={markAsReadData} />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId} from '@bpinc/ad-interaction-state-methods'\r\nimport {ErrorBoundary} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {isVoiceTranscriptMessage, isVoiceTranscriptSuggestion} from '../../../types'\r\nimport {VirtualizedMessages} from '../VirtualizedMessages/VirtualizedMessages'\r\nimport {ErrorMessage} from './messages/ErrorMessage'\r\nimport {ExternalChatMessage} from './ExternalChatMessage'\r\n\r\n\r\nconst ErrorBoundaryFallback = <ErrorMessage>Broken message</ErrorMessage>\r\n\r\ntype VirtualizedExternalMessagesProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    type: ChatType\r\n    interactionStepId: string\r\n}\r\n\r\nexport const VirtualizedExternalMessages = React.memo<VirtualizedExternalMessagesProps>(\r\n    function VirtualizedExternalMessages({\r\n        itemId,\r\n        contactId,\r\n        scrollNode,\r\n        interactionStepId,\r\n        messages,\r\n        type,\r\n    }) {\r\n        const isDIDChat = useInteractionProp(itemId, item => item?.scenarioData?.isDID ?? false)\r\n        const globalInteractionId = useInteractionProp(itemId, getGlobalInteractionId) ?? ''\r\n        const renderMessage = useCallback((message: ChatCommonMessagesType) => {\r\n            if (isVoiceTranscriptMessage(message) && !isVoiceTranscriptSuggestion(message)) {\r\n                return null\r\n            }\r\n\r\n            return (\r\n                <div data-message=\"true\">\r\n                    <ErrorBoundary fallback={ErrorBoundaryFallback}>\r\n                        <ExternalChatMessage\r\n                            message={message}\r\n                            scrollNode={scrollNode}\r\n                            interactionItemId={itemId}\r\n                            itemContactId={contactId}\r\n                            itemInteractionStepId={interactionStepId}\r\n                            itemGlobalInteractionId={globalInteractionId}\r\n                            isDIDChat={isDIDChat}\r\n                        />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            )\r\n        }, [contactId, globalInteractionId, interactionStepId, isDIDChat, itemId, scrollNode])\r\n\r\n        return (\r\n            <VirtualizedMessages\r\n                key={`${itemId}_${type}`}\r\n                itemId={itemId}\r\n                contactId={contactId}\r\n                type={type}\r\n                messages={messages}\r\n                renderMessage={renderMessage}\r\n                scrollNode={scrollNode}\r\n            />\r\n        )\r\n    })\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"agent_ExternalMessages_messagesContainer_mpPuU\",\"messages\":\"agent_ExternalMessages_messages_istRY\"};","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId, getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport type {SelectionOrigin} from '@bpinc/lib-ui-elements'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi, useInteractionUIChatType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatProps, ChatScrollNodeType} from '../../../types'\r\nimport {isExternalChatMessageDate, isHistoryMessage, isVoiceTranscriptMessage} from '../../../types'\r\nimport {ChatMessagesSelectionActions} from '../ChatMessagesActions'\r\nimport {useBotSuggestionsByType} from '../VoiceTranscript/selectors'\r\nimport {Dropzone} from './Dropzone'\r\nimport {ScrollToFirstUnreadBadge} from './ScrollToFirstUnreadBadge'\r\nimport {useNormalizedMessagesWithDates} from './useMessages'\r\nimport {VirtualizedExternalMessages} from './VirtualizedExternalMessages'\r\n\r\nimport styles from './ExternalMessages.module.less'\r\n\r\n\r\nexport const ExternalMessages: React.FC<ChatProps> = React.memo(function ExternalMessages({\r\n    itemId,\r\n}) {\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const [scrollNode, setScrollNode] = useState<ChatScrollNodeType>(null)\r\n\r\n    const type = useInteractionUIChatType(itemId)\r\n    const interaction = useInteraction(itemId)\r\n    const contactId = getContactId(interaction)\r\n    const interactionStepId = getInteractionStepId(interaction)\r\n\r\n    const botSuggestionsByType = useBotSuggestionsByType(itemId)\r\n    const botSuggestions = useMemo(() => {\r\n        switch (type) {\r\n            case 'calls':\r\n                return botSuggestionsByType.voice\r\n            case 'messages':\r\n                return botSuggestionsByType.chat\r\n            default:\r\n                return [...botSuggestionsByType.voice, ...botSuggestionsByType.chat]\r\n        }\r\n\r\n    }, [botSuggestionsByType.chat, botSuggestionsByType.voice, type])\r\n\r\n    const {messagesWithDates} = useNormalizedMessagesWithDates(\r\n        type,\r\n        contactId,\r\n        itemId,\r\n        botSuggestions,\r\n    )\r\n\r\n    const itemIsACW = useInteractionProp(itemId, isAfterCallWork)\r\n\r\n    const itemsIds = useMemo(() => {\r\n        return messagesWithDates\r\n            .filter(isSelectableMessage)\r\n            .map(getMessageId)\r\n    }, [messagesWithDates])\r\n    const itemsIdsRef = useAsRef(itemsIds)\r\n    const itemsProvider = useCallback(() => itemsIdsRef.current, [itemsIdsRef])\r\n    const onItemSelect = useCallback((id: string, selectionOrigin: SelectionOrigin | undefined) => {\r\n        if (selectionOrigin === 'keys') {\r\n            scrollerApi?.scrollTo(id, 'center')\r\n        }\r\n    }, [scrollerApi])\r\n\r\n    return (\r\n        <SelectionContainer\r\n            startFrom=\"bottom\"\r\n            className={styles.messagesContainer}\r\n            itemsListProvider={itemsProvider}\r\n            onItemSelect={onItemSelect}\r\n        >\r\n            {!itemIsACW && <Dropzone itemId={itemId} />}\r\n            <div ref={setScrollNode} className={styles.messages}>\r\n                <ChatMessagesSelectionActions messages={messagesWithDates} interactionId={itemId} scrollContainer={scrollNode} withMaskAction>\r\n                    <VirtualizedExternalMessages\r\n                        messages={messagesWithDates}\r\n                        scrollNode={scrollNode}\r\n                        itemId={itemId}\r\n                        contactId={contactId}\r\n                        type={type}\r\n                        interactionStepId={interactionStepId}\r\n                    />\r\n                </ChatMessagesSelectionActions>\r\n            </div>\r\n            <ScrollToFirstUnreadBadge itemId={itemId} scrollNode={scrollNode} />\r\n        </SelectionContainer>\r\n    )\r\n})\r\n\r\nfunction isSelectableMessage(message: ChatCommonMessagesType) {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        return true\r\n    }\r\n\r\n    return !(isExternalChatMessageDate(message) || (isHistoryMessage(message) && message.mediaType === 'REMOTE_ASSIST'))\r\n\r\n\r\n}\r\n\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\nimport {createContext, useContext} from 'use-context-selector'\r\n\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren, StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {VoiceTranscriptSearchResultType} from '../../../types'\r\n\r\n\r\ninterface VoiceTranscriptUIState {\r\n    search: string\r\n    setSearch: StateSetter<string>\r\n\r\n    searchResult: VoiceTranscriptSearchResultType | undefined\r\n    setSearchResult: StateSetter<VoiceTranscriptSearchResultType | undefined>\r\n\r\n    showBotSuggestions: boolean\r\n    toggleBotSuggestions: Toggle\r\n\r\n    showSMS: boolean\r\n    toggleSMS: Toggle\r\n\r\n    showTranscript: boolean\r\n    toggleTranscript: Toggle\r\n}\r\n\r\nconst noop = () => {}\r\n\r\nconst initialState: VoiceTranscriptUIState = {\r\n    search: '',\r\n    setSearch: noop,\r\n\r\n    searchResult: undefined,\r\n    setSearchResult: noop,\r\n\r\n    showBotSuggestions: true,\r\n    toggleBotSuggestions: noop,\r\n\r\n    showSMS: true,\r\n    toggleSMS: noop,\r\n\r\n    showTranscript: true,\r\n    toggleTranscript: noop,\r\n}\r\n\r\nconst VoiceTranscriptUIContext = createContext<VoiceTranscriptUIState>(initialState)\r\n\r\nVoiceTranscriptUIContext.displayName = 'VoiceTranscriptUIContext'\r\n\r\nexport const VoiceTranscriptStateProvider: FCWithChildren<ReactElement> = ({children}) => {\r\n    const [search, setSearch] = useState<VoiceTranscriptUIState['search']>(initialState.search)\r\n    const [searchResult, setSearchResult] = useState<VoiceTranscriptUIState['searchResult']>(undefined)\r\n    const {value: showBotSuggestions, toggle: toggleBotSuggestions} = useBoolean(initialState.showBotSuggestions)\r\n    const {value: showSMS, toggle: toggleSMS} = useBoolean(initialState.showSMS)\r\n    const {value: showTranscript, toggle: toggleTranscript} = useBoolean(initialState.showTranscript)\r\n\r\n    const contextValue = useMemo(function memoizeContextValue() {\r\n        return {\r\n            search,\r\n            setSearch,\r\n\r\n            searchResult,\r\n            setSearchResult,\r\n\r\n            showBotSuggestions,\r\n            toggleBotSuggestions,\r\n\r\n            showSMS,\r\n            toggleSMS,\r\n\r\n            showTranscript,\r\n            toggleTranscript,\r\n        }\r\n    }, [search, searchResult, showBotSuggestions, showSMS, showTranscript, toggleBotSuggestions, toggleSMS, toggleTranscript])\r\n\r\n    return <VoiceTranscriptUIContext.Provider value={contextValue}>{children}</VoiceTranscriptUIContext.Provider>\r\n}\r\n\r\nexport function useVoiceTranscriptUIState() {\r\n    return useContext(VoiceTranscriptUIContext)\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {\r\n    ButtonIcon,\r\n    IconIntentFilled,\r\n    IconMessageExternal,\r\n    IconVoiceTranscript,\r\n    SearchField,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SearchResultsSwitcher} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {VoiceTranscriptMessageContentMap, VoiceTranscriptSearchResultType} from '../../../types'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype FiltersProps = {\r\n    className?: string\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    itemId: string\r\n}\r\n\r\nexport const Filters: FC<FiltersProps> = ({className, messagesContent, itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        search,\r\n        setSearch,\r\n        setSearchResult,\r\n        showBotSuggestions,\r\n        showSMS,\r\n        showTranscript,\r\n        toggleBotSuggestions,\r\n        toggleSMS,\r\n        toggleTranscript,\r\n    } = useVoiceTranscriptUIState()\r\n\r\n    const [searchLocal, setSearchLocal] = useState(search)\r\n    const [highlightIndex, setHighlightIndex] = useState<number | undefined>(undefined)\r\n\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n\r\n    const setDebouncedSearch = useMemo(() => debounce((innerValue: string) => {\r\n        setSearch(innerValue)\r\n    }, 500), [setSearch])\r\n\r\n    const filteredResults = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            if (!search) {\r\n                return []\r\n            }\r\n            return Object.entries(messagesContent).reduce<VoiceTranscriptSearchResultType[]>((result, [messageId, {marksCount}]) => {\r\n                const markers = Array.from({length: marksCount}).map((_, index) => ({\r\n                    messageId,\r\n                    index,\r\n                })).reverse()\r\n                return [...markers, ...result]\r\n            }, [])\r\n\r\n        },\r\n        [search, messagesContent],\r\n    )\r\n\r\n    useEffect(() => {\r\n        setDebouncedSearch(searchLocal)\r\n    }, [searchLocal, setDebouncedSearch])\r\n\r\n    useEffect(() => {\r\n        if (highlightIndex) {\r\n            const searchResult = filteredResults[highlightIndex - 1]\r\n            setSearchResult(searchResult)\r\n            if (searchResult && searchResult.messageId) {\r\n                scrollerApi?.scrollTo(searchResult.messageId, 'center')\r\n            }\r\n        } else {\r\n            setSearchResult(undefined)\r\n        }\r\n    }, [filteredResults, scrollerApi, highlightIndex, setSearchResult])\r\n\r\n\r\n    const handleHighlight = useCallback(\r\n        function handleHighlightedMessageCallback(position: number) {\r\n            setHighlightIndex(position)\r\n        },\r\n        [],\r\n    )\r\n\r\n    const handleSearch = useCallback(\r\n        function handleSearchCallback(evt: ChangeEvent<HTMLInputElement>) {\r\n            setSearchLocal(evt.target.value)\r\n            setHighlightIndex(1)\r\n        },\r\n        [],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn('flex items-center gap-2 px-4 py-2 bg-primary-background', className)}>\r\n            <SearchField\r\n                value={searchLocal}\r\n                onChange={handleSearch}\r\n                layoutClassName=\"grow\"\r\n                placeholder={t.EXTERNAL_CHAT.search_transcript()}\r\n            />\r\n            {!!searchLocal &&\r\n              <SearchResultsSwitcher current={highlightIndex || 0} total={filteredResults.length} onChange={handleHighlight} />\r\n            }\r\n            <div className=\"flex items-center gap-0.5\">\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showBotSuggestions}\r\n                    onClick={toggleBotSuggestions}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.bot_suggestion_btn_tooltip()}\r\n                >\r\n                    <IconIntentFilled className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showSMS}\r\n                    onClick={toggleSMS}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.sms_btn_tooltip()}\r\n                >\r\n                    <IconMessageExternal className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.transcript_btn_tooltip()}\r\n                    disabled={!showTranscript}\r\n                    onClick={toggleTranscript}\r\n                    className=\"rounded-xs\"\r\n                >\r\n                    <IconVoiceTranscript className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"agent_VoiceTranscript_root_rV7hU\",\"list\":\"agent_VoiceTranscript_list_OyGEE\",\"selectionContainer\":\"agent_VoiceTranscript_selectionContainer_ftUaB\",\"filters\":\"agent_VoiceTranscript_filters_Ik63Q\",\"filtersRight\":\"agent_VoiceTranscript_filtersRight_hhmng\",\"searchInput\":\"agent_VoiceTranscript_searchInput_eIydo\",\"filterButton\":\"agent_VoiceTranscript_filterButton_fuvI7\",\"mark\":\"agent_VoiceTranscript_mark_t17ja\",\"highlighted\":\"agent_VoiceTranscript_highlighted_6A15l\"};","import {useMemo} from 'react'\r\nimport {orderBy} from 'lodash-es'\r\n\r\nimport type {ChatMessage as ChatMessageType, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {chatMessageToVoiceTranscript} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype UseVoiceTranscriptVisibleMessagesParams = {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[]\r\n    botSuggestions: VoiceTranscriptSuggestion[]\r\n    chatMessages: ChatMessageType[]\r\n}\r\nexport function useVoiceTranscriptVisibleMessages({chatMessages, voiceTranscript, botSuggestions}: UseVoiceTranscriptVisibleMessagesParams) {\r\n    const {showBotSuggestions, showTranscript, showSMS} = useVoiceTranscriptUIState()\r\n\r\n    const visibleMessages = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            const allMessages = showSMS\r\n                ? orderBy([...voiceTranscript, ...botSuggestions, ...getSMSMessagesForTranscript()], 'endTime')\r\n                : [...voiceTranscript]\r\n\r\n            return allMessages.filter(m => {\r\n                return filterByType(m.type)\r\n            })\r\n\r\n            function filterByType(type: VoiceTranscriptMessageType) {\r\n                const allowType = {\r\n                    voiceTranscriptMessage: showTranscript,\r\n                    suggestion: showBotSuggestions,\r\n                    chatMessage: showSMS,\r\n                }\r\n\r\n                return allowType[type]\r\n            }\r\n\r\n            function getSMSMessagesForTranscript(): VoiceTranscriptCommonMessage[] {\r\n                return chatMessages.filter(message => message.displayType === 'message' || message.displayType === 'error').map(chatMessageToVoiceTranscript)\r\n            }\r\n        },\r\n\r\n\r\n        [botSuggestions, chatMessages, showBotSuggestions, showSMS, showTranscript, voiceTranscript],\r\n    )\r\n\r\n    return visibleMessages\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ChatScrollNodeType} from '../../../../types'\r\nimport type {MessageAdditionalProps} from './Message'\r\nimport {Message} from './Message'\r\n\r\n\r\ntype ChatMessageProps = MessageAdditionalProps & {\r\n    itemContactId?: string\r\n    itemInteractionStepId?: string\r\n    isDIDChat: boolean\r\n    scrollNode: ChatScrollNodeType\r\n    message: ChatSessionTranscriptMessage\r\n}\r\nexport const ChatMessage: FC<ChatMessageProps> = ({\r\n    itemContactId = '',\r\n    itemInteractionStepId = '',\r\n    scrollNode,\r\n    isDIDChat,\r\n    message,\r\n    ...restProps\r\n}) => {\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId: message.msgId,\r\n        itemInteractionStepId,\r\n        itemContactId,\r\n\r\n        scrollNode,\r\n        source: message.chatMessageData.source,\r\n        isRead: message.chatMessageData.isRead,\r\n        isDIDChat,\r\n    })\r\n\r\n    return <Message message={message} {...restProps} ref={ref} />\r\n}\r\n","import type {FC, ReactNode} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\ntype SearchResultHighlightProps = {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const SearchResultHighlight: FC<SearchResultHighlightProps> = ({messageId, children}) => {\r\n    const {searchResult} = useVoiceTranscriptUIState()\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (ref.current && searchResult && searchResult.messageId === messageId) {\r\n            const highlightedMarkElem = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            highlightedMarkElem.classList.add(styles.highlighted)\r\n\r\n            const markElement = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            markElement?.scrollIntoView({block: 'center'})\r\n\r\n            return () => highlightedMarkElem.classList.remove(styles.highlighted)\r\n        }\r\n    }, [messageId, searchResult])\r\n\r\n    return (\r\n        <div ref={ref} data-message-highlight={messageId}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType, VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {isVoiceTranscriptMessage} from '../../../types'\r\nimport {VirtualizedMessages} from '../VirtualizedMessages/VirtualizedMessages'\r\nimport {ChatMessage} from './messages/ChatMessage'\r\nimport {Message} from './messages/Message'\r\nimport {SearchResultHighlight} from './SearchResultHighlight'\r\n\r\n\r\ntype VirtualizedVoiceTranscriptMessagesProps = {\r\n    messages: VoiceTranscriptCommonMessage[]\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    interactionStepId: string\r\n}\r\n\r\nexport const VirtualizedVoiceTranscriptMessages = React.memo<VirtualizedVoiceTranscriptMessagesProps>(\r\n    function VirtualizedVoiceTranscriptMessages({\r\n        itemId,\r\n        contactId,\r\n        scrollNode,\r\n        messages,\r\n        interactionStepId,\r\n        messagesContent,\r\n    }) {\r\n        const isDIDChat = useInteractionProp(itemId, item => item?.scenarioData?.isDID ?? false)\r\n\r\n        const renderMessage = useCallback((message: ChatCommonMessagesType) => {\r\n            if (!isVoiceTranscriptMessage(message)) {\r\n                return null\r\n            }\r\n\r\n            const messageId = getMessageId(message)\r\n            const messageData = messagesContent[messageId]\r\n\r\n            if (!messageData) {\r\n                return null\r\n            }\r\n\r\n            const direction =\r\n                message.isSelf || message.type === 'suggestion'\r\n                    ? 'outgoing'\r\n                    : 'incoming'\r\n\r\n            return (\r\n                <SearchResultHighlight messageId={messageId}>\r\n                    <div data-message=\"true\">\r\n                        {\r\n                            isCurrentChatTranscriptMessage(message) ? (\r\n                                <ChatMessage\r\n                                    isDIDChat={isDIDChat}\r\n                                    scrollNode={scrollNode}\r\n                                    itemContactId={contactId}\r\n                                    itemInteractionStepId={interactionStepId}\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            ) : (\r\n                                <Message\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </SearchResultHighlight>\r\n            )\r\n        }, [contactId, interactionStepId, isDIDChat, itemId, messagesContent, scrollNode])\r\n\r\n        return (\r\n            <VirtualizedMessages\r\n                key={`${itemId}_transcript`}\r\n                itemId={itemId}\r\n                contactId={contactId}\r\n                type=\"transcript\"\r\n                messages={messages}\r\n                renderMessage={renderMessage}\r\n                scrollNode={scrollNode}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport type {ChatMessage as ChatMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId, getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesSelectionActions} from '../ChatMessagesActions'\r\nimport {Filters} from './Filters'\r\nimport {useVoiceTranscriptMessagesContentMap} from './useVoiceTranscriptMessagesContentMap'\r\nimport {useVoiceTranscriptVisibleMessages} from './useVoiceTranscriptVisibleMessages'\r\nimport {VirtualizedVoiceTranscriptMessages} from './VirtualizedVoiceTranscriptMessages'\r\n\r\n\r\ninterface VoiceTranscriptProps {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[] | undefined\r\n    botSuggestions: VoiceTranscriptSuggestion[] | undefined\r\n    chatMessages: ChatMessageType[] | undefined\r\n    itemId: string\r\n    className?: string\r\n    filtersClassName?: string\r\n}\r\n\r\nconst emptyChatMessages: ChatMessageType[] = []\r\nconst emptyTranscript: VoiceTranscriptCommonMessage[] = []\r\nconst emptySuggestions: VoiceTranscriptSuggestion[] = []\r\n\r\nexport const VoiceTranscript: FC<VoiceTranscriptProps> = ({\r\n    chatMessages = emptyChatMessages,\r\n    voiceTranscript = emptyTranscript,\r\n    botSuggestions = emptySuggestions,\r\n    itemId,\r\n    className,\r\n    filtersClassName,\r\n}) => {\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const [scrollNode, setScrollNode] = useState<ChatScrollNodeType>(null)\r\n    const interaction = useInteraction(itemId)\r\n    const contactId = getContactId(interaction)\r\n    const interactionStepId = getInteractionStepId(interaction)\r\n\r\n    const visibleMessages = useVoiceTranscriptVisibleMessages({voiceTranscript, chatMessages, botSuggestions})\r\n    const messagesContent = useVoiceTranscriptMessagesContentMap(visibleMessages, itemId)\r\n\r\n    const itemsIds = useMemo(() => visibleMessages.map(getMessageId), [visibleMessages])\r\n    const itemsIdsRef = useAsRef(itemsIds)\r\n    const itemsProvider = useCallback(() => itemsIdsRef.current, [itemsIdsRef])\r\n    const onItemSelect = useCallback((id: string) => {\r\n        scrollerApi?.scrollTo(id, 'center')\r\n    }, [scrollerApi])\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-col', className)}>\r\n            <Filters className={filtersClassName} messagesContent={messagesContent} itemId={itemId} />\r\n            <SelectionContainer\r\n                startFrom=\"bottom\"\r\n                className=\"mt-1 flex h-0 flex-auto flex-col\"\r\n                itemsListProvider={itemsProvider}\r\n                onItemSelect={onItemSelect}\r\n            >\r\n                <div\r\n                    className=\"relative mr-1.5 flex-auto overflow-y-auto overflow-x-hidden pl-4 pr-2\"\r\n                    ref={setScrollNode}\r\n                >\r\n                    <ChatMessagesSelectionActions messages={visibleMessages} interactionId={itemId} scrollContainer={scrollNode}>\r\n                        <VirtualizedVoiceTranscriptMessages\r\n                            itemId={itemId}\r\n                            contactId={contactId}\r\n                            messages={visibleMessages}\r\n                            interactionStepId={interactionStepId}\r\n                            scrollNode={scrollNode}\r\n                            messagesContent={messagesContent}\r\n                        />\r\n                    </ChatMessagesSelectionActions>\r\n                </div>\r\n            </SelectionContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {normalizeByUrlParser} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {highlightHTML} from '@bpinc/lib-html-utils'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {parseTranscriptLinksAsHTML} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\nexport function useVoiceTranscriptMessagesContentMap(messages: VoiceTranscriptCommonMessage[], itemId: string) {\r\n    const {search} = useVoiceTranscriptUIState()\r\n\r\n    return useMemo(() => {\r\n        return messages.reduce<VoiceTranscriptMessageContentMap>((result, message) => {\r\n            const {format = 'TEXT'} = message\r\n            const id = getMessageId(message)\r\n            let text = message.text\r\n\r\n            const isCurrentChatMessage = isCurrentChatTranscriptMessage(message)\r\n            if (isCurrentChatMessage) {\r\n                text = normalizeByUrlParser(message.text)\r\n            }\r\n\r\n            const parsedText = format === 'TEXT'\r\n                ? text\r\n                : parseTranscriptLinksAsHTML({\r\n                    text: message.text,\r\n                    target: itemId,\r\n                    url: message.suggestionURL || '',\r\n                })\r\n\r\n\r\n            const content = highlightHTML({html: parsedText, textToHighlight: search, className: styles.mark})\r\n            const marksCount = (content.match(new RegExp(escapeRegExp(styles.mark), 'g')) || []).length\r\n\r\n            result[id] = {\r\n                content,\r\n                marksCount,\r\n                isLink: isLinkSuggestion(message),\r\n                isHTML: isHTMLSuggestion(message),\r\n            }\r\n\r\n            return result\r\n        }, {})\r\n    }, [itemId, messages, search])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedCallItem} from '@bpinc/ad-interaction-state-methods'\r\n\r\nimport {useMessagesList} from '../../../hooks/useMessagesList'\r\nimport type {ChatProps} from '../../../types'\r\nimport {VoiceTranscript, VoiceTranscriptStateProvider} from './index'\r\nimport {useBotSuggestions} from './selectors'\r\n\r\n\r\nexport const VoiceTranscriptMessages: React.FC<ChatProps> = React.memo(function ExternalMessages({\r\n    itemId,\r\n}) {\r\n    const callItem = useInteractionStateSelector(state => getAssociatedCallItem({item: state.items.find(i => i.id === itemId), items: state.items}))\r\n    const botSuggestions = useBotSuggestions(itemId)\r\n    const {messagesList} = useMessagesList(itemId)\r\n\r\n    if (!callItem) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <VoiceTranscriptStateProvider>\r\n            <VoiceTranscript\r\n                botSuggestions={botSuggestions}\r\n                voiceTranscript={callItem?.voiceTranscript}\r\n                chatMessages={messagesList}\r\n                itemId={callItem?.id}\r\n            />\r\n        </VoiceTranscriptStateProvider>\r\n    )\r\n})\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconArrowDown8, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {getChannelImageIcon, PhoneOption} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useInitializeDefaultChannelEffect} from './useInitializeDefaultChannelEffect'\r\n\r\n\r\ninterface ChannelSelectorProps {\r\n    disabled?: boolean\r\n}\r\n\r\nexport const ChannelSelector: React.FC<ChannelSelectorProps> = React.memo(\r\n    function ChannelSelector({disabled}) {\r\n        const itemId = useInteractionId()\r\n\r\n        useInitializeDefaultChannelEffect()\r\n\r\n        const {channelOptions, getSelectedChannel, getSelectedPhone, setSelectedChannel} =\r\n            useChannelState()\r\n\r\n        const selectedPhone = getSelectedPhone(itemId)\r\n        const selectedChannel = getSelectedChannel(itemId)\r\n        /*\r\n         * Use effect that ensures a valid channel is selected when the channel options change.\r\n         * If no channel is currently selected or the selected channel is not present in the updated\r\n         * options, then the first option is selected as the new current channel.\r\n         */\r\n        useEffect(\r\n            function selectFirstValidChannel() {\r\n                if (\r\n                    channelOptions.length &&\r\n                    (!selectedChannel?.value ||\r\n                        channelOptions.every(\r\n                            o => o.value !== selectedChannel.value,\r\n                        ))\r\n                ) {\r\n                    setSelectedChannel(itemId, channelOptions[0])\r\n                }\r\n            },\r\n            [channelOptions, itemId, selectedChannel?.value, setSelectedChannel],\r\n        )\r\n\r\n\r\n        const show = useBoolean()\r\n\r\n        useEscapeManager(show.setFalse, {enabled: show.value})\r\n\r\n        if (!channelOptions.length) {\r\n            return null\r\n        }\r\n\r\n        const SelectedIcon = getChannelImageIcon(selectedChannel?.value)\r\n        const finalDisabled =\r\n            disabled ||\r\n            (channelOptions.length < 2 &&\r\n                (channelOptions[0]?.phones?.length ?? 0) < 2)\r\n\r\n        return (\r\n            <TriggerDropdown\r\n                open={show.value}\r\n                onOpenChange={show.toggle}\r\n                disabled={finalDisabled}\r\n                className=\"min-w-[168px]\"\r\n                modal={false}\r\n                side=\"top\"\r\n                onEscapeKeyDown={e => {\r\n                    e.stopPropagation()\r\n                }}\r\n                align=\"start\"\r\n                data-testid=\"channel-selector\"\r\n                options={\r\n                    <>\r\n                        {channelOptions.map(channel => {\r\n                            function renderChannel() {\r\n                                const Icon = getChannelImageIcon(channel.value)\r\n                                return (\r\n                                    <>\r\n                                        {Icon && (\r\n                                            <Icon className=\"icon-neutral\" />\r\n                                        )}\r\n                                        {channel.text}\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                            return channel.phones ? (\r\n                                <TriggerDropdown.Sub key={channel.value}>\r\n                                    <TriggerDropdown.SubTrigger contentClassName=\"flex items-center gap-2\">\r\n                                        {renderChannel()}\r\n                                    </TriggerDropdown.SubTrigger>\r\n                                    <TriggerDropdown.SubContent>\r\n                                        {channel.phones.map(phone => (\r\n                                            <TriggerDropdown.Item\r\n                                                asChild={false}\r\n                                                data-selected={phone.id === selectedPhone?.id}\r\n                                                aria-selected={phone.id === selectedPhone?.id}\r\n                                                onClick={() => {\r\n                                                    setSelectedChannel(\r\n                                                        itemId,\r\n                                                        channel,\r\n                                                        phone.id,\r\n                                                    )\r\n                                                }}\r\n                                                key={phone.id}\r\n                                            >\r\n                                                <PhoneOption\r\n                                                    value={phone.phone}\r\n                                                    type={phone.type}\r\n                                                />\r\n                                            </TriggerDropdown.Item>\r\n                                        ))}\r\n                                    </TriggerDropdown.SubContent>\r\n                                </TriggerDropdown.Sub>\r\n                            ) : (\r\n                                <TriggerDropdown.Item\r\n                                    onClick={() => {\r\n                                        setSelectedChannel(itemId, channel)\r\n                                    }}\r\n                                    key={channel.value}\r\n                                    asChild={false}\r\n                                    contentClassName=\"flex gap-2\"\r\n                                >\r\n                                    {renderChannel()}\r\n                                </TriggerDropdown.Item>\r\n                            )\r\n                        })}\r\n                    </>\r\n                }\r\n            >\r\n                <CircleButton className=\"group flex w-auto shrink-0 gap-0.5 p-[7.5px]\">\r\n                    {SelectedIcon && <SelectedIcon />}\r\n                    {!finalDisabled && (\r\n                        <IconArrowDown8 className=\"group-data-[state=open]:rotate-180\" />\r\n                    )}\r\n                </CircleButton>\r\n            </TriggerDropdown>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, hasMultiplyPhones} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport type {ChannelOption} from '../../../channel-context/types'\r\n\r\n\r\nexport function useInitializeDefaultChannelEffect() {\r\n    const itemId = useInteractionId()\r\n    const itemChannel = useAssociatedChatInteractionProp(itemId, getChannel)\r\n    const phoneNumber = useAssociatedChatInteractionProp(itemId, chatActiveItem => chatActiveItem?.displayData?.number)\r\n    const itemHasMultiplyPhones = useAssociatedChatInteractionProp(itemId, hasMultiplyPhones)\r\n\r\n    const {isTouched, setIsTouched, channelOptions, setSelectedChannel} = useChannelState()\r\n\r\n    //-------Initialize default channel-----//\r\n    /* based on item's multiply phones and own channel */\r\n    const defaultChannel = useMemo(\r\n        function memoizeDefaultChannel() {\r\n            if (itemChannel) {\r\n                return itemHasMultiplyPhones ? getChannelWhenMultiplyPhones() : getChannelWhenOnePhone()\r\n            }\r\n\r\n            if (itemHasMultiplyPhones && phoneNumber) {\r\n                return getChannelWhenMultiplyPhones()\r\n            }\r\n\r\n            return getSMSChannel()\r\n\r\n            function getChannelWhenMultiplyPhones() {\r\n                return (\r\n                    channelOptions.find((item: ChannelOption) =>\r\n                        !itemChannel || itemChannel === 'sms'\r\n                            ? new RegExp(escapeRegExp(phoneNumber) ?? '').test(item.value)\r\n                            : item.value === itemChannel,\r\n                    ) || channelOptions[0]\r\n                )\r\n            }\r\n\r\n            function getChannelWhenOnePhone() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === itemChannel)\r\n            }\r\n\r\n            function getSMSChannel() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === 'sms')\r\n            }\r\n        },\r\n        [itemChannel, itemHasMultiplyPhones, phoneNumber, channelOptions],\r\n    )\r\n\r\n    const currentItemTouched = isTouched(itemId)\r\n\r\n    useEffect(function selecteDefaultChannel() {\r\n        if (!currentItemTouched && defaultChannel) {\r\n            setSelectedChannel(itemId, defaultChannel)\r\n        }\r\n    }, [currentItemTouched, defaultChannel, itemId, setIsTouched, setSelectedChannel])\r\n\r\n}\r\n","import type {FormEvent, SyntheticEvent} from 'react'\r\nimport React, {useRef} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {CircleButton, FieldFrame, IconSendFilled} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {AttachmentsList, ContentEditable} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useAgentTypingDetect} from './useAgentTypingDetect'\r\nimport {useAttachmentsList} from './useAttachmentsList'\r\nimport {useHasMultipleLines} from './useHasMultipleLines'\r\n\r\n\r\ntype ChatTextAreaProps = {\r\n    currentMessage: string\r\n    handleKeyDown(evt: SyntheticEvent): void\r\n    handleChange(evt: FormEvent<HTMLElement>, value?: string): void\r\n    sendCurrentMessage: () => void\r\n    disabled?: boolean\r\n    interactionStepId?: string\r\n    itemId: string\r\n    isExternalChat?: boolean\r\n}\r\n\r\nexport const TEXT_AREA_DATA_ID = 'chat-input'\r\n\r\nexport const ChatTextArea: React.FC<ChatTextAreaProps> = React.memo(\r\n    function TextArea({\r\n        currentMessage,\r\n        handleKeyDown,\r\n        handleChange,\r\n        disabled,\r\n        isExternalChat,\r\n        interactionStepId,\r\n        sendCurrentMessage,\r\n        itemId,\r\n    }) {\r\n        const isAttachmentsListReady = useChatAttachmentsUIState(\r\n            'isAttachmentsListReady',\r\n        )\r\n        const chatItem = useInteraction(itemId)\r\n        assertDefined(chatItem)\r\n\r\n        const partyWithoutAddress =\r\n            chatItem?.itemKind === 'potential'\r\n                ? !chatItem.contactId && !chatItem?.displayData?.number\r\n                : false\r\n\r\n        const {t} = useLocalizationState()\r\n        const handleBlur = useAgentTypingDetect([currentMessage], {\r\n            interactionStepId,\r\n            isExternalChat,\r\n        })\r\n        const {getSelectedChannel} = useChannelState()\r\n\r\n        const isSmsChannel =\r\n            getSelectedChannel(itemId)?.value.startsWith('sms')\r\n\r\n        const attachmentsList = useAttachmentsList(itemId)\r\n\r\n        const sendButtonDisabled =\r\n            !isAttachmentsListReady(interactionStepId ?? '') ||\r\n            isAfterCallWork(chatItem) ||\r\n            partyWithoutAddress ||\r\n            (!currentMessage.trim() && !attachmentsList.length)\r\n\r\n        const removeAttachment = useChatAttachmentsUIState('removeAttachment')\r\n        const contentEditableRef = useRef<HTMLDivElement>(null)\r\n        const hasMultipleLines = useHasMultipleLines(contentEditableRef)\r\n        assertDefined(interactionStepId)\r\n\r\n        return (\r\n            <FieldFrame\r\n                disabled={disabled}\r\n                contentClassName=\"p-0 overflow-hidden\"\r\n                className=\"max-h-36 flex-auto items-end overflow-hidden px-2 py-1.5\"\r\n                data-testid=\"chat-text-area\"\r\n            >\r\n                <div className=\"flex flex-auto flex-col gap-1 overflow-hidden\">\r\n                    <AttachmentsList\r\n                        className={tcn('flex flex-wrap gap-1 overflow-auto', {\r\n                            'flex-nowrap': hasMultipleLines,\r\n                        })}\r\n                        list={attachmentsList}\r\n                        removeAttachment={removeAttachment}\r\n                        attachmentsListGroupId={interactionStepId}\r\n                    />\r\n                    <div className=\"flex cursor-text items-end overflow-hidden\">\r\n                        <ContentEditable\r\n                            ref={contentEditableRef}\r\n                            data-testid=\"chat-text-area-input\"\r\n                            onKeyDown={handleKeyDown}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className=\"h-full w-full overflow-auto\"\r\n                            placeholder={t.INTERNAL_CHAT.message_input_placeholder()}\r\n                            plainTextOnly={isSmsChannel}\r\n                            data-id={TEXT_AREA_DATA_ID}\r\n                            value={currentMessage}\r\n                            disabled={disabled}\r\n                        />\r\n                        <CircleButton\r\n                            className={tcn(\r\n                                'size-6 state-layer-bg-primary-600',\r\n                                'hover:state-layer-mix-dark-on-teal-1',\r\n                                'focus-visible:state-layer-mix-dark-on-teal-2',\r\n                                'active:state-layer-mix-dark-on-teal-3',\r\n                                {\r\n                                    'bg-primary-container-disabled':\r\n                                        sendButtonDisabled,\r\n                                },\r\n                            )}\r\n                            onClick={sendCurrentMessage}\r\n                            tooltip={{\r\n                                content:\r\n                                    t.EXTERNAL_CHAT.send_message_btn_tooltip(),\r\n                            }}\r\n                            disabled={sendButtonDisabled}\r\n                            //TODO: Add throttle\r\n                            // clickThrottle={500}\r\n                            data-testid=\"send-button\"\r\n                        >\r\n                            <IconSendFilled\r\n                                className={tcn('size-4 icon-reversed', {\r\n                                    'icon-disabled': sendButtonDisabled,\r\n                                })}\r\n                            />\r\n                        </CircleButton>\r\n                    </div>\r\n                </div>\r\n            </FieldFrame>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\n\r\n\r\ninterface UseAgentTypingDetectParams {\r\n    interactionStepId?: string\r\n    isExternalChat?: boolean\r\n}\r\nexport function useAgentTypingDetect(dependencies: unknown[], {interactionStepId = '', isExternalChat}: UseAgentTypingDetectParams) {\r\n    const [timerValue, setTimerValue] = useState<number>(0)\r\n    const [isTyping, setTyping] = useState<boolean>(false)\r\n    const [isSending, setSendingValue] = useState<boolean>(false)\r\n    const {sendAgentIsTyping, sendAgentIsNotTyping} = useInteractionChatStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            const interval = setInterval(() => {\r\n                setTimerValue(currentTimerValue => currentTimerValue + 1)\r\n            }, 1000)\r\n            return () => clearInterval(interval)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isExternalChat])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            let timeout: number\r\n\r\n            if (!isTyping) {\r\n                setTyping(true)\r\n                setSendingValue(false)\r\n            }\r\n            setTimerValue(0)\r\n            if (!isSending) {\r\n                if (dependencies.filter(Boolean).length) {\r\n                    sendAgentIsTyping(interactionStepId)\r\n                }\r\n                setSendingValue(true)\r\n                timeout = setTimeout(() => {\r\n                    setSendingValue(false)\r\n                }, 5000)\r\n            }\r\n\r\n            return () => clearTimeout(timeout)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [...dependencies, isExternalChat])\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat && timerValue > 10 && isTyping) {\r\n            sendAgentIsNotTyping(interactionStepId)\r\n            setTyping(false)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isTyping, interactionStepId, sendAgentIsNotTyping, timerValue, isExternalChat])\r\n\r\n    function stopTyping() {\r\n        setTyping(false)\r\n        sendAgentIsNotTyping(interactionStepId)\r\n    }\r\n\r\n    function empty() {\r\n        return\r\n    }\r\n\r\n    return isExternalChat ? stopTyping : empty\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\n\r\n\r\nexport function useAttachmentsList(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const getAttachmentsList = useChatAttachmentsUIState('getAttachmentsList')\r\n\r\n    return useMemo(function memoizeAttachmentsList() {\r\n        return getAttachmentsList(interactionStepId)\r\n    }, [getAttachmentsList, interactionStepId])\r\n\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useHasMultipleLines(contentEditableRef: React.RefObject<HTMLElement>) {\r\n    const [hasMultipleLines, setHasMultipleLines] = useState(false)\r\n    const contentEditableROEntry = useResizeObserver(contentEditableRef)\r\n\r\n    useEffect(() => {\r\n        if (contentEditableROEntry) {\r\n            const lineHeight = computeLineHeight(\r\n                contentEditableROEntry.target,\r\n            )\r\n            const height = computeHeight(contentEditableROEntry.target)\r\n\r\n            setHasMultipleLines(height > lineHeight)\r\n        }\r\n\r\n        function computeLineHeight(element: Element) {\r\n            const result =\r\n              parseFloat(window.getComputedStyle(element).lineHeight) ||\r\n              0\r\n            return isNaN(result) ? 0 : result\r\n        }\r\n\r\n        function computeHeight(element: Element) {\r\n            return element.clientHeight\r\n        }\r\n    }, [contentEditableROEntry])\r\n\r\n    return hasMultipleLines\r\n\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useSetAtom} from 'jotai'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {getInteractionStepId, isCall, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {not, useDidUnmount} from '@bpinc/lib-helpers'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {type InjectedFileInputProps, withFileInput} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {getFileRejection} from '../../../helpers'\r\nimport {useInitiateChatByAttachment} from '../../../hooks/useInitiateChatByAttachment'\r\nimport {UploadErrorModal} from './UploadErrorModal'\r\n\r\n\r\ninterface InvisibleAttachButtonProps {\r\n    disabled?: boolean\r\n    chatItem: Item\r\n    buttonElementAtom: PrimitiveAtom<HTMLButtonElement | null>\r\n}\r\n\r\n/** It's invisible, and uncontrolled like every other file input element.\r\n * To control it, you need to pass the buttonElementAtom throuth the props\r\n * Ane later you can use the buttonElementAtom to trigger the click event like this:\r\n * const buttonElement = useAtomValue(buttonElementAtom)\r\n * buttonElement?.click()\r\n */\r\nexport const InvisibleAttachButton: React.FC<InvisibleAttachButtonProps> = ({\r\n    disabled = false,\r\n    chatItem,\r\n    buttonElementAtom,\r\n}) => {\r\n    const setAttachmentButtonElement = useSetAtom(buttonElementAtom)\r\n\r\n    const {\r\n        addAttachment,\r\n        fileRejections,\r\n        setFileRejections,\r\n        isAttachmentsListReady,\r\n        getAttachmentsList,\r\n    } = useChatAttachmentsUIState([\r\n        'addAttachment',\r\n        'fileRejections',\r\n        'setFileRejections',\r\n        'isAttachmentsListReady',\r\n        'getAttachmentsList',\r\n    ])\r\n    const shouldInitiateChat =\r\n        isPotentialInteraction(chatItem) || isCall(chatItem)\r\n    const interactionStepId = getInteractionStepId(chatItem)\r\n\r\n    const {t} = useLocalizationState()\r\n    const openUploadErrorModal = useModalComponentOpener(UploadErrorModal)\r\n    const handleUploadFiles = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            addFilesToAttachmentsList()\r\n\r\n            function addFilesToAttachmentsList() {\r\n                const files = getFilesFromEvent()\r\n                if (!files) {\r\n                    return\r\n                }\r\n\r\n                const getLocalizedFileError = partial(getFileRejection, t)\r\n                const fileRejection = truthy(files.map(getLocalizedFileError))\r\n                const validFiles = files.filter(not(getLocalizedFileError))\r\n\r\n                if (fileRejection.length) {\r\n                    openUploadErrorModal({\r\n                        rejection: fileRejection,\r\n                        totalFilesAmount: files.length,\r\n                    })\r\n                }\r\n\r\n                if (interactionStepId) {\r\n                    validFiles.forEach(\r\n                        partial(addAttachment, interactionStepId),\r\n                    )\r\n                }\r\n            }\r\n\r\n            function getFilesFromEvent() {\r\n                const input = event.target\r\n                return input.files ? Array.from(input.files) : []\r\n            }\r\n        },\r\n        [addAttachment, interactionStepId, openUploadErrorModal, t],\r\n    )\r\n\r\n    useEffect(\r\n        function showRejections() {\r\n            if (isAttachmentsListReady(interactionStepId) && fileRejections.length) {\r\n                openUploadErrorModal({\r\n                    rejection: fileRejections,\r\n                    onCloseCallback: () => setFileRejections([]),\r\n                    totalFilesAmount:\r\n                        getAttachmentsList(interactionStepId).length +\r\n                        fileRejections.length,\r\n                })\r\n            }\r\n        },\r\n        [\r\n            fileRejections,\r\n            getAttachmentsList,\r\n            interactionStepId,\r\n            isAttachmentsListReady,\r\n            openUploadErrorModal,\r\n            setFileRejections,\r\n        ],\r\n    )\r\n\r\n    useDidUnmount(() => {\r\n        setAttachmentButtonElement(null)\r\n        setFileRejections([])\r\n    })\r\n\r\n    const initiateChat = useInitiateChatByAttachment({chatItem})\r\n    /**\r\n     * Callback function for clicking on a file input element.\r\n     *\r\n     * @remarks\r\n     * Opens the file input dialog and initiates a chat if necessary.\r\n     */\r\n    const onFileClick = useCallback(async () => {\r\n        /**\r\n         * If the user is not supposed to initiate a chat, simply open the file input dialog.\r\n         */\r\n        if (!shouldInitiateChat) {\r\n            return {selectFiles: true}\r\n        }\r\n\r\n        const chatWasInitiated = initiateChat()\r\n\r\n        return {selectFiles: chatWasInitiated}\r\n    }, [initiateChat, shouldInitiateChat])\r\n\r\n    //This is workaround because passing atom value directly leads to infinite loop\r\n    const [innerButtonElement, setInnerButtonElement] =\r\n        useState<HTMLButtonElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        setAttachmentButtonElement(innerButtonElement)\r\n    }, [innerButtonElement, setAttachmentButtonElement])\r\n\r\n    return (\r\n        <InvisibleAttachButtonWithInput\r\n            ref={element => {\r\n                if (element instanceof HTMLButtonElement || element === null) {\r\n                    setInnerButtonElement(element)\r\n                }\r\n            }}\r\n            onFileInputClick={onFileClick}\r\n            handleUploadFiles={handleUploadFiles}\r\n            isDisabled={disabled}\r\n        />\r\n    )\r\n}\r\n\r\nconst InvisinbleAttachButtonUI = React.forwardRef<\r\n    HTMLButtonElement,\r\n    InjectedFileInputProps\r\n>(({onFileInputClick}, ref) => (\r\n    <button\r\n        onClick={onFileInputClick}\r\n        ref={ref}\r\n        className=\"invisible absolute z-[-1] w-0\"\r\n    />\r\n))\r\n\r\nconst InvisibleAttachButtonWithInput = withFileInput(InvisinbleAttachButtonUI)\r\n","import type React from 'react'\r\nimport type {FormEvent, KeyboardEvent} from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\nimport produce from 'immer'\r\nimport {useAtom} from 'jotai'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDidState} from '@bpinc/ad-did-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessengerType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {messengerTypes} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getInteractionStepId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    isCall,\r\n    isExternalChat,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useIsOffline, useOfflineStateMethods} from '@bpinc/ad-offline-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {condenseNewLines, isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {getCursorPosition, moveCursorToTheEnd, setCursorPosition} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useMessageUpdater} from '../../../hooks/useMessageUpdater'\r\nimport {chatPopupContentAtom, predefinedMessagesSearchAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\nimport {TEXT_AREA_DATA_ID} from './ChatTextArea'\r\n\r\n\r\ninterface UseChatMessagesParams {\r\n    itemId: string\r\n    serviceId?: string\r\n}\r\n\r\ninterface UseChatMessagesOutput {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n\r\n    sendCurrentMessage(): void\r\n\r\n    handleKeyDown(event: KeyboardEvent<HTMLTextAreaElement>): void\r\n\r\n    handleTextareaChange(event: FormEvent<HTMLElement>, value: string): void\r\n\r\n    updateMessage<T, S extends string>(\r\n        arg0?: (arg0: T) => S\r\n    ): (arg0: T) => void\r\n\r\n    handleSelectPredefinedMessage: (text: string) => void\r\n}\r\n\r\nexport function useChatMessages(\r\n    params: UseChatMessagesParams,\r\n): UseChatMessagesOutput {\r\n    const [chatPopupContent, setChatPopupContent] = useAtom(\r\n        chatPopupContentAtom,\r\n    )\r\n\r\n    const {itemId, serviceId} = params\r\n\r\n    const [predefinedSearchInsertPosition, setPredefinedSearchInsertPoisition] =\r\n        useAtom(predefinedSearchInsertPositionAtom)\r\n    const [predefinedMessagesSearch, setPredefinedMessagesSearch] = useAtom(\r\n        predefinedMessagesSearchAtom,\r\n    )\r\n    const {showNotification, hideNotificationById, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const errorValidation = useErrorValidation()\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n    const contacts = useContactsState('contacts')\r\n    const isOffline = useIsOffline()\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const chatActiveItem = useInteraction(itemId)\r\n\r\n    const id = chatActiveItem?.id ?? ''\r\n    const contactMessengers = getMessengers(contacts, chatActiveItem)\r\n    const interactionStepId = getInteractionStepId(chatActiveItem)\r\n\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const {sendMessage, addMessageToPending, sendFile, openChannel} =\r\n        useInteractionChatStateMethods()\r\n\r\n    const {getItemState, setItemState} = useInteractionUIState()\r\n\r\n    const {clearAttachmentsList, getAttachmentsList, isAttachmentsListReady} =\r\n        useChatAttachmentsUIState([\r\n            'clearAttachmentsList',\r\n            'getAttachmentsList',\r\n            'isAttachmentsListReady',\r\n        ])\r\n\r\n    const {selectedService} = useServiceState()\r\n    const didNumbers = useDidState('didNumbers')\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    const associatedCallsNumber =\r\n        isCall(chatActiveItem) && chatActiveItem?.callData?.incoming\r\n            ? chatActiveItem.callData.fromNumber\r\n            : chatActiveItem?.callData?.destination\r\n\r\n    const phone = getSelectedPhone(itemId)?.phone || getPhoneFromItem(chatActiveItem)\r\n    const sameNumberWithAssociatedCall = associatedCallsNumber === phone\r\n\r\n    const didNumber = useMemo(\r\n        function memoizeDidNumber() {\r\n            if (isCall(chatActiveItem)) {\r\n                if (isOutboundInteraction(chatActiveItem)) {\r\n                    const callHasSmsDIDNumber =\r\n                        chatActiveItem?.accessNumberId &&\r\n                        didNumbers[chatActiveItem.accessNumberId]?.isSMS\r\n\r\n                    if (sameNumberWithAssociatedCall && callHasSmsDIDNumber) {\r\n                        return chatActiveItem!.accessNumberId\r\n                    }\r\n                } else {\r\n                    const isDID = chatActiveItem?.scenarioData?.isDID\r\n                    if (\r\n                        isDID &&\r\n                        (!selectedDIDNumber ||\r\n                            didNumbers[selectedDIDNumber]?.isSMS)\r\n                    ) {\r\n                        for (const accessNumberId of Object.keys(didNumbers)) {\r\n                            if (didNumbers[accessNumberId].isSMS) {\r\n                                return accessNumberId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return selectedDIDNumber\r\n        },\r\n        [\r\n            chatActiveItem,\r\n            didNumbers,\r\n            sameNumberWithAssociatedCall,\r\n            selectedDIDNumber,\r\n        ],\r\n    )\r\n\r\n    const itemService = getServiceId(chatActiveItem)\r\n    const service =\r\n        serviceId ||\r\n        (sameNumberWithAssociatedCall ? itemService : selectedService)\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatService =\r\n        getAssociatedChatServiceId(services, service) ||\r\n        getAssociatedChatServiceId(services, selectedService)\r\n\r\n    const currentMessage = getItemState(id)?.chatMessage ?? ''\r\n    const attachmentsList = getAttachmentsList(interactionStepId)\r\n\r\n    const setCurrentMessage = useCallback(\r\n        function setCurrentMessageCallback(\r\n            setMessage: React.SetStateAction<string>,\r\n        ) {\r\n            setItemState(\r\n                id,\r\n                produce(state => {\r\n                    if (typeof setMessage === 'string') {\r\n                        state.chatMessage = setMessage\r\n                    } else {\r\n                        state.chatMessage = setMessage(state.chatMessage)\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [id, setItemState],\r\n    )\r\n\r\n    const resetCurrentMessage = useCallback(\r\n        function resetCurrentMessageCallback() {\r\n            !isOffline && setCurrentMessage('')\r\n        },\r\n        [isOffline, setCurrentMessage],\r\n    )\r\n\r\n    const sendCurrentPotentialMessage = useCallback(\r\n        function sendCurrentPotentialMessageCallback() {\r\n            const contactId = get(chatActiveItem, 'contactId')\r\n\r\n\r\n            const messengerAddress = contactMessengers?.find(\r\n                messenger => messenger.type === channel,\r\n            )?.userId\r\n            const address = messengerAddress || phone\r\n\r\n            if (!address || !channel) {\r\n                return\r\n            }\r\n\r\n            addMessageToPending(\r\n                {\r\n                    content: currentMessage,\r\n                    channel,\r\n                    type: 'message',\r\n                },\r\n                address,\r\n            )\r\n            initiateChat({\r\n                channel,\r\n                address,\r\n                serviceId: associatedChatService,\r\n                accessNumberId: didNumber,\r\n                contactId,\r\n                displayData: chatActiveItem?.displayData,\r\n                origination: 'interaction',\r\n            })\r\n\r\n            return resetCurrentMessage()\r\n        },\r\n        [\r\n            channel,\r\n            chatActiveItem,\r\n            contactMessengers,\r\n            phone,\r\n            addMessageToPending,\r\n            currentMessage,\r\n            initiateChat,\r\n            associatedChatService,\r\n            didNumber,\r\n            resetCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const sendCurrentExternalMessage = useCallback(\r\n        function sendCurrentExternalMessageCallback() {\r\n            //if chat is initialized\r\n            if (isExternalChat(chatActiveItem)) {\r\n                if (isAttachmentsListReady(interactionStepId)) {\r\n                    if (currentMessage) {\r\n                        sendMessage({\r\n                            content: condenseNewLines(currentMessage),\r\n                            itemId: interactionStepId,\r\n                            channel,\r\n                            type: 'message',\r\n                        })\r\n                    }\r\n\r\n                    if (attachmentsList.length) {\r\n                        attachmentsList.forEach(attachment => {\r\n                            if (attachment.fileData)\r\n                                sendFile({\r\n                                    fileData: attachment.fileData,\r\n                                    itemId: interactionStepId,\r\n                                    channel: channel || 'sms',\r\n                                })\r\n                        })\r\n                        clearAttachmentsList(interactionStepId)\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            } else {\r\n                const messengerAddress = contactMessengers?.find(\r\n                    messenger => messenger.type === channel,\r\n                )?.userId\r\n                const address = messengerAddress || phone\r\n\r\n                if (\r\n                    service &&\r\n                    chatActiveItem &&\r\n                    associatedChatService &&\r\n                    channel &&\r\n                    address\r\n                ) {\r\n                    addMessageToPending(\r\n                        {\r\n                            content: currentMessage,\r\n                            channel,\r\n                            type: 'message',\r\n                        },\r\n                        address,\r\n                    )\r\n                    initiateChat({\r\n                        channel,\r\n                        address,\r\n                        serviceId: associatedChatService,\r\n                        contactId: chatActiveItem.contactId,\r\n                        displayData: chatActiveItem.displayData,\r\n                        accessNumberId: didNumber,\r\n                        origination: 'interaction',\r\n                    })\r\n                }\r\n                resetCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            phone,\r\n            contactMessengers,\r\n            channel,\r\n            chatActiveItem,\r\n            isAttachmentsListReady,\r\n            interactionStepId,\r\n            currentMessage,\r\n            attachmentsList,\r\n            resetCurrentMessage,\r\n            sendMessage,\r\n            clearAttachmentsList,\r\n            sendFile,\r\n            service,\r\n            associatedChatService,\r\n            addMessageToPending,\r\n            initiateChat,\r\n            didNumber,\r\n        ],\r\n    )\r\n\r\n    const tryToParseCommandsInCurrentMessage = useCallback(() => {\r\n        if (currentMessage.startsWith('/invite')) {\r\n            const words = currentMessage.split(' ')\r\n            if (words.length !== 2) {\r\n                showNotification({\r\n                    id: Notifications.ChatChannelInviteBadFormatError,\r\n                    type: 'error',\r\n                    message: i18n.chat_channel_invite_bad_format(),\r\n                    tags: ['current-view'],\r\n                    duration: 30_000,\r\n                    closable: true,\r\n                })\r\n            } else {\r\n                const inviteChannel = words[1] as MessengerType\r\n                if (!messengerTypes.includes(inviteChannel)) {\r\n                    showNotification({\r\n                        id: Notifications.ChatChannelInviteUnknownMessengerError,\r\n                        type: 'error',\r\n                        tags: ['current-view'],\r\n                        message: i18n.chat_channel_invite_unknown_messenger(),\r\n                        duration: 30_000,\r\n                        closable: true,\r\n                    })\r\n                } else {\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteBadFormatError,\r\n                    )\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteUnknownMessengerError,\r\n                    )\r\n\r\n                    const messengerAddress = contactMessengers?.find(\r\n                        messenger => messenger.type === inviteChannel,\r\n                    )?.userId\r\n                    const address = messengerAddress || phone\r\n\r\n                    if (itemService && address) {\r\n                        openChannel({\r\n                            channel: inviteChannel,\r\n                            address,\r\n                            interactionStepId,\r\n                            serviceId: itemService,\r\n                        })\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            }\r\n            return true\r\n        }\r\n    }, [\r\n        contactMessengers,\r\n        currentMessage,\r\n        hideNotificationById,\r\n        interactionStepId,\r\n        itemService,\r\n        openChannel,\r\n        phone,\r\n        showNotification,\r\n        resetCurrentMessage,\r\n        i18n,\r\n    ])\r\n\r\n    const sendCurrentMessage = useCallback(\r\n        function sendCurrentMessageCallback() {\r\n            if (isOffline) {\r\n                setShowOfflineAlert(true)\r\n                return\r\n            }\r\n\r\n            if (currentMessage) {\r\n                const scrollerApi = getItemState(itemId)?.scrollerApi\r\n                scrollerApi?.scrollToLast()\r\n            }\r\n\r\n            const isPotentialChat =\r\n                isPotentialInteraction(chatActiveItem) ||\r\n                isCall(chatActiveItem)\r\n\r\n\r\n            if (isPotentialChat) {\r\n                const errors = [\r\n                    ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                        service,\r\n                        didNumber,\r\n                        interactionType: 'sms',\r\n                    }),\r\n                    ...errorValidation.getChannelError({\r\n                        selectedChannel: channel,\r\n                    }),\r\n                ]\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                if (currentMessage) {\r\n                    const messageErrors = errorValidation.getMessageErrors({\r\n                        message: currentMessage,\r\n                        channel: channel || 'sms',\r\n                    })\r\n                    if (messageErrors.length) {\r\n                        showNotification(messageErrors[0])\r\n                        return\r\n                    }\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                return currentMessage && sendCurrentPotentialMessage()\r\n            }\r\n            const messageErrors = errorValidation.getMessageErrors({\r\n                message: currentMessage,\r\n                channel: channel || 'sms',\r\n            })\r\n            if (messageErrors.length) {\r\n                showNotification(messageErrors[0])\r\n                return\r\n            }\r\n\r\n            if (interactionStepId) {\r\n                if (tryToParseCommandsInCurrentMessage()) {\r\n                    return\r\n                }\r\n                return (\r\n                    (currentMessage || attachmentsList.length) &&\r\n                    sendCurrentExternalMessage()\r\n                )\r\n            }\r\n        },\r\n        [\r\n            isOffline,\r\n            currentMessage,\r\n            chatActiveItem,\r\n            channel,\r\n            errorValidation,\r\n            interactionStepId,\r\n            setShowOfflineAlert,\r\n            getItemState,\r\n            itemId,\r\n            service,\r\n            didNumber,\r\n            hideNotificationsByTag,\r\n            sendCurrentPotentialMessage,\r\n            showNotification,\r\n            attachmentsList.length,\r\n            sendCurrentExternalMessage,\r\n            tryToParseCommandsInCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const handleSelectPredefinedMessage = useEvent((text: string) => {\r\n        setCurrentMessage(\r\n            m =>\r\n                m.slice(0, predefinedSearchInsertPosition) +\r\n                text +\r\n                m.slice(\r\n                    predefinedSearchInsertPosition + 1,\r\n                    predefinedMessagesSearch.length,\r\n                ),\r\n        )\r\n        setPredefinedMessagesSearch('')\r\n        setChatPopupContent(undefined)\r\n\r\n        const htmlElement = document.querySelector(\r\n            '[data-testid=\"chat-text-area-input\"]',\r\n        )\r\n\r\n        if (!(htmlElement instanceof HTMLElement)) {\r\n            return\r\n        }\r\n\r\n        setTimeout(() => {\r\n            htmlElement.focus()\r\n            if (predefinedSearchInsertPosition === -1) {\r\n                moveCursorToTheEnd(htmlElement)\r\n            } else {\r\n                setCursorPosition(\r\n                    htmlElement,\r\n                    predefinedSearchInsertPosition + text.length,\r\n                )\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleKeyDown = useCallback(\r\n        (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n            const textareaElement =\r\n                event.target instanceof HTMLElement ? event.target : undefined\r\n\r\n            function exitPredefinedMessages() {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedSearchInsertPoisition(-1)\r\n                setPredefinedMessagesSearch('')\r\n            }\r\n\r\n            if (!textareaElement) {\r\n                return\r\n            }\r\n\r\n            const cursorPosition = getCursorPosition(textareaElement)\r\n\r\n            if (event.key === ';') {\r\n                setPredefinedSearchInsertPoisition(cursorPosition)\r\n                setChatPopupContent('predefinedMessages')\r\n            }\r\n\r\n            if (\r\n                event.key === ' ' &&\r\n                cursorPosition - 1 === predefinedSearchInsertPosition\r\n            ) {\r\n                exitPredefinedMessages()\r\n            }\r\n\r\n            if (event.key === 'Escape' && chatPopupContent === 'predefinedMessages') {\r\n                exitPredefinedMessages()\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n\r\n            if (event.key === 'Enter') {\r\n                if (event.shiftKey || event.ctrlKey) {\r\n                    return\r\n                }\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                sendCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            chatPopupContent,\r\n            setChatPopupContent,\r\n            predefinedSearchInsertPosition,\r\n            sendCurrentMessage,\r\n            setPredefinedMessagesSearch,\r\n            setPredefinedSearchInsertPoisition,\r\n        ],\r\n    )\r\n\r\n    const handleTextareaChange = useCallback(\r\n        function handleTextareaChangeCallback(\r\n            event: FormEvent<HTMLElement>,\r\n            value: string,\r\n        ) {\r\n            const el = event.target\r\n            if (!isHTMLElement(el)) {\r\n                return\r\n            }\r\n            el.scrollTop = el.scrollHeight\r\n\r\n            const cursorPosition = getCursorPosition(el)\r\n\r\n            setCurrentMessage(value)\r\n            if (\r\n                predefinedMessagesSearch &&\r\n                cursorPosition <= predefinedSearchInsertPosition\r\n            ) {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedMessagesSearch('')\r\n            } else {\r\n                setPredefinedMessagesSearch(\r\n                    chatPopupContent === 'predefinedMessages'\r\n                        ? value.slice(predefinedSearchInsertPosition + 1)\r\n                        : '',\r\n                )\r\n            }\r\n        },\r\n        [chatPopupContent, predefinedMessagesSearch, predefinedSearchInsertPosition, setChatPopupContent, setCurrentMessage, setPredefinedMessagesSearch],\r\n    )\r\n\r\n    const updateMessage = useMessageUpdater(\r\n        setCurrentMessage,\r\n        `[data-id=\"${TEXT_AREA_DATA_ID}\"]`,\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                handleSelectPredefinedMessage,\r\n                sendCurrentMessage,\r\n                handleKeyDown,\r\n                currentMessage,\r\n                setCurrentMessage,\r\n                handleTextareaChange,\r\n                setPredefinedMessagesSearch,\r\n                predefinedMessagesSearch,\r\n                updateMessage,\r\n            }\r\n        },\r\n        [\r\n            handleSelectPredefinedMessage,\r\n            predefinedMessagesSearch,\r\n            setPredefinedMessagesSearch,\r\n            currentMessage,\r\n            setCurrentMessage,\r\n            handleTextareaChange,\r\n            sendCurrentMessage,\r\n            handleKeyDown,\r\n            updateMessage,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport {Selection} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useMessageUpdater(\r\n    setCurrentMessage: (setter: (message: string) => string) => void,\r\n    textAreaSelector: string,\r\n) {\r\n    return useCallback(\r\n        function updateMessageCallback<T, S extends string>(getMessage = (e: T) => e as unknown as S) {\r\n            return function updater(data: T) {\r\n                const textAreaNode = document.querySelector(textAreaSelector)\r\n\r\n                flow(getMessage, updateMessageContent, setCaretToRightPosition)(data)\r\n\r\n\r\n                function updateMessageContent(dataToAdd: string) {\r\n                    let offsetToFocus = 0\r\n                    let nodeToFocus: Node | null = null\r\n\r\n                    setCurrentMessage((currentMessage: string) => {\r\n                        const selection = new Selection()\r\n                        const selectionNode = selection?.getLastNode()\r\n                        const selectionElement = (\r\n                            selectionNode?.nodeType === Node.TEXT_NODE ? selectionNode?.parentElement : selectionNode\r\n                        ) as Element\r\n\r\n                        const textAreaSelected = selectionElement?.closest(textAreaSelector)\r\n\r\n                        if (textAreaNode) {\r\n                            currentMessage = cutExtraBR()\r\n\r\n                            if (!textAreaSelected) {\r\n                                return currentMessage + dataToAdd\r\n                            } else if (selection && selectionNode) {\r\n                                setNodeAndOffsetToFocus(selection)\r\n                                removeSelectedTextOnPaste(selection)\r\n\r\n                                if (nodeToFocus) {\r\n                                    insertDataInSelectedNode(nodeToFocus, offsetToFocus)\r\n                                }\r\n\r\n                                return getUpdatedHTMLAsString()\r\n                            }\r\n\r\n                            return currentMessage\r\n                        }\r\n\r\n                        return currentMessage + dataToAdd\r\n\r\n                        function differentNodesSelected(selectionInner: Selection) {\r\n                            return selectionInner.getFirstNode() !== selectionInner.getLastNode()\r\n                        }\r\n\r\n                        function textSelected(selectionInner: Selection) {\r\n                            return selectionInner.getSelectionStartIndex() !== selectionInner.getSelectionEndIndex()\r\n                        }\r\n\r\n                        function setNodeAndOffsetToFocus(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else if (textSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else {\r\n                                offsetToFocus = selectionInner.getSelectionEndIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getLastNode()\r\n                            }\r\n                        }\r\n                        function removeSelectedTextOnPaste(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner) || textSelected(selectionInner)) {\r\n                                selectionInner.deleteSelected()\r\n                            }\r\n                        }\r\n\r\n                        function insertDataInSelectedNode(selectionNodeInner: Node, selectionOffset: number) {\r\n                            const textContent = selectionNodeInner?.textContent ?? ''\r\n                            selectionNodeInner.textContent =\r\n                                textContent?.slice(0, selectionOffset) + dataToAdd + textContent?.slice(selectionOffset)\r\n                        }\r\n\r\n                        function getUpdatedHTMLAsString() {\r\n                            return document.querySelector(textAreaSelector)?.innerHTML ?? currentMessage\r\n                        }\r\n\r\n                        function cutExtraBR() {\r\n                            const extraBRExist = currentMessage.substring(currentMessage.length - 8) === '<br><br>'\r\n                            if (extraBRExist) {\r\n                                return currentMessage.substring(0, currentMessage.length - 4)\r\n                            } else {\r\n                                return currentMessage\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    return {nodeToFocus, offsetToFocus, dataToAdd} as const\r\n                }\r\n\r\n                function setCaretToRightPosition({\r\n                    nodeToFocus,\r\n                    offsetToFocus,\r\n                    dataToAdd,\r\n                }: {\r\n                    nodeToFocus: Node | null\r\n                    offsetToFocus: number\r\n                    dataToAdd: string\r\n                }) {\r\n                    if (textAreaNode instanceof HTMLElement) {\r\n                        textAreaNode.focus()\r\n                        requestAnimationFrame(() => {\r\n                            setCursorPosition()\r\n                            requestAnimationFrame(setCursorPosition)\r\n\r\n                            function setCursorPosition() {\r\n                                if (textAreaNode) {\r\n                                    if (nodeToFocus) {\r\n                                        keepCursorAtTheCurrentPosition(nodeToFocus)\r\n                                    } else if (textAreaNode.lastChild) {\r\n                                        setCursorToTheEnd(textAreaNode.lastChild)\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            function keepCursorAtTheCurrentPosition(node: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(node, offsetToFocus + dataToAdd.length)\r\n                                range.setEnd(node, offsetToFocus + dataToAdd.length)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n\r\n                            function setCursorToTheEnd(lastChild: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(lastChild, lastChild.textContent?.length ?? 0)\r\n                                range.setEnd(lastChild, lastChild.textContent?.length ?? 0)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [textAreaSelector, setCurrentMessage],\r\n    )\r\n}\r\n","import {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {IconAttachment, IconKnowledgeBase, IconPredefinedMessage, IconSentimentGood} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {moveCursorToTheEnd} from '@bpinc/lib-ui-elements'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\n\r\n\r\ninterface UseControlsOptions {\r\n    itemId: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n}\r\n\r\nexport function useControlsOptions({itemId, setCurrentMessage}: UseControlsOptions) {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const setChatPopupContent = useSetAtom(chatPopupContentAtom)\r\n    const setPredefinedSearchInsertPoisition = useSetAtom(predefinedSearchInsertPositionAtom)\r\n    const t = useLocalizationState('t')\r\n    const isMacOs = platformInfo.platform === 'mac'\r\n    const commandButton = isMacOs ? '⌘' : 'Ctrl'\r\n\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const isCommunicator = useIsCommunicator()\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    const openKB = async () => {\r\n        if (isCommunicator) {\r\n            openInteractionSlidingModal(itemId, 'knowledgeBase')\r\n        } else {\r\n            setKBFloatingState(s => s === 'closed' ? 'floating' : s)\r\n            setupInteractionKB()\r\n        }\r\n    }\r\n\r\n\r\n    return [\r\n        {\r\n            Icon: IconSentimentGood,\r\n            text: t.EXTERNAL_CHAT.add_emoji(),\r\n            shortcut: `${commandButton}E`,\r\n            onClick: () => {\r\n                setChatPopupContent('emojiPicker')\r\n            },\r\n        },\r\n        {\r\n            Icon: IconAttachment,\r\n            text: t.EXTERNAL_CHAT.attachment(),\r\n            shortcut: `${commandButton}A`,\r\n            onClick: () => attachmentButton?.click(),\r\n        },\r\n        {\r\n            Icon: IconPredefinedMessage,\r\n            text: t.EXTERNAL_CHAT.predefined_messages(),\r\n            shortcut: ';',\r\n            onClick: () => {\r\n                const textareaElement = document.querySelector('[data-testid=\"chat-text-area-input\"]')\r\n                if (textareaElement instanceof HTMLElement) {\r\n                    setPredefinedSearchInsertPoisition(textareaElement.innerHTML.length)\r\n                    setCurrentMessage(m => m + ';')\r\n                    textareaElement.focus()\r\n\r\n                    setTimeout(() => {\r\n                        moveCursorToTheEnd(textareaElement)\r\n                    })\r\n                }\r\n                setChatPopupContent('predefinedMessages')\r\n\r\n            },\r\n        },\r\n        {\r\n            Icon: IconKnowledgeBase,\r\n            text: t.EXTERNAL_CHAT.knowledge_base(),\r\n            shortcut: `${commandButton}K`,\r\n            onClick: openKB,\r\n        },\r\n    ] as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"smsMessageCounter\":\"agent_ChatForm_smsMessageCounter_MlvOG\"};","import React from 'react'\r\nimport * as Popover from '@radix-ui/react-popover'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {useAssociatedChatInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useBoolean, useEscapeManager, useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useChatResponsesVariablesParser} from '@bpinc/lib-helpers-ui'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconPlus24, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {ViewPredefinedMessages} from '@bpinc/lib-predefined-messages-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmojiPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ChatProps} from '../../../types'\r\nimport {ChannelSelector} from '../ChannelSelector'\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedMessagesSearchAtom} from './atoms'\r\nimport {ChatTextArea} from './ChatTextArea'\r\nimport {InvisibleAttachButton} from './InvisibleAttachButton'\r\nimport {useChatMessages} from './useChatMessages'\r\nimport {useControlsOptions} from './useControlsOptions'\r\nimport {useGreetings} from './useGreeting'\r\nimport {useSmsMessageCounter} from './useSmsMessageCounter'\r\n\r\nimport styles from './ChatForm.module.less'\r\n\r\n\r\nconst PREDEFINED_MESSAGES_MAX_OFFSET = 24\r\nconst PREDEFINED_MESSAGES_SIDE_OFFSET = 5\r\n\r\nfunction getChatMessagesElement() {\r\n    const element = document.querySelector('[data-testid=\"chat-content\"]')\r\n    if (element instanceof HTMLElement) {\r\n        return element\r\n    }\r\n}\r\n\r\nexport const ChatForm: React.FC<ChatProps> = React.memo(function ExternalChat({\r\n    itemId,\r\n    serviceId,\r\n}) {\r\n    const chatFormRef = useCommunicatorUIState('interactionChatFormRef')\r\n    const activeInteractionId = useNonAssertedInteractionId()\r\n    const {\r\n        updateMessage,\r\n        handleSelectPredefinedMessage,\r\n        sendCurrentMessage,\r\n        handleKeyDown,\r\n        handleTextareaChange,\r\n        setCurrentMessage,\r\n        currentMessage,\r\n    } = useChatMessages({itemId, serviceId})\r\n\r\n    const predefinedMessagesSearch = useAtomValue(predefinedMessagesSearchAtom)\r\n    const parseVariables = useChatResponsesVariablesParser()\r\n    useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables})\r\n\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const itemIsExternalChat = useInteractionProp(itemId, isExternalChat)\r\n\r\n    const {text: smsMessageCounter, enabled: smsMessageCounterEnabled} =\r\n        useSmsMessageCounter(itemId, currentMessage)\r\n\r\n\r\n    const messagesElementEntry = useResizeObserver(getChatMessagesElement())\r\n    const [chatPopupContent, setChatPopupContent] =\r\n    useAtom(chatPopupContentAtom)\r\n\r\n    const chatItem = useAssociatedChatInteraction(itemId)\r\n    assertDefined(chatItem)\r\n\r\n    const controlsOptions = useControlsOptions({setCurrentMessage, itemId})\r\n    const controlsDropdownOpen = useBoolean()\r\n    useEscapeManager(() => {\r\n        controlsDropdownOpen.setFalse()\r\n    }, {enabled: controlsDropdownOpen.value})\r\n\r\n    useEscapeManager(\r\n        () => {\r\n            setChatPopupContent(undefined)\r\n        },\r\n        {enabled: Boolean(chatPopupContent)},\r\n    )\r\n\r\n\r\n    return (\r\n        <div\r\n            ref={chatFormRef}\r\n            className=\"flex px-4 py-2.5\"\r\n            data-testid=\"chat-bottom-panel\"\r\n        >\r\n            <InvisibleAttachButton chatItem={chatItem} buttonElementAtom={attachmentButtonElementAtom} />\r\n            {/* TODO Use it appropriately once design is added: */}\r\n            {smsMessageCounterEnabled && (\r\n                <span className={styles.smsMessageCounter}>\r\n                    {smsMessageCounter}\r\n                </span>\r\n            )}\r\n            <div className=\"flex flex-auto items-end gap-2\">\r\n                <div className=\"flex h-[33px] items-center gap-2\">\r\n                    {!!activeInteractionId && <ChannelSelector />}\r\n                    <TriggerDropdown\r\n                        data-chat-actions-menu\r\n                        modal={false}\r\n                        open={controlsDropdownOpen.value}\r\n                        onOpenChange={controlsDropdownOpen.toggle}\r\n                        className=\"group z-10\"\r\n                        align=\"start\"\r\n                        side=\"top\"\r\n                        options={controlsOptions.map(\r\n                            ({Icon, text, shortcut, onClick}) => (\r\n                                <button\r\n                                    onClick={onClick}\r\n                                    key={text}\r\n                                    className=\"flex w-full min-w-[210px] items-center gap-2\"\r\n                                >\r\n                                    <Icon className=\"size-4\" />\r\n                                    <p className=\"flex-auto caption-s text-primary-on-primary\">\r\n                                        {text}\r\n                                    </p>\r\n                                    <p className=\"caption-s text-neutral-disabled\">\r\n                                        {shortcut}\r\n                                    </p>\r\n                                </button>\r\n                            ),\r\n                        )}\r\n                    >\r\n                        <CircleButton>\r\n                            <IconPlus24 className=\"size-4.5\" />\r\n                        </CircleButton>\r\n                    </TriggerDropdown>\r\n                </div>\r\n                <Popover.Root\r\n                    open={Boolean(chatPopupContent)}\r\n                    onOpenChange={open => {\r\n                        if (!open) {\r\n                            setChatPopupContent(undefined)\r\n                        }\r\n                    }}\r\n                >\r\n                    <Popover.Trigger\r\n                        asChild\r\n                        className=\"flex flex-auto\"\r\n                        onClick={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <ChatTextArea\r\n                                itemId={itemId}\r\n                                sendCurrentMessage={sendCurrentMessage}\r\n                                interactionStepId={interactionStepId}\r\n                                isExternalChat={itemIsExternalChat}\r\n                                currentMessage={currentMessage}\r\n                                handleKeyDown={handleKeyDown}\r\n                                handleChange={handleTextareaChange}\r\n                            />\r\n                        </div>\r\n                    </Popover.Trigger>\r\n                    <Popover.Content\r\n                        side=\"top\"\r\n                        align=\"start\"\r\n                        className=\"z-[100] w-[--radix-popover-trigger-width]\"\r\n                        sideOffset={PREDEFINED_MESSAGES_SIDE_OFFSET}\r\n                        onOpenAutoFocus={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        {chatPopupContent === 'emojiPicker' ? (\r\n                            <EmojiPopup\r\n                                onSelectEmoji={emojiChar => {\r\n                                    updateMessage((emoji: string) => emoji)(emojiChar)\r\n                                    setChatPopupContent(undefined)\r\n                                }}\r\n                            />\r\n                        ) : chatPopupContent === 'predefinedMessages' ? (\r\n                            <ViewPredefinedMessages\r\n                                handleSelect={handleSelectPredefinedMessage}\r\n                                search={predefinedMessagesSearch}\r\n                                className=\"w-[--radix-popover-trigger-width]\"\r\n                                style={{\r\n                                    maxHeight:\r\n                                        (messagesElementEntry?.contentRect\r\n                                            .height ?? 0) -\r\n                                        (PREDEFINED_MESSAGES_MAX_OFFSET -\r\n                                            PREDEFINED_MESSAGES_SIDE_OFFSET),\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                    </Popover.Content>\r\n                </Popover.Root>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat, isInboundInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePredefinedChatMessageState,\r\n    usePredefinedChatMessageStateMethods,\r\n} from '@bpinc/ad-predefined-chat-message-state-context'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\ninterface UseGreetingsParams {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: string) => void\r\n    parseVariables: (message: string) => string\r\n    itemId: string\r\n}\r\n\r\nexport function useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables}: UseGreetingsParams) {\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const itemIsInboundExternalChat = useInteractionProp(\r\n        itemId,\r\n        item => isExternalChat(item) && isInboundInteraction(item),\r\n    )\r\n\r\n    const {greetings} = usePredefinedChatMessageState()\r\n    const {resetGreeting} = usePredefinedChatMessageStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (currentMessage) {\r\n            resetGreeting(itemId)\r\n        } else if (greetings[itemId] && itemIsInboundExternalChat) {\r\n            setCurrentMessage(parseVariables(greetings[itemId]))\r\n            resetGreeting(itemId)\r\n            // TODO: investigate which notification we need to hide here\r\n            // hideNotificationsByTag()\r\n        }\r\n    }, [\r\n        itemId,\r\n        currentMessage,\r\n        greetings,\r\n        hideNotificationsByTag,\r\n        parseVariables,\r\n        resetGreeting,\r\n        setCurrentMessage,\r\n        itemIsInboundExternalChat,\r\n    ])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {getCharCount} from '@bpinc/lib-gsm-charset-utils'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\n\r\n\r\ntype MessageCounter = {\r\n    text: string\r\n    enabled: boolean\r\n}\r\n\r\nexport function useSmsMessageCounter(itemId: string, message: string): MessageCounter {\r\n    const {enableSmsCharacterCount} = useAppConfigState()\r\n    const {t} = useLocalizationState()\r\n    const {getSelectedChannel} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n\r\n    return useMemo(() => {\r\n        if (!enableSmsCharacterCount || channel?.startsWith('sms')) {\r\n            return {enabled: false, text: ''}\r\n        }\r\n        const {msgCount, charCount, charsPerSegment} = getCharCount(message)\r\n\r\n        let text: string\r\n        if (msgCount === 1) {\r\n            text = `${charCount}/${charsPerSegment}`\r\n        } else if (charCount < 1000) {\r\n            text = `${charCount} (${t.EXTERNAL_CHAT.sms_messages_number(msgCount)})`\r\n        } else {\r\n            text = String(charCount)\r\n        }\r\n        return {enabled: true, text}\r\n    }, [enableSmsCharacterCount, channel, message, t.EXTERNAL_CHAT])\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\n\r\nimport {CHAT_VOICE_RECORDING_PLAYER_GROUP} from '@bpinc/ad-constants'\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId} from '@bpinc/ad-interaction-state-methods'\r\nimport {unmountPlayers} from '@bpinc/lib-audio-player'\r\nimport {Loader} from '@bpinc/lib-jskit-ui'\r\nimport {useInteractionUIChatType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useBotSuggestionsLinksAutoOpener} from '../../hooks/useBotSuggestionsLinksAutoOpener'\r\nimport {useChatFormVisible} from '../../hooks/useChatFormVisible'\r\nimport type {ChatProps} from '../../types'\r\nimport {ExternalMessages} from './ExternalMessages/ExternalMessages'\r\nimport {useBotSuggestions} from './VoiceTranscript/selectors'\r\nimport {VoiceTranscriptMessages} from './VoiceTranscript/VoiceTranscriptMessages'\r\nimport {ChatForm} from './ChatForm'\r\nimport {useChatIsLoading} from './useChatIsLoading'\r\nimport {useMessagesLoader} from './useMessagesLoader'\r\n\r\n\r\nfunction typeToMediaFilter(type: ChatType) {\r\n    switch (type) {\r\n        case 'messages':\r\n            return 'chat'\r\n        case 'calls':\r\n            return 'voice'\r\n        default:\r\n            return 'all'\r\n    }\r\n}\r\n\r\nexport const ExternalChat: React.FC<ChatProps> = React.memo(function ExternalChat(props) {\r\n    const {itemId} = props\r\n    const isChatFormVisible = useChatFormVisible(itemId)\r\n    const botSuggestions = useBotSuggestions(itemId)\r\n    const type = useInteractionUIChatType(itemId)\r\n    const contactId = useInteractionProp(itemId, getContactId)\r\n    const activityHistoryExists = useContactsState(s => s.activityHistory[contactId]?.activityCreatedTimeByMedia?.[typeToMediaFilter(type)])\r\n    const loadMessages = useMessagesLoader(itemId, contactId, type)\r\n    useEffect(() => {\r\n        if (!activityHistoryExists) {\r\n            loadMessages()\r\n        }\r\n    }, [activityHistoryExists, loadMessages])\r\n\r\n    const {isLoading, isInitialLoading} = useChatIsLoading(contactId)\r\n\r\n    const ChatMessages = useMemo(() => type === 'transcript' ? VoiceTranscriptMessages : ExternalMessages, [type])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            unmountPlayers({playerGroup: CHAT_VOICE_RECORDING_PLAYER_GROUP})\r\n        }\r\n    }, [])\r\n\r\n    //Auto open bot suggestions links only in specified tabs\r\n    useBotSuggestionsLinksAutoOpener(itemId, botSuggestions, type === 'all' || type === 'transcript' || type === 'messages')\r\n\r\n    return (\r\n        <div className=\"relative flex flex-1 flex-col justify-between overflow-hidden\">\r\n            <div className=\"relative flex flex-auto flex-col overflow-hidden bg-secondary-background\" data-testid=\"chat-content\">\r\n                {!isInitialLoading && isLoading && <Loader size=\"32\" className=\"top-[30px] z-10\" color=\"primary\" />}\r\n                {isInitialLoading\r\n                    ? <Loader size=\"32\" color=\"primary\" className=\"z-10\" />\r\n                    : <ChatMessages {...props} />\r\n                }\r\n            </div>\r\n            {isChatFormVisible && (\r\n                <ChatForm {...props} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    isAfterCallWork,\r\n    isDelivered,\r\n    isExternalChat,\r\n    isExternalContactCall,\r\n    isNeedToShowWorkitemUI,\r\n    isOnHold,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n    isQualityManagementItemInMonitorMode,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useChatFormVisible(itemId: string) {\r\n    const {privileges} = useSessionState()\r\n    const isPotentialItem = useInteractionProp(itemId, isPotentialInteraction)\r\n    const iqQmMonitorMode = useInteractionProp(itemId, isQualityManagementItemInMonitorMode)\r\n    const isOngoingCall = useInteractionProp(itemId, item => isExternalContactCall(item) && (isDelivered(item) || isOnHold(item)))\r\n    const isDeliveredChat = useInteractionProp(itemId, item => {\r\n        /**\r\n         * delivered - when item is active,\r\n         * hold - when other interaction is active, even if it's an associated interaction\r\n         */\r\n        return isExternalChat(item) && (isDelivered(item) || isOnHold(item))\r\n    })\r\n    const isOutboundChat = useInteractionProp(itemId, item => isExternalChat(item) && isOutboundInteraction(item))\r\n    const isAfterCallWorkChat = useInteractionProp(itemId, isAfterCallWork)\r\n    const needToShowWorkitemUI = useInteractionProp(itemId, isNeedToShowWorkitemUI)\r\n\r\n\r\n    return useMemo(() => {\r\n        /** Hide for supervisor in monitor mode */\r\n        if (iqQmMonitorMode) {\r\n            return false\r\n        }\r\n        /** Don't show chat form if it's after call work chat */\r\n        if (isAfterCallWorkChat) {\r\n            return false\r\n        }\r\n        /** Preview contact activity history for workitem and workitem call */\r\n        if (needToShowWorkitemUI) {\r\n            return false\r\n        }\r\n\r\n        /** Show chat form if it's outbound chat or delivered chat */\r\n        if (isOutboundChat || isDeliveredChat) {\r\n            return true\r\n        }\r\n\r\n        /** If user has CAN_START_EXTERNAL_CHAT privilege, show chat form if it's potential item or delivered call\r\n         * Basically, it's scenario when chat interaction isn't started yet\r\n         */\r\n        if (privileges?.CAN_START_EXTERNAL_CHAT) {\r\n            return isPotentialItem || isOngoingCall\r\n        }\r\n    },\r\n    [\r\n        iqQmMonitorMode,\r\n        isAfterCallWorkChat,\r\n        needToShowWorkitemUI,\r\n        isOngoingCall,\r\n        isDeliveredChat,\r\n        isOutboundChat,\r\n        isPotentialItem,\r\n        privileges?.CAN_START_EXTERNAL_CHAT,\r\n    ])\r\n}\r\n","import {useActivitiesState} from '@bpinc/ad-activities-state-context'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\n\r\n\r\nexport function useChatIsLoading(contactId: string) {\r\n    const {isLoading: isLoadingExternal, messages} = useContactActivityHistory()\r\n    const isInitLoadingExternal = isLoadingExternal && !messages.length\r\n\r\n    const activities = useActivitiesState('activitiesListByContactId')[contactId]\r\n    const activitiesIsLoading = !!activities?.isLoading\r\n    const activitiesInitialLoading = activitiesIsLoading && !activities?.data.length\r\n\r\n    return {isLoading: isLoadingExternal || activitiesIsLoading, isInitialLoading: isInitLoadingExternal || activitiesInitialLoading}\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {OpenedBotSuggestionsUrls, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useLinkOpener} from '../components/external/VoiceTranscript/hooks/useLinkOpener'\r\n\r\n\r\nexport function useBotSuggestionsLinksAutoOpener(\r\n    itemId: string,\r\n    suggestions: VoiceTranscriptSuggestion[] | undefined,\r\n    enabled: boolean,\r\n) {\r\n    const alreadyOpened = useInteractionProp(itemId, s => s?.openedBotSuggestionsUrls)\r\n\r\n    const getSuggestionsToOpen = useCallback(\r\n        function getSuggestionsToOpenCallback(\r\n            opened: OpenedBotSuggestionsUrls | undefined,\r\n        ) {\r\n            return suggestions?.filter(\r\n                message =>\r\n                    isLinkSuggestion(message) &&\r\n                    message.autoOpenURL &&\r\n                    !opened?.[message.suggestionURL],\r\n            )\r\n        },\r\n        [suggestions],\r\n    )\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    useEffect(() => {\r\n        openSuggestions()\r\n        function openSuggestions() {\r\n            if (!enabled) return\r\n\r\n            const suggestionsToOpen = getSuggestionsToOpen(alreadyOpened)\r\n\r\n            suggestionsToOpen?.forEach(openLink)\r\n        }\r\n    }, [alreadyOpened, enabled, getSuggestionsToOpen, openLink])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport type {GroupChatUIScope} from '@bpinc/state-group-chat-ui'\r\n\r\nimport {ExternalChat} from './external/ExternalChat'\r\n\r\n\r\nconst {ChatCenterInteractionLoader} = createComponentLoader(\r\n    'chatCenter', () => import('chatCenter'), 'ChatCenterInteraction',\r\n)\r\n\r\ntype Props = {\r\n    itemId: string\r\n    scope: GroupChatUIScope\r\n}\r\n\r\nexport const Chat: React.FC<Props> = React.memo(function Chat({itemId, scope}) {\r\n    const item = useInteraction(itemId)\r\n    const isInternalChat = Boolean(item && (\r\n        item.groupChatId ||\r\n        item.groupChatMembers ||\r\n        item.userId\r\n    ))\r\n\r\n    return isInternalChat\r\n        ? <ChatCenterInteractionLoader scope={scope} interactionId={itemId} />\r\n        : <ExternalChat itemId={itemId} />\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"window\":\"agent_ChatWindow_window_Z39HC\",\"resizer\":\"agent_ChatWindow_resizer_z1QUX\",\"windowMinimized\":\"agent_ChatWindow_windowMinimized_idVjI\",\"resizerMinimized\":\"agent_ChatWindow_resizerMinimized_Z5dsd\",\"avatar\":\"agent_ChatWindow_avatar_KLnEP\"};","import type {FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useGetUserPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getFirstAndLastName, getUserId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useCommunicatorFloatingStateSetter} from '@bpinc/ad-main-page-ui-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {Chat} from '@bpinc/lib-chat-ui'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport type {OnDragEndParams, ResizePanelProps} from '@bpinc/lib-ui-elements'\r\nimport {Window} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\n\r\nimport styles from './ChatWindow.module.less'\r\n\r\n\r\ninterface ChatWindowProps {\r\n    itemId: string\r\n}\r\n\r\nconst MIN_HEIGHT = 383\r\n\r\nexport const ChatWindow: FC<ChatWindowProps> = ({itemId}) => {\r\n    const item = useInteraction(itemId)\r\n    const [initialSize, setInitialSize] = useState(MIN_HEIGHT)\r\n    const {activateItem} = useInteractionStateMethods()\r\n    const {setItemState} = useInteractionUIState()\r\n    const setCommunicatorFloatingState = useCommunicatorFloatingStateSetter()\r\n    const {value: minimized, toggle: toggleMinimized} = useBoolean()\r\n    const getUserPictureUrl = useGetUserPictureUrl()\r\n\r\n    const localSettings = useLocalSettings()\r\n\r\n    useEffect(\r\n        function getInitialSize() {\r\n            localSettings.get('adChatPopupHeight').then(height => {\r\n                if (typeof height === 'number') {\r\n                    setInitialSize(height)\r\n                }\r\n            })\r\n        },\r\n        [localSettings],\r\n    )\r\n\r\n    const onDragEnd = useCallback(\r\n        function onDragEndCallback({size}: OnDragEndParams) {\r\n            localSettings.set('adChatPopupHeight', size)\r\n        }, [localSettings],\r\n    )\r\n    const resizeOptions: ResizePanelProps = useMemo(\r\n        function memoizeResizeProps() {\r\n            return {\r\n                id: 'chat-in-window',\r\n                direction: 'top',\r\n                minSize: MIN_HEIGHT,\r\n                onDragEnd,\r\n                initialSize,\r\n                containerClass: minimized ? styles.windowMinimized : styles.window,\r\n                borderClass: minimized ? styles.resizerMinimized : styles.resizer,\r\n            }\r\n        },\r\n        [initialSize, minimized, onDragEnd],\r\n    )\r\n\r\n    const onClose = useCallback(\r\n        function onCloseCallback() {\r\n            setItemState(itemId, s => ({...s, chatView: 'embedded'}))\r\n        },\r\n        [itemId, setItemState],\r\n    )\r\n\r\n    const onRestore = useCallback(\r\n        function onRestoreCallback() {\r\n            onClose()\r\n            setCommunicatorFloatingState(s => (s === 'closed' ? 'floating' : s))\r\n            activateItem(itemId)\r\n        },\r\n        [activateItem, itemId, onClose, setCommunicatorFloatingState],\r\n    )\r\n\r\n    const avatarIcon = useMemo(\r\n        function memoizeAvatarIcon() {\r\n            const userId = getUserId(item)\r\n            const isAgent = !!userId\r\n            const names = getFirstAndLastName(item)\r\n            const url = getUserPictureUrl(userId)\r\n\r\n            return (\r\n                <AvatarLegacy\r\n                    className={styles.avatar}\r\n                    url={url}\r\n                    headPhones={isAgent}\r\n                    smallerWithHeadphones\r\n                    type={isAgent ? 'user' : 'contact'}\r\n                    {...names}\r\n                />\r\n            )\r\n        },\r\n        [getUserPictureUrl, item],\r\n    )\r\n\r\n    return (\r\n        <Window\r\n            resizeable={resizeOptions}\r\n            onMinimize={toggleMinimized}\r\n            onClose={onClose}\r\n            onRestore={onRestore}\r\n            minimized={minimized}\r\n            title={item?.displayData.displayName ?? ''}\r\n            icon={avatarIcon}\r\n        >\r\n            <Chat itemId={itemId} scope=\"chatWindow\" />\r\n        </Window>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\n\r\nimport {useBrowserTabMetaInfo} from '@bpinc/ad-current-tab-data-context'\r\nimport {AppRoutes} from '@bpinc/ad-navigation-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {routesConfig} from '../../constants/routes'\r\n\r\n\r\nexport const PrivilegeRouter: React.FC = () => {\r\n    const {privileges, navigationData} = useSessionState(['privileges', 'navigationData'])\r\n    const browserTabInfo = useBrowserTabMetaInfo()\r\n    const appType = browserTabInfo?.app\r\n\r\n    const allowedRoutes = useMemo(() => {\r\n        return Object.values(routesConfig).filter(({checkPrivileges}) => !checkPrivileges || checkPrivileges(privileges))\r\n    }, [privileges])\r\n\r\n    const fallbackRoute = useMemo(() => {\r\n        const privilegesAreReady = !!Object.values(privileges).length\r\n        if (!privilegesAreReady || !navigationData) {\r\n            return null\r\n        }\r\n\r\n        const lastRoute = allowedRoutes.find(r => r.path === navigationData.route[appType])\r\n        if (!lastRoute) {\r\n            return routesConfig[AppRoutes.home]\r\n        }\r\n\r\n        return lastRoute\r\n    }, [allowedRoutes, appType, navigationData, privileges])\r\n\r\n    return (\r\n        <Routes>\r\n            {allowedRoutes.map(({allowSubRoutes, path, ...routeProps}, index) => (\r\n                <Route\r\n                    key={index}\r\n                    path={`${path}${allowSubRoutes ? '/*' : ''}`}\r\n                    {...routeProps}\r\n                />\r\n            ))}\r\n\r\n            {fallbackRoute && (\r\n                <Route\r\n                    path=\"*\"\r\n                    element={\r\n                        <Navigate to={fallbackRoute.path} />\r\n                    }\r\n                />\r\n            )}\r\n        </Routes>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {MAIN_CONTENT_MIN_WIDTH, MIN_KB_WIDTH, useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport type {KBFeatures} from '@bpinc/kb-types'\r\nimport {IconChevronLeft16, IconChevronRight16, IconPin20, IconPinFilled20} from '@bpinc/lib-jskit-ui'\r\nimport type {OnDragEndParams} from '@bpinc/lib-ui-elements'\r\nimport {createComponentLoader, Floating, useCanPin} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridge, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst {KBPageLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBPage')\r\n\r\nconst features: Partial<KBFeatures> = {\r\n    autoOpenInteractionTab: true,\r\n    dualView: false,\r\n    multiTabs: true,\r\n    topHeader: true,\r\n}\r\n\r\nexport const RightBarKB: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        kbFloatingState,\r\n        kbWidth,\r\n        mainContentNode,\r\n        setKBFloatingState,\r\n        setKBWidth,\r\n    } = useMainPageUIState(['kbFloatingState', 'kbWidth', 'setKBFloatingState', 'setKBWidth', 'mainContentNode'])\r\n\r\n    const canPin = useCanPin({\r\n        mainContentNode,\r\n        floatingState: kbFloatingState,\r\n        floatingSize: kbWidth,\r\n        contentMinWidth: MAIN_CONTENT_MIN_WIDTH,\r\n    })\r\n\r\n    const onDragEnd = ({size}: OnDragEndParams) => {\r\n        setKBWidth(size)\r\n    }\r\n\r\n    const toggleFloatingState = () => {\r\n        setKBFloatingState(kbFloatingState === 'closed' ? 'floating' : 'closed')\r\n    }\r\n    const togglePinState = () => {\r\n        setKBFloatingState(kbFloatingState === 'floating' ? 'pinned' : 'floating')\r\n    }\r\n\r\n    const pinButton = (\r\n        <Button\r\n            flat\r\n            icon\r\n            onClick={togglePinState}\r\n            className=\"ml-2\"\r\n            tooltip={kbFloatingState === 'floating'\r\n                ? t.KNOWLEDGE_BASE.pin_tooltip()\r\n                : t.KNOWLEDGE_BASE.unpin_tooltip()\r\n            }\r\n            tooltipPlacement=\"bottom-end\"\r\n            variant=\"ghost\"\r\n        >\r\n            {kbFloatingState === 'pinned' ? <IconPinFilled20 /> : <IconPin20 />}\r\n        </Button>\r\n    )\r\n\r\n    const EarIcon = kbFloatingState === 'closed'\r\n        ? IconChevronLeft16\r\n        : IconChevronRight16\r\n\r\n    const kbSettings = useKbBridge('settings')\r\n    const kbBridge = useKbBridgeConnector()\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    if (!kbSettings?.kbEnabled) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Floating\r\n            canPin={canPin}\r\n            className=\"h-full\"\r\n            closeByEscape={kbFloatingState === 'floating'}\r\n            data-testid=\"kb-panel\"\r\n            exceptionSelectors=\".tox\"\r\n            earIcon={EarIcon}\r\n            earClassName=\"top-6 h-10 w-8\"\r\n            initialSize={kbWidth}\r\n            minSize={MIN_KB_WIDTH}\r\n            onDragEnd={onDragEnd}\r\n            resizeable\r\n            setState={toggleFloatingState}\r\n            side=\"right\"\r\n            state={kbFloatingState}\r\n        >\r\n            <KBPageLoader\r\n                features={features}\r\n                kbBridge={kbBridge}\r\n                pinButton={pinButton}\r\n            />\r\n        </Floating>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Route, Routes} from 'react-router-dom'\r\n\r\nimport {AppRoutes} from '@bpinc/ad-navigation-state-context'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {RightBarKB} from '../KnowledgeBase/RightBarKB'\r\n\r\n\r\nconst hideKBOnRoutes = [\r\n    AppRoutes.campaigns,\r\n    AppRoutes.knowledgeBase,\r\n    AppRoutes.oldOmniQm,\r\n    AppRoutes.omniQm,\r\n    AppRoutes.supervision,\r\n]\r\n\r\nconst {RightBarLoader} = createComponentLoader('supervision', () => import('supervision'), 'RightBar')\r\n\r\nexport const RightBar: React.FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route\r\n                path={AppRoutes.supervision}\r\n                Component={RightBarLoader}\r\n            />\r\n            {hideKBOnRoutes.map(path => (\r\n                <Route\r\n                    key={path}\r\n                    path={path}\r\n                    Component={null}\r\n                />\r\n            ))}\r\n            <Route\r\n                path=\"*\"\r\n                Component={RightBarKB}\r\n            />\r\n        </Routes>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useOpenInteractionWorkspacePage} from '@bpinc/ad-interaction-workspace-ui'\r\nimport {useAppDefaultSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {usePageTitle} from '@bpinc/ad-page-title'\r\nimport {useSupervisionUIContext} from '@bpinc/ad-supervision-ui-context'\r\nimport {useIncomingChatMessageAudioNotifications} from '@bpinc/lib-helpers-ui'\r\nimport {useInteractionModalsAutoOpener} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {useInteractionNotifications} from '@bpinc/lib-system-notifications'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionPopupItemIdSelector} from '@bpinc/state-interaction-ui'\r\n\r\nimport {defaultModalsConfig} from '../constants'\r\nimport {useStateSubscriptions} from '../hooks/state-subscription/useStateSubscriptions'\r\nimport {useModulesImportByPrivileges} from '../hooks/useModulesImportByPrivileges'\r\nimport {CommunicationPanel} from './CommunicationPanel/CommunicationPanel'\r\nimport {ChatWindow} from './ChatWindow'\r\nimport {PrivilegeRouter} from './PrivilegeRouter'\r\nimport {RightBar} from './RightBar'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\nconst {\r\n    CalendarModalsAutoOpenerLoader,\r\n} = createComponentLoader('calendar', () => import('calendar'), 'CalendarModalsAutoOpener')\r\n\r\nexport const MainPage: React.FC = function MainPage() {\r\n    const setMainContentNode = useMainPageUIState('setMainContentNode')\r\n    const setQmMainContentRef = useSupervisionUIContext('setMainContentNode')\r\n\r\n    const communicationPanelIsVisible = useMainPageUIState(\r\n        s => s.communicator.floatingState !== 'closed',\r\n    )\r\n\r\n    usePageTitle()\r\n    useInteractionNotifications()\r\n    useAppDefaultSettings({modals: defaultModalsConfig})\r\n    useStateSubscriptions()\r\n    useIncomingChatMessageAudioNotifications(communicationPanelIsVisible)\r\n    useModulesImportByPrivileges()\r\n    useOpenInteractionWorkspacePage()\r\n\r\n    useInteractionModalsAutoOpener()\r\n\r\n    const chatWindowId = useInteractionPopupItemIdSelector()\r\n    return (\r\n        <>\r\n            <CommunicationPanel />\r\n            <div\r\n                className={styles.content}\r\n                ref={(el: HTMLDivElement) => {\r\n                    setMainContentNode(el)\r\n                    setQmMainContentRef(el)\r\n                }}\r\n            >\r\n                <PrivilegeRouter />\r\n\r\n                {/** Used for {@link @bpinc-ad-modals-ui/IncomingMessageModal.tsx} for createPortal */}\r\n                <div\r\n                    className={styles.incomingMessagesModalsStack}\r\n                    data-incoming-messages-modals-parent-node=\"true\"\r\n                />\r\n            </div>\r\n            <RightBar />\r\n            {chatWindowId && <ChatWindow itemId={chatWindowId} />}\r\n            <CalendarModalsAutoOpenerLoader />\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {routesConfig} from '../../constants/routes'\r\n\r\n\r\nexport function useModulesImportByPrivileges() {\r\n    const privileges = useSessionState('privileges')\r\n\r\n    useMemo(() => {\r\n        Object.values(routesConfig).forEach(route => {\r\n            if (route.checkPrivileges?.(privileges)) {\r\n                route.load?.()\r\n            }\r\n        })\r\n    }, [privileges])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\n\r\n\r\nexport function useOpenInteractionWorkspacePage() {\r\n    const {shownWorkspaceTabs} = useInteractionWorkspaceState()\r\n    const {getLocation, getParams, goTo} = useNavigationState()\r\n\r\n    const hasTabs = !!shownWorkspaceTabs\r\n\r\n    useEffect(() => {\r\n        const pathname = getLocation()\r\n        const locationParams = getParams()\r\n        const isInteractionWorkspacePage = pathname === AppRoutes.interactionWorkspace\r\n\r\n        if (!isInteractionWorkspacePage && hasTabs) {\r\n            goTo(AppRoutes.interactionWorkspace, {returnUrl: pathname})\r\n            return\r\n        }\r\n\r\n        if (isInteractionWorkspacePage && !hasTabs) {\r\n            const url = locationParams.returnUrl || '/'\r\n            goTo(String(url))\r\n        }\r\n    }, [hasTabs, goTo, getLocation, getParams])\r\n\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useEffect, useState} from 'react'\r\nimport {useAtom, useSetAtom} from 'jotai'\r\n\r\nimport {\r\n    MAX_COMMUNICATOR_WIDTH_IN_PERCENT,\r\n    MIN_COMMUNICATOR_WIDTH,\r\n    useCommunicatorUIState,\r\n} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {type FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {parallelItemsAtom, parallelItemsHaveEnoughSpaceAtom} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nconst MAX_COMM_WIDTH = Number(`0.${MAX_COMMUNICATOR_WIDTH_IN_PERCENT}`)\r\n\r\nexport const MainPageResizeController: FCWithChildren<ReactElement> =\r\n    React.memo(props => {\r\n        const [element, setElement] = useState<HTMLElement | null>(null)\r\n        const elementObserver = useResizeObserver(element)\r\n        const getLocation = useNavigationState('getLocation')\r\n        const [parallelItems, parallelItemsDispatch] = useAtom(parallelItemsAtom)\r\n        const containerWidth = elementObserver?.contentRect.width\r\n        const setParallelInteractionsWidth = useCommunicatorUIState(\r\n            s => s.setParallelInteractionsWidth,\r\n        )\r\n        const setHasEnoughSpaceForParallelItems = useSetAtom(\r\n            parallelItemsHaveEnoughSpaceAtom,\r\n        )\r\n\r\n        useEffect(function detectIfExtraParallelInteractionFits() {\r\n            if (!containerWidth) {\r\n                return\r\n            }\r\n\r\n            const extraInteractionFits =\r\n                containerWidth * MAX_COMM_WIDTH >\r\n                (parallelItems.filter(i => i.activeItemId).length + 2) *\r\n                    MIN_COMMUNICATOR_WIDTH\r\n\r\n            setHasEnoughSpaceForParallelItems(extraInteractionFits)\r\n        }, [\r\n            containerWidth,\r\n            getLocation,\r\n            parallelItems,\r\n            parallelItems.length,\r\n            setHasEnoughSpaceForParallelItems,\r\n        ])\r\n\r\n        useEffect(function removeParallelInteractionIfDoesntFit() {\r\n            const showParallelItems =\r\n                getLocation() === AppRoutes.interactionWorkspace &&\r\n                parallelItems.length\r\n            if (!showParallelItems || !containerWidth) {\r\n                return\r\n            }\r\n\r\n            const parallelInteractionsDontFit =\r\n                containerWidth * MAX_COMM_WIDTH <\r\n                (parallelItems.length + 1) * MIN_COMMUNICATOR_WIDTH\r\n\r\n            if (parallelInteractionsDontFit) {\r\n                const index = parallelItems.length - 1\r\n                parallelItemsDispatch({type: 'remove', payload: {index}})\r\n                setParallelInteractionsWidth(w => w - MIN_COMMUNICATOR_WIDTH)\r\n            }\r\n        }, [\r\n            containerWidth,\r\n            getLocation,\r\n            parallelItems,\r\n            parallelItems.length,\r\n            parallelItemsDispatch,\r\n            setParallelInteractionsWidth,\r\n        ])\r\n\r\n        return (\r\n            <div\r\n                ref={setElement}\r\n                className=\"relative flex h-full flex-auto justify-start overflow-hidden\"\r\n                data-testid=\"main-page\"\r\n            >\r\n                {props.children}\r\n            </div>\r\n        )\r\n    })\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {IconPanelHide24, IconPanelShow24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {leftBarStyles} from '../LeftBar'\r\n\r\n\r\nexport const CommunicatorButton: FCWithChildren = ({children}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {floatingState, setFloatingState, openerRef} =\r\n        useCommunicatorUIState()\r\n\r\n    const handleCommunicatorButtonClick = useCallback(\r\n        function handleCommunicatorButtonClickCallback() {\r\n            setFloatingState(s => (s === 'closed' ? 'floating' : 'closed'))\r\n        },\r\n        [setFloatingState],\r\n    )\r\n\r\n    return (\r\n        <Button\r\n            ref={openerRef}\r\n            tooltip={t.UNDEFINED.navigation_acl_tooltip()}\r\n            data-testid=\"communication_panel_leftbar_btn\"\r\n            transparent\r\n            className={tcn(leftBarStyles.button.base, 'mb-2 shrink-0')}\r\n            onClick={handleCommunicatorButtonClick}\r\n        >\r\n            <div className={leftBarStyles.button.icon()}>\r\n                {floatingState !== 'closed' ? (\r\n                    <IconPanelShow24 />\r\n                ) : (\r\n                    <IconPanelHide24 />\r\n                )}\r\n            </div>\r\n            {children}\r\n        </Button>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\nimport type {NavLinkProps} from 'react-router-dom'\r\nimport {NavLink, useMatch} from 'react-router-dom'\r\n\r\nimport {ActiveStatusControl} from '@bpinc/lib-agent-state-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {UnreadBadge} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {AppRoutesType} from '../../constants/routes'\r\nimport {routesConfig} from '../../constants/routes'\r\nimport {CommunicatorButton} from './components/CommunicatorButton'\r\nimport {useInteractionChatsUnread} from './hooks/useInteractionChatsUnread'\r\nimport {useMainMenuItems} from './hooks/useMainMenuItems'\r\n\r\n\r\nexport const leftBarStyles = {\r\n    base: tcn(\r\n        'relative flex h-full w-[76px] shrink-0 flex-col items-center overflow-hidden px-1',\r\n        'border-r border-r-neutral-100 bg-[--c-main-bars-bg]',\r\n    ),\r\n    button: {\r\n        base: tcn(\r\n            'relative mb-px flex flex-col items-center justify-center rounded',\r\n            'text-primary-850 caption-xs',\r\n            'transition-colors',\r\n            'group',\r\n        ),\r\n        icon: (state?: 'active' | 'disabled') => tcn(\r\n            'flex size-[44px] shrink-0 items-center justify-center',\r\n            'rounded',\r\n            'transition-colors state-layer-bg-neutral-0',\r\n            '[&_path]:transition-colors',\r\n            'group-hover:state-layer-color-black group-hover:state-layer-opacity-4',\r\n            {'state-layer-bg-primary-600 svg-color-neutral-0': state === 'active'},\r\n            {'svg-color-neutral-400': state === 'disabled'},\r\n        ),\r\n    },\r\n    unreadBadge: tcn('absolute bottom-5 right-2 leading-[16px]'),\r\n}\r\n\r\n\r\nexport const LeftBar: React.FC = () => {\r\n    const interactionsUnread = useInteractionChatsUnread()\r\n    const menuItems = useMainMenuItems()\r\n\r\n\r\n    return (\r\n        <div\r\n            className={leftBarStyles.base}\r\n            data-testid=\"leftbar\"\r\n        >\r\n            <ActiveStatusControl />\r\n            <CommunicatorButton>\r\n                <UnreadBadge\r\n                    unreadAmount={interactionsUnread}\r\n                    className={tcn(\r\n                        leftBarStyles.unreadBadge,\r\n                        'bottom-0.5',\r\n                    )}\r\n                />\r\n            </CommunicatorButton>\r\n            <div\r\n                className=\"flex shrink grow flex-col justify-between border-t border-t-neutral-200 py-1\"\r\n            >\r\n                <div className=\"relative flex h-full flex-col gap-4\">\r\n                    {menuItems.map(\r\n                        ({\r\n                            icon,\r\n                            title,\r\n                            route,\r\n                            disabled,\r\n                            testId,\r\n                            badge,\r\n                        }) => (\r\n                            <RouterNavLink\r\n                                key={route}\r\n                                route={route}\r\n                                title={title}\r\n                                icon={icon}\r\n                                data-testid={testId}\r\n                                disabled={disabled}\r\n                                badge={badge}\r\n                            />\r\n                        ),\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype RouterNavLinkProps = {\r\n    route: AppRoutesType\r\n    disabled?: boolean\r\n    icon: ReactNode\r\n    badge?: ReactNode\r\n    title: string\r\n} & Omit<NavLinkProps, 'to' | 'children' | 'title'>\r\n\r\nconst RouterNavLink: React.FC<RouterNavLinkProps> = ({\r\n    route,\r\n    disabled,\r\n    icon,\r\n    badge,\r\n    title,\r\n    ...restProps\r\n}) => {\r\n    const {path} = routesConfig[route]\r\n    const isActive = !!useMatch(route)\r\n    const state = disabled ? 'disabled' : isActive ? 'active' : undefined\r\n\r\n    const content = (\r\n        <>\r\n            <div className={leftBarStyles.button.icon(state)}>\r\n                {icon}\r\n            </div>\r\n            <div className=\"flex max-w-full\">\r\n                <span className=\"truncate\">{title}</span>\r\n            </div>\r\n            {badge}\r\n        </>\r\n    )\r\n\r\n    if (disabled) {\r\n        return (\r\n            <div\r\n                className={tcn(\r\n                    leftBarStyles.button.base,\r\n                    'pointer-events-none text-neutral-disabled',\r\n                )}\r\n                title={title}\r\n            >\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <NavLink\r\n            to={path}\r\n            title={title}\r\n            aria-label={title}\r\n            {...restProps}\r\n            className={leftBarStyles.button.base}\r\n        >\r\n            {content}\r\n        </NavLink>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useChatUnread} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {isInternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useGroupChatTotalUnread} from '@bpinc/state-group-chat-context'\r\n\r\n\r\nexport function useInteractionChatsUnread() {\r\n    const unreadExternal = useChatUnread()\r\n\r\n    const interactions = useInteractions()\r\n    const internalChatIds = useMemo(() => interactions\r\n        .filter(isInternalChat)\r\n        .map(i => i.id),\r\n    [interactions])\r\n\r\n    const unreadGroup = useGroupChatTotalUnread(item => internalChatIds.includes(item.chatId))\r\n\r\n    return unreadExternal + unreadGroup\r\n\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport {useMatch} from 'react-router-dom'\r\n\r\nimport {useInteractionWorkspaceState} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes} from '@bpinc/ad-navigation-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {\r\n    IconCalendar,\r\n    IconCampaigns,\r\n    IconCases,\r\n    IconChat,\r\n    IconContacts,\r\n    IconContext,\r\n    IconHomePage,\r\n    IconKnowledgeBase,\r\n    IconOmniQualityManagement,\r\n    IconSupervisor,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {UnreadBadge} from '@bpinc/lib-ui-elements'\r\nimport {useUnreadGroupChatsQuantity} from '@bpinc/state-group-chat-context'\r\nimport {useKbBridge} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {AppRoutesType} from '../../../constants/routes'\r\nimport {routesConfig} from '../../../constants/routes'\r\nimport {leftBarStyles} from '../LeftBar'\r\n\r\n\r\ntype MenuItemType = {\r\n    route: AppRoutesType\r\n    disabled?: boolean\r\n    title: string\r\n    titleFull?: string\r\n    icon: ReactNode\r\n    testId: string\r\n    badge?: ReactNode\r\n    hidden?: boolean\r\n}\r\n\r\nexport function useMainMenuItems() {\r\n    const t = useLocalizationState('t')\r\n    const privileges = useSessionState('privileges')\r\n    const {shownWorkspaceTabs} = useInteractionWorkspaceState()\r\n    const {settings: kbSettings} = useKbBridge()\r\n    const hasOpenedWorkspaceTabs = !!shownWorkspaceTabs?.length\r\n\r\n    const unreadGroupChatsQuantity = useUnreadGroupChatsQuantity()\r\n    const isSupervisorPage = Boolean(useMatch({path: AppRoutes.supervision, end: false}))\r\n    const intentAlertsAmount = useStatsState(state => isSupervisorPage ? 0 : state.intentAlerts.filter(i => !i.closed).length)\r\n\r\n    const menuItems = useMemo<MenuItemType[]>(() => ([\r\n        {\r\n            route: AppRoutes.interactionWorkspace,\r\n            title: t.NAV_BAR.page_title_context(),\r\n            icon: <IconContext />,\r\n            disabled: !hasOpenedWorkspaceTabs,\r\n            testId: 'context-link',\r\n        },\r\n        {\r\n            route: AppRoutes.calendar,\r\n            title: t.NAV_BAR.page_title_calendar(),\r\n            icon: <IconCalendar />,\r\n            testId: 'calendar-link',\r\n        },\r\n        {\r\n            route: AppRoutes.cases,\r\n            title: t.NAV_BAR.page_title_cases(),\r\n            icon: <IconCases />,\r\n            testId: 'cases-link',\r\n        },\r\n        {\r\n            route: AppRoutes.search,\r\n            title: t.NAV_BAR.page_title_contacts(),\r\n            icon: <IconContacts />,\r\n            testId: 'search-link',\r\n        },\r\n        {\r\n            route: AppRoutes.campaigns,\r\n            title: t.NAV_BAR.page_title_campaigns(),\r\n            icon: <IconCampaigns />,\r\n            testId: 'campaigns-link',\r\n        },\r\n        {\r\n            route: AppRoutes.supervision,\r\n            title: t.NAV_BAR.page_title_supervisor(),\r\n            icon: <IconSupervisor />,\r\n            badge:\r\n              <UnreadBadge\r\n                  unreadAmount={intentAlertsAmount}\r\n                  className={leftBarStyles.unreadBadge}\r\n              />,\r\n            testId: 'supervision-link',\r\n        },\r\n        {\r\n            route: AppRoutes.chat,\r\n            title: t.NAV_BAR.page_title_internal_chat(),\r\n            icon: <IconChat />,\r\n            badge:\r\n              <UnreadBadge\r\n                  unreadAmount={unreadGroupChatsQuantity}\r\n                  className={leftBarStyles.unreadBadge}\r\n              />,\r\n            testId: 'chat-center-link',\r\n        },\r\n        {\r\n            route: AppRoutes.omniQm,\r\n            title: t.NAV_BAR.page_title_omni_qm(),\r\n            icon: <IconOmniQualityManagement />,\r\n            testId: 'omni-qm-link',\r\n        },\r\n        {\r\n            route: AppRoutes.knowledgeBase,\r\n            title: t.NAV_BAR.page_title_kb(),\r\n            titleFull: t.NAV_BAR.page_title_kb_full(),\r\n            icon: <IconKnowledgeBase />,\r\n            testId: 'knowledge-base-link',\r\n            hidden: !kbSettings?.kbEnabled,\r\n        },\r\n        {\r\n            route: AppRoutes.home,\r\n            title: t.NAV_BAR.page_title_home_page(),\r\n            icon: <IconHomePage />,\r\n            testId: 'home-link',\r\n        },\r\n    ]).filter(item => {\r\n        if (item.hidden) {\r\n            return false\r\n        }\r\n\r\n        const {checkPrivileges} = routesConfig[item.route]\r\n        if (!checkPrivileges) {\r\n            return true\r\n        }\r\n\r\n        return checkPrivileges(privileges)\r\n    }), [\r\n        t.NAV_BAR,\r\n        hasOpenedWorkspaceTabs,\r\n        intentAlertsAmount,\r\n        unreadGroupChatsQuantity,\r\n        privileges,\r\n        kbSettings?.kbEnabled,\r\n    ])\r\n\r\n    return menuItems\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport * as HoverCard from '@radix-ui/react-hover-card'\r\n\r\nimport type {StatsItem} from '@bpinc/ad-stats-state-types'\r\nimport {ShowMore} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    data: StatsItem[]\r\n    selectedService: string\r\n}\r\n\r\nexport const Stats: React.FC<Props> = ({data, selectedService}) => {\r\n    const t = useLocalizationState('t')\r\n    const getRank = useCallback((n?: string | number) => {\r\n        if (!n) return n\r\n        const mod = Number(n) % 100\r\n        if (mod > 10 && mod < 14) return n + 'th'\r\n        switch (mod % 10) {\r\n            case 1:\r\n                return n + 'st'\r\n            case 2:\r\n                return n + 'nd'\r\n            case 3:\r\n                return n + 'rd'\r\n        }\r\n        return n + 'th'\r\n    }, [])\r\n\r\n    function filterItems(item: StatsItem) {\r\n        //We show  service select instead of this metric\r\n        return item.metric !== 'SERVICE_NAME'\r\n    }\r\n\r\n    function renderValue(item: StatsItem) {\r\n        //Service name isn't shown in old AD\r\n        if (item.metric === 'SERVICE_NAME') {\r\n            return\r\n        }\r\n\r\n        const parts = [item.value]\r\n\r\n        // if ('total' in item) parts.push(`(${item.total})`)\r\n        // if ('next' in item) parts.push(`/${item.next}`)\r\n        if ('rank' in item) parts.push(`(${getRank(item.rank)})`)\r\n\r\n        return parts.join(' ')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ShowMore\r\n                className=\"flex gap-4 overflow-hidden\"\r\n                trigger={\r\n                    <HoverCard.Root openDelay={0}>\r\n                        <HoverCard.Trigger asChild>\r\n                            {/* TODO: Replace with Link Button once added to jskit-ui */}\r\n                            <button className=\"whitespace-nowrap underline text-primary-link\">\r\n                                {t.GLOBAL.view_all()}\r\n                            </button>\r\n                        </HoverCard.Trigger>\r\n                        <HoverCard.Portal>\r\n                            <HoverCard.Content className=\"w-[410px] bg-neutral-0 p-4 shadow-3\" align=\"end\">\r\n                                <p className=\"font-medium text-neutral-fade button-sm\">\r\n                                    {selectedService}\r\n                                </p>\r\n                                <div className=\"relative flex flex-wrap gap-y-8 overflow-hidden pt-2\">\r\n                                    {data.map((item, i) => {\r\n                                        const value = renderValue(item)\r\n\r\n                                        return (\r\n                                            value && (\r\n                                                <div\r\n                                                    className={tcn(\r\n                                                        'min-h-[35px] min-w-9.5 shrink-0 pr-6 border-action',\r\n                                                        'after:absolute after:mt-4 after:h-px after:w-full after:bg-neutral-200',\r\n                                                    )}\r\n                                                    key={i}\r\n                                                >\r\n                                                    <div className=\"text-neutral-fade caption-s\">\r\n                                                        {item.display}\r\n                                                    </div>\r\n                                                    <div className=\"font-semibold text-primary-on-primary\">\r\n                                                        {value}\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <div className=\"absolute -mt-px h-px w-full bg-neutral-0\" />\r\n                            </HoverCard.Content>\r\n                        </HoverCard.Portal>\r\n                    </HoverCard.Root>\r\n                }\r\n            >\r\n                {data.filter(filterItems).map((item, i) => {\r\n                    const value = renderValue(item)\r\n                    return value ? (\r\n                        <div\r\n                            key={i}\r\n                            className=\"flex gap-1 whitespace-nowrap caption-s\"\r\n                        >\r\n                            <span className=\"text-neutral-fade\">\r\n                                {item.display}\r\n                            </span>\r\n                            <span className=\"font-semibold text-primary-on-primary\">\r\n                                {value}\r\n                            </span>\r\n                        </div>\r\n                    ) : null\r\n                })}\r\n            </ShowMore>\r\n        </>\r\n    )\r\n}\r\n","import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useStatsState} from '@bpinc/ad-stats-state-context'\r\nimport {IconArrowDown24, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport type {Option} from '@bpinc/lib-ui-elements'\r\n\r\nimport {Stats} from './Stats'\r\n\r\n\r\ninterface Props {\r\n    rotatePeriod: number\r\n}\r\n\r\nexport const Metrics: React.FC<Props> = ({rotatePeriod}) => {\r\n    const rotateTimeoutRef = useRef<number | null>(null)\r\n    const {agentStats} = useStatsState()\r\n    const {services} = useServicesDispositionsState()\r\n\r\n    const servicesOptions = useMemo(() => {\r\n        return Object.values(services)\r\n            .filter(s => s.id in agentStats)\r\n            .map(s => ({value: s.id, label: s.name}))\r\n    }, [services, agentStats])\r\n\r\n    const [selectedService, setSelectedService] = useState<\r\n        Option | undefined\r\n    >()\r\n\r\n    const statsData = useMemo(() => {\r\n        const serviceId = selectedService?.value\r\n        return (serviceId && agentStats[serviceId]) || undefined\r\n    }, [selectedService, agentStats])\r\n\r\n    const selectNextService = useCallback(() => {\r\n        if (servicesOptions.length > 1) {\r\n            setSelectedService(currentSelectedService => {\r\n                if (currentSelectedService) {\r\n                    const currentIndex = servicesOptions.findIndex(s => {\r\n                        return currentSelectedService.value === s.value\r\n                    })\r\n                    if (currentIndex > -1) {\r\n                        const nextIndex =\r\n                            (currentIndex + 1) % servicesOptions.length\r\n                        return servicesOptions[nextIndex]\r\n                    }\r\n                }\r\n                return servicesOptions[0]\r\n            })\r\n        }\r\n    }, [servicesOptions])\r\n\r\n    const stopServiceRotation = useCallback(() => {\r\n        if (rotateTimeoutRef.current) {\r\n            clearInterval(rotateTimeoutRef.current)\r\n        }\r\n    }, [])\r\n\r\n    const startServiceRotation = useCallback(() => {\r\n        if (rotatePeriod) {\r\n            rotateTimeoutRef.current = setInterval(\r\n                selectNextService,\r\n                rotatePeriod * 1000,\r\n            )\r\n        }\r\n    }, [rotatePeriod, selectNextService])\r\n\r\n    const handleServiceChange = useCallback(\r\n        (option: Option) => {\r\n            setSelectedService(option)\r\n            stopServiceRotation()\r\n            startServiceRotation()\r\n        },\r\n        [startServiceRotation, stopServiceRotation],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!selectedService && servicesOptions.length) {\r\n            setSelectedService(servicesOptions[0])\r\n        }\r\n    }, [selectedService, servicesOptions, startServiceRotation])\r\n\r\n    useEffect(() => {\r\n        if (!rotateTimeoutRef.current && statsData) {\r\n            startServiceRotation()\r\n        }\r\n        // start rotation after at least some stats are loaded\r\n        // eslint-disable-next-line\r\n    }, [statsData]);\r\n\r\n    useEffect(() => {\r\n        return stopServiceRotation\r\n        // onComponentDidMount\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    if (!selectedService || !statsData) return null\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-start overflow-hidden px-4 has-[[data-show-more=true]]:flex-auto\">\r\n            {/* TODO: Replace with the select component once added to jskit-ui */}\r\n            <TriggerDropdown\r\n                align=\"end\"\r\n                options={servicesOptions.map(service => (\r\n                    <button key={service.value} onClick={() => handleServiceChange(service)}>{service.label}</button>\r\n                ))}\r\n            >\r\n                <button className=\"group flex items-center gap-0.5 font-semibold button text-neutral-on-secondary\">\r\n                    {selectedService.label}\r\n                    <IconArrowDown24 className=\"icon-default group-data-[state=open]:rotate-180\" />\r\n                </button>\r\n            </TriggerDropdown>\r\n            <Stats data={statsData} selectedService={selectedService.label} />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {useStatsState, useStatsStateMethods} from '@bpinc/ad-stats-state-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {Metrics} from './Metrics'\r\n\r\n\r\nexport const Dashboard: React.FC = () => {\r\n    const {dashboardConfig} = useStatsState()\r\n    const {getDashboardConfig} = useStatsStateMethods()\r\n    const hasActiveInteraction = useInteractionStateSelector(s => !!s.activeItem)\r\n    useEffect(() => {\r\n        if (!dashboardConfig) {\r\n            getDashboardConfig()\r\n        }\r\n        // onComponentDidMount\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    if (!dashboardConfig?.enabled) return null\r\n\r\n    return (\r\n        <div className={tcn('flex flex-auto items-center justify-end overflow-hidden', {'md:hidden': hasActiveInteraction})}>\r\n            <Metrics rotatePeriod={dashboardConfig.rotatePeriod} />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useDispositionsSettings} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getItemDisposition} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useOpenDispositionPanel} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {IconCheck16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useInteractionUIActiveTab} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface DispositionButtonProps {\r\n    className?: string\r\n}\r\n\r\nexport const DispositionButton: FC<DispositionButtonProps> = ({className}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useNonAssertedInteractionId() ?? ''\r\n\r\n    const communicatorFloatingState = useCommunicatorUIState(s => s.floatingState)\r\n    const selectedDisposition = useActiveInteractionProp(getItemDisposition)\r\n    const {useDispositions} = useDispositionsSettings(interactionId)\r\n    const activeTab = useInteractionUIActiveTab(interactionId)\r\n    const handleClick = useOpenDispositionPanel(interactionId)\r\n\r\n    const buttonText = selectedDisposition?.id ? t.DISPOSITION.disposition_set() : t.DISPOSITION.set_disposition()\r\n\r\n    if (!useDispositions) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            onClick={handleClick}\r\n            tooltip={buttonText}\r\n            state={activeTab === 'resolution' && communicatorFloatingState !== 'closed' ? 'disabled' : 'default'}\r\n            size=\"sm\"\r\n            variant=\"secondary\"\r\n            iconLeft={selectedDisposition?.id ? <IconCheck16 className=\"svg-color-current\" /> : undefined}\r\n            className={tcn('ml-6 shrink-0', className)}\r\n        >\r\n            {buttonText}\r\n        </Button>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {ButtonProps} from '@servicepattern/ui'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = ButtonProps & {\r\n    withStateLayer?: boolean\r\n}\r\n\r\nexport const EndButton: FC<Props> = ({withStateLayer, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'rounded p-2.5',\r\n                'transition-colors hover:state-layer-opacity-4',\r\n                'state-layer-bg-[--c-main-bars-bg] state-layer-color-black state-layer-opacity-0', {\r\n                    'p-0': !withStateLayer,\r\n                })}\r\n        >\r\n            <Button\r\n                //TODO: Add the click throttle\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                color=\"danger\"\r\n                className=\"px-3 py-0.5\"\r\n                data-testid=\"complete-button\"\r\n                {...props}\r\n            >\r\n                {t.INTERACTIONS.end()}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {ButtonProps} from '@servicepattern/ui'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {IconEndCall} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = ButtonProps & {\r\n    isDestructive?: boolean\r\n    renderIcon?: () => JSX.Element\r\n}\r\nexport const EndCallButton: FC<Props> = React.memo(({isDestructive, renderIcon, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <Button\r\n            //TODO: Add the click throttle\r\n            variant={isDestructive ? 'destructive' : 'neutral'}\r\n            size=\"sm\"\r\n            color=\"danger\"\r\n            className={tcn({'h-7 w-12 px-3 py-0.5': isDestructive, 'ml-2 h-6 px-2 py-1 text-on-error': !isDestructive})}\r\n            tooltip={t.CALL_DETAILS_FORM.interaction_endCall()}\r\n            data-testid=\"complete-button\"\r\n            {...props}\r\n        >\r\n            {renderIcon?.() || <IconEndCall className=\"size-5 svg-color-current\" />}\r\n        </Button>\r\n    )\r\n})\r\n","import React, {type FC} from 'react'\r\nimport {type ButtonProps, Button} from '@servicepattern/ui'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const EndChatButton: FC<ButtonProps> = ({className, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <Button\r\n            variant=\"neutral\"\r\n            size=\"xs\"\r\n            className={tcn(\r\n                'rounded-sm border-action',\r\n                'text-on-error',\r\n                'ml-2 px-2 py-1',\r\n                'h-6',\r\n                className,\r\n            )}\r\n            data-testid=\"complete-button\"\r\n            {...props}\r\n        >\r\n            {t.INTERACTIONS.end()}\r\n        </Button>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {AnimatePresence, motion} from 'framer-motion'\r\n\r\nimport {CircleButton, IconHold16, IconPause16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {InteractionTimer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\ninterface HoldButtonProps extends ControlButton {\r\n    holdStartTime?: number\r\n}\r\n\r\nexport const HoldButton: FC<HoldButtonProps> = ({\r\n    isActive,\r\n    onClick,\r\n    holdStartTime,\r\n    disabled,\r\n    iconClassName,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <CircleButton\r\n            isActive={isActive}\r\n            onClick={onClick}\r\n            className=\"group/hold w-auto\"\r\n            disabled={disabled}\r\n            tooltip={{\r\n                content: isActive\r\n                    ? t.CALL_DETAILS_FORM.interaction_retrieve()\r\n                    : t.CALL_DETAILS_FORM.interaction_hold(),\r\n            }}\r\n            data-testid=\"hold-button\"\r\n            data-on-hold={isActive || undefined}\r\n        >\r\n            <motion.div\r\n                animate={isActive ? {paddingRight: 9} : {paddingRight: 5}}\r\n                className=\"flex items-center py-[3px] pl-[5px]\"\r\n            >\r\n                <div className={tcn('flex gap-0.5 ')}>\r\n                    <IconHold16\r\n                        className={tcn(iconClassName, 'hidden size-4.5', {\r\n                            'group-hover/hold:block': isActive,\r\n                        })}\r\n                    />\r\n                    <IconPause16\r\n                        className={tcn(iconClassName, 'visible size-4.5', {\r\n                            'group-hover/hold:hidden': isActive,\r\n                        })}\r\n                    />\r\n                </div>\r\n                <AnimatePresence>\r\n                    {isActive && (\r\n                        <motion.div\r\n                            initial={{width: 0}}\r\n                            animate={{width: 'auto'}}\r\n                            exit={{width: 0}}\r\n                        >\r\n                            <InteractionTimer startTime={holdStartTime} />\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n            </motion.div>\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {MicrophoneVolume} from '@bpinc/lib-helpers'\r\nimport {IconMute16, IconVoiceVolume} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface MicrophoneIconProps {\r\n    muted: boolean\r\n    className?: string\r\n}\r\n\r\nconst micVolumeManager = new MicrophoneVolume()\r\n\r\nexport const MicrophoneIcon: FC<MicrophoneIconProps> = ({muted, className}) => {\r\n    const microphoneRef = useRef<SVGSVGElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (!muted) {\r\n            micVolumeManager.startAnalysis(volume => {\r\n                if (!microphoneRef.current) {\r\n                    return\r\n                }\r\n\r\n                updateGradient(microphoneRef.current)\r\n\r\n                function updateGradient(svg: SVGElement) {\r\n                    const breakpoint = svg.querySelector<SVGStopElement>('linearGradient stop')\r\n                    if (!breakpoint) {\r\n                        return\r\n                    }\r\n\r\n                    breakpoint.setAttribute('offset', `${volume}%`)\r\n                }\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            micVolumeManager.stopAnalysis()\r\n        }\r\n    }, [muted])\r\n    return muted ? (\r\n        <IconMute16 className={tcn('size-4.5', className)} />\r\n    ) : (\r\n        <IconVoiceVolume className={tcn('size-4.5 icon-default', className)} ref={microphoneRef} />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MicrophoneIcon} from './MicrophoneIcon'\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const MuteButton: FC<ControlButton> = ({\r\n    isActive,\r\n    disabled,\r\n    onClick,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <CircleButton\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            tooltip={{content: isActive\r\n                ? t.CALL_DETAILS_FORM.unmute_tooltip()\r\n                : t.CALL_DETAILS_FORM.mute_tooltip(),\r\n            }}\r\n            data-testid=\"mute-button\"\r\n            data-muted={isActive || undefined}\r\n        >\r\n            <MicrophoneIcon className=\"icon-fade\" muted={!!isActive} />\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton, IconRecording16, IconRecordingActive16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const RecordButton: FC<ControlButton> = ({\r\n    isActive,\r\n    onClick,\r\n    className,\r\n    disabled,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <CircleButton\r\n            onClick={onClick}\r\n            isActive={isActive}\r\n            disabled={disabled}\r\n            className={tcn(disabled ? 'icon-disabled' : 'icon-error', className)}\r\n            tooltip={{\r\n                content: isActive\r\n                    ? t.CALL_DETAILS_FORM.interaction_recordStop_tooltip()\r\n                    : t.CALL_DETAILS_FORM.interaction_recordStart_tooltip(),\r\n            }}\r\n            data-testid=\"call-recording-button\"\r\n            data-recording-active={isActive || undefined}\r\n        >\r\n            {isActive ? (\r\n                <IconRecordingActive16 className=\"size-4.5\" />\r\n            ) : (\r\n                <IconRecording16 className=\"size-4.5\" />\r\n            )}\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton, IconForward16} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const TransferButton: FC<ControlButton> = ({isActive, onClick, disabled, iconClassName, tooltip}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <CircleButton\r\n            isActive={isActive}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            tooltip={{content: tooltip || t.CALL_DETAILS_FORM.interaction_initiate_transfer()}}\r\n            data-testid=\"transfer-button\"\r\n            data-on-hold={isActive || undefined}\r\n        >\r\n            <IconForward16 className={iconClassName} />\r\n        </CircleButton>\r\n    )\r\n}\r\n","//Note, that .tsx extension is required in order to use tailwindcss in this file\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nexport const showOnHoverStyles = tcn(\r\n    'hidden items-center justify-center opacity-0',\r\n    'transition-opacity group-hover:flex group-hover:opacity-100',\r\n)\r\n\r\nexport const iconButtonStyles = tcn(\r\n    'ml-2 h-6 w-6 rounded-full transition-shadow first:ml-0',\r\n    'hover:bg-black/30 hover:shadow-[0_0_0_6px_rgba(0,0,0,0.3)]',\r\n    'active:bg-black/60 active:shadow-[0_0_0_6px_rgba(0,0,0,0.6)]',\r\n)\r\nexport const interactionBarStyles = tcn(\r\n    'flex items-center overflow-hidden icon-fade text-neutral-fade',\r\n    'w-[40vw] min-w-[416px]',\r\n)\r\n","import type {FC} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {ButtonDropdown} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ninterface InteractionButtonProps {\r\n    icon: JSX.Element\r\n    text: string\r\n    items: DropdownOption[]\r\n    OptionComponent: FC<Omit<DropdownOption, 'key'>>\r\n    align?: 'start' | 'center' | 'end'\r\n    onClick: (value: string) => void\r\n}\r\n\r\ntype DropdownOption = {\r\n    key: string\r\n    value: string\r\n    type: string\r\n}\r\n\r\nexport const InteractionButton: FC<InteractionButtonProps> = ({\r\n    icon,\r\n    text,\r\n    items,\r\n    onClick,\r\n    OptionComponent,\r\n    align = 'center',\r\n}) => {\r\n    return items.length > 1 ? (\r\n        <ButtonDropdown\r\n            align={align}\r\n            modal={false}\r\n            className=\"flex-auto [&>*:not(:last-child)]:border-b [&>*:not(:last-child)]:border-default\"\r\n            options={items.map(({key, ...props}) => (\r\n                <button key={key} onClick={() => onClick(props.value)}>\r\n                    <OptionComponent {...props} />\r\n                </button>\r\n            ))}\r\n            button={{variant: 'neutral', iconLeft: icon}}\r\n        >\r\n            {text}\r\n        </ButtonDropdown>\r\n    ) : (\r\n        <Button\r\n            onClick={() => onClick(items[0]!.value)}\r\n            className=\"flex-auto\"\r\n            state={items.length ? 'default' : 'disabled'}\r\n            variant=\"neutral\"\r\n            iconLeft={icon}\r\n        >\r\n            {text}\r\n        </Button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {getInitials} from '@bpinc/ad-formatting-helpers'\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getFirstAndLastName,\r\n    isCallConference,\r\n    isChatConference,\r\n    isEmail,\r\n    isGroupChat,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useUnread} from '@bpinc/lib-helpers-ui'\r\nimport {Avatar} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {UnreadBadge} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface InteractionBarAvatarProps {\r\n    className?: string\r\n}\r\n\r\nexport const InteractionBarAvatar: React.FC<InteractionBarAvatarProps> = ({className}) => {\r\n    const activeItem = useActiveInteraction()\r\n\r\n    assertDefined(activeItem)\r\n\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {userId, contactId} = activeItem\r\n    const {firstName, lastName} = getFirstAndLastName(activeItem)\r\n\r\n    function getAvatarType() {\r\n        if (isGroupChat(activeItem) || isCallConference(activeItem) || isChatConference(activeItem)) {\r\n            return 'conference'\r\n        }\r\n\r\n        if (contactId) {\r\n            return 'contact'\r\n        }\r\n\r\n        if (userId) {\r\n            if (activeItem?.displayData.emiUserType === 'msteams_channel') {\r\n                return 'msteams-channel'\r\n            }\r\n            if (activeItem?.displayData.emiUserType === 'msteams') {\r\n                return 'msteams-user'\r\n            }\r\n            return 'user'\r\n        }\r\n\r\n        if (isEmail(activeItem)) {\r\n            return 'case'\r\n        }\r\n\r\n        return 'contact'\r\n    }\r\n\r\n\r\n    const avatarPhotoUrl = isGroupChat(activeItem)\r\n        ? undefined\r\n        : getAvatarUrl({\r\n            userId,\r\n            contactId,\r\n            userType: activeItem?.displayData?.emiUserType,\r\n            photoUrl: activeItem?.displayData?.emiPhotoUrl,\r\n        })\r\n\r\n    const unread = useUnread(activeItem)\r\n\r\n    return (\r\n        <div className=\"relative\">\r\n            <Avatar\r\n                className={className}\r\n                type={getAvatarType()}\r\n                fallback={getInitials(firstName, lastName)}\r\n                src={avatarPhotoUrl}\r\n                size=\"32\"\r\n            />\r\n            <UnreadBadge unreadAmount={unread} className=\"absolute bottom-0 right-0 translate-x-1/2\" />\r\n        </div>\r\n    )\r\n}\r\n","import type {HTMLAttributes} from 'react'\r\nimport {type FC, createElement} from 'react'\r\n\r\nimport {useContactDisplayName} from '@bpinc/ad-contacts-state-hooks'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useActiveInteractionContactId, useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getDisplayName, getPhoneFromItem, isCallConference, isChatConference} from '@bpinc/ad-interaction-state-methods'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface InteractionBarDisplayNameProps extends HTMLAttributes<HTMLElement> {\r\n    className?: string\r\n    as?: 'p' | 'button'\r\n}\r\n\r\nexport const InteractionBarDisplayName: FC<InteractionBarDisplayNameProps> = ({\r\n    className,\r\n    as = 'p',\r\n    ...htmlProps\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const contactId = useActiveInteractionContactId()\r\n    const interactionDisplayName = useActiveInteractionProp(getDisplayName)\r\n    const isConference = useActiveInteractionProp(\r\n        i => isCallConference(i) || isChatConference(i),\r\n    )\r\n    const contactDisplayName = useContactDisplayName(contactId)\r\n    const phoneNumber = useActiveInteractionProp(getPhoneFromItem)\r\n    const displayName = contactDisplayName || interactionDisplayName\r\n    const conferenceMembersAmount = useActiveInteractionProp(i =>\r\n        isChatConference(i)\r\n            ? (i?.chatParties?.length ?? 0)\r\n            : isCallConference(i)\r\n                ? (i?.parties?.length ?? 0)\r\n                : 0,\r\n    )\r\n\r\n    function getTextContent() {\r\n        if (isConference) {\r\n            return t.INTERACTIONS.conference(conferenceMembersAmount)\r\n        }\r\n\r\n        if (displayName) {\r\n            return displayName\r\n        }\r\n\r\n        if (phoneNumber) {\r\n            return `${t.GLOBAL.anonymous()} ${formatPhone(phoneNumber)}`\r\n        }\r\n\r\n        return t.GLOBAL.anonymous()\r\n    }\r\n\r\n    return createElement(as, {\r\n        className: tcn(\r\n            'cursor-default truncate font-semibold text-primary-on-primary body',\r\n            className,\r\n        ),\r\n        children: getTextContent(),\r\n        ...htmlProps,\r\n    })\r\n\r\n\r\n}\r\n","import React, {useRef} from 'react'\r\nimport * as HoverCard from '@radix-ui/react-hover-card'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {AddToExistingModal, QuickAddModal, useAddNewContact} from '@bpinc/ad-contact-modals'\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {EmailTypes, PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {\r\n    useActiveChatInteractionId,\r\n    useActiveInteraction,\r\n    useActiveInteractionProp,\r\n} from '@bpinc/ad-interaction-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {canHaveDisposition, getItemDisposition, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useContactsActions} from '@bpinc/ad-searchpage-ui'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsStateServices} from '@bpinc/ad-services-dispositions-context'\r\nimport {useHandleUseContact} from '@bpinc/lib-contact-details'\r\nimport {InteractionFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {useOpenDispositionPanel} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {IconEmailEnvelope24, IconMessage, IconPhone} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmailOption, PhoneOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {InteractionButton} from './ContactControls/InteractionButton'\r\nimport {InteractionBarAvatar} from './InteractionBarAvatar'\r\nimport {InteractionBarDisplayName} from './InteractionBarDisplayName'\r\n\r\n\r\ninterface ContactInfoProps {\r\n    className?: string\r\n}\r\n\r\nconst VERTICAL_PADDING = 9\r\n\r\ntype DropdownOption = {\r\n    key: string\r\n    value: string\r\n    type: string\r\n}\r\n\r\nexport const ContactInfo: React.FC<ContactInfoProps> = ({className}) => {\r\n    const hovercardOpened = useBoolean()\r\n    const selectedDisposition = useActiveInteractionProp(getItemDisposition)\r\n    const services = useServicesDispositionsStateServices()\r\n    const canHaveDispositions = useActiveInteractionProp(i =>\r\n        canHaveDisposition(i, services),\r\n    )\r\n    const {t} = useLocalizationState()\r\n\r\n    const dispositionText = selectedDisposition?.id\r\n        ? selectedDisposition.name\r\n        : t.DISPOSITION.set_disposition()\r\n\r\n    const primaryContentRef = useRef<HTMLDivElement>(null)\r\n    const primaryContentHeight = primaryContentRef.current?.offsetHeight ?? 0\r\n    const goTo = useNavigationState('goTo')\r\n\r\n    const activeItem = useActiveInteraction()\r\n    const openQuickAddModal = useModalComponentOpener(QuickAddModal)\r\n    const openAddToExistingModal = useModalComponentOpener(AddToExistingModal)\r\n\r\n    const phoneOptions: DropdownOption[] =\r\n        activeItem?.displayData?.phones?.map(phone => ({\r\n            key: phone.id,\r\n            value: phone.phone,\r\n            type: phone.type,\r\n        })) ?? []\r\n    const emailOptions: DropdownOption[] =\r\n        activeItem?.displayData?.emails?.map(email => ({\r\n            key: email.id,\r\n            value: email.emailAddress,\r\n            type: email.type,\r\n        })) ?? []\r\n\r\n    const {handleContactOpen} = useContactsActions()\r\n    const handleUse = useHandleUseContact()\r\n\r\n    const activeChatId = useActiveChatInteractionId()\r\n    assertDefined(activeChatId)\r\n    const openDispositionPanel = useOpenDispositionPanel(activeChatId)\r\n\r\n    function handleOpenDispositionPanel() {\r\n        openDispositionPanel()\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    function handleOpenContactPage() {\r\n        if (!activeItem?.contactId) {\r\n            console.error('No contactId found in active interaction')\r\n            return\r\n        }\r\n\r\n        goTo(AppRoutes.search)\r\n        handleContactOpen({\r\n            id: activeItem.contactId,\r\n            firstName: activeItem.displayData.firstName,\r\n            lastName: activeItem.displayData.lastName,\r\n        })\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    assertDefined(activeItem)\r\n\r\n    const onCall = useCallHandler()\r\n\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    assertDefined(activeItem)\r\n\r\n    const {\r\n        contactId,\r\n        userId,\r\n        groupChatId,\r\n        displayData: {firstName, lastName, emiPhotoUrl, emiUserType},\r\n    } = activeItem\r\n\r\n    const isUndefinedContact = !contactId && !userId\r\n\r\n    function handleCall(phone: string) {\r\n        onCall({\r\n            phone,\r\n            contactId,\r\n            userId,\r\n            serviceId: selectedService,\r\n            firstName,\r\n            lastName,\r\n            accessNumberId: selectedDIDNumber,\r\n            origination: 'topbar',\r\n        })\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    function handleChat(phone: string) {\r\n        openActivityHistory({\r\n            contactId: activeItem?.contactId,\r\n            userId: activeItem?.userId,\r\n            phone,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            groupChatId,\r\n            emiPhotoUrl,\r\n            emiUserType,\r\n            origination: 'topbar',\r\n        })\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    function handleEmail(_email: string) {\r\n        hovercardOpened.setFalse()\r\n        alert('TODO: Implement email')\r\n    }\r\n\r\n    function onContactCreated(createdContactId: string) {\r\n        handleUse({\r\n            id: createdContactId,\r\n            firstName: firstName ?? '',\r\n            lastName: lastName ?? '',\r\n            phone: '',\r\n            email: '',\r\n        })\r\n    }\r\n\r\n    const addNewContact = useAddNewContact(activeItem, onContactCreated)\r\n\r\n    function handleAddNewContact() {\r\n        addNewContact()\r\n        hovercardOpened.setFalse()\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const {createContact} = useContactsStateMethods()\r\n\r\n    function handleQuickAdd() {\r\n\r\n        function getPrimaryPhoneNumber(): string | undefined {\r\n            if (isWorkItem(activeItem)) {\r\n                return activeItem?.workitemData?.suggestedPhone\r\n            }\r\n            return activeItem?.displayData?.number\r\n        }\r\n\r\n        openQuickAddModal({\r\n            defaultValues: {\r\n                firstName,\r\n                lastName,\r\n                email: activeItem?.displayData?.email,\r\n                phone: getPrimaryPhoneNumber(),\r\n            },\r\n            onSubmit: contact => {\r\n                createContact(\r\n                    {\r\n                        contact: {\r\n                            first_name: contact.firstName,\r\n                            last_name: contact.lastName,\r\n                            emails: contact.email\r\n                                ? [\r\n                                    {\r\n                                        type: EmailTypes.PRIMARY,\r\n                                        email_address: contact.email,\r\n                                    },\r\n                                ]\r\n                                : [],\r\n                            phones: contact.phone\r\n                                ? [\r\n                                    {\r\n                                        type: PhoneTypes.BUSINESS,\r\n                                        phone: contact.phone,\r\n                                    },\r\n                                ]\r\n                                : [],\r\n                        },\r\n                    },\r\n                    {\r\n                        onSuccess(id: string) {\r\n                            goTo(AppRoutes.search)\r\n                            handleContactOpen({\r\n                                id,\r\n                                firstName: contact.firstName,\r\n                                lastName: contact.lastName,\r\n                            })\r\n                            handleUse({\r\n                                id,\r\n                                firstName: contact.firstName,\r\n                                lastName: contact.lastName,\r\n                                email: contact.email,\r\n                                phone: contact.phone,\r\n                            })\r\n                        },\r\n                    },\r\n                )\r\n            },\r\n        })\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    function handleAddToExisting() {\r\n        openAddToExistingModal({\r\n            handleAddNewContact,\r\n            handleAddToExisting: handleUse,\r\n        })\r\n        hovercardOpened.setFalse()\r\n    }\r\n\r\n    return (\r\n        <HoverCard.Root\r\n            open={hovercardOpened.value}\r\n            onOpenChange={hovercardOpened.toggle}\r\n        >\r\n            <HoverCard.Trigger asChild>\r\n                <div\r\n                    ref={primaryContentRef}\r\n                    className={tcn(\r\n                        'ml-2 flex items-center gap-2 overflow-hidden',\r\n                        className,\r\n                    )}\r\n                >\r\n                    <InteractionBarAvatar />\r\n                    <div className=\"truncate\">\r\n                        <div className=\"flex\">\r\n                            <InteractionBarDisplayName />\r\n                        </div>\r\n                        {canHaveDispositions && dispositionText && (\r\n                            <p className=\"-mt-0.5 truncate caption-s text-neutral-fade\">\r\n                                {dispositionText}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </HoverCard.Trigger>\r\n            <HoverCard.Portal forceMount>\r\n                <HoverCard.Content\r\n                    forceMount\r\n                    align=\"start\"\r\n                    style={{\r\n                        transform: `translate(-9px, -${\r\n                            primaryContentHeight + VERTICAL_PADDING\r\n                        }px)`,\r\n                    }}\r\n                    className={tcn(\r\n                        'z-[1] flex w-[464px] flex-col border bg-neutral-0  pt-2 shadow-4 border-default',\r\n                        'pointer-events-none invisible size-0 opacity-0 transition-opacity',\r\n                        {\r\n                            'pointer-events-auto visible size-auto opacity-100':\r\n                                hovercardOpened.value,\r\n                        },\r\n                    )}\r\n                >\r\n                    <div\r\n                        className={tcn(\r\n                            'ml-2 flex items-start gap-2 pb-2 pr-2',\r\n                            className,\r\n                        )}\r\n                    >\r\n                        <InteractionBarAvatar className=\"mt-[2.5px]\" />\r\n                        <div className=\"flex-auto truncate\">\r\n                            <div className=\"flex justify-between\">\r\n                                {activeItem?.contactId ? (\r\n                                    <InteractionBarDisplayName\r\n                                        onClick={handleOpenContactPage}\r\n                                        as=\"button\"\r\n                                        className=\"inline hover:underline\"\r\n                                    />\r\n                                ) : (\r\n                                    <InteractionBarDisplayName />\r\n                                )}\r\n                                <InteractionFavoriteButton\r\n                                    interaction={activeItem}\r\n                                />\r\n                            </div>\r\n                            {canHaveDispositions && dispositionText && (\r\n                                <button\r\n                                    onClick={handleOpenDispositionPanel}\r\n                                    className=\"-mt-0.5 block whitespace-normal p-0 caption-s text-neutral-fade hover:underline\"\r\n                                    title={dispositionText}\r\n                                >\r\n                                    {dispositionText}\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={tcn(\r\n                            'flex flex-auto gap-2 border-t p-4 border-default',\r\n                            {'pb-2': isUndefinedContact},\r\n                        )}\r\n                    >\r\n                        <InteractionButton\r\n                            onClick={handleCall}\r\n                            OptionComponent={PhoneOption}\r\n                            icon={<IconPhone className=\"svg-color-current\" />}\r\n                            items={phoneOptions}\r\n                            align=\"start\"\r\n                            text={t.INTERACTIONS.call()}\r\n                        />\r\n                        <InteractionButton\r\n                            onClick={handleChat}\r\n                            OptionComponent={PhoneOption}\r\n                            icon={<IconMessage className=\"svg-color-current\" />}\r\n                            text={t.INTERACTIONS.message()}\r\n                            items={phoneOptions}\r\n                            align=\"center\"\r\n                        />\r\n                        <InteractionButton\r\n                            onClick={handleEmail}\r\n                            OptionComponent={EmailOption}\r\n                            text={t.INTERACTIONS.email()}\r\n                            icon={<IconEmailEnvelope24 className=\"svg-color-current\" />}\r\n                            items={emailOptions}\r\n                            align=\"end\"\r\n                        />\r\n                    </div>\r\n                    {isUndefinedContact && (\r\n                        <div className=\"flex gap-1 px-4 pb-2\">\r\n                            <Button\r\n                                size=\"xs\"\r\n                                variant=\"ghost\"\r\n                                onClick={handleQuickAdd}\r\n                            >\r\n                                {t.INTERACTIONS.quick_add()}\r\n                            </Button>\r\n                            <Button\r\n                                size=\"xs\"\r\n                                variant=\"ghost\"\r\n                                onClick={handleAddNewContact}\r\n                            >\r\n                                {t.INTERACTIONS.new_contact()}\r\n                            </Button>\r\n                            <Button\r\n                                size=\"xs\"\r\n                                variant=\"ghost\"\r\n                                onClick={handleAddToExisting}\r\n                            >\r\n                                {t.INTERACTIONS.add_to_existing()}\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </HoverCard.Content>\r\n            </HoverCard.Portal>\r\n        </HoverCard.Root>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {motion} from 'framer-motion'\r\n\r\nimport {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getMediaIcon} from '@bpinc/ad-interaction-state-methods'\r\nimport {EndButton} from '@bpinc/lib-interaction-buttons'\r\nimport {InteractionMediaIcon, InteractionTimer} from '@bpinc/lib-ui-elements'\r\n\r\nimport {interactionBarStyles} from '../styles'\r\nimport {ContactInfo} from './ContactInfo'\r\n\r\n\r\ninterface DefaultContentProps {\r\n    onDisconnect: () => void\r\n    disconnectButtonTooltip?: string\r\n}\r\n\r\nexport const DefaultContent: FC<DefaultContentProps> = ({onDisconnect, disconnectButtonTooltip}) => {\r\n    const iconType = useActiveInteractionProp(getMediaIcon)\r\n    const deliveredStartTime = useActiveInteractionProp(\r\n        i => i?.displayData.deliveredStartTime,\r\n    )\r\n\r\n    return (\r\n        <div className={interactionBarStyles}>\r\n            <motion.div className=\"flex items-center pl-4\" whileHover=\"hover\">\r\n                <InteractionMediaIcon className=\"icon-default\" icon={iconType} />\r\n                <InteractionTimer\r\n                    className=\"ml-1 mr-2\"\r\n                    startTime={deliveredStartTime}\r\n                />\r\n                <motion.div\r\n                    initial={{width: 0, opacity: 0, pointerEvents: 'none'}}\r\n                    variants={{\r\n                        hover: {width: 'auto', opacity: 1, pointerEvents: 'auto'},\r\n                    }}\r\n                >\r\n                    <EndButton onClick={onDisconnect} tooltip={disconnectButtonTooltip} withStateLayer />\r\n                </motion.div>\r\n            </motion.div>\r\n            <ContactInfo />\r\n        </div>\r\n    )\r\n}\r\n","import {type FC} from 'react'\r\nimport {motion} from 'framer-motion'\r\n\r\nimport {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getIsCallEstablished, getMediaIcon} from '@bpinc/ad-interaction-state-methods'\r\nimport {EndCallButton} from '@bpinc/lib-interaction-buttons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {InteractionMediaIcon, InteractionTimer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {interactionBarStyles} from '../styles'\r\nimport {InteractionBarDisplayName} from './InteractionBarDisplayName'\r\n\r\n\r\ninterface DialingInteractionContentProps {\r\n    onDisconnect: () => void\r\n}\r\n\r\nexport const DialingInteractionContent: FC<DialingInteractionContentProps> = ({\r\n    onDisconnect,\r\n}) => {\r\n    const iconType = useActiveInteractionProp(getMediaIcon)\r\n    const isCallEstablished = useActiveInteractionProp(getIsCallEstablished)\r\n    const pendingStartTime = useActiveInteractionProp(\r\n        i => i?.displayData.pendingStartTime,\r\n    )\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    function formatTimer(str: string) {\r\n        return `${t.CALL_DETAILS_FORM.call_status_dialing()} | ${str}`\r\n    }\r\n\r\n    return (\r\n        <div className={interactionBarStyles}>\r\n            <motion.div className=\"flex items-center pl-4\" whileHover=\"hover\">\r\n                <InteractionMediaIcon\r\n                    icon={iconType}\r\n                    className={tcn('icon-default', {\r\n                        'animate-pulse-light':\r\n                            !isCallEstablished && iconType === 'call_outbound',\r\n                    })}\r\n                />\r\n                <InteractionTimer\r\n                    className=\"ml-1 mr-2\"\r\n                    startTime={pendingStartTime}\r\n                    format={formatTimer}\r\n                />\r\n                <motion.div\r\n                    initial={{width: 0, opacity: 0, pointerEvents: 'none'}}\r\n                    variants={{\r\n                        hover: {width: 'auto', opacity: 1, pointerEvents: 'auto'},\r\n                    }}\r\n                >\r\n                    <EndCallButton onClick={onDisconnect} />\r\n                </motion.div>\r\n            </motion.div>\r\n            <InteractionBarDisplayName className=\"ml-2\" />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {AnimatePresence, motion} from 'framer-motion'\r\n\r\nimport {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallButtonsHandlers} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getMediaIcon} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {\r\n    EndCallButton,\r\n    HoldButton,\r\n    MuteButton,\r\n    RecordButton,\r\n    TransferButton,\r\n} from '@bpinc/lib-interaction-buttons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {InteractionMediaIcon, InteractionTimer} from '@bpinc/lib-ui-elements'\r\n\r\nimport {interactionBarStyles} from '../styles'\r\nimport {ContactInfo} from './ContactInfo'\r\n\r\n\r\ninterface OngoingCallContentProps {\r\n    onDisconnect: () => void\r\n}\r\n\r\nexport const OngoingCallContent: FC<OngoingCallContentProps> = ({\r\n    onDisconnect,\r\n}) => {\r\n    const iconType = useActiveInteractionProp(getMediaIcon)\r\n    const deliveredStartTime = useActiveInteractionProp(\r\n        i => i?.displayData.deliveredStartTime,\r\n    )\r\n    const holdStartTime = useActiveInteractionProp(\r\n        i => i?.displayData.holdStartTime,\r\n    )\r\n\r\n    const {\r\n        showRecordButton,\r\n        isCallEstablished,\r\n        isMuted,\r\n        isOnHold,\r\n        isRecording,\r\n        isLoading,\r\n        handleHoldClick,\r\n        handleMuteClick,\r\n        handleRecordClick,\r\n    } = useCallButtonsHandlers()\r\n\r\n    const {handleToggleTransferModal} = useCommunicatorUIState()\r\n\r\n    const handleClickToggleButton = useCallback(() => {\r\n        return handleToggleTransferModal?.(true)\r\n    }, [handleToggleTransferModal])\r\n\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n\r\n    const holdButtonDisabled =\r\n        !isCallEstablished ||\r\n        (isOnHold\r\n            ? !phoneDeviceCapabilities.canRetrieve\r\n            : !phoneDeviceCapabilities.canHold)\r\n\r\n\r\n    return (\r\n        <div className={tcn(interactionBarStyles, 'pl-4')}>\r\n            <div className=\"flex items-center\">\r\n                <InteractionMediaIcon\r\n                    icon={iconType}\r\n                    className={tcn(\r\n                        'icon-default',\r\n                        {\r\n                            'animate-pulse-light':\r\n                            !isCallEstablished && iconType === 'call_outbound',\r\n                        })}\r\n                />\r\n                {deliveredStartTime && (\r\n                    <InteractionTimer\r\n                        startTime={deliveredStartTime}\r\n                        data-testid=\"duration-timer\"\r\n                        className=\"ml-1\"\r\n                    />\r\n                )}\r\n            </div>\r\n            <motion.div\r\n                whileHover=\"hover\"\r\n                className={tcn(\r\n                    'group/circle-btn-parent ml-2 flex shrink-0 items-center rounded p-2.5',\r\n                    'transition-colors state-layer-bg-[--c-main-bars-bg] state-layer-color-black state-layer-opacity-0 hover:state-layer-opacity-10',\r\n                )}\r\n            >\r\n                <section className=\"flex gap-2.5\">\r\n                    <MuteButton\r\n                        onClick={handleMuteClick}\r\n                        disabled={!isCallEstablished}\r\n                        isLoading={isLoading.muted}\r\n                        isActive={isMuted}\r\n                    />\r\n                    <HoldButton\r\n                        isActive={isOnHold}\r\n                        isLoading={isLoading.onHold}\r\n                        onClick={handleHoldClick}\r\n                        holdStartTime={holdStartTime}\r\n                        disabled={holdButtonDisabled}\r\n                    />\r\n                    {showRecordButton && (\r\n                        <RecordButton\r\n                            className={tcn('hidden group-hover:grid', {\r\n                                grid: isRecording,\r\n                            })}\r\n                            isActive={isRecording}\r\n                            isLoading={isLoading.recording}\r\n                            onClick={handleRecordClick}\r\n                            disabled={!isCallEstablished || isOnHold}\r\n                        />\r\n                    )}\r\n                </section>\r\n                <AnimatePresence>\r\n                    <motion.section\r\n                        initial={{opacity: 0, width: 0, marginLeft: 0, pointerEvents: 'none'}}\r\n                        variants={{hover: {opacity: 1, width: 'auto', marginLeft: 10, pointerEvents: 'auto'}}}\r\n                        className=\"flex items-center gap-2.5\"\r\n                    >\r\n                        <TransferButton\r\n                            disabled={!isCallEstablished}\r\n                            onClick={handleClickToggleButton}\r\n                        />\r\n                        <EndCallButton onClick={onDisconnect} />\r\n                    </motion.section>\r\n                </AnimatePresence>\r\n            </motion.div>\r\n            <ContactInfo />\r\n        </div>\r\n    )\r\n}\r\n","import React, {type FC} from 'react'\r\n\r\nimport {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getMediaIcon} from '@bpinc/ad-interaction-state-methods'\r\nimport {DispositionButton} from '@bpinc/lib-interaction-buttons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {InteractionMediaIcon} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {interactionBarStyles} from '../styles'\r\nimport {ContactInfo} from './ContactInfo'\r\n\r\n\r\nexport const WrapUpContent: FC = () => {\r\n    const t = useLocalizationState('t')\r\n    const iconType = useActiveInteractionProp(getMediaIcon)\r\n    return (\r\n        <div className={tcn(interactionBarStyles, 'pl-4')}>\r\n            <InteractionMediaIcon icon={iconType} />\r\n            <p className=\"ml-1 font-semibold caption-s text-neutral-fade\">{t.DISPOSITION.ended()}</p>\r\n            <DispositionButton className=\"mr-4\" />\r\n            <ContactInfo />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    isAfterCallWork,\r\n    isCall,\r\n    isChatConference,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useDisconnectButtonClickHandler} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {DefaultContent} from './DefaultContent'\r\nimport {DialingInteractionContent} from './DialingInteractionContent'\r\nimport {OngoingCallContent} from './OngoingCallContent'\r\nimport {WrapUpContent} from './WrapUpContent'\r\n\r\n\r\nconst InteractionControlBar: React.FC = () => {\r\n    const activeInteraction = useActiveInteraction()\r\n    const disconnectItem = useDisconnectButtonClickHandler()\r\n    const t = useLocalizationState('t')\r\n\r\n    const onDisconnect = useCallback(\r\n        function memoizeOnDisconnect() {\r\n            return disconnectItem(activeInteraction)\r\n        },\r\n        [activeInteraction, disconnectItem],\r\n    )\r\n\r\n    if (\r\n        (isOutboundInteraction(activeInteraction) &&\r\n            activeInteraction?.callData?.callState === 'requesting') ||\r\n        activeInteraction?.callData?.callState === 'dialing' ||\r\n        activeInteraction?.callData?.callState === 'ringing'\r\n    ) {\r\n        return <DialingInteractionContent onDisconnect={onDisconnect} />\r\n    }\r\n\r\n    if (isAfterCallWork(activeInteraction)) {\r\n        return <WrapUpContent />\r\n    }\r\n\r\n    if (isCall(activeInteraction)) {\r\n        return <OngoingCallContent onDisconnect={onDisconnect} />\r\n    }\r\n\r\n    if (!activeInteraction || isPotentialInteraction(activeInteraction)) {\r\n        return <div />\r\n    }\r\n\r\n    return (\r\n        <DefaultContent\r\n            onDisconnect={onDisconnect}\r\n            disconnectButtonTooltip={isChatConference(activeInteraction) ? t.INTERACTIONS.end_conference() : t.INTERACTIONS.end_interaction()}\r\n        />\r\n    )\r\n}\r\n\r\nexport {InteractionControlBar}\r\n","import React from 'react'\r\n\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\nconst {KBSettingsLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBSettings')\r\n\r\nexport const KBSettingsModal: React.FC<CommonModalProps> = props => {\r\n    const kbBridge = useKbBridgeConnector()\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    return (\r\n        <KBSettingsLoader kbBridge={kbBridge} {...props} />\r\n    )\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\n\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {\r\n    useOpenAboutModal,\r\n    useOpenAudioDevicesModal,\r\n    useOpenCalendarSettingsModal,\r\n    useOpenChangePasswordModal,\r\n    useOpenEMIAccountsModal,\r\n    useOpenKeyboardShortcutsModal,\r\n    useOpenLogoutModal,\r\n    useOpenPredefinedMessagesModal,\r\n    useOpenPreferencesModal,\r\n    useOpenPrerecordedMessagesModal,\r\n    useOpenUserProfileModal,\r\n    useOpenVolumeModal,\r\n} from '@bpinc/lib-modals-ui'\r\nimport type {PopupMenuOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useOpenKBSettingsModal} from './useOpenKBSettingsModal'\r\n\r\n\r\nexport function useSettingsItems(toggleShow: Toggle): PopupMenuOption[] {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        privileges,\r\n        phoneType,\r\n        tenantFeatures,\r\n    } = useSessionState(['privileges', 'phoneType', 'tenantFeatures'])\r\n    const {startPhoneTypeSelection} = useSessionStateMethods()\r\n    const openChangePasswordModal = useOpenChangePasswordModal()\r\n    const openEMIAccountsModal = useOpenEMIAccountsModal()\r\n    const openUserProfileModal = useOpenUserProfileModal()\r\n    const openKBSettingsModal = useOpenKBSettingsModal()\r\n    const openKeyboardShortcutsModal = useOpenKeyboardShortcutsModal()\r\n    const openPredefinedMessagesModal = useOpenPredefinedMessagesModal()\r\n    const openVolumeModal = useOpenVolumeModal()\r\n    const openPreferencesModal = useOpenPreferencesModal()\r\n    const openAboutModal = useOpenAboutModal()\r\n    const openAudioDevicesModal = useOpenAudioDevicesModal()\r\n    const openCalendarSettingsModal = useOpenCalendarSettingsModal()\r\n    const openPrerecordedMessagesModal = useOpenPrerecordedMessagesModal()\r\n    const openLogoutModal = useOpenLogoutModal()\r\n\r\n    const canManageKBSettings = !!privileges.MANAGE_KNOWLEDGE_BASE_SETTINGS\r\n\r\n    const isAudioDevicesLinkVisible =\r\n        !!phoneType && ['phone_type_browser', 'phone_type_soft_secure', 'phone_type_soft_unsecure'].includes(phoneType)\r\n\r\n    const clickHandler = useCallback((handler: () => void) => (evt: MouseEvent) => {\r\n        evt.stopPropagation()\r\n        handler()\r\n        toggleShow()\r\n    }, [toggleShow])\r\n\r\n    return useMemo(() => {\r\n        const options: PopupMenuOption[] = [\r\n            {\r\n                children: t.SETTINGS.settings_menu_userProfile(),\r\n                onClick: clickHandler(openUserProfileModal),\r\n            },\r\n            {\r\n                children: t.DEVICE_SETUP_WINDOW.deviceSetup_heading(),\r\n                onClick: clickHandler(startPhoneTypeSelection),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_audioDevices(),\r\n                onClick: clickHandler(openAudioDevicesModal),\r\n            },\r\n            {\r\n                children: t.CALENDAR_SETTINGS.heading(),\r\n                onClick: clickHandler(openCalendarSettingsModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_changePassword(),\r\n                onClick: clickHandler(() => openChangePasswordModal({isForced: true})),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_chatCannedResponses(),\r\n                onClick: clickHandler(openPredefinedMessagesModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_preferences(),\r\n                onClick: clickHandler(openPreferencesModal),\r\n            },\r\n            {\r\n                children:\r\n                    t.UNDEFINED.tab_enterprise_messaging_accounts_heading(),\r\n                onClick: clickHandler(openEMIAccountsModal),\r\n            },\r\n            {\r\n                children: t.KNOWLEDGE_BASE.kb_settings(),\r\n                onClick: clickHandler(openKBSettingsModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_editVoicePrompts(),\r\n                onClick: clickHandler(openPrerecordedMessagesModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_shortcuts(),\r\n                onClick: clickHandler(openKeyboardShortcutsModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_ringtone_volume(),\r\n                onClick: clickHandler(openVolumeModal),\r\n            },\r\n            {\r\n                children: t.SETTINGS.settings_menu_about(),\r\n                onClick: clickHandler(openAboutModal),\r\n            },\r\n            {\r\n                children: t.GLOBAL.logout(),\r\n                onClick: clickHandler(openLogoutModal),\r\n            },\r\n        ]\r\n        const checkKBSettingsPrivilege = !canManageKBSettings ? options.filter(({children}: PopupMenuOption) => {\r\n            return children !== t.KNOWLEDGE_BASE.kb_settings()\r\n        }) : options\r\n        const checkAudioDevices = !isAudioDevicesLinkVisible ? checkKBSettingsPrivilege.filter(({children}: PopupMenuOption) => {\r\n            return children !== t.SETTINGS.settings_menu_audioDevices()\r\n        }) : checkKBSettingsPrivilege\r\n        return !tenantFeatures?.msTeamsIntegrationEnabled ? checkAudioDevices.filter(({children}: PopupMenuOption) => {\r\n            return children !== t.UNDEFINED.tab_enterprise_messaging_accounts_heading()\r\n        }) : checkAudioDevices\r\n    },\r\n    [\r\n        t,\r\n        clickHandler,\r\n        openUserProfileModal,\r\n        startPhoneTypeSelection,\r\n        openAudioDevicesModal,\r\n        openCalendarSettingsModal,\r\n        openChangePasswordModal,\r\n        openPredefinedMessagesModal,\r\n        openPreferencesModal,\r\n        openEMIAccountsModal,\r\n        openPrerecordedMessagesModal,\r\n        openKeyboardShortcutsModal,\r\n        openVolumeModal,\r\n        openAboutModal,\r\n        openLogoutModal,\r\n        openKBSettingsModal,\r\n        isAudioDevicesLinkVisible,\r\n        tenantFeatures?.msTeamsIntegrationEnabled,\r\n        canManageKBSettings,\r\n    ])\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {KBSettingsModal} from '../modals/KBSettingsModal'\r\n\r\n\r\nexport function useOpenKBSettingsModal() {\r\n    return useModalComponentOpener(KBSettingsModal)\r\n}\r\n","import React, {memo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useSettings} from '@bpinc/ad-main-page-ui-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserProfileState} from '@bpinc/ad-user-profile-state-context'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {Popup, PopupButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useMyAvatar} from './hooks/useMyAvatar'\r\nimport {useSettingsItems} from './hooks/useSettingsItems'\r\n\r\n\r\nexport const SettingsButton: React.FC = memo(() => {\r\n    const {show, toggleShow} = useSettings()\r\n    const items = useSettingsItems(toggleShow)\r\n    const {avatarSrc} = useMyAvatar()\r\n    const {teamName, lastName, firstName} = useSessionState(['teamName', 'lastName', 'firstName'])\r\n    const userProfile = useUserProfileState('userProfile')\r\n    const {formatFullName} = useFormatting()\r\n    const fullName = formatFullName(firstName, lastName)\r\n    const extension = formatPhone(userProfile?.extension)\r\n\r\n    return (\r\n        <PopupButton\r\n            custom\r\n            show={show}\r\n            toggleShow={toggleShow}\r\n            options={items}\r\n            className=\"flex items-center\"\r\n        >\r\n            <Popup\r\n                mode=\"hover\"\r\n                content={\r\n                    <>\r\n                        {!!teamName && <p>{teamName}</p>}\r\n                        {!!fullName && <p>{fullName}</p>}\r\n                        {!!extension && <p>{extension}</p>}\r\n                    </>\r\n                }\r\n            >\r\n                <Avatar\r\n                    firstName={userProfile?.firstName}\r\n                    lastName={userProfile?.lastName}\r\n                    url={avatarSrc}\r\n                />\r\n            </Popup>\r\n        </PopupButton>\r\n    )\r\n})\r\n","\r\nimport {useGetUserPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useMyAvatar() {\r\n    const userId = useSessionState('userId')\r\n    const getUserPictureUrl = useGetUserPictureUrl()\r\n\r\n    const avatarSrc = userId ? getUserPictureUrl(userId) : undefined\r\n\r\n    return {\r\n        avatarSrc,\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {useOpenHelpModal} from '@bpinc/ad-modals-ui'\r\nimport {IconHelp, IconLogo, IconTopbarNewMessage} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Dashboard} from './dashboard'\r\nimport {InteractionControlBar} from './interaction-control-bar'\r\nimport {SettingsButton} from './SettingsButton'\r\n\r\n\r\nconst iconButtonStyles = tcn(\r\n    'grid size-8 place-content-center',\r\n    'rounded',\r\n    'transition-colors hover:state-layer-opacity-4 focus:state-layer-opacity-4 active:state-layer-opacity-8',\r\n    'state-layer-bg-[--c-main-bars-bg] state-layer-color-black state-layer-opacity-0',\r\n)\r\n\r\nexport const TopBar: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const openHelpModal = useOpenHelpModal()\r\n    return (\r\n        <div\r\n            data-testid=\"top-bar\"\r\n            className=\"relative flex h-[--topbar-height] shrink-0 justify-end border-b bg-[--c-main-bars-bg] border-default\"\r\n        >\r\n            <InteractionControlBar />\r\n            <div className=\"flex flex-auto items-center justify-end overflow-hidden\">\r\n                <Dashboard />\r\n                <section className=\"flex items-center py-3.5 pl-4 pr-6\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <Button transparent className={iconButtonStyles}>\r\n                            <IconTopbarNewMessage />\r\n                        </Button>\r\n                        <Button\r\n                            transparent\r\n                            className={iconButtonStyles}\r\n                            onClick={() => openHelpModal()}\r\n                            tooltip={t.GLOBAL.help()}\r\n                        >\r\n                            <IconHelp />\r\n                        </Button>\r\n                        <SettingsButton />\r\n                    </div>\r\n                    <div className=\"mx-4 h-4 w-px border-r border-disabled\" />\r\n                    <IconLogo />\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {HelpModal} from './HelpModal'\r\n\r\n\r\nexport function useOpenHelpModal() {\r\n    return useModalComponentOpener(HelpModal)\r\n}\r\n","import React from 'react'\r\n\r\nimport {Notifications} from '@bpinc/lib-notifications-context'\r\nimport {Notifications as NotificationsUI} from '@bpinc/lib-notifications-ui'\r\nimport {OfflineBar} from '@bpinc/lib-offline-state-ui'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {LeftBar} from './leftbar'\r\nimport {TopBar} from './topbar'\r\n\r\n\r\nconst errorIdsToOmit = [\r\n    Notifications.DispositionNotSelectedError,\r\n    Notifications.ContactCreationError,\r\n    Notifications.ContactMergeError,\r\n]\r\n\r\nexport const Navbar: FCWithChildren = ({children}) => {\r\n    return (\r\n        <div className=\"relative flex h-full flex-col overflow-hidden\">\r\n            <NotificationsUI omit={errorIdsToOmit} />\r\n            <OfflineBar />\r\n            <div className=\"relative flex grow overflow-hidden\">\r\n                <LeftBar />\r\n                <div id=\"mainContainer\" className=\"relative flex flex-auto flex-col overflow-hidden\">\r\n                    <TopBar />\r\n                    <div className=\"flex flex-auto flex-col overflow-auto\">\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {DndProvider} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\n\r\nimport {useUIState} from '@bpinc/ad-ui-context'\r\nimport {ToastProvider} from '@bpinc/lib-jskit-ui'\r\nimport {Modals} from '@bpinc/lib-modals-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AriaStatuses} from '@bpinc/lib-ui-elements'\r\n\r\nimport {MainPage} from '../mainpage'\r\nimport {MainPageResizeController} from '../mainpage/components/MainPageResizeController'\r\nimport {Navbar} from '../navbar'\r\nimport {useAppConfigCheckers} from './hooks/useAppConfigChecker'\r\n\r\n\r\nexport const App: React.FC = () => {\r\n    const {isTabNavHighlighted} = useUIState()\r\n    useAppConfigCheckers()\r\n\r\n    return (\r\n        <div\r\n            className={tcn('h-full w-full', {\r\n                '[&_*:focus-within]:!outline-none [&_*:focus]:!outline-none': !isTabNavHighlighted,\r\n                '[&_*:focus-within]:!outline-0 [&_*:focus]:!outline-0': !isTabNavHighlighted,\r\n            })}\r\n        >\r\n            <DndProvider backend={HTML5Backend}>\r\n                <ToastProvider>\r\n                    <Navbar>\r\n                        <MainPageResizeController>\r\n                            <MainPage />\r\n                        </MainPageResizeController>\r\n                    </Navbar>\r\n                </ToastProvider>\r\n            </DndProvider>\r\n            <AriaStatuses />\r\n            <Modals />\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAppConfigStateMethods} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useAppConfigCheckers() {\r\n    const {checkWhetherToRenderReportProblemButton} = useAppConfigStateMethods()\r\n    const {isLoggedIn, tenantId} = useSessionState()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && tenantId) {\r\n\r\n            checkWhetherToRenderReportProblemButton(tenantId)\r\n        }\r\n    }, [checkWhetherToRenderReportProblemButton, isLoggedIn, tenantId])\r\n\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {QueryClient, QueryClientProvider} from '@tanstack/react-query'\r\n\r\nimport {MS_IN_HOUR} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nconst DEFAULT_CACHE_TIME = 8 * MS_IN_HOUR\r\nconst queryClient = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            gcTime: DEFAULT_CACHE_TIME,\r\n        },\r\n    },\r\n})\r\n\r\nexport const TanstackQueryClientProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            {children}\r\n        </QueryClientProvider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {MainPageUIProvider} from '@bpinc/ad-main-page-ui-context'\r\nimport {NavigationStateProvider} from '@bpinc/ad-navigation-state-context'\r\nimport {createPlatformSpecific} from '@bpinc/ad-platform-specific-web-impl'\r\nimport {ScrollStateProvider} from '@bpinc/ad-scroll-state-context'\r\nimport {ServiceStateProvider} from '@bpinc/ad-service-context'\r\nimport {SupervisionUIContextProvider} from '@bpinc/ad-supervision-ui-context'\r\nimport {UIContextProvider} from '@bpinc/ad-ui-context'\r\nimport {ADShortcutsProvider as ShortcutsProvider} from '@bpinc/lib-accessible-shortcuts-context'\r\nimport {EmailAttachmentsUIStateProvider} from '@bpinc/lib-attachments-state'\r\nimport {AuthorizationModule} from '@bpinc/lib-authorization-module'\r\nimport {NavigationStateProvider as ADCNavigationStateProvider} from '@bpinc/lib-communicator-navigation-state'\r\nimport {CommunicatorUIProvider} from '@bpinc/lib-communicator-ui-context'\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\nimport {ActiveInteractionContextProvider} from '@bpinc/lib-interaction-context'\r\nimport {InteractionUIStateProvider} from '@bpinc/state-interaction-ui'\r\n\r\nimport {App} from './App'\r\nimport {TanstackQueryClientProvider} from './tanstackQueryClientProvider'\r\n\r\n\r\nconst ADProviders = createProviderWrapper([\r\n    ActiveInteractionContextProvider,\r\n    TanstackQueryClientProvider,\r\n    InteractionUIStateProvider,\r\n    ServiceStateProvider,\r\n    NavigationStateProvider,\r\n    ADCNavigationStateProvider,\r\n    MainPageUIProvider,\r\n    ScrollStateProvider,\r\n    UIContextProvider,\r\n    ShortcutsProvider,\r\n    SupervisionUIContextProvider,\r\n    EmailAttachmentsUIStateProvider,\r\n    CommunicatorUIProvider,\r\n])\r\n\r\nconst Connector: React.FC = () => {\r\n    return (\r\n        <AuthorizationModule\r\n            platformSpecific={createPlatformSpecific('ad')}\r\n            app=\"ad\"\r\n            appRemoteName=\"agent\"\r\n        >\r\n            {() => (\r\n                <ADProviders>\r\n                    <App />\r\n                </ADProviders>\r\n            )}\r\n        </AuthorizationModule>\r\n    )\r\n}\r\n\r\nexport {Connector}\r\n","import React from 'react'\r\nimport {createRoot} from 'react-dom/client'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nimport {FullScreenADApp} from '@bpinc/ad-app-ui'\r\nimport {registerServiceWorker} from '@bpinc/ad-service-worker-reg'\r\n\r\nimport '@bpinc/lib-css-config'\r\nimport '@bpinc/lib-css-tailwind'\r\n\r\n\r\nregisterServiceWorker()\r\n\r\nconst root = createRoot(document.getElementById('root')!)\r\n\r\nroot.render(\r\n    <BrowserRouter basename=\"/agent/\">\r\n        <FullScreenADApp />\r\n    </BrowserRouter>)\r\n"],"names":["defaultScrollStateData","interactions","chatCenter","defaultState","isAttachmentsListReady","getAttachmentsList","addAttachment","noop","removeAttachment","clearAttachmentsList","initializeAttachmentsList","fileRejections","setFileRejections","useAttachmentsState","uploadFile","handleError","getFormData","useState","attachments","setAttachments","pendingRequestsCancelersRef","useRef","requestQueueRef","pendingAmount","items","getCanceler","useCallback","attachmentsGroupId","id","current","removeCancelers","removeCanceler","cancelCurrentRequest","cancel","attachmentsRef","useSessionState","sessionId","domain","loginId","updateAttachments","setter","currentAttachments","updatedAttachments","Object","values","removeRequestFromQueue","filter","item","addNewAttachment","newAttachment","uuid","produce","draft","castDraft","updateAttachment","attachment","processNextRequestQueueItem","queue","file","params","canceler","shift","FormData","append","data","tenant","token","user","fileName","name","fileType","onSuccess","fileData","isLoading","onError","error","push","errors","removeAttachmentsList","attachmentsList","length","every","serverOrigin","generateUrl","attachmentId","no_disposition","query","keys","map","key","join","useAttachmentLink","attachmentGroupId","attachmentsData","getFilesPromises","a","getFileFromUrl","Promise","all","then","files","forEach","useMemo","ChatAttachmentsUIContext","createContext","displayName","createUIStateSelectorHook","useChatAttachmentsUIState","EmailAttachmentsUIContext","bodyFormData","useEmailAttachmentsUIState","tcn","classnames","twMerge","cn","linkUrl","URL","searchParams","location","hostname","CURRENT_DOMAIN_AUTH_URL","toString","DOMAIN_AUTHORIZATION_MODAL_ID","linkClass","EXTENSION_ID","EXTENSION_ID_FF","PLUGIN_ID","ModalContent","isExtAvailable","install","INSTALLATION_PROCESS","useLocalizationState","t","useInstallationMethods","installChromeExtension","installFirefoxExtension","installBPClientPlugin","useEffect","chromeLink","document","getElementById","firefoxLink","pluginLink","addEventListener","removeEventListener","content","i18n","install_updateHeader","platformInfo","install_installHeader","install_installHeaderChrome","install_installHeaderFirefox","div","dangerouslySetInnerHTML","__html","browserName","isChrome","isFirefox","isSafari","linkHref","URL_EXTENSION_INSTALLER_CHROME","URL_EXTENSION_INSTALLER_FIREFOX","URL_MAC_PLUGIN","span","bp_client_old_extension_version","br","bp_client_update_extension_part1","href","rel","target","bp_client_update_extension_text","bp_client_update_extension_part2","reloadPage","reload","PHONE_OUT_OF_SERVICE_ERROR_DELAY","useInteractionNotifications","emiData","ERROR_MESSAGES","useNotificationsState","showNotification","hideNotificationById","getMsTeamsError","useEvent","errorCode","errorText","incomingEMIErrorMessageCodes","msteams_access_token_error_message","communicator_msteams_refresh_token_expired_error_message","msteams_disabled","communicator_msteams_reset_by_admin_message","msteams_user_deleted","msteams_unsufficient_privileges","msteams","message","errorMessage","type","Notifications","interactionStateConnector","useInteractionStateConnector","GLOBAL","onItemCompleted","isCallWithoutCallId","notification_callWithNoAnswer_networkProblem","formatDate","Date","getTime","dispenser","subscribe","unsubscribe","useFailedCallNotification","useAgentState","notReadyReason","state","stateSetDate","systemNotReadyReasons","updateNotification","noAnswer","time","notification_agentInNotReadyNoAnswer","useInteractionNotAcceptedNotification","phoneDeviceIn","device_detected","duration","device_empty","showDelay","usePhoneDeviceNotDetectedNotification","useSessionStateMethods","startPhoneTypeSelection","phoneTypeErrorCode","AUTHORIZATION_DIALOG_LABELS","auth_message_undefinedExtension","usePhoneTypeErrorNotification","reservedForIncomingInteraction","isLoggedIn","callback_reservation_header","useReservedForIncomingInteractionNotification","interactionChatStateConnector","useInteractionChatStateConnector","onWebRtcError","chat_web_rtc_invalid_ice_server","chat_web_rtc_answer_timeout","chat_web_rtc_only_1_call_simultaneously","closable","useWebRtcCallInChatErrorNotifications","favoritesStateConnector","useFavoritesStateConnector","FAVORITES","onLimitReachedError","tags","favorites_limit_reached_error","useFavoritesLimitReachedError","useSystemNotifications","bpClientConnector","useModalsStateMethods","openModal","closeModal","onShowDomainAuthorizationDialog","onHideDomainAuthorizationDialog","showOfflineAlert","offlineErrorMessages","isOffline","useBpClientStateConnector","title","bp_client_not_authorized_header","body","bp_client_not_authorized_message_part1","domainAuthentificationErrorAnchor","bp_client_not_authorized_message_part2","actions","SmButton","onClick","closeThisModal","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonOk","isExtensionAvailable","useBpClientState","onInstallationRequired","window_title_warning","ok","useInstallationRequiredPopup","useOfflineStateMethods","setShowOfflineAlert","useOfflineStateDataShowOfflineAlert","useOfflineErrorMessages","useIsOffline","onHide","onShowExtensionIsOldDialog","useOutdatedBrowserExtensionPopup","isClientOutdated","useAppConfigState","reload_confirm_new_msg_part1","reload_confirm_action_button_text","reload_confirm_new_msg_part2","useOutdatedClientNotification","sessionStateConnector","useSessionStateConnector","isHelperAppInstanceCreated","phoneType","onUpdateCapabilities","caps","canDial","bpLogger","window_messages_virtual_phone_not_available","window_messages_phone_not_available","window_messages_helper_app_not_available","onServerError","source","phoneIsNotRegistered","onThreePCCServerGone","window_messages_3pcc_server_connectionLost","onThreePCCServerReady","usePhoneOutOfServiceNotification","sipServer","prevSipServerRef","usePreviousValueRef","useSipServerDisconnectedNotification","startTime","checkConnectionSpeed","fetch","method","cache","catch","e","console","finally","slow_connection","interval","setInterval","clearInterval","useSlowNetworkNotification","isDomainAuthorized","domain_authentication_error_part1","domain_authentication_error_part2","useUnauthorizedDomainNotification","AuthorizedConnectorsConsumers","baseConnectors","authorizedConnectors","children","ForceLogout","forceLogoutInfo","closeForceLogout","useFormatting","formatFullName","assertDefined","loggedOutBy","firstName","lastName","loggedOutTime","timestamp","SmSegment","padded","className","Modal","isOpen","size","aria-describedby","data-testid","window_title_information","p","incomingErrorMessageCodes","sessionWasOverwritten","forcedLogout","account_has_been_disabled","forceLogoutReason","getContent","primary","UnauthorizedUI","tabRole","useCurrentTabRole","authChecked","showLoginDialog","offerForceLogin","showAppLoader","showLoginPage","showForceLogout","showForceLogin","Loader","active","color","LoginPage","ForceLogin","AuthorizationUIRouter","React","AuthorizedProviders","BaseConnectorsConsumers","BaseConnectorsConsumer","TopLevelProviders","app","platformSpecific","BaseProviders","Tooltip","NotificationsStateProvider","AuthorizationModule","appRemoteName","AppStyleSelector","SetDispositionModal","dipsositionOptions","onClose","service","onSave","restProps","dispositions","useServicesDispositions","dispositionIsRequired","useServicesDispositionsState","s","services","requireDispositions","truthy","text","DISPOSITION","disposition_not_selected","value","d","group","selectedDisposition","setSelectedDisposition","aria-labelledby","role","select_disposition_dialog_header","Dropdown","options","onChange","_evt","placeholder","disposition_selectDisposition","SemanticButton","window_buttonCancel","disposition","undefined","disabled","SetCaseStatusButton","initialStatus","caseId","initialPendingReasonId","showPopup","useBoolean","status","setStatus","stateOptions","case_status_open","case_status_pending","case_status_resolved","useCaseStateMethods","setCaseStatus","useDisposition","useDispositions","openSetDipositionModal","useModalComponentOpener","selectedPendingReason","setSelectedPendingReason","pendingReasons","useCaseState","pendingReasonsOptions","case_pending_reason_selector_no_value","selection","Popup","show","SmList","divided","Button","setFalse","onClickOutside","placement","icon","basic","toggle","statusToSubmit","pendingReason","find","r","handleSubmit","submitAs","SmIcon","ActiveInteractionCaseFooterContent","caseItem","cases","pendingReasonsId","pendingReasonId","caseStatus","activeInteractionStepId","useActiveInteractionStepId","serviceId","useActiveInteractionProp","getServiceId","createEmailDraft","tooltip","CASE_SEARCH","new_case_notes_button_tooltip","EMAIL","email_new_email_draft","interactionStepId","queryKeys","queueType","Boolean","emailId","search","useGetEmailQuery","useQuery","enabled","queryKey","queryFn","apiRequests","getEmail","staleTime","MS_IN_MINUTE","emailAddressToEmailSearchItem","email","address","displayText","formatEmail","emailSearchItemToEmailAddress","emailFormFieldsToEmailRequest","fields","html","formatHTMLAsMultiLineString","subject","to","cc","bcc","useSaveDraftMutation","queryClient","useQueryClient","useAsRef","useMutation","mutationKey","mutationFn","setQueryData","toAddresses","ccAddresses","bccAddresses","saveEmailDraft","requestBody","serviceToOption","useEmailServicesOptions","ServiceSelector","itemId","localServiceId","setLocalServiceId","useInteractionStateMethods","changeEmailService","_e","Error","service_selector_no_value","selectOnBlur","buttonStyles","EmailControls","interactionId","form","sendEmailDraft","mutateAsync","selectedService","useInteractionProp","getInteractionStepId","isLastEmailDraft","i","emailData","activeDrafts","discardEmailDraft","handleUploadFiles","event","input","Array","from","getFilesFromEvent","partial","handleSendEmail","saveDraft","getValues","handleDeleteDraft","reset","footer","transparent","email_send_button_tooltip","AttachButton","email_addAttachment_button_tooltip","email_deleteDraft_button_tooltip","SuggestionsPopup","suggestedItems","showEmailSuggestions","selectionInputRootRef","onSelect","popperElement","setPopperElement","referenceElement","setReferenceElement","usePopper","styles","attributes","update","handleSelect","selectedOption","setSelectedOption","useLayoutEffect","selectionInputRoot","activeElement","activeElementIsInput","contains","isHTMLInputElement","getReferenceInputElement","handleKeyDown","evt","stopPropagation","nextIndex","findIndex","currentIndex","rootElement","ClickOutsideWrapper","ref","style","popperStyles","popper","index","data-element","useSelectedEmailsState","control","setValue","searchValue","setSearchValue","useController","defaultValue","field","useDidUnmount","debouncedSetSearchValue","debounce","addSelectedItem","useSearchEmailsQuery","getContactListByEmail","getName","contact","contactFirstName","contactLastName","queriedContacts","c","contactId","selectedItems","handleOnChange","v","addCustomEmail","newEmail","removeSelectedItem","EmailSelectionInput","label","useWatch","suggestedItemsExcludingSelected","allSelectedItems","uniqBy","some","rootRef","SelectionInput","validateCustomValue","RegExp","EMAIL_REGEX","test","valid","error_email_format","addCustomValue","onItemRemoved","autoFocus","HTML_FOOTER_CLASS","HTML_HEADER_CLASS","useEmailTemplateFetcher","refEmail","selfUserId","isFetched","referencedEmailId","language","langTag","getEmailTemplate","mutate","saveDraftHandler","headerFooterUserId","fetchEmailTemplate","emailTemplate","emailContentNode","htmlString","stringToHTML","header","oldHeader","querySelector","parentNode","replaceChild","oldFooter","innerHTML","replaceExistingHeaderFooter","insertHeaderFooter","node","nextSibling","HTMLElement","findEmailContentNode","scrollIntoView","usePasteFromKB","formRef","subs","onPasteFromKB","toIneractionId","articleHtml","nextEmailHtml","emailHtml","element","insertBefore","insertBeforeFooter","tinymceConfig","branding","browser_spellcheck","contextmenu","convert_urls","default_font_format","fontFamily","fontSize","defaultFontStyle","default_link_target","elementpath","end_container_on_empty_block","extended_valid_elements","external_plugins","default_font","img_resize_handler","insert_video","file_picker_types","font_formats","font","fontsize_formats","inline","invalid_elements","image_download_proxy","menubar","max_height","min_height","width","padd_empty_with_br","paste_block_drop","paste_data_images","paste_enable_default_filters","paste_merge_formats","plugins","quickbars_insert_toolbar","quickbars_selection_toolbar","remove_trailing_brs","toolbar","toolbar_items_size","toolbar_mode","toolbar_persist","toolbar_sticky","valid_children","WysiwygEditor","inputRef","isEditorLoading","setEditorLoading","handleEditorInit","initConfig","inline_boundaries","fixed_toolbar_container","init_instance_callback","editor","fire","setup","on","process","publicUrl","data-test-id","data-email-editor-reference-id","data-email-editor-id","Editor","init","onEditorChange","onInit","tinymceScriptSrc","inputSectionStyles","EmailForm","props","isSuccess","useForm","prevStateRef","saveChangedDraft","isEqual","useSaveDraftInterval","ccEnabled","bccEnabled","emailLoaded","stateInitialized","initialAttachments","setTrue","useAttachmentsStateSync","section","email_address_to_prefix","email_address_cc_prefix","email_address_bcc_prefix","email_subject","AttachmentsList","list","attachmentsListGroupId","selectDispositions","createSelector","activity","parties","result","Set","party","partyType","add","selectAgentsString","notes","formatNameFunction","selectAgentsNames","agents","selectServicesString","serviceName","selectDispositionsString","selectServicesAndDispositionsString","servicesString","dispositionsString","ActivityCase","getAvatarUrl","useGetAvatarUrl","userId","agentsString","servicesAndDispositionsString","dispositionString","canHaveDispositions","date","createdTime","toLocaleDateString","toLocaleTimeString","ACTIVITY_HISTORY","activity_view_case_pulled_label","activity_view_case_pushed_label","assignedByName","assignedByFirstName","assignedByLastName","activity_view_case_assigned_to_agent_label","activity_view_case_assigned_to_queue_label","fromUser","transferredFromFirstName","transferredFromLastName","activity_view_case_transferred_to_agent_label","activity_view_case_transferred_to_queue_label","activity_view_case_created_event_label","activity_case_state_closed","activity_case_state_changed","activity_case_state_pending","pendingReasonName","activity_case_state_no_message","activity_case_state_disposition","useActivityCaseTitle","avatarOptions","notFoundPlaceholder","Avatar","url","LegacyIconKey","fill","getFirstAndLastNames","names","CaseActivityService","ChatContent","messages","setList","isDefined","m","partyId","pickBy","ignoreEvents","includes","fulfillMessages","hour","minute","formatTime","msg","getMessageText","LegacyIconGear","LegacyIconPerson","b","ActivityChat","chats","globalInteractionId","partyInternal","partyExternal","fullNameInternal","fullNameExternal","avatar","get","LegacyIconChat","EmailAddressValidator","validate","this","emailPattern","EmailAddressTransformers","LABEL","emailAddress","LABEL2","displayString","toLowerCase","sanitizeHtml","escapeHtml","replace","useShowOriginalEmailContent","emailActivity","openedWindow","window","open","htmlContent","crmActivity","i18nAH","getEraseString","eraseTime","eraseReason","eraseLoginId","activity_view_email_content_erased","styledDirections","has","direction","appendAddresses","prefix","addresses","email_queue_field_from","fromAddresses","getHTMLContent","write","EmailContent","setContent","ActivityEmail","isOutbound","sender","split","iconButtonClassName","showOriginalEmail","interactionsStateRef","useInteractionStateRef","controls","show_original_email_body_button_tooltip","LegacyIconOriginalEmail","emailDraftInput","focus","LegacyIconReply","LegacyIconSingleStepTransfer","download_original","downloadURL","getDownloadEmailUrl","LegacyIconEmail","ActivityNotes","fullName","action","getAction","ActivityVoice","recordings","LegacyIconCallInbound","recording","AudioPlayer","src","CaseContent","activities","mediaType","CaseFooter","empty","UserSelect","setUser","handleClose","setSelectedItems","selectedItem","MultipleUserSearch","searchForUsers","withSessionUser","uniqueSearchId","inputPlaceholder","find_agents","loadingLabel","loading","button","AssignEmailModal","queueItemsToMove","fromUserId","createNote","setNotes","moveQueueItems","email_reply_assign_header","SmForm","assign_to","find_agent","disposition_notes_tooltip","TextArea","disposition_notesEmptyText","preventDefault","itemsToMove","directions","toQueueType","fromQueueType","toUserId","q","window_button_assign","useCreateNoteMutation","getNamesFromDisplayName","DefaultService","media_type","party_type","user_id","first_name","last_name","start_time","toISOString","case_ids","oid","has_voice_recording","is_agent_assignment","is_flagged","is_auto_acknowledgement","CaseHeaderInfo","info","mountNode","mode","hoverable","contentClassName","CaseReporter","interactionMode","changeReporter","reportedByName","unidentified","openSearchContactModal","useOpenSearchContactModal","handleReporterChange","openChangeCaseReporterModal","dataKey","CALENDAR_EVENT_FORM","contact_search_dialog_heading","LinkLikeButton","case_view_reporter_label","u","CaseTitleInput","initialTitle","setTitle","updateCaseTitle","handleChange","handleBlur","caseTitle","SimpleInput","onBlur","CaseTitle","editable","linkIcon","Svg","iconLink","CopyCaseLinkButton","handleCopy","clipboard","getCaseURL","copy_shareable_link_button_tooltip","DeleteCaseButton","caseNumber","completeItem","deleteCases","handleClick","delete_case_confirmation_label","SaveDraftButton","LegacyIconSaveClose","CaseHeader","assignments","pinCase","unpinCase","flagCase","unflagCase","getContactPictureUrl","useGetContactPictureUrl","activeItemId","useActiveInteractionId","reporter","reporterId","reporterFirstName","reporterLastName","avatarUrl","assignment","personal","assignedToString","pinnedBy","followUp","pin","isPinned","pinnedByString","isFlagged","handlePin","handleUnpin","handleFlag","handleUnflag","headerInfoColumnClassName","headerInfoIconClassName","pinnedByTooltip","case_view_followups_label","openAssignEmailModal","assignedToTooltip","month","day","year","hour12","case_view_assignment_personal_label","queueId","queueItemId","email_assign_button","number","categoryName","case_view_status_label","case_view_assignments_label","LegacyIconPinOn","LegacyIconCaseFlagOn","Case","loaderClassName","FooterContent","getCase","ActiveCase","useActiveInteraction","DEFAULT_SORTING_FIELD","tabsAtom","atom","closeable","selectedTabIdAtom","selectedTabAtom","tab","queueTableWidthAtom","personalTabUserAtom","personalPaginationAtom","skip","personalActiveQueueItemAtom","personalSortingAtom","teamIdAtom","serviceFilterAtom","teamActiveQueueItemAtom","teamSortingAtom","teamPaginationAtom","pinnedActiveQueueItemAtom","pinnedSortingAtom","ViewButton","queueItem","setTabs","useSetAtom","setSelectedTabId","viewCaseTab","case","Number","tabs","email_view_button","PersonalCaseFooterContent","canViewCase","useAtomValue","openCase","handleOpen","email_open_button","QueueItemRow","isActive","isDisabled","setActiveQueueItem","row","original","SmTable","getVisibleCells","cell","flexRender","column","columnDef","getContext","QueueTable","table","noSelection","activeQueueItemAtom","HeaderContent","useAtom","activeQueueItem","handlerTableKeysHandler","useTableKeysHandler","useEventListener","headers","getHeaderGroups","compact","colgroup","h","col","getSize","th","colSpan","getRowModel","rows","CaseTab","noData","queueItems","QueueControls","TableHeaderContent","CaseFooterContent","queueTableWidth","setQueueTableWidth","useFirstQueueItemActivator","activeQueueId","activeQueueItemIndex","previousQueueItemIndex","usePrevious","prevQueueDataLength","amountOfDeletedQueueItems","activeQueueItemIsDeleted","newIndex","useActivateQueueWhenItemMoved","ResizePanel","minSize","maxSizeInPercent","initialSize","onDragEnd","flow","property","containerClass","aside","article","no_data","Pagination","actualQueueCount","paginationAtom","totalQueueCount","pagination","setPagination","noMoreItems","noLessItems","paginationFrom","paginationTo","SortingControls","sortingAtom","sorting","setSorting","handleSortingDirectionChange","handleSortingFieldChange","email_queue_sort_by_label","sortingOptions","email_queue_field_createTime","email_queue_field_updateTime","email_queue_field_customerUpdate","email_queue_field_serviceLevel","email_queue_field_subject","email_queue_field_flag","Sla","_","isFilled","columnHelper","createColumnHelper","useBasicColumns","accessor","heading_unknown","getValue","HelpModal","SmModal","help","Help","enabledInOffline","useSelectedRows","rowSelectedByClick","selectedRows","getSelectedRowModel","rowsSelectedByCheckbox","usePersonalControls","isSupervisor","createCaseEmail","notReadyReasons","selectedAgentStateOption","useAgentStateMethods","setState","openEmailBySupervisorWarningModal","okAction","openingEmailFromSupervisingStateConfirmation","useOpenEmailBySupervisorWarningModal","moveQItemToQ","resetRowSelection","handleComposeEmail","reason","handleAssignEmail","email_assign_button_tooltip","IconForward","email_move_to_team_queue_button_tooltip","ADDRESS_BOOK_AREA","addressBook_button_email_tooltip","initialData","PersonalTab","basicColumns","usePersonalQueueQuery","getPersonalQueue","refetchInterval","placeholderData","keepPreviousData","sortBy","asc","useReactTable","columns","display","Checkbox","checked","getIsAllRowsSelected","indeterminate","getIsSomeRowsSelected","toggleAllPageRowsSelected","getIsSelected","getCanSelect","getIsSomeSelected","toggleSelected","getCoreRowModel","getRowId","PinnedCaseFooterContent","PinnedTab","usePinnedCasesQuery","limit","getPinnedCases","useCloseAsSpamHandler","closeCasesAsSpam","selectedItemsCount","spam_confirm_message_multiple","spam_confirm_message_single","setRowSelection","useDeleteCaseHandler","privileges","SYS_DELETE_CASES","trash_confirm_message_multiple","trash_confirm_message_single","TeamCaseFooterContent","handleGrab","handleDelete","handleCloseAsSpam","email_grab_button_tooltip","email_grab_button","button_spam_text","button_trash_tooltip","useDefaultQueueServiceOptionsByPrivileges","localizations","email_teamQueue_allServices","router","email_teamQueue_allPullServices","team","email_teamQueue_allPushServices","servicesByPrivileges","CAN_SEE_CONTENTS_OF_EMAIL_PUSH_QUEUES","optionsByPrivileges","serviceOptions","useQueueCountByServiceQuery","getQueueCountByService","serviceIds","o","refetch","finalServiceOptions","option","queueCountByService","count","serviceFilter","setServiceFilter","useSortingOptions","email_teamQueue_service_label","onOpen","_event","TeamSelector","teams","selfTeamId","teamId","setTeamId","supervised","TeamTab","useTeamQueueQuery","getTeamQueue","useDirectoryState","isTeamsLoading","useDirectoryStateMethods","getAgentTeams","currentTeamIsSupervised","useTeamControls","CasePageContent","tabId","setTabId","useQueueCountQuery","getQueueCount","isFetchingQueue","useIsFetching","invalidateQueries","useQueueCountInvalidator","teamTabName","teamName","queuePostfix","emailTeamQueue_header","useTeamTabName","personalTabName","emailPersonalQueue_header","usePersonalTabName","tabsWithTitle","insertCount","highlightedCount","getTitle","queueCount","personalHighlighted","emailFollowUpQueue_header","renderTab","renderTabContent","selectedTabId","onTabClose","caseStateConnector","useCaseStateConnector","invalidateQueriesForCurrentTab","subscription","onQueueItemsMoved","onCasesDeleted","onCasesClosedAsSpam","useQueryManager","Tabs","tabsContentClassName","activeTabId","store","createStore","JotaiProvider","set","selfFirstName","selfLastName","Provider","noValueLabel","DEFAULT_LABEL","labelClassName","errorClassName","selectProps","el","newValue","select","renderElement","ariaId1","SelectFieldRaw","FieldRawConstructor","SelectField","FieldConstructor","InputField","TextFieldRaw","TextField","RemoveRow","remove","handleRemove","data-index","aria-label","IconCloseCircle","AddressFieldArrayContent","typeClassName","layoutClassName","formatAddressType","optionsAddressStates","STATES","code","optionsAddressTypes","AddressTypes","typeField","FORMS","address_type","addressLine1Field","address_line_1","addressLine2Field","address_line_2","cityField","city","stateField","zipField","zip","AddRow","AddButtonIcon","initialValues","addButtonText","handleAdd","CONTACT","add_entry_button_tooltip","aria-hidden","FieldArrayItem","FieldArray","renderComponents","useFieldArray","INITIAL_VALUES","address_line1","address_line2","postcode","AddressFieldArray","IconAddAddress","ViewItem","viewStyle","AddressListField","pageItem","useContext","FormBuilderContext","view","useId","ariaId2","getPageItemCSSProperties","tabIndex","editStyle","inputClassName","onKeyDown","minRows","maxRows","wrapperClassName","other","htmlFor","TextAreaUI","TextAreaField","GeneralTextFormField","multiline","required","getFormElementStyle","AmountField","viewValue","hideEmpty","emptyText","initialLinesNumber","createLeadMappingStringToFormValueMap","formValues","formDefinition","nonLayoutFields","layout","pages","flatMap","page","flat","staticType","checkIsLayout","entries","reduce","acc","fieldName","mappingString","leadMappingString","mapping","getFormElementMappingString","it","FormBuilderButton","changeFormPageId","actionCases","mappingToFormValues","initiateCall","initiateChat","useContact","useInteractionChatStateMethods","addMessageToPending","setActivePage","useNavigationState","canStartExternalChatPrivilege","CAN_START_EXTERNAL_CHAT","interactionStateMethods","useServiceState","useDIDNumberState","selectedDIDNumber","hideNotificationsByTag","useErrorValidation","getServiceAndDIDNumbersErrors","associatedChatServiceId","getAssociatedChatServiceId","startAction","actionCallback","actionCase","checkConditions","conditions","startCallAction","numberToCall","interactionType","phone","accessNumberId","origination","AppRoutes","startSMSChatAction","numberToSMS","messageToSMS","channel","displayData","searchKBAction","searchText","changeFormPageAction","useInteractions","handleDisconnectButtonClick","useDisconnectButtonClickHandler","completeItemAction","itemWithTheSameContactId","completeAfterDisconnect","openInteractionsPageOnError","sendDispositionAction","dispositionName","isWorkItem","workitemData","scenarioData","dispositionsObject","dispositionToSelect","setDisposition","sendDisposition","startCall","startSMSChat","searchKB","changeFormPage","useButtonHandlers","hasPrivileges","phoneDeviceCapabilities","outboundChatChannels","useButtonPrivilegesChecker","isConditionsPassed","useButtonActionConditionsChecker","data-form-field","data-field-type","data-disabled","Image","finalStyle","minHeight","height","img","alt","Spacer","flexShrink","ButtonField","properties","radioValue","CheckboxFieldBase","CheckboxField","isChecked","classNames","crossOutWhenChecked","intentCheckOnly","SmRef","innerRef","DateTimeBase","DatePicker","DateTimeField","fieldValue","displayFormat","EmailField","data-value","hidden","HiddenFieldRaw","SelectAndTextFieldRow","fieldState","idFieldName","selectFieldName","textFieldName","textFiledRules","inputType","rules","idField","selectField","textField","EmailTypes","email_address","EmailFieldArray","formatEmailType","emailValidationRules","useEmailValidationRules","optionsEmailTypes","IconAddEmail","EmailListField","emails","ImageField","LabelField","runtimeVariables","parseTemplateToString","h4","LinkField","initialValue","MESSENGERS_WITH_USER_NAME","MessengerFieldItem","userNameFieldName","typeFiledName","userIdFieldName","accountIdFieldName","availableMessengers","userNameDefault","accountIdDefault","userIdDefault","accountField","currentType","messenger","showUserName","getMessengerName","useGetMessengerName","userNameField","accountIdField","UNDEFINED","contact_messenger","contact_messenger_user_id_placeholder","userIdField","contact_messenger_username_placeholder","user_name","account_id","MessengersFieldArray","removeItem","IconAddMessenger","MessengersField","contactData","useInteractionChatState","messengers","MessengerView","NotesField","PhoneLink","phoneClickHandler","currentTarget","getAttribute","data-phone","formatPhone","PhoneField","PhoneTypes","PhonesFieldArray","formatPhoneType","phoneValidationRules","usePhoneValidationRules","optionsPhoneTypes","IconAddPhone","PhoneListField","listValue","listNameDataItems","selectedOptionId","SelectFieldBase","SpacerField","TextFormField","FormElementResolver","isConditionMet","intents","isFieldWithConditions","useConditionalFieldCheck","customType","warn","CompactForm","pageIndex","pageFields","flatFields","FormLayout","contentItem","isRecuriveFormLayout","calculateContainerStyle","WideForm","pageLayouts","transformFormDefinitionsToLayout","pageLayout","FormBuilder","variables","onFormAvailable","defaultValues","shouldResetOnChange","reValidateMode","isMountedRef","setTimeout","trigger","watch","formCSSVariables","getFormCSSVariables","contextValue","useActiveItemFormEffects","useInteractionWorkspaceState","shownWorkspaceItem","activeItemRef","setFormValues","resetForm","details","formData","debouncedSetFormValues","debouncedSetNotes","onFormChange","mergedValues","newFormValues","structuredClone","fieldItem","String","ActivityFormTab","setFormPageId","formDefinitions","definition","shownPageIndex","receivedIntentsIds","setForm","newPageId","FrameTabContent","Frame","ProfileHeaderWrapper","ProfileHeaderColumn","ProfileHeaderView","actionsRef","Id","handleGetShareLinkClick","getContactUrl","AvatarLegacy","companyName","primaryPhone","primaryEmail","imgLink","isPartyUserShortType","formatLongDate","getFullName","ActivityMessage","agent","activityMessageClassName","activityMessageContentClassName","activityMessageIconClassName","activityMessageIconSmsClassName","renderAvatar","EXTERNAL_CHAT","party_joined_chat_2","party_left_chat_2","Activity","useActivitiesState","useActivitiesStateMethods","getActivity","activityItemContentBlockClassName","activityItemClassName","activityItemContentHeadingClassName","isSelf","privilegesAreReady","hasSufficientPrivileges","CAN_SEE_ACTIVITIES","LISTEN_ALL_RECORDINGS","CAN_SEE_OWN_ACTIVITIES","resultParties","prototype","hasOwnProperty","call","renderServices","HeaderIcon","LegacyIconCallOutbound","heading_user_started_call_on_date","opener","getActivityOpener","openerName","j","Activities","activitiesList","activitiesListLoading","getActivitiesList","activitiesRowIconClassName","defaultSelectedIndex","activity_datetime","activity_agent","activity_disposition","activity_details","selectedRowIndex","setSelectedRowIndex","renderItem","weekday","toHHMMSS","rowClassName","selectedActivity","onRowClick","_item","activitiesDividerClassName","Table","onRowEnterPress","AddEmailModal","onConfirm","useContactsStateMethods","addEmail","add_email_heading","add_email_description_1","add_email_description_2","add_email_description_3","add_email_description_4","add_email_email_type_placeholder","onValueChange","innerValue","isStringInEnum","add_email_description_5","variant","add_email_confirmation_button","AddPhoneModal","addPhone","formattedPhone","add_phone_heading","add_phone_description_1","add_phone_description_2","add_phone_description_3","add_phone_description_4","add_phone_phone_type_placeholder","add_phone_description_5","add_phone_confirmation_button","useHandleUseContact","activeInteraction","openAddEmailModal","openAddPhoneModal","getChannel","getContactDetails","phoneIsAbsent","checkingPhone","phones","isCall","allParties","theirItemId","partyPhone","resolve","isExternalChat","getChatParties","item_id","party_id","firstNameComputed","partyFirstName","lastNameComputed","partyLastName","isMessengerChannel","force","reject","useIsUseContactButtonVisible","isEmail","ProfileActions","profileActionsRef","ReactDOM","EditActions","onEditMode","saveContactDetails","contactDetailsFormDefinition","useContactFormDefinition","handleSave","dirtyValues","getDirtyValues","formState","dirtyFields","save_error","flatContactDetails","newDetails","unflatten","ButtonUI","button_save_contact_text","button_cancel_contact_text","Details","editMode","onMerge","contactVariables","iseUseButtonVisible","handleUse","createFormValues","EDIT_CONTACTS","button_edit_contact_text","merge","contactToShortContact","button_use_contact_text","ProfileTabContent","Profile","CRM","crm_details_tab","crm_history_tab","crm_pending_tab","crm_case_tab","getContact","getContactFormsDefinitions","setActiveTabId","CreateActions","closeCreateTab","onContactCreated","createContact","ProfileHeaderForm","ProfileCreate","onCancel","TabContent","shownWorkspaceTabId","shownWorkspaceTabs","hiddenStyles","Iframe","TabTitleContent","removeItemTab","tabTitleText","useContactDisplayName","IconClose","DEFAULT_PROFILE_PAGE_TABS","initialState","events","pageIsVisible","reducer","isPageVisibilityChanged","isInteractionAppeared","getIncomingTitle","isNewInteractionDisappeared","eventIndex","splice","isCalendarEventAppeared","isCalendarEventDisappeared","isChatMessageAppeared","usePageTitle","useReducer","dispatch","initialTitleRef","blinkingInterval","blinkTitle","newTitleTranslationKey","stopBlinking","lastEvent","useTitleBlinker","prevModalItems","modalItemIds","useModalInteractionIds","modalItems","prevModalItemsLength","lastModalItem","useInteractionDispatchers","prevCalendarItems","calendarEventAlerts","useCalendarAlertState","prevCalendarItemsLength","lastCalendarAlert","useCalendarEventsDispatchers","onNewMessage","newMessage","msg_id","useChatMessagesDispatcher","usePageVisibility","usePageVisibilityChangedDispatcher","resetState","useOnLogout","useLogoutStateResetter","defaultModalsConfig","__ts__","now","notification","hideWhileActiveInteraction","position","calendar_event_notification","quality_management_monitor","ExitSupervisingWarningModal","window_buttonClose","useRemoteAssistStateSubscription","connector","useRemoteAssistStateConnector","itemsRef","setItemState","useInteractionUIItemStateSetter","onSessionStarted","clientUrl","realItem","getGlobalInteractionId","internalChatItem","itemState","chatMessage","useStateSubscriptions","navigationStateRef","setCommunicatorFloatingState","replyEmail","openInfoModal","openExitSupervisingWarningModal","interactionChatState","openChannel","useNavigationStateRef","useCommunicatorFloatingStateSetter","activePage","onNavigateToInteraction","useOpenInfoModal","onQueueMovementFailed","failedItemsCount","itemsWithoutServiceStillInPersonalQueue","onCaseOpenAttemptedWhileSupervising","forceOpenWhileSupervising","onReplyEmailAttemptedWhileSupervising","useOpenChannel","onSwitchItemChannel","onCobrowsingStarted","cobrowsingPayload","cobrowsingLink","isParallelItem","isParallelItemAtom","openInteractionsPage","onItemAccepted","onActiveItemChanged","useInteractionStateSubscription","LeftPanelTab","RightPanelTab","RecordingValue","SearchFiltersContext","filters","customFilters","searchName","updateFilterValue","addFilter","removeFilter","saveSearch","addCustomFilter","removeCustomFilter","updateCustomFilterValue","setSearchName","changeRandomize","isRandomize","order","and","or","searchResultsMode","onClosePanel","onCloneFilters","makeSearch","resetFilters","filtersGroups","createProviderWrapper","UIContextProvider","DEFAULT_SEARCH_TAB","searchQueryAtom","searchPageTabsAtom","searchPageActiveTabIdAtom","selectedContactIdAtom","selectedCaseIdAtom","selectedCaseTabWidthAtom","casesStatusesAtom","casesSortingAtom","casesServiceAtom","casesTeamIdAtom","mergingContactsAtom","useSearchPageTabsActions","handleTabOpen","handleTabClose","handleTabUpdate","currentTabs","useMergeContactsActions","mergingContacts","setMergingContacts","canAddContactForMerge","DELETE_CONTACTS","addContactForMerge","contacts","removeContactFromMerge","closeContactsMerge","AddContactForMere","handleOpenSearchContactModal","MERGE_FORM","add_contact","selectButtonTitle","MergeActions","onReset","isSubmitting","confirm","confirm_reset","MergeField","fieldData","SmCheckbox","radio","MergeContactInfo","created","MAX_ARRAY_ELEMENTS_AMOUNT","useMergeFormFields","fromRows","getMergeFormFieldValidator","alertTexts","max_addresses","max_phones","max_emails","max_messengers","Contact","mergeContactsData","arrayFieldsCount","contactDataRows","filedValue","contactDetails","stringFileValue","otherContactsValues","firstContactSringifiedValue","addSingleField","allValuesIsEqual","addArrayField","arrayType","JSON","stringify","omit","getArrayFieldName","hasSameValue","isArray","stringifiedValue","formattedAddress","parseMessengers","birthday","SKIPPED_ELEMENT_TYPES","useMergeFormData","formElements","formFields","createFormElement","contactsData","useContactsState","contactDetailsLoading","formRows","visibleRows","master_record","elementType","phone_number","allPhonesTypes","allEmailTypes","allAddressTypes","allMessengersTypes","useMergeFormRows","useOnSubmit","mergeContacts","targetContactId","mergedContactData","currentDetails","confirm_merge","continue","afterClose","restContactData","contactDetailsUnflatten","restData","parse","flattenContactDetails","flatten","maxDepth","mergedDetails","removeIds","onSubmit","getFieldClassName","rowIndex","Merge","subgridRowSan","gridRow","contactIndex","fieldIndex","ALL_TEAMS_ID","all_teams","CasesListHeader","flatRows","handleDeleteCase","DEFAULT_VISIBLE_COLUMNS","ownerName","sla","lastService","lastDisposition","ALL_CASE_STATUSES","CasesColumnsSelect","PopupButton","popupContent","getIsAllColumnsVisible","toggleAllColumnsVisible","search_queue_case_content_all","getAllLeafColumns","getCanHide","toggleVisibility","getIsVisible","setColumnVisibility","search_queue_case_restore_default","search_queue_case_content_label","CasesServiceSelect","setService","search_queue_all_team_services","search_queue_team_services","hideIcon","CasesSorting","email_queue_field_relevance","email_queue_field_slaTarget","search_queue_case_content_last_service","search_queue_case_content_disposition","search_queue_case_content_state","CasesStatusesSelect","statuses","setStatuses","caseStatusOptions","case_status_new","case_status_closed","isAllSelected","selected","curStatuses","search_queue_case_status_label","CasesTableHeader","getLeafHeaders","checkboxColumn","restHeaders","CasesTableRow","selectedCaseId","setSelectedCaseId","CasesTable","striped","data-id","renderTruncatedValue","context","CasesList","casesList","casesListLoading","getCasesList","columnVisibility","rowSelection","enableHiding","caseSearch_case_column","search_queue_case_content_location","search_queue_case_category","search_queue_case_content_date","search_queue_case_content_sla","onRowSelectionChange","onColumnVisibilityChange","timeout","clearTimeout","handleCaseOpenClick","onKeyPressHandler","useOnKeyPressHandler","CaseView","CasesLayout","casesListWidth","setCasesListWidth","useContactsActions","handleContactOpen","newTab","edit","handleContactCreate","anonymous","handleContactCreateCancel","ContactActions","selectedContact","deleteContact","handleEdit","handleMerge","delete_error","contact_deleting_confirmation","button_view_contact_text","button_create_contact_text","button_delete_contact_text","ContactsTableRow","getToggleSelectedHandler","onDoubleClick","ContactsTable","selectedContactId","setSelectedContactId","updaterOrValue","contact_first_name","meta","contact_last_name","contact_phone","contact_email","column_type","enableMultiRowSelection","Contacts","searchId","contactList","contactListLoading","contactsStateMethods","getContactList","selectedIdIsStillInList","selectedId","selectedRow","block","behavior","Search","searchQuery","setSearchQuery","conditionTabs","search_tab_contacts","Icon","LegacyIconContacts","search_tab_cases","LegacyIconSearchCases","activeConditionTabId","setActiveConditionTabId","useLocalStorageForState","handleKeywordClear","handleKeywordChange","renderHeader","SearchInput","contact_search_input_placeholder","clearable","onClear","SearchPage","useParams","openContactTab","history","replaceState","prevCaseItem","useUrlBasedNavigation","SCREENPOP_FORM","searchButton","createComponentLoader","KBPageLoader","features","autoOpenInteractionTab","dualView","multiTabs","openInNewTab","MainAreaKB","memo","kbBridge","useKbBridgeConnector","assertKBBridgeInterface","ChatCenterPageLoader","SupervisionPageLoader","CampaignsPageLoader","CalendarPageLoader","InteractionSearchPageLoader","HomePageLoader","EvaluationPageLoader","ErrorBoundaryFallback","SmMessage","unhandled_router_error","routesConfig","path","Component","withErrorBoundaryFallback","activateItemTab","useLocation","useADNavigationState","getParams","setParams","routeParams","activityFormTabId","useAutoRedirectToActivityFormTab","changeActiveTab","load","checkPrivileges","CAN_USE_CALENDAR","allowSubRoutes","SYS_HANDLE_EMAILS","getCasePendingReasons","ReactQueryDevtools","initialIsOpen","buttonPosition","CAN_START_INTERNAL_CHAT","SYS_VIEW_LIST_OF_AGENTS","SYS_VIEW_QUEUE_STATUS","nonCallCasesUrls","removeLastSlash","removeHttp","CAN_OPERATE_CAMPAIGNS","EVALUATE_OWN_INTERACTIONS","CONFIRM_EVALUATIONS_OF_SELF","CONFIRM_EVALUATIONS_OF_SUPERVISED_AGENTS","DELETE_EVALS_COMPLETED_BY_ANYONE","DELETE_EVALS_COMPLETED_BY_THEMSELVES","ASSIGN_EVALUATIONS_AND_CALIBRATIONS","MANAGE_EVALUATIONS_ACCROSS_TEAMS","SEE_EVALS_OF_SELF","useTimezonesState","localTimezone","iframeRef","loadIframe","resultHTML","regex","match","resultPermissions","contentWindow","postMessage","timezone","locale","permissions","origin","iframe","onLoad","ErrorBoundary","fallback","hide","notifications","methods","notificationsToRender","filteredList","n","delayed","slice","SmTransition","animation","isValidElement","cloneElement","onDismiss","warning","success","AriaStatus","ERROR_IDS_TO_SHOW","EXCEPTION_SELECTORS","CommunicatorWidgetLoader","ParallelChatInteractionLoader","CommunicationPanel","useCommunicatorUIState","floatingState","setFloatingState","setWidth","openerRef","setParallelInteractionsWidth","parallelInteractionsWidth","useMainPageUIState","kbFloatingState","mainContentNode","mainContentObserverEntry","useResizeObserver","mainContentWidth","setMainContentWidth","throttledSetMainContentWidth","throttle","contentRect","isWorkspacePage","getLocation","parallelItems","parallelItemsAtom","contentMinWidth","MAIN_CONTENT_MIN_WIDTH","showParallelItems","canPin","canPinFloating","floatingSize","onClickPin","Floating","side","resizeable","MAX_COMMUNICATOR_WIDTH_IN_PERCENT","MIN_COMMUNICATOR_WIDTH","showEar","unmountOnHide","exceptionSelectors","closeByEscape","NotificationsUI","IconPinFilled24","IconPin24","COMMUNICATION_PANEL","pin_tooltip","parallelItem","initialOption","contextName","getSelectedChannel","getSelectedPhone","isTouched","channelOptions","setIsTouched","throwNoProviderError","setSelectedChannel","ChannelStateContext","useChannelState","useLinkOpener","useScreenPopStateMethods","addTabs","browserTabInfo","useBrowserTabMetaInfo","appType","saveOpenedSuggestionUrl","suggestion","suggestionURL","openURLIn","msgId","formatHTMLAsOneLineString","normalizeExternalURL","isChatMessageDate","isHistoryMessage","isActivityMessageGroup","displayType","isChatMessage","isVoiceTranscriptMessage","voiceTranscriptMessageTypes","isExternalChatMessageDate","isVoiceTranscriptSuggestion","isCallOrVoiceTranscript","isHistoryCallMessage","isScrollAtBottom","scrollNode","scrollTop","clientHeight","scrollHeight","getMessageId","chatMessageData","getExternalChatMessageId","isExternalChatMessage","getActivitiyMessageGroupMessageId","getExternalChatMessageDisplayType","getScenarioMessageId","geHistoryMessageId","findFirstVisibleItemWithOffset","startIndex","offset","offsetTop","getFileErrors","getFileNameAndExtension","extension","CHAT_PROHIBITED_EXTENSIONS","ErrorCode","invalid_file_extension_error","getFileRejection","activityToChatMessage","activityMessages","userParty","addTime","partyUserShortTypeToActivityMessageGroup","getDispositionTitle","disposition_message_title","VOICE_CALL","getHtmlMessageText","messageTextElem","createElement","opacity","zIndex","elementText","innerText","getExternalChatMessageDisplayName","users","isErrorExternalChatMessage","getExternalChatFileData","fileId","fileError","fileIsMasked","fileProgress","refMsgId","isHistoryFileMessageMessage","ChatMessagesContext","hasSelection","setHasSelection","selectedMessages","getClipboardBuffer","setClipboardBuffer","scrollContainer","ChatMessagesContextProvider","clipboardBuffer","setSelectedMessages","firstSelectedMessageRef","interactionChanged","useValueUpdated","MouseEvent","lastSelectedMessageId","getNearestMessageId","firstSelectedMessageIndex","lastSelectedMessageIndex","indexes","sort","getSelection","range","rangeCount","getRangeAt","forwardSelection","firstElement","lastElement","startElement","endElement","setStartBefore","startContainer","setEndAfter","endContainer","setBaseAndExtent","startOffset","endOffset","mouseDownHandler","onMouseDown","useChatMessages","useContextSelector","useChatSelectedMessages","useChatGetClipboardBuffer","useChatSetClipboardBuffer","useChatScrollContainer","closest","Node","parentElement","MessageAction","buttonProps","useGetFormattedClipboardMessage","useUserDetailsState","useNonAssertedInteractionId","interaction","useInteraction","sessionUser","messageData","endTime","callParty","chartParty","chatParties","messageText","full","disposition_message_service_name","getDispositionText","userOrContactName","external_chat_customer_navigates_to","isMissedCall","call_message_missed","call_message_incoming_text","call_message_outgoing_text","getHistoryOrChatMessageText","getMessageData","getRangeMessageId","commonElement","commonAncestorContainer","nodeType","ELEMENT_NODE","getCommonAncestorElement","getElementMessageId","messageElement","uniqueMessageIdSelector","messageId","maskSelectedHistory","fragment","extractContents","tempSpan","getFragmentWithinSpanNode","Mask","createDocumentFragment","childNodes","appendChild","insertNode","maskSelectedText","maskedTextChunks","updatedMaskedTextChunks","extendUnmasked","unmaskedSpan","revealUnmasked","classList","unmaskedText","originalText","maskedText","nodeCopy","cloneNode","isMasked","isAnchorTag","nodeName","htmlClone","revealUnmaskedInner","htmlInner","textChunkId","unmasked","stringToHTMLFragment","replaceWith","htmlElement","equalUniqueMessageId","id1","id2","composedMessageUniqueId","composedChatMessage","getMaskedText","uniqueMessageId","getMessageTextElement","WithUnmaskAction","unmaskPopupWrapperRef","popupRect","setPopupRect","unmaskChunkId","setUnmaskChunkId","unmaskMessageId","setUnmaskMessageId","maskedMessageNodeRef","maskMessage","masked","useInteractionChatDataSelector","togglePopup","maskedMessageNode","isHTMLElement","unmaskElementMessageId","getBoundingClientRect","toggleShow","unmaskPopupWrapperNode","handleUnmask","messageToUnmask","unmaskedTextChunk","textChunks","unmaskedTextChunkHTML","coordinates","top","y","left","x","data-visible","IconUnmask","button_unMaskSelectedText_text","WithSelectionActions","withMaskAction","getPopupContent","withMask","updateActivityHistoryMessageText","getFormatClipboardMessage","openInteractionSlidingModal","useOpenInteractionSlidingModal","isCommunicator","useIsCommunicator","setKBFloatingState","useKbBridgeMethods","setupInteractionKB","selectedText","selectionData","selectedMessage","handleSearchKnowledgeBaseClick","isAfterCallWork","IconKnowledgeBase","CAN_MASK_INTERACTION_CONTENT","maskedMessageBeforeMasking","maskActivityHistoryMessages","getContactId","err","masking_failed_error_message","getErrorMessage","selectedMessageNode","updatedTextChunks","IconMask","mask","textToCopy","textToAddToCopyBuffer","res","navigator","writeText","IconCopy","copy","newClipboardData","IconAddToCopy","add_to_copy","useSelectionActions","onSelectionChange","WithSelectionPopup","popupContentClassName","ChatMessagesSelectionActions","WithAttachmentMaskAction","canMask","maskFile","itemContactId","isActiveChat","toggleFileMask","fileIds","activity_history_file_masking_error","useFileMasker","useActiveChatChecker","unmask","WithHoverOverActions","triggerHtmlProps","getFormattedClipboardMessage","handleCopyToClipboard","handleAddToClipboard","onOpenChange","asChild","container","collisionBoundary","align","hideWhenDetached","useBotSuggestions","botSuggestionSelector","associatedItems","getAssociatedItems","innerItem","botSuggestions","selectBotSuggestions","useInteractionStateSelector","useBotSuggestionsByType","voice","isChat","chat","selectBotSuggestionsByType","predefinedMessagesSearchAtom","predefinedSearchInsertPositionAtom","chatPopupContentAtom","attachmentButtonElementAtom","UploadErrorModal","onCloseCallback","rejection","totalFilesAmount","attachmentButton","errorMessages","uniq","CHAT_CENTER","upload_failed","InlineAlert","ul","li","failed_to_upload","mimeTypeToExternalChatFileType","AttachmentUI","isFailed","click","select_files","useInitiateChatByAttachment","chatItem","selectedChannel","selectedPhone","contactMessengers","getMessengers","getPhoneFromItem","errorValidation","itemService","didNumber","getChannelError","Dropzone","dragCounterRef","onDragEnter","onDragLeave","useShowChecker","onDrop","shouldInitiateChat","isPotentialInteraction","acceptedFiles","useOnDrop","useDropzone","validator","getRootProps","getInputProps","openUploadErrorModal","acceptedFilesLengthRef","drop_files_here","drag_and_drop_subtitle","useFirstUnreadMessage","chatData","useInteractionChatData","first","isRead","ScrollToFirstUnreadBadge","unreadMessagesClicked","setUnreadMessagesClicked","scrollAtBottom","setScrollAtBottom","scrollerApi","useInteractionUIChatScrollerApi","firstUnreadMessageId","scrollAtBottomThrottled","scrollTo","unread_messages_button_text","useKeyDatesInserter","getTimestamp","additionalConditions","messagesArray","currentTime","nextTime","areSameDays","formatChatDate","useActivitiesMessagesTillCreatedTime","latestCreatedTime","activitiesMessages","activitiesListByContactId","useActivitiesAsMessages","finalLatestCreatedTime","useMessagesList","chatActiveItem","messagesList","addUserId","partiesList","currentParty","maskedMessage","updatedMessage","localizeSystemMessage","eventType","needLocalization","args","partyName","qmMode","external_chat_party_coaching","chat_type_sms","msgHasDisplayTypes","displayTypes","useNormalizedChatMessages","normalizedChatMessages","normalizedMessage","CallMessageVoiceTranscript","voiceTranscriptMessage","contactName","nonContactName","sanitizedText","useChatMessageSanitizer","messageHTML","useInnerHTML","endTimestamp","TranscriptDropdown","contentVoiceTranscript","isOpenModal","transcriptOptions","handleCloseView","openGlobalSlidingModal","useOpenGlobalSlidingModal","closeGlobalSlidingModal","useCloseGlobalSlidingModal","iconClassName","handleOpenViewTranscript","handleCloseViewTranscript","optionName","close_transcript_option","view_transcript_option","renderIcon","IconViewTranscript","download_transcript_option","IconDownloadTranscript","useTranscriptOptions","TriggerDropdown","modal","onFocus","ButtonIcon","call_message_collapse_voice_transcript","call_message_expand_voice_transcript","IconTranscriptOptions","CallMessageRecording","hasVoiceTranscript","recordingLink","sentiment","ariaLabel","containerClassName","audioPlayerClassName","hasVoiceRecording","voiceTranscript","useContentVoiceTranscript","renderTranscriptDropdown","data-missed","IconMissedCall16","IconInteractionCall","call_message_duration_aria","Sentiment","call_message_created_time_aria","isNewAudioPlayerUI","skipUnmount","playerGroupTag","CHAT_VOICE_RECORDING_PLAYER_GROUP","pauseGroupWhenPlaying","renderOptionalNode","EmptyCallMessage","CallMessageContent","call_message_incoming_aria_label","call_message_outgoing_aria_label","EmailMessage","RemoteAssistMessage","privateIp","publicIp","osVersion","durationValue","getMomentUTC","privateIpValue","remote_assist_empty_private_ip_display_value","publicIpValue","remote_assist_empty_public_ip_display_value","osVersionValue","remote_assist_empty_os_version_display_value","IconRemoteAssistSession","remote_assist_title","remote_assist_duration_label","remote_assist_os_version_label","remote_assist_private_ip_label","remote_assist_public_ip_label","activityHistoryToHistoryMessageReducer","formatCallDuration","counterpartDuration","selfUser","wasMissedByParty","partyFailureCause","transcript","total","isTranscriptMessage","getHistoryChatMessage","confidence","sentimentScore","getSentimentFrom","getHistoryVoiceTranscriptMessage","getHistoryCallMessage","isMessage","isFile","getHistoryFileMessage","getHistoryEmailMessage","isRemoteAssistSession","selfAgent","lastAgent","toSorted","user1","user2","getHistoryRemoteAssistMessage","mapActivityToActivityHistoryItems","notUndefined","partyData","activityItem","nickName","useNormalizedHistoryMessages","activityHistory","previousActivity","previousActivityData","activityHistoryItem","activityHistoryMessages","previousActivityMessages","next","defaultBotSuggestions","filterMessagesByTypeAndStartTime","allowMessage","predicate","cleanKeyDates","lastIndex","filterReducer","useMessagesLoader","fetchMore","contactActivityHistoryRef","useActivityHistoryByContactId","getMessagesRef","useContactActivityHistory","getMessages","reachedLimitByMedia","chatTypeToMedia","useFetchMoreExternalMessages","hasActiveRequest","errorsCountRef","fetchData","NoMessages","allActivityHistoryLoaded","useExternalActivityHistoryLoaded","searchForOlder","activityHistoryIsLoading","INTERNAL_CHAT","chat_history_no_recent_found","chat_history_no_recent_while_loading","chat_history_search_for_older","NoMessagesPlaceholder","avatarClassName","MessageAvatar","isScenarioAvatar","isConference","showUserAvatar","getUserPictureUrl","useGetUserPictureUrl","MessageContent","isError","combinedClassName","SelectionItem","data-message-id-selection","focusOnSelection","touchedOnly","WithTopInfo","isOutgoing","isSystemMessage","sendTime","showTime","showName","siblingClassName","IconRobot","system_message","WithOptionalNameAndAvatar","callUsers","isFullWidth","messageClassName","withoutBorder","isLink","isActivityGroup","isNotes","isDisposition","isHistory","isTextMessage","isCallConference","isCustomMessage","isScenario","isScenarioMessage","finalDirection","finalUserId","messageItemClassName","data-disposition","data-email","data-error","data-file","data-incoming","data-link","data-notes","data-outgoing","data-remote-assist-session","data-text-message","dotStyles","DotsTransforming","TypingIndicator","typingParty","display_name_placeholder","agent_is_typing","party_is_typing","valueOf","TypingParties","rangeRef","messagesRef","bottom","typingParties","getTypingParties","hasTypingParties","lastRenderedItem","endIndex","lastMessageIndex","isLastMessageRenderedRef","VirtualizedMessages","renderMessage","virtuosoRef","initialRender","getServiceNameFromItem","ChannelIcon","getChannelImageIcon","loadMoreMessages","scrollToLast","scrollToIndex","messagesPrevRef","messagesLengthChanged","useSaveScrollPositionEffect","initialScrollPosition","setInteractionUIState","firstUnreadMessageIdRef","topItemRef","useInteractionUIChatTypeTopItemId","tabTopItemId","useInitialScrollPosition","generateMessageKey","_index","channelTitle","virtuosoComponents","Header","Footer","setListRange","onHeightChange","debouncedOnHeightChange","onTopStateChange","atTop","messageRenderer","Virtuoso","followOutput","itemContent","computeItemKey","atTopStateChange","initialTopMostItemIndex","customScrollParent","components","rangeChanged","totalListHeightChanged","increaseViewportBy","MessageTopInfo","gapBeforeTime","finalGapBeforeTime","default","ErrorMessage","DispositionMessage","messageContentClassName","rowMessageClassName","IconACWDisposition24","disposition_title","disposition_message_name","NotesMessage","IconAgentNotes","agent_notes_title","ActivityMessageGroup","dispositionTitle","useDispositionTitle","Message","closeButton","isHtml","iconSrc","transcriptMessage","isSuggestion","botSuggestionIcon","isCurrentChatTranscriptMessage","smsIcon","whatsappIcon","facebookIcon","lineIcon","telegramIcon","twitterIcon","viberIcon","webChatIcon","wechatIcon","getTranscriptMessageIcon","openLink","bubbleElement","onClickCapture","parseTranscriptLinksAsHTML","parsedUrl","chatMessageToVoiceTranscript","format","BotSuggestion","rest","isHTMLSuggestion","isLinkSuggestion","DateMessage","useMarkAsReadVisibilitySensor","isDIDChat","itemInteractionStepId","itemGlobalInteractionId","historyMessageGlobalInteractionId","markMessageAsRead","markPersonalMessageAsRead","unreadActivityHistory","useInteractionChatStateSelector","unreadPersonalMessages","visibilitySensorIsActive","useIntersectionObserver","root","isIntersecting","markAsRead","visible","AttachmentFileMessage","attachmentRef","fileLink","Attachment","link","withDownloadButton","AudioFileMessage","showDownloadButton","ImageFileMessage","senderName","htmlImageProps","useEscapeManager","Dialog","IconClose24","FileMessageContent","session","markAsReadData","queryString","paramsToQueryString","requestUrls","fileIsLoading","FileProgress","progress","attachmentText","chat_removedAttachment_label","del","FileMessage","isAudioFile","InviteMessage","handleCancelClick","inviteId","removeInviteFromChat","useHandleCancelInviteClick","data-invitation","external_chat_party_inviting","negative","LocationMessage","latitude","longitude","googleMapsUrl","SmImage","iconLocation","location_message_icon_tooltip","as","OutboundMessagingCampaignMessage","serviceAddress","topInfo","sanitizedMessage","messageInnerHTML","data-outgoing-campaign","IconOutboundCampaign","PageLinkMessage","contact_id","displayNameContact","externalChatName","externalChatData","displayNameText","IconSendInvitation","navigate_to","Link","VoiceTranscriptConfidence","rgb","Math","floor","round","hsv2rgb","backgroundColor","confidenceGrade","confidencePercentage","call_message_transcript_confidence_high","call_message_transcript_confidence_medium","call_message_transcript_confidence_low","data-confidence-low","data-confidence-medium","data-confidence-high","PlainMessage","interactionItemId","isHistoryVoiceTranscriptMessage","allowedAttributes","CHAT_MESSAGE_ALLOWED_ATTRIBUTES","allowedTags","CHAT_MESSAGE_ALLOWED_TAGS","chatSentimentsOn","useChatSentimentsOn","data-message-id","data-global-interaction-id","useGetTextContentSystemMessage","getTypeReceivedData","useGetTypeReceivedData","external_chat_party_coaching_new","received","external_chat_file_sent_new","SystemMessage","getTextContentSystemMessage","getSystemMessageIcon","IconJoin","IconLeaveParty","data-system","ExternalChatMessage","serviceType","isHistoryOutboundMessagingCampaignMessage","isHistoryEmailMessage","isSystemExternalChatMessage","isInviteExternalChatMessage","isLocationExternalChatMessage","isHistoryRemoteAssistMessage","VirtualizedExternalMessages","isDID","data-message","ExternalMessages","setScrollNode","useInteractionUIChatType","botSuggestionsByType","typeToMediaFilter","calls","insertKeyDates","normalizedHistoryMessages","activityCreatedTimeByMedia","filteredByTypeMessages","orderBy","messagesWithDates","useNormalizedMessagesWithDates","itemIsACW","itemsIds","isSelectableMessage","itemsIdsRef","itemsProvider","onItemSelect","selectionOrigin","SelectionContainer","startFrom","itemsListProvider","setSearch","searchResult","setSearchResult","showBotSuggestions","toggleBotSuggestions","showSMS","toggleSMS","showTranscript","toggleTranscript","VoiceTranscriptUIContext","VoiceTranscriptStateProvider","useVoiceTranscriptUIState","Filters","messagesContent","searchLocal","setSearchLocal","highlightIndex","setHighlightIndex","setDebouncedSearch","filteredResults","marksCount","reverse","markers","handleHighlight","handleSearch","SearchField","search_transcript","SearchResultsSwitcher","VOICE_TRANSCRIPT","bot_suggestion_btn_tooltip","IconIntentFilled","sms_btn_tooltip","IconMessageExternal","transcript_btn_tooltip","IconVoiceTranscript","useVoiceTranscriptVisibleMessages","chatMessages","ChatMessage","SearchResultHighlight","highlightedMarkElem","querySelectorAll","markElement","data-message-highlight","VirtualizedVoiceTranscriptMessages","isHTML","emptyChatMessages","emptyTranscript","emptySuggestions","VoiceTranscript","filtersClassName","visibleMessages","normalizeByUrlParser","parsedText","highlightHTML","textToHighlight","escapeRegExp","useVoiceTranscriptMessagesContentMap","VoiceTranscriptMessages","callItem","getAssociatedCallItem","ChannelSelector","useInteractionId","itemChannel","useAssociatedChatInteractionProp","phoneNumber","itemHasMultiplyPhones","hasMultiplyPhones","defaultChannel","getChannelWhenMultiplyPhones","currentItemTouched","useInitializeDefaultChannelEffect","SelectedIcon","finalDisabled","onEscapeKeyDown","renderChannel","data-selected","aria-selected","PhoneOption","CircleButton","IconArrowDown8","TEXT_AREA_DATA_ID","ChatTextArea","currentMessage","sendCurrentMessage","partyWithoutAddress","itemKind","dependencies","timerValue","setTimerValue","isTyping","setTyping","isSending","setSendingValue","sendAgentIsTyping","sendAgentIsNotTyping","currentTimerValue","useAgentTypingDetect","isSmsChannel","startsWith","useAttachmentsList","sendButtonDisabled","trim","contentEditableRef","hasMultipleLines","setHasMultipleLines","contentEditableROEntry","lineHeight","parseFloat","getComputedStyle","isNaN","computeHeight","useHasMultipleLines","FieldFrame","ContentEditable","message_input_placeholder","plainTextOnly","send_message_btn_tooltip","IconSendFilled","InvisibleAttachButton","buttonElementAtom","setAttachmentButtonElement","getLocalizedFileError","fileRejection","validFiles","not","addFilesToAttachmentsList","onFileClick","selectFiles","innerButtonElement","setInnerButtonElement","InvisibleAttachButtonWithInput","HTMLButtonElement","onFileInputClick","InvisinbleAttachButtonUI","withFileInput","getItemState","chatPopupContent","setChatPopupContent","predefinedSearchInsertPosition","setPredefinedSearchInsertPoisition","predefinedMessagesSearch","setPredefinedMessagesSearch","sendMessage","sendFile","useInteractionUIState","didNumbers","useDidState","associatedCallsNumber","callData","incoming","fromNumber","destination","sameNumberWithAssociatedCall","isOutboundInteraction","callHasSmsDIDNumber","isSMS","associatedChatService","setCurrentMessage","setMessage","resetCurrentMessage","sendCurrentPotentialMessage","sendCurrentExternalMessage","condenseNewLines","tryToParseCommandsInCurrentMessage","words","chat_channel_invite_bad_format","inviteChannel","messengerTypes","chat_channel_invite_unknown_messenger","messageErrors","getMessageErrors","handleSelectPredefinedMessage","moveCursorToTheEnd","setCursorPosition","exitPredefinedMessages","textareaElement","cursorPosition","getCursorPosition","shiftKey","ctrlKey","handleTextareaChange","updateMessage","textAreaSelector","getMessage","textAreaNode","dataToAdd","offsetToFocus","nodeToFocus","selectionNodeInner","selectionOffset","textContent","selectionInner","differentNodesSelected","getFirstNode","getLastNode","textSelected","getSelectionStartIndex","getSelectionEndIndex","Selection","selectionNode","selectionElement","TEXT_NODE","textAreaSelected","substring","setNodeAndOffsetToFocus","deleteSelected","requestAnimationFrame","keepCursorAtTheCurrentPosition","lastChild","setCursorToTheEnd","createRange","setStart","setEnd","removeAllRanges","addRange","useMessageUpdater","useControlsOptions","commandButton","openKB","IconSentimentGood","add_emoji","shortcut","IconAttachment","IconPredefinedMessage","predefined_messages","knowledge_base","getChatMessagesElement","ChatForm","chatFormRef","activeInteractionId","parseVariables","itemIsInboundExternalChat","isInboundInteraction","usePredefinedChatMessageState","greetings","usePredefinedChatMessageStateMethods","resetGreeting","useGreetings","useChatResponsesVariablesParser","itemIsExternalChat","useSmsMessageCounter","enableSmsCharacterCount","getCharCount","msgCount","charCount","charsPerSegment","sms_messages_number","messagesElementEntry","useAssociatedChatInteraction","controlsOptions","controlsDropdownOpen","smsMessageCounterEnabled","smsMessageCounter","data-chat-actions-menu","IconPlus24","Popover","sideOffset","onOpenAutoFocus","EmojiPopup","onSelectEmoji","emojiChar","emoji","ViewPredefinedMessages","maxHeight","PREDEFINED_MESSAGES_MAX_OFFSET","ExternalChat","isChatFormVisible","isPotentialItem","iqQmMonitorMode","isQualityManagementItemInMonitorMode","isOngoingCall","isExternalContactCall","isDelivered","isOnHold","isDeliveredChat","isOutboundChat","isAfterCallWorkChat","needToShowWorkitemUI","isNeedToShowWorkitemUI","useChatFormVisible","activityHistoryExists","loadMessages","useChatIsLoading","isInitLoadingExternal","isLoadingExternal","activitiesIsLoading","activitiesInitialLoading","isInitialLoading","ChatMessages","unmountPlayers","playerGroup","suggestions","alreadyOpened","openedBotSuggestionsUrls","getSuggestionsToOpen","opened","autoOpenURL","suggestionsToOpen","openSuggestions","useBotSuggestionsLinksAutoOpener","ChatCenterInteractionLoader","Chat","scope","groupChatId","groupChatMembers","ChatWindow","MIN_HEIGHT","setInitialSize","activateItem","localSettings","useLocalSettings","resizeOptions","minimized","borderClass","chatView","onRestore","avatarIcon","getUserId","isAgent","getFirstAndLastName","headPhones","smallerWithHeadphones","Window","onMinimize","toggleMinimized","PrivilegeRouter","navigationData","allowedRoutes","fallbackRoute","lastRoute","route","Routes","routeProps","Route","Navigate","topHeader","RightBarKB","kbWidth","setKBWidth","useCanPin","pinButton","KNOWLEDGE_BASE","unpin_tooltip","tooltipPlacement","IconPinFilled20","IconPin20","EarIcon","IconChevronLeft16","IconChevronRight16","kbSettings","useKbBridge","kbEnabled","earIcon","earClassName","MIN_KB_WIDTH","hideKBOnRoutes","RightBarLoader","RightBar","CalendarModalsAutoOpenerLoader","MainPage","goTo","hasTabs","setMainContentNode","setQmMainContentRef","useSupervisionUIContext","communicationPanelIsVisible","communicator","useAppDefaultSettings","modals","useIncomingChatMessageAudioNotifications","pathname","locationParams","isInteractionWorkspacePage","returnUrl","useInteractionModalsAutoOpener","chatWindowId","useInteractionPopupItemIdSelector","data-incoming-messages-modals-parent-node","MAX_COMM_WIDTH","MainPageResizeController","setElement","elementObserver","parallelItemsDispatch","containerWidth","setHasEnoughSpaceForParallelItems","parallelItemsHaveEnoughSpaceAtom","extraInteractionFits","payload","w","CommunicatorButton","handleCommunicatorButtonClick","navigation_acl_tooltip","leftBarStyles","base","IconPanelShow24","IconPanelHide24","unreadBadge","LeftBar","unreadExternal","internalChatIds","settings","hasOpenedWorkspaceTabs","unreadGroupChatsQuantity","isSupervisorPage","intentAlertsAmount","interactionsUnread","useChatUnread","isInternalChat","useGroupChatTotalUnread","chatId","menuItems","useUnreadGroupChatsQuantity","useMatch","end","useStatsState","intentAlerts","closed","NAV_BAR","page_title_context","IconContext","testId","page_title_calendar","IconCalendar","page_title_cases","IconCases","page_title_contacts","IconContacts","page_title_campaigns","IconCampaigns","page_title_supervisor","IconSupervisor","badge","UnreadBadge","unreadAmount","page_title_internal_chat","IconChat","page_title_omni_qm","IconOmniQualityManagement","page_title_kb","titleFull","page_title_kb_full","page_title_home_page","IconHomePage","ActiveStatusControl","RouterNavLink","NavLink","Stats","renderValue","metric","parts","getRank","rank","mod","ShowMore","HoverCard","openDelay","view_all","Metrics","rotatePeriod","rotateTimeoutRef","agentStats","servicesOptions","setSelectedService","statsData","selectNextService","currentSelectedService","stopServiceRotation","startServiceRotation","handleServiceChange","IconArrowDown24","Dashboard","dashboardConfig","useStatsStateMethods","getDashboardConfig","hasActiveInteraction","activeItem","DispositionButton","communicatorFloatingState","getItemDisposition","useDispositionsSettings","activeTab","useInteractionUIActiveTab","useOpenDispositionPanel","buttonText","disposition_set","set_disposition","iconLeft","IconCheck16","EndButton","withStateLayer","INTERACTIONS","EndCallButton","isDestructive","CALL_DETAILS_FORM","interaction_endCall","IconEndCall","HoldButton","holdStartTime","interaction_retrieve","interaction_hold","data-on-hold","motion","animate","paddingRight","IconHold16","IconPause16","AnimatePresence","initial","exit","InteractionTimer","micVolumeManager","MicrophoneVolume","MicrophoneIcon","muted","microphoneRef","startAnalysis","volume","svg","breakpoint","setAttribute","stopAnalysis","IconMute16","IconVoiceVolume","MuteButton","unmute_tooltip","mute_tooltip","data-muted","RecordButton","interaction_recordStop_tooltip","interaction_recordStart_tooltip","data-recording-active","IconRecordingActive16","IconRecording16","TransferButton","interaction_initiate_transfer","IconForward16","interactionBarStyles","InteractionButton","OptionComponent","ButtonDropdown","InteractionBarAvatar","avatarPhotoUrl","isGroupChat","userType","emiUserType","photoUrl","emiPhotoUrl","unread","useUnread","isChatConference","getInitials","InteractionBarDisplayName","htmlProps","useActiveInteractionContactId","interactionDisplayName","getDisplayName","contactDisplayName","conferenceMembersAmount","conference","ContactInfo","primaryContentRef","handleAddNewContact","addNewContact","hovercardOpened","useServicesDispositionsStateServices","canHaveDisposition","dispositionText","primaryContentHeight","offsetHeight","openQuickAddModal","QuickAddModal","openAddToExistingModal","AddToExistingModal","phoneOptions","emailOptions","activeChatId","useActiveChatInteractionId","openDispositionPanel","onCall","useCallHandler","openActivityHistory","useActivityHistoryOpener","isUndefinedContact","useAddNewContact","createdContactId","forceMount","transform","InteractionFavoriteButton","IconPhone","IconMessage","_email","alert","EmailOption","IconEmailEnvelope24","suggestedPhone","getPrimaryPhoneNumber","quick_add","new_contact","handleAddToExisting","add_to_existing","DefaultContent","onDisconnect","disconnectButtonTooltip","iconType","getMediaIcon","deliveredStartTime","whileHover","InteractionMediaIcon","pointerEvents","variants","hover","DialingInteractionContent","isCallEstablished","getIsCallEstablished","pendingStartTime","str","call_status_dialing","OngoingCallContent","useCallButtonsHandlers","showRecordButton","isMuted","isRecording","handleHoldClick","handleMuteClick","handleRecordClick","handleToggleTransferModal","handleClickToggleButton","holdButtonDisabled","canRetrieve","canHold","onHold","grid","marginLeft","WrapUpContent","ended","InteractionControlBar","disconnectItem","callState","end_conference","end_interaction","KBSettingsLoader","KBSettingsModal","useSettingsItems","tenantFeatures","openChangePasswordModal","useOpenChangePasswordModal","openEMIAccountsModal","useOpenEMIAccountsModal","openUserProfileModal","useOpenUserProfileModal","openKBSettingsModal","openKeyboardShortcutsModal","useOpenKeyboardShortcutsModal","openPredefinedMessagesModal","useOpenPredefinedMessagesModal","openVolumeModal","useOpenVolumeModal","openPreferencesModal","useOpenPreferencesModal","openAboutModal","useOpenAboutModal","openAudioDevicesModal","useOpenAudioDevicesModal","openCalendarSettingsModal","useOpenCalendarSettingsModal","openPrerecordedMessagesModal","useOpenPrerecordedMessagesModal","openLogoutModal","useOpenLogoutModal","canManageKBSettings","MANAGE_KNOWLEDGE_BASE_SETTINGS","isAudioDevicesLinkVisible","clickHandler","handler","SETTINGS","settings_menu_userProfile","DEVICE_SETUP_WINDOW","deviceSetup_heading","settings_menu_audioDevices","CALENDAR_SETTINGS","heading","settings_menu_changePassword","isForced","settings_menu_chatCannedResponses","settings_menu_preferences","tab_enterprise_messaging_accounts_heading","kb_settings","settings_menu_editVoicePrompts","settings_menu_shortcuts","settings_menu_ringtone_volume","settings_menu_about","logout","checkKBSettingsPrivilege","checkAudioDevices","msTeamsIntegrationEnabled","SettingsButton","useSettings","avatarSrc","userProfile","useUserProfileState","custom","iconButtonStyles","TopBar","openHelpModal","IconTopbarNewMessage","IconHelp","IconLogo","errorIdsToOmit","Navbar","OfflineBar","App","tenantId","useUIState","isTabNavHighlighted","useAppConfigStateMethods","checkWhetherToRenderReportProblemButton","DndProvider","backend","HTML5Backend","ToastProvider","AriaStatuses","Modals","DEFAULT_CACHE_TIME","MS_IN_HOUR","QueryClient","defaultOptions","queries","gcTime","ADProviders","ActiveInteractionContextProvider","QueryClientProvider","client","InteractionUIStateProvider","ServiceStateProvider","NavigationStateProvider","ADCNavigationStateProvider","MainPageUIProvider","useScrollStateProviderBuilder","scrollStateRef","resetStateForInteraction","useOnItemRemoved","ShortcutsProvider","SupervisionUIContextProvider","useUploadEmailFile","CommunicatorUIProvider","Connector","createPlatformSpecific","registerServiceWorker","createRoot","render","BrowserRouter","basename","FullScreenADApp"],"sourceRoot":""}