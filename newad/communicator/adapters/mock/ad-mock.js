const OutcomingMessages={Login:"LOGIN",Logout:"LOGOUT",NewInteraction:"NEW_INTERACTION",InteractionRemoved:"INTERACTION_REMOVED",InteractionStateChange:"INTERACTION_STATE_CHANGE",InteractionSwitched:"INTERACTION_SWITCHED",AgentStateChange:"AGENT_STATE_CHANGE",ManualCall:"MANUAL_CALL",RequestTransferData:"REQUEST_TRANSFER_DATA",LoadTransferData:"LOAD_TRANSFER_DATA"},IncomingMessages={CreateInteraction:"CREATE_INTERACTION",GetAgentState:"GET_AGENT_STATE",SetAgentState:"SET_AGENT_STATE",TerminateCall:"TERMINATE_CALL",CompleteInteraction:"COMPLETE_INTERACTION",SwitchActiveInteraction:"SWITCH_ACTIVE_INTERACTION",ChangeService:"CHANGE_SERVICE",SetDisposition:"SET_DISPOSITION",GetRecordingStatus:"GET_RECORDING_STATUS",SetRecordingStatus:"SET_RECORDING_STATUS",GetConfig:"GET_CONFIG"},response=t=>t+"_RESPONSE",adapterDomain="https://bpintegrations.web.app",agentNameSpan=document.getElementById("agent_name"),agentStatusSpan=document.getElementById("agent_status"),interactionListDiv=document.getElementById("interaction_list"),authZone=document.getElementById("auth"),unauthZone=document.getElementById("unauth"),mainContent=document.getElementById("main_content"),manualCallButton=document.getElementById("manual_call"),activeCrmObjects=[];let lastId=1;const getUniqueId=()=>(++lastId+"xO2").toString(),clearBGColorStyles=t=>{t&&t.classList&&[].forEach.call(t.classList,(e=>{"main-content-intr"!==e&&t.classList.remove(e)}))},agent={id:"{3124-d87934a-23fc3de2-42ff0}",name:"Pavel K"},sessionId="{87yf-3h9f0-fesfsefsefesf-g45tg4}",type=["voice","chat"],subject={voice:"USD: Bright Pattern phone call session",chat:"USD: Bright Pattern messaging chat session"},SCREEN_POP_DATA={web:{type:"web",action:"OPEN_WEB_PAGE",URL:"https://google.com",popUponAnswer:"false",keepPopupOpenAfterFinish:"false"},dynamicscrm:{type:"dynamicscrm",action:"SHOW_QUERY_RESULTS",statement:"pau",popUponAnswer:"false"}};class Interaction{constructor(t){this.id=(++lastId+"xO2").toString(),this.duration=0,this.stopped=!1,this.voiceRecording="OFF",this.screenRecording="OFF",this.callTimeListeners=[],this._state=void 0,this.disposition=void 0,this.notes=void 0,this.service="Outbound calls",this.screenPop=SCREEN_POP_DATA,this.recordingUrl="recordingUrl",this.fullname=t.fullname,this.type=type[Math.floor(2*Math.random())],this.phoneNumber=t.phoneNumber,this.direction=t.direction,this.email=t.email,this.htmlContent=""}get state(){return this._state}set state(t){var e;switch((e=this.htmlContent)&&e.classList&&[].forEach.call(e.classList,(t=>{"main-content-intr"!==t&&e.classList.remove(t)})),t){case"delivery_pending":this.htmlContent.classList.add("pending");break;case"delivered":this.htmlContent.classList.add("answered");break;case"wrap_up":this.htmlContent.classList.add("wrap-up")}this._state=t}run(){const t=setInterval((()=>{this.stopped?clearInterval(t):(this.duration++,this.callTimeListeners.forEach((t=>t(this.duration))))}),1e3)}addCallTimeListener(t){this.callTimeListeners.push(t)}export(){return{interactionId:this.id,state:this.state,type:this.type,subject:subject[this.type],phoneNumber:this.phone,callDirection:this.direction,screenPop:this.screenPop,description:this.notes,disposition:this.disposition,globalInteractionId:this.id,service:this.service,recordingUrl:this.recordingUrl}}}const agentState={state:"ready",notReadyReason:void 0},interactionList=[];let currentInteraction=null,getTransferDataCallback=null,service="Voice Calls";const randomCallTime=()=>6e3+9e3*Math.random(),changeActiveInteractionUI=t=>{if(!t)return;const e=document.querySelector(".selected-intr-item"),n=document.getElementById(`interaction_item_${t.id}`);e&&e.classList.remove("selected-intr-item"),n.classList.add("selected-intr-item"),currentInteraction&&currentInteraction.htmlContent?mainContent.replaceChild(t.htmlContent,currentInteraction.htmlContent):mainContent.appendChild(t.htmlContent)},clickOnItem=t=>{console.log(`#ad-switch from ${currentInteraction&&currentInteraction.id} to ${t}`);const e=interactionList.find((e=>e.id===t));changeActiveInteractionUI(e),switchInteraction(e?e.id:null)},createInteractionItem=t=>{const e=`\n        <div\n            class='interaction-item'\n            id='interaction_item_${t.id}'\n            data-id='${t.id}'\n            onclick='clickOnItem("${t.id}");'\n        >\n            <div class='intr-item-left'>\n                <span>\n                    Call #${t.id}:\n                </span>\n                <span>\n                    ${t.fullname}\n                </span>\n            </div>\n            <div class='intr-item-right'>\n                <span id='intr-duration-${t.id}'>\n                    ${t.duration&&t.duration}\n                </span>\n            </div>\n        </div>`;if(t.addCallTimeListener((e=>{document.getElementById(`intr-duration-${t.id}`).textContent=e})),currentInteraction){const t=document.getElementById(`interaction_item_${currentInteraction.id}`);t&&t.classList.remove("selected-intr-item")}const n=document.createElement("div");n.classList.add("main-content-intr"),n.id=`main_content_intr_${t.id}`;const i=`\n        <h3>\n            Calling...\n        </h3>\n        <div class='phone-number'>\n            ${t.phoneNumber}\n        </div>\n        <div class='interlocutor-name'>\n            ${t.fullname}\n        </div>\n        <div class='stop-call-button' onclick='stopCall("${t.id}");'>\n            STOP\n        </div>\n    `;n.innerHTML=i,setTimeout((()=>{const e=`\n            <h3>\n                Active Call\n            </h3>\n            <div class='phone-number'>\n                ${t.phoneNumber}\n            </div>\n            <div class='interlocutor-name'>\n                ${t.fullname}\n            </div>\n            <div class='call-duration'>\n                <span>\n                    Duration: \n                </span>\n                <span id='content_duration'></span>\n            </div>\n            <div class='stop-call-button' onclick='stopCall("${t.id}");'>\n                STOP\n            </div>\n        `;n.innerHTML=e,t.addCallTimeListener((e=>{t.htmlContent.querySelector("#content_duration").textContent=e})),changeInteractionState(t.id,"delivered"),t.run()}),6e3+9e3*Math.random()),t.htmlContent=n,interactionListDiv.insertAdjacentHTML("beforeend",e),changeActiveInteractionUI(t)},deleteInteractionUI=t=>{if(!t)return;t.htmlContent.parentElement&&t.htmlContent.remove();document.getElementById(`interaction_item_${t.id}`).remove()},stopInteraction=t=>{changeInteractionState(t.id,"completed"),removeInteraction(t.id);const e=interactionList.indexOf(t);deleteInteractionUI(t),interactionList.splice(e,1),currentInteraction===t&&(interactionList.length?clickOnItem(currentInteraction.id):clickOnItem(null))},submitACW=t=>{const e=interactionList.find((e=>e.id===t)),n=e.htmlContent.querySelector("#notes_field"),i=e.htmlContent.querySelector("#disposition_field");e.notes=n.value,e.disposition=i.value,stopInteraction(e)},initAfterCallWork=t=>{const e=`\n        <div>\n            Call Review\n        </div>\n        <div class='call-review-field'>\n            <label for='notes'>\n                Notes:\n            </label>\n            <textarea id='notes_field' name='notes' rows='3' placeholder='Write some notes...'></textarea>\n        </div>\n        <div class='call-review-field'>\n            <label for='notes'>\n                Disposition:\n            </label>\n            <textarea id='disposition_field' name='disposition' rows='3' placeholder='Select disposition...'></textarea>\n        </div>\n        <div class='button-row'>\n            <button id='submit_call_review' onclick='submitACW("${t.id}");'>\n                Submit\n            </button>\n        </div>\n    `;t.htmlContent.innerHTML=e,changeInteractionState(t.id,"wrap_up")},stopCall=t=>{const e=interactionList.find((e=>e.id===t));e.stopped=!0,"delivery_pending"===e.state?stopInteraction(e):"delivered"===e.state&&initAfterCallWork(e)};function login(){const t=OutcomingMessages.Login;console.log("SEND: #",t),unauthZone.style.display="none",authZone.style.display=null,agentNameSpan.textContent=agent.name,agentStatusSpan.textContent=agentState.state,window.parent.postMessage(JSON.stringify({type:t,data:{sessionId,agentData:{GUID:agent.id,agentId:agent.name}}}),adapterDomain)}function logout(){const t=OutcomingMessages.Logout;console.log("SEND: #",t),window.parent.postMessage(JSON.stringify({type:t,data:null}),adapterDomain)}function changeAgentState(t){agentState.state=t.state,agentState.notReadyReason=t.notReadyReason,agentStatusSpan.textContent=t.state;const e=OutcomingMessages.AgentStateChange;console.log("SEND: #",e),window.parent.postMessage(JSON.stringify({type:e,data:t}),adapterDomain)}function addInteraction(t){const e=new Interaction(t);console.log("# new interaction: ",e),interactionList.push(e),createInteractionItem(e),switchInteraction(e.id),console.log("#NEW INTERACTION: ",e);const n=OutcomingMessages.NewInteraction;return console.log("SEND: #",n," - ",e),window.parent.postMessage(JSON.stringify({type:n,data:e.export()}),adapterDomain),changeInteractionState(e.id,"delivery_pending"),e}function removeInteraction(t){const e=OutcomingMessages.InteractionRemoved;console.log("SEND: #",e," - ",t),window.parent.postMessage(JSON.stringify({type:e,data:{id:t}}),adapterDomain),console.log("send data: ",t)}function changeInteractionState(t,e){const n=interactionList.find((e=>e.id===t));n.state=e;const i=OutcomingMessages.InteractionStateChange;console.log("SEND: #",i," - ",e),window.parent.postMessage(JSON.stringify({type:i,data:n.export()}),adapterDomain),console.log("send data: ",n.export())}function switchInteraction(t){const e=currentInteraction&&currentInteraction.id,n=interactionList.find((e=>e.id===t));if(t===e)return;currentInteraction=n;const i=OutcomingMessages.InteractionSwitched;console.log("SEND: #",i),window.parent.postMessage(JSON.stringify({type:i,data:{id:t}}),adapterDomain)}async function requestTransferData(){return new Promise(((t,e)=>{const n=OutcomingMessages.RequestTransferData;console.log("SEND: #",n),window.parent.postMessage(JSON.stringify({type:n,data:{id:currentInteraction.id}}),adapterDomain),getTransferDataCallback=t}))}function loadTransferData(t){const e=OutcomingMessages.LoadTransferData;console.log("SEND: #",e),window.parent.postMessage(JSON.stringify({type:e,data:t}),adapterDomain)}function onGetAgentState(){return agentState}function onSetAgentState(t){return changeAgentState(t),null}function onCreateInteraction(t){return t.direction="OUTBOUND",addInteraction(t),null}function onTerminateCall(t){const e=interactionList.findIndex((e=>e.id===t.id)),n=interactionList[e];return initAfterCallWork(n),null}function onCompleteInteraction(t){const e=interactionList.findIndex((e=>e.id===t.id)),n=interactionList[e];return currentInteraction.stopped=!0,stopInteraction(n),null}function onSwitchActiveInteraction(t){return clickOnItem(t.id),null}function onChangeService(t){return service=t.servicename,null}function onSetDisposition(t){return interactionList.find((e=>e.id===t.id)).disposition=t.name||t.code,null}function onGetRecordingStatus(t){const e=interactionList.find((e=>e.id===t.id));switch(t.target){case"CALL":return e.voiceRecording;case"SCREEN":return e.screenRecording}}function onSetRecordingStatus(t){const e=interactionList.find((e=>e.id===t.id));switch(t.target){case"CALL":e.voiceRecording=t.status;break;case"SCREEN":e.screenRecording=t.status}return null}function onGetConfig(){return{clickToAct:"call"}}manualCallButton.onclick=()=>{const t="+777712304332",e=OutcomingMessages.ManualCall;console.log("SEND: #",e),window.parent.postMessage(JSON.stringify({type:e,data:{phonenumber:t}}),adapterDomain);addInteraction({type:"voice",fullname:"Mr. Proper",phoneNumber:t})};const messageListeners={[IncomingMessages.CreateInteraction]:onCreateInteraction,[IncomingMessages.GetAgentState]:onGetAgentState,[IncomingMessages.SetAgentState]:onSetAgentState,[IncomingMessages.TerminateCall]:onTerminateCall,[IncomingMessages.CompleteInteraction]:onCompleteInteraction,[IncomingMessages.SwitchActiveInteraction]:onSwitchActiveInteraction,[IncomingMessages.ChangeService]:onChangeService,[IncomingMessages.SetDisposition]:onSetDisposition,[IncomingMessages.GetRecordingStatus]:onGetRecordingStatus,[IncomingMessages.SetRecordingStatus]:onSetRecordingStatus,[IncomingMessages.GetConfig]:onGetConfig};function listenMessages(t){if(t.origin===adapterDomain)if(t.data&&"string"==typeof t.data){console.log("#RECEIVE: ",t);try{const n=JSON.parse(t.data),i=n.type,a=messageListeners[i];if(a)try{const t=a(n.data);window.parent.postMessage(JSON.stringify({type:response(i),data:{status:1,data:t}}),adapterDomain)}catch(e){window.parent.postMessage(JSON.stringify({type:response(i),data:{status:2,error:{message:e.message||e}}}),adapterDomain)}else i===response(OutcomingMessages.RequestTransferData)?getTransferDataCallback&&(getTransferDataCallback(n.data),getTransferDataCallback=null):console.error("Getting unknown message from Integration Middleware (probably): ",t)}catch(e){console.error("Error ",e.message)}}else console.error("Getting wrong data type in the message from Integration Middleware (probably)")}window.addEventListener("message",listenMessages,!1);