{"version":3,"file":"msdyn365-8806419f9a1df83cbd6f.js","mappings":"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","sources":["webpack://@bpinc/adapters/../../node_modules/lodash-es/fromPairs.js","webpack://@bpinc/adapters/./src/adc-client-api.ts","webpack://@bpinc/adapters/./src/utils/index.ts","webpack://@bpinc/adapters/../../packages/adapters-public-api-types/src/types.ts","webpack://@bpinc/adapters/../../node_modules/uuid/index.js","webpack://@bpinc/adapters/../../node_modules/uuid/lib/bytesToUuid.js","webpack://@bpinc/adapters/../../node_modules/uuid/lib/rng-browser.js","webpack://@bpinc/adapters/../../node_modules/uuid/v1.js","webpack://@bpinc/adapters/../../node_modules/uuid/v4.js","webpack://@bpinc/adapters/webpack/bootstrap","webpack://@bpinc/adapters/webpack/runtime/define property getters","webpack://@bpinc/adapters/webpack/runtime/hasOwnProperty shorthand","webpack://@bpinc/adapters/./src/integrations/msdyn365/loadExternalApi.ts","webpack://@bpinc/adapters/./src/integrations/msdyn365/integration.ts"],"sourcesContent":["/**\n * The inverse of `_.toPairs`; this method returns an object composed\n * from key-value `pairs`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} pairs The key-value pairs.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.fromPairs([['a', 1], ['b', 2]]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction fromPairs(pairs) {\n  var index = -1,\n      length = pairs == null ? 0 : pairs.length,\n      result = {};\n\n  while (++index < length) {\n    var pair = pairs[index];\n    result[pair[0]] = pair[1];\n  }\n  return result;\n}\n\nexport default fromPairs;\n","import fromPairs from 'lodash-es/fromPairs'\r\n\r\nimport type {\r\n    AgentDesktopClientAPI,\r\n    AgentState,\r\n    AgentStateData,\r\n    CallbackMessage,\r\n    ChatChannelType,\r\n    CustomTransferData,\r\n    DialCandidate,\r\n    DIDNumber,\r\n    DispositionData,\r\n    DispositionTarget,\r\n    InitialObjects,\r\n    InitiateResult,\r\n    InitOptions,\r\n    IntegrationConfig,\r\n    InteractionAssociatedObjectData,\r\n    InteractionScreen,\r\n    InteractionsState,\r\n    LoginData,\r\n    LoginStateData,\r\n    MessageLogger,\r\n    OnActiveInteractionSwitchHandler,\r\n    OnAgentStateChangeHandler,\r\n    OnAudioDeviceChangeHandler,\r\n    OnCallAudioQualityAlertHandler,\r\n    OnGetKnowledgeBaseArticleHandler,\r\n    OnGetKnowledgeBaseFolderHandler,\r\n    OnInteractionRemovedHandler,\r\n    OnInteractionStateChangeHandler,\r\n    OnLoadTransferDataHandler,\r\n    OnLoginHandler,\r\n    OnLogoutHandler,\r\n    OnNewInteractionHandler,\r\n    OnOpenRecordHandler,\r\n    OnPhoneCapabilitiesChangeHandler,\r\n    OnRequestRecordInfoHandler,\r\n    OnRequestRecordOnScreenHandler,\r\n    OnRequestTransferDataHandler,\r\n    OnSaveActivityRecordHandler,\r\n    OnScreenRecordingStateChangeHandler,\r\n    OnSearchKnowledgeBaseHandler,\r\n    OnSearchRecordsHandler,\r\n    OnServerErrorHandler,\r\n    OnShowScreenHandler,\r\n    OnSoftphoneStatusChangeHandler,\r\n    OnValidateAssociatedRecordsHandler,\r\n    OnWebScreenPopCustomHandler,\r\n    OnWidgetMinimizedChangeHandler,\r\n    OperationResult,\r\n    PhoneDevice,\r\n    PhoneDeviceData,\r\n    RequestMessage,\r\n    RescheduleData,\r\n    ScreenRecordingState,\r\n    ServiceData,\r\n    Team,\r\n    User,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {\r\n    callbackMessages,\r\n    requestMessages,\r\n    requestResponseMessages,\r\n    RESPONSE_SUFFIX,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    AnyEventHandler,\r\n    MessagePackage,\r\n    MessagesHandlers,\r\n    MessageUID,\r\n    ResponseCallbacks,\r\n} from './types'\r\nimport {utils} from './utils'\r\n\r\n\r\n// In milliseconds (ms)\r\nconst RESPONSE_TIMEOUT = 20_000\r\nconst MINIMIZED_WIDGET_WIDTH = '44px'\r\nconst MAXIMIZED_WIDGET_WIDTH_DEFAULT = '500px'\r\n\r\nconst selfScriptUrl = (function() {\r\n    if (window.document.currentScript) {\r\n        return (window.document.currentScript as HTMLScriptElement).src\r\n    } else {\r\n        const scripts = document.getElementsByTagName('script')\r\n        const myScript = scripts[scripts.length - 1]\r\n        return myScript.src\r\n    }\r\n})()\r\n\r\nconst adcOriginOverride = utils.extractURLParams(window.location.href)['adcUrl']\r\n\r\nconst adcOrigin = adcOriginOverride || new URL(selfScriptUrl).origin // 'https://adcommunicator.web.app'\r\n\r\nexport class AgentDesktopClientAPIImpl implements AgentDesktopClientAPI {\r\n\r\n    public adcFrame: HTMLIFrameElement | null\r\n    private adcFrameOrigin: string\r\n    private pendingMessages: any[]\r\n    private connectionEstablished: boolean\r\n    private adcIsReady: boolean\r\n    private maximizedIframeWidth = MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n    private readonly messageHandlers: MessagesHandlers\r\n    private readonly responseCallbacks: ResponseCallbacks\r\n    private readonly integrationKey: string\r\n    private readonly messageLoggers: MessageLogger[]\r\n    private readonly disableNewInteractionPopup: boolean\r\n\r\n    constructor(options: InitOptions = {}) {\r\n        this.adcFrame = null\r\n        this.adcFrameOrigin = ''\r\n        this.pendingMessages = []\r\n        this.integrationKey = options.integrationKey || uuid()\r\n        this.connectionEstablished = false\r\n        this.adcIsReady = false\r\n        this.messageLoggers = []\r\n        this.disableNewInteractionPopup = !!options.disableNewInteractionPopup\r\n\r\n        this.messageHandlers = fromPairs(\r\n            Object.keys(callbackMessages).map(messageType => [messageType, []]),\r\n        ) as unknown as MessagesHandlers\r\n\r\n        this.responseCallbacks = fromPairs(\r\n            requestMessages.map(messageType => [messageType + RESPONSE_SUFFIX, {}]),\r\n        ) as unknown as ResponseCallbacks\r\n\r\n        this.prepareAdcIframe(options)\r\n        this.registerListeners()\r\n\r\n        this.on('ON_WIDGET_MINIMIZED_CHANGE', (widgetMinimized: boolean) => {\r\n            if (this.adcFrame) {\r\n                if (widgetMinimized) {\r\n                    this.maximizedIframeWidth = this.adcFrame.getAttribute('width') ?? MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n                    this.adcFrame.setAttribute('width', MINIMIZED_WIDGET_WIDTH)\r\n                } else {\r\n                    this.adcFrame.setAttribute('width', this.maximizedIframeWidth)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.on('ON_WEB_SCREEN_POP_CUSTOM', () => false)\r\n        this.on('ON_VALIDATE_ASSOCIATED_RECORDS', () => ({valid: true}))\r\n    }\r\n\r\n    injectMessageLogger(logger: MessageLogger) {\r\n        this.messageLoggers.push(logger)\r\n    }\r\n\r\n    private prepareAdcIframe(options: InitOptions) {\r\n        if (options.adcFrame) {\r\n            const potentialFrame = options.adcFrame\r\n            if (potentialFrame instanceof HTMLIFrameElement && potentialFrame.src) {\r\n                this.adcFrame = potentialFrame\r\n            } else {\r\n                console.error(\r\n                    '@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\\n',\r\n                    'Valid Communicator iframe would be created automatically',\r\n                )\r\n            }\r\n        }\r\n        if (!this.adcFrame) {\r\n            let mountRoot: HTMLElement | null = null\r\n            if (options.mountRoot) {\r\n                const potentialMountRoot = options.mountRoot\r\n                if (potentialMountRoot instanceof HTMLElement) {\r\n                    mountRoot = potentialMountRoot\r\n                } else {\r\n                    console.error(\r\n                        '@@@ `mountRoot` is not HTMLElement.\\n',\r\n                        'Communicator iframe would be mounted to the `document.body` as a fallback scenario',\r\n                    )\r\n                }\r\n            }\r\n            if (!mountRoot) {\r\n                mountRoot = document.body\r\n            }\r\n            this.adcFrame = document.createElement('iframe')\r\n            this.adcFrame.title = 'Agent Desktop Communicator'\r\n            this.adcFrame.id = 'adc_frame'\r\n            this.adcFrame.style.border = 'none'\r\n            this.adcFrame.allow = 'microphone; camera; geolocation'\r\n            this.adcFrame.onerror = () => {\r\n                console.error('@@@ Adapter failure: unable to load AD Communicator')\r\n            }\r\n\r\n            if (options.standalone) {\r\n                this.adcFrame.width = '1px'\r\n                this.adcFrame.height = '1px'\r\n                this.adcFrame.style.zIndex = '-1000'\r\n                this.adcFrame.style.position = 'absolute'\r\n                this.adcFrame.style.top = '-1000px'\r\n                this.adcFrame.style.left = '-1000px'\r\n                this.adcFrame.src = adcOrigin + '/agent/communicator/no-ui/' + location.search\r\n            } else {\r\n                this.adcFrame.style.width = MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n                this.adcFrame.style.height = '100%'\r\n                this.adcFrame.src = adcOrigin + '/agent/communicator/' + location.search\r\n            }\r\n            mountRoot.appendChild(this.adcFrame)\r\n        }\r\n        this.adcFrameOrigin = (new URL(this.adcFrame.src)).origin\r\n    }\r\n\r\n    private handleIncomingMessage(type: CallbackMessage, uid: MessageUID, params: any[]) {\r\n        console.log('@@@ Handle: ', type, uid, params)\r\n        const handlers = this.messageHandlers[type]\r\n        if (!handlers.length) {\r\n            if (callbackMessages[type]?.needResponse) {\r\n                this.postMessageToAdc({\r\n                    uid,\r\n                    type: type + RESPONSE_SUFFIX,\r\n                    params: [],\r\n                    noHandlers: true,\r\n                })\r\n            }\r\n            return\r\n        }\r\n        const pendingResults = handlers.map(handler => {\r\n            try {\r\n                return handler(...params)\r\n            } catch (e) {\r\n                console.error(`@@@ Error in the event \"${type}\" handler:`, e)\r\n            }\r\n        })\r\n        if (callbackMessages[type]?.needResponse) {\r\n            utils.waitResolveAll(pendingResults).then(promiseResults => {\r\n                const positiveResults = promiseResults.reduce<any[]>((arr, result) => {\r\n                    if (\r\n                        result.status === 'fulfilled' &&\r\n                        result.value !== undefined\r\n                    ) {\r\n                        arr.push(result.value)\r\n                    }\r\n                    return arr\r\n                }, [])\r\n                const lastValue = positiveResults.length\r\n                    ? positiveResults[positiveResults.length - 1]\r\n                    : undefined\r\n                this.postMessageToAdc({\r\n                    uid,\r\n                    type: type + RESPONSE_SUFFIX,\r\n                    params: [lastValue],\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    private registerListeners() {\r\n        window.addEventListener('message', (e: MessageEvent) => {\r\n            if (e.origin !== this.adcFrameOrigin) {\r\n                return\r\n            }\r\n            const {type, uid, params} = e.data || {}\r\n            if (!type) {\r\n                return\r\n            }\r\n            e.stopImmediatePropagation()\r\n            try {\r\n                if (type === 'hello') {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.connectionEstablished = true\r\n                    const pingResponse = {\r\n                        uid,\r\n                        type: 'hi',\r\n                        params: [\r\n                            this.integrationKey,\r\n                            location.search,\r\n                            this.disableNewInteractionPopup,\r\n                        ],\r\n                    }\r\n                    if (!this.adcFrame?.contentWindow) {\r\n                        throw new Error('adcFrame is not defined - that should not be possible')\r\n                    }\r\n                    this.messageLoggers.forEach(log => log(pingResponse.type, pingResponse.params))\r\n                    this.adcFrame.contentWindow.postMessage(pingResponse, this.adcFrameOrigin)\r\n                    return\r\n                }\r\n                if (type === 'ready') {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.adcIsReady = true\r\n                    setTimeout(() => {\r\n                        this.pendingMessages.forEach(message => {\r\n                            this.postMessageToAdc(message)\r\n                        })\r\n                        this.pendingMessages = []\r\n                    })\r\n                    return\r\n                }\r\n\r\n                if (!this.adcIsReady) {\r\n                    return\r\n                }\r\n                if (Object.keys(callbackMessages).includes(type)) {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.handleIncomingMessage(type, uid, params)\r\n\r\n                } else if (requestResponseMessages.includes(type)) {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    const waiting = this.responseCallbacks[type]\r\n                    if (waiting && waiting[uid]) {\r\n                        const callback = waiting[uid]\r\n                        delete waiting[uid]\r\n                        Promise.resolve().then(() => callback(params))\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error('@@@ Error: ', (err instanceof Error) ? err.message : `${err}`)\r\n            }\r\n        })\r\n    }\r\n\r\n    private runResponseTimeoutWatch<Result>(\r\n        type: RequestMessage,\r\n        uid: MessageUID,\r\n        resolve: (value: (OperationResult<Result> | PromiseLike<OperationResult<Result>>)) => void,\r\n    ) {\r\n        setTimeout(() => {\r\n            const callbacksMap = this.responseCallbacks[type + RESPONSE_SUFFIX]\r\n            if (callbacksMap[uid]) {\r\n                delete callbacksMap[uid]\r\n                const errorText = (\r\n                    `Response from Communicator for event \"${type}\" ` +\r\n                    `wasn't received in the specified timeout ${RESPONSE_TIMEOUT} ms`\r\n                )\r\n                console.error(`@@@ ${errorText}`)\r\n                resolve({\r\n                    status: 'error',\r\n                    error: {\r\n                        code: 6,\r\n                        name: 'api_not_answer',\r\n                        message: errorText,\r\n                    },\r\n                })\r\n            }\r\n        }, RESPONSE_TIMEOUT)\r\n    }\r\n\r\n    private postMessageToAdc(data: MessagePackage) {\r\n        if (this.adcFrame !== null && this.adcFrame.contentWindow && this.adcIsReady) {\r\n            this.messageLoggers.forEach(log => log(data.type, data.params))\r\n            if (data.type === 'LOGIN') {\r\n                console.log('@@@ ADAPTER SEND MESSAGE: LOGIN')\r\n            } else {\r\n                console.log('@@@ ADAPTER SEND MESSAGE: ', data)\r\n            }\r\n            this.adcFrame.contentWindow.postMessage(data, this.adcFrameOrigin)\r\n        } else {\r\n            console.log('@@@ ADAPTER: ADC is not ready, add pending message:', data)\r\n            this.pendingMessages.push(data)\r\n        }\r\n    }\r\n\r\n    private apiCall<Result>(type: RequestMessage, params: any[] = []) {\r\n        return new Promise<OperationResult<Result>>(resolve => {\r\n            const uid = uuid()\r\n            this.postMessageToAdc({uid, type, params})\r\n\r\n            const waiting = this.responseCallbacks[type + RESPONSE_SUFFIX]\r\n            waiting[uid] = resolve\r\n            this.runResponseTimeoutWatch(type, uid, resolve)\r\n        })\r\n    }\r\n\r\n    getLoginState(): Promise<OperationResult<LoginStateData>> {\r\n        return this.apiCall('GET_LOGIN_STATE')\r\n    }\r\n\r\n    login(loginData: LoginData, force?: boolean): Promise<OperationResult> {\r\n        return this.apiCall('LOGIN', [loginData, force])\r\n    }\r\n\r\n    logout(): Promise<OperationResult> {\r\n        return this.apiCall('LOGOUT')\r\n    }\r\n\r\n    getAgentState(): Promise<OperationResult<AgentStateData>> {\r\n        return this.apiCall<AgentStateData>('GET_AGENT_STATE')\r\n    }\r\n\r\n    setAgentState(state: AgentState, notReadyReason?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_AGENT_STATE', [state, notReadyReason])\r\n    }\r\n\r\n    acceptInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ACCEPT_INTERACTION', [interactionId])\r\n    }\r\n\r\n    rejectInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REJECT_INTERACTION', [interactionId])\r\n    }\r\n\r\n    startCall(phonenumber: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_CALL', [\r\n            phonenumber,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    startChat(channel: ChatChannelType, address: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_CHAT', [\r\n            channel,\r\n            address,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    startEmail(email: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_EMAIL', [\r\n            email,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    sendDtmf(dtmf: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SEND_DTMF', [dtmf, interactionId])\r\n    }\r\n\r\n    consultCall(phone: string): Promise<OperationResult> {\r\n        return this.apiCall('CONSULT_CALL', [phone])\r\n    }\r\n\r\n    blindTransfer(phone: string, customTransferData?: CustomTransferData, integrationId?: string): Promise<OperationResult> {\r\n        return this.apiCall('BLIND_TRANSFER', [phone, customTransferData, integrationId])\r\n    }\r\n\r\n    transfer(customTransferData?: CustomTransferData): Promise<OperationResult> {\r\n        return this.apiCall('TRANSFER', [customTransferData])\r\n    }\r\n\r\n    leaveInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('LEAVE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    completeInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('COMPLETE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    leaveAndCompleteInteraction(disposition?: string, note?: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('LEAVE_AND_COMPLETE_INTERACTION', [disposition, note, interactionId])\r\n    }\r\n\r\n    switchActiveInteraction(interactionId: string): Promise<OperationResult> {\r\n        return this.apiCall('SWITCH_ACTIVE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    inviteToCallConference(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('INVITE_TO_CALL_CONFERENCE', [phone, customTransferData, interactionId])\r\n    }\r\n\r\n\r\n    removeFromCallConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REMOVE_FROM_CALL_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    destroyCallConference(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('DESTROY_CALL_CONFERENCE', [interactionId])\r\n    }\r\n\r\n    inviteToChatConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('INVITE_TO_CHAT_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    removeFromChatConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REMOVE_FROM_CHAT_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    mergeAllCallsIntoConference(customTransferData?: CustomTransferData): Promise<OperationResult> {\r\n        return this.apiCall('MERGE_ALL_CALLS_INTO_CONFERENCE', [customTransferData])\r\n    }\r\n\r\n    getTeams(): Promise<OperationResult<Team[]>> {\r\n        return this.apiCall('GET_TEAMS')\r\n    }\r\n\r\n    getTeamMembers(teamId: string): Promise<OperationResult<User[]>> {\r\n        return this.apiCall('GET_TEAM_MEMBERS', [teamId])\r\n    }\r\n\r\n    getServicesList(): Promise<OperationResult<ServiceData[]>> {\r\n        return this.apiCall('GET_SERVICES_LIST')\r\n    }\r\n\r\n    getService(): Promise<OperationResult<ServiceData | null>> {\r\n        return this.apiCall('GET_SERVICE')\r\n    }\r\n\r\n    setService(service: string | null): Promise<OperationResult> {\r\n        return this.apiCall('SET_SERVICE', [service])\r\n    }\r\n\r\n    getDIDNumbersList(): Promise<OperationResult<DIDNumber[]>> {\r\n        return this.apiCall('GET_DID_LIST')\r\n    }\r\n\r\n    getDIDNumber(): Promise<OperationResult<DIDNumber | null>> {\r\n        return this.apiCall('GET_DID')\r\n    }\r\n\r\n    setDIDNumber(did: string | null): Promise<OperationResult> {\r\n        return this.apiCall('SET_DID', [did])\r\n    }\r\n\r\n    getDispositionsList(target: DispositionTarget): Promise<OperationResult<DispositionData[]>> {\r\n        return this.apiCall('GET_DISPOSITIONS_LIST', [target])\r\n    }\r\n\r\n    setDisposition(disposition: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_DISPOSITION', [disposition, interactionId])\r\n    }\r\n\r\n    addNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ADD_NOTE', [note, interactionId])\r\n    }\r\n\r\n    updateNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('UPDATE_NOTE', [note, interactionId])\r\n    }\r\n\r\n    replaceNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REPLACE_NOTE', [note, interactionId])\r\n    }\r\n\r\n    setRescheduleWindow(rescheduleData: RescheduleData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_RESCHEDULE', [rescheduleData, interactionId])\r\n    }\r\n\r\n    getConfig(): Promise<OperationResult<IntegrationConfig>> {\r\n        return this.apiCall('GET_CONFIG')\r\n    }\r\n\r\n    setVariable(key: string, value: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_VARIABLE', [key, value, interactionId])\r\n    }\r\n\r\n    getVariables(keys: string[], interactionId?: string): Promise<OperationResult<Record<string, string>>> {\r\n        return this.apiCall('GET_VARIABLES', [keys, interactionId])\r\n    }\r\n\r\n    addInteractionAssociatedObject(object: InteractionAssociatedObjectData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ADD_INTERACTION_ASSOCIATED_OBJECT', [object, interactionId])\r\n    }\r\n\r\n    setInteractionActiveScreen(screenData: InteractionScreen, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_INTERACTION_ACTIVE_SCREEN', [screenData, interactionId])\r\n    }\r\n\r\n    getPhoneDevicesList(): Promise<OperationResult<PhoneDevice[]>> {\r\n        return this.apiCall('GET_PHONE_DEVICES_LIST')\r\n    }\r\n\r\n    getPhoneDevice(): Promise<OperationResult<PhoneDeviceData>> {\r\n        return this.apiCall('GET_PHONE_DEVICE')\r\n    }\r\n\r\n    setPhoneDevice(phoneDevice: PhoneDeviceData): Promise<OperationResult> {\r\n        return this.apiCall('SET_PHONE_DEVICE', [phoneDevice])\r\n    }\r\n\r\n    setCallHold(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_HOLD', [state, interactionId])\r\n    }\r\n\r\n    setCallRecording(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_RECORDING', [state, interactionId])\r\n    }\r\n\r\n    setCallMute(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_MUTE', [state, interactionId])\r\n    }\r\n\r\n    setScreenRecordingMute(state: boolean): Promise<OperationResult> {\r\n        return this.apiCall('SET_SCREEN_RECORDING_MUTE', [state])\r\n    }\r\n\r\n    getScreenRecordingState(): Promise<OperationResult<ScreenRecordingState>> {\r\n        return this.apiCall('GET_SCREEN_RECORDING_STATE')\r\n    }\r\n\r\n    setWidgetMinimized(state: boolean): Promise<OperationResult> {\r\n        return this.apiCall('SET_WIDGET_MINIMIZED', [state])\r\n    }\r\n\r\n    sendChatMessage(message: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SEND_CHAT_MESSAGE', [message, interactionId])\r\n    }\r\n\r\n    suggestChatMessage(message: string, allowOverwrite?: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SUGGEST_CHAT_MESSAGE', [message, allowOverwrite, interactionId])\r\n    }\r\n\r\n    getAgentNotReadyReasons(): Promise<OperationResult<string[]>> {\r\n        return this.apiCall('GET_AGENT_NOT_READY_REASONS')\r\n    }\r\n\r\n    activatePage(): Promise<OperationResult> {\r\n        return this.apiCall('ACTIVATE_PAGE', [])\r\n    }\r\n\r\n    getInteractionsState(): Promise<OperationResult<InteractionsState>> {\r\n        return this.apiCall('GET_INTERACTIONS_STATE', [])\r\n    }\r\n\r\n    setCallRecordingMute(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_RECORDING_MUTE', [state, interactionId])\r\n    }\r\n\r\n    setDialCandidates(candidates: DialCandidate[]): Promise<OperationResult> {\r\n        return this.apiCall('SET_DIAL_CANDIDATES', [candidates])\r\n    }\r\n\r\n    on(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    on(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    on(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    on(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    on(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    on(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    on(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    on(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    on(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    on(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    on(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    on(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    on(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    on(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    on(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    on(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    on(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    on(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    on(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    on(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    on(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    on(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    on(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n    on(message: CallbackMessage, handler: AnyEventHandler): void {\r\n        this.messageHandlers[message].push(handler)\r\n    }\r\n\r\n    remove(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    remove(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    remove(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    remove(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    remove(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    remove(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    remove(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    remove(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    remove(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    remove(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    remove(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    remove(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    remove(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    remove(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    remove(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    remove(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    remove(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    remove(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    remove(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    remove(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    remove(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    remove(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    remove(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n    remove(message: CallbackMessage, handler: AnyEventHandler): void {\r\n        const delIndex = this.messageHandlers[message].indexOf(handler)\r\n        if (delIndex !== -1) {\r\n            this.messageHandlers[message].splice(delIndex, 1)\r\n        }\r\n    }\r\n}\r\n\r\nwindow.brightpattern = {\r\n    AdApi: AgentDesktopClientAPIImpl,\r\n}\r\n","\r\nconst extractURLParams = (url: string): Record<string, string> => {\r\n    const paramsMap: Record<string, string> = {}\r\n\r\n    if (url) {\r\n        try {\r\n            const paramUrl = url.split('?').slice(1).join('?')\r\n            if (paramUrl.length) {\r\n\r\n                const params = paramUrl.split('&')\r\n                params.reduce<Record<string, string>>((paramMap, param) => {\r\n\r\n                    const splits = param.split('=')\r\n                    if (splits.length) {\r\n                        const name = decodeURIComponent(splits.shift()!)\r\n                        paramMap[name] = decodeURIComponent(splits.join('='))\r\n                    }\r\n                    return paramMap\r\n                }, paramsMap)\r\n            }\r\n        } catch (e) {\r\n            console.error('Unable to parse URL parameters: ', url)\r\n        }\r\n    }\r\n    return paramsMap\r\n}\r\n\r\nconst capitalize = (str: string): string => str.replace(/^\\w/, c => c.toUpperCase())\r\n\r\nfunction findLast<T>(array: Array<T>, predicate: (item: T) => boolean): T | null {\r\n\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        if (predicate(array[i])) {\r\n            return array[i]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction shallowObjEqual<Obj extends Record<PropertyKey, unknown>>(obj1: Obj, obj2: Obj): boolean {\r\n\r\n    for (const key in obj1) {\r\n        if (!(key in obj2) || obj1[key] !== obj2[key]) {\r\n            return false\r\n        }\r\n    }\r\n    for (const key in obj2) {\r\n        if (!(key in obj1) || obj2[key] !== obj1[key]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport type FulfilledResult<T> = {\r\n    status: 'fulfilled'\r\n    value: T\r\n}\r\n\r\nexport type RejectedResult<T> = {\r\n    status: 'rejected'\r\n    reason: any\r\n}\r\n\r\nexport type WaitResolveResult<T> = FulfilledResult<T> | RejectedResult<T>\r\n\r\nconst waitResolveAll = function<T>(targets: Array<T | Promise<T>>): Promise<WaitResolveResult<T>[]> {\r\n    return new Promise<WaitResolveResult<T>[]>((resolve, reject) => {\r\n\r\n        if (!targets.length) {\r\n            resolve([])\r\n            return\r\n        }\r\n        let numberOfResolved = 0\r\n        const results = new Array(targets.length)\r\n        const promises = targets.map(target => {\r\n            return (target instanceof Promise ? target : Promise.resolve(target))\r\n        }) as Promise<T>[]\r\n        promises.forEach((targetPromise, index) => {\r\n            targetPromise\r\n            .then(value => {\r\n                results[index] = {\r\n                    status: 'fulfilled',\r\n                    value,\r\n                }\r\n            })\r\n            .catch(reason => {\r\n                results[index] = {\r\n                    status: 'rejected',\r\n                    reason,\r\n                }\r\n            })\r\n            .finally(() => {\r\n                numberOfResolved++\r\n                if (numberOfResolved === targets.length) {\r\n                    resolve(results)\r\n                }\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nconst startsWithAny = (base: string, prefixes: string[]) => {\r\n    for (const prefix of prefixes) {\r\n        if (base.startsWith(prefix)) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst splitWords = (str: string): string => {\r\n    return str\r\n    .trim()\r\n    .split(/(?=[A-Z])/)\r\n    .map(word => word.trim())\r\n    .join(' ')\r\n}\r\n\r\nexport const utils = {\r\n    extractURLParams,\r\n    capitalize,\r\n    findLast,\r\n    shallowObjEqual,\r\n    waitResolveAll,\r\n    startsWithAny,\r\n    splitWords,\r\n}\r\n","/** Must not have dependencies (imports) */\r\n\r\nexport const requestMessages = [\r\n    'GET_LOGIN_STATE',\r\n    'LOGIN',\r\n    'LOGOUT',\r\n    'GET_AGENT_STATE',\r\n    'SET_AGENT_STATE',\r\n    'ACCEPT_INTERACTION',\r\n    'REJECT_INTERACTION',\r\n    'START_CALL',\r\n    'START_CHAT',\r\n    'START_EMAIL',\r\n    'SEND_DTMF',\r\n    'CONSULT_CALL',\r\n    'BLIND_TRANSFER',\r\n    'TRANSFER',\r\n    'LEAVE_INTERACTION',\r\n    'COMPLETE_INTERACTION',\r\n    'LEAVE_AND_COMPLETE_INTERACTION',\r\n    'SWITCH_ACTIVE_INTERACTION',\r\n    'INVITE_TO_CALL_CONFERENCE',\r\n    'REMOVE_FROM_CALL_CONFERENCE',\r\n    'DESTROY_CALL_CONFERENCE',\r\n    'INVITE_TO_CHAT_CONFERENCE',\r\n    'REMOVE_FROM_CHAT_CONFERENCE',\r\n    'MERGE_ALL_CALLS_INTO_CONFERENCE',\r\n    'GET_TEAMS',\r\n    'GET_TEAM_MEMBERS',\r\n    'GET_SERVICES_LIST',\r\n    'GET_SERVICE',\r\n    'SET_SERVICE',\r\n    'GET_DID_LIST',\r\n    'GET_DID',\r\n    'SET_DID',\r\n    'GET_DISPOSITIONS_LIST',\r\n    'SET_DISPOSITION',\r\n    'SET_RESCHEDULE',\r\n    'ADD_NOTE',\r\n    'UPDATE_NOTE',\r\n    'REPLACE_NOTE',\r\n    'GET_CONFIG',\r\n    'GET_VARIABLES',\r\n    'SET_VARIABLE',\r\n    'ADD_INTERACTION_ASSOCIATED_OBJECT',\r\n    'SET_INTERACTION_ACTIVE_SCREEN',\r\n    'GET_PHONE_DEVICES_LIST',\r\n    'GET_PHONE_DEVICE',\r\n    'SET_PHONE_DEVICE',\r\n    'SET_CALL_HOLD',\r\n    'SET_CALL_RECORDING',\r\n    'SET_CALL_MUTE',\r\n    'SET_SCREEN_RECORDING_MUTE',\r\n    'GET_SCREEN_RECORDING_STATE',\r\n    'SET_WIDGET_MINIMIZED',\r\n    'SEND_CHAT_MESSAGE',\r\n    'SUGGEST_CHAT_MESSAGE',\r\n    'GET_AGENT_NOT_READY_REASONS',\r\n    'ACTIVATE_PAGE',\r\n    'GET_INTERACTIONS_STATE',\r\n    'SET_CALL_RECORDING_MUTE',\r\n    'SET_DIAL_CANDIDATES',\r\n] as const\r\nexport type RequestMessage = typeof requestMessages[number]\r\n\r\nexport const callbackMessages = {\r\n    'ON_LOGIN': {needResponse: false},\r\n    'ON_LOGOUT': {needResponse: false},\r\n    'ON_NEW_INTERACTION': {needResponse: false},\r\n    'ON_INTERACTION_REMOVED': {needResponse: false},\r\n    'ON_INTERACTION_STATE_CHANGE': {needResponse: false},\r\n    'ON_ACTIVE_INTERACTION_SWITCHED': {needResponse: false},\r\n    'ON_AGENT_STATE_CHANGE': {needResponse: false},\r\n    'ON_REQUEST_TRANSFER_DATA': {needResponse: true},\r\n    'ON_LOAD_TRANSFER_DATA': {needResponse: false},\r\n    'ON_GET_KNOWLEDGE_BASE_FOLDER': {needResponse: true},\r\n    'ON_SEARCH_KNOWLEDGE_BASE': {needResponse: true},\r\n    'ON_GET_KNOWLEDGE_BASE_ARTICLE': {needResponse: true},\r\n    'ON_OPEN_RECORD': {needResponse: false},\r\n    'ON_SEARCH_RECORDS': {needResponse: false},\r\n    'ON_SHOW_SCREEN': {needResponse: false},\r\n    'ON_SCREEN_RECORDING_STATE_CHANGE': {needResponse: false},\r\n    'ON_WIDGET_MINIMIZED_CHANGE': {needResponse: false},\r\n    'ON_SERVER_ERROR': {needResponse: false},\r\n    'ON_SOFTPHONE_STATUS_CHANGE': {needResponse: false},\r\n    'ON_AUDIO_DEVICE_CHANGE': {needResponse: false},\r\n    'ON_PHONE_CAPABILITIES_CHANGE': {needResponse: false},\r\n    'ON_CALL_AUDIO_QUALITY_ALERT': {needResponse: false},\r\n    'ON_WEB_SCREEN_POP_CUSTOM': {needResponse: true},\r\n    'ON_SAVE_ACTIVITY_RECORD': {needResponse: false},\r\n    'ON_VALIDATE_ASSOCIATED_RECORDS': {needResponse: true},\r\n    'ON_REQUEST_RECORD_INFO': {needResponse: true},\r\n    'ON_REQUEST_RECORD_ON_SCREEN': {needResponse: true},\r\n} as const\r\nexport type CallbackMessage = keyof typeof callbackMessages\r\n\r\n\r\ntype FilterByHavingResponse<T> = {\r\n    [Key in keyof T]: T[Key] extends {needResponse: true} ? Key : never\r\n}\r\n\r\nconst typedKeys = <T extends {[key: string]: unknown}>(data: T): Array<keyof T> =>\r\n    Object.keys.call<typeof data, Array<typeof data>, Array<keyof T>>(data, data)\r\n\r\nexport type CallbackMessageWithResponse = FilterByHavingResponse<typeof callbackMessages>[keyof typeof callbackMessages]\r\n\r\nexport const RESPONSE_SUFFIX = '_RESPONSE' as const\r\n\r\nexport const requestResponseMessages = requestMessages.map<`${RequestMessage}${typeof RESPONSE_SUFFIX}`>(message => {\r\n    return `${message}${RESPONSE_SUFFIX}`\r\n})\r\nexport const callbackResponseMessages = typedKeys(callbackMessages)\r\n    .filter<CallbackMessageWithResponse>((message: CallbackMessage): message is CallbackMessageWithResponse => {\r\n        return callbackMessages[message].needResponse\r\n    })\r\n    .map<`${CallbackMessageWithResponse}${typeof RESPONSE_SUFFIX}`>(message => {\r\n        return `${message}${RESPONSE_SUFFIX}`\r\n    })\r\n\r\nexport type CallbackResponseMessage = keyof {\r\n    [Key in keyof typeof callbackMessages as typeof callbackMessages[Key] extends {needResponse: true} ? `${Key}${typeof RESPONSE_SUFFIX}` : never]: true\r\n}\r\n\r\nexport type CallbackMethodsReturnTypeMap = {\r\n    'ON_LOGIN': void\r\n    'ON_LOGOUT': void\r\n    'ON_NEW_INTERACTION': void\r\n    'ON_INTERACTION_REMOVED': void\r\n    'ON_INTERACTION_STATE_CHANGE': void\r\n    'ON_ACTIVE_INTERACTION_SWITCHED': void\r\n    'ON_AGENT_STATE_CHANGE': void\r\n    'ON_REQUEST_TRANSFER_DATA': CustomTransferData\r\n    'ON_LOAD_TRANSFER_DATA': void\r\n    'ON_GET_KNOWLEDGE_BASE_FOLDER': ExternalKBItemData[]\r\n    'ON_SEARCH_KNOWLEDGE_BASE': ExternalKBSearchResultData[]\r\n    'ON_GET_KNOWLEDGE_BASE_ARTICLE': ExternalKBArticleData | null\r\n    'ON_OPEN_RECORD': void\r\n    'ON_SEARCH_RECORDS': void\r\n    'ON_SHOW_SCREEN': void\r\n    'ON_SCREEN_RECORDING_STATE_CHANGE': void\r\n    'ON_WIDGET_MINIMIZED_CHANGE': void\r\n    'ON_SERVER_ERROR': void\r\n    'ON_SOFTPHONE_STATUS_CHANGE': void\r\n    'ON_AUDIO_DEVICE_CHANGE': void\r\n    'ON_PHONE_CAPABILITIES_CHANGE': void\r\n    'ON_CALL_AUDIO_QUALITY_ALERT': void\r\n    'ON_WEB_SCREEN_POP_CUSTOM': boolean\r\n    'ON_SAVE_ACTIVITY_RECORD': void\r\n    'ON_VALIDATE_ASSOCIATED_RECORDS': RecordsValidationResult\r\n    'ON_REQUEST_RECORD_INFO': InteractionAssociatedObjectData | null\r\n    'ON_REQUEST_RECORD_ON_SCREEN': InteractionAssociatedObjectData | null\r\n}\r\n\r\nconst resultStatus = ['error', 'success'] as const\r\nexport type ResultStatus = typeof resultStatus[number]\r\n\r\nexport const resultErrorCodes = {\r\n    not_enough_privileges: 1,\r\n    not_logged_in: 2,\r\n    invalid_args: 3,\r\n    logged_without_phone: 4,\r\n    banned: 5,\r\n    api_not_answer: 6,\r\n    invalid_request: 7,\r\n    timeout: 8,\r\n    no_chat_in_service: 9,\r\n    empty_number: 10,\r\n    no_service: 11,\r\n    self_call: 12,\r\n    no_interaction: 13,\r\n    api_method_not_implemented: 14,\r\n    not_suitable_state: 15,\r\n    no_disposition: 16,\r\n    object_not_found: 17,\r\n    no_permissions_did_sms: 18,\r\n    no_permissions_did_call: 19,\r\n    no_channel_in_service: 20,\r\n    unknown_error: 99,\r\n} as const\r\nexport type ResultErrorCodes = typeof resultErrorCodes\r\n\r\nexport const serverErrorCodes = {\r\n    forced_logout_by_other_client: 100,\r\n    forced_logout_by_supervisor: 101,\r\n    invalid_request: 102,\r\n    phone_not_registered: 103,\r\n    phone_not_in_dial_plan: 104,\r\n    tenant_disabled: 105,\r\n    destination_user_not_logged: 106,\r\n    user_disabled_or_deleted: 107,\r\n    user_already_logged_in: 108,\r\n    invalid_credentials: 109,\r\n    other_user_logged_with_phone: 110,\r\n    invalid_token: 111,\r\n    logged_users_limit_reached: 112,\r\n    already_logged_in_with_the_same_session: 113,\r\n    not_enough_privileges: 114,\r\n    sip_server_error: 200,\r\n    unknown_error: 300,\r\n} as const\r\nexport type ServerErrorCodes = typeof serverErrorCodes\r\n\r\nexport type ResultError = {\r\n    code: ResultErrorCodes[keyof ResultErrorCodes]\r\n    name: keyof ResultErrorCodes\r\n    message?: string\r\n}\r\n\r\nexport type OperationResult<ReturnType = null> =\r\n    {status: 'success'; data: ReturnType} |\r\n    {status: 'error'; error: ResultError}\r\n\r\nexport type SyncAsyncResult<ReturnType = void> = ReturnType | Promise<ReturnType>\r\n\r\nexport const agentStates = ['supervising', 'ready', 'not_ready', 'busy', 'after_call_work', 'reserved', 'ringing'] as const\r\nexport type AgentState = typeof agentStates[number]\r\n\r\nexport const interactionStates = [\r\n    'unknown',\r\n    'queued',\r\n    'ivr',\r\n    'wrap_up',\r\n    'wrap_up_hold',\r\n    'delivered',\r\n    'delivery_pending',\r\n    'hold',\r\n    'completed',\r\n] as const\r\nexport type InteractionState = typeof interactionStates[number]\r\n\r\nexport const interactionTypes = ['voice', 'chat', 'email'] as const\r\nexport type InteractionType = typeof interactionTypes[number]\r\n\r\nexport const chatChannelTypes = [\r\n    'telegram',\r\n    'line',\r\n    'facebook',\r\n    'web',\r\n    'nexmo',\r\n    'sms',\r\n    'viber',\r\n    'twitter',\r\n    'wechat',\r\n    'whatsapp',\r\n] as const\r\nexport type ChatChannelType = typeof chatChannelTypes[number]\r\n\r\nexport const callDirections = ['inbound', 'outbound'] as const\r\nexport type CallDirection = typeof callDirections[number]\r\n\r\nexport const phoneDevices = [\r\n    'phone_type_browser',\r\n    'phone_type_external',\r\n    'phone_type_hard_custom',\r\n    'phone_type_hard_default',\r\n    'phone_type_nailed',\r\n    'phone_type_none',\r\n    'phone_type_soft_secure',\r\n    'phone_type_microsoft_teams',\r\n    'phone_type_soft_unsecure',\r\n] as const\r\nexport type PhoneDevice = typeof phoneDevices[number]\r\n\r\nexport const dispositionTypes = [\r\n    'SUCCESS',\r\n    'FAILURE',\r\n    'CONTINUE',\r\n    'SPAM',\r\n    'DO_NOT_CALL',\r\n] as const\r\nexport type DispositionType = typeof dispositionTypes[number]\r\n\r\nexport type UserState = AgentState | 'offline'\r\n\r\nexport const chatPartyTypes = ['internal', 'external'] as const\r\nexport type ChatPartyType = typeof chatPartyTypes[number]\r\n\r\nexport type LoginStateData = {\r\n    isLoggedIn: boolean\r\n    agentId?: string\r\n    username?: string\r\n    sessionId?: string\r\n}\r\n\r\nexport type AgentStateData = {\r\n    state: AgentState\r\n    reservedForIncomingInteraction: boolean\r\n    notReadyReason?: string\r\n}\r\n\r\nexport type ServiceData = {\r\n    id: string\r\n    name: string\r\n    useDispositions: boolean\r\n    requireDisposition: boolean\r\n}\r\n\r\nexport type DispositionTarget = {\r\n    service?: string\r\n    interactionId?: string\r\n}\r\n\r\nexport type DispositionData = {\r\n    id: string\r\n    code: string\r\n    name: string\r\n    type: DispositionType\r\n}\r\n\r\nexport type IntegrationConfig = any\r\n\r\nexport type InteractionAssociatedObjectData = {\r\n    id: string\r\n    type: string\r\n    displayName: string\r\n    displayType: string\r\n    customFields: Record<string, string>\r\n}\r\nexport type InteractionAssociatedObject = {\r\n    source: string\r\n} & InteractionAssociatedObjectData\r\n\r\nexport type InteractionAssociatedObjectsData = {\r\n    list: InteractionAssociatedObject[]\r\n    selected: string[]\r\n}\r\n\r\nexport type AttachedData = Record<string, string>\r\n\r\nexport type InteractionData = {\r\n    interactionId: string\r\n    globalInteractionId?: string\r\n    state: InteractionState\r\n    type: InteractionType\r\n    callParties: CallParty[]\r\n    callMuted: boolean\r\n    callRecording: boolean\r\n    chatParties: ChatParty[]\r\n    attachedData: AttachedData\r\n    phoneNumber?: string\r\n    email?: string\r\n    callDirection?: CallDirection\r\n    startTime?: number\r\n    endTime?: number\r\n    duration?: number\r\n    description?: string\r\n    disposition?: string\r\n    service?: string\r\n    playbackUrl?: string\r\n    recordingUrl?: string\r\n    DNIS?: string\r\n    ANI?: string\r\n    origination?: InteractionOrigination\r\n\r\n    /** @deprecated */\r\n    subject: string\r\n    /** @deprecated */\r\n    associatedObjects: InteractionAssociatedObjectsData\r\n}\r\n\r\nexport type InteractionActivityData = {\r\n    interactionId: string\r\n    globalInteractionId?: string\r\n    state: InteractionState\r\n    type: InteractionType\r\n    associatedObjects: InteractionAssociatedObjectsData\r\n    attachedData: AttachedData\r\n    phoneNumber?: string\r\n    email?: string\r\n    callDirection?: CallDirection\r\n    startTime?: number\r\n    endTime?: number\r\n    duration?: number\r\n    description?: string\r\n    disposition?: string\r\n    service?: string\r\n    playbackUrl?: string\r\n    recordingUrl?: string\r\n    DNIS?: string\r\n    ANI?: string\r\n    origination?: InteractionOrigination\r\n\r\n    /** @deprecated */\r\n    subject: string\r\n    /** @deprecated */\r\n    callParties: CallParty[]\r\n    /** @deprecated */\r\n    callMuted: boolean\r\n    /** @deprecated */\r\n    callRecording: boolean\r\n    /** @deprecated */\r\n    chatParties: ChatParty[]\r\n}\r\n\r\nexport type InteractionScreen = Record<string, string | number | boolean | null | undefined>\r\n\r\nexport type CustomTransferData = Record<string, string | number | boolean | undefined | null>\r\n\r\nexport type ExternalKBArticleData = {\r\n    id: string\r\n    title: string\r\n    keywords: string\r\n    answer: string\r\n    notes: string\r\n    language: string\r\n    createdByUser: string\r\n    lastEditedByUser: string\r\n    customFields: string[]\r\n}\r\nexport type ExternalKBArticle = ExternalKBArticleData & {source: string}\r\n\r\nexport type ExternalKBArticleItem = {\r\n    id: string\r\n    type: 'article'\r\n    title: string\r\n    text: string\r\n}\r\nexport type ExternalKBFolderItem = {\r\n    id: string\r\n    type: 'folder'\r\n    title: string\r\n}\r\n\r\nexport type ExternalKBSearchResultData = ExternalKBArticleItem\r\nexport type ExternalKBSearchResult = ExternalKBSearchResultData & {source: string}\r\n\r\nexport type ExternalKBItemData = ExternalKBArticleItem | ExternalKBFolderItem\r\nexport type ExternalKBItem = ExternalKBItemData & {source: string}\r\n\r\nexport type KBFolderOptions = {\r\n    language?: string\r\n    folderId?: string\r\n}\r\n\r\nexport type SearchRecordsQuery = {\r\n    text: string\r\n    types: string[]\r\n}\r\n\r\nexport type RescheduleData = {\r\n    numberToDial: string\r\n    fromTime: string\r\n    untilTime: string\r\n    timezoneCode?: string\r\n}\r\n\r\nexport type PhoneDeviceData = {\r\n    type: PhoneDevice\r\n    phone?: string\r\n}\r\n\r\nexport type Team = {\r\n    id: string\r\n    displayName: string\r\n    isSupervised: boolean\r\n    usersCount?: number\r\n}\r\n\r\nexport type User = {\r\n    id: string\r\n    teamId: string\r\n    firstName: string\r\n    lastName: string\r\n    phone: string\r\n    state: UserState\r\n}\r\n\r\nexport type CallParty = {\r\n    id: string\r\n    name: string\r\n    phone: string\r\n    userId?: string\r\n}\r\n\r\nexport type ChatParty = {\r\n    id: string\r\n    type: ChatPartyType\r\n    name: string\r\n    userId?: string\r\n    contactId?: string\r\n    email?: string\r\n    phone?: string\r\n}\r\n\r\nexport type ScreenRecordingState = {\r\n    allowed: boolean\r\n    active: boolean\r\n    muted: boolean\r\n}\r\n\r\nexport type ServerErrorData = {\r\n    code: ServerErrorCodes[keyof ServerErrorCodes]\r\n    name: keyof ServerErrorCodes\r\n    timestamp: number // Date.now()\r\n    message?: string\r\n}\r\n\r\nexport type LoginData = {\r\n    username: string\r\n    password: string\r\n    tenant?: string\r\n}\r\n\r\nexport type PhoneCapabilities = {\r\n    canDial: boolean\r\n    canAnswer: boolean\r\n    canHold: boolean\r\n    canRetrieve: boolean\r\n}\r\n\r\nexport type DIDNumber = {\r\n    id: string\r\n    number: string\r\n    isSMS: boolean\r\n    isVoice: boolean\r\n}\r\n\r\nexport type WebScreenPopSecondaryUrl = {\r\n    label?: string\r\n    url?: string\r\n}\r\n\r\nexport type WebScreenPop = {\r\n    action: 'OPEN_WEB_PAGE' | 'DISPLAY_TEXT'\r\n    url: string\r\n    content: string\r\n    label: string\r\n    popUponAnswer: boolean\r\n    keepPopupOpenAfterFinish: boolean\r\n    popup: boolean\r\n    secondaryUrls?: {\r\n        [key: number]: WebScreenPopSecondaryUrl\r\n    }\r\n}\r\n\r\nexport const interactionOriginations = [\r\n    'dialpad',\r\n    'dialpad-search',\r\n    'directory',\r\n    'recent',\r\n    'favorites',\r\n    'workitem',\r\n    'interaction',\r\n    'contact-profile',\r\n    'help',\r\n    'conference',\r\n    'auto',\r\n    'integration-api',\r\n    'chat-center',\r\n    'topbar',\r\n] as const\r\nexport type InteractionOrigination = typeof interactionOriginations[number]\r\n\r\nexport type InteractionsState = {\r\n    activeInteractionId: string | null\r\n    interactions: InteractionData[]\r\n}\r\n\r\nexport type OpenRecordOptions = {\r\n    inNewTab: boolean\r\n    source: 'user' | 'scenario'\r\n}\r\n\r\nexport const phoneTypes = ['mobile', 'business', 'home', 'fax', 'other'] as const\r\ntype PhoneType = typeof phoneTypes[number]\r\n\r\nexport type PhoneData = {\r\n    number: string\r\n    type: PhoneType\r\n    displayType?: string\r\n}\r\n\r\nexport type DialCandidate = {\r\n    id: string\r\n    displayName: string\r\n    phones: PhoneData[]\r\n    associatedObjects: InteractionAssociatedObjectData[]\r\n    email?: string\r\n}\r\n\r\nexport type RecordsValidationResult = {\r\n    valid: boolean\r\n    message?: string\r\n}\r\n\r\nexport type RecordInfoRequest = {\r\n    id: string\r\n    type: string\r\n}\r\n\r\nexport type InitialObjects = InteractionAssociatedObjectData | InteractionAssociatedObjectData[]\r\n\r\n\r\nexport type InitiateResult = {\r\n    id: string | null\r\n    error?: string\r\n}\r\n\r\nexport type OnLoginHandler = (loginState: LoginStateData) => SyncAsyncResult\r\nexport type OnLogoutHandler = () => SyncAsyncResult\r\nexport type OnNewInteractionHandler = (newInteraction: InteractionData) => SyncAsyncResult\r\nexport type OnInteractionRemovedHandler = (interaction: InteractionData) => SyncAsyncResult\r\nexport type OnInteractionStateChangeHandler = (interaction: InteractionData) => SyncAsyncResult\r\nexport type OnActiveInteractionSwitchHandler = (activatedInteractionId: string | null) => SyncAsyncResult\r\nexport type OnAgentStateChangeHandler = (state: AgentState, notReadyReason?: string) => SyncAsyncResult\r\nexport type OnRequestTransferDataHandler = (interactionId: string) => SyncAsyncResult<CustomTransferData>\r\nexport type OnLoadTransferDataHandler = (interactionId: string, data: CustomTransferData) => SyncAsyncResult\r\nexport type OnWidgetMinimizedChangeHandler = (widgetMinimized: boolean) => SyncAsyncResult\r\nexport type OnGetKnowledgeBaseFolderHandler = (options: KBFolderOptions) => SyncAsyncResult<ExternalKBItemData[]>\r\nexport type OnSearchKnowledgeBaseHandler = (query: string, language?: string, folderId?: string) => SyncAsyncResult<ExternalKBSearchResultData[]>\r\nexport type OnGetKnowledgeBaseArticleHandler = (articleId: string) => SyncAsyncResult<ExternalKBArticleData | null>\r\nexport type OnOpenRecordHandler = (record: InteractionAssociatedObjectData, interactionId?: string, options?: OpenRecordOptions) => SyncAsyncResult\r\nexport type OnSearchRecordsHandler = (search: SearchRecordsQuery, interactionId?: string, inNewTab?: boolean) => SyncAsyncResult\r\nexport type OnShowScreenHandler = (screen: InteractionScreen, interactionId?: string) => SyncAsyncResult\r\nexport type OnScreenRecordingStateChangeHandler = (screenRecordingState: ScreenRecordingState) => SyncAsyncResult\r\nexport type OnServerErrorHandler = (error: ServerErrorData) => SyncAsyncResult\r\nexport type OnSoftphoneStatusChangeHandler = (ready: boolean, error?: string) => SyncAsyncResult\r\nexport type OnAudioDeviceChangeHandler = (inputDevice?: string, outputDevice?: string) => SyncAsyncResult\r\nexport type OnPhoneCapabilitiesChangeHandler = (caps: PhoneCapabilities) => SyncAsyncResult\r\nexport type OnCallAudioQualityAlertHandler = (callId: string, alert: boolean) => SyncAsyncResult\r\nexport type OnWebScreenPopCustomHandler = (interactionId: string, webScreenPop: WebScreenPop) => SyncAsyncResult<boolean>\r\nexport type OnSaveActivityRecordHandler = (activity: InteractionActivityData) => SyncAsyncResult\r\nexport type OnValidateAssociatedRecordsHandler = (interactionId: string, records: InteractionAssociatedObjectsData) => SyncAsyncResult<RecordsValidationResult>\r\nexport type OnRequestRecordInfoHandler = (payload: RecordInfoRequest) => SyncAsyncResult<InteractionAssociatedObjectData | null>\r\nexport type OnRequestRecordOnScreenHandler = () => SyncAsyncResult<InteractionAssociatedObjectData | null>\r\n\r\nexport type MessageLogger = (message: string, data: any) => void\r\n\r\n// TODO: resolve type issues\r\nexport type InitOptions = {\r\n    integrationKey?: string\r\n    adcFrame?: any // HTMLIFrameElement\r\n    mountRoot?: any // HTMLElement\r\n    standalone?: boolean\r\n    disableNewInteractionPopup?: boolean\r\n}\r\n\r\nexport declare class AgentDesktopClientAPI {\r\n    adcFrame: any // HTMLIFrameElement | null\r\n\r\n    constructor(options?: InitOptions)\r\n\r\n    injectMessageLogger(callback: MessageLogger): void\r\n\r\n    getLoginState(): Promise<OperationResult<LoginStateData>>\r\n    login(loginData: LoginData, force?: boolean): Promise<OperationResult>\r\n    logout(): Promise<OperationResult>\r\n    getAgentState(): Promise<OperationResult<AgentStateData>>\r\n    setAgentState(state: AgentState, notReadyReason?: string): Promise<OperationResult>\r\n    acceptInteraction(interactionId?: string): Promise<OperationResult>\r\n    rejectInteraction(interactionId?: string): Promise<OperationResult>\r\n    startCall(phonenumber: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    startChat(channel: ChatChannelType, address: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    startEmail(email: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    sendDtmf(dtmf: string, interactionId?: string): Promise<OperationResult>\r\n    consultCall(phone: string): Promise<OperationResult>\r\n    blindTransfer(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult>\r\n    transfer(customTransferData?: CustomTransferData): Promise<OperationResult>\r\n    leaveInteraction(interactionId?: string): Promise<OperationResult>\r\n    completeInteraction(interactionId?: string): Promise<OperationResult>\r\n    leaveAndCompleteInteraction(disposition?: string, note?: string, interactionId?: string): Promise<OperationResult>\r\n    switchActiveInteraction(interactionId: string): Promise<OperationResult>\r\n    inviteToCallConference(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult>\r\n    removeFromCallConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    destroyCallConference(interactionId?: string): Promise<OperationResult>\r\n    mergeAllCallsIntoConference(customTransferData?: CustomTransferData): Promise<OperationResult>\r\n    inviteToChatConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    removeFromChatConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    getTeams(): Promise<OperationResult<Team[]>>\r\n    getTeamMembers(teamId: string): Promise<OperationResult<User[]>>\r\n    getServicesList(): Promise<OperationResult<ServiceData[]>>\r\n    getService(): Promise<OperationResult<ServiceData | null>>\r\n    setService(service: string | null): Promise<OperationResult>\r\n    getDIDNumbersList(): Promise<OperationResult<DIDNumber[]>>\r\n    getDIDNumber(): Promise<OperationResult<DIDNumber | null>>\r\n    setDIDNumber(did: string | null): Promise<OperationResult>\r\n    getDispositionsList(target: DispositionTarget): Promise<OperationResult<DispositionData[]>>\r\n    setDisposition(disposition: string, interactionId?: string): Promise<OperationResult>\r\n    setRescheduleWindow(rescheduleData: RescheduleData, interactionId?: string): Promise<OperationResult>\r\n    addNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    updateNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    replaceNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    getConfig(): Promise<OperationResult<IntegrationConfig>>\r\n    setVariable(key: string, value: string, interactionId?: string): Promise<OperationResult>\r\n    getVariables(keys: string[], interactionId?: string): Promise<OperationResult<Record<string, string>>>\r\n    addInteractionAssociatedObject(object: InteractionAssociatedObjectData, interactionId?: string): Promise<OperationResult>\r\n    setInteractionActiveScreen(screenData: InteractionScreen, interactionId?: string): Promise<OperationResult>\r\n    getPhoneDevicesList(): Promise<OperationResult<PhoneDevice[]>>\r\n    getPhoneDevice(): Promise<OperationResult<PhoneDeviceData>>\r\n    setPhoneDevice(phoneDevice: PhoneDeviceData): Promise<OperationResult>\r\n    setCallHold(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setCallRecording(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setCallMute(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setScreenRecordingMute(state: boolean): Promise<OperationResult>\r\n    getScreenRecordingState(): Promise<OperationResult<ScreenRecordingState>>\r\n    setWidgetMinimized(state: boolean): Promise<OperationResult>\r\n    sendChatMessage(message: string, interactionId?: string): Promise<OperationResult>\r\n    suggestChatMessage(message: string, allowOverwrite?: boolean, interactionId?: string): Promise<OperationResult>\r\n    getAgentNotReadyReasons(): Promise<OperationResult<string[]>>\r\n    activatePage(): Promise<OperationResult>\r\n    getInteractionsState(): Promise<OperationResult<InteractionsState>>\r\n    setCallRecordingMute(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setDialCandidates(candidates: DialCandidate[]): Promise<OperationResult>\r\n\r\n    on(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    on(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    on(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    on(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    on(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    on(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    on(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    on(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    on(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    on(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    on(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    on(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    on(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    on(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    on(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    on(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    on(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    on(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    on(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    on(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    on(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    on(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    on(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n\r\n    remove(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    remove(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    remove(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    remove(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    remove(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    remove(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    remove(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    remove(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    remove(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    remove(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    remove(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    remove(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    remove(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    remove(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    remove(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    remove(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    remove(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    remove(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    remove(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    remove(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    remove(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    remove(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    remove(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n}\r\n\r\ninterface AgentDesktopClientAPIClassType {\r\n    prototype: AgentDesktopClientAPI\r\n    new (options?: InitOptions): AgentDesktopClientAPI\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        brightpattern: {\r\n            AdApi: AgentDesktopClientAPIClassType\r\n        }\r\n    }\r\n}\r\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {utils} from '../../utils'\r\n\r\nconst CRM_DOMAIN_PARAMETER_NAME = 'crmDomain'\r\n\r\nconst url = window.location.href,\r\n    params = utils.extractURLParams(url)\r\n\r\nlet crmDomain = params[CRM_DOMAIN_PARAMETER_NAME]\r\nif (!crmDomain.startsWith('https://')) {\r\n    crmDomain = 'https://' + crmDomain\r\n}\r\n\r\nexport const loadCrmApi = new Promise((resolve, reject) => {\r\n    if (!crmDomain) {\r\n        reject('Missing required URL parameter \\'crmDomain\\'')\r\n    }\r\n    const script = document.createElement('script')\r\n    document.head.insertAdjacentElement('beforeend', script)\r\n    script.addEventListener('load', resolve)\r\n    script.addEventListener('error', reject)\r\n    script.dataset.crmurl = crmDomain\r\n    script.dataset.cifid = 'CIFMainLibrary'\r\n    script.type = 'text/javascript'\r\n    script.src = crmDomain + '/webresources/Widget/msdyn_ciLibrary.js'\r\n})\r\n","import {\r\n    chatChannelTypes,\r\n    LoginStateData,\r\n    DialCandidate,\r\n    ExternalKBArticleData,\r\n    ExternalKBSearchResultData,\r\n    InteractionActivityData,\r\n    InteractionAssociatedObjectData,\r\n    InteractionType,\r\n    PhoneData,\r\n    RecordInfoRequest,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport type {\r\n    ClickToActionPayload,\r\n    ClickToCallAction,\r\n    ContactRelationshipsMap,\r\n    CrmActivityHistoryEntry,\r\n    D365EntityMetadata,\r\n    Dyn365RawKBSearchResult,\r\n    Dyn365RawKnowledgeBaseArticle,\r\n    ExpectedParameters,\r\n    OneToManyReference,\r\n    PrimitiveType,\r\n} from './types'\r\nimport {AgentDesktopClientAPIImpl} from '../../adc-client-api'\r\nimport {loadCrmApi} from './loadExternalApi'\r\nimport {utils} from '../../utils'\r\n\r\n\r\nconst integrationKey = 'dynamicscrm'\r\n\r\nconst defaultScreenPopSearchEntityType = 'contact'\r\nconst CONTACT_ENTITY_TYPE = 'contact'\r\nconst CONTACT_ID_ATTRIBUTE = 'contactid'\r\nconst CONTACT_EMAIL_ATTRIBUTE = 'emailaddress1'\r\nconst ONE_TO_MANY_RELATIONSHIP_TYPE = 0\r\nconst REFERENCE = (name: string) => `_${name}_value`\r\n\r\nexport const activityTables: Record<InteractionType, string> = {\r\n    'voice': 'phonecall',\r\n    'chat': 'bpattern_messaging_session',\r\n    'email': 'email',\r\n}\r\n\r\nfunction phoneFields<T extends Record<string, PhoneData['type']>>(value: T): T {\r\n    return value\r\n}\r\n\r\nconst contactPhoneFields = phoneFields({\r\n    'business2': 'business',\r\n    'home2': 'home',\r\n    'mobilephone': 'mobile',\r\n    'telephone1': 'other',\r\n    'telephone2': 'other',\r\n})\r\n\r\nconst transformDyn365KBSearchResults = (searchResults: Dyn365RawKBSearchResult[]): ExternalKBSearchResultData[] => {\r\n    return searchResults\r\n    .filter(item => {\r\n        return !!item.content\r\n    })\r\n    .map(item => ({\r\n        id: item.knowledgearticleid,\r\n        type: 'article',\r\n        title: item.title,\r\n        text: item.content!,\r\n    }))\r\n}\r\n\r\nconst transformDyn365KBArticle = (articleData: Dyn365RawKnowledgeBaseArticle): ExternalKBArticleData | null => {\r\n    if (!articleData.content) {\r\n        return null\r\n    }\r\n    return {\r\n        id: articleData.knowledgearticleid,\r\n        title: articleData.title,\r\n        keywords: articleData.keywords || '',\r\n        answer: articleData.content!,\r\n        notes: articleData.description || '',\r\n        language: articleData.languagelocaleid.code,\r\n        createdByUser: articleData['_createdby_value@OData.Community.Display.V1.FormattedValue'],\r\n        lastEditedByUser: articleData['_modifiedby_value@OData.Community.Display.V1.FormattedValue'],\r\n        customFields: [],\r\n    }\r\n}\r\n\r\nconst entityDisplayName: Record<string, string> = {}\r\n\r\nconst logPrefix = '@ADAPTER'\r\nconst logger = {\r\n    log: (...args: any) => console.log(logPrefix, ...args),\r\n    info: (...args: any) => console.info(logPrefix, ...args),\r\n    warn: (...args: any) => console.warn(logPrefix, ...args),\r\n    error: (...args: any) => console.error(logPrefix, ...args),\r\n}\r\n\r\nexport const registerMSDynIntegration = (): void => {\r\n\r\n    loadCrmApi.then(() => {\r\n\r\n        const cif = window.Microsoft.CIFramework\r\n\r\n        if (!cif) {\r\n            return logger.error('window.Microsoft.CIFramework is undefined. Please, check and fix the adapter configuration and reload this page.')\r\n        }\r\n        const adApi = new AgentDesktopClientAPIImpl({integrationKey})\r\n\r\n        let initialLoginDataLoaded = false\r\n        let initialInteractionDataLoaded = false\r\n        let loginData: LoginStateData | null = null\r\n        let activeInteractionId: string | null = null\r\n        let currentScreenObject: {id: string; type: string} | null = null\r\n        let pendingObject: InteractionAssociatedObjectData | null = null\r\n        const contactRelationships: ContactRelationshipsMap = {}\r\n        let clickToCallAction: ClickToCallAction = 'call'\r\n\r\n        const extractErrorMessage = (err: unknown) => {\r\n            if (typeof err === 'string') {\r\n                try {\r\n                    const errObj = JSON.parse(err)\r\n                    if (errObj && errObj.message) {\r\n                        return errObj.message\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (e) {}\r\n                return err\r\n            } else {\r\n                return (err instanceof Error) ? err.message : `${err}`\r\n            }\r\n        }\r\n\r\n        cif.setMode(1).catch((e: string) => logger.error('cif.setMode error:', extractErrorMessage(e)))\r\n        cif.setWidth(500).catch((e: string) => logger.error('cif.setWidth error:', extractErrorMessage(e)))\r\n\r\n        requestContactRelationships()\r\n        readCIFCustomParameters()\r\n\r\n        adApi.on('ON_LOGIN', async (data) => {\r\n            loginData = data\r\n            await cif.setClickToAct(true)\r\n        })\r\n        adApi.on('ON_LOGOUT', async () => {\r\n            await cif.setClickToAct(false)\r\n        })\r\n\r\n        adApi.getLoginState().then(data => {\r\n            if (data.status === 'success') {\r\n                logger.info('Initial login state:', data.data)\r\n                loginData = data.data\r\n                initialLoginDataLoaded = true\r\n                handlePendingObject()\r\n            } else {\r\n                logger.warn('Unable to get login state:', data.error)\r\n            }\r\n        })\r\n        adApi.getInteractionsState().then(data => {\r\n            if (data.status === 'success') {\r\n                logger.info('Initial interactions state:', data.data)\r\n                activeInteractionId = data.data.activeInteractionId\r\n                initialInteractionDataLoaded = true\r\n                handlePendingObject()\r\n            } else {\r\n                if (data.error.name === 'not_logged_in') {\r\n                    activeInteractionId = null\r\n                    initialInteractionDataLoaded = true\r\n                    handlePendingObject()\r\n                }\r\n                logger.warn('Unable to get interactions state:', data.error)\r\n            }\r\n        })\r\n\r\n        function isInitialDataLoaded() {\r\n            return initialLoginDataLoaded && initialInteractionDataLoaded\r\n        }\r\n\r\n        function handlePendingObject() {\r\n            if (isInitialDataLoaded() && pendingObject) {\r\n                handleOpenedObject(pendingObject)\r\n                pendingObject = null\r\n            }\r\n        }\r\n\r\n        function handleOpenedObject(value: InteractionAssociatedObjectData) {\r\n            currentScreenObject = value\r\n            if (!isInitialDataLoaded()) {\r\n                pendingObject = value\r\n                logger.info('Skip opened object: adapter not initialized')\r\n                return\r\n            }\r\n            if (!loginData?.isLoggedIn) {\r\n                logger.info('Skip opened object: user is not logged in')\r\n                return\r\n            }\r\n            if (!activeInteractionId) {\r\n                logger.info('Skip opened object: no interaction')\r\n                return\r\n            }\r\n            adApi.addInteractionAssociatedObject(value)\r\n        }\r\n\r\n        const screenPopEntity = async (entityId: string, entityName: string) => {\r\n            logger.log('Entity screen pop: ', entityName, ', id: ', entityId)\r\n            try {\r\n                if (currentScreenObject && currentScreenObject.id === entityId && currentScreenObject.type === entityName) {\r\n                    logger.log('Skip screen-pop - the object is already opened')\r\n                    return\r\n                }\r\n                const result = await cif.openForm(JSON.stringify({entityId, entityName}))\r\n                logger.log('cif.openForm result:', result)\r\n                /** There are corner cases when 'navigation' event doesn't fire after object screen pop */\r\n                getObjectDataFromEnv()\r\n            } catch (e: any) {\r\n                logger.error('cif.openForm error:', extractErrorMessage(e))\r\n            }\r\n        }\r\n\r\n        const screenPopSearch = async (searchQuery: string, entityType = defaultScreenPopSearchEntityType) => {\r\n            logger.log('Search screen pop, query:', searchQuery)\r\n            try {\r\n                const result = await cif.renderSearchPage(entityType, searchQuery)\r\n                logger.log('cif.renderSearchPage result:', result)\r\n            } catch (e: any) {\r\n                logger.error('cif.renderSearchPage error:', extractErrorMessage(e))\r\n            }\r\n        }\r\n\r\n        async function requestContactRelationships() {\r\n            const entityMetadataStr = await cif.getEntityMetadata(CONTACT_ENTITY_TYPE)\r\n            const entityMetadata: D365EntityMetadata = JSON.parse(entityMetadataStr)\r\n            Object.values(entityMetadata.OneToManyRelationships)\r\n            .forEach(({\r\n                ReferencedEntity,\r\n                ReferencedAttribute,\r\n                ReferencingEntity,\r\n                ReferencingAttribute,\r\n                RelationshipType,\r\n            }) => {\r\n                if (\r\n                    ReferencedEntity === CONTACT_ENTITY_TYPE &&\r\n                    ReferencedAttribute === CONTACT_ID_ATTRIBUTE &&\r\n                    RelationshipType === ONE_TO_MANY_RELATIONSHIP_TYPE\r\n                ) {\r\n                    if (!contactRelationships[ReferencingEntity]) {\r\n                        contactRelationships[ReferencingEntity] = []\r\n                    }\r\n                    contactRelationships[ReferencingEntity].push(ReferencingAttribute)\r\n                }\r\n            })\r\n            logger.info('contact relationships:', contactRelationships)\r\n        }\r\n\r\n        async function readCIFCustomParameters() {\r\n            const envStr = await cif.getEnvironment()\r\n            const env = JSON.parse(envStr)\r\n            logger.log('Get MS Dynamics environment data:', env)\r\n            const customParams: ExpectedParameters = JSON.parse(env.customParams)\r\n            clickToCallAction = customParams.click_to_call_action ?? 'call'\r\n            logger.log('Click to call action:', clickToCallAction)\r\n        }\r\n\r\n        adApi.on('ON_OPEN_RECORD', record => {\r\n            return screenPopEntity(record.id, record.type)\r\n        })\r\n\r\n        adApi.on('ON_SEARCH_RECORDS', data => {\r\n            return screenPopSearch(data.text, data.types?.length ? data.types[0] : undefined)\r\n        })\r\n\r\n        const createBasicActivityObject = (table: string, interactionData: InteractionActivityData): CrmActivityHistoryEntry => {\r\n            const activityRecord: Partial<Record<string, PrimitiveType>> = {\r\n                'subject': `Bright Pattern ${interactionData.type}`,\r\n                'description': interactionData.description,\r\n                'actualstart': interactionData.startTime ? (new Date(interactionData.startTime)).toUTCString() : undefined,\r\n                'actualend': interactionData.endTime ? (new Date(interactionData.endTime)).toUTCString() : undefined,\r\n                'actualdurationminutes': interactionData.duration ? Math.ceil(interactionData.duration / 60) : 0,\r\n                'bpattern_interaction_id': interactionData.interactionId,\r\n                'bpattern_global_interaction_id': interactionData.globalInteractionId || '',\r\n                'bpattern_agent': loginData ? loginData.username : undefined,\r\n                'bpattern_service': interactionData.service,\r\n                'bpattern_disposition': interactionData.disposition,\r\n                'bpattern_recording_url': interactionData.playbackUrl,\r\n                'bpattern_dnis': interactionData.DNIS,\r\n                'bpattern_ani': interactionData.ANI,\r\n            }\r\n            if (table === activityTables.voice) {\r\n                activityRecord['phonenumber'] = interactionData.phoneNumber\r\n                activityRecord['directioncode'] = interactionData.callDirection && (\r\n                    interactionData.callDirection === 'outbound' ? 'true' : 'false'\r\n                )\r\n            }\r\n            return activityRecord\r\n        }\r\n\r\n        const saveActivityForEntity = async (interaction: InteractionActivityData, regardingEntity: InteractionAssociatedObjectData) => {\r\n\r\n            const metadataStr = await cif.getEntityMetadata(regardingEntity.type)\r\n            const metadata = JSON.parse(metadataStr)\r\n            const tableName = activityTables[interaction.type]\r\n            const additionalActivityData: CrmActivityHistoryEntry = {}\r\n\r\n            logger.log(`${regardingEntity.type} metadata:`, metadata)\r\n\r\n            entityDisplayName[regardingEntity.type] = metadata.DisplayName\r\n\r\n            let phoneCallRef: {ReferencingEntityNavigationPropertyName: string} | null = null\r\n            const entitySetName = metadata.EntitySetName\r\n            const entityLogicalName = metadata.LogicalName\r\n            const oneToManyRel = metadata.OneToManyRelationships\r\n\r\n            if (oneToManyRel && oneToManyRel._collection) {\r\n                try {\r\n                    phoneCallRef = oneToManyRel._collection.find((item: OneToManyReference) => {\r\n                        const entity = item.ReferencingEntity\r\n                        const attribute = item.ReferencingAttribute\r\n                        return entity === tableName && attribute === 'regardingobjectid'\r\n                    })\r\n\r\n                } catch (e) {\r\n                    logger.error('Error in the linking of activity record with regarding object:', e)\r\n                }\r\n            }\r\n            if (entitySetName && phoneCallRef) {\r\n                const name = phoneCallRef.ReferencingEntityNavigationPropertyName\r\n                const key = `${name}@odata.bind`                                                     // like regardingobjectid_contact_phonecall@odata.bind\r\n                const value = `/${entitySetName}(${regardingEntity.id})`                              // like /contacts(2ede9029-985c-e911-a980-000d3a1cabce)\r\n                additionalActivityData[key] = value\r\n\r\n            } else if (entityLogicalName) {\r\n                const key = `regardingobjectid_${entityLogicalName}_${tableName}@odata.bind`       // like regardingobjectid_contact_phonecall@odata.bind\r\n                const value = `/${entitySetName}(${regardingEntity.id})`                              // like /contacts(2ede9029-985c-e911-a980-000d3a1cabce)\r\n                additionalActivityData[key] = value\r\n            } else {\r\n                logger.warn('Activity saving process: \"regardingobjectid\" reference is not found')\r\n            }\r\n\r\n            const activity = {\r\n                ...createBasicActivityObject(tableName, interaction),\r\n                ...additionalActivityData,\r\n            }\r\n            logger.log('Activity record:', activity)\r\n\r\n            return cif.createRecord(tableName, JSON.stringify(activity))\r\n        }\r\n\r\n        const saveActivity = async (interaction: InteractionActivityData) => {\r\n            logger.log('Save activity record:', interaction)\r\n\r\n            const selectedObjectId = interaction.associatedObjects.selected[0] ?? undefined\r\n            const selectedObject = selectedObjectId &&\r\n                interaction.associatedObjects.list.find(obj => obj.id === selectedObjectId)\r\n            logger.log('Regarding object:', selectedObject)\r\n\r\n            try {\r\n                if (selectedObject) {\r\n                    await saveActivityForEntity(interaction, selectedObject)\r\n                } else {\r\n                    const tableName = activityTables[interaction.type]\r\n                    const activity = createBasicActivityObject(tableName, interaction)\r\n\r\n                    logger.log('Activity is without regarding object:', activity)\r\n                    cif.createRecord(tableName, JSON.stringify(activity))\r\n                }\r\n\r\n            } catch (e) {\r\n                logger.warn('Error while saving activity record with regarding object:', e)\r\n                const tableName = activityTables[interaction.type]\r\n                cif.createRecord(\r\n                    tableName,\r\n                    JSON.stringify(createBasicActivityObject(tableName, interaction)),\r\n                )\r\n            }\r\n        }\r\n\r\n        adApi.on('ON_INTERACTION_REMOVED', interaction => {\r\n            if (interaction.interactionId === activeInteractionId) {\r\n                activeInteractionId = null\r\n            }\r\n        })\r\n\r\n        /** Disable client-side activity history, it is moved to server Workflow\r\n        adApi.on('ON_SAVE_ACTIVITY_RECORD', interaction => {\r\n            return saveActivity(interaction)\r\n        })\r\n        */\r\n\r\n        adApi.on('ON_ACTIVE_INTERACTION_SWITCHED', interactionId => {\r\n            activeInteractionId = interactionId\r\n        })\r\n\r\n        async function getEntityDisplayData(\r\n            entityId: string,\r\n            entityType: string,\r\n            entityData: any,\r\n        ): Promise<{displayName: string; displayType: string}> {\r\n            const displayId =\r\n                entityData.title ||\r\n                entityData.fullname ||\r\n                entityData.name ||\r\n                entityData.subject ||\r\n                entityId\r\n\r\n            if (!entityDisplayName[entityType]) {\r\n                const entityMetadataStr = await cif.getEntityMetadata(entityType)\r\n                const entityMetadata = JSON.parse(entityMetadataStr)\r\n                entityDisplayName[entityType] = entityMetadata.DisplayName\r\n            }\r\n            const displayType = entityDisplayName[entityType]\r\n            const displayName = `${displayType}: ${displayId}`\r\n            return {displayName, displayType}\r\n        }\r\n\r\n        async function getEntityData(\r\n            id: string,\r\n            type: string,\r\n        ): Promise<{associatedObject: InteractionAssociatedObjectData | null; entityData: any}> {\r\n            const entityDataStr = await cif.retrieveRecord(type, id)\r\n            const entityData = JSON.parse(entityDataStr)\r\n            const {displayName, displayType} = await getEntityDisplayData(id, type, entityData)\r\n            const associatedObject = {\r\n                id,\r\n                type,\r\n                displayName,\r\n                displayType,\r\n                customFields: {},\r\n            }\r\n            return {associatedObject, entityData}\r\n        }\r\n\r\n        adApi.on('ON_REQUEST_RECORD_INFO', async ({id, type}: RecordInfoRequest) => {\r\n            try {\r\n                const {associatedObject} = await getEntityData(id, type)\r\n                return associatedObject\r\n            } catch {\r\n                return null\r\n            }\r\n        })\r\n\r\n        adApi.on('ON_REQUEST_RECORD_ON_SCREEN', async () => {\r\n            if (!currentScreenObject) {\r\n                return null\r\n            }\r\n            try {\r\n                const {associatedObject} = await getEntityData(currentScreenObject.id, currentScreenObject.type)\r\n                return associatedObject\r\n            } catch {\r\n                return null\r\n            }\r\n        })\r\n\r\n        async function getObjectDataFromEnv() {\r\n            const envStr = await cif.getEnvironment()\r\n            const env = JSON.parse(envStr)\r\n            logger.log('Getting environment:', env)\r\n\r\n            if (env.dashboardType || !(env?.pagetype === 'entityrecord' && env.id && env.etn)) {\r\n                adApi.setDialCandidates([])\r\n                return\r\n            }\r\n            adApi.setInteractionActiveScreen({\r\n                recordId: env.id,\r\n                recordType: env.etn,\r\n            })\r\n            const {associatedObject, entityData} = await getEntityData(env.id, env.etn)\r\n            logger.log('Found entity on the screen:', entityData)\r\n            if (!associatedObject) {\r\n                return\r\n            }\r\n            handleOpenedObject(associatedObject)\r\n            dispatchDialCandidates(associatedObject, entityData)\r\n        }\r\n\r\n        async function extractDialCandidateFromContact(\r\n            contact: any,\r\n            associatedObjects: InteractionAssociatedObjectData[],\r\n        ): Promise<DialCandidate | null> {\r\n\r\n            const email = contact[CONTACT_EMAIL_ATTRIBUTE] ?? undefined\r\n            const phones = (Object.keys(contactPhoneFields) as unknown as (keyof typeof contactPhoneFields)[])\r\n            .reduce<PhoneData[]>((arr, phoneField) => {\r\n                if (contact[phoneField]) {\r\n                    arr.push({\r\n                        type: contactPhoneFields[phoneField],\r\n                        number: contact[phoneField],\r\n                    })\r\n                }\r\n                return arr\r\n            }, [])\r\n            if (!email && !phones.length) {\r\n                return null\r\n            }\r\n            const {displayName} = await getEntityDisplayData(\r\n                contact[CONTACT_ID_ATTRIBUTE],\r\n                CONTACT_ENTITY_TYPE,\r\n                contact,\r\n            )\r\n            return {\r\n                id: contact[CONTACT_ID_ATTRIBUTE],\r\n                displayName,\r\n                email,\r\n                phones,\r\n                associatedObjects,\r\n            }\r\n        }\r\n\r\n        async function dispatchDialCandidates(entity: InteractionAssociatedObjectData, data: any) {\r\n            const dialCandidates: DialCandidate[] = []\r\n            const associatedObjects: InteractionAssociatedObjectData[] = [entity]\r\n\r\n            if (entity.type === CONTACT_ENTITY_TYPE) {\r\n                const candidate = await extractDialCandidateFromContact(data, associatedObjects)\r\n                if (candidate) {\r\n                    dialCandidates.push(candidate)\r\n                }\r\n            } else if (contactRelationships[entity.type]?.length) {\r\n                for (const refField of contactRelationships[entity.type]) {\r\n                    const refContactId = data[REFERENCE(refField)]\r\n                    if (!refContactId) {\r\n                        continue\r\n                    }\r\n                    const contactDataStr = await cif.retrieveRecord(CONTACT_ENTITY_TYPE, refContactId)\r\n                    const contactData = JSON.parse(contactDataStr)\r\n                    const candidate = await extractDialCandidateFromContact(contactData, [...associatedObjects])\r\n                    if (candidate) {\r\n                        dialCandidates.push(candidate)\r\n                    }\r\n                }\r\n            }\r\n            adApi.setDialCandidates(dialCandidates)\r\n        }\r\n\r\n        cif.addHandler('onpagenavigate', async (dataStr: string) => {\r\n            const data = JSON.parse(dataStr)\r\n            logger.log('Navigation detected:', data)\r\n            getObjectDataFromEnv()\r\n            return Promise.resolve()\r\n        })\r\n\r\n        const sendClickToAction = (data: ClickToActionPayload, object?: InteractionAssociatedObjectData) => {\r\n            const associatedObjects = object ? [object]: []\r\n\r\n            for (const channel of chatChannelTypes) {\r\n                if (data.value.startsWith(`${channel}:`)) {\r\n                    return adApi.startChat(channel, data.value.substring(channel.length + 1))\r\n                }\r\n            }\r\n            if (utils.startsWithAny(data.name, ['phone_', 'new_phone_', 'bpattern_phone_'])) {\r\n                return adApi.startCall(data.value, associatedObjects)\r\n            } else {\r\n                for (const channel of chatChannelTypes) {\r\n                    const prefixes = [`${channel}_`, `new_${channel}_`, `bpattern_${channel}_`]\r\n                    if (utils.startsWithAny(data.name, prefixes)) {\r\n                        return adApi.startChat(channel, data.value, associatedObjects)\r\n                    }\r\n                }\r\n            }\r\n            if (data.format === 'Email') {\r\n                return adApi.startEmail(data.value, associatedObjects)\r\n            }\r\n            if (data.format === 'SMS' || clickToCallAction === 'chat') {\r\n                return adApi.startChat('sms', data.value, associatedObjects)\r\n            }\r\n            return adApi.startCall(data.value, associatedObjects)\r\n        }\r\n\r\n        cif.addHandler('onclicktoact', async (dataStr: string) => {\r\n            logger.log('Click to act handler')\r\n\r\n            if (!loginData) {\r\n                logger.warn('Adapter is not logged in')\r\n                return Promise.resolve()\r\n            }\r\n\r\n            const data: ClickToActionPayload = JSON.parse(dataStr)\r\n            logger.log('Click to act data:', data)\r\n\r\n            let entityId = data.entityId\r\n            if (entityId.length && entityId[0] === '{') {\r\n                entityId = entityId.slice(1)\r\n            }\r\n            if (entityId.length && entityId[entityId.length - 1] === '}') {\r\n                entityId = entityId.slice(0, entityId.length - 1)\r\n            }\r\n            try {\r\n                const {associatedObject, entityData} = await getEntityData(entityId, data.entityLogicalName)\r\n                logger.log('Clicked entity:', entityData)\r\n                if (!associatedObject) {\r\n                    return\r\n                }\r\n                sendClickToAction(data, associatedObject)\r\n            } catch (err) {\r\n                logger.error('Click to act handler error:', err)\r\n            }\r\n            return Promise.resolve()\r\n        })\r\n\r\n        adApi.on('ON_NEW_INTERACTION', async item => {\r\n\r\n            cif.getMode().then((mode: number) => {\r\n                if (mode === 0) {\r\n                    cif.setMode(1).catch((e: string) => logger.error('cif.setMode error', extractErrorMessage(e)))\r\n                }\r\n            }).catch((e: string) => logger.error('cif.getMode error:', extractErrorMessage(e)))\r\n\r\n            if (item.origination === 'dialpad') {\r\n                logger.log('Interaction initiated from Dialpad:', item.phoneNumber)\r\n                try {\r\n                    await cif.searchAndOpenRecords(\r\n                        defaultScreenPopSearchEntityType,\r\n                        // eslint-disable-next-line max-len\r\n                        '?$select=contactid&' +\r\n                        `$filter=mobilephone eq '${item.phoneNumber}'` +\r\n                            ` or telephone1 eq '${item.phoneNumber}'` +\r\n                            ` or telephone2 eq '${item.phoneNumber}'` +\r\n                            ` or telephone3 eq '${item.phoneNumber}'`,\r\n                        false,\r\n                    )\r\n                } catch (e: any) {\r\n                    logger.error('Dialpad interaction: cif.searchAndOpenRecords error:', extractErrorMessage(e))\r\n                }\r\n            }\r\n            getObjectDataFromEnv()\r\n        })\r\n\r\n        adApi.on('ON_GET_KNOWLEDGE_BASE_FOLDER', async ({language}) => {\r\n            try {\r\n                const dataStr = await cif.searchAndOpenRecords(\r\n                    'knowledgearticle',\r\n                    '?$select=' +\r\n                    'content' +\r\n                    ',title' +\r\n                    '&$expand=languagelocaleid($select=code)' +\r\n                    '&$filter=statecode eq 3' +\r\n                    ((language === undefined || language === 'none')\r\n                        ? ''\r\n                        : ` and startswith(languagelocaleid/code, '${language}')`\r\n                    ),\r\n                    true,\r\n                )\r\n                const rawData = Object.values(JSON.parse(dataStr)) as Dyn365RawKBSearchResult[]\r\n                logger.log('KB folder content:', rawData)\r\n                return transformDyn365KBSearchResults(rawData)\r\n            } catch (e) {\r\n                logger.error('KB Folder: cif.searchAndOpenRecords error:', extractErrorMessage(e))\r\n            }\r\n            return []\r\n        })\r\n\r\n        adApi.on('ON_SEARCH_KNOWLEDGE_BASE', async (query, language) => {\r\n            try {\r\n                const dataStr = await cif.searchAndOpenRecords(\r\n                    'knowledgearticle',\r\n                    '?$select=' +\r\n                        'content' +\r\n                        ',title' +\r\n                    '&$expand=languagelocaleid($select=code)' +\r\n                    '&$filter=statecode eq 3 ' +\r\n                        ((language === undefined || language === 'none')\r\n                            ? ''\r\n                            : `and startswith(languagelocaleid/code, '${language}') `\r\n                        ) +\r\n                        'and (' +\r\n                            `contains(content, '${query}') or ` +\r\n                            `contains(keywords, '${query}') or ` +\r\n                            `contains(description, '${query}') or ` +\r\n                            `contains(title, '${query}')` +\r\n                        ')',\r\n                    true,\r\n                )\r\n                const rawData = Object.values(JSON.parse(dataStr)) as Dyn365RawKBSearchResult[]\r\n                logger.log('KB search result:', rawData)\r\n                return transformDyn365KBSearchResults(rawData)\r\n            } catch (e: any) {\r\n                logger.error('KB Search: cif.searchAndOpenRecords error:', extractErrorMessage(e))\r\n            }\r\n            return []\r\n        })\r\n\r\n        adApi.on('ON_GET_KNOWLEDGE_BASE_ARTICLE', async (articleId: string) => {\r\n            try {\r\n                const dataStr = await cif.searchAndOpenRecords(\r\n                    'knowledgearticle',\r\n                    '?$select=' +\r\n                        'articlepublicnumber' +\r\n                        ',createdon' +\r\n                        ',content' +\r\n                        ',description' +\r\n                        ',isinternal' +\r\n                        ',keywords' +\r\n                        ',modifiedon' +\r\n                        ',statecode' +\r\n                        ',statuscode' +\r\n                        ',title' +\r\n                        ',versionnumber' +\r\n                        ',createdby' +\r\n                        ',modifiedby' +\r\n                        ',_createdby_value' +\r\n                        ',_modifiedby_value' +\r\n                        ',_ownerid_value' +\r\n                        ',_parentarticlecontentid_value' +\r\n                        ',_rootarticleid_value' +\r\n                        ',_subjectid_value' +\r\n                    '&$expand=languagelocaleid($select=code)' +\r\n                        ',transactioncurrencyid($select=isocurrencycode)' +\r\n                        ',owningbusinessunit($select=name)' +\r\n                    `&$filter=knowledgearticleid eq '${articleId}'`,\r\n                    true,\r\n                )\r\n                const rawArticleArr = Object.values(JSON.parse(dataStr)) as Dyn365RawKnowledgeBaseArticle[]\r\n                if (!rawArticleArr.length) {\r\n                    return null\r\n                }\r\n                logger.log('Found CRM KB article:', rawArticleArr[0])\r\n                return transformDyn365KBArticle(rawArticleArr[0])\r\n            } catch (e: any) {\r\n                logger.error('Search article: cif.searchAndOpenRecords:', extractErrorMessage(e))\r\n            }\r\n            return null\r\n        })\r\n\r\n        cif.addHandler('onmodechanged', (dataStr: string) => {\r\n            if (!adApi.adcFrame) {\r\n                return\r\n            }\r\n            const {value} = JSON.parse(dataStr)\r\n            switch (value) {\r\n                case 0:\r\n                    adApi.setWidgetMinimized(true)\r\n                    break\r\n                case 1:\r\n                    adApi.setWidgetMinimized(false)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n            return Promise.resolve()\r\n        })\r\n\r\n        adApi.on('ON_WIDGET_MINIMIZED_CHANGE', (widgetMinimized: boolean) => {\r\n            cif.setMode(widgetMinimized ? 0 : 1).catch((e: string) => {\r\n                logger.error('cif.setMode error:', extractErrorMessage(e))\r\n            })\r\n        })\r\n\r\n        adApi.on('ON_SHOW_SCREEN', screen => {\r\n            if (screen && screen.recordId && screen.recordType) {\r\n                screenPopEntity(screen.recordId as string, screen.recordType as string)\r\n            }\r\n        })\r\n\r\n    }).catch((e: Error) => {\r\n        logger.error('Can\\'t load Channel Integration Framework client API library: ', e)\r\n    })\r\n}\r\n"],"names":["pairs","index","length","result","pair","MINIMIZED_WIDGET_WIDTH","MAXIMIZED_WIDGET_WIDTH_DEFAULT","selfScriptUrl","window","document","currentScript","src","scripts","getElementsByTagName","adcOrigin","utils","location","href","URL","origin","AgentDesktopClientAPIImpl","options","adcFrame","adcFrameOrigin","pendingMessages","connectionEstablished","adcIsReady","maximizedIframeWidth","messageHandlers","responseCallbacks","integrationKey","messageLoggers","disableNewInteractionPopup","this","uuid","fromPairs","Object","keys","callbackMessages","map","messageType","requestMessages","RESPONSE_SUFFIX","prepareAdcIframe","registerListeners","on","widgetMinimized","getAttribute","setAttribute","valid","injectMessageLogger","logger","push","potentialFrame","HTMLIFrameElement","console","error","mountRoot","potentialMountRoot","HTMLElement","body","createElement","title","id","style","border","allow","onerror","standalone","width","height","zIndex","position","top","left","search","appendChild","handleIncomingMessage","type","uid","params","log","handlers","pendingResults","handler","e","needResponse","then","promiseResults","positiveResults","reduce","arr","status","undefined","value","lastValue","postMessageToAdc","noHandlers","addEventListener","data","stopImmediatePropagation","forEach","pingResponse","contentWindow","Error","postMessage","setTimeout","message","includes","requestResponseMessages","waiting","callback","Promise","resolve","err","runResponseTimeoutWatch","callbacksMap","errorText","code","name","apiCall","getLoginState","login","loginData","force","logout","getAgentState","setAgentState","state","notReadyReason","acceptInteraction","interactionId","rejectInteraction","startCall","phonenumber","initialObjects","Array","startChat","channel","address","startEmail","email","sendDtmf","dtmf","consultCall","phone","blindTransfer","customTransferData","integrationId","transfer","leaveInteraction","completeInteraction","leaveAndCompleteInteraction","disposition","note","switchActiveInteraction","inviteToCallConference","removeFromCallConference","partyId","destroyCallConference","inviteToChatConference","removeFromChatConference","mergeAllCallsIntoConference","getTeams","getTeamMembers","teamId","getServicesList","getService","setService","service","getDIDNumbersList","getDIDNumber","setDIDNumber","did","getDispositionsList","target","setDisposition","addNote","updateNote","replaceNote","setRescheduleWindow","rescheduleData","getConfig","setVariable","key","getVariables","addInteractionAssociatedObject","object","setInteractionActiveScreen","screenData","getPhoneDevicesList","getPhoneDevice","setPhoneDevice","phoneDevice","setCallHold","setCallRecording","setCallMute","setScreenRecordingMute","getScreenRecordingState","setWidgetMinimized","sendChatMessage","suggestChatMessage","allowOverwrite","getAgentNotReadyReasons","activatePage","getInteractionsState","setCallRecordingMute","setDialCandidates","candidates","remove","delIndex","indexOf","splice","brightpattern","AdApi","extractURLParams","url","paramsMap","paramUrl","split","slice","join","paramMap","param","splits","decodeURIComponent","shift","capitalize","str","replace","c","toUpperCase","findLast","array","predicate","i","shallowObjEqual","obj1","obj2","waitResolveAll","targets","reject","numberOfResolved","results","targetPromise","catch","reason","finally","startsWithAny","base","prefixes","prefix","startsWith","splitWords","trim","word","chatChannelTypes","call","filter","v1","v4","module","exports","byteToHex","toString","substr","buf","offset","bth","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rnds","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","b","node","clockseq","seedBytes","msecs","Date","getTime","nsecs","dt","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","crmDomain","loadCrmApi","script","head","insertAdjacentElement","dataset","crmurl","cifid","defaultScreenPopSearchEntityType","CONTACT_ENTITY_TYPE","CONTACT_ID_ATTRIBUTE","REFERENCE","activityTables","contactPhoneFields","transformDyn365KBSearchResults","searchResults","item","content","knowledgearticleid","text","entityDisplayName","logPrefix","args","info","warn","isInitialDataLoaded","initialLoginDataLoaded","initialInteractionDataLoaded","handlePendingObject","pendingObject","handleOpenedObject","currentScreenObject","isLoggedIn","activeInteractionId","adApi","getEntityDisplayData","entityId","entityType","entityData","getEntityData","getObjectDataFromEnv","extractDialCandidateFromContact","contact","associatedObjects","dispatchDialCandidates","entity","cif","Microsoft","CIFramework","contactRelationships","clickToCallAction","extractErrorMessage","errObj","JSON","parse","setMode","setWidth","requestContactRelationships","readCIFCustomParameters","setClickToAct","screenPopEntity","entityName","openForm","stringify","screenPopSearch","searchQuery","renderSearchPage","entityMetadataStr","entityMetadata","getEntityMetadata","values","OneToManyRelationships","ReferencedEntity","ReferencedAttribute","ReferencingEntity","ReferencingAttribute","RelationshipType","envStr","env","customParams","getEnvironment","click_to_call_action","record","types","createBasicActivityObject","table","interactionData","activityRecord","description","startTime","toUTCString","endTime","duration","ceil","globalInteractionId","username","playbackUrl","DNIS","ANI","voice","phoneNumber","callDirection","saveActivityForEntity","interaction","regardingEntity","metadataStr","metadata","tableName","additionalActivityData","phoneCallRef","entitySetName","entityLogicalName","oneToManyRel","activity","DisplayName","EntitySetName","LogicalName","_collection","find","attribute","ReferencingEntityNavigationPropertyName","createRecord","displayId","displayType","fullname","subject","displayName","entityDataStr","retrieveRecord","associatedObject","customFields","dashboardType","pagetype","etn","recordId","recordType","phones","phoneField","number","dialCandidates","candidate","refField","refContactId","contactDataStr","contactData","selectedObjectId","selectedObject","selected","list","addHandler","dataStr","substring","format","sendClickToAction","getMode","mode","origination","searchAndOpenRecords","language","rawData","query","articleId","rawArticleArr","articleData","keywords","answer","notes","languagelocaleid","createdByUser","lastEditedByUser","screen"],"sourceRoot":""}