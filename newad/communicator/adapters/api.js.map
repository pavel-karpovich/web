{"version":3,"file":"api.js","mappings":"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","sources":["webpack://@bpinc/adapters/./src/utils/index.ts","webpack://@bpinc/adapters/../../packages/adapters-public-api-types/src/types.ts","webpack://@bpinc/adapters/../../node_modules/uuid/index.js","webpack://@bpinc/adapters/../../node_modules/uuid/lib/bytesToUuid.js","webpack://@bpinc/adapters/../../node_modules/uuid/lib/rng-browser.js","webpack://@bpinc/adapters/../../node_modules/uuid/v1.js","webpack://@bpinc/adapters/../../node_modules/uuid/v4.js","webpack://@bpinc/adapters/webpack/bootstrap","webpack://@bpinc/adapters/webpack/runtime/define property getters","webpack://@bpinc/adapters/webpack/runtime/hasOwnProperty shorthand","webpack://@bpinc/adapters/../../node_modules/lodash-es/fromPairs.js","webpack://@bpinc/adapters/./src/adc-client-api.ts"],"sourcesContent":["\r\nconst extractURLParams = (url: string): Record<string, string> => {\r\n    const paramsMap: Record<string, string> = {}\r\n\r\n    if (url) {\r\n        try {\r\n            const paramUrl = url.split('?').slice(1).join('?')\r\n            if (paramUrl.length) {\r\n\r\n                const params = paramUrl.split('&')\r\n                params.reduce<Record<string, string>>((paramMap, param) => {\r\n\r\n                    const splits = param.split('=')\r\n                    if (splits.length) {\r\n                        const name = decodeURIComponent(splits.shift()!)\r\n                        paramMap[name] = decodeURIComponent(splits.join('='))\r\n                    }\r\n                    return paramMap\r\n                }, paramsMap)\r\n            }\r\n        } catch (e) {\r\n            console.error('Unable to parse URL parameters: ', url)\r\n        }\r\n    }\r\n    return paramsMap\r\n}\r\n\r\nconst capitalize = (str: string): string => str.replace(/^\\w/, c => c.toUpperCase())\r\n\r\nfunction findLast<T>(array: Array<T>, predicate: (item: T) => boolean): T | null {\r\n\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        if (predicate(array[i])) {\r\n            return array[i]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction shallowObjEqual<Obj extends Record<PropertyKey, unknown>>(obj1: Obj, obj2: Obj): boolean {\r\n\r\n    for (const key in obj1) {\r\n        if (!(key in obj2) || obj1[key] !== obj2[key]) {\r\n            return false\r\n        }\r\n    }\r\n    for (const key in obj2) {\r\n        if (!(key in obj1) || obj2[key] !== obj1[key]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport type FulfilledResult<T> = {\r\n    status: 'fulfilled'\r\n    value: T\r\n}\r\n\r\nexport type RejectedResult<T> = {\r\n    status: 'rejected'\r\n    reason: any\r\n}\r\n\r\nexport type WaitResolveResult<T> = FulfilledResult<T> | RejectedResult<T>\r\n\r\nconst waitResolveAll = function<T>(targets: Array<T | Promise<T>>): Promise<WaitResolveResult<T>[]> {\r\n    return new Promise<WaitResolveResult<T>[]>((resolve, reject) => {\r\n\r\n        if (!targets.length) {\r\n            resolve([])\r\n            return\r\n        }\r\n        let numberOfResolved = 0\r\n        const results = new Array(targets.length)\r\n        const promises = targets.map(target => {\r\n            return (target instanceof Promise ? target : Promise.resolve(target))\r\n        }) as Promise<T>[]\r\n        promises.forEach((targetPromise, index) => {\r\n            targetPromise\r\n            .then(value => {\r\n                results[index] = {\r\n                    status: 'fulfilled',\r\n                    value,\r\n                }\r\n            })\r\n            .catch(reason => {\r\n                results[index] = {\r\n                    status: 'rejected',\r\n                    reason,\r\n                }\r\n            })\r\n            .finally(() => {\r\n                numberOfResolved++\r\n                if (numberOfResolved === targets.length) {\r\n                    resolve(results)\r\n                }\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\nconst startsWithAny = (base: string, prefixes: string[]) => {\r\n    for (const prefix of prefixes) {\r\n        if (base.startsWith(prefix)) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst splitWords = (str: string): string => {\r\n    return str\r\n    .trim()\r\n    .split(/(?=[A-Z])/)\r\n    .map(word => word.trim())\r\n    .join(' ')\r\n}\r\n\r\nexport const utils = {\r\n    extractURLParams,\r\n    capitalize,\r\n    findLast,\r\n    shallowObjEqual,\r\n    waitResolveAll,\r\n    startsWithAny,\r\n    splitWords,\r\n}\r\n","/** Must not have dependencies (imports) */\r\n\r\nexport const requestMessages = [\r\n    'GET_LOGIN_STATE',\r\n    'LOGIN',\r\n    'LOGOUT',\r\n    'GET_AGENT_STATE',\r\n    'SET_AGENT_STATE',\r\n    'ACCEPT_INTERACTION',\r\n    'REJECT_INTERACTION',\r\n    'START_CALL',\r\n    'START_CHAT',\r\n    'START_EMAIL',\r\n    'SEND_DTMF',\r\n    'CONSULT_CALL',\r\n    'BLIND_TRANSFER',\r\n    'TRANSFER',\r\n    'LEAVE_INTERACTION',\r\n    'COMPLETE_INTERACTION',\r\n    'LEAVE_AND_COMPLETE_INTERACTION',\r\n    'SWITCH_ACTIVE_INTERACTION',\r\n    'INVITE_TO_CALL_CONFERENCE',\r\n    'REMOVE_FROM_CALL_CONFERENCE',\r\n    'DESTROY_CALL_CONFERENCE',\r\n    'INVITE_TO_CHAT_CONFERENCE',\r\n    'REMOVE_FROM_CHAT_CONFERENCE',\r\n    'MERGE_ALL_CALLS_INTO_CONFERENCE',\r\n    'GET_TEAMS',\r\n    'GET_TEAM_MEMBERS',\r\n    'GET_SERVICES_LIST',\r\n    'GET_SERVICE',\r\n    'SET_SERVICE',\r\n    'GET_DID_LIST',\r\n    'GET_DID',\r\n    'SET_DID',\r\n    'GET_DISPOSITIONS_LIST',\r\n    'SET_DISPOSITION',\r\n    'SET_RESCHEDULE',\r\n    'ADD_NOTE',\r\n    'UPDATE_NOTE',\r\n    'REPLACE_NOTE',\r\n    'GET_CONFIG',\r\n    'GET_VARIABLES',\r\n    'SET_VARIABLE',\r\n    'ADD_INTERACTION_ASSOCIATED_OBJECT',\r\n    'SET_INTERACTION_ACTIVE_SCREEN',\r\n    'GET_PHONE_DEVICES_LIST',\r\n    'GET_PHONE_DEVICE',\r\n    'SET_PHONE_DEVICE',\r\n    'SET_CALL_HOLD',\r\n    'SET_CALL_RECORDING',\r\n    'SET_CALL_MUTE',\r\n    'SET_SCREEN_RECORDING_MUTE',\r\n    'GET_SCREEN_RECORDING_STATE',\r\n    'SET_WIDGET_MINIMIZED',\r\n    'SEND_CHAT_MESSAGE',\r\n    'SUGGEST_CHAT_MESSAGE',\r\n    'GET_AGENT_NOT_READY_REASONS',\r\n    'ACTIVATE_PAGE',\r\n    'GET_INTERACTIONS_STATE',\r\n    'SET_CALL_RECORDING_MUTE',\r\n    'SET_DIAL_CANDIDATES',\r\n] as const\r\nexport type RequestMessage = typeof requestMessages[number]\r\n\r\nexport const callbackMessages = {\r\n    'ON_LOGIN': {needResponse: false},\r\n    'ON_LOGOUT': {needResponse: false},\r\n    'ON_NEW_INTERACTION': {needResponse: false},\r\n    'ON_INTERACTION_REMOVED': {needResponse: false},\r\n    'ON_INTERACTION_STATE_CHANGE': {needResponse: false},\r\n    'ON_ACTIVE_INTERACTION_SWITCHED': {needResponse: false},\r\n    'ON_AGENT_STATE_CHANGE': {needResponse: false},\r\n    'ON_REQUEST_TRANSFER_DATA': {needResponse: true},\r\n    'ON_LOAD_TRANSFER_DATA': {needResponse: false},\r\n    'ON_GET_KNOWLEDGE_BASE_FOLDER': {needResponse: true},\r\n    'ON_SEARCH_KNOWLEDGE_BASE': {needResponse: true},\r\n    'ON_GET_KNOWLEDGE_BASE_ARTICLE': {needResponse: true},\r\n    'ON_OPEN_RECORD': {needResponse: false},\r\n    'ON_SEARCH_RECORDS': {needResponse: false},\r\n    'ON_SHOW_SCREEN': {needResponse: false},\r\n    'ON_SCREEN_RECORDING_STATE_CHANGE': {needResponse: false},\r\n    'ON_WIDGET_MINIMIZED_CHANGE': {needResponse: false},\r\n    'ON_SERVER_ERROR': {needResponse: false},\r\n    'ON_SOFTPHONE_STATUS_CHANGE': {needResponse: false},\r\n    'ON_AUDIO_DEVICE_CHANGE': {needResponse: false},\r\n    'ON_PHONE_CAPABILITIES_CHANGE': {needResponse: false},\r\n    'ON_CALL_AUDIO_QUALITY_ALERT': {needResponse: false},\r\n    'ON_WEB_SCREEN_POP_CUSTOM': {needResponse: true},\r\n    'ON_SAVE_ACTIVITY_RECORD': {needResponse: false},\r\n    'ON_VALIDATE_ASSOCIATED_RECORDS': {needResponse: true},\r\n    'ON_REQUEST_RECORD_INFO': {needResponse: true},\r\n    'ON_REQUEST_RECORD_ON_SCREEN': {needResponse: true},\r\n} as const\r\nexport type CallbackMessage = keyof typeof callbackMessages\r\n\r\n\r\ntype FilterByHavingResponse<T> = {\r\n    [Key in keyof T]: T[Key] extends {needResponse: true} ? Key : never\r\n}\r\n\r\nconst typedKeys = <T extends {[key: string]: unknown}>(data: T): Array<keyof T> =>\r\n    Object.keys.call<typeof data, Array<typeof data>, Array<keyof T>>(data, data)\r\n\r\nexport type CallbackMessageWithResponse = FilterByHavingResponse<typeof callbackMessages>[keyof typeof callbackMessages]\r\n\r\nexport const RESPONSE_SUFFIX = '_RESPONSE' as const\r\n\r\nexport const requestResponseMessages = requestMessages.map<`${RequestMessage}${typeof RESPONSE_SUFFIX}`>(message => {\r\n    return `${message}${RESPONSE_SUFFIX}`\r\n})\r\nexport const callbackResponseMessages = typedKeys(callbackMessages)\r\n    .filter<CallbackMessageWithResponse>((message: CallbackMessage): message is CallbackMessageWithResponse => {\r\n        return callbackMessages[message].needResponse\r\n    })\r\n    .map<`${CallbackMessageWithResponse}${typeof RESPONSE_SUFFIX}`>(message => {\r\n        return `${message}${RESPONSE_SUFFIX}`\r\n    })\r\n\r\nexport type CallbackResponseMessage = keyof {\r\n    [Key in keyof typeof callbackMessages as typeof callbackMessages[Key] extends {needResponse: true} ? `${Key}${typeof RESPONSE_SUFFIX}` : never]: true\r\n}\r\n\r\nexport type CallbackMethodsReturnTypeMap = {\r\n    'ON_LOGIN': void\r\n    'ON_LOGOUT': void\r\n    'ON_NEW_INTERACTION': void\r\n    'ON_INTERACTION_REMOVED': void\r\n    'ON_INTERACTION_STATE_CHANGE': void\r\n    'ON_ACTIVE_INTERACTION_SWITCHED': void\r\n    'ON_AGENT_STATE_CHANGE': void\r\n    'ON_REQUEST_TRANSFER_DATA': CustomTransferData\r\n    'ON_LOAD_TRANSFER_DATA': void\r\n    'ON_GET_KNOWLEDGE_BASE_FOLDER': ExternalKBItemData[]\r\n    'ON_SEARCH_KNOWLEDGE_BASE': ExternalKBSearchResultData[]\r\n    'ON_GET_KNOWLEDGE_BASE_ARTICLE': ExternalKBArticleData | null\r\n    'ON_OPEN_RECORD': void\r\n    'ON_SEARCH_RECORDS': void\r\n    'ON_SHOW_SCREEN': void\r\n    'ON_SCREEN_RECORDING_STATE_CHANGE': void\r\n    'ON_WIDGET_MINIMIZED_CHANGE': void\r\n    'ON_SERVER_ERROR': void\r\n    'ON_SOFTPHONE_STATUS_CHANGE': void\r\n    'ON_AUDIO_DEVICE_CHANGE': void\r\n    'ON_PHONE_CAPABILITIES_CHANGE': void\r\n    'ON_CALL_AUDIO_QUALITY_ALERT': void\r\n    'ON_WEB_SCREEN_POP_CUSTOM': boolean\r\n    'ON_SAVE_ACTIVITY_RECORD': void\r\n    'ON_VALIDATE_ASSOCIATED_RECORDS': RecordsValidationResult\r\n    'ON_REQUEST_RECORD_INFO': InteractionAssociatedObjectData | null\r\n    'ON_REQUEST_RECORD_ON_SCREEN': InteractionAssociatedObjectData | null\r\n}\r\n\r\nconst resultStatus = ['error', 'success'] as const\r\nexport type ResultStatus = typeof resultStatus[number]\r\n\r\nexport const resultErrorCodes = {\r\n    not_enough_privileges: 1,\r\n    not_logged_in: 2,\r\n    invalid_args: 3,\r\n    logged_without_phone: 4,\r\n    banned: 5,\r\n    api_not_answer: 6,\r\n    invalid_request: 7,\r\n    timeout: 8,\r\n    no_chat_in_service: 9,\r\n    empty_number: 10,\r\n    no_service: 11,\r\n    self_call: 12,\r\n    no_interaction: 13,\r\n    api_method_not_implemented: 14,\r\n    not_suitable_state: 15,\r\n    no_disposition: 16,\r\n    object_not_found: 17,\r\n    no_permissions_did_sms: 18,\r\n    no_permissions_did_call: 19,\r\n    no_channel_in_service: 20,\r\n    unknown_error: 99,\r\n} as const\r\nexport type ResultErrorCodes = typeof resultErrorCodes\r\n\r\nexport const serverErrorCodes = {\r\n    forced_logout_by_other_client: 100,\r\n    forced_logout_by_supervisor: 101,\r\n    invalid_request: 102,\r\n    phone_not_registered: 103,\r\n    phone_not_in_dial_plan: 104,\r\n    tenant_disabled: 105,\r\n    destination_user_not_logged: 106,\r\n    user_disabled_or_deleted: 107,\r\n    user_already_logged_in: 108,\r\n    invalid_credentials: 109,\r\n    other_user_logged_with_phone: 110,\r\n    invalid_token: 111,\r\n    logged_users_limit_reached: 112,\r\n    already_logged_in_with_the_same_session: 113,\r\n    not_enough_privileges: 114,\r\n    sip_server_error: 200,\r\n    unknown_error: 300,\r\n} as const\r\nexport type ServerErrorCodes = typeof serverErrorCodes\r\n\r\nexport type ResultError = {\r\n    code: ResultErrorCodes[keyof ResultErrorCodes]\r\n    name: keyof ResultErrorCodes\r\n    message?: string\r\n}\r\n\r\nexport type OperationResult<ReturnType = null> =\r\n    {status: 'success'; data: ReturnType} |\r\n    {status: 'error'; error: ResultError}\r\n\r\nexport type SyncAsyncResult<ReturnType = void> = ReturnType | Promise<ReturnType>\r\n\r\nexport const agentStates = ['supervising', 'ready', 'not_ready', 'busy', 'after_call_work', 'reserved', 'ringing'] as const\r\nexport type AgentState = typeof agentStates[number]\r\n\r\nexport const interactionStates = [\r\n    'unknown',\r\n    'queued',\r\n    'ivr',\r\n    'wrap_up',\r\n    'wrap_up_hold',\r\n    'delivered',\r\n    'delivery_pending',\r\n    'hold',\r\n    'completed',\r\n] as const\r\nexport type InteractionState = typeof interactionStates[number]\r\n\r\nexport const interactionTypes = ['voice', 'chat', 'email'] as const\r\nexport type InteractionType = typeof interactionTypes[number]\r\n\r\nexport const chatChannelTypes = [\r\n    'telegram',\r\n    'line',\r\n    'facebook',\r\n    'web',\r\n    'nexmo',\r\n    'sms',\r\n    'viber',\r\n    'twitter',\r\n    'wechat',\r\n    'whatsapp',\r\n] as const\r\nexport type ChatChannelType = typeof chatChannelTypes[number]\r\n\r\nexport const callDirections = ['inbound', 'outbound'] as const\r\nexport type CallDirection = typeof callDirections[number]\r\n\r\nexport const phoneDevices = [\r\n    'phone_type_browser',\r\n    'phone_type_external',\r\n    'phone_type_hard_custom',\r\n    'phone_type_hard_default',\r\n    'phone_type_nailed',\r\n    'phone_type_none',\r\n    'phone_type_soft_secure',\r\n    'phone_type_microsoft_teams',\r\n    'phone_type_soft_unsecure',\r\n] as const\r\nexport type PhoneDevice = typeof phoneDevices[number]\r\n\r\nexport const dispositionTypes = [\r\n    'SUCCESS',\r\n    'FAILURE',\r\n    'CONTINUE',\r\n    'SPAM',\r\n    'DO_NOT_CALL',\r\n] as const\r\nexport type DispositionType = typeof dispositionTypes[number]\r\n\r\nexport type UserState = AgentState | 'offline'\r\n\r\nexport const chatPartyTypes = ['internal', 'external'] as const\r\nexport type ChatPartyType = typeof chatPartyTypes[number]\r\n\r\nexport type LoginStateData = {\r\n    isLoggedIn: boolean\r\n    agentId?: string\r\n    username?: string\r\n    sessionId?: string\r\n}\r\n\r\nexport type AgentStateData = {\r\n    state: AgentState\r\n    reservedForIncomingInteraction: boolean\r\n    notReadyReason?: string\r\n}\r\n\r\nexport type ServiceData = {\r\n    id: string\r\n    name: string\r\n    useDispositions: boolean\r\n    requireDisposition: boolean\r\n}\r\n\r\nexport type DispositionTarget = {\r\n    service?: string\r\n    interactionId?: string\r\n}\r\n\r\nexport type DispositionData = {\r\n    id: string\r\n    code: string\r\n    name: string\r\n    type: DispositionType\r\n}\r\n\r\nexport type IntegrationConfig = any\r\n\r\nexport type InteractionAssociatedObjectData = {\r\n    id: string\r\n    type: string\r\n    displayName: string\r\n    displayType: string\r\n    customFields: Record<string, string>\r\n}\r\nexport type InteractionAssociatedObject = {\r\n    source: string\r\n} & InteractionAssociatedObjectData\r\n\r\nexport type InteractionAssociatedObjectsData = {\r\n    list: InteractionAssociatedObject[]\r\n    selected: string[]\r\n}\r\n\r\nexport type AttachedData = Record<string, string>\r\n\r\nexport type InteractionData = {\r\n    interactionId: string\r\n    globalInteractionId?: string\r\n    state: InteractionState\r\n    type: InteractionType\r\n    callParties: CallParty[]\r\n    callMuted: boolean\r\n    callRecording: boolean\r\n    chatParties: ChatParty[]\r\n    attachedData: AttachedData\r\n    phoneNumber?: string\r\n    email?: string\r\n    callDirection?: CallDirection\r\n    startTime?: number\r\n    endTime?: number\r\n    duration?: number\r\n    description?: string\r\n    disposition?: string\r\n    service?: string\r\n    playbackUrl?: string\r\n    recordingUrl?: string\r\n    DNIS?: string\r\n    ANI?: string\r\n    origination?: InteractionOrigination\r\n\r\n    /** @deprecated */\r\n    subject: string\r\n    /** @deprecated */\r\n    associatedObjects: InteractionAssociatedObjectsData\r\n}\r\n\r\nexport type InteractionActivityData = {\r\n    interactionId: string\r\n    globalInteractionId?: string\r\n    state: InteractionState\r\n    type: InteractionType\r\n    associatedObjects: InteractionAssociatedObjectsData\r\n    attachedData: AttachedData\r\n    phoneNumber?: string\r\n    email?: string\r\n    callDirection?: CallDirection\r\n    startTime?: number\r\n    endTime?: number\r\n    duration?: number\r\n    description?: string\r\n    disposition?: string\r\n    service?: string\r\n    playbackUrl?: string\r\n    recordingUrl?: string\r\n    DNIS?: string\r\n    ANI?: string\r\n    origination?: InteractionOrigination\r\n\r\n    /** @deprecated */\r\n    subject: string\r\n    /** @deprecated */\r\n    callParties: CallParty[]\r\n    /** @deprecated */\r\n    callMuted: boolean\r\n    /** @deprecated */\r\n    callRecording: boolean\r\n    /** @deprecated */\r\n    chatParties: ChatParty[]\r\n}\r\n\r\nexport type InteractionScreen = Record<string, string | number | boolean | null | undefined>\r\n\r\nexport type CustomTransferData = Record<string, string | number | boolean | undefined | null>\r\n\r\nexport type ExternalKBArticleData = {\r\n    id: string\r\n    title: string\r\n    keywords: string\r\n    answer: string\r\n    notes: string\r\n    language: string\r\n    createdByUser: string\r\n    lastEditedByUser: string\r\n    customFields: string[]\r\n}\r\nexport type ExternalKBArticle = ExternalKBArticleData & {source: string}\r\n\r\nexport type ExternalKBArticleItem = {\r\n    id: string\r\n    type: 'article'\r\n    title: string\r\n    text: string\r\n}\r\nexport type ExternalKBFolderItem = {\r\n    id: string\r\n    type: 'folder'\r\n    title: string\r\n}\r\n\r\nexport type ExternalKBSearchResultData = ExternalKBArticleItem\r\nexport type ExternalKBSearchResult = ExternalKBSearchResultData & {source: string}\r\n\r\nexport type ExternalKBItemData = ExternalKBArticleItem | ExternalKBFolderItem\r\nexport type ExternalKBItem = ExternalKBItemData & {source: string}\r\n\r\nexport type KBFolderOptions = {\r\n    language?: string\r\n    folderId?: string\r\n}\r\n\r\nexport type SearchRecordsQuery = {\r\n    text: string\r\n    types: string[]\r\n}\r\n\r\nexport type RescheduleData = {\r\n    numberToDial: string\r\n    fromTime: string\r\n    untilTime: string\r\n    timezoneCode?: string\r\n}\r\n\r\nexport type PhoneDeviceData = {\r\n    type: PhoneDevice\r\n    phone?: string\r\n}\r\n\r\nexport type Team = {\r\n    id: string\r\n    displayName: string\r\n    isSupervised: boolean\r\n    usersCount?: number\r\n}\r\n\r\nexport type User = {\r\n    id: string\r\n    teamId: string\r\n    firstName: string\r\n    lastName: string\r\n    phone: string\r\n    state: UserState\r\n}\r\n\r\nexport type CallParty = {\r\n    id: string\r\n    name: string\r\n    phone: string\r\n    userId?: string\r\n}\r\n\r\nexport type ChatParty = {\r\n    id: string\r\n    type: ChatPartyType\r\n    name: string\r\n    userId?: string\r\n    contactId?: string\r\n    email?: string\r\n    phone?: string\r\n}\r\n\r\nexport type ScreenRecordingState = {\r\n    allowed: boolean\r\n    active: boolean\r\n    muted: boolean\r\n}\r\n\r\nexport type ServerErrorData = {\r\n    code: ServerErrorCodes[keyof ServerErrorCodes]\r\n    name: keyof ServerErrorCodes\r\n    timestamp: number // Date.now()\r\n    message?: string\r\n}\r\n\r\nexport type LoginData = {\r\n    username: string\r\n    password: string\r\n    tenant?: string\r\n}\r\n\r\nexport type PhoneCapabilities = {\r\n    canDial: boolean\r\n    canAnswer: boolean\r\n    canHold: boolean\r\n    canRetrieve: boolean\r\n}\r\n\r\nexport type DIDNumber = {\r\n    id: string\r\n    number: string\r\n    isSMS: boolean\r\n    isVoice: boolean\r\n}\r\n\r\nexport type WebScreenPopSecondaryUrl = {\r\n    label?: string\r\n    url?: string\r\n}\r\n\r\nexport type WebScreenPop = {\r\n    action: 'OPEN_WEB_PAGE' | 'DISPLAY_TEXT'\r\n    url: string\r\n    content: string\r\n    label: string\r\n    popUponAnswer: boolean\r\n    keepPopupOpenAfterFinish: boolean\r\n    popup: boolean\r\n    secondaryUrls?: {\r\n        [key: number]: WebScreenPopSecondaryUrl\r\n    }\r\n}\r\n\r\nexport const interactionOriginations = [\r\n    'dialpad',\r\n    'dialpad-search',\r\n    'directory',\r\n    'recent',\r\n    'favorites',\r\n    'workitem',\r\n    'interaction',\r\n    'contact-profile',\r\n    'help',\r\n    'conference',\r\n    'auto',\r\n    'integration-api',\r\n    'chat-center',\r\n    'topbar',\r\n] as const\r\nexport type InteractionOrigination = typeof interactionOriginations[number]\r\n\r\nexport type InteractionsState = {\r\n    activeInteractionId: string | null\r\n    interactions: InteractionData[]\r\n}\r\n\r\nexport type OpenRecordOptions = {\r\n    inNewTab: boolean\r\n    source: 'user' | 'scenario'\r\n}\r\n\r\nexport const phoneTypes = ['mobile', 'business', 'home', 'fax', 'other'] as const\r\ntype PhoneType = typeof phoneTypes[number]\r\n\r\nexport type PhoneData = {\r\n    number: string\r\n    type: PhoneType\r\n    displayType?: string\r\n}\r\n\r\nexport type DialCandidate = {\r\n    id: string\r\n    displayName: string\r\n    phones: PhoneData[]\r\n    associatedObjects: InteractionAssociatedObjectData[]\r\n    email?: string\r\n}\r\n\r\nexport type RecordsValidationResult = {\r\n    valid: boolean\r\n    message?: string\r\n}\r\n\r\nexport type RecordInfoRequest = {\r\n    id: string\r\n    type: string\r\n}\r\n\r\nexport type InitialObjects = InteractionAssociatedObjectData | InteractionAssociatedObjectData[]\r\n\r\n\r\nexport type InitiateResult = {\r\n    id: string | null\r\n    error?: string\r\n}\r\n\r\nexport type OnLoginHandler = (loginState: LoginStateData) => SyncAsyncResult\r\nexport type OnLogoutHandler = () => SyncAsyncResult\r\nexport type OnNewInteractionHandler = (newInteraction: InteractionData) => SyncAsyncResult\r\nexport type OnInteractionRemovedHandler = (interaction: InteractionData) => SyncAsyncResult\r\nexport type OnInteractionStateChangeHandler = (interaction: InteractionData) => SyncAsyncResult\r\nexport type OnActiveInteractionSwitchHandler = (activatedInteractionId: string | null) => SyncAsyncResult\r\nexport type OnAgentStateChangeHandler = (state: AgentState, notReadyReason?: string) => SyncAsyncResult\r\nexport type OnRequestTransferDataHandler = (interactionId: string) => SyncAsyncResult<CustomTransferData>\r\nexport type OnLoadTransferDataHandler = (interactionId: string, data: CustomTransferData) => SyncAsyncResult\r\nexport type OnWidgetMinimizedChangeHandler = (widgetMinimized: boolean) => SyncAsyncResult\r\nexport type OnGetKnowledgeBaseFolderHandler = (options: KBFolderOptions) => SyncAsyncResult<ExternalKBItemData[]>\r\nexport type OnSearchKnowledgeBaseHandler = (query: string, language?: string, folderId?: string) => SyncAsyncResult<ExternalKBSearchResultData[]>\r\nexport type OnGetKnowledgeBaseArticleHandler = (articleId: string) => SyncAsyncResult<ExternalKBArticleData | null>\r\nexport type OnOpenRecordHandler = (record: InteractionAssociatedObjectData, interactionId?: string, options?: OpenRecordOptions) => SyncAsyncResult\r\nexport type OnSearchRecordsHandler = (search: SearchRecordsQuery, interactionId?: string, inNewTab?: boolean) => SyncAsyncResult\r\nexport type OnShowScreenHandler = (screen: InteractionScreen, interactionId?: string) => SyncAsyncResult\r\nexport type OnScreenRecordingStateChangeHandler = (screenRecordingState: ScreenRecordingState) => SyncAsyncResult\r\nexport type OnServerErrorHandler = (error: ServerErrorData) => SyncAsyncResult\r\nexport type OnSoftphoneStatusChangeHandler = (ready: boolean, error?: string) => SyncAsyncResult\r\nexport type OnAudioDeviceChangeHandler = (inputDevice?: string, outputDevice?: string) => SyncAsyncResult\r\nexport type OnPhoneCapabilitiesChangeHandler = (caps: PhoneCapabilities) => SyncAsyncResult\r\nexport type OnCallAudioQualityAlertHandler = (callId: string, alert: boolean) => SyncAsyncResult\r\nexport type OnWebScreenPopCustomHandler = (interactionId: string, webScreenPop: WebScreenPop) => SyncAsyncResult<boolean>\r\nexport type OnSaveActivityRecordHandler = (activity: InteractionActivityData) => SyncAsyncResult\r\nexport type OnValidateAssociatedRecordsHandler = (interactionId: string, records: InteractionAssociatedObjectsData) => SyncAsyncResult<RecordsValidationResult>\r\nexport type OnRequestRecordInfoHandler = (payload: RecordInfoRequest) => SyncAsyncResult<InteractionAssociatedObjectData | null>\r\nexport type OnRequestRecordOnScreenHandler = () => SyncAsyncResult<InteractionAssociatedObjectData | null>\r\n\r\nexport type MessageLogger = (message: string, data: any) => void\r\n\r\n// TODO: resolve type issues\r\nexport type InitOptions = {\r\n    integrationKey?: string\r\n    adcFrame?: any // HTMLIFrameElement\r\n    mountRoot?: any // HTMLElement\r\n    standalone?: boolean\r\n    disableNewInteractionPopup?: boolean\r\n}\r\n\r\nexport declare class AgentDesktopClientAPI {\r\n    adcFrame: any // HTMLIFrameElement | null\r\n\r\n    constructor(options?: InitOptions)\r\n\r\n    injectMessageLogger(callback: MessageLogger): void\r\n\r\n    getLoginState(): Promise<OperationResult<LoginStateData>>\r\n    login(loginData: LoginData, force?: boolean): Promise<OperationResult>\r\n    logout(): Promise<OperationResult>\r\n    getAgentState(): Promise<OperationResult<AgentStateData>>\r\n    setAgentState(state: AgentState, notReadyReason?: string): Promise<OperationResult>\r\n    acceptInteraction(interactionId?: string): Promise<OperationResult>\r\n    rejectInteraction(interactionId?: string): Promise<OperationResult>\r\n    startCall(phonenumber: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    startChat(channel: ChatChannelType, address: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    startEmail(email: string, associatedObjects?: InitialObjects): Promise<OperationResult<InitiateResult>>\r\n    sendDtmf(dtmf: string, interactionId?: string): Promise<OperationResult>\r\n    consultCall(phone: string): Promise<OperationResult>\r\n    blindTransfer(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult>\r\n    transfer(customTransferData?: CustomTransferData): Promise<OperationResult>\r\n    leaveInteraction(interactionId?: string): Promise<OperationResult>\r\n    completeInteraction(interactionId?: string): Promise<OperationResult>\r\n    leaveAndCompleteInteraction(disposition?: string, note?: string, interactionId?: string): Promise<OperationResult>\r\n    switchActiveInteraction(interactionId: string): Promise<OperationResult>\r\n    inviteToCallConference(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult>\r\n    removeFromCallConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    destroyCallConference(interactionId?: string): Promise<OperationResult>\r\n    mergeAllCallsIntoConference(customTransferData?: CustomTransferData): Promise<OperationResult>\r\n    inviteToChatConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    removeFromChatConference(partyId: string, interactionId?: string): Promise<OperationResult>\r\n    getTeams(): Promise<OperationResult<Team[]>>\r\n    getTeamMembers(teamId: string): Promise<OperationResult<User[]>>\r\n    getServicesList(): Promise<OperationResult<ServiceData[]>>\r\n    getService(): Promise<OperationResult<ServiceData | null>>\r\n    setService(service: string | null): Promise<OperationResult>\r\n    getDIDNumbersList(): Promise<OperationResult<DIDNumber[]>>\r\n    getDIDNumber(): Promise<OperationResult<DIDNumber | null>>\r\n    setDIDNumber(did: string | null): Promise<OperationResult>\r\n    getDispositionsList(target: DispositionTarget): Promise<OperationResult<DispositionData[]>>\r\n    setDisposition(disposition: string, interactionId?: string): Promise<OperationResult>\r\n    setRescheduleWindow(rescheduleData: RescheduleData, interactionId?: string): Promise<OperationResult>\r\n    addNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    updateNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    replaceNote(note: string, interactionId?: string): Promise<OperationResult>\r\n    getConfig(): Promise<OperationResult<IntegrationConfig>>\r\n    setVariable(key: string, value: string, interactionId?: string): Promise<OperationResult>\r\n    getVariables(keys: string[], interactionId?: string): Promise<OperationResult<Record<string, string>>>\r\n    addInteractionAssociatedObject(object: InteractionAssociatedObjectData, interactionId?: string): Promise<OperationResult>\r\n    setInteractionActiveScreen(screenData: InteractionScreen, interactionId?: string): Promise<OperationResult>\r\n    getPhoneDevicesList(): Promise<OperationResult<PhoneDevice[]>>\r\n    getPhoneDevice(): Promise<OperationResult<PhoneDeviceData>>\r\n    setPhoneDevice(phoneDevice: PhoneDeviceData): Promise<OperationResult>\r\n    setCallHold(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setCallRecording(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setCallMute(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setScreenRecordingMute(state: boolean): Promise<OperationResult>\r\n    getScreenRecordingState(): Promise<OperationResult<ScreenRecordingState>>\r\n    setWidgetMinimized(state: boolean): Promise<OperationResult>\r\n    sendChatMessage(message: string, interactionId?: string): Promise<OperationResult>\r\n    suggestChatMessage(message: string, allowOverwrite?: boolean, interactionId?: string): Promise<OperationResult>\r\n    getAgentNotReadyReasons(): Promise<OperationResult<string[]>>\r\n    activatePage(): Promise<OperationResult>\r\n    getInteractionsState(): Promise<OperationResult<InteractionsState>>\r\n    setCallRecordingMute(state: boolean, interactionId?: string): Promise<OperationResult>\r\n    setDialCandidates(candidates: DialCandidate[]): Promise<OperationResult>\r\n\r\n    on(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    on(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    on(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    on(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    on(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    on(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    on(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    on(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    on(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    on(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    on(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    on(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    on(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    on(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    on(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    on(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    on(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    on(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    on(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    on(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    on(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    on(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    on(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n\r\n    remove(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    remove(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    remove(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    remove(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    remove(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    remove(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    remove(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    remove(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    remove(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    remove(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    remove(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    remove(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    remove(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    remove(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    remove(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    remove(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    remove(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    remove(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    remove(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    remove(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    remove(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    remove(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    remove(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n}\r\n\r\ninterface AgentDesktopClientAPIClassType {\r\n    prototype: AgentDesktopClientAPI\r\n    new (options?: InitOptions): AgentDesktopClientAPI\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        brightpattern: {\r\n            AdApi: AgentDesktopClientAPIClassType\r\n        }\r\n    }\r\n}\r\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * The inverse of `_.toPairs`; this method returns an object composed\n * from key-value `pairs`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} pairs The key-value pairs.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.fromPairs([['a', 1], ['b', 2]]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction fromPairs(pairs) {\n  var index = -1,\n      length = pairs == null ? 0 : pairs.length,\n      result = {};\n\n  while (++index < length) {\n    var pair = pairs[index];\n    result[pair[0]] = pair[1];\n  }\n  return result;\n}\n\nexport default fromPairs;\n","import fromPairs from 'lodash-es/fromPairs'\r\n\r\nimport type {\r\n    AgentDesktopClientAPI,\r\n    AgentState,\r\n    AgentStateData,\r\n    CallbackMessage,\r\n    ChatChannelType,\r\n    CustomTransferData,\r\n    DialCandidate,\r\n    DIDNumber,\r\n    DispositionData,\r\n    DispositionTarget,\r\n    InitialObjects,\r\n    InitiateResult,\r\n    InitOptions,\r\n    IntegrationConfig,\r\n    InteractionAssociatedObjectData,\r\n    InteractionScreen,\r\n    InteractionsState,\r\n    LoginData,\r\n    LoginStateData,\r\n    MessageLogger,\r\n    OnActiveInteractionSwitchHandler,\r\n    OnAgentStateChangeHandler,\r\n    OnAudioDeviceChangeHandler,\r\n    OnCallAudioQualityAlertHandler,\r\n    OnGetKnowledgeBaseArticleHandler,\r\n    OnGetKnowledgeBaseFolderHandler,\r\n    OnInteractionRemovedHandler,\r\n    OnInteractionStateChangeHandler,\r\n    OnLoadTransferDataHandler,\r\n    OnLoginHandler,\r\n    OnLogoutHandler,\r\n    OnNewInteractionHandler,\r\n    OnOpenRecordHandler,\r\n    OnPhoneCapabilitiesChangeHandler,\r\n    OnRequestRecordInfoHandler,\r\n    OnRequestRecordOnScreenHandler,\r\n    OnRequestTransferDataHandler,\r\n    OnSaveActivityRecordHandler,\r\n    OnScreenRecordingStateChangeHandler,\r\n    OnSearchKnowledgeBaseHandler,\r\n    OnSearchRecordsHandler,\r\n    OnServerErrorHandler,\r\n    OnShowScreenHandler,\r\n    OnSoftphoneStatusChangeHandler,\r\n    OnValidateAssociatedRecordsHandler,\r\n    OnWebScreenPopCustomHandler,\r\n    OnWidgetMinimizedChangeHandler,\r\n    OperationResult,\r\n    PhoneDevice,\r\n    PhoneDeviceData,\r\n    RequestMessage,\r\n    RescheduleData,\r\n    ScreenRecordingState,\r\n    ServiceData,\r\n    Team,\r\n    User,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {\r\n    callbackMessages,\r\n    requestMessages,\r\n    requestResponseMessages,\r\n    RESPONSE_SUFFIX,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    AnyEventHandler,\r\n    MessagePackage,\r\n    MessagesHandlers,\r\n    MessageUID,\r\n    ResponseCallbacks,\r\n} from './types'\r\nimport {utils} from './utils'\r\n\r\n\r\n// In milliseconds (ms)\r\nconst RESPONSE_TIMEOUT = 20_000\r\nconst MINIMIZED_WIDGET_WIDTH = '44px'\r\nconst MAXIMIZED_WIDGET_WIDTH_DEFAULT = '500px'\r\n\r\nconst selfScriptUrl = (function() {\r\n    if (window.document.currentScript) {\r\n        return (window.document.currentScript as HTMLScriptElement).src\r\n    } else {\r\n        const scripts = document.getElementsByTagName('script')\r\n        const myScript = scripts[scripts.length - 1]\r\n        return myScript.src\r\n    }\r\n})()\r\n\r\nconst adcOriginOverride = utils.extractURLParams(window.location.href)['adcUrl']\r\n\r\nconst adcOrigin = adcOriginOverride || new URL(selfScriptUrl).origin // 'https://adcommunicator.web.app'\r\n\r\nexport class AgentDesktopClientAPIImpl implements AgentDesktopClientAPI {\r\n\r\n    public adcFrame: HTMLIFrameElement | null\r\n    private adcFrameOrigin: string\r\n    private pendingMessages: any[]\r\n    private connectionEstablished: boolean\r\n    private adcIsReady: boolean\r\n    private maximizedIframeWidth = MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n    private readonly messageHandlers: MessagesHandlers\r\n    private readonly responseCallbacks: ResponseCallbacks\r\n    private readonly integrationKey: string\r\n    private readonly messageLoggers: MessageLogger[]\r\n    private readonly disableNewInteractionPopup: boolean\r\n\r\n    constructor(options: InitOptions = {}) {\r\n        this.adcFrame = null\r\n        this.adcFrameOrigin = ''\r\n        this.pendingMessages = []\r\n        this.integrationKey = options.integrationKey || uuid()\r\n        this.connectionEstablished = false\r\n        this.adcIsReady = false\r\n        this.messageLoggers = []\r\n        this.disableNewInteractionPopup = !!options.disableNewInteractionPopup\r\n\r\n        this.messageHandlers = fromPairs(\r\n            Object.keys(callbackMessages).map(messageType => [messageType, []]),\r\n        ) as unknown as MessagesHandlers\r\n\r\n        this.responseCallbacks = fromPairs(\r\n            requestMessages.map(messageType => [messageType + RESPONSE_SUFFIX, {}]),\r\n        ) as unknown as ResponseCallbacks\r\n\r\n        this.prepareAdcIframe(options)\r\n        this.registerListeners()\r\n\r\n        this.on('ON_WIDGET_MINIMIZED_CHANGE', (widgetMinimized: boolean) => {\r\n            if (this.adcFrame) {\r\n                if (widgetMinimized) {\r\n                    this.maximizedIframeWidth = this.adcFrame.getAttribute('width') ?? MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n                    this.adcFrame.setAttribute('width', MINIMIZED_WIDGET_WIDTH)\r\n                } else {\r\n                    this.adcFrame.setAttribute('width', this.maximizedIframeWidth)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.on('ON_WEB_SCREEN_POP_CUSTOM', () => false)\r\n        this.on('ON_VALIDATE_ASSOCIATED_RECORDS', () => ({valid: true}))\r\n    }\r\n\r\n    injectMessageLogger(logger: MessageLogger) {\r\n        this.messageLoggers.push(logger)\r\n    }\r\n\r\n    private prepareAdcIframe(options: InitOptions) {\r\n        if (options.adcFrame) {\r\n            const potentialFrame = options.adcFrame\r\n            if (potentialFrame instanceof HTMLIFrameElement && potentialFrame.src) {\r\n                this.adcFrame = potentialFrame\r\n            } else {\r\n                console.error(\r\n                    '@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\\n',\r\n                    'Valid Communicator iframe would be created automatically',\r\n                )\r\n            }\r\n        }\r\n        if (!this.adcFrame) {\r\n            let mountRoot: HTMLElement | null = null\r\n            if (options.mountRoot) {\r\n                const potentialMountRoot = options.mountRoot\r\n                if (potentialMountRoot instanceof HTMLElement) {\r\n                    mountRoot = potentialMountRoot\r\n                } else {\r\n                    console.error(\r\n                        '@@@ `mountRoot` is not HTMLElement.\\n',\r\n                        'Communicator iframe would be mounted to the `document.body` as a fallback scenario',\r\n                    )\r\n                }\r\n            }\r\n            if (!mountRoot) {\r\n                mountRoot = document.body\r\n            }\r\n            this.adcFrame = document.createElement('iframe')\r\n            this.adcFrame.title = 'Agent Desktop Communicator'\r\n            this.adcFrame.id = 'adc_frame'\r\n            this.adcFrame.style.border = 'none'\r\n            this.adcFrame.allow = 'microphone; camera; geolocation'\r\n            this.adcFrame.onerror = () => {\r\n                console.error('@@@ Adapter failure: unable to load AD Communicator')\r\n            }\r\n\r\n            if (options.standalone) {\r\n                this.adcFrame.width = '1px'\r\n                this.adcFrame.height = '1px'\r\n                this.adcFrame.style.zIndex = '-1000'\r\n                this.adcFrame.style.position = 'absolute'\r\n                this.adcFrame.style.top = '-1000px'\r\n                this.adcFrame.style.left = '-1000px'\r\n                this.adcFrame.src = adcOrigin + '/agent/communicator/no-ui/' + location.search\r\n            } else {\r\n                this.adcFrame.style.width = MAXIMIZED_WIDGET_WIDTH_DEFAULT\r\n                this.adcFrame.style.height = '100%'\r\n                this.adcFrame.src = adcOrigin + '/agent/communicator/' + location.search\r\n            }\r\n            mountRoot.appendChild(this.adcFrame)\r\n        }\r\n        this.adcFrameOrigin = (new URL(this.adcFrame.src)).origin\r\n    }\r\n\r\n    private handleIncomingMessage(type: CallbackMessage, uid: MessageUID, params: any[]) {\r\n        console.log('@@@ Handle: ', type, uid, params)\r\n        const handlers = this.messageHandlers[type]\r\n        if (!handlers.length) {\r\n            if (callbackMessages[type]?.needResponse) {\r\n                this.postMessageToAdc({\r\n                    uid,\r\n                    type: type + RESPONSE_SUFFIX,\r\n                    params: [],\r\n                    noHandlers: true,\r\n                })\r\n            }\r\n            return\r\n        }\r\n        const pendingResults = handlers.map(handler => {\r\n            try {\r\n                return handler(...params)\r\n            } catch (e) {\r\n                console.error(`@@@ Error in the event \"${type}\" handler:`, e)\r\n            }\r\n        })\r\n        if (callbackMessages[type]?.needResponse) {\r\n            utils.waitResolveAll(pendingResults).then(promiseResults => {\r\n                const positiveResults = promiseResults.reduce<any[]>((arr, result) => {\r\n                    if (\r\n                        result.status === 'fulfilled' &&\r\n                        result.value !== undefined\r\n                    ) {\r\n                        arr.push(result.value)\r\n                    }\r\n                    return arr\r\n                }, [])\r\n                const lastValue = positiveResults.length\r\n                    ? positiveResults[positiveResults.length - 1]\r\n                    : undefined\r\n                this.postMessageToAdc({\r\n                    uid,\r\n                    type: type + RESPONSE_SUFFIX,\r\n                    params: [lastValue],\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    private registerListeners() {\r\n        window.addEventListener('message', (e: MessageEvent) => {\r\n            if (e.origin !== this.adcFrameOrigin) {\r\n                return\r\n            }\r\n            const {type, uid, params} = e.data || {}\r\n            if (!type) {\r\n                return\r\n            }\r\n            e.stopImmediatePropagation()\r\n            try {\r\n                if (type === 'hello') {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.connectionEstablished = true\r\n                    const pingResponse = {\r\n                        uid,\r\n                        type: 'hi',\r\n                        params: [\r\n                            this.integrationKey,\r\n                            location.search,\r\n                            this.disableNewInteractionPopup,\r\n                        ],\r\n                    }\r\n                    if (!this.adcFrame?.contentWindow) {\r\n                        throw new Error('adcFrame is not defined - that should not be possible')\r\n                    }\r\n                    this.messageLoggers.forEach(log => log(pingResponse.type, pingResponse.params))\r\n                    this.adcFrame.contentWindow.postMessage(pingResponse, this.adcFrameOrigin)\r\n                    return\r\n                }\r\n                if (type === 'ready') {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.adcIsReady = true\r\n                    setTimeout(() => {\r\n                        this.pendingMessages.forEach(message => {\r\n                            this.postMessageToAdc(message)\r\n                        })\r\n                        this.pendingMessages = []\r\n                    })\r\n                    return\r\n                }\r\n\r\n                if (!this.adcIsReady) {\r\n                    return\r\n                }\r\n                if (Object.keys(callbackMessages).includes(type)) {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    this.handleIncomingMessage(type, uid, params)\r\n\r\n                } else if (requestResponseMessages.includes(type)) {\r\n                    this.messageLoggers.forEach(log => log(type, params))\r\n                    const waiting = this.responseCallbacks[type]\r\n                    if (waiting && waiting[uid]) {\r\n                        const callback = waiting[uid]\r\n                        delete waiting[uid]\r\n                        Promise.resolve().then(() => callback(params))\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error('@@@ Error: ', (err instanceof Error) ? err.message : `${err}`)\r\n            }\r\n        })\r\n    }\r\n\r\n    private runResponseTimeoutWatch<Result>(\r\n        type: RequestMessage,\r\n        uid: MessageUID,\r\n        resolve: (value: (OperationResult<Result> | PromiseLike<OperationResult<Result>>)) => void,\r\n    ) {\r\n        setTimeout(() => {\r\n            const callbacksMap = this.responseCallbacks[type + RESPONSE_SUFFIX]\r\n            if (callbacksMap[uid]) {\r\n                delete callbacksMap[uid]\r\n                const errorText = (\r\n                    `Response from Communicator for event \"${type}\" ` +\r\n                    `wasn't received in the specified timeout ${RESPONSE_TIMEOUT} ms`\r\n                )\r\n                console.error(`@@@ ${errorText}`)\r\n                resolve({\r\n                    status: 'error',\r\n                    error: {\r\n                        code: 6,\r\n                        name: 'api_not_answer',\r\n                        message: errorText,\r\n                    },\r\n                })\r\n            }\r\n        }, RESPONSE_TIMEOUT)\r\n    }\r\n\r\n    private postMessageToAdc(data: MessagePackage) {\r\n        if (this.adcFrame !== null && this.adcFrame.contentWindow && this.adcIsReady) {\r\n            this.messageLoggers.forEach(log => log(data.type, data.params))\r\n            if (data.type === 'LOGIN') {\r\n                console.log('@@@ ADAPTER SEND MESSAGE: LOGIN')\r\n            } else {\r\n                console.log('@@@ ADAPTER SEND MESSAGE: ', data)\r\n            }\r\n            this.adcFrame.contentWindow.postMessage(data, this.adcFrameOrigin)\r\n        } else {\r\n            console.log('@@@ ADAPTER: ADC is not ready, add pending message:', data)\r\n            this.pendingMessages.push(data)\r\n        }\r\n    }\r\n\r\n    private apiCall<Result>(type: RequestMessage, params: any[] = []) {\r\n        return new Promise<OperationResult<Result>>(resolve => {\r\n            const uid = uuid()\r\n            this.postMessageToAdc({uid, type, params})\r\n\r\n            const waiting = this.responseCallbacks[type + RESPONSE_SUFFIX]\r\n            waiting[uid] = resolve\r\n            this.runResponseTimeoutWatch(type, uid, resolve)\r\n        })\r\n    }\r\n\r\n    getLoginState(): Promise<OperationResult<LoginStateData>> {\r\n        return this.apiCall('GET_LOGIN_STATE')\r\n    }\r\n\r\n    login(loginData: LoginData, force?: boolean): Promise<OperationResult> {\r\n        return this.apiCall('LOGIN', [loginData, force])\r\n    }\r\n\r\n    logout(): Promise<OperationResult> {\r\n        return this.apiCall('LOGOUT')\r\n    }\r\n\r\n    getAgentState(): Promise<OperationResult<AgentStateData>> {\r\n        return this.apiCall<AgentStateData>('GET_AGENT_STATE')\r\n    }\r\n\r\n    setAgentState(state: AgentState, notReadyReason?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_AGENT_STATE', [state, notReadyReason])\r\n    }\r\n\r\n    acceptInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ACCEPT_INTERACTION', [interactionId])\r\n    }\r\n\r\n    rejectInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REJECT_INTERACTION', [interactionId])\r\n    }\r\n\r\n    startCall(phonenumber: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_CALL', [\r\n            phonenumber,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    startChat(channel: ChatChannelType, address: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_CHAT', [\r\n            channel,\r\n            address,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    startEmail(email: string, initialObjects?: InitialObjects): Promise<OperationResult<InitiateResult>> {\r\n        return this.apiCall('START_EMAIL', [\r\n            email,\r\n            !initialObjects\r\n                ? []\r\n                : initialObjects instanceof Array\r\n                    ? initialObjects\r\n                    : [initialObjects],\r\n        ])\r\n    }\r\n\r\n    sendDtmf(dtmf: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SEND_DTMF', [dtmf, interactionId])\r\n    }\r\n\r\n    consultCall(phone: string): Promise<OperationResult> {\r\n        return this.apiCall('CONSULT_CALL', [phone])\r\n    }\r\n\r\n    blindTransfer(phone: string, customTransferData?: CustomTransferData, integrationId?: string): Promise<OperationResult> {\r\n        return this.apiCall('BLIND_TRANSFER', [phone, customTransferData, integrationId])\r\n    }\r\n\r\n    transfer(customTransferData?: CustomTransferData): Promise<OperationResult> {\r\n        return this.apiCall('TRANSFER', [customTransferData])\r\n    }\r\n\r\n    leaveInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('LEAVE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    completeInteraction(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('COMPLETE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    leaveAndCompleteInteraction(disposition?: string, note?: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('LEAVE_AND_COMPLETE_INTERACTION', [disposition, note, interactionId])\r\n    }\r\n\r\n    switchActiveInteraction(interactionId: string): Promise<OperationResult> {\r\n        return this.apiCall('SWITCH_ACTIVE_INTERACTION', [interactionId])\r\n    }\r\n\r\n    inviteToCallConference(phone: string, customTransferData?: CustomTransferData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('INVITE_TO_CALL_CONFERENCE', [phone, customTransferData, interactionId])\r\n    }\r\n\r\n\r\n    removeFromCallConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REMOVE_FROM_CALL_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    destroyCallConference(interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('DESTROY_CALL_CONFERENCE', [interactionId])\r\n    }\r\n\r\n    inviteToChatConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('INVITE_TO_CHAT_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    removeFromChatConference(partyId: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REMOVE_FROM_CHAT_CONFERENCE', [partyId, interactionId])\r\n    }\r\n\r\n    mergeAllCallsIntoConference(customTransferData?: CustomTransferData): Promise<OperationResult> {\r\n        return this.apiCall('MERGE_ALL_CALLS_INTO_CONFERENCE', [customTransferData])\r\n    }\r\n\r\n    getTeams(): Promise<OperationResult<Team[]>> {\r\n        return this.apiCall('GET_TEAMS')\r\n    }\r\n\r\n    getTeamMembers(teamId: string): Promise<OperationResult<User[]>> {\r\n        return this.apiCall('GET_TEAM_MEMBERS', [teamId])\r\n    }\r\n\r\n    getServicesList(): Promise<OperationResult<ServiceData[]>> {\r\n        return this.apiCall('GET_SERVICES_LIST')\r\n    }\r\n\r\n    getService(): Promise<OperationResult<ServiceData | null>> {\r\n        return this.apiCall('GET_SERVICE')\r\n    }\r\n\r\n    setService(service: string | null): Promise<OperationResult> {\r\n        return this.apiCall('SET_SERVICE', [service])\r\n    }\r\n\r\n    getDIDNumbersList(): Promise<OperationResult<DIDNumber[]>> {\r\n        return this.apiCall('GET_DID_LIST')\r\n    }\r\n\r\n    getDIDNumber(): Promise<OperationResult<DIDNumber | null>> {\r\n        return this.apiCall('GET_DID')\r\n    }\r\n\r\n    setDIDNumber(did: string | null): Promise<OperationResult> {\r\n        return this.apiCall('SET_DID', [did])\r\n    }\r\n\r\n    getDispositionsList(target: DispositionTarget): Promise<OperationResult<DispositionData[]>> {\r\n        return this.apiCall('GET_DISPOSITIONS_LIST', [target])\r\n    }\r\n\r\n    setDisposition(disposition: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_DISPOSITION', [disposition, interactionId])\r\n    }\r\n\r\n    addNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ADD_NOTE', [note, interactionId])\r\n    }\r\n\r\n    updateNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('UPDATE_NOTE', [note, interactionId])\r\n    }\r\n\r\n    replaceNote(note: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('REPLACE_NOTE', [note, interactionId])\r\n    }\r\n\r\n    setRescheduleWindow(rescheduleData: RescheduleData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_RESCHEDULE', [rescheduleData, interactionId])\r\n    }\r\n\r\n    getConfig(): Promise<OperationResult<IntegrationConfig>> {\r\n        return this.apiCall('GET_CONFIG')\r\n    }\r\n\r\n    setVariable(key: string, value: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_VARIABLE', [key, value, interactionId])\r\n    }\r\n\r\n    getVariables(keys: string[], interactionId?: string): Promise<OperationResult<Record<string, string>>> {\r\n        return this.apiCall('GET_VARIABLES', [keys, interactionId])\r\n    }\r\n\r\n    addInteractionAssociatedObject(object: InteractionAssociatedObjectData, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('ADD_INTERACTION_ASSOCIATED_OBJECT', [object, interactionId])\r\n    }\r\n\r\n    setInteractionActiveScreen(screenData: InteractionScreen, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_INTERACTION_ACTIVE_SCREEN', [screenData, interactionId])\r\n    }\r\n\r\n    getPhoneDevicesList(): Promise<OperationResult<PhoneDevice[]>> {\r\n        return this.apiCall('GET_PHONE_DEVICES_LIST')\r\n    }\r\n\r\n    getPhoneDevice(): Promise<OperationResult<PhoneDeviceData>> {\r\n        return this.apiCall('GET_PHONE_DEVICE')\r\n    }\r\n\r\n    setPhoneDevice(phoneDevice: PhoneDeviceData): Promise<OperationResult> {\r\n        return this.apiCall('SET_PHONE_DEVICE', [phoneDevice])\r\n    }\r\n\r\n    setCallHold(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_HOLD', [state, interactionId])\r\n    }\r\n\r\n    setCallRecording(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_RECORDING', [state, interactionId])\r\n    }\r\n\r\n    setCallMute(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_MUTE', [state, interactionId])\r\n    }\r\n\r\n    setScreenRecordingMute(state: boolean): Promise<OperationResult> {\r\n        return this.apiCall('SET_SCREEN_RECORDING_MUTE', [state])\r\n    }\r\n\r\n    getScreenRecordingState(): Promise<OperationResult<ScreenRecordingState>> {\r\n        return this.apiCall('GET_SCREEN_RECORDING_STATE')\r\n    }\r\n\r\n    setWidgetMinimized(state: boolean): Promise<OperationResult> {\r\n        return this.apiCall('SET_WIDGET_MINIMIZED', [state])\r\n    }\r\n\r\n    sendChatMessage(message: string, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SEND_CHAT_MESSAGE', [message, interactionId])\r\n    }\r\n\r\n    suggestChatMessage(message: string, allowOverwrite?: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SUGGEST_CHAT_MESSAGE', [message, allowOverwrite, interactionId])\r\n    }\r\n\r\n    getAgentNotReadyReasons(): Promise<OperationResult<string[]>> {\r\n        return this.apiCall('GET_AGENT_NOT_READY_REASONS')\r\n    }\r\n\r\n    activatePage(): Promise<OperationResult> {\r\n        return this.apiCall('ACTIVATE_PAGE', [])\r\n    }\r\n\r\n    getInteractionsState(): Promise<OperationResult<InteractionsState>> {\r\n        return this.apiCall('GET_INTERACTIONS_STATE', [])\r\n    }\r\n\r\n    setCallRecordingMute(state: boolean, interactionId?: string): Promise<OperationResult> {\r\n        return this.apiCall('SET_CALL_RECORDING_MUTE', [state, interactionId])\r\n    }\r\n\r\n    setDialCandidates(candidates: DialCandidate[]): Promise<OperationResult> {\r\n        return this.apiCall('SET_DIAL_CANDIDATES', [candidates])\r\n    }\r\n\r\n    on(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    on(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    on(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    on(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    on(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    on(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    on(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    on(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    on(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    on(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    on(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    on(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    on(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    on(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    on(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    on(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    on(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    on(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    on(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    on(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    on(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    on(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    on(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    on(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    on(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n    on(message: CallbackMessage, handler: AnyEventHandler): void {\r\n        this.messageHandlers[message].push(handler)\r\n    }\r\n\r\n    remove(message: 'ON_LOGIN', handler: OnLoginHandler): void\r\n    remove(message: 'ON_LOGOUT', handler: OnLogoutHandler): void\r\n    remove(message: 'ON_NEW_INTERACTION', handler: OnNewInteractionHandler): void\r\n    remove(message: 'ON_INTERACTION_REMOVED', handler: OnInteractionRemovedHandler): void\r\n    remove(message: 'ON_INTERACTION_STATE_CHANGE', handler: OnInteractionStateChangeHandler): void\r\n    remove(message: 'ON_ACTIVE_INTERACTION_SWITCHED', handler: OnActiveInteractionSwitchHandler): void\r\n    remove(message: 'ON_AGENT_STATE_CHANGE', handler: OnAgentStateChangeHandler): void\r\n    remove(message: 'ON_REQUEST_TRANSFER_DATA', handler: OnRequestTransferDataHandler): void\r\n    remove(message: 'ON_LOAD_TRANSFER_DATA', handler: OnLoadTransferDataHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_FOLDER', handler: OnGetKnowledgeBaseFolderHandler): void\r\n    remove(message: 'ON_SEARCH_KNOWLEDGE_BASE', handler: OnSearchKnowledgeBaseHandler): void\r\n    remove(message: 'ON_GET_KNOWLEDGE_BASE_ARTICLE', handler: OnGetKnowledgeBaseArticleHandler): void\r\n    remove(message: 'ON_OPEN_RECORD', handler: OnOpenRecordHandler): void\r\n    remove(message: 'ON_SEARCH_RECORDS', handler: OnSearchRecordsHandler): void\r\n    remove(message: 'ON_SHOW_SCREEN', handler: OnShowScreenHandler): void\r\n    remove(message: 'ON_SCREEN_RECORDING_STATE_CHANGE', handler: OnScreenRecordingStateChangeHandler): void\r\n    remove(message: 'ON_WIDGET_MINIMIZED_CHANGE', handler: OnWidgetMinimizedChangeHandler): void\r\n    remove(message: 'ON_SERVER_ERROR', handler: OnServerErrorHandler): void\r\n    remove(message: 'ON_SOFTPHONE_STATUS_CHANGE', handler: OnSoftphoneStatusChangeHandler): void\r\n    remove(message: 'ON_AUDIO_DEVICE_CHANGE', handler: OnAudioDeviceChangeHandler): void\r\n    remove(message: 'ON_PHONE_CAPABILITIES_CHANGE', handler: OnPhoneCapabilitiesChangeHandler): void\r\n    remove(message: 'ON_CALL_AUDIO_QUALITY_ALERT', handler: OnCallAudioQualityAlertHandler): void\r\n    remove(message: 'ON_WEB_SCREEN_POP_CUSTOM', handler: OnWebScreenPopCustomHandler): void\r\n    remove(message: 'ON_SAVE_ACTIVITY_RECORD', handler: OnSaveActivityRecordHandler): void\r\n    remove(message: 'ON_VALIDATE_ASSOCIATED_RECORDS', handler: OnValidateAssociatedRecordsHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_INFO', handler: OnRequestRecordInfoHandler): void\r\n    remove(message: 'ON_REQUEST_RECORD_ON_SCREEN', handler: OnRequestRecordOnScreenHandler): void\r\n    remove(message: CallbackMessage, handler: AnyEventHandler): void {\r\n        const delIndex = this.messageHandlers[message].indexOf(handler)\r\n        if (delIndex !== -1) {\r\n            this.messageHandlers[message].splice(delIndex, 1)\r\n        }\r\n    }\r\n}\r\n\r\nwindow.brightpattern = {\r\n    AdApi: AgentDesktopClientAPIImpl,\r\n}\r\n"],"names":["utils","extractURLParams","url","paramsMap","paramUrl","split","slice","join","length","reduce","paramMap","param","splits","decodeURIComponent","shift","e","console","error","capitalize","str","replace","c","toUpperCase","findLast","array","predicate","i","shallowObjEqual","obj1","obj2","key","waitResolveAll","targets","Promise","resolve","reject","numberOfResolved","results","Array","map","target","forEach","targetPromise","index","then","value","status","catch","reason","finally","startsWithAny","base","prefixes","prefix","startsWith","splitWords","trim","word","data","requestMessages","callbackMessages","needResponse","RESPONSE_SUFFIX","requestResponseMessages","message","Object","keys","call","filter","v1","v4","uuid","module","exports","byteToHex","toString","substr","buf","offset","bth","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","rnds","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","pairs","result","pair","MINIMIZED_WIDGET_WIDTH","MAXIMIZED_WIDGET_WIDTH_DEFAULT","selfScriptUrl","document","currentScript","src","scripts","getElementsByTagName","adcOrigin","location","href","URL","origin","AgentDesktopClientAPIImpl","adcFrame","adcFrameOrigin","pendingMessages","connectionEstablished","adcIsReady","maximizedIframeWidth","messageHandlers","responseCallbacks","integrationKey","messageLoggers","disableNewInteractionPopup","this","fromPairs","messageType","prepareAdcIframe","registerListeners","on","widgetMinimized","getAttribute","setAttribute","valid","injectMessageLogger","logger","push","potentialFrame","HTMLIFrameElement","mountRoot","potentialMountRoot","HTMLElement","body","createElement","title","id","style","border","allow","onerror","standalone","width","height","zIndex","position","top","left","search","appendChild","handleIncomingMessage","type","uid","params","log","handlers","pendingResults","handler","promiseResults","positiveResults","arr","lastValue","postMessageToAdc","noHandlers","addEventListener","stopImmediatePropagation","pingResponse","contentWindow","postMessage","setTimeout","includes","waiting","callback","err","runResponseTimeoutWatch","callbacksMap","errorText","code","name","apiCall","getLoginState","login","loginData","force","logout","getAgentState","setAgentState","state","notReadyReason","acceptInteraction","interactionId","rejectInteraction","startCall","phonenumber","initialObjects","startChat","channel","address","startEmail","email","sendDtmf","dtmf","consultCall","phone","blindTransfer","customTransferData","integrationId","transfer","leaveInteraction","completeInteraction","leaveAndCompleteInteraction","disposition","note","switchActiveInteraction","inviteToCallConference","removeFromCallConference","partyId","destroyCallConference","inviteToChatConference","removeFromChatConference","mergeAllCallsIntoConference","getTeams","getTeamMembers","teamId","getServicesList","getService","setService","service","getDIDNumbersList","getDIDNumber","setDIDNumber","did","getDispositionsList","setDisposition","addNote","updateNote","replaceNote","setRescheduleWindow","rescheduleData","getConfig","setVariable","getVariables","addInteractionAssociatedObject","object","setInteractionActiveScreen","screenData","getPhoneDevicesList","getPhoneDevice","setPhoneDevice","phoneDevice","setCallHold","setCallRecording","setCallMute","setScreenRecordingMute","getScreenRecordingState","setWidgetMinimized","sendChatMessage","suggestChatMessage","allowOverwrite","getAgentNotReadyReasons","activatePage","getInteractionsState","setCallRecordingMute","setDialCandidates","candidates","remove","delIndex","indexOf","splice","brightpattern","AdApi"],"sourceRoot":""}