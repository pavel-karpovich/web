{"version":3,"file":"static/js/114.a60e0d51.chunk.js","mappings":"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","sources":["webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/CRMObjects/CrmRecordItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/CRMObjects/CrmRecords.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/CrmScreen.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/hooks/useSearchDisposition.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-jskit-ui/src/utils/useEvent.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-tailwind-classnames/src/tcn.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Dispositions/DispositionsListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Dispositions/DispositionsAccordion.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/hooks/useAccordionPanels.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Dispositions/DispositionsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Dispositions/DispositionSelect.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Notes/ResolutionNote.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useFavoriteTimeZoneInitializer.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useRescheduleFormOptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/CallProblemModal/CallProblemModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/RescueModal/styles/Rescue.module.less?a549","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/RescueModal/components/RescueModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/RescueModal/hooks/useOpenRescueModal.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/TimezonesModal/components/TimezonesModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/TimeZoneDropdown/useTimeZonesModalOpener.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/TimezonesModal/hooks/useOpenTimezonesModal.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/TimeZoneDropdown/useOptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/TimeZoneDropdown/useFavoriteTimeZones.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/TimeZoneDropdown/TimeZoneDropdown.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/TimeZoneDropdown/useHandleChange.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/DispositionRescheduleForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useRescheduleFormState.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useContactRecordInitializer.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useContactPhoneOptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/FormControls/ContactPhonesDropdown.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/ContactRecords/OtherPhoneFormGroup.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/ContactRecords/ExistingContactRecord.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/ContactRecords/NonExistingContactRecord.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/ContactRecords/ContactRecord.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/ContactRecords/ContactRecords.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/FormControls/CompletedCheckBox.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/FormControls/Reminder.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/FormControls/RescheduleDateTimeBlock.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/components/RescheduleForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/reschedule/hooks/useCurrentDatesInitializer.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/hooks/useShowDispositionRescheduleForm.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/hooks/useSelectedDispositionType.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/resolution/components/Resolution.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/constants.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useDomainAuthorizationPopup.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useInstallationRequiredPopup.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useOutdatedBrowserExtensionPopup.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useOutdatedClientNotification.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/usePhoneOutOfServiceNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/hooks.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useEmiErrorsNotifications.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useFailedCallNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useInteractionNotAcceptedNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/usePhoneDeviceNotDetectedNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/usePhoneTypeErrorNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useReservedForIncomingInteractionNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useWebRtcCallInChatErrorNotifications.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/interaction/useFavoritesLimitReachedError.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useOfflineNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useSipServerDisconnectedNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useSlowNetworkNotification.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-system-notifications/src/system/useUnauthorizedDomainNotification.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/AuthorizedConnectorsConsumers.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-login-ui/src/components/ForceLogout.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/UnauthorizedUI.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/AuthorizationUIRouter.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/BaseConnectorsConsumers.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/TopLevelProviders.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-authorization-module/src/AuthorizationModule.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-attachments-state/src/constants.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-attachments-state/src/useAttachmentsState.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-attachments-state/src/useAttachmentLink.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-attachments-state/src/provider-chat.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-attachments-state/src/provider-email.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/channel-context/useOptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/channel-context/state.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/channel-context/context.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/hooks/useLinkOpener.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/types/guards.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/helpers/common.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/helpers/getGroupChatAvatar.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesContext.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/MessageAction.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useGetFormattedClipboardMessage.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/useSelectionActions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithUnmaskAction.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithSelectionActions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/ChatMessagesSelectionActions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithAttachmentMaskAction.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/useFileMasker.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatMessagesActions/WithHoverOverActions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/selectors.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/UploadErrorModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useInitiateChatByAttachment.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/Dropzone.module.less?176d","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/Dropzone.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/useShowChecker.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/Dropzone/useOnDrop.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useFirstUnreadMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ScrollToFirstUnreadBadge.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useKeyDatesInserter.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useActivitiesMessagesTillCreatedTime.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useActivitiesAsMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useMessagesList.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedChatMessages.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageVoiceTranscript.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/useCallMessageVoiceTranscriptName.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/TranscriptDropdown.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/hooks/useTranscriptOptions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageRecording.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/hooks/useContentVoiceTranscript.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/EmptyCallMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/CallMessageContent/CallMessageContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/EmailMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/RemoteAssistMessage/RemoteAssistMessage.module.less?287e","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/RemoteAssistMessage/RemoteAssistMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/helpers.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedHistoryMessages.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/useMessages/useNormalizedMessagesWithDates.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/useMessagesLoader.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.module.less?6c5d","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/useExternalActivityHistoryLoaded.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/NoMessagesPlaceholder/NoMessagesPlaceholder.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/styles/Chat.module.less?1b39","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithTopInfo.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/WithOptionalNameAndAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/DotsTransforming.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingIndicator.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/TypingParties/TypingParties.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/VirtualizedMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useSaveScrollPositionEffect.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VirtualizedMessages/useInitialScrollPosition.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/MessageTopInfo.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ErrorMessage/ErrorMessage.module.less?abd0","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ErrorMessage/ErrorMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/DispositionMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/NotesMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/ActivityMessageGroup.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/ActivityMessageGroup/useDispositionTitle.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/bot-suggestion.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/facebook.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/line.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/sms.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/telegram.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/twitter.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/viber.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/web-chat.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/wechat.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/images/whatsapp.svg","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.module.less?42ff","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/Message.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/utils.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/utils.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/BotSuggestion.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/DateMessage/DateMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useMarkAsReadVisibilitySensor.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/AttachmentFileMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/AudioFileMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/ImageFileMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessageContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessage.module.less?2d03","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/FileMessage/FileMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/InviteMessage/InviteMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/InviteMessage/useHandleCancelInviteClick.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/LocationMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/OutboundMessagingCampaignMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PageLinkMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/VoiceTranscriptConfidence.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PlainMessage/PlainMessage.module.less?7f3d","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/PlainMessage/PlainMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/utils/utils.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/messages/SystemMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalChatMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/VirtualizedExternalMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalMessages.module.less?58d8","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalMessages/ExternalMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscriptContext.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/Filters.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.module.less?cdb5","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptVisibleMessages.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/messages/ChatMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/SearchResultHighlight.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VirtualizedVoiceTranscriptMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/useVoiceTranscriptMessagesContentMap.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscriptMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/ChannelSelector.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChannelSelector/useInitializeDefaultChannelEffect.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatTextArea.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAgentTypingDetect.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useAttachmentsList.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useHasMultipleLines.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/InvisibleAttachButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useChatMessages.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useMessageUpdater.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useControlsOptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.module.less?c331","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/ChatForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useGreeting.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ChatForm/useSmsMessageCounter.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/ExternalChat.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useChatFormVisible.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/external/useChatIsLoading.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/hooks/useBotSuggestionsLinksAutoOpener.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/Chat.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-chat-ui/src/components/SystemMessageUI.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/scroll-context/context.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/scroll-context/keys.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/web-user-activity-tracker.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/constants.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/calendar/CalendarHeader.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/calendar/Calendar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/utils/getNameFromParty.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Info.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/ChatTranscriptMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/utils/useMessage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Disposition.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/ChatPreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/EmailAttachment.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/EmailContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/EmailPreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/NotesPreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Reporter.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/images/phone.svg","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/VoicePreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Case.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/utils/helpers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Email.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/components/ServiceSelect.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/helpers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Avatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/AgentControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/DirectoryEntryControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/components/modals/AddEmailModal/AddEmailModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/components/modals/AddEmailModal/useOpenAddEmailModal.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/components/modals/AddPhoneModal/AddPhoneModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/components/modals/AddPhoneModal/useOpenAddPhoneModal.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/images/use-contact.svg","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/ExternalUserControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/hooks/useIsUseContactButtonVisible.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-contact-details/src/hooks/useHandleUseContact.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/MsTeamsChannelControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/MsTeamsChatControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetailsControls/ContactDetailsControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder/src/utils/createLeadMappingStringToFormValueMap.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder/src/utils/getAllFormFields.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder/src/utils/checkIsLayout.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder/src/utils/getFormElementMappingString.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/FormBuilderButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonPrivilegesChecker.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/FormBuilderButton/useButtonActionConditionsChecker.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/Image.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-form-builder-ui/src/components/Spacer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/FormElementView/FormElementView.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Header/Header.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Internal/DirectoryEntry.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Internal/User.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/hooks/useInternalUserData.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/modals/getGoBackWarningModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/Dropdown.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/SelectField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/TextField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/RemoveRow.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddressFieldArrayContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddRow.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/FieldArrayItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/FieldArray.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/AddressFieldArray.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/ViewItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/AddressListField/AddressListField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/TextArea.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/TextAreaField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/GeneralTextFormField/GeneralTextFormField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/AmountField/AmountField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/ButtonField/ButtonField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/CheckboxField/CheckboxFieldBase.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/CheckboxField/CheckboxField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/DateTimeField/DatePicker.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/DateTimeField/DateTimeField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/EmailField/EmailField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/HiddenField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/SelectAndTextFieldRow.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/EmailFieldArray.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/EmailListField/EmailListField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/ImageField/ImageField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/LabelField/LabelField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/LinkField/LinkField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/MessengerFieldItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/MessengersFieldArray.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/MessengersField/MessengersField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/NotesField/NotesField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/PhoneLink/PhoneLink.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/PhoneLink/usePhoneClickHandler.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/PhoneField/PhoneField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/common/FieldArray/PhonesFieldArray.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/PhoneListField/PhoneListField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/SelectField/SelectField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/SpacerField/SpacerField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/TextFormField/TextFormField.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/FormElementResolver.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormElementResolver/useConditionalFieldCheck.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/CompactForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormLayout.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/FormBuilder.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-form-builder/src/components/WideForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/ExternalEdit/ExternalEditControls/ExternalEditControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/ExternalEdit/ExternalEdit.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/hooks/useFormElements.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/hooks/useFormElementsToViews.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/modals/getDeleteWarningModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/hooks/useViewModeHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/ExternalView/ExternalViewControls/ExternalViewMoreButton/ExternalViewMoreButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/hooks/useExternalMoreButtonOptions.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/ExternalView/ExternalViewControls/ExternalViewControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/ExternalView/ExternalView.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/External/External.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Editing/EditingContactControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/Editing/EditingContactDetailsHeader.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/MergeContacts/ContactPreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/MergeContacts/useOnSubmit.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/MergeContacts/MergeContactsForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/MergeContacts/useSearchContactState.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/MergeContacts/MergeContacts.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/helpers/checkers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/helpers/getters.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/helpers/index.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/usePhoneNumberFormatter.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useFormatedPhone.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useQueryContacts/useInternalContacts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useQueryContacts/useQueryContacts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useQueryContacts/useExternalContacts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useQueryContacts/useCategoryItems.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useQueryContacts/useContactsLoader.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/KeyPadButtonContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/LongPressButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/KeyPad.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/useLetterBasedDialing.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/DialpadButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/External/CreateContactForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/useDirectoryFirstFoundItemAutoSelector.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/useDirectorySearch.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/useDirectoryEntryOnlineStatus.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/DirectoryEntryBody.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/DirectoryEntryControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/HuntGroupMetrics.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/ServiceMetrics.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/DirectoryEntryMetrics.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/directory-entry/DirectoryEntry.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/external-contact/ExternalContactBody.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/shared/ExternalContactInteractionButtonIcon.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/external-contact/ExternalContactControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/external-contact/ExternalContact.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/shared/InteractionButtonIcon.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/internal-user/InternalUserControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/internal-user/UserOnlineStatus.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/internal-user/InternalUser.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/types.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/msteams-channel/MsTeamsChannelControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/msteams-channel/MsTeamsChannel.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/msteams-user/MsTeamsUserControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/msteams-user/MsTeamsUser.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/DirectoryItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/user/useSubscribeForUserOrServiceDetails.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/External/ExternalUsersHeader.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/External/useExternalUserHighlight.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/External/ExternalUsers.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/constants.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/External/External.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/useDirectoryHandlerKeys.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/utils/index.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/DirectoryItems.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/SearchResults.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/helpers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/DirectoryFolderTitle.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useUsersList.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/DirectoryFolderItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useContentHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useDirectoryFoldersList.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/usePartyUsersFilter.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useOpenFoldersState.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/Internal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useAgentTeamsInitializer.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useFilteredDirectoryState.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useFilteredUsers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useTeamMembersLoader.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useOpenedTeamsRetrieverFromLocalStorage.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Internal/useToggleDirectoryFolder.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Combined/utils.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Combined/Combined.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/DirectoryTabs.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/hooks/useExternalContactFolderOpenerForSearchMode.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-communicator-ui-types/src/types.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/DirectorySearchControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/dial-candidates/PhoneOption.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/dial-candidates/useDialCandidatesPhonesDropdown.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/dial-candidates/CrmDialCandidate.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/dial-candidates/CrmDialCandidates.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/DialpadContacts.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/PhoneInput.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/DialpadForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/hooks/useFilteredAndSortedFavoritesList.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/FavoriteItemBody.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/FavoriteItemControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/FavoriteItemStats.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/getUniqueChannelId.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/useAvatar.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/FavoritesListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/hooks/useSubscribeForFavoriteItemDetails.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/FavoritesList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/useDetailsButtonClickHandler.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/FavoritesList/useItemClickHandler.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/styles/InteractionBar.module.less?9114","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/components/InteractionBarUnread.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/hooks/useUnreadAmount.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/components/InteractionsCount.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/hooks/useInteractionsCount.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/components/InteractionBar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/hooks/useActiveOrLastInteraction.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/bar/hooks/useInteractionBarText.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useAccessibleShortcuts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/usePagination.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useParallelChats.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/CompleteInteractionButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/EndButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/EndCallButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/EndChatButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/HoldButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/MicrophoneIcon.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/MuteButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/RecordButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/TransferButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/CompleteButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/useCompleteButtonTexts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/FlagButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-interaction-state-hooks/src/hooks/useOptimisticActivation.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/InternalChatWindowButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/hooks/useUnread.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/Unread.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/ButtonsOnHover.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/styles/InteractionsPage.module.less?9f82","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/Connecting.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/DisplayText.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/hooks/useDisplayContent.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/Failed.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/InteractionTypeImage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/hooks/useInteractionTypeIcon.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/IconAndTimer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/hooks/useShowTimerChecker.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/MonitorIcon.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/InteractionsListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListItem/hooks/useHandleKeyPress.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/AnimatedInteractionsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsListResizer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/Pagination.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/hooks/useCommunicatorContentHeight.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/hooks/useCommunicatorNavbarHeight.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/CalendarEventSlidingModal/CalendarEventSlidingModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/MergeContacts/MergeContactsSlidingModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/stateAtom.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/Footer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/state-recent-helpers/src/hooks/useConfPartiesToString.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/Header.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/RecentConferenceItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/RecentConferenceModalContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RecentConference/RecentConferenceSlidingModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/VoiceTranscriptModal/VoiceTranscriptModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/GlobalSldigingModalsListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/hooks/useGlobalModalStyles.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/GlobalSlidingModalsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/KeypadModal/useDtmfInputStateAndHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/KeypadModal/KeypadModalContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/KeypadModal/KeypadModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/kb/components/GlobalKB.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-jskit-ui/src/components/SlidingPanel/styles.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-jskit-ui/src/components/SlidingPanel/SlidingPanel.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/kb/components/InteractionKB.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/KnowledgeBaseSlidingModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/RescheduleSlidingModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/InteractionsTransfer/components/ActionButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/InteractionsTransfer/components/TransferModalFooter.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/useFilteredList.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/CRMObjectListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/CRMObjectsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/ExternalContactInteractionButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/IdentifiedContactContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/EmailForm/EmailForm.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/activity-selectors.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/ActivityChat.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/email-utils/email-address-validator.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/images/link.svg","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CopyCaseLinkButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/ActiveCase.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/TableHeaderContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/useBasicColumns.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/PersonalTab/useColumns.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/TeamTab/useColumns.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-case-ui/src/components/CasePage/JotaiProvider.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-interaction-workspace-ui/src/images/link.svg","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/utils.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/useSearchPageTabsActions.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/Cases/useCasesTableColumns.tsx","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/useContactsActions.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/useMergeContactsActions.ts","webpack://@bpinc/web-communicator-ui/../../packages/ad-searchpage-ui/src/Contacts/useContactTableColumns.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/useUpdateContactWithRecentChannel.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/CreateContactOptionsButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/recentToNewContact.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/UnidentifiedContactContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/contact-card/WithRecentContactCard.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentItemAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/useAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentItemBody.tsx","webpack://@bpinc/web-communicator-ui/../../packages/state-recent-helpers/src/hooks/useGroupChatMembersToString.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentItemControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentItemTitle.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentItemUnreadIndicator.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/isClickActionAvailable.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/useTransferRecentConferenceScrollManager.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/useContactsData.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/hooks/useItemAutoSelector.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/RecentSearchControls.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/recent/components/Recent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/InteractionsTransfer/components/TabContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/InteractionsTransfer/components/InteractionsTransfer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/InteractionsTransfer/hooks/useKeyboardShortcuts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/TransferModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/useAutoClose.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/modals/TransferModal/useHeader.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/InteractionsSlidingModalsListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/InteractionsSlidingModalsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/sliding-modal/hooks/useActiveTransferModalOpener.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveInteractionTitle.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/CallButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/RemoteAssistButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/ReportProblemButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/modals/CallProblemModal/useOpenCallProblemModal.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveInteractionTopButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useCallableItemChecker.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveItemAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useItemNames.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveItemDisplayName.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveItemPhone.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/helpers/useDisplayNameParticipant.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/helpers/helpers.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-interaction-buttons/src/DisconnectButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/InteractionParticipantsListItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/MultiAvatar.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/helpers/useAvatarParticipantsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/SelfItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionParticipantsList/InteractionParticipantsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/CallConferenceParties.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ChatConferenceParties.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/WorkitemDisplayContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveInteractionTop.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/ChatButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/SupervisorButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/useScheduleReminderOption.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/ShowMoreButton.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/useMoreButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/VoiceCallButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/buttons/WorkItemButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/prerecorded-messages/atoms.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/prerecorded-messages/PrerecordedItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/prerecorded-messages/PrerecordedList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/prerecorded-messages/PrerecordedMessagesModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/prerecorded-messages/PrerecordedMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/InteractionButtons.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/InteractionVideoWarning/InteractionVideoWarning.module.less?0ed4","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/InteractionVideoWarning/InteractionVideoWarning.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/InteractionVideoWarning/useCPUProfiling.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/InteractionVideo.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/active-interaction/ActiveInteractionControlPanel.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useRecentActivityHistoryUploader.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/ChatInWindowPlaceholder.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useAutoSelectTranscriptTab.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useInitialTabFromPageParams.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useTabs.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/PhoneNumberItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/WorkitemContacts.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/usePreviewRecordPhoneNumbers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/WorkitemDetails.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/EmptyActivityHistoryView.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/workitem/WorkitemHistory.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionTabContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionTabs.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/hooks/useAutoSelectResolutionTab.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InternalScenarioMessages.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/ActiveInteractionContentArea.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/interactions/page/components/InteractionsPage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useUnreadAmount.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/MainPageNav.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/MainPageTitle.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/styles/MainPage.module.less?e749","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CommunicatorContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/Dialpad.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/hooks/useSearchQueryFromPageParams.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/dialpad/components/useAccessibleShortcuts.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/favorites/components/Favorites.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/directory/components/Directory.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/cases/components/Cases.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/contact-details/components/ContactDetails.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/HelpPage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-notifications-ui/src/Notifications.module.less?3f89","webpack://@bpinc/web-communicator-ui/../../packages/lib-notifications-ui/src/Notifications.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app-minimized/components/AppMinimized.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/constants/index.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useRemoteAssistStateSubscription.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useStateSubscriptions.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useInteractionStateSubscription.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useInteractionChatStateSubscription.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useBPClientStateSubscription.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/state-subscription/useIntegrationApiSubscription.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/hooks/useHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/components/MenuItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/components/MainMenu.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/hooks/useMainMenu.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/components/UserProfilePreview/UserProfilePreview.module.less?ad6d","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/components/UserProfilePreview/UserProfilePreview.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/hooks/useSettingsMenu.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/hooks/useSettingsHandlers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/components/SettingsMenu.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/SidebarRight.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SideBarRight/hooks/useSidebarRightContent.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CompactNotificationModal/components/AriaDescription.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CompactNotificationModal/styles/CompactNotificationModal.module.less?e6d1","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CompactNotificationModal/components/NotificationItem.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CompactNotificationModal/hooks/useDisplayName.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/CompactNotificationModal/components/CompactNotificationModal.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/InteractionModalsAutoOpener.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/hooks/useNavigationTitle.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/DirectChatLinkSafariNotification.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/MainPageHeader.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/MainPageInteractionsList.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/SidebarLeft.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/components/MainPage.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useAppConfigCheckers.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useModulesImportByPrivileges.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useClosePanelsOnNofification.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useOpenSettingsOnPhoneSelectionDialogClosed.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/main-page/hooks/useMinimized.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/App/App.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-communicator-integration-api-connection/src/converters.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-communicator-integration-api-connection/src/pending-requests.ts","webpack://@bpinc/web-communicator-ui/../../packages/lib-communicator-integration-api-connection/src/authorized-api-connection.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/IntegrationApiAuthorizedInitializer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/lib-communicator-integration-api-connection/src/base-api-connection.ts","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/IntegrationApiBaseInitializer.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/CommunicatorApp.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/CommunicatorWidget/CommunicatorWidget.tsx","webpack://@bpinc/web-communicator-ui/../../packages/adc-ui/src/app/components/ParallelChatInteraction/ParallelChatInteraction.tsx"],"sourcesContent":["import React, {useCallback} from 'react'\r\n\r\nimport {useIntegrationApiStateMethods} from '@bpinc/ad-integration-api-state-context'\r\nimport type {InteractionAssociatedObject} from '@bpinc/ad-interaction-state-types'\r\nimport {SmCheckbox} from '@bpinc/lib-external-ui-elements'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype AssociatedCRMObjectCheckboxProps = {\r\n    record: InteractionAssociatedObject\r\n    checked: boolean\r\n    handleChange: (recordId: string) => void\r\n}\r\n\r\nexport const CrmRecordItem: React.FC<AssociatedCRMObjectCheckboxProps> = ({\r\n    record,\r\n    checked,\r\n    handleChange,\r\n}) => {\r\n\r\n    const {t} = useLocalizationState()\r\n    const {openRecord} = useIntegrationApiStateMethods()\r\n    const interactionId = useInteractionId()\r\n\r\n    const handleChangeCallback = useCallback(() => {\r\n        handleChange(record.id)\r\n    }, [handleChange, record.id])\r\n\r\n    const handleRecordClick = useCallback(() => {\r\n        openRecord(record, interactionId, {source: 'user', inNewTab: false})\r\n    }, [openRecord, record, interactionId])\r\n\r\n    return (\r\n        <li className=\"flex list-none items-center overflow-hidden\">\r\n            <SmCheckbox\r\n                id={record.id}\r\n                checked={checked}\r\n                onChange={handleChangeCallback}\r\n                data-testid=\"crm-object-item\"\r\n                {...(checked ? {'data-selected': 'true'} : undefined)}\r\n            />\r\n            <div\r\n                onClick={handleRecordClick}\r\n                className=\"ml-3 grow cursor-pointer truncate px-1.5 py-2.5 hover:bg-menu-bg-hover\"\r\n                title={t.DISPOSITION.resolution_crm_object_click_tooltip(record.displayName)}\r\n                data-testid=\"crm-object-name\"\r\n            >\r\n                {record.displayName}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CrmRecordItem} from './CrmRecordItem'\r\n\r\n\r\nexport const CrmRecords: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n\r\n    const {toggleAssociatedActivityRecord} = useInteractionStateMethods()\r\n\r\n    const {list, selected} = useInteractionProp(interactionId, activeItem => {\r\n        return activeItem?.associatedObjects ?? {list: [], selected: [], touched: false, primary: []}\r\n    })\r\n\r\n    const handleChange = useCallback((recordId: string) => {\r\n        assertDefined(interactionId)\r\n        toggleAssociatedActivityRecord(interactionId, recordId)\r\n    }, [toggleAssociatedActivityRecord, interactionId])\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"first:mt-4\">\r\n                {t.DISPOSITION.resolution_crm_objects_new_label()}\r\n            </h4>\r\n\r\n            <ul className=\"mb-3 mt-1.5 flex-[1_3_auto] overflow-auto rounded border border-main-border pl-4\">\r\n                {list.map(record => (\r\n                    <CrmRecordItem\r\n                        key={record.id}\r\n                        record={record}\r\n                        checked={selected.includes(record.id)}\r\n                        handleChange={handleChange}\r\n                    />\r\n                ))}\r\n                {!list.length && (\r\n                    <div className=\"mx-1.5 my-2.5\">\r\n                        {t.DISPOSITION.resolution_crm_objects_empty_label()}\r\n                    </div>\r\n                )}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {CrmRecords} from './CRMObjects/CrmRecords'\r\n\r\n\r\nexport const CrmScreen: React.FC = React.memo(function CrmPage() {\r\n    return (\r\n        <div className=\"flex flex-col flex-nowrap overflow-hidden\">\r\n            <CrmRecords />\r\n        </div>\r\n    )\r\n})\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {DispositionOption} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {useEvent} from '@bpinc/lib-jskit-ui/src/utils/useEvent'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useSearchDisposition(options: DispositionOption[]) {\r\n    const itemId = useInteractionId()\r\n\r\n    const {items, setItemState} = useInteractionUIState()\r\n\r\n    const searchValue = items[itemId]?.dispositionSearch ?? ''\r\n\r\n    const setSearch = useEvent(\r\n        function handleChangeCallback(value: string) {\r\n            setItemState(itemId, oldState => ({\r\n                ...oldState,\r\n                dispositionSearch: value,\r\n            }))\r\n        })\r\n\r\n\r\n    const optionsFilteredBySearch = useMemo(\r\n        function memoizeOptionsFilteredBySearch() {\r\n            if (!searchValue) return options\r\n\r\n            const searchValueMatchesDispositionFilter = searchValueMatchesDisposition(\r\n                searchValue,\r\n            )\r\n\r\n            return options\r\n                .filter(searchValueMatchesDispositionFilter)\r\n                .reduce(removeEmptyGroupLabelsReducer, [])\r\n        },\r\n        [options, searchValue],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                searchValue,\r\n                setSearch,\r\n                optionsFilteredBySearch,\r\n            }\r\n        },\r\n        [optionsFilteredBySearch, searchValue, setSearch],\r\n    )\r\n}\r\n\r\n//------------------Functions block------------------------------//\r\nfunction searchValueMatchesDisposition(searchValue: string) {\r\n    return function searchValueMatchesDispositionFilter(\r\n        disposition: DispositionOption,\r\n    ) {\r\n        if (disposition.isGroupLabel) return true\r\n\r\n        return disposition.label.toLowerCase().includes(searchValue.toLowerCase())\r\n    }\r\n}\r\n\r\nfunction removeEmptyGroupLabelsReducer(\r\n    dispositions: DispositionOption[],\r\n    disposition: DispositionOption,\r\n    index: number,\r\n    dispositionsList: DispositionOption[],\r\n) {\r\n    if (isEmptyGroupLabel(disposition, dispositionsList[index + 1])) {\r\n        return dispositions\r\n    }\r\n\r\n    dispositions.push(disposition)\r\n    return dispositions\r\n}\r\n\r\nfunction isEmptyGroupLabel(\r\n    disposition: DispositionOption,\r\n    nextDisposition?: DispositionOption,\r\n) {\r\n    return (\r\n        disposition.isGroupLabel &&\r\n        (!nextDisposition || nextDisposition.isGroupLabel)\r\n    )\r\n}\r\n","import {useCallback, useRef} from 'react'\r\n\r\n// eslint-disable-next-line\r\ntype AnyFunction = (...args: any[]) => any\r\n\r\n/**\r\n * A custom hook that ensures a stable function reference across component re-renders.\r\n * This can be useful when passing callbacks to deeply nested child components that rely on\r\n * reference equality to prevent unnecessary renders.\r\n *\r\n * @param fn - The function for which to maintain a stable reference.\r\n * @returns A callback function with a stable reference, which calls the provided function `fn`.\r\n *\r\n * @template F - The type of the function provided to the hook. It must extend AnyFunction.\r\n *\r\n * @example\r\n * const handleClick = useEvent(() => {\r\n *   console.log('Button clicked');\r\n * });\r\n *\r\n * // `handleClick` can now be passed as a prop without causing unnecessary re-renders\r\n * // due to reference changes.\r\n */\r\nexport function useEvent<F extends AnyFunction>(fn: F): F {\r\n    const fnRef = useRef(fn)\r\n    // Update the current ref to the latest version of `fn` on each render\r\n    fnRef.current = fn\r\n\r\n    // `useCallback` is used here to return a memoized version of the function\r\n    // that only changes if one of the dependencies has changed. In this case,\r\n    // the dependency array is empty, so it never changes.\r\n    return useCallback((...args: Parameters<F>): ReturnType<F> => {\r\n        // Call the latest version of `fn` using the current parameters\r\n        return fnRef.current(...args)\r\n    }, []) as F\r\n}\r\n","import cn from 'classnames'\r\nimport {twMerge} from 'tailwind-merge'\r\n\r\n\r\nexport function tcn(...classnames: cn.ArgumentArray) {\r\n    return twMerge(cn(classnames))\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {DispositionOption} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {highlighted} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface DispositionsListItemProps {\r\n    className?: string\r\n    value: string\r\n    label: string\r\n    isGroupLabel?: boolean\r\n    highlight?: string\r\n    onSelect: (option: DispositionOption) => void\r\n}\r\n\r\nexport const DispositionsListItem: React.FC<DispositionsListItemProps> = props => {\r\n    const {\r\n        value,\r\n        label,\r\n        isGroupLabel,\r\n        highlight,\r\n        onSelect,\r\n    } = props\r\n\r\n    const selectDisposition = useCallback(() => {\r\n        onSelect({value, label})\r\n    }, [onSelect, value, label])\r\n\r\n    const resolutionsListItemClassName = tcn(\r\n        'state-layer-bg-neutral-0',\r\n        'hover:state-layer-mix-dark-on-white-1',\r\n        'focus:state-layer-mix-dark-on-white-2',\r\n        'data-[selected=true]:state-layer-mix-dark-on-white-2',\r\n        'active:state-layer-mix-dark-on-white-3',\r\n        'flex w-full py-2.5 pl-9 pr-3',\r\n    )\r\n\r\n    const className = tcn(resolutionsListItemClassName, {\r\n        'pointer-events-none font-bold': isGroupLabel,\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            data-selectable=\"dispositions-accordion\"\r\n            onClick={selectDisposition}\r\n            key={value}\r\n            tabIndex={isGroupLabel ? -1 : 0}\r\n            className={className}\r\n            data-testid=\"disposition-option\"\r\n        >\r\n            {isGroupLabel ? label : highlighted({highlight, text: label})}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect, useState} from 'react'\r\nimport * as Accordion from '@radix-ui/react-accordion'\r\nimport produce from 'immer'\r\n\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\nimport type {DispositionOption} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {IconChevronRight16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {useAccordionPanels} from '../../hooks/useAccordionPanels'\r\n\r\n\r\nexport interface DispositionsAccordionProps {\r\n    list: DispositionOption[]\r\n    searchValue: string | undefined\r\n    onSelect: (option: DispositionOption) => void\r\n    selectedDisposition: DispositionOption\r\n    className?: string\r\n}\r\n\r\nexport const DispositionsAccordion: FC<DispositionsAccordionProps> = props => {\r\n    const {\r\n        className,\r\n        searchValue,\r\n    } = props\r\n\r\n    const panels = useAccordionPanels(props)\r\n\r\n    const [visiblePanels, setVisiblePanels] = useState(\r\n        () => panels.map(p => p.value),\r\n    )\r\n\r\n    const prevPanels = usePrevious(panels)\r\n    useEffect(function setInitialVisiblePanels() {\r\n        if (!prevPanels?.length && panels.length && !visiblePanels.length) {\r\n            const initialPanels = panels.map(p => p.value)\r\n            setVisiblePanels(initialPanels)\r\n            setVisiblePanelsDuringSearch(initialPanels)\r\n        }\r\n    }, [panels, prevPanels?.length, visiblePanels.length])\r\n\r\n    const [visiblePanelsDuringSearch, setVisiblePanelsDuringSearch] = useState(visiblePanels)\r\n\r\n\r\n    useEffect(function openClosedFoldersIfSearchMatches() {\r\n        if (!searchValue) {\r\n            setVisiblePanelsDuringSearch(visiblePanels)\r\n            return\r\n        } else {\r\n            const matchingPanels = panels.filter(panel =>\r\n                panel.content.some(item => item.text.toLowerCase().includes(searchValue.toLowerCase())),\r\n            )\r\n            setVisiblePanelsDuringSearch(produce(draft => {\r\n                matchingPanels.forEach(panel => {\r\n                    if (!draft.includes(panel.value)) {\r\n                        draft.push(panel.value)\r\n                    }\r\n                })\r\n            }))\r\n        }\r\n    }, [panels, props, searchValue, visiblePanels])\r\n\r\n\r\n    return (\r\n        <Accordion.Root\r\n            type=\"multiple\"\r\n            className={className}\r\n            value={searchValue ? visiblePanelsDuringSearch : visiblePanels}\r\n            onValueChange={searchValue ? setVisiblePanelsDuringSearch : setVisiblePanels}\r\n        >\r\n            {panels.map(panel => (\r\n                <Accordion.Item\r\n                    key={panel.value}\r\n                    value={panel.value}\r\n                    className=\"caption-s\"\r\n                >\r\n                    <Accordion.Header>\r\n                        <Accordion.Trigger\r\n                            data-testid=\"disposition-item-header\"\r\n                            data-selectable=\"dispositions-accordion\"\r\n                            className={tcn(\r\n                                'group flex w-full gap-2 px-3 py-2.5',\r\n                                'state-layer-bg-neutral-0',\r\n                                'hover:state-layer-mix-dark-on-white-1',\r\n                                'focus:state-layer-mix-dark-on-white-2',\r\n                                'data-[selected=true]:state-layer-mix-dark-on-white-2',\r\n                                'active:state-layer-mix-dark-on-white-3',\r\n                            )}\r\n                        >\r\n                            <IconChevronRight16 className=\"group-data-[state=open]:rotate-90\" />\r\n                            <span className=\"font-semibold\">{panel.title}</span>\r\n                        </Accordion.Trigger>\r\n                    </Accordion.Header>\r\n                    <Accordion.Content>{panel.content.map(c => c.element)}</Accordion.Content>\r\n                </Accordion.Item>\r\n            ))}\r\n        </Accordion.Root>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport type {DispositionsAccordionProps} from '../components/Dispositions/DispositionsAccordion'\r\nimport {DispositionsListItem} from '../components/Dispositions/DispositionsListItem'\r\n\r\n\r\ntype Panel = {\r\n    title: string\r\n    value: string\r\n    content: Array<{\r\n        element: ReactElement\r\n        text: string\r\n    }>\r\n}\r\n\r\nexport function useAccordionPanels({\r\n    list,\r\n    searchValue,\r\n    ...listItemProps\r\n}: DispositionsAccordionProps) {\r\n    return useMemo(\r\n        function memoizeListForAccordion() {\r\n            let panel: Panel | undefined\r\n\r\n            return list.reduce<Panel[]>((acc, disposition, index, array) => {\r\n                if (disposition.isGroupLabel) {\r\n                    if (panel?.content.length) {\r\n                        addPanelToPanels()\r\n                    }\r\n                    panel = createPanel()\r\n                } else {\r\n                    extendPanelContent()\r\n                    if (isLastElement()) {\r\n                        addPanelToPanels()\r\n                    }\r\n                }\r\n\r\n                return acc\r\n\r\n                function isLastElement() {\r\n                    return index === array.length - 1\r\n                }\r\n                function extendPanelContent() {\r\n                    panel?.content.push({\r\n                        text: disposition.label,\r\n                        element: (\r\n                            <DispositionsListItem\r\n                                {...disposition}\r\n                                {...listItemProps}\r\n                                highlight={searchValue}\r\n                                key={disposition.value}\r\n                            />\r\n                        ),\r\n                    })\r\n                }\r\n                function addPanelToPanels() {\r\n                    return panel && acc.push(panel)\r\n                }\r\n                function createPanel() {\r\n                    return {\r\n                        value: disposition.value,\r\n                        title: disposition.label,\r\n                        content: [],\r\n                    }\r\n                }\r\n            }, [])\r\n        },\r\n        [searchValue, list, listItemProps],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmList} from '@bpinc/lib-external-ui-elements'\r\nimport type {DispositionOption} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {DispositionsListItem} from './DispositionsListItem'\r\n\r\n\r\ninterface DispositionsListProps {\r\n    list: DispositionOption[]\r\n    highlight?: string\r\n    onSelect: (option: DispositionOption) => void\r\n    selectedDisposition: DispositionOption\r\n    className?: string\r\n}\r\n\r\nexport const DispositionsList: React.FC<DispositionsListProps> = React.memo(function DispositionsList({\r\n    list,\r\n    className,\r\n    ...props\r\n}) {\r\n    return (\r\n        <SmList\r\n            className={tcn(className, 'mt-[8.5px] max-h-[200px] flex-auto overflow-auto rounded border border-main-border')}\r\n            divided\r\n            verticalAlign=\"middle\"\r\n            data-testid=\"available-dispositions\"\r\n        >\r\n            {list.map(dispositionOption => (\r\n                <DispositionsListItem key={dispositionOption.value} {...props} {...dispositionOption} />\r\n            ))}\r\n        </SmList>\r\n    )\r\n})\r\n","import React, {useEffect, useRef} from 'react'\r\nimport * as Popover from '@radix-ui/react-popover'\r\n\r\nimport {useBoolean, useEvent} from '@bpinc/lib-helpers'\r\nimport type {DispositionOption} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {useDispositionSelect} from '@bpinc/lib-interaction-ui-hooks'\r\nimport {FieldFrame, FieldLayout, IconArrowDown16, Input} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n//TODO: Move DispositionRescheduleForm closer to components that use it?\r\nimport {useSearchDisposition} from '../../hooks/useSearchDisposition'\r\nimport type {DispositionSelectProps} from '../../types'\r\nimport {DispositionsAccordion} from './DispositionsAccordion'\r\nimport {DispositionsList} from './DispositionsList'\r\n\r\n\r\nexport const DispositionSelect: React.FC<DispositionSelectProps> = React.memo(\r\n    function DispositionSelect({dispositionsListClassName, accordion}) {\r\n        const {t} = useLocalizationState()\r\n        const {\r\n            options,\r\n            value: selectedDisposition,\r\n            onSelect,\r\n            dispositionRequired,\r\n            defaultOption,\r\n        } = useDispositionSelect()\r\n        const {searchValue, setSearch, optionsFilteredBySearch} =\r\n            useSearchDisposition(options)\r\n\r\n        const searchOpened = useBoolean()\r\n        const notifications = useNotificationsState('notifications')\r\n        const dispositionNotSelectedError = notifications[Notifications.DispositionNotSelectedError]\r\n\r\n\r\n        const handleSelect = useEvent((option: DispositionOption) => {\r\n            onSelect(option)\r\n            setSearch(option.label)\r\n            searchOpened.setFalse()\r\n        })\r\n\r\n        const inputRef = useRef<HTMLInputElement>(null)\r\n        const popoverContentRef = useRef<HTMLDivElement>(null)\r\n\r\n        const focusInput = useEvent(() => {\r\n            inputRef.current?.focus()\r\n            searchOpened.setTrue()\r\n        })\r\n\r\n        useEffect(function focusInputOnError() {\r\n            if (dispositionNotSelectedError) {\r\n                focusInput()\r\n            }\r\n        }, [dispositionNotSelectedError, focusInput])\r\n\r\n        return (\r\n            <Popover.Root\r\n                open={searchOpened.value}\r\n                onOpenChange={searchOpened.toggle}\r\n            >\r\n                <Popover.Trigger\r\n                    asChild\r\n                    className=\"group\"\r\n                    onClick={e => {\r\n                        e.preventDefault()\r\n                        inputRef.current?.focus()\r\n                        searchOpened.setTrue()\r\n                    }}\r\n                    onKeyDown={e => {\r\n                        switch (e.key) {\r\n                            case 'ArrowDown':\r\n                                if (e.currentTarget.dataset.state === 'closed') {\r\n                                    e.preventDefault()\r\n                                    openWithSelection()\r\n                                    return\r\n                                }\r\n                                selectNextItem('down')\r\n                                break\r\n                            case 'ArrowUp':\r\n                                e.preventDefault()\r\n                                selectNextItem('up')\r\n                                break\r\n                            case 'Enter':\r\n                                e.preventDefault()\r\n                                if (e.currentTarget.dataset.state === 'open') {\r\n                                    const validOptions = optionsFilteredBySearch.filter(o => !o.isGroupLabel)\r\n                                    const onlyOneOption = validOptions.length === 1\r\n\r\n                                    if (onlyOneOption) {\r\n                                        handleSelect(validOptions[0])\r\n                                        searchOpened.setFalse()\r\n                                        return\r\n                                    }\r\n                                    clickSelectedItem()\r\n                                } else {\r\n                                    openWithSelection()\r\n                                }\r\n                                break\r\n                            case 'Escape':\r\n                                e.preventDefault()\r\n                                e.stopPropagation()\r\n                                searchOpened.setFalse()\r\n                                break\r\n                            default: {\r\n                                const isPrintableKey = e.key.length === 1 && (e.key.match(/\\S/))\r\n\r\n                                if (isPrintableKey || e.key === 'Backspace') {\r\n                                    searchOpened.setTrue()\r\n                                    onSelect(defaultOption)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        function selectNextItem(direction: 'up' | 'down') {\r\n                            const selectableItems = Array.from(\r\n                                popoverContentRef.current?.querySelectorAll('[data-selectable=\"dispositions-accordion\"]') ?? [],\r\n                            )\r\n                            const selectedIndex = selectableItems.findIndex(i => i.hasAttribute('data-selected'))\r\n\r\n                            if (selectedIndex === -1) {\r\n                                selectableItems[0]?.setAttribute('data-selected', 'true')\r\n                            } else {\r\n                                selectableItems[selectedIndex].removeAttribute('data-selected')\r\n                                const nextIndex = direction === 'down'\r\n                                    ? (selectedIndex + 1) % selectableItems.length\r\n                                    : (selectedIndex - 1 + selectableItems.length) % selectableItems.length\r\n                                selectableItems[nextIndex].setAttribute('data-selected', 'true')\r\n                                selectableItems[nextIndex].scrollIntoView()\r\n                            }\r\n                        }\r\n\r\n                        function clickSelectedItem() {\r\n                            const selectedElement = popoverContentRef.current?.querySelector('[data-selected=\"true\"]')\r\n                            if (selectedElement instanceof HTMLElement) {\r\n                                selectedElement.click()\r\n                            }\r\n                        }\r\n\r\n                        function openWithSelection() {\r\n                            searchOpened.setTrue()\r\n                            setTimeout(() => {\r\n                                selectNextItem('down')\r\n                            })\r\n                        }\r\n\r\n                    }}\r\n                >\r\n                    <FieldLayout\r\n                        error={dispositionNotSelectedError?.message}\r\n                        label={t.GLOBAL.disposition()}\r\n                        className=\"w-full\"\r\n                        required={dispositionRequired}\r\n                    >\r\n                        <FieldFrame\r\n                            focused={searchOpened.value}\r\n                            error={Boolean(dispositionNotSelectedError)}\r\n                            rightPrefix={\r\n                                <IconArrowDown16 className=\"cursor-pointer group-data-[state=open]:rotate-180\" />\r\n                            }\r\n                        >\r\n                            <Input\r\n                                ref={inputRef}\r\n                                placeholder={t.DISPOSITION.select_disposition()}\r\n                                autoFocus\r\n                                value={searchValue}\r\n                                onChange={e => setSearch(e.target.value)}\r\n                                onBlur={() => {\r\n                                    if (\r\n                                        searchValue !==\r\n                                            selectedDisposition.label\r\n                                    ) {\r\n                                        setSearch('')\r\n                                    }\r\n                                }}\r\n                                aria-label={t.DISPOSITION.disposition_search_input_hint()}\r\n                                data-testid=\"disposition-search-input\"\r\n                            />\r\n                        </FieldFrame>\r\n                    </FieldLayout>\r\n                </Popover.Trigger>\r\n                <Popover.Portal>\r\n                    <Popover.Content\r\n                        ref={popoverContentRef}\r\n                        sideOffset={2}\r\n                        collisionPadding={20}\r\n                        className=\"w-[--radix-popover-trigger-width] border shadow-2  border-default\"\r\n                        onOpenAutoFocus={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        {!!optionsFilteredBySearch.length && (\r\n                            <>\r\n                                {accordion ? (\r\n                                    <DispositionsAccordion\r\n                                        className={\r\n                                            dispositionsListClassName\r\n                                        }\r\n                                        selectedDisposition={\r\n                                            selectedDisposition\r\n                                        }\r\n                                        onSelect={handleSelect}\r\n                                        list={optionsFilteredBySearch}\r\n                                        searchValue={searchValue}\r\n                                    />\r\n                                ) : (\r\n                                    <DispositionsList\r\n                                        className={\r\n                                            dispositionsListClassName\r\n                                        }\r\n                                        selectedDisposition={\r\n                                            selectedDisposition\r\n                                        }\r\n                                        onSelect={handleSelect}\r\n                                        list={optionsFilteredBySearch}\r\n                                        highlight={searchValue}\r\n                                    />\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </Popover.Content>\r\n                </Popover.Portal>\r\n            </Popover.Root>\r\n        )\r\n    },\r\n)\r\n","import type {ChangeEvent} from 'react'\r\nimport React, {useCallback, useEffect, useRef, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {\r\n    useInteractionProp,\r\n    useInteractionStateConnector,\r\n    useInteractionStateMethods,\r\n} from '@bpinc/ad-interaction-state-context'\r\nimport {getItemLastNote} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {TextAreaField} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ResolutionNoteProps} from '../../types'\r\n\r\n\r\nconst NOTES_MAX_LENGTH = 3000\r\nconst HIDE_ERROR_BLUR_TIMEOUT = 2000\r\n\r\nexport const ResolutionNote: React.FC<ResolutionNoteProps> = React.memo(function ResolutionNote({\r\n    layoutClassName,\r\n}) {\r\n    const interactionId = useInteractionId()\r\n    const synchronizedNotes = useInteractionProp(interactionId, getItemLastNote)\r\n    const [note, setNote] = useState(synchronizedNotes)\r\n\r\n    const {updateNote: setNoteSynched} = useInteractionStateMethods()\r\n    const debouncedSetNoteSynched = useRef(debounce(setNoteSynched, 300)).current\r\n    const {t} = useLocalizationState()\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n\r\n    useEffect(function subscribeToNoteUpdates() {\r\n        const subscription = interactionStateConnector?.dispenser.subscribe({\r\n            onNoteUpdated: (itemId, newNote) => {\r\n                if (itemId === interactionId) {\r\n                    setNote(newNote)\r\n                }\r\n            },\r\n        })\r\n\r\n        return () => {\r\n            subscription?.unsubscribe()\r\n        }\r\n    }, [interactionId, interactionStateConnector?.dispenser])\r\n\r\n    const handleChange = useCallback(\r\n        (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n            const notes = event.target.value\r\n\r\n            const validatedNotes = validateNotes()\r\n\r\n            debouncedSetNoteSynched({itemId: interactionId, note: validatedNotes})\r\n            setNote(validatedNotes)\r\n\r\n            //===\r\n            function validateNotes() {\r\n                if (notes.length > NOTES_MAX_LENGTH) {\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.NotesLengthExceededError,\r\n                        tags: ['current-view'],\r\n                        message: t.DISPOSITION.notes_length_error_text(String(NOTES_MAX_LENGTH)),\r\n                    })\r\n                    return notes.substring(0, NOTES_MAX_LENGTH)\r\n                } else {\r\n                    hideNotificationById(Notifications.NotesLengthExceededError)\r\n                    return notes\r\n                }\r\n            }\r\n        },\r\n        [interactionId, debouncedSetNoteSynched, hideNotificationById, showNotification, t.DISPOSITION],\r\n    )\r\n\r\n    const handleBlur = useCallback(\r\n        function handleBlurCallback(evt: React.FocusEvent<HTMLTextAreaElement>) {\r\n            setNoteSynched({itemId: interactionId, note: evt.target.value})\r\n            setTimeout(() => {\r\n                hideNotificationById(Notifications.NotesLengthExceededError)\r\n            }, HIDE_ERROR_BLUR_TIMEOUT)\r\n        },\r\n        [interactionId, hideNotificationById, setNoteSynched],\r\n    )\r\n\r\n    return (\r\n        <TextAreaField\r\n            value={note}\r\n            textAreaClassName=\"min-h-[85px]\"\r\n            label={t.DISPOSITION.note()}\r\n            layoutClassName={layoutClassName}\r\n            placeholder={t.DISPOSITION.write_a_note()}\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            data-testid=\"notes-textarea\"\r\n        />\r\n    )\r\n})\r\n","import {useEffect, useMemo} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useAllTimezones, useFavoritesTimezones, useTimezonesStateMethods} from '@bpinc/ad-timezones-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\n\r\ninterface UseFavoriteTimeZoneInitializer {\r\n    additionalOnInitializeHandler: (suggestedTimeZoneId: string) => void\r\n}\r\n\r\nexport function useFavoriteTimeZoneInitializer({additionalOnInitializeHandler}: UseFavoriteTimeZoneInitializer) {\r\n    const allTimezones = useAllTimezones()\r\n    const favoriteTimezones = useFavoritesTimezones()\r\n    const timezonesMethods = useTimezonesStateMethods()\r\n    const interactionId = useInteractionId()\r\n    const activeInteraction = useInteraction(interactionId)\r\n\r\n    const suggestedTimezone =\r\n        get(activeInteraction, 'workitemData.suggestedTz') ||\r\n        get(favoriteTimezones[0], 'name') ||\r\n        get(allTimezones[0], 'name')\r\n\r\n    const suggestedTimezoneData = useMemo(function memoizeSuggestedTimezoneData() {\r\n        return allTimezones.find(\r\n            tz => tz.id === suggestedTimezone,\r\n        )\r\n    }, [allTimezones, suggestedTimezone])\r\n\r\n    useEffect(() => {\r\n        const suggestedTimeZoneId = get(suggestedTimezoneData, 'id')\r\n        if (suggestedTimezoneData && suggestedTimeZoneId) {\r\n            additionalOnInitializeHandler(suggestedTimeZoneId)\r\n            timezonesMethods.addToFavorites(suggestedTimezoneData)\r\n        }\r\n    }, [additionalOnInitializeHandler, suggestedTimezoneData, timezonesMethods])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {addTime, formatDate} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype RescheduleOption = {\r\n    id: number\r\n    name: string\r\n    getDateAndTime: () => {newTime: string; newDate: string}\r\n}\r\n\r\nconst rescheduleDateFormat = 'L'\r\nconst rescheduleTimeFormat = 'LT'\r\n\r\nexport function useRescheduleFormOptions() {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo<RescheduleOption[]>(() => [\r\n        {\r\n            id: 1,\r\n            name: t.RESCHEDULE.rsc_afternoon(),\r\n            getDateAndTime: () => {\r\n                const newTime = '12:00'\r\n                const newDate = formatDate(\r\n                    addTime(new Date(), 'days', new Date().getHours() >= 12 ? 1 : 0),\r\n                    rescheduleDateFormat,\r\n                )\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 2,\r\n            name: t.RESCHEDULE.rsc_evening(),\r\n            getDateAndTime: () => {\r\n                const newTime = '18:00'\r\n                const newDate = formatDate(\r\n                    addTime(new Date(), 'days', new Date().getHours() >= 18 ? 1 : 0),\r\n                    rescheduleDateFormat,\r\n                )\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 3,\r\n            name: t.RESCHEDULE.rsc_tomorrowMorning(),\r\n            getDateAndTime: () => {\r\n                const newTime = '09:00'\r\n                const newDate = formatDate(addTime(new Date(), 'days', 1), rescheduleDateFormat)\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 4,\r\n            name: t.RESCHEDULE.rsc_tomorrowAfternoon(),\r\n            getDateAndTime: () => {\r\n                const newTime = '12:00'\r\n                const newDate = formatDate(addTime(new Date(), 'days', 1), rescheduleDateFormat)\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 5,\r\n            name: t.RESCHEDULE.rsc_tomorrowEvening(),\r\n            getDateAndTime: () => {\r\n                const newTime = '18:00'\r\n                const newDate = formatDate(addTime(new Date(), 'days', 1), rescheduleDateFormat)\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 6,\r\n            name: t.RESCHEDULE.rsc_in1hour(),\r\n            getDateAndTime: () => {\r\n                const date = addTime(new Date(), 'hours', 1)\r\n                const newTime = formatDate(date, rescheduleTimeFormat)\r\n                const newDate = formatDate(date, rescheduleDateFormat)\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n        {\r\n            id: 7,\r\n            name: t.RESCHEDULE.rsc_in2hours(),\r\n            getDateAndTime: () => {\r\n                const date = addTime(new Date(), 'hours', 2)\r\n                const newTime = formatDate(date, rescheduleTimeFormat)\r\n                const newDate = formatDate(date, rescheduleDateFormat)\r\n                return {newTime, newDate}\r\n            },\r\n        },\r\n    ], [t])\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\n\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {isHTMLInputElement} from '@bpinc/lib-html-utils'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Modal, Radio, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ninterface Option {\r\n    label: string\r\n    value: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const CallProblemModal: React.FC<CommonModalProps> = ({onClose, ...other}) => {\r\n    const {t} = useLocalizationState()\r\n    const {reportProblemItem} = useInteractionStateMethods()\r\n    const interactionId = useInteractionId()\r\n    const itemIsAfterCallWork = useInteractionProp(interactionId, isAfterCallWork)\r\n\r\n    const options = useMemo(\r\n        function getOptions() {\r\n            return [\r\n                {\r\n                    value: 'POOR_VOICE_QUALITY',\r\n                    label: t.CALL_DETAILS_FORM.rcp_option_poor_voice(),\r\n                },\r\n                {\r\n                    value: 'CALL_WENT_SILENT',\r\n                    label: t.CALL_DETAILS_FORM.rcp_option_silent(),\r\n                },\r\n                {\r\n                    value: 'CALL_DROPPED',\r\n                    label: t.CALL_DETAILS_FORM.rcp_option_dropped(),\r\n                    disabled: !itemIsAfterCallWork,\r\n                },\r\n                {\r\n                    value: 'OTHER',\r\n                    label: t.CALL_DETAILS_FORM.rcp_option_other(),\r\n                },\r\n            ]\r\n        },\r\n        [itemIsAfterCallWork, t.CALL_DETAILS_FORM],\r\n    )\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const [problem, setProblem] = useState<Option>(options[0])\r\n\r\n    function handleReport() {\r\n        reportProblemItem(problem.value, interactionStepId)\r\n        onClose()\r\n    }\r\n\r\n    function handleChange(e: React.FormEvent<HTMLInputElement>) {\r\n        const input = e.target\r\n        if (!isHTMLInputElement(input)) {\r\n            return\r\n        }\r\n        const selectedOption = options.find(option => option.value === input.value)\r\n        if (selectedOption) {\r\n            setProblem(selectedOption)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            size=\"tiny\"\r\n            className=\"max-w-[354px]\"\r\n            aria-labelledby=\"callProblemDialogHeader\"\r\n            {...other}\r\n        >\r\n            <Modal.Header role=\"heading\" id=\"callProblemDialogHeader\">\r\n                {t.CALL_DETAILS_FORM.rcp_heading()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <SmForm>\r\n                    {options.map(function renderOptions(option) {\r\n                        return (\r\n                            <SmForm.Field key={option.value}>\r\n                                <Radio\r\n                                    label={option.label}\r\n                                    name=\"problem\"\r\n                                    value={option.value}\r\n                                    checked={problem.value === option.value}\r\n                                    onChange={handleChange}\r\n                                    disabled={option.disabled}\r\n                                />\r\n                            </SmForm.Field>\r\n                        )\r\n                    })}\r\n                </SmForm>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SemanticButton\r\n                    onClick={() => onClose()}\r\n                    tooltip={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                    enabledInOffline\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={handleReport} primary tooltip={t.CALL_DETAILS_FORM.button_call_problem_report_label()}>\r\n                    {t.CALL_DETAILS_FORM.button_call_problem_report_label()}\r\n                </SemanticButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"communicator_Rescue_content_M19Cx\",\"pin\":\"communicator_Rescue_pin_dS0er\",\"links\":\"communicator_Rescue_links_LOIku\",\"manualLink\":\"communicator_Rescue_manualLink_KNp4y\"};","import React, {useCallback, useEffect} from 'react'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport {useRescueState, useRescueStateMethods} from '@bpinc/ad-rescue-state-context'\r\nimport {SmButton, SmMessage} from '@bpinc/lib-external-ui-elements'\r\nimport {IconInsert} from '@bpinc/lib-icons'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport styles from '../styles/Rescue.module.less'\r\n\r\n\r\nconst getLink = (type: 'desktop' | 'mobile', code?: string): string => {\r\n    const base = type === 'desktop'\r\n        ? 'https://oty.com/?code='\r\n        : 'http://RescueMobile.com/'\r\n\r\n    return base + code\r\n}\r\n\r\n\r\ntype RescueModalProps = CommonModalProps & {\r\n    type: 'voice' | 'chat'\r\n    onLinkPaste?: (link: string) => void\r\n}\r\n\r\nexport const RescueModal: React.FC<RescueModalProps> = ({type, onLinkPaste = noop, onClose, ...other}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const getErrorText = useCallback((errorCode: string) => {\r\n        switch (errorCode) {\r\n            case 'NOTECHCONSOLERUNNING': return t.ERROR_MESSAGES.rescue_modal_no_tech_console_running()\r\n            default: return t.ERROR_MESSAGES.rescue_modal_unknown_error()\r\n        }\r\n    }, [t.ERROR_MESSAGES])\r\n\r\n    const {pinCode, errorCode} = useRescueState()\r\n    const {requestPinCode} = useRescueStateMethods()\r\n    const links = {\r\n        desktop: getLink('desktop', pinCode),\r\n        mobile: getLink('mobile', pinCode),\r\n    }\r\n\r\n    const handleGenerateNewPinClick = requestPinCode\r\n    const handleDesktopPaste = useCallback(() => {\r\n        onLinkPaste(links.desktop)\r\n    }, [links.desktop, onLinkPaste])\r\n    const handleMobilePaste = useCallback(() => {\r\n        onLinkPaste(links.mobile)\r\n    }, [links.mobile, onLinkPaste])\r\n\r\n    useEffect(() => {\r\n        requestPinCode()\r\n        // componentDidMount\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            aria-labelledby=\"remoteAssistDialogHeader\"\r\n            {...other}\r\n        >\r\n            <Modal.Header\r\n                role=\"heading\"\r\n                id=\"remoteAssistDialogHeader\"\r\n            >\r\n                {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_heading()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className={styles.content}>\r\n                <Modal.Description>\r\n                    {errorCode && <SmMessage error>{getErrorText(errorCode)}</SmMessage>}\r\n\r\n                    <div className={styles.pin}>\r\n                        {pinCode || '------'}\r\n                    </div>\r\n\r\n                    {type === 'chat' && (\r\n                        <div className={styles.links}>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_paste_into_chat_text_desktop()}\r\n                                        </td>\r\n                                        <td>\r\n                                            <a href={links.desktop} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                {links.desktop}\r\n                                            </a>\r\n                                        </td>\r\n                                        <td>\r\n                                            <IconInsert onClick={handleDesktopPaste} />\r\n                                        </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>\r\n                                            {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_paste_into_chat_text_mobile()}\r\n                                        </td>\r\n                                        <td>\r\n                                            <a href={links.mobile} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                {links.mobile}\r\n                                            </a>\r\n                                        </td>\r\n                                        <td>\r\n                                            <IconInsert onClick={handleMobilePaste} />\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.manualLink}>\r\n                        {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_manual_url_text()}\r\n                        {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_manual_url_address()}\r\n                    </div>\r\n\r\n                    <SmButton onClick={handleGenerateNewPinClick} basic>\r\n                        {t.REMOTE_ASSIST_DIALOG_BOX.remote_assist_create_another_pin_button()}\r\n                    </SmButton>\r\n                </Modal.Description>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <SmButton onClick={() => onClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonClose()}\r\n                </SmButton>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {RescueModal} from '../components/RescueModal'\r\n\r\n\r\nexport function useOpenRescueModal() {\r\n    return useModalComponentOpener(RescueModal)\r\n}\r\n","import React, {useCallback, useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useTimezonesState} from '@bpinc/ad-timezones-state-context'\r\nimport {IconCheck24, InputField, Modal} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype TimezonesModalProps = CommonModalProps & {\r\n    onSelect: (timezoneId: string) => void\r\n}\r\n\r\nexport const TimezonesModal: React.FC<TimezonesModalProps> = ({\r\n    onSelect,\r\n    onClose,\r\n    ...other\r\n}) => {\r\n    const [searchString, setSearchString] = useState('')\r\n    const [selectedTimezoneId, setSelectedTimezoneId] = useState('')\r\n    const {t} = useLocalizationState()\r\n    const {allTimezones} = useTimezonesState()\r\n\r\n    const filteredTimezones = allTimezones.filter(tz => {\r\n        return (\r\n            tz.fullName.toLowerCase().indexOf(searchString.toLowerCase()) !== -1\r\n        )\r\n    })\r\n\r\n    const selectAndClose = useCallback(() => {\r\n        onSelect(selectedTimezoneId)\r\n        onClose()\r\n    }, [onClose, onSelect, selectedTimezoneId])\r\n\r\n    const timezoneSearchChangeHandler = useCallback((e: React.ChangeEvent) => {\r\n        if (e.target instanceof HTMLInputElement) {\r\n            setSearchString(e.target.value)\r\n        }\r\n    }, [])\r\n\r\n    const filteredTimezonesCallbacks = useMemo(() => {\r\n        return filteredTimezones.map(({id}) => {\r\n            return {\r\n                onClick: () => setSelectedTimezoneId(id),\r\n                onDoubleClick: () => {\r\n                    setSelectedTimezoneId(id)\r\n                    selectAndClose()\r\n                },\r\n            }\r\n        })\r\n    }, [filteredTimezones, selectAndClose])\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            aria-labelledby=\"timezonesDialogHeader\"\r\n            data-testid=\"timezones-modal\"\r\n            className=\"max-w-[540px]\"\r\n            {...other}\r\n        >\r\n            <Modal.Header id=\"timezonesDialogHeader\" role=\"heading\">\r\n                {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_timezones_heading()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className=\"flex flex-col\">\r\n                <InputField\r\n                    label={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_timezones_filter_label()}\r\n                    placeholder={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_timezones_filter_placeholder()}\r\n                    value={searchString}\r\n                    onChange={timezoneSearchChangeHandler}\r\n                    data-testid=\"search-input\"\r\n                />\r\n                <ul className=\"flex-auto overflow-auto p-0\">\r\n                    {filteredTimezones.map(({fullName, id}, i) => {\r\n                        return (\r\n                            <li\r\n                                onClick={filteredTimezonesCallbacks[i].onClick}\r\n                                onDoubleClick={\r\n                                    filteredTimezonesCallbacks[i].onDoubleClick\r\n                                }\r\n                                key={id}\r\n                                tabIndex={0}\r\n                                className={tcn(\r\n                                    'flex items-center justify-between',\r\n                                    'list-none px-3 py-4 state-layer-bg-neutral-0',\r\n                                    'hover:state-layer-mix-dark-on-white-1',\r\n                                    'focus:state-layer-mix-dark-on-white-2',\r\n                                    {\r\n                                        'state-layer-mix-teal-on-white-2 hover:state-layer-mix-teal-on-white-3 focus:state-layer-mix-teal-on-white-3':\r\n                                            id === selectedTimezoneId,\r\n                                    },\r\n                                )}\r\n                                role=\"button\"\r\n                                data-testid=\"option\"\r\n                            >\r\n                                {fullName}\r\n                                {id === selectedTimezoneId && <IconCheck24 className=\"ml-2 size-5 icon-fade\" />}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => onClose()}\r\n                    data-testid=\"cancel-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </Button>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    onClick={selectAndClose}\r\n                    disabled={!selectedTimezoneId}\r\n                    data-testid=\"submit-button\"\r\n                >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonSelect()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useOpenTimezonesModal} from '../../../modals'\r\n\r\n\r\ninterface UseTimeZonesModalOpener {\r\n    handleSelect: (timezoneId: string) => void\r\n}\r\nexport function useTimeZonesModalOpener({handleSelect}: UseTimeZonesModalOpener) {\r\n    const openTimezonesModal = useOpenTimezonesModal()\r\n\r\n    return useCallback(() => {\r\n        openTimezonesModal({\r\n            onSelect: handleSelect,\r\n        })\r\n    }, [handleSelect, openTimezonesModal])\r\n\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {TimezonesModal} from '../components/TimezonesModal'\r\n\r\n\r\nexport function useOpenTimezonesModal() {\r\n    return useModalComponentOpener(TimezonesModal)\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {SHOW_MORE_TIMEZONES} from './TimeZoneDropdown'\r\nimport {useFavoriteTimeZones} from './useFavoriteTimeZones'\r\n\r\n\r\nexport function useOptions() {\r\n    const favoriteTimeZones = useFavoriteTimeZones()\r\n\r\n    return useMemo(function memoizeOutput() {\r\n        return [\r\n            ...favoriteTimeZones.map(timezone => {\r\n                return {\r\n                    content: timezone.fullName,\r\n                    value: timezone.id,\r\n                    key: timezone.id,\r\n                    'data-testid': 'option',\r\n                }\r\n            }),\r\n            {\r\n                content: '. . .',\r\n                key: 'Show more timezones',\r\n                ['aria-label']: 'Show more timezones',\r\n                value: SHOW_MORE_TIMEZONES,\r\n                'data-testid': 'show-more-button',\r\n            },\r\n        ]\r\n    }, [favoriteTimeZones])\r\n\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useTimezonesState} from '@bpinc/ad-timezones-state-context'\r\n\r\n\r\nexport function useFavoriteTimeZones() {\r\n    const {\r\n        allTimezones,\r\n        favoriteTimezones,\r\n    } = useTimezonesState()\r\n\r\n    return useMemo(function memoizeOutput() {\r\n        return [\r\n            ...favoriteTimezones,\r\n            ...allTimezones\r\n                .slice(0, 10)\r\n                .filter(tz => !favoriteTimezones.find(ftz => ftz.id === tz.id))\r\n                .slice(0, Math.abs(5 - favoriteTimezones.length)),\r\n        ]\r\n    }, [allTimezones, favoriteTimezones])\r\n}\r\n","import React from 'react'\r\n\r\nimport {SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useHandleChange} from './useHandleChange'\r\nimport {useOptions} from './useOptions'\r\n\r\n\r\ninterface TimeZoneProps {\r\n    selectedTimeZone: string\r\n    handleSelect: (timezoneId: string) => void\r\n    label?: string\r\n    layoutClassName?: string\r\n}\r\n\r\nexport const SHOW_MORE_TIMEZONES = 'show_more'\r\n\r\nexport const TimeZoneDropdown: React.FC<TimeZoneProps> = ({\r\n    selectedTimeZone,\r\n    handleSelect,\r\n    layoutClassName,\r\n    label,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const options = useOptions()\r\n    const handleChange = useHandleChange({handleSelect})\r\n\r\n    return (\r\n        <SelectField\r\n            required\r\n            layoutClassName={layoutClassName}\r\n            value={selectedTimeZone}\r\n            label={label}\r\n            onChange={handleChange}\r\n            aria-label={t.CALENDAR_EVENT_FORM.show_timezones_label()}\r\n            options={options}\r\n            data-testid=\"timezone-dropdown\"\r\n        />\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {SHOW_MORE_TIMEZONES} from './TimeZoneDropdown'\r\nimport {useTimeZonesModalOpener} from './useTimeZonesModalOpener'\r\n\r\n\r\ninterface UseHandleChangeParams {\r\n    handleSelect: (timeZoneId: string) => void\r\n}\r\nexport function useHandleChange({handleSelect}: UseHandleChangeParams) {\r\n\r\n    const openFullTimezonesList = useTimeZonesModalOpener({handleSelect})\r\n\r\n    return useCallback(\r\n        function handleChangeCallback(value: string | undefined) {\r\n            if (!value) {\r\n                return\r\n            }\r\n\r\n            return value === SHOW_MORE_TIMEZONES\r\n                ? openFullTimezonesList()\r\n                : handleSelect(value)\r\n        },\r\n        [handleSelect, openFullTimezonesList],\r\n    )\r\n\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {partial, uniq} from 'lodash-es'\r\n\r\nimport {\r\n    useInteraction,\r\n    useInteractionProp,\r\n    useInteractionStateConnector,\r\n    useInteractionStateMethods,\r\n} from '@bpinc/ad-interaction-state-context'\r\nimport {getItemDisposition, getPhoneFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {DispositionRescheduleData} from '@bpinc/ad-interaction-state-types'\r\nimport {useAllTimezones, useTimezonesStateMethods} from '@bpinc/ad-timezones-state-context'\r\nimport {convertToDayjs, formatDate, getLongDateFormat, useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {\r\n    FieldLayout,\r\n    IconArrowDown16,\r\n    SearchableSelectField,\r\n    Tooltip,\r\n    TriggerDropdown,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {DateInput, TimeInput} from '@bpinc/lib-semantic-ui-date-time-pickers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport type {DispositionRescheduleForm as DispositionRescheduleFormType} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useFavoriteTimeZoneInitializer} from '../hooks/useFavoriteTimeZoneInitializer'\r\nimport {useRescheduleFormOptions} from '../hooks/useRescheduleFormOptions'\r\nimport {TimeZoneDropdown} from './TimeZoneDropdown'\r\n\r\n\r\ninterface DispositionRescheduleForm {\r\n    date: string\r\n    timeFrom: string\r\n    timeTo: string\r\n    selectedTimezoneId: string\r\n    phoneOn: string\r\n}\r\n\r\nconst initialState: DispositionRescheduleForm = {\r\n    date: '',\r\n    timeFrom: '',\r\n    timeTo: '',\r\n    selectedTimezoneId: '',\r\n    phoneOn: '',\r\n}\r\n\r\nconst rescheduleDateFormat = 'L'\r\nconst rescheduleTimeFormat = 'HH:mm'\r\nconst dispositionRescheduleDatetimeFormat = 'YYYY-MM-DD HH:mm:ss'\r\n\r\nconst convert = {\r\n    serverFormToClient({\r\n        rescheduleFrom,\r\n        reschedulePhone,\r\n        rescheduleTimezone,\r\n        rescheduleTo,\r\n    }: Partial<DispositionRescheduleData> = {}) {\r\n        const formState: Partial<DispositionRescheduleForm> = {}\r\n\r\n        if (rescheduleFrom || rescheduleTo) {\r\n            formState.date = formatDate(\r\n                rescheduleFrom || rescheduleTo,\r\n                rescheduleDateFormat,\r\n            )\r\n        }\r\n\r\n        if (rescheduleFrom) {\r\n            formState.timeFrom = formatDate(\r\n                rescheduleFrom,\r\n                rescheduleTimeFormat,\r\n            )\r\n        }\r\n\r\n        if (rescheduleTo) {\r\n            formState.timeTo = formatDate(rescheduleTo, rescheduleTimeFormat)\r\n        }\r\n\r\n        if (reschedulePhone) {\r\n            formState.phoneOn = reschedulePhone\r\n        }\r\n\r\n        if (rescheduleTimezone) {\r\n            formState.selectedTimezoneId = rescheduleTimezone\r\n        }\r\n\r\n        return formState\r\n    },\r\n    clientFormToServer({\r\n        date,\r\n        timeFrom,\r\n        timeTo,\r\n        selectedTimezoneId,\r\n        phoneOn,\r\n        currentState,\r\n    }: Partial<DispositionRescheduleForm> & {\r\n        currentState: Partial<DispositionRescheduleForm>\r\n    }) {\r\n        const rescheduleData: DispositionRescheduleData = {}\r\n\r\n        const dateFrom = convertToDayjs(\r\n            `${date || currentState.date} ${timeFrom || currentState.timeFrom}`,\r\n            `${rescheduleDateFormat} ${rescheduleTimeFormat}`,\r\n        )\r\n        const dateTo = convertToDayjs(\r\n            `${date || currentState.date} ${timeTo || currentState.timeTo}`,\r\n            `${rescheduleDateFormat} ${rescheduleTimeFormat}`,\r\n        )\r\n        dateTo.add(dateFrom.isAfter(dateTo) ? 1 : 0, 'd')\r\n\r\n        if (dateFrom.isValid() && (date || timeFrom)) {\r\n            rescheduleData.rescheduleFrom = dateFrom.format(\r\n                dispositionRescheduleDatetimeFormat,\r\n            )\r\n        }\r\n\r\n        if (dateTo.isValid() && (date || timeTo)) {\r\n            rescheduleData.rescheduleTo = dateTo.format(\r\n                dispositionRescheduleDatetimeFormat,\r\n            )\r\n        }\r\n\r\n        if (phoneOn) {\r\n            rescheduleData.reschedulePhone = phoneOn\r\n        }\r\n\r\n        if (selectedTimezoneId) {\r\n            rescheduleData.rescheduleTimezone = selectedTimezoneId\r\n        }\r\n\r\n        return rescheduleData\r\n    },\r\n    phoneToOption(phone: string) {\r\n        return {content: phone, value: phone, 'data-testid': 'option'}\r\n    },\r\n}\r\n\r\nexport const DispositionRescheduleForm = React.memo(function RescheduleForm() {\r\n    const itemId = useInteractionId()\r\n\r\n    const syncedFormState = useInteractionProp(itemId, getItemDisposition)\r\n\r\n    const [formState, setFormState] = useState(() =>\r\n        syncedFormState\r\n            ? {\r\n                ...initialState,\r\n                ...convert.serverFormToClient(syncedFormState),\r\n            }\r\n            : initialState,\r\n    )\r\n\r\n    const {setDispositionReschedule: setSyncedFormState} =\r\n        useInteractionStateMethods()\r\n\r\n    const {t} = useLocalizationState()\r\n    const allTimezones = useAllTimezones()\r\n    const timezonesMethods = useTimezonesStateMethods()\r\n    const options = useRescheduleFormOptions()\r\n\r\n\r\n    const activeInteraction = useInteraction(itemId)\r\n    const activeItemNumber = useInteractionProp(itemId, getPhoneFromItem)\r\n\r\n    const suggestedPhones = uniq([\r\n        activeInteraction?.displayData?.number,\r\n        activeItemNumber,\r\n        syncedFormState?.reschedulePhone,\r\n    ]).filter(Boolean)\r\n\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n\r\n    const [suggestedPhoneOptions, setSuggestedPhoneOptions] = useState(() =>\r\n        truthy(suggestedPhones).map(convert.phoneToOption),\r\n    )\r\n\r\n    const suggestedPhoneOptionsRef = useAsRef(suggestedPhoneOptions)\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionStateConnector?.dispenser.subscribe({\r\n            onDispositionRescheduleUpdated: (innerItemId, data) => {\r\n                if (itemId === innerItemId) {\r\n                    setFormState(s => ({\r\n                        ...s,\r\n                        ...convert.serverFormToClient(data),\r\n                    }))\r\n                    if (\r\n                        data.reschedulePhone &&\r\n                        !suggestedPhoneOptionsRef.current.some(phone => {\r\n                            return phone.value === data.reschedulePhone\r\n                        })\r\n                    ) {\r\n                        setSuggestedPhoneOptions(s => {\r\n                            if (!data.reschedulePhone) {\r\n                                return s\r\n                            }\r\n\r\n                            return [\r\n                                ...s,\r\n                                convert.phoneToOption(data.reschedulePhone),\r\n                            ]\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n        })\r\n        return () => subscription?.unsubscribe()\r\n    }, [itemId, interactionStateConnector?.dispenser, suggestedPhoneOptionsRef])\r\n\r\n    const {date, timeFrom, timeTo, selectedTimezoneId, phoneOn} = formState\r\n\r\n    const setRescheduleFormState = useCallback(\r\n        function setRescheduleFormStateCallback(\r\n            rescheduleForm: Partial<DispositionRescheduleFormType>,\r\n        ) {\r\n            setFormState(state => ({\r\n                ...state,\r\n                ...rescheduleForm,\r\n            }))\r\n        },\r\n        [],\r\n    )\r\n\r\n    const handleInitializeFavoriteTimeZone = useCallback(\r\n        function handleInitializeFavoriteTimeZoneCallback(\r\n            suggestedTimeZoneId: string,\r\n        ) {\r\n            setRescheduleFormState({selectedTimezoneId: suggestedTimeZoneId})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const firstSuggestedPhone = suggestedPhones[0] ?? ''\r\n\r\n    useEffect(() => {\r\n        if (firstSuggestedPhone && !formState.phoneOn) {\r\n            setRescheduleFormState({phoneOn: firstSuggestedPhone})\r\n        }\r\n    }, [setRescheduleFormState, firstSuggestedPhone, formState.phoneOn])\r\n\r\n    useFavoriteTimeZoneInitializer({\r\n        additionalOnInitializeHandler: handleInitializeFavoriteTimeZone,\r\n    })\r\n\r\n    const selectTimezone = useCallback(\r\n        (timezoneId: string) => {\r\n            if (timezoneId) {\r\n                const timezoneData = allTimezones.find(\r\n                    tz => tz.id === timezoneId,\r\n                )\r\n                if (timezoneData) {\r\n                    timezonesMethods.addToFavorites(timezoneData)\r\n\r\n                    const selectedTimezoneData = allTimezones.find(\r\n                        tz => tz.id === selectedTimezoneId,\r\n                    )\r\n                    if (selectedTimezoneData) {\r\n                        const mOffset = Number(\r\n                            timezoneData.standardOffset -\r\n                                selectedTimezoneData.standardOffset,\r\n                        )\r\n                        const dateFrom = convertToDayjs(\r\n                            `${date} ${timeFrom}`,\r\n                            `${rescheduleDateFormat} ${rescheduleTimeFormat}`,\r\n                        )\r\n                        const dateTo = convertToDayjs(\r\n                            `${date} ${timeTo}`,\r\n                            `${rescheduleDateFormat} ${rescheduleTimeFormat}`,\r\n                        )\r\n                        if (\r\n                            dateFrom.isValid() &&\r\n                            dateTo.isValid() &&\r\n                            !Number.isNaN(mOffset)\r\n                        ) {\r\n                            dateTo.add(dateFrom.isAfter(dateTo) ? 1 : 0, 'd')\r\n                            dateFrom.add(mOffset, 'm')\r\n                            dateTo.add(mOffset, 'm')\r\n                            const updatedState = {\r\n                                date: dateFrom.format(rescheduleDateFormat),\r\n                                timeFrom: dateFrom.format(rescheduleTimeFormat),\r\n                                timeTo: dateTo.format(rescheduleTimeFormat),\r\n                            }\r\n\r\n                            setRescheduleFormState(updatedState)\r\n                            setSyncedFormState(\r\n                                itemId,\r\n                                convert.clientFormToServer({\r\n                                    ...updatedState,\r\n                                    currentState: formState,\r\n                                }),\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n                setRescheduleFormState({selectedTimezoneId: timezoneId})\r\n                setSyncedFormState(itemId, {rescheduleTimezone: timezoneId})\r\n            }\r\n        },\r\n        [\r\n            allTimezones,\r\n            setRescheduleFormState,\r\n            setSyncedFormState,\r\n            itemId,\r\n            timezonesMethods,\r\n            selectedTimezoneId,\r\n            date,\r\n            timeFrom,\r\n            timeTo,\r\n            formState,\r\n        ],\r\n    )\r\n\r\n    const handleDateChange = useCallback(\r\n        (_evt: SyntheticEvent, {value}: DropdownProps) => {\r\n            if (typeof value !== 'string') {\r\n                throw new Error('Date value must be a string')\r\n            }\r\n\r\n            setRescheduleFormState({date: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleTimeFromChange = useCallback(\r\n        (_evt: SyntheticEvent, {value}: DropdownProps) => {\r\n            if (typeof value !== 'string') {\r\n                throw new Error('Time value must be a string')\r\n            }\r\n\r\n            setRescheduleFormState({timeFrom: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleTimeToChange = useCallback(\r\n        (_evt: SyntheticEvent, {value}: DropdownProps) => {\r\n            if (typeof value !== 'string') {\r\n                throw new Error('Time value must be a string')\r\n            }\r\n\r\n            setRescheduleFormState({timeTo: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handlePhoneOnChange = useCallback(\r\n        (value: string | undefined) => {\r\n            if (typeof value !== 'string') {\r\n                throw new Error('Phone value must be a string')\r\n            }\r\n\r\n            setRescheduleFormState({phoneOn: value})\r\n            setSyncedFormState(itemId, {reschedulePhone: value})\r\n        },\r\n        [itemId, setSyncedFormState, setRescheduleFormState],\r\n    )\r\n\r\n    const optionsCallbacks = useMemo(() => {\r\n        return options.map(({getDateAndTime}) => {\r\n            return {\r\n                onClick: (e: SyntheticEvent) => {\r\n                    const {newDate, newTime} = getDateAndTime()\r\n                    setRescheduleFormState({\r\n                        date: newDate,\r\n                        timeFrom: newTime,\r\n                    })\r\n                    e.preventDefault()\r\n                },\r\n            }\r\n        })\r\n    }, [options, setRescheduleFormState])\r\n\r\n    const handleDateTimeBlur = useCallback(\r\n        function handleDateBlurCallback(\r\n            fieldName: 'timeFrom' | 'timeTo' | 'date',\r\n            _: SyntheticEvent,\r\n            data?: { value: string },\r\n        ) {\r\n            if (typeof data !== 'object' || typeof data.value !== 'string') {\r\n                return\r\n            }\r\n\r\n            setSyncedFormState(\r\n                itemId,\r\n                convert.clientFormToServer({\r\n                    [fieldName]: data.value,\r\n                    currentState: formState,\r\n                }),\r\n            )\r\n        },\r\n        [itemId, formState, setSyncedFormState],\r\n    )\r\n\r\n    const handleDateBlur = useMemo(\r\n        () => partial(handleDateTimeBlur, 'date'),\r\n        [handleDateTimeBlur],\r\n    )\r\n    const handleTimeFromBlur = useMemo(\r\n        () => partial(handleDateTimeBlur, 'timeFrom'),\r\n        [handleDateTimeBlur],\r\n    )\r\n    const handleTimeToBlur = useMemo(\r\n        () => partial(handleDateTimeBlur, 'timeTo'),\r\n        [handleDateTimeBlur],\r\n    )\r\n\r\n    const smallPickerClassName = tcn('w-1/4 [&_input]:w-full')\r\n\r\n    return (\r\n        <div className=\"flex flex-auto flex-col gap-6\" data-testid=\"reschedule\">\r\n            <h3 className=\"mt-6 font-semibold body\">\r\n                {t.RESCHEDULE.reschedule_call()}\r\n            </h3>\r\n            <div className=\"flex items-end justify-between gap-4\">\r\n                <FieldLayout\r\n                    className=\"w-1/2 [&_div]:!w-full\"\r\n                    label={\r\n                        <TriggerDropdown\r\n                            options={options.map(({id, name}, i) => {\r\n                                return (\r\n                                    <button\r\n                                        onClick={optionsCallbacks[i].onClick}\r\n                                        key={id}\r\n                                        aria-label={name}\r\n                                        data-testid=\"option\"\r\n                                    >\r\n                                        {name}\r\n                                    </button>\r\n                                )\r\n                            })}\r\n                        >\r\n                            {isOpened => (\r\n                                <button>\r\n                                    <Tooltip\r\n                                        content={t.CALENDAR_EVENT_FORM.show_date_suggestions_label()}\r\n                                    >\r\n                                        <div className=\"flex items-center gap-1\">\r\n                                            <span>\r\n                                                {t.RESCHEDULE.next_call_date()}\r\n                                            </span>\r\n                                            <IconArrowDown16 className={isOpened ? 'rotate-180' : undefined} />\r\n                                        </div>\r\n                                    </Tooltip>\r\n                                </button>\r\n                            )}\r\n                        </TriggerDropdown>\r\n                    }\r\n                >\r\n                    <DateInput\r\n                        value={date}\r\n                        onChange={handleDateChange}\r\n                        onBlur={handleDateBlur}\r\n                        placeholder={getLongDateFormat(rescheduleDateFormat)}\r\n                        dateFormat={rescheduleDateFormat}\r\n                        closable\r\n                        animation=\"fade right\"\r\n                        popupPosition=\"bottom left\"\r\n                        localization={navigator.language}\r\n                        aria-label={t.CALENDAR_EVENT_FORM.label_date()}\r\n                        data-testid=\"date-picker\"\r\n                    />\r\n                </FieldLayout>\r\n                <FieldLayout\r\n                    label={t.RESCHEDULE.from()}\r\n                    required\r\n                    className={smallPickerClassName}\r\n                >\r\n                    <TimeInput\r\n                        value={timeFrom}\r\n                        onChange={handleTimeFromChange}\r\n                        onBlur={handleTimeFromBlur}\r\n                        placeholder={rescheduleTimeFormat.toUpperCase()}\r\n                        timeFormat=\"24\"\r\n                        closable\r\n                        animation=\"fade right\"\r\n                        popupPosition=\"bottom right\"\r\n                        localization={navigator.language}\r\n                        aria-label={t.CALENDAR_EVENT_FORM.time_from_label()}\r\n                        data-testid=\"time-from-picker\"\r\n                    />\r\n                </FieldLayout>\r\n                <FieldLayout\r\n                    label={t.RESCHEDULE.to()}\r\n                    required\r\n                    className={smallPickerClassName}\r\n                >\r\n                    <TimeInput\r\n                        value={timeTo}\r\n                        onChange={handleTimeToChange}\r\n                        onBlur={handleTimeToBlur}\r\n                        placeholder={rescheduleTimeFormat.toUpperCase()}\r\n                        timeFormat=\"24\"\r\n                        closable\r\n                        animation=\"fade right\"\r\n                        popupPosition=\"bottom right\"\r\n                        localization={navigator.language}\r\n                        aria-label={t.CALENDAR_EVENT_FORM.time_to_label()}\r\n                        data-testid=\"time-to-picker\"\r\n                    />\r\n                </FieldLayout>\r\n            </div>\r\n            <TimeZoneDropdown\r\n                layoutClassName=\"w-full\"\r\n                label={t.RESCHEDULE.time_zone()}\r\n                selectedTimeZone={syncedFormState?.rescheduleTimezone ?? ''}\r\n                handleSelect={selectTimezone}\r\n            />\r\n            <SearchableSelectField\r\n                required\r\n                allowCustomValue\r\n                layoutClassName=\"w-full\"\r\n                label={t.RESCHEDULE.phone()}\r\n                value={phoneOn}\r\n                onChange={handlePhoneOnChange}\r\n                aria-label={t.CALENDAR_EVENT_FORM.phone_number_label()}\r\n                options={suggestedPhoneOptions}\r\n                data-testid=\"phone-dropdown\"\r\n            />\r\n        </div>\r\n    )\r\n})\r\n","import type {SyntheticEvent} from 'react'\r\nimport {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport type {CalendarContact, ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {formatFullName} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId, getServiceId, getServiceNameFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useAllTimezones, useTimezonesStateMethods} from '@bpinc/ad-timezones-state-context'\r\nimport type {CalendarEventDetails} from '@bpinc/cal-request-urls'\r\nimport {useCalendarStateMethods} from '@bpinc/cal-state-context'\r\nimport type {CalendarEventScreenPop} from '@bpinc/cal-state-types'\r\nimport type {SmCheckboxProps, SmInputProps, SmTextAreaProps} from '@bpinc/lib-external-ui-elements'\r\nimport {convertToDayjs} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useOpenInteractionSlidingModal, useShowSlidingModalChecker} from '@bpinc/lib-sliding-modal-context'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements/'\r\nimport type {ContactRecord, RemindInUnit, RescheduleForm as RescheduleFormType} from '@bpinc/state-interaction-ui'\r\nimport {getEmptyItemUIState, useInteractionUIState} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useContactRecordInitializer} from './useContactRecordInitializer'\r\n\r\n\r\ntype SubmittingState = 'idle' | 'loading' | 'error' | 'success'\r\n\r\nexport const dateFormat = 'DD-MM-YYYY'\r\nexport const timeFormat = 'HH:mm'\r\n\r\nexport function useRescheduleFormState() {\r\n    const sessionData = useSessionState()\r\n    const itemId = useInteractionId()\r\n    const {saveCalendarEventDetails} = useCalendarStateMethods()\r\n    const [submittingState, setSubmittingState] = useState<SubmittingState>('idle')\r\n    const closeModalAfterSuccessTimeoutRef = useRef(-1)\r\n    const {userId, firstName, lastName, displayNameFormat} = sessionData\r\n    const {getItemState, setItemState} = useInteractionUIState()\r\n    const activeItem = useInteraction(itemId)\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const showRescheduleModal = useShowSlidingModalChecker(itemId, 'reschedule')\r\n    const activeItemId = activeItem?.id ?? ''\r\n\r\n    const rescheduleForm =\r\n        getItemState(activeItemId)?.rescheduleForm ??\r\n        getEmptyItemUIState().rescheduleForm\r\n\r\n    const {\r\n        dateFrom,\r\n        dateTo,\r\n        timeFrom,\r\n        timeTo,\r\n        selectedTimezoneId,\r\n        remindIn,\r\n        remindInUnit,\r\n        completed,\r\n        title,\r\n        contacts,\r\n        notes,\r\n    } = rescheduleForm\r\n\r\n    const setRescheduleFormState = useCallback(\r\n        function setRescheduleFormStateCallback(\r\n            newRescheduleForm: Partial<RescheduleFormType>,\r\n        ) {\r\n            setItemState(activeItemId, state => ({\r\n                ...state,\r\n                rescheduleForm: {...state.rescheduleForm, ...newRescheduleForm},\r\n            }))\r\n        },\r\n        [activeItemId, setItemState],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!showRescheduleModal) {\r\n            clearTimeout(closeModalAfterSuccessTimeoutRef.current)\r\n            setSubmittingState('idle')\r\n        }\r\n    }, [showRescheduleModal])\r\n\r\n    useContactRecordInitializer({contacts, setRescheduleFormState})\r\n    const allTimezones = useAllTimezones()\r\n    const timezonesMethods = useTimezonesStateMethods()\r\n    const handleDateChange = useCallback(\r\n        (_e: SyntheticEvent, {value, name}: SmInputProps) => {\r\n            setRescheduleFormState({[name]: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleContactRecordChange = useCallback(\r\n        (index: number, {name, value}: SmInputProps) => {\r\n            setRescheduleFormState(\r\n                produce(rescheduleForm, darft => {\r\n                    darft.contacts.splice(index, 1, {\r\n                        ...darft.contacts[index],\r\n                        [name]: value,\r\n                    })\r\n                }),\r\n            )\r\n        },\r\n        [rescheduleForm, setRescheduleFormState],\r\n    )\r\n\r\n    const handleContactNameChangeFactory = useCallback(\r\n        function handleContactNameChangeFactoryCallback(index: number) {\r\n            return function handleContactNameChange(\r\n                _evt: SyntheticEvent,\r\n                {value}: SmInputProps,\r\n            ) {\r\n                handleContactRecordChange(index, {name: 'name', value})\r\n                setRescheduleFormState({name: value})\r\n            }\r\n        },\r\n        [handleContactRecordChange, setRescheduleFormState],\r\n    )\r\n\r\n    const handleContactPhoneChangeFactory = useCallback(\r\n        function handleContactPhoneChangeFactoryCallback(index: number) {\r\n            return function handleContactPhoneChange(\r\n                _evt: SyntheticEvent,\r\n                {value}: SmInputProps,\r\n            ) {\r\n                handleContactRecordChange(index, {name: 'phone', value})\r\n            }\r\n        },\r\n        [handleContactRecordChange],\r\n    )\r\n\r\n    const handleContactPhoneTypeChangeFactory = useCallback(\r\n        function handleContactPhoneTypeChangeFactoryCallback(index: number) {\r\n            return function handleContactPhoneTypeChange(\r\n                _evt: SyntheticEvent,\r\n                {value}: DropdownProps,\r\n            ) {\r\n                handleContactRecordChange(index, {name: 'phoneType', value})\r\n            }\r\n        },\r\n        [handleContactRecordChange],\r\n    )\r\n\r\n    const handleContactCreateContactChangeFactory = useCallback(\r\n        function handleContactCreateContactChangeFactoryCallback(index: number) {\r\n            return function handleContactCreateContactChange(\r\n                evt: SyntheticEvent,\r\n                {value}: DropdownProps,\r\n            ) {\r\n                handleContactRecordChange(index, {name: 'createContact', value})\r\n            }\r\n        },\r\n        [handleContactRecordChange],\r\n    )\r\n\r\n    const handleContactPhoneIdChangeFactory = useCallback(\r\n        function handleContactCreateContactChangeFactoryCallback(index: number) {\r\n            return function handleContactCreateContactChange(\r\n                evt: SyntheticEvent,\r\n                {value}: DropdownProps,\r\n            ) {\r\n                handleContactRecordChange(index, {name: 'phoneId', value})\r\n            }\r\n        },\r\n        [handleContactRecordChange],\r\n    )\r\n\r\n    const handleRemindAmountChange = useCallback(\r\n        function handleRemindAmountChangeCallback(\r\n            event: SyntheticEvent,\r\n            {value}: SmInputProps,\r\n        ) {\r\n            setRescheduleFormState({remindIn: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleRemindUnitsChange = useCallback(\r\n        function handleRemindAmountChangeCallback(\r\n            event: SyntheticEvent,\r\n            {value}: DropdownProps,\r\n        ) {\r\n            setRescheduleFormState({remindInUnit: value as RemindInUnit})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleCompletedCheckboxChange = useCallback(\r\n        function handleRemindAmountChangeCallback(\r\n            event: SyntheticEvent,\r\n            {checked}: SmCheckboxProps,\r\n        ) {\r\n            setRescheduleFormState({completed: checked})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n    const handleTitleChange = useCallback(\r\n        function handleRemindAmountChangeCallback(\r\n            event: SyntheticEvent,\r\n            {value}: SmInputProps,\r\n        ) {\r\n            setRescheduleFormState({title: value})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleNotesChange = useCallback(\r\n        function handleRemindAmountChangeCallback(\r\n            event: SyntheticEvent,\r\n            {value}: SmTextAreaProps,\r\n        ) {\r\n            setRescheduleFormState({notes: value as string})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    const handleTimeZoneSelect = useCallback(\r\n        (timezoneId: string) => {\r\n            if (timezoneId) {\r\n                const timezoneData = allTimezones.find(tz => tz.id === timezoneId)\r\n                if (timezoneData) {\r\n                    timezonesMethods.addToFavorites(timezoneData)\r\n\r\n                    const selectedTimezoneData = allTimezones.find(\r\n                        tz => tz.id === selectedTimezoneId,\r\n                    )\r\n                    if (selectedTimezoneData) {\r\n                        const mOffset = Number(\r\n                            timezoneData.standardOffset - selectedTimezoneData.standardOffset,\r\n                        )\r\n                        const dateFromFormatted = convertToDayjs(\r\n                            `${dateFrom} ${timeFrom}`,\r\n                            `${dateFormat} ${timeFormat}`,\r\n                        )\r\n                        const dateToFormatted = convertToDayjs(\r\n                            `${dateTo} ${timeTo}`,\r\n                            `${dateFormat} ${timeFormat}`,\r\n                        )\r\n                        if (\r\n                            dateFromFormatted.isValid() &&\r\n                            dateToFormatted.isValid() &&\r\n                            !Number.isNaN(mOffset)\r\n                        ) {\r\n                            dateToFormatted.add(\r\n                                dateFromFormatted.isAfter(dateToFormatted) ? 1 : 0,\r\n                                'd',\r\n                            )\r\n                            dateFromFormatted.add(mOffset, 'm')\r\n                            dateToFormatted.add(mOffset, 'm')\r\n                            setRescheduleFormState({\r\n                                dateFrom: dateFromFormatted.format(dateFormat),\r\n                                dateTo: dateToFormatted.format(dateFormat),\r\n                                timeFrom: dateFromFormatted.format(timeFormat),\r\n                                timeTo: dateToFormatted.format(timeFormat),\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                setRescheduleFormState({selectedTimezoneId: timezoneId})\r\n            }\r\n        },\r\n        [\r\n            allTimezones,\r\n            setRescheduleFormState,\r\n            timezonesMethods,\r\n            selectedTimezoneId,\r\n            dateFrom,\r\n            timeFrom,\r\n            dateTo,\r\n            timeTo,\r\n        ],\r\n    )\r\n\r\n    const handleCancelClick = useCallback(\r\n        function handleCancelClickCallback() {\r\n            setRescheduleFormState(getEmptyItemUIState().rescheduleForm)\r\n            openInteractionSlidingModal(itemId, 'reschedule')\r\n        },\r\n        [setRescheduleFormState, itemId, openInteractionSlidingModal],\r\n    )\r\n\r\n    const handleSubmitClick = useCallback(\r\n        function handleSubmitClickCallback() {\r\n            const params = rescheduleFormStateToPostCalendarEventParams(\r\n                rescheduleForm,\r\n            )\r\n\r\n            if (params && params.title) {\r\n                setSubmittingState('loading')\r\n                saveCalendarEventDetails(params)\r\n                    .then(() => {\r\n                        setSubmittingState('success')\r\n                        setRescheduleFormState(getEmptyItemUIState().rescheduleForm)\r\n                        closeModalAfterSuccessTimeoutRef.current = setTimeout(() => {\r\n                            openInteractionSlidingModal(itemId, 'reschedule')\r\n                            setSubmittingState('idle')\r\n                        }, 2500)\r\n                    })\r\n                    .catch(() => {\r\n                        setSubmittingState('error')\r\n                    // TODO: Add error handling UI.\r\n                    })\r\n            }\r\n\r\n            function rescheduleFormStateToPostCalendarEventParams(\r\n                currentRescheduleForm: RescheduleFormType,\r\n            ): CalendarEventDetails | undefined {\r\n                const dateFromInner = convertToDayjs(\r\n                    `${currentRescheduleForm.dateFrom} ${currentRescheduleForm.timeFrom}`,\r\n                    `${dateFormat} ${timeFormat}`,\r\n                )\r\n\r\n                const dateToInner = convertToDayjs(\r\n                    `${currentRescheduleForm.dateTo} ${currentRescheduleForm.timeTo}`,\r\n                    `${dateFormat} ${timeFormat}`,\r\n                )\r\n\r\n                const startTime = dateFromInner.isValid() ? dateFromInner.valueOf() : undefined\r\n\r\n                const endTime = dateToInner.isValid() ? dateToInner.valueOf() : undefined\r\n\r\n                const globalInteractionId = getGlobalInteractionId(activeItem)\r\n                const serviceId = getServiceId(activeItem)\r\n\r\n                const firstContact = currentRescheduleForm.contacts[0]\r\n\r\n                const {listLinkId, listRecordId} = activeItem?.workitemData || {}\r\n\r\n                const screenPopUrl = activeItem?.screenPopData?.web?.url\r\n                const screenPop: CalendarEventScreenPop | undefined = screenPopUrl\r\n                    ? {\r\n                        web: {\r\n                            type: 'web' as const,\r\n                            action: 'OPEN_WEB_PAGE' as const,\r\n                            URL: screenPopUrl,\r\n                            popup: 'false',\r\n                            popUponAnswer: 'false',\r\n                            keepPopupOpenAfterFinish: 'false',\r\n                            secondaryUrls: {},\r\n                        },\r\n                        salesforce: {\r\n                            type: 'salesforce',\r\n                            object_id: screenPopUrl,\r\n                            action: 'SHOW_OBJECT',\r\n                        },\r\n                    }\r\n                    : undefined\r\n\r\n                if (\r\n                    startTime &&\r\n                    endTime &&\r\n                    userId &&\r\n                    globalInteractionId &&\r\n                    serviceId &&\r\n                    firstContact\r\n                ) {\r\n                    return {\r\n                        completed: currentRescheduleForm.completed,\r\n                        contacts: firstContact.contactData\r\n                            ? [\r\n                                contactDataToCalendarContact(\r\n                                    firstContact.contactData,\r\n                                    firstContact,\r\n                                ),\r\n                            ]\r\n                            : [\r\n                                {\r\n                                    addPhone: false,\r\n                                    alerts: 0,\r\n                                    calendar_phone: {\r\n                                        id: undefined,\r\n                                        type: firstContact.phoneType,\r\n                                        phone: firstContact.phone,\r\n                                    },\r\n                                    contact_type: 'STORED' as const,\r\n                                    create: false,\r\n                                    first_name: firstContact.name,\r\n                                    phones: [\r\n                                        {\r\n                                            id: undefined,\r\n                                            type: firstContact.phoneType,\r\n                                            phone: firstContact.phone,\r\n                                        },\r\n                                    ],\r\n                                    _id: {oid: null},\r\n                                },\r\n                            ],\r\n                        email: activeItem?.displayData.email,\r\n                        startTime,\r\n                        endTime,\r\n                        globalInteractionId,\r\n                        listLinkId,\r\n                        listRecordId,\r\n                        name: activeItem?.displayData.displayName,\r\n                        notes: currentRescheduleForm.notes,\r\n                        number: activeItem?.displayData.number,\r\n                        remindIn: currentRescheduleForm.remindIn,\r\n                        remindInUnit: currentRescheduleForm.remindInUnit,\r\n                        screenpop: JSON.stringify(screenPop),\r\n                        screenpopSize: screenPop ? 1 : 0,\r\n                        serviceId,\r\n                        serviceName: getServiceNameFromItem(activeItem),\r\n                        title: currentRescheduleForm.title,\r\n                        userId,\r\n                        userName: formatFullName(displayNameFormat, firstName, lastName),\r\n                    }\r\n                }\r\n            }\r\n\r\n            function contactDataToCalendarContact(\r\n                contactData: ContactType,\r\n                contactRecord: ContactRecord,\r\n            ): CalendarContact {\r\n                return {\r\n                    addPhone: false, //TODO: implement functionality\r\n                    addresses: contactData.addresses &&\r\n                        contactData.addresses.map(({addressLine1, addressLine2, ...rest}) => ({\r\n                            ...rest,\r\n                            address_line1: addressLine1,\r\n                            address_line2: addressLine2,\r\n                        })),\r\n                    alerts: contactData.alerts,\r\n                    calendar_phone: {\r\n                        id: undefined,\r\n                        type: contactRecord.phoneType,\r\n                        phone: contactRecord.phone,\r\n                    },\r\n                    company_id: contactData.companyId,\r\n                    company_name: contactData.companyName,\r\n                    contact_type: 'STORED' as const,\r\n                    create: false,\r\n                    dob: contactData.dob,\r\n                    emails: contactData.emails &&\r\n                        contactData.emails.map(e => ({\r\n                            id: e.id,\r\n                            type: e.type,\r\n                            email_address: e.emailAddress,\r\n                        })),\r\n                    first_name: contactData.firstName,\r\n                    last_name: contactData.lastName,\r\n                    phones: contactData.phones,\r\n                    segment: contactData.segment,\r\n                    title: contactData.title,\r\n                    web_url: contactData.webUrl,\r\n                    _id: contactData.Id,\r\n                }\r\n            }\r\n        },\r\n        [\r\n            activeItem,\r\n            displayNameFormat,\r\n            firstName,\r\n            lastName,\r\n            rescheduleForm,\r\n            saveCalendarEventDetails,\r\n            setRescheduleFormState,\r\n            openInteractionSlidingModal,\r\n            userId,\r\n        ],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeRescheduleFormState() {\r\n            return {\r\n                dateFrom,\r\n                dateTo,\r\n                timeFrom,\r\n                timeTo,\r\n                selectedTimezoneId,\r\n                remindIn,\r\n                remindInUnit,\r\n                completed,\r\n                contacts,\r\n                title,\r\n                notes,\r\n                submittingState,\r\n                setSubmittingState,\r\n                handlers: {\r\n                    handleDateChange,\r\n                    handleTimeZoneSelect,\r\n                    handleRemindAmountChange,\r\n                    handleRemindUnitsChange,\r\n                    handleCompletedCheckboxChange,\r\n                    handleContactRecordChange,\r\n                    handleTitleChange,\r\n                    handleCancelClick,\r\n                    handleSubmitClick,\r\n                    handleNotesChange,\r\n                },\r\n                contactHandlersFactories: {\r\n                    handleContactNameChangeFactory,\r\n                    handleContactPhoneChangeFactory,\r\n                    handleContactPhoneTypeChangeFactory,\r\n                    handleContactCreateContactChangeFactory,\r\n                    handleContactPhoneIdChangeFactory,\r\n                },\r\n            }\r\n        },\r\n        [\r\n            completed,\r\n            contacts,\r\n            dateFrom,\r\n            dateTo,\r\n            handleCancelClick,\r\n            handleCompletedCheckboxChange,\r\n            handleContactCreateContactChangeFactory,\r\n            handleContactNameChangeFactory,\r\n            handleContactPhoneChangeFactory,\r\n            handleContactPhoneIdChangeFactory,\r\n            handleContactPhoneTypeChangeFactory,\r\n            handleContactRecordChange,\r\n            handleDateChange,\r\n            handleNotesChange,\r\n            handleRemindAmountChange,\r\n            handleRemindUnitsChange,\r\n            handleSubmitClick,\r\n            handleTimeZoneSelect,\r\n            handleTitleChange,\r\n            notes,\r\n            remindIn,\r\n            remindInUnit,\r\n            selectedTimezoneId,\r\n            submittingState,\r\n            timeFrom,\r\n            timeTo,\r\n            title,\r\n        ],\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {ContactRecord, RescheduleForm as RescheduleFormType} from '@bpinc/state-interaction-ui'\r\n\r\n\r\ninterface UseContactRecordInitializerParams {\r\n    contacts: ContactRecord[]\r\n    setRescheduleFormState: (rescheduleForm: Partial<RescheduleFormType>) => void\r\n}\r\n\r\nexport function useContactRecordInitializer({setRescheduleFormState, contacts}: UseContactRecordInitializerParams) {\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const {getContact} = useContactsStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (!contacts?.length) {\r\n            const contactId = activeItem?.contactId\r\n            if (contactId) {\r\n                getContact({id: contactId}).then(contactData => {\r\n                    if (contactData) {\r\n                        saveWorkItemContact(contactData)\r\n                    }\r\n                }).catch(err => {\r\n                    console.error(err)\r\n                    saveWorkItemContact()\r\n                })\r\n            } else {\r\n                saveWorkItemContact()\r\n            }\r\n        }\r\n\r\n        function saveWorkItemContact(contactData?: ContactType) {\r\n            setRescheduleFormState({\r\n                contacts: [\r\n                    {\r\n                        name: activeItem?.displayData.displayName ?? '',\r\n                        phone: activeItem?.displayData.number ?? '',\r\n                        createContact: false,\r\n                        phoneType: PhoneTypes.BUSINESS,\r\n                        contactId: activeItem?.contactId,\r\n                        phoneId: contactData?.phones?.find(number => number.phone === activeItem?.displayData.number)?.id,\r\n                        contactData,\r\n                    },\r\n                ],\r\n            })\r\n        }\r\n    }, [activeItem, contacts?.length, getContact, setRescheduleFormState])\r\n\r\n\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {DropdownItemProps} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface UseContactPhoneOptionsParams {\r\n    contactData?: ContactType\r\n}\r\n\r\nexport const OTHER_PHONE_OPTION_VALUE = 'OTHER'\r\n\r\n\r\nexport function useContactPhoneOptions({\r\n    contactData,\r\n}: UseContactPhoneOptionsParams): DropdownItemProps[] {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {formatPhoneType} = useFormatting()\r\n    const contactPhones = contactData?.phones?.map(number => {\r\n        return {\r\n            value: number.id,\r\n            text: `${formatPhone(number.phone)} (${formatPhoneType(number.type)})`,\r\n        }\r\n    })\r\n\r\n    return useMemo(\r\n        function memoizePhoneOptions() {\r\n            return [\r\n                ...(contactPhones ?? []),\r\n                {\r\n                    value: OTHER_PHONE_OPTION_VALUE,\r\n                    text: t.CALL_DETAILS_FORM.rcp_option_other(),\r\n                },\r\n            ]\r\n        },\r\n        [contactPhones, t.CALL_DETAILS_FORM],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport type {ContactRecord} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useContactPhoneOptions} from '../../hooks/useContactPhoneOptions'\r\nimport type {ExistingContactRecordProps} from '../ContactRecords/ExistingContactRecord'\r\n\r\n\r\ninterface ContactPhonesDropdownProps {\r\n    contact: ContactRecord\r\n    contactHandlers: ExistingContactRecordProps['contactHandlers']\r\n}\r\n\r\nexport const ContactPhonesDropdown: React.FC<ContactPhonesDropdownProps> = ({contact, contactHandlers}) => {\r\n    const {t} = useLocalizationState()\r\n    const options = useContactPhoneOptions({contactData: contact.contactData})\r\n\r\n    return (\r\n        <SmForm.Group label={t.CALENDAR_EVENT_FORM.contact_on_label()}>\r\n            <label className=\"text-main-secondary\">{t.CALENDAR_EVENT_FORM.contact_on_label()}</label>\r\n            <SmForm.Field\r\n                aria-label={t.CALENDAR_EVENT_FORM.contact_on_label()}\r\n                control={Dropdown}\r\n                onChange={contactHandlers.handleContactPhoneIdChange}\r\n                value={contact.phoneId}\r\n                options={options}\r\n            />\r\n        </SmForm.Group>\r\n    )\r\n}\r\n\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {SmForm, SmInput} from '@bpinc/lib-external-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport type {ContactRecord as ContactRecordType} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ExistingContactRecordProps} from './ExistingContactRecord'\r\n\r\n\r\ninterface OtherPhoneFormGroupProps {\r\n    contact: ContactRecordType\r\n    contactHandlers: ExistingContactRecordProps['contactHandlers']\r\n}\r\n\r\nexport const OtherPhoneFormGroup: React.FC<OtherPhoneFormGroupProps> = ({contact, contactHandlers}) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatPhoneType} = useFormatting()\r\n\r\n    const options = useMemo(function memoizePhoneTypeOptions() {\r\n        const contactPhoneTypes = Object.values(PhoneTypes)\r\n\r\n        return contactPhoneTypes.map(phoneType => ({value: phoneType, text: formatPhoneType(phoneType)}))\r\n    }, [formatPhoneType])\r\n\r\n    return (\r\n        <SmForm.Group className=\"flex items-center\">\r\n            <SmForm.Field\r\n                value={contact.phone}\r\n                onChange={contactHandlers.handleContactPhoneChange}\r\n                placeholder={t.CALENDAR_EVENT_FORM.contact_on_label()}\r\n                control={SmInput}\r\n            />\r\n            <SmForm.Field\r\n                value={contact.phoneType}\r\n                control={Dropdown}\r\n                options={options}\r\n                onChange={contactHandlers.handleContactPhoneTypeChange}\r\n            />\r\n        </SmForm.Group>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport type {SmInputProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmForm, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport type {ContactRecord} from '@bpinc/state-interaction-ui'\r\n\r\nimport {OTHER_PHONE_OPTION_VALUE} from '../../hooks/useContactPhoneOptions'\r\nimport {ContactPhonesDropdown} from '../FormControls/ContactPhonesDropdown'\r\nimport {OtherPhoneFormGroup} from './OtherPhoneFormGroup'\r\n\r\n\r\nexport interface ExistingContactRecordProps {\r\n    contact: ContactRecord\r\n    contactHandlers: {\r\n        handleContactNameChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: SmInputProps\r\n        ) => void\r\n        handleContactPhoneChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: SmInputProps\r\n        ) => void\r\n        handleContactPhoneTypeChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n\r\n        handleContactPhoneIdChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n        handleContactCreateContactChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n    }\r\n}\r\n\r\nexport const ExistingContactRecord: React.FC<ExistingContactRecordProps> = ({\r\n    contact,\r\n    contactHandlers,\r\n}) => {\r\n    const contacts = useContactsState('contacts')\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {formatFullName} = useFormatting()\r\n    const contactId = contact?.contactId ?? ''\r\n    const avatarUrl = getAvatarUrl({contactId})\r\n    const {contactData} = contact\r\n\r\n    return (\r\n        <SmSegment>\r\n            {contacts[contactId]?.isLoading ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : (\r\n                <>\r\n                    <SmForm.Field className=\"flex items-center\">\r\n                        <AvatarLegacy\r\n                            size={36}\r\n                            firstName={contactData?.firstName}\r\n                            lastName={contactData?.lastName}\r\n                            url={avatarUrl}\r\n                            type=\"contact\"\r\n                        />\r\n                        <p className=\"ml-2 text-xl\">\r\n                            {formatFullName(contactData?.firstName, contactData?.lastName)}\r\n                        </p>\r\n                    </SmForm.Field>\r\n                    <ContactPhonesDropdown\r\n                        contact={contact}\r\n                        contactHandlers={contactHandlers}\r\n                    />\r\n                    {contact.phoneId === OTHER_PHONE_OPTION_VALUE && (\r\n                        <OtherPhoneFormGroup\r\n                            contact={contact}\r\n                            contactHandlers={contactHandlers}\r\n                        />\r\n                    )}\r\n                </>\r\n            )}\r\n        </SmSegment>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {SmInputProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmCheckbox, SmForm, SmInput, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport type {ContactRecord as ContactRecordType} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ContactRecordProps {\r\n    contact: ContactRecordType\r\n    contactHandlers: {\r\n        handleContactNameChange: (evt: SyntheticEvent<Element, Event>, {value}: SmInputProps) => void\r\n        handleContactPhoneChange: (evt: SyntheticEvent<Element, Event>, {value}: SmInputProps) => void\r\n        handleContactPhoneTypeChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n        handleContactCreateContactChange: (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n    }\r\n}\r\n\r\nexport const NonExistingContactRecord: React.FC<ContactRecordProps> = ({\r\n    contactHandlers,\r\n    contact,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {formatPhoneType} = useFormatting()\r\n    const options = useMemo(function memoizePhoneTypeOptions() {\r\n        const contactPhoneTypes = Object.values(PhoneTypes)\r\n\r\n        return contactPhoneTypes.map(phoneType => ({value: phoneType, text: formatPhoneType(phoneType)}))\r\n    }, [formatPhoneType])\r\n\r\n    return (\r\n        <SmSegment>\r\n            <SmForm.Field\r\n                value={contact.name}\r\n                onChange={contactHandlers.handleContactNameChange}\r\n                label={t.CALENDAR_EVENT_FORM.contact_name_placeholder()}\r\n                placeholder={t.CALENDAR_EVENT_FORM.contact_name_placeholder()}\r\n                control={SmInput}\r\n            />\r\n            <SmForm.Field\r\n                value={contact.phone}\r\n                onChange={contactHandlers.handleContactPhoneChange}\r\n                label={t.CALENDAR_EVENT_FORM.contact_on_label()}\r\n                placeholder={t.CALENDAR_EVENT_FORM.contact_on_label()}\r\n                control={SmInput}\r\n            />\r\n            <SmForm.Group>\r\n                <SmForm.Field\r\n                    checked={contact.createContact}\r\n                    label={t.CALENDAR_EVENT_FORM.contact_create_box_label()}\r\n                    control={SmCheckbox}\r\n                    onChange={contactHandlers.handleContactCreateContactChange}\r\n                />\r\n                <SmForm.Field\r\n                    value={contact.phoneType}\r\n                    control={Dropdown}\r\n                    options={options}\r\n                    onChange={contactHandlers.handleContactPhoneTypeChange}\r\n                />\r\n            </SmForm.Group>\r\n        </SmSegment>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {ContactRecord as ContactRecordType} from '@bpinc/state-interaction-ui'\r\n\r\nimport type {ContactRecordsProps} from './ContactRecords'\r\nimport {ExistingContactRecord} from './ExistingContactRecord'\r\nimport {NonExistingContactRecord} from './NonExistingContactRecord'\r\n\r\n\r\ninterface ContactRecordProps {\r\n    index: number\r\n    contact: ContactRecordType\r\n    contactHandlersFactories: ContactRecordsProps['contactHandlersFactories']\r\n}\r\n\r\nexport const ContactRecord: React.FC<ContactRecordProps> = ({contactHandlersFactories, contact, index}) => {\r\n\r\n    const contactHandlers = useMemo(\r\n        function memoizeContactHandlers() {\r\n            return {\r\n                handleContactNameChange: contactHandlersFactories.handleContactNameChangeFactory(\r\n                    index,\r\n                ),\r\n                handleContactPhoneChange: contactHandlersFactories.handleContactPhoneChangeFactory(\r\n                    index,\r\n                ),\r\n                handleContactPhoneTypeChange: contactHandlersFactories.handleContactPhoneTypeChangeFactory(\r\n                    index,\r\n                ),\r\n                handleContactPhoneIdChange: contactHandlersFactories.handleContactPhoneIdChangeFactory(\r\n                    index,\r\n                ),\r\n                handleContactCreateContactChange: contactHandlersFactories.handleContactCreateContactChangeFactory(\r\n                    index,\r\n                ),\r\n            }\r\n        },\r\n        [contactHandlersFactories, index],\r\n    )\r\n    return (\r\n        <>\r\n            {contact.contactId ? (\r\n                <ExistingContactRecord contact={contact} contactHandlers={contactHandlers} />\r\n            ) : (\r\n                <NonExistingContactRecord contact={contact} contactHandlers={contactHandlers} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {SmInputProps} from '@bpinc/lib-external-ui-elements'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\nimport type {ContactRecord as ContactRecordType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {ContactRecord} from './ContactRecord'\r\n\r\n\r\nexport interface ContactRecordsProps {\r\n    contacts: ContactRecordType[]\r\n    contactHandlersFactories: {\r\n        handleContactNameChangeFactory: (\r\n            index: number\r\n        ) => (evt: SyntheticEvent<Element, Event>, {value}: SmInputProps) => void\r\n        handleContactPhoneChangeFactory: (\r\n            index: number\r\n        ) => (evt: SyntheticEvent<Element, Event>, {value}: SmInputProps) => void\r\n        handleContactPhoneIdChangeFactory: (\r\n            index: number\r\n        ) => (evt: SyntheticEvent<Element, Event>, {value}: DropdownProps) => void\r\n        handleContactPhoneTypeChangeFactory: (\r\n            index: number\r\n        ) => (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n        handleContactCreateContactChangeFactory: (\r\n            index: number\r\n        ) => (\r\n            evt: SyntheticEvent<Element, Event>,\r\n            {value}: DropdownProps\r\n        ) => void\r\n    }\r\n}\r\n\r\nexport const ContactRecords: React.FC<ContactRecordsProps> = ({\r\n    contactHandlersFactories,\r\n    contacts,\r\n}) => {\r\n    return (\r\n        <>\r\n            {contacts.map((contact, index) => (\r\n                <ContactRecord\r\n                    key={index}\r\n                    index={index}\r\n                    contact={contact}\r\n                    contactHandlersFactories={contactHandlersFactories}\r\n                />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {SmCheckboxProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmCheckbox} from '@bpinc/lib-external-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const CompletedCheckBox: React.FC<SmCheckboxProps> = props => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return <SmCheckbox label={t.GLOBAL.interaction_state_completed()} {...props} />\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport type {SmInputProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmForm, SmInput} from '@bpinc/lib-external-ui-elements'\r\nimport {Dropdown} from '@bpinc/lib-ui-elements'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements/'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ReminderProps {\r\n    amountValue: number\r\n    unitsValue: string\r\n    handleAmountChange: (event: SyntheticEvent, {value}: SmInputProps) => void\r\n    handleUnitsChange: (event: SyntheticEvent, {value}: DropdownProps) => void\r\n}\r\n\r\nexport const Reminder: React.FC<ReminderProps> = ({\r\n    amountValue,\r\n    unitsValue,\r\n    handleAmountChange,\r\n    handleUnitsChange,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const options = useMemo(\r\n        function memoizeUnitOptions() {\r\n            return [\r\n                {value: 'MINUTES', text: t.GLOBAL.time_units_minutes()},\r\n                {value: 'HOURS', text: t.GLOBAL.time_units_hours()},\r\n                {value: 'DAYS', text: t.GLOBAL.time_units_days()},\r\n            ]\r\n        },\r\n        [t.GLOBAL],\r\n    )\r\n\r\n    return (\r\n        <SmForm.Field>\r\n            <label>{t.CALENDAR_EVENT_FORM.label_reminder()}</label>\r\n            <SmForm.Group>\r\n                <SmForm.Field className=\"w-[76px]\">\r\n                    <SmInput value={amountValue} onChange={handleAmountChange} />\r\n                </SmForm.Field>\r\n                <SmForm.Field>\r\n                    <Dropdown\r\n                        selection\r\n                        options={options}\r\n                        value={unitsValue}\r\n                        onChange={handleUnitsChange}\r\n                    />\r\n                </SmForm.Field>\r\n            </SmForm.Group>\r\n        </SmForm.Field>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {SmInputProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {DateInput, TimeInput} from '@bpinc/lib-semantic-ui-date-time-pickers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface RescheduleDateTimeBlockProps {\r\n    dateFrom: string\r\n    dateTo: string\r\n    timeFrom: string\r\n    timeTo: string\r\n    handleDateChange: (e: SyntheticEvent, {value, name}: SmInputProps) => void\r\n}\r\n\r\nexport const RescheduleDateTimeBlock: React.FC<RescheduleDateTimeBlockProps> = ({dateFrom, dateTo, timeFrom, timeTo, handleDateChange}) => {\r\n    const {t} = useLocalizationState()\r\n    const smallPickerClassName = tcn('w-1/4 [&_input]:w-full')\r\n    return (\r\n        <>\r\n            <SmForm.Field>\r\n                <label>{t.GLOBAL.from()}</label>\r\n                <SmForm.Group>\r\n                    <SmForm.Field>\r\n                        <label>{t.CALENDAR_EVENT_FORM.label_date()}</label>\r\n                        <DateInput\r\n                            required\r\n                            value={dateFrom}\r\n                            onChange={handleDateChange}\r\n                            placeholder=\"DD/MM/YYYY\"\r\n                            closable\r\n                            animation=\"fade right\"\r\n                            popupPosition=\"bottom left\"\r\n                            localization={navigator.language}\r\n                            name=\"dateFrom\"\r\n                            aria-label={t.CALENDAR_EVENT_FORM.date_from_label()}\r\n                        />\r\n                    </SmForm.Field>\r\n                    <SmForm.Field>\r\n                        <label>{t.CALENDAR_EVENT_FORM.label_time()}</label>\r\n                        <TimeInput\r\n                            required\r\n                            value={timeFrom}\r\n                            name=\"timeFrom\"\r\n                            onChange={handleDateChange}\r\n                            className={smallPickerClassName}\r\n                            placeholder=\"HH:MM\"\r\n                            closable\r\n                            animation=\"fade right\"\r\n                            popupPosition=\"bottom right\"\r\n                            localization={navigator.language}\r\n                            aria-label={t.CALENDAR_EVENT_FORM.time_from_label()}\r\n                        />\r\n                    </SmForm.Field>\r\n                </SmForm.Group>\r\n            </SmForm.Field>\r\n            <SmForm.Field>\r\n                <label>{t.GLOBAL.to()}</label>\r\n                <SmForm.Group>\r\n                    <SmForm.Field>\r\n                        <label>{t.CALENDAR_EVENT_FORM.label_date()}</label>\r\n                        <DateInput\r\n                            required\r\n                            value={dateTo}\r\n                            name=\"dateTo\"\r\n                            onChange={handleDateChange}\r\n                            placeholder=\"DD/MM/YYYY\"\r\n                            closable\r\n                            animation=\"fade right\"\r\n                            popupPosition=\"bottom left\"\r\n                            localization={navigator.language}\r\n                            aria-label={t.CALENDAR_EVENT_FORM.date_to_label()}\r\n                        />\r\n                    </SmForm.Field>\r\n                    <SmForm.Field>\r\n                        <label>{t.CALENDAR_EVENT_FORM.label_time()}</label>\r\n                        <TimeInput\r\n                            required\r\n                            value={timeTo}\r\n                            name=\"timeTo\"\r\n                            onChange={handleDateChange}\r\n                            className={smallPickerClassName}\r\n                            placeholder=\"HH:MM\"\r\n                            closable\r\n                            animation=\"fade right\"\r\n                            popupPosition=\"bottom right\"\r\n                            localization={navigator.language}\r\n                            aria-label={t.CALENDAR_EVENT_FORM.time_to_label()}\r\n                        />\r\n                    </SmForm.Field>\r\n                </SmForm.Group>\r\n            </SmForm.Field>\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {SmForm, SmInput, SmTextArea} from '@bpinc/lib-external-ui-elements'\r\nimport {IconSuccess} from '@bpinc/lib-icons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Loader, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport type {RescheduleForm as RescheduleFormType} from '@bpinc/state-interaction-ui'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useCurrentDatesInitializer} from '../hooks/useCurrentDatesInitializer'\r\nimport {useFavoriteTimeZoneInitializer} from '../hooks/useFavoriteTimeZoneInitializer'\r\nimport {useRescheduleFormState} from '../hooks/useRescheduleFormState'\r\nimport {ContactRecords} from './ContactRecords/ContactRecords'\r\nimport {CompletedCheckBox} from './FormControls/CompletedCheckBox'\r\nimport {Reminder} from './FormControls/Reminder'\r\nimport {RescheduleDateTimeBlock} from './FormControls/RescheduleDateTimeBlock'\r\nimport {TimeZoneDropdown} from './TimeZoneDropdown'\r\n\r\n\r\nexport const RescheduleForm = () => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        selectedTimezoneId,\r\n        remindIn,\r\n        remindInUnit,\r\n        completed,\r\n        contacts,\r\n        title,\r\n        notes,\r\n        submittingState,\r\n        setSubmittingState,\r\n        handlers: {\r\n            handleDateChange,\r\n            handleTimeZoneSelect,\r\n            handleRemindAmountChange,\r\n            handleRemindUnitsChange,\r\n            handleCompletedCheckboxChange,\r\n            handleTitleChange,\r\n            handleCancelClick,\r\n            handleSubmitClick,\r\n            handleNotesChange,\r\n        },\r\n        contactHandlersFactories,\r\n        ...dateTimeState\r\n    } = useRescheduleFormState()\r\n\r\n    const {setItemState} = useInteractionUIState()\r\n    const itemId = useInteractionId()\r\n\r\n    const setRescheduleFormState = useCallback(\r\n        function setRescheduleFormStateCallback(\r\n            rescheduleForm: Partial<RescheduleFormType>,\r\n        ) {\r\n            setItemState(itemId, state => ({\r\n                ...state,\r\n                rescheduleForm: {...state.rescheduleForm, ...rescheduleForm},\r\n            }))\r\n        },\r\n        [itemId, setItemState],\r\n    )\r\n\r\n    const handleInitializeFavoriteTimeZone = useCallback(\r\n        function handleInitializeFavoriteTimeZoneCallback(\r\n            suggestedTimeZoneId: string,\r\n        ) {\r\n            setRescheduleFormState({selectedTimezoneId: suggestedTimeZoneId})\r\n        },\r\n        [setRescheduleFormState],\r\n    )\r\n\r\n    useCurrentDatesInitializer({setRescheduleFormState, dateTimeState})\r\n    useFavoriteTimeZoneInitializer({\r\n        additionalOnInitializeHandler: handleInitializeFavoriteTimeZone,\r\n    })\r\n\r\n\r\n    if (submittingState === 'loading') {\r\n        return <Loader active size=\"huge\" color=\"primary\" />\r\n    }\r\n\r\n    if (submittingState === 'success') {\r\n        return <IconSuccess className=\"!absolute inset-0\" />\r\n    }\r\n\r\n    return (\r\n        <SmForm>\r\n            <SmForm.Field\r\n                control={SmInput}\r\n                label={t.CALENDAR_EVENT_FORM.event_title()}\r\n                placeholder={t.CALENDAR_EVENT_FORM.event_title()}\r\n                value={title}\r\n                onChange={handleTitleChange}\r\n                required\r\n            />\r\n            <div className=\"flex justify-end\">\r\n                <SemanticButton primary onClick={handleSubmitClick}>\r\n                    {t.CALENDAR_EVENT_FORM.button_save_text()}\r\n                </SemanticButton>\r\n                <SemanticButton onClick={handleCancelClick}>\r\n                    {t.CALENDAR_EVENT_FORM.button_cancel_text()}\r\n                </SemanticButton>\r\n            </div>\r\n            <RescheduleDateTimeBlock\r\n                handleDateChange={handleDateChange}\r\n                {...dateTimeState}\r\n            />\r\n            <TimeZoneDropdown\r\n                label={t.CALENDAR_EVENT_FORM.label_timezone()}\r\n                handleSelect={handleTimeZoneSelect}\r\n                selectedTimeZone={selectedTimezoneId}\r\n            />\r\n            <Reminder\r\n                amountValue={remindIn}\r\n                unitsValue={remindInUnit}\r\n                handleUnitsChange={handleRemindUnitsChange}\r\n                handleAmountChange={handleRemindAmountChange}\r\n            />\r\n            <SmForm.Field\r\n                onChange={handleNotesChange}\r\n                value={notes}\r\n                control={SmTextArea}\r\n                label={t.CALENDAR_EVENT_FORM.label_note()}\r\n            />\r\n            <CompletedCheckBox\r\n                onChange={handleCompletedCheckboxChange}\r\n                checked={completed}\r\n            />\r\n            <ContactRecords\r\n                contactHandlersFactories={contactHandlersFactories}\r\n                contacts={contacts}\r\n            />\r\n        </SmForm>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport {identity} from 'lodash-es'\r\n\r\nimport {addTime, formatDate} from '@bpinc/lib-helpers'\r\nimport type {RescheduleForm as RescheduleFormType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {dateFormat, timeFormat} from './useRescheduleFormState'\r\n\r\n\r\ninterface UseCurrentDatesInitializerParams {\r\n    setRescheduleFormState: (rescheduleForm: Partial<RescheduleFormType>) => void\r\n    dateTimeState: { dateFrom: string; dateTo: string; timeFrom: string; timeTo: string }\r\n}\r\n\r\nexport function useCurrentDatesInitializer({setRescheduleFormState, dateTimeState}: UseCurrentDatesInitializerParams) {\r\n    useEffect(() => {\r\n        const datesInitialized = Object.values(dateTimeState).every(identity)\r\n        if (!datesInitialized) {\r\n            initializeDates()\r\n        }\r\n\r\n        function initializeDates() {\r\n            const dateFrom = formatDate(new Date(), dateFormat)\r\n            const timeFrom = formatDate(new Date(), timeFormat)\r\n            const dateTo = formatDate(addTime(new Date(), 'hours', 1), dateFormat)\r\n            const timeTo = formatDate(addTime(new Date(), 'hours', 1), timeFormat)\r\n\r\n            setRescheduleFormState({dateFrom, timeFrom, dateTo, timeTo})\r\n        }\r\n    }, [dateTimeState, setRescheduleFormState])\r\n\r\n}\r\n","import {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isWorkItem, isWorkitemCall} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {useSelectedDispositionType} from './useSelectedDispositionType'\r\n\r\n\r\nexport function useShowDispositionRescheduleForm(): boolean {\r\n    const interactionId = useInteractionId()\r\n    const activeItemIsWorkItem = useInteractionProp(\r\n        interactionId,\r\n        activeItem => isWorkItem(activeItem) || isWorkitemCall(activeItem),\r\n    )\r\n    const dispositionType = useSelectedDispositionType()\r\n\r\n    return activeItemIsWorkItem && dispositionType === 'CONTINUE'\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getItemDisposition, getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport type {DispositionType} from '@bpinc/ad-transport-types'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\n\r\nexport function useSelectedDispositionType(): DispositionType | undefined {\r\n    const interactionId = useInteractionId()\r\n    const serviceId = useInteractionProp(interactionId, getServiceId)\r\n    const selectedDisposition = useInteractionProp(interactionId, getItemDisposition)\r\n    const {dispositions} = useServicesDispositionsState()\r\n\r\n    return useMemo(function memoizeOutput() {\r\n        const dispositionsData =\r\n            dispositions && serviceId ? dispositions[serviceId] : {}\r\n\r\n        const selectedDispositionData =\r\n            selectedDisposition &&\r\n            dispositionsData?.[selectedDisposition.id]\r\n\r\n\r\n        return selectedDispositionData?.type\r\n    }, [dispositions, selectedDisposition, serviceId])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useDispositionsSettings} from '@bpinc/ad-interaction-state-hooks'\r\nimport {isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {DispositionRescheduleForm} from '../../reschedule'\r\nimport {useShowDispositionRescheduleForm} from '../hooks/useShowDispositionRescheduleForm'\r\nimport {DispositionSelect} from './Dispositions/DispositionSelect'\r\nimport {ResolutionNote} from './Notes/ResolutionNote'\r\n\r\n\r\ntype ResolutionProps = {\r\n    className?: string\r\n}\r\n\r\nexport const Resolution: React.FC<ResolutionProps> = React.memo(function Resolution({className}) {\r\n    const interactionId = useInteractionId()\r\n    const {useDispositions} = useDispositionsSettings(interactionId)\r\n    const activeItemIsWorkItem = useInteractionProp(interactionId, isWorkItem)\r\n    const showDispositionRescheduleForm = useShowDispositionRescheduleForm()\r\n\r\n    return (\r\n        <div className={tcn('overflow-auto p-4 pb-8', className)}>\r\n            {(activeItemIsWorkItem || useDispositions) && <DispositionSelect accordion />}\r\n            <ResolutionNote layoutClassName=\"mt-6\" />\r\n            {showDispositionRescheduleForm && <DispositionRescheduleForm />}\r\n        </div>\r\n    )\r\n})\r\n","\r\nexport const DOMAIN_AUTH_URL = 'http://localhost:9897'\r\nconst DOMAIN_PARAM = 'domain'\r\n\r\nconst linkUrl = new URL(DOMAIN_AUTH_URL)\r\nlinkUrl.searchParams.append(DOMAIN_PARAM, location.hostname)\r\n\r\nexport const CURRENT_DOMAIN_AUTH_URL = linkUrl.toString()\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nconst DOMAIN_AUTHORIZATION_MODAL_ID = 'bpClient/onShowDomainAuthorizationDialog'\r\n\r\n\r\nexport const useDomainAuthorizationPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal, closeModal} = useModalsStateMethods()\r\n    const t = useLocalizationState('t')\r\n\r\n    const onShowDomainAuthorizationDialog = useEvent(() => {\r\n        openModal({\r\n            id: DOMAIN_AUTHORIZATION_MODAL_ID,\r\n            title: t.INSTALLATION_PROCESS.bp_client_not_authorized_header(),\r\n            body: (\r\n                <>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part1()}\r\n                    </span>\r\n                    <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {t.ERROR_MESSAGES.domainAuthentificationErrorAnchor()}\r\n                    </a>\r\n                    <span>\r\n                        {t.INSTALLATION_PROCESS.bp_client_not_authorized_message_part2()}\r\n                    </span>\r\n                </>\r\n            ),\r\n            actions: ({closeModal: closeThisModal}) => (\r\n                <SmButton onClick={closeThisModal}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    const onHideDomainAuthorizationDialog = useEvent(() => {\r\n        closeModal(DOMAIN_AUTHORIZATION_MODAL_ID)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({\r\n            onShowDomainAuthorizationDialog,\r\n            onHideDomainAuthorizationDialog,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowDomainAuthorizationDialog, onHideDomainAuthorizationDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState, useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInstallationMethods} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\nconst linkClass = 'cursor-pointer text-primary-legacy'\r\n\r\nconst EXTENSION_ID = 'ext-link'\r\nconst EXTENSION_ID_FF = 'ext-link-firefox'\r\nconst PLUGIN_ID = 'plugin-link'\r\n\r\ntype ModalContentProps = {\r\n    isExtAvailable: boolean\r\n    install: boolean\r\n}\r\n\r\nconst ModalContent: React.FC<ModalContentProps> = ({isExtAvailable, install}) => {\r\n    const {t: {INSTALLATION_PROCESS: i18n}} = useLocalizationState()\r\n    const {\r\n        installChromeExtension,\r\n        installFirefoxExtension,\r\n        installBPClientPlugin,\r\n    } = useInstallationMethods()\r\n\r\n    /* Set click handler after the modal is rendered or translations are changed */\r\n    useEffect(() => {\r\n        const chromeLink = document.getElementById(EXTENSION_ID)\r\n        const firefoxLink = document.getElementById(EXTENSION_ID_FF)\r\n        const pluginLink = document.getElementById(PLUGIN_ID)\r\n\r\n        chromeLink?.addEventListener('click', installChromeExtension)\r\n        firefoxLink?.addEventListener('click', installFirefoxExtension)\r\n        pluginLink?.addEventListener('click', installBPClientPlugin)\r\n\r\n        return () => {\r\n            chromeLink?.removeEventListener('click', installChromeExtension)\r\n            firefoxLink?.removeEventListener('click', installFirefoxExtension)\r\n            pluginLink?.removeEventListener('click', installBPClientPlugin)\r\n        }\r\n    }, [installChromeExtension, installFirefoxExtension, installBPClientPlugin])\r\n\r\n    let content: string = i18n.install_updateHeader(PLUGIN_ID, linkClass)\r\n\r\n    if (install) {\r\n        if (platformInfo.browser === 'chrome') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderChrome(EXTENSION_ID, PLUGIN_ID, linkClass)\r\n\r\n        } else if (platformInfo.browser === 'firefox') {\r\n            content = isExtAvailable\r\n                ? i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n                : i18n.install_installHeaderFirefox(EXTENSION_ID_FF, PLUGIN_ID, linkClass)\r\n\r\n        } else {\r\n            content = i18n.install_installHeader(PLUGIN_ID, linkClass)\r\n        }\r\n    }\r\n\r\n    return <div dangerouslySetInnerHTML={{__html: content}} />\r\n}\r\n\r\nexport const useInstallationRequiredPopup = () => {\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const isExtensionAvailable = useBpClientState('isExtensionAvailable')\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onInstallationRequired = useEvent((install: boolean) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent\r\n                    install={install}\r\n                    isExtAvailable={isExtensionAvailable}\r\n                />\r\n            ),\r\n            actions: {\r\n                ok: {\r\n                    title: i18n.window_buttonOk(),\r\n                },\r\n            },\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onInstallationRequired})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onInstallationRequired])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {URL_EXTENSION_INSTALLER_CHROME, URL_EXTENSION_INSTALLER_FIREFOX, URL_MAC_PLUGIN} from '@bpinc/lib-helpers-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\n\r\ntype Props = {\r\n    browserName: string\r\n}\r\n\r\nconst ModalContent: React.FC<Props> = ({browserName}) => {\r\n    const {INSTALLATION_PROCESS: i18n} = useLocalizationState('t')\r\n    const serverOrigin = useSessionState('serverOrigin')\r\n\r\n    const isChrome = platformInfo.browser === 'chrome'\r\n    const isFirefox = platformInfo.browser === 'firefox'\r\n    const isSafari = platformInfo.browser === 'safari'\r\n    let linkHref = ''\r\n\r\n    if (isChrome) {\r\n        linkHref = URL_EXTENSION_INSTALLER_CHROME\r\n    } else if (isFirefox) {\r\n        linkHref = serverOrigin + URL_EXTENSION_INSTALLER_FIREFOX\r\n    } else if (isSafari) {\r\n        linkHref = serverOrigin + URL_MAC_PLUGIN\r\n    }\r\n    return (\r\n        <>\r\n            <span>\r\n                {i18n.bp_client_old_extension_version(browserName)}\r\n            </span>\r\n            {(isChrome || isFirefox || isSafari) && (\r\n                <>\r\n                    <br />\r\n                    <br />\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part1()}\r\n                    </span>\r\n                    <a href={linkHref} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                        {i18n.bp_client_update_extension_text()}\r\n                    </a>\r\n                    <span>\r\n                        {i18n.bp_client_update_extension_part2()}\r\n                    </span>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const useOutdatedBrowserExtensionPopup = () => {\r\n    const bpClientConnector = useBpClientStateConnector()\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const onShowExtensionIsOldDialog = useEvent((browserName: string) => {\r\n        openModal({\r\n            title: i18n.window_title_warning(),\r\n            body: (\r\n                <ModalContent browserName={browserName} />\r\n            ),\r\n            actions: ({closeModal}) => (\r\n                <SmButton onClick={closeModal}>\r\n                    {i18n.window_buttonOk()}\r\n                </SmButton>\r\n            ),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = bpClientConnector.dispenser.subscribe({onShowExtensionIsOldDialog})\r\n        return subscription.unsubscribe\r\n    }, [bpClientConnector, onShowExtensionIsOldDialog])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst reloadPage = () => location.reload()\r\n\r\nexport function useOutdatedClientNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isClientOutdated = useAppConfigState('isClientOutdated')\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (isClientOutdated) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OutdatedClientAppError,\r\n                message: (\r\n                    <>\r\n                        <span>{i18n.reload_confirm_new_msg_part1()}</span>\r\n                        <a href=\"#\" onClick={reloadPage}>\r\n                            {i18n.reload_confirm_action_button_text()}\r\n                        </a>\r\n                        <span>{i18n.reload_confirm_new_msg_part2()}</span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.OutdatedClientAppError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isClientOutdated\r\n    }, [isClientOutdated, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState, useSessionStateConnector} from '@bpinc/ad-session-context'\r\nimport type {PhoneCapabilities, ServerErrorSource} from '@bpinc/ad-session-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst PHONE_OUT_OF_SERVICE_ERROR_DELAY = 5000\r\n\r\nexport const usePhoneOutOfServiceNotification = () => {\r\n    const sessionStateConnector = useSessionStateConnector()\r\n    const isHelperAppInstanceCreated = useBpClientState('isHelperAppInstanceCreated')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneType = useSessionState('phoneType')\r\n    const t = useLocalizationState('t')\r\n\r\n    const onUpdateCapabilities = useEvent((caps: PhoneCapabilities) => {\r\n        if (!caps.canDial && phoneType !== 'phone_type_none') {\r\n            bpLogger.warn('SIP phone or external line is out of service')\r\n\r\n            let message: string | undefined\r\n            switch (phoneType) {\r\n                case 'phone_type_nailed':\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_virtual_phone_not_available()\r\n                    break\r\n                case 'phone_type_soft_secure':\r\n                case 'phone_type_soft_unsecure':\r\n                    if (isHelperAppInstanceCreated) {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n                    } else {\r\n                        message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_helper_app_not_available()\r\n                    }\r\n                    break\r\n                default:\r\n                    message = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_phone_not_available()\r\n            }\r\n\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message,\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        } else {\r\n            bpLogger.info('SIP phone or external line is in service')\r\n            hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n        }\r\n    })\r\n\r\n    const onServerError = useEvent((source: ServerErrorSource, errorCode: number) => {\r\n        if (source === 'agentServer' && errorCode === 4) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.PhoneOutOfServiceError,\r\n                message: t.ERROR_MESSAGES.phoneIsNotRegistered(),\r\n                closable: false,\r\n                showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n            })\r\n        }\r\n    })\r\n\r\n    const onThreePCCServerGone = useEvent(() => {\r\n        showNotification({\r\n            type: 'warning',\r\n            id: Notifications.PhoneOutOfServiceError,\r\n            message: t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_messages_3pcc_server_connectionLost(),\r\n            closable: false,\r\n            showDelay: PHONE_OUT_OF_SERVICE_ERROR_DELAY,\r\n        })\r\n    })\r\n\r\n    const onThreePCCServerReady = useEvent(() => {\r\n        hideNotificationById(Notifications.PhoneOutOfServiceError)\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = sessionStateConnector.dispenser.subscribe({\r\n            onUpdateCapabilities,\r\n            onServerError,\r\n            onThreePCCServerGone,\r\n            onThreePCCServerReady,\r\n        })\r\n        return subscription.unsubscribe\r\n    }, [\r\n        onUpdateCapabilities,\r\n        onServerError,\r\n        onThreePCCServerGone,\r\n        onThreePCCServerReady,\r\n        sessionStateConnector,\r\n    ])\r\n}\r\n","import {useEmiErrorsNotifications} from './interaction/useEmiErrorsNotifications'\r\nimport {useFailedCallNotification} from './interaction/useFailedCallNotification'\r\nimport {useFavoritesLimitReachedError} from './interaction/useFavoritesLimitReachedError'\r\nimport {useInteractionNotAcceptedNotification} from './interaction/useInteractionNotAcceptedNotification'\r\nimport {usePhoneDeviceNotDetectedNotification} from './interaction/usePhoneDeviceNotDetectedNotification'\r\nimport {usePhoneTypeErrorNotification} from './interaction/usePhoneTypeErrorNotification'\r\nimport {\r\n    useReservedForIncomingInteractionNotification,\r\n} from './interaction/useReservedForIncomingInteractionNotification'\r\nimport {useWebRtcCallInChatErrorNotifications} from './interaction/useWebRtcCallInChatErrorNotifications'\r\nimport {useDomainAuthorizationPopup} from './system/useDomainAuthorizationPopup'\r\nimport {useInstallationRequiredPopup} from './system/useInstallationRequiredPopup'\r\nimport {useOfflineNotification} from './system/useOfflineNotification'\r\nimport {useOutdatedBrowserExtensionPopup} from './system/useOutdatedBrowserExtensionPopup'\r\nimport {useOutdatedClientNotification} from './system/useOutdatedClientNotification'\r\nimport {usePhoneOutOfServiceNotification} from './system/usePhoneOutOfServiceNotification'\r\nimport {useSipServerDisconnectedNotification} from './system/useSipServerDisconnectedNotification'\r\nimport {useSlowNetworkNotification} from './system/useSlowNetworkNotification'\r\nimport {useUnauthorizedDomainNotification} from './system/useUnauthorizedDomainNotification'\r\n\r\n\r\n/**\r\n * Top-level notifications which should be shown for application WITH COMM.PANEL ONLY\r\n */\r\nexport function useInteractionNotifications() {\r\n    useEmiErrorsNotifications()\r\n    useFailedCallNotification()\r\n    useInteractionNotAcceptedNotification()\r\n    usePhoneDeviceNotDetectedNotification()\r\n    usePhoneTypeErrorNotification()\r\n    useReservedForIncomingInteractionNotification()\r\n    useWebRtcCallInChatErrorNotifications()\r\n    useFavoritesLimitReachedError()\r\n}\r\n\r\n/**\r\n * Top-level notifications which should be shown in ANY application of AD framework (standalone KB, for instance)\r\n */\r\nexport function useSystemNotifications() {\r\n    useDomainAuthorizationPopup()\r\n    useInstallationRequiredPopup()\r\n    useOfflineNotification()\r\n    useOutdatedBrowserExtensionPopup()\r\n    useOutdatedClientNotification()\r\n    usePhoneOutOfServiceNotification()\r\n    useSipServerDisconnectedNotification()\r\n    useSlowNetworkNotification()\r\n    useUnauthorizedDomainNotification()\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {incomingEMIErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst MSTEAMS_ERROR_NOTIFICATION_ID = 'msteams_error_notification_id'\r\n\r\n/**\r\n * Shows EMI (Enterprise Messengers Integration) errors\r\n */\r\nexport function useEmiErrorsNotifications() {\r\n    const emiData = useSessionState('emi')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n\r\n    const getMsTeamsError = useEvent((errorCode: string, errorText = '') => {\r\n        switch (errorCode) {\r\n            case incomingEMIErrorMessageCodes.unable_to_get_access_token:\r\n                return i18n.msteams_access_token_error_message() + errorText\r\n            case incomingEMIErrorMessageCodes.refresh_token_expired:\r\n                return i18n.communicator_msteams_refresh_token_expired_error_message()\r\n            case incomingEMIErrorMessageCodes.user_deauthorized:\r\n                return undefined\r\n            case incomingEMIErrorMessageCodes.no_integration_account:\r\n            case incomingEMIErrorMessageCodes.feature_disabled:\r\n            case incomingEMIErrorMessageCodes.no_emi_servers:\r\n                return i18n.msteams_disabled()\r\n            case incomingEMIErrorMessageCodes.integration_account_changed:\r\n            case incomingEMIErrorMessageCodes.mismatched_directory_id:\r\n            case incomingEMIErrorMessageCodes.mismatched_client_id:\r\n                return i18n.communicator_msteams_reset_by_admin_message()\r\n            case incomingEMIErrorMessageCodes.azure_user_deleted:\r\n                return i18n.msteams_user_deleted()\r\n            case incomingEMIErrorMessageCodes.unsufficient_privileges:\r\n                return i18n.msteams_unsufficient_privileges()\r\n            default:\r\n                return errorText\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (emiData?.msteams?.errorCode) {\r\n            const message = getMsTeamsError(emiData.msteams.errorCode, emiData.msteams.errorMessage)\r\n            if (!message) {\r\n                return\r\n            }\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.MSTeamsIntegrationError,\r\n                message,\r\n            })\r\n        } else {\r\n            hideNotificationById(MSTEAMS_ERROR_NOTIFICATION_ID)\r\n        }\r\n    }, [showNotification, hideNotificationById, getMsTeamsError, emiData?.msteams])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteractionStateConnector} from '@bpinc/ad-interaction-state-context'\r\nimport {isCallWithoutCallId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\n/**\r\n * Show warning when call completed with invalid state\r\n */\r\nexport function useFailedCallNotification() {\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const onItemCompleted = useEvent(({item}: {item: Item}) => {\r\n        if (isCallWithoutCallId(item)) {\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.CallFailedDueNetworkIssueWarning,\r\n                message: i18n.notification_callWithNoAnswer_networkProblem(formatDate(new Date().getTime())),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionStateConnector.dispenser.subscribe({onItemCompleted})\r\n        return subscription.unsubscribe\r\n    }, [interactionStateConnector, onItemCompleted])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAgentState} from '@bpinc/ad-agent-state-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useInteractionNotAcceptedNotification() {\r\n    const {notReadyReason, state, stateSetDate, systemNotReadyReasons} = useAgentState()\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!systemNotReadyReasons) {\r\n            return\r\n        }\r\n        if (state === 'not_ready' && notReadyReason === systemNotReadyReasons.noAnswer) {\r\n            const time = stateSetDate && formatDate(stateSetDate)\r\n            const currentState = '\"No answer\"'\r\n            const message = i18n.notification_agentInNotReadyNoAnswer(currentState, time || '[TIME]')\r\n\r\n            showNotification({\r\n                type: 'warning',\r\n                id: Notifications.IncomingInteractionNotAcceptedError,\r\n                message,\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.IncomingInteractionNotAcceptedError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // update only on notReadyReason change\r\n    }, [notReadyReason, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function usePhoneDeviceNotDetectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const phoneDeviceIn = useSessionState('phoneDeviceIn')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (phoneDeviceIn) {\r\n            hideNotificationById(Notifications.PhoneDeviceNotDetectedError)\r\n            showNotification({\r\n                type: 'success',\r\n                id: Notifications.PhoneDeviceDetectedMessage,\r\n                message: i18n.device_detected(phoneDeviceIn),\r\n                duration: 5000,\r\n            })\r\n        } else {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.PhoneDeviceNotDetectedError,\r\n                message: i18n.device_empty(),\r\n                duration: 5000,\r\n                showDelay: 5000,\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track device change only\r\n    }, [phoneDeviceIn, updateNotification, hideNotificationById])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function usePhoneTypeErrorNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {startPhoneTypeSelection} = useSessionStateMethods()\r\n    const phoneTypeErrorCode = useSessionState('phoneTypeErrorCode')\r\n    const {AUTHORIZATION_DIALOG_LABELS: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (phoneTypeErrorCode === 2) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.BadPhoneExtensionError,\r\n                message: i18n.auth_message_undefinedExtension(),\r\n            })\r\n            startPhoneTypeSelection()\r\n        }\r\n\r\n        if (!phoneTypeErrorCode || phoneTypeErrorCode === 0) {\r\n            hideNotificationById(Notifications.BadPhoneExtensionError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only phoneTypeErrorCode\r\n    }, [phoneTypeErrorCode, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAgentState} from '@bpinc/ad-agent-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useReservedForIncomingInteractionNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {reservedForIncomingInteraction} = useAgentState()\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        if (reservedForIncomingInteraction) {\r\n            showNotification({\r\n                type: 'info',\r\n                id: Notifications.ReservedForIncomingInteractionMessage,\r\n                message: i18n.callback_reservation_header(),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.ReservedForIncomingInteractionMessage)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only reservedForIncomingInteraction\r\n    }, [reservedForIncomingInteraction, updateNotification])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {WebRtcError} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {NotificationType} from '@bpinc/lib-notifications-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useWebRtcCallInChatErrorNotifications = () => {\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const onWebRtcError = useEvent((error: WebRtcError) => {\r\n        let type: NotificationType, message: string\r\n        switch (error) {\r\n            case 'invalid_server':\r\n                type = 'error'\r\n                message = i18n.chat_web_rtc_invalid_ice_server()\r\n                break\r\n            case 'answer_timeout':\r\n                type = 'info'\r\n                message = i18n.chat_web_rtc_answer_timeout()\r\n                break\r\n            case 'already_exists':\r\n                type = 'warning'\r\n                message = i18n.chat_web_rtc_only_1_call_simultaneously()\r\n                break\r\n        }\r\n        showNotification({\r\n            type,\r\n            id: Notifications.ChatWebRtcError,\r\n            message,\r\n            closable: true,\r\n            duration: 10_000,\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector.dispenser.subscribe({onWebRtcError})\r\n        return subscription.unsubscribe\r\n    }, [interactionChatStateConnector, onWebRtcError])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useFavoritesStateConnector} from '@bpinc/state-favorites-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\n/**\r\n * Show error when user tried to add new favorite item, but the limit is reached\r\n */\r\nexport function useFavoritesLimitReachedError() {\r\n    const favoritesStateConnector = useFavoritesStateConnector()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {FAVORITES: i18n} = useLocalizationState('t')\r\n\r\n    const onLimitReachedError = useEvent(() => {\r\n        showNotification({\r\n            type: 'error',\r\n            id: Notifications.CallFailedDueNetworkIssueWarning,\r\n            closable: true,\r\n            tags: ['current-view'],\r\n            message: i18n.favorites_limit_reached_error(),\r\n        })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const subscription = favoritesStateConnector.dispenser.subscribe({onLimitReachedError})\r\n        return subscription.unsubscribe\r\n    }, [favoritesStateConnector, onLimitReachedError])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {\r\n    useIsOffline,\r\n    useOfflineErrorMessages,\r\n    useOfflineStateDataShowOfflineAlert,\r\n    useOfflineStateMethods,\r\n} from '@bpinc/ad-offline-state-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\nexport function useOfflineNotification() {\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const showOfflineAlert = useOfflineStateDataShowOfflineAlert()\r\n    const offlineErrorMessages = useOfflineErrorMessages()\r\n    const isOffline = useIsOffline()\r\n\r\n    useEffect(() => {\r\n        if (showOfflineAlert) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.OfflineStateError,\r\n                content: offlineErrorMessages.isOffline,\r\n                closable: true,\r\n                duration: 5000,\r\n                onHide: () => setShowOfflineAlert(false),\r\n            })\r\n        }\r\n    }, [\r\n        offlineErrorMessages.isOffline,\r\n        setShowOfflineAlert,\r\n        showNotification,\r\n        showOfflineAlert,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (!isOffline) {\r\n            setShowOfflineAlert(false)\r\n        }\r\n    }, [isOffline, setShowOfflineAlert])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent, usePreviousValueRef} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useSipServerDisconnectedNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {WINDOW_POPUP_TITLES_AND_MESSAGES: i18n} = useLocalizationState('t')\r\n    const sipServer = useSessionState('sipServer')\r\n    const prevSipServerRef = usePreviousValueRef(sipServer)\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (sipServer) {\r\n            hideNotificationById(Notifications.SipServerConnectionError)\r\n        } else if (prevSipServerRef.current) {\r\n            // we had SIP server, but not anymore\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.SipServerConnectionError,\r\n                message: i18n.window_messages_3pcc_server_connectionLost(),\r\n            })\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track sipServer change only\r\n    }, [sipServer, updateNotification])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst CHECK_INTERVAL = 5000\r\nconst SLOW_THRESHOLD = 800\r\n\r\n/**\r\n * This hook periodically checks the user's connection speed by fetching root of the current host.\r\n * and shows a notification if the connection is slow.\r\n * Connection is considered slow based on the predefined threshold (SLOW_THRESHOLD),\r\n * When the connection speed improves, it hides the notification.\r\n */\r\nexport function useSlowNetworkNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n\r\n    const startTime = useRef(0)\r\n\r\n    const checkConnectionSpeed = useEvent(() => {\r\n        const isRequestAlreadyInProgress = startTime.current !== 0\r\n\r\n        if (isRequestAlreadyInProgress || process.env.NODE_ENV === 'development') {\r\n            return\r\n        }\r\n\r\n        startTime.current = new Date().getTime()\r\n\r\n        fetch('/', {\r\n            method: 'HEAD',\r\n            cache: 'no-store',\r\n        })\r\n            .catch(e => console.error(e))\r\n            .finally(() => {\r\n                const endTime = new Date().getTime()\r\n                const duration = endTime - startTime.current\r\n\r\n                startTime.current = 0\r\n\r\n                if (duration > SLOW_THRESHOLD) {\r\n                    const message = i18n.slow_connection()\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.SlowNetworkConnectionError,\r\n                        message,\r\n                    })\r\n                    bpLogger.warn(`Slow connection detected`)\r\n                } else {\r\n                    hideNotificationById(Notifications.SlowNetworkConnectionError)\r\n                }\r\n            })\r\n    })\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(checkConnectionSpeed, CHECK_INTERVAL)\r\n        return () => clearInterval(interval)\r\n    }, [checkConnectionSpeed])\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBpClientState} from '@bpinc/ad-bpclient-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CURRENT_DOMAIN_AUTH_URL} from '../constants'\r\n\r\n\r\nexport function useUnauthorizedDomainNotification() {\r\n    const {showNotification, hideNotificationById} = useNotificationsState('methods')\r\n    const isDomainAuthorized = useBpClientState('isDomainAuthorized')\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const updateNotification = useEvent(() => {\r\n        if (!isDomainAuthorized) {\r\n            showNotification({\r\n                type: 'error',\r\n                id: Notifications.DomainNotAuthorizedForBPClientError,\r\n                closable: false,\r\n                message: (\r\n                    <>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part1()}\r\n                        </span>\r\n                        <a href={CURRENT_DOMAIN_AUTH_URL} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                            {i18n.domainAuthentificationErrorAnchor()}\r\n                        </a>\r\n                        <span>\r\n                            {i18n.domain_authentication_error_part2()}\r\n                        </span>\r\n                    </>\r\n                ),\r\n            })\r\n        } else {\r\n            hideNotificationById(Notifications.DomainNotAuthorizedForBPClientError)\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        updateNotification()\r\n        // track only isDomainAuthorized\r\n    }, [isDomainAuthorized, updateNotification])\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {useSystemNotifications} from '@bpinc/lib-system-notifications'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    authorizedConnectors: AuthorizedConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizedConnectorsConsumers: React.FC<Props> = ({baseConnectors, authorizedConnectors, children}) => {\r\n    useSystemNotifications()\r\n    return <>{children(baseConnectors, authorizedConnectors)}</>\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useSessionState, useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {incomingErrorMessageCodes} from '@bpinc/ad-transport-types'\r\nimport {SmButton, SmSegment} from '@bpinc/lib-external-ui-elements'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Modal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const ForceLogout: React.FC = () => {\r\n    const forceLogoutInfo = useSessionState('forceLogoutInfo')\r\n    const {closeForceLogout} = useSessionStateMethods()\r\n    const {formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n\r\n    assertDefined(forceLogoutInfo)\r\n    const loggedOutBy = formatFullName(forceLogoutInfo.firstName, forceLogoutInfo.lastName)\r\n    const loggedOutTime = formatDate(forceLogoutInfo.timestamp)\r\n\r\n    const getContent = () => {\r\n        switch (forceLogoutInfo.errorCode) {\r\n            case incomingErrorMessageCodes.forced_logout_by_another_session: {\r\n                return t.ERROR_MESSAGES.sessionWasOverwritten()\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_supervisor: {\r\n                return t.ERROR_MESSAGES.forcedLogout(loggedOutBy, loggedOutTime)\r\n            }\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_tenant:\r\n            case incomingErrorMessageCodes.forced_logout_by_disabling_user: {\r\n                return t.ERROR_MESSAGES.account_has_been_disabled()\r\n            }\r\n        }\r\n        return forceLogoutInfo.forceLogoutReason\r\n    }\r\n\r\n    return (\r\n        <SmSegment\r\n            padded\r\n            className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\r\n                overflow-hidden rounded-none border-none bg-transparent shadow-none\"\r\n            id=\"login\"\r\n        >\r\n            <Modal\r\n                isOpen\r\n                size=\"small\"\r\n                className=\"max-w-[570px]\"\r\n                aria-describedby=\"forceLogoutDialogDescription\"\r\n                data-testid=\"forced-logout-modal\"\r\n            >\r\n                <Modal.Header>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_information()}\r\n                </Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description id=\"forceLogoutDialogDescription\">\r\n                        <p>{getContent()}</p>\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <SmButton onClick={closeForceLogout} primary data-testid=\"ok-button\">\r\n                        {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                    </SmButton>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </SmSegment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useCurrentTabRole} from '@bpinc/ad-current-tab-data-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ForceLogin, LoginPage} from '@bpinc/lib-login-ui'\r\nimport {ForceLogout} from '@bpinc/lib-login-ui/src/components/ForceLogout'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const UnauthorizedUI: React.FC = () => {\r\n    const tabRole = useCurrentTabRole()\r\n    const {\r\n        authChecked,\r\n        isLoggedIn,\r\n        showLoginDialog,\r\n        offerForceLogin,\r\n        forceLogoutInfo,\r\n    } = useSessionState(['authChecked', 'isLoggedIn', 'showLoginDialog', 'offerForceLogin', 'forceLogoutInfo'])\r\n    const language = useLocalizationState('language')\r\n\r\n    const showAppLoader = !language || (tabRole === 'undecided' && !authChecked)\r\n    const showLoginPage = !showAppLoader && (showLoginDialog || !isLoggedIn)\r\n    const showForceLogout = !!forceLogoutInfo && showLoginPage\r\n    const showForceLogin = offerForceLogin && !forceLogoutInfo && showLoginPage\r\n\r\n    return (\r\n        <div className=\"mx-auto h-full w-[496px]\">\r\n            {showAppLoader && <Loader active size=\"huge\" color=\"primary\" />}\r\n            {showLoginPage && <LoginPage />}\r\n            {showForceLogout && <ForceLogout />}\r\n            {showForceLogin && <ForceLogin />}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {AuthorizedProviders} from '@bpinc/ad-local-providers'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {AuthorizedConnectorsConsumers} from './AuthorizedConnectorsConsumers'\r\nimport {UnauthorizedUI} from './UnauthorizedUI'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n}\r\n\r\nexport const AuthorizationUIRouter: React.FC<Props> = React.memo(({\r\n    baseConnectors,\r\n    children,\r\n}) => {\r\n    const isLoggedIn = useSessionState('isLoggedIn')\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <AuthorizedProviders baseConnectors={baseConnectors}>\r\n                {authorizedConnectors => (\r\n                    <AuthorizedConnectorsConsumers\r\n                        baseConnectors={baseConnectors}\r\n                        authorizedConnectors={authorizedConnectors}\r\n                    >\r\n                        {children}\r\n                    </AuthorizedConnectorsConsumers>\r\n                )}\r\n            </AuthorizedProviders>\r\n        )\r\n    }\r\n    return <UnauthorizedUI />\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\n\r\n\r\ntype Props = {\r\n    baseConnectors: BaseConnectors\r\n    children: ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const BaseConnectorsConsumers: React.FC<Props> = ({\r\n    baseConnectors,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n}) => {\r\n\r\n    if (BaseConnectorsConsumer) {\r\n        return (\r\n            <BaseConnectorsConsumer baseConnectors={baseConnectors}>\r\n                {children}\r\n            </BaseConnectorsConsumer>\r\n        )\r\n    }\r\n    return children\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {BaseProviders} from '@bpinc/ad-local-providers'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport {Tooltip} from '@bpinc/lib-jskit-ui'\r\nimport {NotificationsStateProvider} from '@bpinc/lib-notifications-context'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from './AuthorizationModule'\r\nimport {BaseConnectorsConsumers} from './BaseConnectorsConsumers'\r\n\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (baseConnectors: BaseConnectors) => ReactElement\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n}\r\n\r\nexport const TopLevelProviders: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    BaseConnectorsConsumer,\r\n    children,\r\n}) => {\r\n    return (\r\n        <BaseProviders platformSpecific={platformSpecific} app={app}>\r\n            {baseConnectors => (\r\n                <BaseConnectorsConsumers\r\n                    baseConnectors={baseConnectors}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    <Tooltip.Provider>\r\n                        <NotificationsStateProvider>\r\n                            {children(baseConnectors)}\r\n                        </NotificationsStateProvider>\r\n                    </Tooltip.Provider>\r\n                </BaseConnectorsConsumers>\r\n            )}\r\n        </BaseProviders>\r\n    )\r\n}\r\n","import type {PropsWithChildren, ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport type {PlatformSpecific} from '@bpinc/ad-platform-specific-types'\r\nimport type {RemoteName} from '@bpinc/lib-remotes-configs'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AppStyleSelector} from '@bpinc/lib-ui-elements'\r\nimport type {AppType} from '@bpinc/state-lookup'\r\n\r\nimport {AuthorizationUIRouter} from './AuthorizationUIRouter'\r\nimport {TopLevelProviders} from './TopLevelProviders'\r\n\r\n\r\nexport type BaseConnectorsConsumerComponent = React.FC<PropsWithChildren<{baseConnectors: BaseConnectors}>>\r\n\r\ntype Props = {\r\n    app: AppType\r\n    platformSpecific: PlatformSpecific\r\n    children: (\r\n        baseConnectors: BaseConnectors,\r\n        authorizedConnectors: AuthorizedConnectors,\r\n    ) => ReactElement | ReactFragment\r\n    BaseConnectorsConsumer?: BaseConnectorsConsumerComponent\r\n    className?: string\r\n    appRemoteName: RemoteName\r\n}\r\n\r\nexport const AuthorizationModule: React.FC<Props> = ({\r\n    app,\r\n    platformSpecific,\r\n    children,\r\n    BaseConnectorsConsumer,\r\n    className,\r\n    appRemoteName,\r\n}) => {\r\n    return (\r\n        <AppStyleSelector app={appRemoteName}>\r\n            <div className={tcn('h-full', className)}>\r\n                <TopLevelProviders\r\n                    app={app}\r\n                    platformSpecific={platformSpecific}\r\n                    BaseConnectorsConsumer={BaseConnectorsConsumer}\r\n                >\r\n                    {baseConnectors => (\r\n                        <AuthorizationUIRouter baseConnectors={baseConnectors}>\r\n                            {children}\r\n                        </AuthorizationUIRouter>\r\n                    )}\r\n                </TopLevelProviders>\r\n            </div>\r\n        </AppStyleSelector>\r\n    )\r\n}\r\n","import {noop} from 'lodash-es'\r\n\r\n\r\nexport const defaultState = {\r\n    isAttachmentsListReady: () => true,\r\n    getAttachmentsList: () => [],\r\n    addAttachment: noop,\r\n    removeAttachment: noop,\r\n    clearAttachmentsList: noop,\r\n    initializeAttachmentsList: noop,\r\n    fileRejections: [],\r\n    setFileRejections: noop,\r\n}\r\n","import {useCallback, useMemo, useRef, useState} from 'react'\r\nimport type {FileRejection} from 'react-dropzone'\r\nimport type {Canceler} from 'axios'\r\nimport produce, {castDraft} from 'immer'\r\n\r\nimport type {ChatAttachment, EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getFileFromUrl} from '@bpinc/lib-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    Attachment,\r\n    Attachments,\r\n    BasicAttachmentData,\r\n    PendingRequestsCancelers,\r\n    RequestQueue,\r\n    RequestQueueItem,\r\n    UploadAttachment,\r\n    UploadError,\r\n} from './types'\r\nimport {useAttachmentLink} from './useAttachmentLink'\r\n\r\n// browser allows this to be no greater than 6\r\n// however even few big files may freeze the browser\r\nconst MAX_CONCURRENT_REQUESTS = 1\r\n\r\n\r\ninterface useAttachmentsStateParams<\r\n    AttachmentData extends BasicAttachmentData\r\n> {\r\n    uploadFile: UploadAttachment<AttachmentData>\r\n    handleError?: (attachmentsGroupId: string, error: UploadError) => void\r\n    getFormData: (item: RequestQueueItem) => FormData\r\n}\r\n\r\nexport function useAttachmentsState<\r\n    AttachmentData extends ChatAttachment | EmailAttachment\r\n>({\r\n    uploadFile,\r\n    handleError,\r\n    getFormData,\r\n}: useAttachmentsStateParams<AttachmentData>) {\r\n    const [attachments, setAttachments] = useState<Attachments<AttachmentData>>({})\r\n    const [fileRejections, setFileRejections] = useState<FileRejection[]>([])\r\n\r\n  // requests that are already sent and waiting for response from server\r\n    const pendingRequestsCancelersRef = useRef<PendingRequestsCancelers>({})\r\n  // requests that are not yet sent to the server\r\n    const requestQueueRef = useRef<RequestQueue>({pendingAmount: 0, items: []})\r\n\r\n    const getCanceler = useCallback(function getCancelerCallback(\r\n        attachmentsGroupId: string,\r\n        id: string,\r\n    ): Canceler | undefined {\r\n        return pendingRequestsCancelersRef.current[attachmentsGroupId]?.[id]\r\n    },\r\n    [])\r\n\r\n    const removeCancelers = useCallback(function removeCancelersCallback(\r\n        attachmentsGroupId: string,\r\n    ) {\r\n        delete pendingRequestsCancelersRef.current[attachmentsGroupId]\r\n    },\r\n    [])\r\n\r\n    const removeCanceler = useCallback(function removeCancelerCallback(\r\n        attachmentsGroupId: string,\r\n        id: string,\r\n    ) {\r\n        delete pendingRequestsCancelersRef.current[attachmentsGroupId]?.[id]\r\n    },\r\n    [])\r\n\r\n    const cancelCurrentRequest = useCallback(\r\n        function cancelCurrentRequestCallback(\r\n            attachmentsGroupId: string,\r\n            id: string,\r\n        ) {\r\n            const cancel = getCanceler(attachmentsGroupId, id)\r\n\r\n            if (cancel) {\r\n                cancel()\r\n                removeCanceler(attachmentsGroupId, id)\r\n            }\r\n        },\r\n        [getCanceler, removeCanceler],\r\n    )\r\n\r\n    const attachmentsRef = useRef(attachments)\r\n\r\n    const {sessionId = '', domain = '', loginId = ''} = useSessionState(['sessionId', 'domain', 'loginId'])\r\n\r\n    const updateAttachments = useCallback(function updateAttachmentsCallback(\r\n        setter: (a: Attachments<AttachmentData>) => Attachments<AttachmentData>,\r\n    ) {\r\n        setAttachments(currentAttachments => {\r\n            const updatedAttachments = setter(currentAttachments)\r\n            attachmentsRef.current = updatedAttachments\r\n\r\n            return updatedAttachments\r\n        })\r\n    },\r\n    [])\r\n\r\n    const getAttachmentsList = useCallback(\r\n        function getAttachmentsListCallback(attachmentsGroupId?: string) {\r\n            return (attachmentsGroupId && Object.values(attachments[attachmentsGroupId] ?? {})) || []\r\n        },\r\n        [attachments],\r\n    )\r\n\r\n    const removeRequestFromQueue = useCallback((attachmentsGroupId: string, id: string) => {\r\n        requestQueueRef.current.items = requestQueueRef.current.items.filter(item => {\r\n            return id !== item.id || attachmentsGroupId !== item.attachmentsGroupId\r\n        })\r\n    }, [])\r\n\r\n    const addNewAttachment = useCallback(\r\n        function addNewAttachmentCallback(\r\n            attachmentsGroupId: string,\r\n            newAttachment: Omit<Attachment<AttachmentData>, 'id'>,\r\n        ) {\r\n            const id = uuid()\r\n\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (!draft[attachmentsGroupId]) {\r\n                        draft[attachmentsGroupId] = {}\r\n                    }\r\n                    draft[attachmentsGroupId][id] = castDraft({id, ...newAttachment})\r\n                }),\r\n            )\r\n            return id\r\n        },\r\n        [updateAttachments],\r\n    )\r\n\r\n    const updateAttachment = useCallback(\r\n        function updateAttachmentCallback(\r\n            attachmentsGroupId: string,\r\n            id: string,\r\n            attachment: Attachment<AttachmentData>,\r\n        ) {\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (!draft[attachmentsGroupId]) {\r\n                        draft[attachmentsGroupId] = {}\r\n                    }\r\n\r\n                    draft[attachmentsGroupId][id] = {\r\n                        ...draft[attachmentsGroupId][id],\r\n                        ...castDraft(attachment),\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [updateAttachments],\r\n    )\r\n\r\n    const removeAttachment = useCallback(\r\n        function removeAttachmentCallback(attachmentsGroupId: string, id: string) {\r\n            cancelCurrentRequest(attachmentsGroupId, id)\r\n            removeRequestFromQueue(attachmentsGroupId, id)\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    if (draft[attachmentsGroupId]) {\r\n                        delete draft[attachmentsGroupId][id]\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [cancelCurrentRequest, removeRequestFromQueue, updateAttachments],\r\n    )\r\n\r\n    const processNextRequestQueueItem = useCallback(async () => {\r\n        const queue = requestQueueRef.current\r\n\r\n        if (queue.pendingAmount >= MAX_CONCURRENT_REQUESTS) return\r\n\r\n        const item = queue.items.shift()\r\n\r\n        if (!item) return\r\n\r\n        queue.pendingAmount++\r\n\r\n        const {id, attachmentsGroupId, file} = item\r\n\r\n        const bodyFormData = new FormData()\r\n\r\n        bodyFormData.append('file', file)\r\n\r\n        const params = {\r\n            data: getFormData(item),\r\n            tenant: domain,\r\n            token: sessionId,\r\n            user: loginId,\r\n            fileName: file.name,\r\n            fileType: 'attachment',\r\n        } as const\r\n\r\n        const canceler = await uploadFile(params, {\r\n            onSuccess: fileData => {\r\n                const pendingRequest = getCanceler(attachmentsGroupId, id)\r\n                if (pendingRequest) {\r\n                    updateAttachment(attachmentsGroupId, id, {\r\n                        id,\r\n                        file,\r\n                        isLoading: false,\r\n                        fileData,\r\n                    })\r\n                    removeCanceler(attachmentsGroupId, id)\r\n                }\r\n                queue.pendingAmount--\r\n                processNextRequestQueueItem()\r\n            },\r\n            onError: error => {\r\n                const pendingRequest = getCanceler(attachmentsGroupId, id)\r\n                if (pendingRequest) {\r\n                    removeAttachment(attachmentsGroupId, id)\r\n                    setFileRejections(\r\n                        produce(draft => {\r\n                            draft.push({\r\n                                file,\r\n                                errors: [\r\n                                    error,\r\n                                ],\r\n                            })\r\n                        }),\r\n                    )\r\n                    handleError?.(attachmentsGroupId, error)\r\n                    removeCanceler(attachmentsGroupId, id)\r\n                }\r\n                queue.pendingAmount--\r\n                processNextRequestQueueItem()\r\n            },\r\n        })\r\n\r\n        if (!pendingRequestsCancelersRef.current[attachmentsGroupId]) {\r\n            pendingRequestsCancelersRef.current[attachmentsGroupId] = {}\r\n        }\r\n        pendingRequestsCancelersRef.current[attachmentsGroupId][id] = canceler\r\n    }, [domain, getCanceler, getFormData, handleError, loginId, removeAttachment, removeCanceler, sessionId, updateAttachment, uploadFile])\r\n\r\n\r\n    const addAttachment = useCallback(\r\n        function addAttachmentCallback(attachmentsGroupId: string, file: File) {\r\n            const id = addNewAttachment(attachmentsGroupId, {\r\n                isLoading: true,\r\n                file,\r\n            })\r\n            requestQueueRef.current.items.push({\r\n                id,\r\n                attachmentsGroupId,\r\n                file,\r\n            })\r\n            processNextRequestQueueItem()\r\n        },\r\n        [addNewAttachment, processNextRequestQueueItem],\r\n    )\r\n\r\n    const clearAttachmentsList = useCallback(\r\n        function clearAttachmentsListCallback(attachmentsGroupId: string) {\r\n            removeCancelers(attachmentsGroupId)\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    draft[attachmentsGroupId] = {}\r\n                }),\r\n            )\r\n        },\r\n        [removeCancelers, updateAttachments],\r\n    )\r\n\r\n    const removeAttachmentsList = useCallback(\r\n        (attachmentsGroupId: string) => {\r\n            removeCancelers(attachmentsGroupId)\r\n\r\n            updateAttachments(\r\n                produce(draft => {\r\n                    delete draft[attachmentsGroupId]\r\n                }),\r\n            )\r\n        },\r\n        [removeCancelers, updateAttachments],\r\n    )\r\n\r\n    const isAttachmentsListReady = useCallback(\r\n        function attachmentsListReadyCallback(attachmentsGroupId?: string) {\r\n            const attachmentsList = getAttachmentsList(attachmentsGroupId)\r\n\r\n            if (!attachmentsList?.length) {\r\n                return true\r\n            }\r\n\r\n            return attachmentsList.every(attachmentIsLoaded)\r\n\r\n            function attachmentIsLoaded(attachment: Attachment<AttachmentData>) {\r\n                return !attachment.isLoading\r\n            }\r\n        },\r\n        [getAttachmentsList],\r\n    )\r\n\r\n\r\n    const {generateUrl} = useAttachmentLink()\r\n\r\n    const initializeAttachmentsList = useCallback(async (attachmentGroupId: string, attachmentsData: BasicAttachmentData[]) => {\r\n        const getFilesPromises = attachmentsData.map(async a => {\r\n            return await getFileFromUrl(generateUrl(a.id), a.name)\r\n        })\r\n\r\n        Promise.all(getFilesPromises).then(files => {\r\n            files.forEach(file => {\r\n                addAttachment(attachmentGroupId, file)\r\n            })\r\n        })\r\n    }, [addAttachment, generateUrl])\r\n\r\n    return useMemo(\r\n        () => ({\r\n            fileRejections,\r\n            setFileRejections,\r\n            removeAttachmentsList,\r\n            getAttachmentsList,\r\n            removeAttachment,\r\n            clearAttachmentsList,\r\n            addAttachment,\r\n            initializeAttachmentsList,\r\n            isAttachmentsListReady,\r\n        }),\r\n        [\r\n            fileRejections,\r\n            removeAttachmentsList,\r\n            getAttachmentsList,\r\n            removeAttachment,\r\n            clearAttachmentsList,\r\n            addAttachment,\r\n            initializeAttachmentsList,\r\n            isAttachmentsListReady,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport const useAttachmentLink = () => {\r\n\r\n    const {serverOrigin, sessionId, loginId, domain} = useSessionState()\r\n\r\n    const generateUrl = useCallback((attachmentId: string) => {\r\n        const params = {\r\n            token: sessionId,\r\n            user: loginId,\r\n            tenant: domain,\r\n            id: attachmentId,\r\n            no_disposition: 0,\r\n        }\r\n        const query = Object.keys(params).map(key => `${key}=${params[key as keyof typeof params]}`).join('&')\r\n        const fileLink = `${serverOrigin}/agentdesktop/agentdesktop/attachmentDownload?${query}`\r\n        return fileLink\r\n    }, [serverOrigin, sessionId, loginId, domain])\r\n\r\n    return {generateUrl}\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {ChatAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadChatFile} from '@bpinc/ad-upload-methods'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst ChatAttachmentsUIContext = createContext <AttachmentsState<ChatAttachment>>(\r\n    defaultState,\r\n)\r\nChatAttachmentsUIContext.displayName = 'ChatAttachmentsUIContext'\r\n\r\nfunction getFormData({file}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    return bodyFormData\r\n}\r\n\r\nexport const ChatAttachmentsUIStateProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const uploadChatFile = useUploadChatFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadChatFile, getFormData})\r\n\r\n    useOnItemRemoved(item => {\r\n        value.removeAttachmentsList(getInteractionStepId(item))\r\n    })\r\n\r\n    return (\r\n        <ChatAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </ChatAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useChatAttachmentsUIState} = createUIStateSelectorHook(ChatAttachmentsUIContext, 'chatAttachmentsUIState')\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React from 'react'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {EmailAttachment} from '@bpinc/ad-request-urls'\r\nimport {createUIStateSelectorHook} from '@bpinc/ad-state-context-factory'\r\nimport {useUploadEmailFile} from '@bpinc/ad-upload-methods'\r\n\r\nimport {defaultState} from './constants'\r\nimport type {AttachmentsState, RequestQueueItem} from './types'\r\nimport {useAttachmentsState} from './useAttachmentsState'\r\n\r\n\r\nconst EmailAttachmentsUIContext = createContext <AttachmentsState<EmailAttachment>>(\r\n    defaultState,\r\n)\r\nEmailAttachmentsUIContext.displayName = 'EmailAttachmentsUIContext'\r\n\r\ninterface EmailAttachmentsUIStateProviderProps {\r\n    children: ReactElement | ReactFragment\r\n}\r\n\r\nfunction getFormData({file, attachmentsGroupId}: RequestQueueItem) {\r\n    const bodyFormData = new FormData()\r\n\r\n    bodyFormData.append('file', file)\r\n    bodyFormData.append('email', attachmentsGroupId)\r\n\r\n    return bodyFormData\r\n}\r\n\r\nexport const EmailAttachmentsUIStateProvider: React.FC<EmailAttachmentsUIStateProviderProps> = ({children}) => {\r\n    const uploadEmailFile = useUploadEmailFile()\r\n\r\n    const value = useAttachmentsState({uploadFile: uploadEmailFile, getFormData})\r\n\r\n    //TODO: Clean state on email draft removed\r\n\r\n    return (\r\n        <EmailAttachmentsUIContext.Provider value={value}>\r\n            {children}\r\n        </EmailAttachmentsUIContext.Provider>\r\n    )\r\n}\r\n\r\nexport const {useEmailAttachmentsUIState} = createUIStateSelectorHook(EmailAttachmentsUIContext, 'emailAttachmentsUIState')\r\n","import {useEffect, useMemo} from 'react'\r\nimport {flow, partial, property} from 'lodash-es'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useAssociatedChatInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getChannel,\r\n    getGlobalInteractionId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    isCall,\r\n    isChatService,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRemoteAssistState} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport type {OutboundChatChannel} from '@bpinc/ad-services-dispositions-types'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {LocalizationStateData} from '@bpinc/state-localization'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ChannelOption} from './types'\r\n\r\n\r\nfunction mapChannel(\r\n    t: LocalizationStateData['t'],\r\n    channel: ExternalChatChannelType | undefined,\r\n): ChannelOption | undefined {\r\n    switch (channel) {\r\n        case 'sms':\r\n            return {value: channel, text: t.GLOBAL.chat_type_sms()}\r\n        case 'web':\r\n            return {value: channel, text: t.GLOBAL.chat_type_web()}\r\n        case 'telegram':\r\n            return {value: channel, text: t.GLOBAL.chat_type_telegram()}\r\n        case 'line':\r\n            return {value: channel, text: t.GLOBAL.chat_type_line()}\r\n        case 'twitter':\r\n            return {value: channel, text: t.GLOBAL.chat_type_twitter()}\r\n        case 'facebook':\r\n            return {value: channel, text: t.GLOBAL.chat_type_facebook()}\r\n        case 'wechat':\r\n            return {value: channel, text: t.GLOBAL.chat_type_wechat()}\r\n        case 'nexmo':\r\n            return {value: channel, text: t.GLOBAL.chat_type_nexmo()}\r\n        case 'viber':\r\n            return {value: channel, text: t.GLOBAL.chat_type_viber()}\r\n        case 'whatsapp':\r\n            return {value: channel, text: t.GLOBAL.chat_type_whatsapp()}\r\n        case 'remoteassist':\r\n            return {value: channel, text: t.GLOBAL.chat_type_remote_assist()}\r\n    }\r\n}\r\n\r\nexport function useOptions(): ChannelOption[] {\r\n    const {getContact} = useContactsStateMethods()\r\n    const contacts = useContactsState('contacts')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const chatActiveItem = useAssociatedChatInteraction(interactionId)\r\n    const {services, allOutboundChatChannels, outboundChatChannels} = useServicesDispositionsState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const {selectedService} = useServiceState()\r\n    const {items: raItems} = useRemoteAssistState()\r\n    const {t} = useLocalizationState()\r\n\r\n    const itemChannel = getChannel(chatActiveItem)\r\n    const itemService = getServiceId(chatActiveItem)\r\n    const messengers = getMessengers(contacts, chatActiveItem)\r\n    const contactId = chatActiveItem?.contactId\r\n    const originalChannel = chatActiveItem?.externalChatData?.channel\r\n    const globalInteractionId = getGlobalInteractionId(chatActiveItem)\r\n    const raSessionActive = globalInteractionId && raItems[globalInteractionId]?.clientState === 'joined'\r\n\r\n    const isLoading = contactId && contacts[contactId]?.isLoading\r\n    const contactExists = !!contactId && !!contacts[contactId]?.data\r\n\r\n    useEffect(() => {\r\n        if (contactId && !isLoading && !contactExists) {\r\n            getContact({id: contactId})\r\n        }\r\n    }, [contactExists, contactId, getContact, isLoading])\r\n\r\n    const localizedChannelOptions = useMemo(() => {\r\n        const options: {[value: string]: ChannelOption} = {}\r\n\r\n        addMessengersOptions()\r\n        addRemoteAssistOption()\r\n        addPhoneOptions()\r\n        addOriginalChannelOption()\r\n        filterOutboundOptions()\r\n        addCurrentItemOption()\r\n\r\n        return Object.values(options)\r\n\r\n        function addOption(option: ChannelOption | undefined) {\r\n            if (option) {\r\n                options[option.value] = option\r\n            }\r\n        }\r\n\r\n        function addMessengersOptions() {\r\n            messengers?.forEach(flow(property('type'), partial(mapChannel, t), addOption))\r\n        }\r\n\r\n        function addPhoneOptions() {\r\n            if (getPhoneFromItem(chatActiveItem)) {\r\n                addOption({value: 'sms', text: t.GLOBAL.chat_type_sms(), phones: chatActiveItem?.displayData.phones})\r\n            }\r\n        }\r\n\r\n        function filterOutboundOptions() {\r\n            for (const key in options) {\r\n                if (!outboundChannelAvailable(options[key])) {\r\n                    delete options[key]\r\n                }\r\n            }\r\n\r\n            function outboundChannelAvailable(option: ChannelOption) {\r\n                const service = itemService || selectedService\r\n\r\n                if (option.value === 'remoteassist') {\r\n                    return raSessionActive\r\n                }\r\n                if (option.value === 'web') {\r\n                    return true\r\n                }\r\n                if (option.value === originalChannel) {\r\n                    return true\r\n                }\r\n\r\n                if (isCall(chatActiveItem)) {\r\n                    return true\r\n                }\r\n\r\n                if (service) {\r\n                    const outboundChannels = isChatService(service, services)\r\n                        ? allOutboundChatChannels\r\n                        : outboundChatChannels[service]\r\n\r\n                    return outboundChannels?.includes(\r\n                        option.value.toUpperCase() as OutboundChatChannel,\r\n                    )\r\n                }\r\n\r\n                if (selectedDIDNumber) {\r\n                    return option.value === 'sms'\r\n                }\r\n            }\r\n        }\r\n\r\n        function addCurrentItemOption() {\r\n            const itemChannelOption = mapChannel(t, itemChannel)\r\n\r\n            if (itemChannelOption) {\r\n                addOption(itemChannelOption)\r\n            }\r\n        }\r\n\r\n        function addOriginalChannelOption() {\r\n            if (originalChannel) {\r\n                const itemChannelOption = mapChannel(t, originalChannel)\r\n                if (itemChannelOption) {\r\n                    addOption(itemChannelOption)\r\n                }\r\n            }\r\n        }\r\n\r\n        function addRemoteAssistOption() {\r\n            addOption({value: 'remoteassist', text: t.GLOBAL.chat_type_remote_assist()})\r\n        }\r\n    }, [\r\n        messengers,\r\n        t,\r\n        chatActiveItem,\r\n        itemService,\r\n        selectedService,\r\n        selectedDIDNumber,\r\n        services,\r\n        allOutboundChatChannels,\r\n        outboundChatChannels,\r\n        itemChannel,\r\n        raSessionActive,\r\n        originalChannel,\r\n    ])\r\n\r\n\r\n    return useMemo(\r\n        function memoizedChannelOptions() {\r\n            return localizedChannelOptions\r\n        },\r\n        [localizedChannelOptions],\r\n    )\r\n}\r\n","import {useCallback, useMemo, useRef, useState} from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useOnItemRemoved} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useOnLogout} from '@bpinc/ad-session-context'\r\nimport {useOpenChannel} from '@bpinc/lib-helpers-ui'\r\n\r\nimport type {\r\n    ChannelOption,\r\n    ChannelState,\r\n    SelectedChannel,\r\n    SelectedPhone,\r\n    Touched,\r\n} from './types'\r\nimport {useOptions} from './useOptions'\r\n\r\n\r\n//TODO: Check if we need this initialOption or we can throw an error if it's not provided\r\nexport const initialOption: ChannelOption = {value: 'sms', text: 'SMS'}\r\n\r\nexport function useChannel(): ChannelState {\r\n    const channelOptions = useOptions()\r\n    const openChannel = useOpenChannel()\r\n\r\n    const channelOptionsRef = useRef(channelOptions)\r\n    channelOptionsRef.current = channelOptions\r\n\r\n    //------------Select logic------------//\r\n    const [selectedChannel, setSelectedChannel] = useState<SelectedChannel>({})\r\n    const [selectedPhone, setSelectedPhone] = useState<SelectedPhone>({})\r\n\r\n    const getSelectedChannel = useCallback((itemId: string) => {\r\n        if (selectedChannel[itemId]) {\r\n            return selectedChannel[itemId]\r\n        }\r\n\r\n        if (channelOptions) {\r\n            return channelOptions[0]\r\n        }\r\n\r\n        return undefined\r\n    }, [channelOptions, selectedChannel])\r\n\r\n    const getSelectedPhone = useCallback((itemId: string) => {\r\n        const channel = getSelectedChannel(itemId)\r\n        if (channel?.value !== 'sms') {\r\n            return undefined\r\n        }\r\n\r\n        if (selectedPhone[itemId]) {\r\n            return selectedPhone[itemId]\r\n        }\r\n\r\n        if (channel) {\r\n            return channel?.phones?.[0]\r\n        }\r\n    }, [getSelectedChannel, selectedPhone])\r\n\r\n    const selectCurrentItemChannel = useCallback(\r\n        function selectCurrentItemChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            setSelectedChannel(\r\n                produce(channels => {\r\n                    channels[itemId] = channel\r\n                }),\r\n            )\r\n            setSelectedPhone(produce(phones => {\r\n                phones[itemId] = phoneId ? channel.phones?.find(p => p.id === phoneId) : undefined\r\n            }))\r\n\r\n            return channel\r\n        },\r\n\r\n        [],\r\n    )\r\n    //------------Select logic end------------//\r\n\r\n    //------------Reset logic------------//\r\n    const resetChannel = useCallback(function resetChannelCallback() {\r\n        setSelectedChannel({'': initialOption})\r\n    }, [])\r\n\r\n    const resetSelectedChannel = useCallback(function deleteChannelCallback(item: Item) {\r\n        setSelectedChannel(\r\n            produce(channels => {\r\n                delete channels[item.id]\r\n            }),\r\n        )\r\n    }, [])\r\n\r\n\r\n    const [touchedState, setTouchedState] = useState<Touched>({})\r\n\r\n    const isTouched = useCallback((itemId: string) => {\r\n        return touchedState[itemId || '']\r\n    }, [touchedState])\r\n\r\n    const setIsTouched = useCallback(\r\n        (itemId: string, touched: boolean) => {\r\n            setTouchedState(\r\n                produce(draft => {\r\n                    draft[itemId] = touched\r\n                }),\r\n            )\r\n        },\r\n        [],\r\n    )\r\n\r\n    function resetAllTouched() {\r\n        setTouchedState({})\r\n    }\r\n\r\n    function resetTouched(item: Item) {\r\n        setTouchedState(\r\n            produce(draft => {\r\n                delete draft[item.id]\r\n            }),\r\n        )\r\n    }\r\n\r\n\r\n    useOnLogout(() => {\r\n        resetChannel()\r\n        resetAllTouched()\r\n    })\r\n    useOnItemRemoved(item => {\r\n        resetSelectedChannel(item)\r\n        resetTouched(item)\r\n    })\r\n\r\n\r\n    const setSelectedChannelImpl = useCallback(\r\n        function setSelectedChannelCallback(itemId: string, channel: ChannelOption, phoneId?: string) {\r\n            openChannel(channel.value)\r\n            selectCurrentItemChannel(itemId, channel, phoneId)\r\n            setIsTouched(itemId, true)\r\n        },\r\n        [openChannel, selectCurrentItemChannel, setIsTouched],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizedChannelState() {\r\n            return {\r\n                getSelectedChannel,\r\n                getSelectedPhone,\r\n                setSelectedChannel: setSelectedChannelImpl,\r\n                channelOptions,\r\n                isTouched,\r\n                setIsTouched,\r\n            }\r\n        },\r\n        [getSelectedChannel, getSelectedPhone, setSelectedChannelImpl, channelOptions, isTouched, setIsTouched],\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useContext} from 'react'\r\n\r\nimport {throwNoProviderError} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {initialOption, useChannel} from './state'\r\nimport type {ChannelState} from './types'\r\n\r\n\r\nconst contextName = 'ChannelStateContext'\r\nconst initialState: ChannelState = {\r\n    getSelectedChannel: () => initialOption,\r\n    getSelectedPhone: () => undefined,\r\n    isTouched: () => false,\r\n    channelOptions: [initialOption],\r\n    setIsTouched: throwNoProviderError(contextName),\r\n    setSelectedChannel: throwNoProviderError(contextName),\r\n}\r\n\r\nconst ChannelStateContext = React.createContext<ChannelState>(initialState)\r\nChannelStateContext.displayName = contextName\r\n\r\nexport const ChannelStateProvider: FCWithChildren<ReactElement | ReactFragment> = props => {\r\n    const channelState: ChannelState = useChannel()\r\n\r\n    return (\r\n        <ChannelStateContext.Provider value={channelState}>\r\n            {props.children}\r\n        </ChannelStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChannelState = () => useContext(ChannelStateContext)\r\n","import {useCallback} from 'react'\r\n\r\nimport {useBrowserTabMetaInfo} from '@bpinc/ad-current-tab-data-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {useScreenPopStateMethods} from '@bpinc/ad-screen-pop-state-context'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\nimport {formatHTMLAsOneLineString} from '@bpinc/lib-html-utils'\r\n\r\n\r\nexport function useLinkOpener(itemId: string) {\r\n    const {addTabs} = useScreenPopStateMethods()\r\n    const browserTabInfo = useBrowserTabMetaInfo()\r\n    const appType = browserTabInfo?.app\r\n    const {saveOpenedSuggestionUrl} = useInteractionStateMethods()\r\n\r\n    return useCallback(function openLink(suggestion: VoiceTranscriptCommonMessage) {\r\n        if (!suggestion.suggestionURL) {\r\n            return\r\n        }\r\n\r\n\r\n        saveOpenedSuggestionUrl(itemId, suggestion.suggestionURL)\r\n\r\n        if (appType === 'ad' && suggestion.openURLIn === 'AGENT_DESKTOP') {\r\n            const tabId = suggestion.msgId ?? suggestion.suggestionURL\r\n\r\n            addTabs(itemId, [\r\n                {\r\n                    id: tabId,\r\n                    type: 'iframe',\r\n                    url: suggestion.suggestionURL,\r\n                    title: formatHTMLAsOneLineString(suggestion.text),\r\n                },\r\n            ])\r\n\r\n        } else {\r\n            try {\r\n                window.open(normalizeExternalURL(suggestion.suggestionURL), suggestion.openURLIn == 'NEW_TAB' ? '_blank' : undefined, 'noopener,noreferrer')\r\n            } catch (e) {\r\n                const errorText = e instanceof Error ? e.message : 'unknown error'\r\n                console.error(`error opening window for url ${suggestion.suggestionURL}: ${errorText}`)\r\n            }\r\n        }\r\n    }, [appType, itemId, addTabs, saveOpenedSuggestionUrl])\r\n}\r\n","import type {ChatMessage, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {voiceTranscriptMessageTypes} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatMessageDate,\r\n    ExternalChatMessage,\r\n    ExternalChatMessageWithDate,\r\n    HistoryCallMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n    HistoryOutboundMessagingCampaignMessage,\r\n    HistoryRemoteAssistMessage,\r\n    HistoryVoiceTranscriptMessage,\r\n} from './types'\r\n\r\n\r\nexport function isChatMessageDate(message: ExternalChatMessageWithDate): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isHistoryMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryMessage {\r\n    return !!message && !isChatMessageDate(message) && 'globalInteractionId' in message\r\n}\r\n\r\nexport function isActivityMessageGroup(message: ExternalChatMessageWithDate | undefined): message is ActivityMessageGroup {\r\n    return !!message && !isChatMessageDate(message) && 'serviceId' in message && message.displayType === 'activityGroup'\r\n}\r\n\r\nexport function isChatMessage(message: ExternalChatMessageWithDate | undefined): message is ChatMessage {\r\n    return !!message && !isActivityMessageGroup(message) && !isHistoryMessage(message)\r\n}\r\n\r\nexport function isVoiceTranscriptMessage(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptCommonMessage {\r\n    return typeof message === 'object' && 'type' in message && voiceTranscriptMessageTypes.includes(message.type as VoiceTranscriptMessageType)\r\n}\r\n\r\nexport function isExternalChatMessage(\r\n    message: ChatCommonMessagesType,\r\n): message is ExternalChatMessage {\r\n    return typeof message === 'object' && !isVoiceTranscriptMessage(message)\r\n}\r\n\r\nexport function isExternalChatMessageDate(message: ChatCommonMessagesType | undefined): message is ChatMessageDate {\r\n    return typeof message === 'string'\r\n}\r\n\r\nexport function isVoiceTranscriptSuggestion(\r\n    message: ChatCommonMessagesType | undefined,\r\n): message is VoiceTranscriptSuggestion {\r\n    return isVoiceTranscriptMessage(message) && message.type === 'suggestion'\r\n}\r\n\r\nexport function isCallOrVoiceTranscript(message: ExternalChatMessageWithDate | ChatMessageDate | VoiceTranscriptSuggestion): boolean {\r\n    return !isVoiceTranscriptSuggestion(message) && (\r\n        typeof message === 'string' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE' ||\r\n    (message as HistoryMessage).mediaType === 'VOICE_TRANSCRIPT'\r\n    )\r\n}\r\n\r\nexport function isHistoryCallMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'VOICE'\r\n}\r\n\r\nexport function isHistoryEmailMessage(message: ExternalChatMessageWithDate | undefined): message is HistoryCallMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'EMAIL'\r\n}\r\n\r\nexport function isHistoryVoiceTranscriptMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryVoiceTranscriptMessage {\r\n    return isHistoryMessage(message) && message.mediaType === 'VOICE_TRANSCRIPT'\r\n}\r\n\r\nexport function isHistoryRemoteAssistMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryRemoteAssistMessage {\r\n    return isHistoryMessage(message) && message.mediaType == 'REMOTE_ASSIST'\r\n}\r\n\r\nexport function isHistoryOutboundMessagingCampaignMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryOutboundMessagingCampaignMessage {\r\n    return isHistoryMessage(message) && (message as HistoryOutboundMessagingCampaignMessage).serviceType == 'OUTBOUND_MESSAGING'\r\n}\r\n\r\nexport function isHistoryFileMessageMessage(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): message is HistoryFileMessage {\r\n    return isHistoryMessage(message) && (message as HistoryFileMessage).displayType === 'file'\r\n}\r\n\r\n","import type {FileError, FileRejection} from 'react-dropzone'\r\nimport {ErrorCode} from 'react-dropzone'\r\n\r\nimport type {ActivitiesListItemType, PartyUserShortType} from '@bpinc/ad-activities-state-types'\r\nimport {CHAT_PROHIBITED_EXTENSIONS} from '@bpinc/ad-constants'\r\nimport type {ChatMessage, MessageDisplayType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {addTime, formatDate, getFileNameAndExtension} from '@bpinc/lib-helpers'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\n\r\nimport type {\r\n    ActivityMessageGroup,\r\n    ChatCommonMessagesType,\r\n    ChatScrollNodeType,\r\n    ExternalChatMessageFileData,\r\n    ExternalChatMessageWithDate,\r\n    HistoryChatMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n} from '../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessage,\r\n    isHistoryCallMessage,\r\n    isHistoryFileMessageMessage,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../types'\r\n\r\n\r\nexport function isScrollAtBottom(\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    return ((scrollNode?.scrollTop || 0) + (scrollNode?.clientHeight || 0)) >= (scrollNode?.scrollHeight || 0)\r\n}\r\n\r\n\r\nexport function getMessageId(message: ChatCommonMessagesType): string {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        if (message.chatMessageData?.displayType === 'error') {\r\n            return `${message.timestamp}-error`\r\n        }\r\n\r\n        if (message.chatMessageData) {\r\n            return getExternalChatMessageId(message.chatMessageData)\r\n        }\r\n\r\n        return getVoiceTranscriptMessageId(message)\r\n    }\r\n\r\n    if (isExternalChatMessage(message)) {\r\n\r\n        if (isActivityMessageGroup(message)) {\r\n            return getActivitiyMessageGroupMessageId(message)\r\n        }\r\n\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        if (displayType === 'scenario') {\r\n            return getScenarioMessageId(message)\r\n        }\r\n\r\n        if (isHistoryMessage(message)) {\r\n            return geHistoryMessageId(message)\r\n        }\r\n\r\n\r\n        return getExternalChatMessageId(message)\r\n\r\n    }\r\n\r\n    return message\r\n\r\n    function getActivitiyMessageGroupMessageId(msg: ActivityMessageGroup) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${msg.partyId}-${\r\n            msg.notes ? 'notes' : 'disposition'\r\n        }`\r\n    }\r\n    function getScenarioMessageId(msg: ChatMessage | HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msg}-scenario`\r\n    }\r\n    function getVoiceTranscriptMessageId(msg: VoiceTranscriptCommonMessage) {\r\n        return `${msg.partyId}-${msg.msgId}-${msg.timestamp}`\r\n    }\r\n\r\n    function getExternalChatMessageId(msg: ChatMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.source\r\n        }`\r\n    }\r\n\r\n    function geHistoryMessageId(msg: HistoryMessage) {\r\n        return `${msg.timestamp}-${msg.msgId ?? ''}-${\r\n            msg.direction\r\n        }`\r\n    }\r\n}\r\n\r\n\r\nexport function findFirstVisibleItemWithOffset(\r\n    scrollNode: ChatScrollNodeType,\r\n    startIndex: number,\r\n    messages: ChatCommonMessagesType[],\r\n): {id: string; offset: number} {\r\n    const item = scrollNode?.querySelector<HTMLDivElement>(`[data-index='${startIndex}']`)\r\n    if (!item) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    const offset = (scrollNode?.scrollTop || 0) - item.offsetTop\r\n    if (offset > 0) {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const message = messages[startIndex]\r\n    if (!message) {\r\n        return {id: '', offset: 0}\r\n    }\r\n    if (typeof message === 'string') {\r\n        return findFirstVisibleItemWithOffset(scrollNode, startIndex + 1, messages)\r\n    }\r\n    const id = getMessageId(messages[startIndex] || '')\r\n    return {id, offset}\r\n}\r\n\r\n//TODO: Discuss error messages with the management\r\nexport function getFileErrors(t: MessagesDeclaration, file: File) {\r\n    if (!file.name) {\r\n        return null\r\n    }\r\n\r\n    const {extension, name} = getFileNameAndExtension(file.name)\r\n    const isBadExtension = CHAT_PROHIBITED_EXTENSIONS.includes(`.${extension}`)\r\n\r\n    const errors: FileError[] = []\r\n\r\n    if (isBadExtension) {\r\n        errors.push({code: ErrorCode.FileInvalidType, message: t.EXTERNAL_CHAT.invalid_file_extension_error(name)})\r\n    }\r\n\r\n    if (!errors.length) {\r\n        return null\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\nexport function getFileRejection(t: MessagesDeclaration, file: File): FileRejection | null {\r\n    const errors = getFileErrors(t, file)\r\n\r\n    if (!errors) {\r\n        return null\r\n    }\r\n\r\n    return {\r\n        file,\r\n        errors,\r\n    }\r\n}\r\n\r\nexport function activityToChatMessage(selfUserId: string | undefined) {\r\n    return function activityToChatMessageInner(\r\n        activity: ActivitiesListItemType,\r\n    ): ActivityMessageGroup[] {\r\n        return activity.parties.reduce<ActivityMessageGroup[]>(\r\n            (activityMessages, party) => {\r\n                if (party.partyType === 'USER' && (party.disposition || party.notes)) {\r\n                    const userParty = party as PartyUserShortType\r\n                    activityMessages.push(\r\n                        partyUserShortTypeToActivityMessageGroup(\r\n                            userParty,\r\n                            activity,\r\n                            selfUserId,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                return activityMessages\r\n            },\r\n            [],\r\n        )\r\n    }\r\n}\r\n\r\nfunction partyUserShortTypeToActivityMessageGroup(\r\n    party: PartyUserShortType,\r\n    activity: ActivitiesListItemType,\r\n    selfUserId: string | undefined,\r\n): ActivityMessageGroup {\r\n    const id = activity.Id.oid\r\n    const createdTime = party.startTime?.date || activity.createdTime.date\r\n    const mediaType = activity.mediaType\r\n    const serviceId = party.serviceId\r\n    const service = serviceId ? activity.services?.find(s => s.serviceId === serviceId) : undefined\r\n    return {\r\n        mediaType,\r\n        msgId: id,\r\n        displayType: 'activityGroup' as const,\r\n        notes: party.notes,\r\n        disposition: party.disposition,\r\n        timestamp: createdTime ? addTime(createdTime, 'seconds', party.duration ?? 0).getTime() : 0,\r\n        serviceId: service?.serviceId ?? party.serviceId,\r\n        serviceName: service?.serviceName ?? '',\r\n        firstName: party.firstName,\r\n        lastName: party.lastName,\r\n        userId: party.userId,\r\n        isSelf: party.userId === selfUserId,\r\n        partyId: party.partyId,\r\n    }\r\n}\r\n\r\nexport function getDispositionTitle(\r\n    {firstName, lastName, timestamp, mediaType}: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    const fullName = formatFullName(firstName, lastName)\r\n    const date = formatDate(timestamp, 'll')\r\n    const time = formatDate(timestamp, 'h:mm A')\r\n\r\n    return mediaType === 'CHAT'\r\n        ? t.EXTERNAL_CHAT.disposition_message_title(fullName, date, time)\r\n        : t.VOICE_CALL.disposition_message_title(fullName, date, time)\r\n}\r\n\r\nexport function getDispositionText(\r\n    message: ActivityMessageGroup,\r\n    t: MessagesDeclaration,\r\n    formatFullName: (first: string, last: string) => string,\r\n) {\r\n    return `${getDispositionTitle(message, t, formatFullName)}\\n\\n` +\r\n    `${message.disposition}\\n\\n` +\r\n    `${t.EXTERNAL_CHAT.disposition_message_service_name()} ${message.serviceName}`\r\n}\r\n\r\nexport function getHistoryOrChatMessageText(\r\n    message: HistoryMessage | ChatMessage,\r\n    t: MessagesDeclaration,\r\n) {\r\n    const fileData = getExternalChatFileData(message)\r\n    if (fileData) {\r\n        return fileData.fileName\r\n    }\r\n\r\n    if (isChatMessage(message)) {\r\n        if (message.page) {\r\n            return message.title || t.EXTERNAL_CHAT.external_chat_customer_navigates_to()\r\n        }\r\n        return getHtmlMessageText(message.msg || '')\r\n    }\r\n\r\n    if (isHistoryCallMessage(message)) {\r\n        const title = message.isMissedCall\r\n            ? t.ACTIVITY_HISTORY.call_message_missed()\r\n            : message.direction === 'incoming'\r\n                ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n                : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n\r\n        return `${title}\\n\\n` +\r\n          `${formatDate(message.timestamp, 'LT')}, ${message.duration}\\n\\n`\r\n    }\r\n\r\n\r\n    if ('msg' in message && typeof message.msg === 'string') {\r\n        return getHtmlMessageText(message.msg)\r\n    }\r\n}\r\n\r\nexport function getHtmlMessageText(htmlContent: string) {\r\n    const messageTextElem = document.createElement('div')\r\n    messageTextElem.innerHTML = htmlContent\r\n    messageTextElem.style.opacity = '0'\r\n    messageTextElem.style.position = 'absolute'\r\n    messageTextElem.style.display = 'hidden'\r\n    messageTextElem.style.zIndex = '-1000'\r\n\r\n    document.body.append(messageTextElem)\r\n    const elementText = messageTextElem.innerText\r\n    messageTextElem.remove()\r\n\r\n    return elementText\r\n}\r\n\r\nexport function getExternalChatMessageDisplayType(message: ExternalChatMessageWithDate | undefined): MessageDisplayType | undefined {\r\n    if (isChatMessage(message)) {\r\n        return message.displayType\r\n    }\r\n    if (isHistoryMessage(message)) {\r\n        return (message as HistoryFileMessage | HistoryChatMessage).displayType\r\n    }\r\n    if (isActivityMessageGroup(message)) {\r\n        return message.displayType\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport function getExternalChatMessageDisplayName(\r\n    message: ExternalChatMessageWithDate,\r\n    formatFullName: (first: string | undefined, last: string | undefined) => string,\r\n) {\r\n    const users = isHistoryCallMessage(message) ? message.users : undefined\r\n    if (users?.length) {\r\n        return users.map(user => formatFullName(user.firstName, user.lastName)).join(', ')\r\n    }\r\n\r\n    const displayName = isChatMessage(message) ? message.displayName : undefined\r\n    if (displayName) {\r\n        return displayName\r\n    }\r\n\r\n    const {firstName, lastName} = isHistoryMessage(message) ? message : {firstName: undefined, lastName: undefined}\r\n    if (firstName || lastName) {\r\n        return formatFullName(firstName, lastName)\r\n    }\r\n}\r\n\r\nexport function isSystemExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'system'\r\n}\r\n\r\nexport function isInviteExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'invite'\r\n}\r\n\r\nexport function isErrorExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'error'\r\n}\r\n\r\nexport function isLocationExternalChatMessage(message: ExternalChatMessageWithDate | undefined): boolean {\r\n    return isChatMessage(message) && message.displayType === 'location'\r\n}\r\n\r\nexport function getExternalChatFileData(\r\n    message: ExternalChatMessageWithDate | undefined,\r\n): ExternalChatMessageFileData | undefined {\r\n    if (isChatMessage(message) && message.displayType === 'file') {\r\n        return {\r\n            fileId: message.fileId,\r\n            fileError: message.fileError,\r\n            fileIsMasked: message.fileIsMasked,\r\n            fileProgress: message.fileProgress,\r\n            fileName: message.fileName,\r\n            fileType: message.fileType,\r\n            refMsgId: undefined,\r\n        }\r\n    }\r\n    if (isHistoryFileMessageMessage(message)) {\r\n        return {\r\n            fileId: message.fileId,\r\n            refMsgId: message.refMsgId,\r\n            fileType: message.fileType,\r\n            fileName: message.fileName,\r\n            fileError: undefined,\r\n            fileIsMasked: undefined,\r\n            fileProgress: undefined,\r\n        }\r\n    }\r\n}\r\n","import {constructUserPictureUrl} from '@bpinc/ad-contacts-state-methods'\r\nimport type {SessionData} from '@bpinc/ad-session-types'\r\nimport {getUserStatusIcon} from '@bpinc/ad-user-details-state-context'\r\nimport type {UserDetails} from '@bpinc/ad-user-details-state-types'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport type {GroupChatItem} from '@bpinc/state-group-chat-types'\r\n\r\n\r\ninterface Params {\r\n    chatData?: GroupChatItem\r\n    p2pUser?: UserDetails\r\n    session: SessionData\r\n}\r\n\r\nexport function getGroupChatAvatar({chatData, p2pUser, session}: Params): PropsAvatar {\r\n    if (!chatData || chatData.members.length > 2) {\r\n        return getMultiuserChatAvatar()\r\n    }\r\n    if (chatData.type === 'TEAM') {\r\n        return getTeamChatAvatar(chatData)\r\n    }\r\n    const avatar = getP2PChatAvatar(chatData, session)\r\n\r\n    if (p2pUser) {\r\n        avatar.isOnline = p2pUser.presenceState === 'available'\r\n        avatar.onlineStatusIcon = getUserStatusIcon(p2pUser)\r\n    }\r\n    return avatar\r\n}\r\n\r\n/** Makes avatar props for a group chat if there is more then two users*/\r\nfunction getMultiuserChatAvatar(): PropsAvatar {\r\n    return {\r\n        avatarType: 'conference',\r\n        isAgent: true,\r\n    }\r\n}\r\n\r\n/** Makes avatar props for a pear-to-pear group chat */\r\nfunction getP2PChatAvatar(\r\n    chatData: GroupChatItem,\r\n    session: SessionData,\r\n): PropsAvatar {\r\n    const member = chatData.members.find(m => m.id !== session.userId)\r\n    return {\r\n        avatarType: 'user',\r\n        firstName: member?.firstName,\r\n        isAgent: true,\r\n        lastName: member?.lastName,\r\n        url: member?.id && constructUserPictureUrl(session, member.id),\r\n    }\r\n}\r\n\r\n/** Makes avatar props for a team group chat */\r\nfunction getTeamChatAvatar(chatData: GroupChatItem): PropsAvatar {\r\n    return {\r\n        avatarType: 'team-chat',\r\n        fullName: chatData.title,\r\n        isAgent: false,\r\n    }\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport {noop} from 'lodash-es'\r\nimport {createContext, useContextSelector} from 'use-context-selector'\r\n\r\nimport {useEvent, useEventListener, useValueUpdated} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\ntype ChatMessagesContextType = {\r\n    hasSelection: boolean\r\n    setHasSelection: StateSetter<boolean>\r\n    messages: ChatCommonMessagesType[]\r\n    selectedMessages: ChatCommonMessagesType[]\r\n    getClipboardBuffer: () => string\r\n    setClipboardBuffer: StateSetter<string>\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nconst ChatMessagesContext = createContext<ChatMessagesContextType>({\r\n    hasSelection: false,\r\n    setHasSelection: noop,\r\n    messages: [],\r\n    selectedMessages: [],\r\n    getClipboardBuffer: () => '',\r\n    setClipboardBuffer: noop,\r\n    scrollContainer: null,\r\n})\r\nChatMessagesContext.displayName = 'ChatMessagesContextProvider'\r\n\r\ninterface ChatMessagesContextProviderProps {\r\n    messages: ChatCommonMessagesType[]\r\n    children: ReactElement\r\n    interactionId: string\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\n\r\nexport const ChatMessagesContextProvider: React.FC<ChatMessagesContextProviderProps> = ({children, messages, interactionId, scrollContainer}) => {\r\n    const [hasSelection, setHasSelection] = useState(false)\r\n    const [clipboardBuffer, setClipboardBuffer] = useState('')\r\n    const [selectedMessages, setSelectedMessages] = useState<ChatCommonMessagesType[]>([])\r\n    const firstSelectedMessageRef = useRef<string>()\r\n    const getClipboardBuffer = useEvent(() => clipboardBuffer)\r\n    const interactionChanged = useValueUpdated(interactionId)\r\n\r\n    useEffect(() => {\r\n        if (!interactionChanged) {\r\n            return\r\n        }\r\n\r\n        setHasSelection(false)\r\n        setClipboardBuffer('')\r\n        setSelectedMessages([])\r\n    }, [interactionChanged])\r\n\r\n    useEventListener('mouseup', e => {\r\n        if (!firstSelectedMessageRef.current || !(e instanceof MouseEvent)) {\r\n            return\r\n        }\r\n\r\n        const lastSelectedMessageId = getNearestMessageId(e.target)\r\n        if (!lastSelectedMessageId) {\r\n            return\r\n        }\r\n\r\n        const firstSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === firstSelectedMessageRef.current)\r\n        const lastSelectedMessageIndex = messages.findIndex(m => getMessageId(m) === lastSelectedMessageId)\r\n        const indexes = [firstSelectedMessageIndex, lastSelectedMessageIndex].sort((a, b) => a - b)\r\n\r\n        const selected = messages.slice(indexes[0], indexes[1] + 1)\r\n        const selection = window.getSelection()\r\n        const range = (selection?.rangeCount ?? 0) > 0 ? selection?.getRangeAt(0) : undefined\r\n\r\n        // If selected more than one message extend selection to include whole messages\r\n        if (selected.length > 1 && selection && range) {\r\n            const forwardSelection = firstSelectedMessageIndex < lastSelectedMessageIndex\r\n            const firstElement = document.querySelector(`[data-message-id-selection='${firstSelectedMessageRef.current}']`)\r\n            const lastElement = document.querySelector(`[data-message-id-selection='${lastSelectedMessageId}']`)\r\n            const startElement = forwardSelection ? firstElement : lastElement\r\n            const endElement = forwardSelection ? lastElement : firstElement\r\n            range.setStartBefore(startElement || range.startContainer)\r\n            range.setEndAfter(endElement || range.endContainer)\r\n            if (forwardSelection) {\r\n                selection.setBaseAndExtent(range.startContainer, range.startOffset, range.endContainer, range.endOffset)\r\n            } else {\r\n                selection.setBaseAndExtent(range.endContainer, range.endOffset, range.startContainer, range.startOffset)\r\n            }\r\n        }\r\n        setSelectedMessages(selected)\r\n    })\r\n\r\n    const mouseDownHandler = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        firstSelectedMessageRef.current = getNearestMessageId(e.target)\r\n    }, [])\r\n\r\n    const value = useMemo<ChatMessagesContextType>(\r\n        () => ({\r\n            hasSelection,\r\n            setHasSelection,\r\n            messages,\r\n            selectedMessages,\r\n            setClipboardBuffer,\r\n            getClipboardBuffer,\r\n            scrollContainer,\r\n        }),\r\n        [getClipboardBuffer, hasSelection, messages, scrollContainer, selectedMessages],\r\n    )\r\n\r\n    return (\r\n        <ChatMessagesContext.Provider value={value}>\r\n            <div onMouseDown={mouseDownHandler}>\r\n                {children}\r\n            </div>\r\n        </ChatMessagesContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useChatHasSelection = () => useContextSelector(ChatMessagesContext, data => data.hasSelection)\r\nexport const useChatSetHasSelection = () => useContextSelector(ChatMessagesContext, data => data.setHasSelection)\r\nexport const useChatMessages = () => useContextSelector(ChatMessagesContext, data => data.messages)\r\nexport const useChatSelectedMessages = () => useContextSelector(ChatMessagesContext, data => data.selectedMessages)\r\nexport const useChatGetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.getClipboardBuffer)\r\nexport const useChatSetClipboardBuffer = () => useContextSelector(ChatMessagesContext, data => data.setClipboardBuffer)\r\nexport const useChatScrollContainer = () => useContextSelector(ChatMessagesContext, data => data.scrollContainer)\r\n\r\n\r\nfunction getNearestMessageId(target: EventTarget | null) {\r\n    let element: Element | undefined = undefined\r\n    if (target instanceof HTMLElement) {\r\n        element = target.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    } else if (target instanceof Node) {\r\n        element = target.parentElement?.closest('[data-message]')?.querySelector('[data-message-id-selection]') || undefined\r\n    }\r\n\r\n    return element?.getAttribute('data-message-id-selection') || undefined\r\n}\r\n","import type {FC, HTMLAttributes} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface MessageActionProps extends HTMLAttributes<HTMLButtonElement> {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const MessageAction: FC<MessageActionProps> = ({\r\n    className,\r\n    children,\r\n    ...buttonProps\r\n}) => {\r\n    return (\r\n        <button\r\n            {...buttonProps}\r\n            className={tcn(\r\n                'flex items-center gap-1 rounded border px-2 py-0.5 shadow-4 state-layer-bg-neutral-0 svg-color-current border-default',\r\n                'transition-colors',\r\n                'hover:state-layer-mix-dark-on-white-1',\r\n                'focus:state-layer-mix-dark-on-white-2',\r\n                'active:state-layer-mix-dark-on-white-3',\r\n                className,\r\n            )}\r\n        >\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserDetailsState} from '@bpinc/ad-user-details-state-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {\r\n    getDispositionText,\r\n    getExternalChatMessageDisplayName,\r\n    getHistoryOrChatMessageText,\r\n    getHtmlMessageText,\r\n} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isExternalChatMessageDate,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n} from '../../../types'\r\n\r\n\r\nexport function useGetFormattedClipboardMessage() {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const contacts = useContactsState('contacts')\r\n    const users = useUserDetailsState('userDetails')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const interaction = useInteraction(interactionId)\r\n    const sessionUser = useSessionState(['firstName', 'lastName'])\r\n\r\n\r\n    return useCallback(\r\n        function getFormatClipboardMessage(\r\n            message: ChatCommonMessagesType,\r\n        ) {\r\n            const messageData = getMessageData()\r\n\r\n            if (!messageData) {\r\n                return ''\r\n            }\r\n\r\n            return `[${messageData.date}] ${messageData.name}\\n\\n${messageData.text}\\n\\n`\r\n\r\n\r\n            function getMessageData() {\r\n                if (isExternalChatMessageDate(message)) {\r\n                    return\r\n                }\r\n\r\n                if (isVoiceTranscriptMessage(message)) {\r\n                    const {endTime, partyId, text: messageText} = message\r\n                    const callParty = interaction?.parties?.find(party => party.id === partyId)\r\n                    const chartParty = interaction?.chatParties?.find(party => party.party_id === partyId)\r\n\r\n                    const name = callParty\r\n                        ? formatFullName(callParty.firstName, callParty.lastName)\r\n                        : chartParty\r\n                            ? formatFullName(chartParty.first_name, chartParty.last_name)\r\n                            : formatFullName(sessionUser.firstName, sessionUser.lastName)\r\n\r\n                    const text = getHtmlMessageText(messageText)\r\n\r\n                    return {\r\n                        date: formatDate(endTime, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isActivityMessageGroup(message)) {\r\n                    const {timestamp, lastName, firstName, notes} = message\r\n                    const text = notes || getDispositionText(message, t, formatFullName)\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name: formatFullName(firstName, lastName),\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                if (isHistoryMessage(message) || isChatMessage(message)) {\r\n                    const {timestamp, contactId, userId} = message\r\n                    const displayName = getExternalChatMessageDisplayName(message, formatFullName)\r\n                    const contactData = contactId ? contacts[contactId]?.data : userId ? users[userId]?.data : undefined\r\n                    const userOrContactName = contactData\r\n                        ? formatFullName(contactData.firstName, contactData.lastName)\r\n                        : ''\r\n                    const name = displayName || userOrContactName\r\n\r\n                    const text = getHistoryOrChatMessageText(message, t)\r\n\r\n                    if (!text) {\r\n                        return\r\n                    }\r\n\r\n                    return {\r\n                        date: formatDate(timestamp, {full: true}),\r\n                        name,\r\n                        text,\r\n                    }\r\n                }\r\n\r\n                return null\r\n            }\r\n        }, [contacts, formatFullName, interaction?.chatParties, interaction?.parties, sessionUser.firstName, sessionUser.lastName, t, users])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {maskActivityHistoryMessages} from '@bpinc/ad-contacts-state-methods'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {\r\n    useInteractionChatDataSelector,\r\n    useInteractionChatStateMethods,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MaskedTextChunks} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {getContactId, getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {SelectionData, Toggle} from '@bpinc/lib-helpers'\r\nimport {getErrorMessage, Mask, stringToHTMLFragment} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy, IconKnowledgeBase, IconMask} from '@bpinc/lib-jskit-ui'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getExternalChatMessageDisplayType} from '../../../helpers'\r\nimport type {ChatCommonMessagesType} from '../../../types'\r\nimport {isChatMessage, isExternalChatMessageDate, isHistoryMessage, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatMessages,\r\n    useChatSelectedMessages,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface GetSelectionPopupContentParams {\r\n    selectedText: string\r\n    toggleShow: Toggle\r\n    selectionData: SelectionData | undefined\r\n}\r\n\r\nexport function useSelectionActions(item: Item, withMask = false) {\r\n    const {t} = useLocalizationState()\r\n    const messages = useChatMessages()\r\n    const selectedMessages = useChatSelectedMessages()\r\n    const {serverOrigin, loginId, sessionId, privileges} = useSessionState()\r\n    const {updateActivityHistoryMessageText} = useContactsStateMethods()\r\n    const getFormatClipboardMessage = useGetFormattedClipboardMessage()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n\r\n    const masked = useInteractionChatDataSelector(\r\n        getInteractionStepId(item),\r\n        s => s?.masked,\r\n    )\r\n\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n\r\n    const isCommunicator = useIsCommunicator()\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    return function getSelectionPopupContent({\r\n        toggleShow,\r\n        selectedText,\r\n        selectionData,\r\n    }: GetSelectionPopupContentParams) {\r\n        const {range} = selectionData ?? {}\r\n        const uniqueMessageId = getRangeMessageId(range)\r\n\r\n        const selectedMessage = messages.find(\r\n            message =>\r\n                uniqueMessageId &&\r\n                equalUniqueMessageId(\r\n                    uniqueMessageId,\r\n                    composedMessageUniqueId(message),\r\n                ),\r\n        )\r\n\r\n        function canMask() {\r\n            if (\r\n                !withMask ||\r\n                isExternalChatMessageDate(selectedMessage) ||\r\n                !privileges.CAN_MASK_INTERACTION_CONTENT\r\n            ) {\r\n                return false\r\n            }\r\n\r\n            if (!isVoiceTranscriptMessage(selectedMessage)) {\r\n                const displayType =\r\n                    getExternalChatMessageDisplayType(selectedMessage)\r\n\r\n                return displayType === 'message'\r\n            }\r\n\r\n            return false\r\n        }\r\n        function handleMaskClick() {\r\n            if (\r\n                isVoiceTranscriptMessage(selectedMessage) ||\r\n                isExternalChatMessageDate(selectedMessage)\r\n            ) {\r\n                return\r\n            }\r\n\r\n            if (isHistoryMessage(selectedMessage)) {\r\n                //Activity history message (both in active chat session and AH)\r\n                const maskedMessageBeforeMasking = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskSelectedHistory(range)\r\n\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskActivityHistoryMessages({\r\n                    loginId,\r\n                    sessionId,\r\n                    serverOrigin,\r\n                    globalInteractionId: selectedMessage.globalInteractionId,\r\n                    messages: [\r\n                        {\r\n                            messageId: selectedMessage.msgId,\r\n                            maskedText,\r\n                        },\r\n                    ],\r\n                })\r\n                    .then(() => {\r\n                        const contactId = getContactId(item)\r\n\r\n                        if (contactId) {\r\n                            updateActivityHistoryMessageText({\r\n                                contactId,\r\n                                messageId: selectedMessage.msgId,\r\n                                messageText: maskedText,\r\n                            })\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        //TODO: Ask for real error message text\r\n                        showNotification({\r\n                            type: 'error',\r\n                            id: Notifications.ChatMessageMaskError,\r\n                            tags: ['current-view'],\r\n                            message:\r\n                                t.EXTERNAL_CHAT.masking_failed_error_message(),\r\n                            duration: 5000,\r\n                        })\r\n                        bpLogger.error(getErrorMessage(err))\r\n\r\n                        const selectedMessageNode = getMessageTextElement(\r\n                            composedMessageUniqueId(selectedMessage),\r\n                        )\r\n                        if (selectedMessageNode) {\r\n                            selectedMessageNode.innerHTML =\r\n                                maskedMessageBeforeMasking\r\n                        }\r\n                    })\r\n\r\n                //Active chat session, current chat message\r\n            } else if (\r\n                isChatMessage(selectedMessage) &&\r\n                selectedMessage.msgId\r\n            ) {\r\n                const textChunks =\r\n                    masked?.messages?.[selectedMessage.msgId]?.textChunks\r\n                const updatedTextChunks = maskSelectedText(range, textChunks)\r\n                const maskedText = getMaskedText(\r\n                    composedMessageUniqueId(selectedMessage),\r\n                )\r\n\r\n                maskMessage({\r\n                    itemId: getInteractionStepId(item),\r\n                    messageId: selectedMessage.msgId,\r\n                    maskedText,\r\n                    textChunks: updatedTextChunks,\r\n                })\r\n            }\r\n\r\n            toggleShow(false)\r\n        }\r\n        async function handleSearchKnowledgeBaseClick() {\r\n            toggleShow(false)\r\n\r\n            if (isCommunicator) {\r\n                openInteractionSlidingModal(item.id, 'knowledgeBase')\r\n            } else {\r\n                setKBFloatingState(s => (s === 'closed' ? 'floating' : s))\r\n            }\r\n            setupInteractionKB(selectedText)\r\n        }\r\n        function handleCopyClick() {\r\n            toggleShow(false)\r\n\r\n            let textToCopy = ''\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //If several messages selected, copy all of them\r\n            if (selectedMessages.length > 1) {\r\n                textToCopy = selectedMessages.reduce<string>((res, message) => {\r\n                    return res + getFormatClipboardMessage(message)\r\n                }, '')\r\n                textToAddToCopyBuffer = textToCopy\r\n            //Otherwise copy only selected message, but add formatted message to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToCopy = selectedText\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            console.info('📋 Clipboard text\\n', textToCopy)\r\n            setClipboardBuffer(textToAddToCopyBuffer)\r\n            navigator.clipboard.writeText(textToCopy)\r\n        }\r\n\r\n        function handleAddToCopy() {\r\n            toggleShow(false)\r\n\r\n            let textToAddToCopyBuffer = ''\r\n\r\n            //More than one message selected, add all of them to \"Add to copy\" buffer\r\n            if (selectedMessages.length > 1) {\r\n                textToAddToCopyBuffer = selectedMessages.reduce<string>(\r\n                    (res, message) => {\r\n                        return res + getFormatClipboardMessage(message)\r\n                    },\r\n                    '',\r\n                )\r\n            //Only one message selected, add it to \"Add to copy\" buffer\r\n            } else {\r\n                assertDefined(selectedMessages[0])\r\n                textToAddToCopyBuffer = getFormatClipboardMessage(selectedMessages[0])\r\n            }\r\n\r\n            const addToCopyBuffer = getClipboardBuffer()\r\n            const newClipboardData = addToCopyBuffer + textToAddToCopyBuffer\r\n            console.info('📋 Clipboard text\\n', newClipboardData)\r\n\r\n            navigator.clipboard.writeText(newClipboardData)\r\n            setClipboardBuffer(newClipboardData)\r\n        }\r\n\r\n        if (!selectedText) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {!isAfterCallWork(item) && (\r\n                    <MessageAction\r\n                        onClick={handleSearchKnowledgeBaseClick}\r\n                        data-testid=\"search-kb-button\"\r\n                    >\r\n                        <IconKnowledgeBase className=\"size-4\" />\r\n                        {t.GLOBAL.search()}\r\n                    </MessageAction>\r\n                )}\r\n                {canMask() && (\r\n                    <MessageAction\r\n                        onClick={handleMaskClick}\r\n                        data-testid=\"mask-content-button\"\r\n                    >\r\n                        <IconMask />\r\n                        {t.EXTERNAL_CHAT.mask()}\r\n                    </MessageAction>\r\n                )}\r\n                <MessageAction onClick={handleCopyClick} data-testid=\"copy\">\r\n                    <IconCopy />\r\n                    {t.GLOBAL.copy()}\r\n                </MessageAction>\r\n                {!!getClipboardBuffer().length && (\r\n                    <MessageAction\r\n                        onClick={handleAddToCopy}\r\n                        data-testid=\"add-to-copy\"\r\n                    >\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getRangeMessageId(\r\n    range: Range | undefined,\r\n): UniqueMessageId | undefined {\r\n    const commonElement = getCommonAncestorElement(range)\r\n    return getElementMessageId(commonElement)\r\n}\r\n\r\nexport function getElementMessageId(\r\n    element: Element | null | undefined,\r\n): UniqueMessageId | undefined {\r\n    const messageElement = element?.closest(uniqueMessageIdSelector())\r\n    const messageId = messageElement?.getAttribute('data-message-id')\r\n    let globalInteractionId =\r\n        messageElement?.getAttribute('data-global-interaction-id') ?? undefined\r\n    if (globalInteractionId === 'current') {\r\n        globalInteractionId = undefined\r\n    }\r\n    if (messageId) {\r\n        return {messageId, globalInteractionId}\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n\r\nfunction getCommonAncestorElement(range: Range | undefined) {\r\n    return range?.commonAncestorContainer.nodeType === Node.ELEMENT_NODE\r\n        ? (range?.commonAncestorContainer as Element)\r\n        : range?.commonAncestorContainer.parentElement\r\n}\r\n\r\nfunction maskSelectedHistory(range: Range | undefined) {\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    let fragment = range.extractContents()\r\n    const tempSpan = getFragmentWithinSpanNode(fragment)\r\n\r\n    Mask.obscureHTML(tempSpan)\r\n\r\n    fragment = document.createDocumentFragment()\r\n\r\n    Array.from(tempSpan.childNodes).forEach(node => {\r\n        fragment.appendChild(node)\r\n    })\r\n\r\n    range.insertNode(fragment)\r\n}\r\n\r\nfunction maskSelectedText(\r\n    range: Range | undefined,\r\n    maskedTextChunks: MaskedTextChunks = {},\r\n) {\r\n    const updatedMaskedTextChunks = {...maskedTextChunks}\r\n\r\n    if (!range) {\r\n        return\r\n    }\r\n\r\n    extendUnmasked(range)\r\n\r\n    const fragment = range.extractContents()\r\n    const span = getFragmentWithinSpanNode(fragment)\r\n    const unmaskedSpan = revealUnmasked(span, updatedMaskedTextChunks)\r\n    const id = uuid()\r\n\r\n    unmaskedSpan.classList.add('bp-masked')\r\n    unmaskedSpan.id = id\r\n\r\n    const unmaskedText = unmaskedSpan.innerHTML\r\n\r\n    Mask.obscureHTML(unmaskedSpan)\r\n\r\n    updatedMaskedTextChunks[id] = {\r\n        originalText: unmaskedText,\r\n        maskedText: unmaskedSpan.innerHTML,\r\n    }\r\n\r\n    range.insertNode(unmaskedSpan)\r\n    return updatedMaskedTextChunks\r\n}\r\n\r\nfunction getFragmentWithinSpanNode(fragment: DocumentFragment) {\r\n    const span = document.createElement('span')\r\n\r\n    fragment.childNodes.forEach(node => {\r\n        const nodeCopy = node.cloneNode(true)\r\n        span.append(nodeCopy)\r\n    })\r\n\r\n    return span\r\n}\r\n\r\nfunction extendUnmasked(range: Range) {\r\n    const startElement = range.startContainer.parentElement\r\n\r\n    if (isMasked(startElement) || isAnchorTag(startElement)) {\r\n        range.setStartBefore(range.startContainer)\r\n        range.setStartBefore(range.startContainer)\r\n    }\r\n\r\n    const endElement = range.endContainer.parentElement\r\n\r\n    if (isMasked(endElement) || isAnchorTag(endElement)) {\r\n        range.setEndAfter(range.endContainer)\r\n        range.setEndAfter(range.endContainer)\r\n    }\r\n}\r\n\r\nfunction isMasked(element: HTMLElement | null | undefined) {\r\n    return element?.classList.contains('bp-masked')\r\n}\r\n\r\nfunction isAnchorTag(element: HTMLElement | null | undefined) {\r\n    return element?.nodeName === 'A'\r\n}\r\n\r\nfunction revealUnmasked(html: HTMLElement, maskedTextChunks: MaskedTextChunks) {\r\n    const htmlClone = html.cloneNode(true) as HTMLElement\r\n\r\n    revealUnmaskedInner(htmlClone)\r\n\r\n    return htmlClone\r\n\r\n    function revealUnmaskedInner(htmlInner: HTMLElement) {\r\n        if (htmlInner.classList.contains('bp-masked')) {\r\n            const textChunkId = htmlInner.id\r\n            const unmasked = stringToHTMLFragment(\r\n                maskedTextChunks[textChunkId].originalText,\r\n            )\r\n\r\n            delete maskedTextChunks[htmlInner.id]\r\n\r\n            htmlInner.replaceWith(unmasked)\r\n            return\r\n        }\r\n\r\n        Array.from(htmlInner.children).forEach(htmlElement => {\r\n            revealUnmaskedInner(htmlElement as HTMLElement)\r\n        })\r\n    }\r\n}\r\n\r\nexport interface UniqueMessageId {\r\n    globalInteractionId: string | undefined\r\n    messageId: string | undefined\r\n}\r\n\r\nexport function equalUniqueMessageId(\r\n    id1: UniqueMessageId,\r\n    id2: UniqueMessageId,\r\n) {\r\n    return (\r\n        id1.messageId === id2.messageId &&\r\n        id1.globalInteractionId === id2.globalInteractionId\r\n    )\r\n}\r\n\r\nexport function composedMessageUniqueId(\r\n    composedChatMessage: ChatCommonMessagesType,\r\n): UniqueMessageId {\r\n    return {\r\n        messageId: isExternalChatMessageDate(composedChatMessage)\r\n            ? composedChatMessage\r\n            : composedChatMessage.msgId,\r\n        globalInteractionId:\r\n            !isExternalChatMessageDate(composedChatMessage) &&\r\n            !isVoiceTranscriptMessage(composedChatMessage) &&\r\n            isHistoryMessage(composedChatMessage)\r\n                ? composedChatMessage.globalInteractionId\r\n                : undefined,\r\n    }\r\n}\r\n\r\nfunction getMaskedText(uniqueMessageId: UniqueMessageId) {\r\n    return getMessageTextElement(uniqueMessageId)?.innerHTML ?? ''\r\n}\r\n\r\nfunction getMessageTextElement(uniqueMessageId: UniqueMessageId) {\r\n    return uniqueMessageId.messageId\r\n        ? document.querySelector(uniqueMessageIdSelector(uniqueMessageId))\r\n            ?.children[0]\r\n        : undefined\r\n}\r\n\r\nfunction uniqueMessageIdSelector(uniqueMessageId?: UniqueMessageId): string {\r\n    if (uniqueMessageId) {\r\n        const {messageId, globalInteractionId} = uniqueMessageId\r\n        return `[data-message-id=\"${messageId}\"][data-global-interaction-id=\"${\r\n            globalInteractionId ?? 'current'\r\n        }\"]`\r\n    } else {\r\n        return `[data-message-id][data-global-interaction-id]`\r\n    }\r\n}\r\n","import type {CSSProperties, ReactNode} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\n\r\nimport {useInteractionChatDataSelector, useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {stringToHTMLFragment, useBoolean} from '@bpinc/lib-helpers'\r\nimport {isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {Popup} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isChatMessage, isExternalChatMessageDate, isVoiceTranscriptMessage} from '../../../types'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useChatMessages, useChatScrollContainer} from './ChatMessagesContext'\r\nimport type {UniqueMessageId} from './useSelectionActions'\r\nimport {composedMessageUniqueId, equalUniqueMessageId, getElementMessageId} from './useSelectionActions'\r\n\r\n\r\ninterface WithUnmaskActionProps {\r\n    interactionId: string\r\n    className?: string\r\n    children: ReactNode\r\n}\r\n\r\n\r\nexport const WithUnmaskAction: React.FC<WithUnmaskActionProps> = React.memo(({interactionId, children, className}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const messages = useChatMessages()\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const unmaskPopupWrapperRef = useRef<HTMLDivElement>(null)\r\n    const [popupRect, setPopupRect] = useState<DOMRectReadOnly>()\r\n    const [unmaskChunkId, setUnmaskChunkId] = useState<string>()\r\n    const [unmaskMessageId, setUnmaskMessageId] = useState<UniqueMessageId>()\r\n\r\n    const maskedMessageNodeRef = useRef<HTMLElement | null>(null)\r\n\r\n    const {maskMessage} = useInteractionChatStateMethods()\r\n    const masked = useInteractionChatDataSelector(interactionStepId, s => s?.masked)\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    useEffect(() => {\r\n        const unmaskPopupWrapperNode = unmaskPopupWrapperRef.current\r\n        unmaskPopupWrapperNode?.addEventListener('click', togglePopup)\r\n\r\n        function togglePopup(e: MouseEvent) {\r\n            const maskedMessageNode = e.target\r\n            if (!maskedMessageNode || !isHTMLElement(maskedMessageNode)) {\r\n                return\r\n            }\r\n            maskedMessageNodeRef.current = maskedMessageNode\r\n\r\n            if (maskedMessageNode.classList.contains('bp-masked') && maskedMessageNode.id) {\r\n                setUnmaskChunkId(maskedMessageNode.id)\r\n                const unmaskElementMessageId = getElementMessageId(maskedMessageNode)\r\n\r\n                if (unmaskElementMessageId) {\r\n                    setUnmaskMessageId(unmaskElementMessageId)\r\n                }\r\n\r\n                setPopupRect(maskedMessageNode.getBoundingClientRect())\r\n\r\n                toggleShow()\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            unmaskPopupWrapperNode?.removeEventListener('click', togglePopup)\r\n        }\r\n    }, [toggleShow])\r\n\r\n    const handleUnmask = useCallback(\r\n        function handleUnmaskCallback() {\r\n            const messageToUnmask = messages.find(\r\n                msg =>\r\n                    unmaskMessageId &&\r\n                    !isVoiceTranscriptMessage(msg) &&\r\n                    equalUniqueMessageId(unmaskMessageId, composedMessageUniqueId(msg)),\r\n            )\r\n\r\n            if (!unmaskChunkId || !unmaskMessageId || isVoiceTranscriptMessage(messageToUnmask) || isExternalChatMessageDate(messageToUnmask)) {\r\n                return\r\n            }\r\n\r\n            if (isChatMessage(messageToUnmask)) {\r\n                const unmaskedTextChunk = unmaskMessageId?.messageId\r\n                    ? masked?.messages?.[unmaskMessageId.messageId]?.textChunks?.[unmaskChunkId]?.originalText\r\n                    : undefined\r\n\r\n                if (!unmaskedTextChunk) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                const unmaskedTextChunkHTML = stringToHTMLFragment(unmaskedTextChunk)\r\n\r\n                maskedMessageNodeRef.current?.replaceWith(unmaskedTextChunkHTML)\r\n\r\n                const maskedText =\r\n                    unmaskPopupWrapperRef.current?.querySelector(`[data-message-id=\"${messageToUnmask.msgId}\"]`)\r\n                        ?.children[0]?.innerHTML ?? ''\r\n\r\n                if (!maskedText) {\r\n                    toggleShow(false)\r\n                    return\r\n                }\r\n\r\n                maskMessage({\r\n                    itemId: interactionStepId,\r\n                    messageId: unmaskMessageId.messageId!,\r\n                    maskedText,\r\n                })\r\n            }\r\n            toggleShow(false)\r\n        },\r\n        [interactionStepId, maskMessage, masked?.messages, messages, toggleShow, unmaskChunkId, unmaskMessageId],\r\n    )\r\n\r\n    const coordinates = useMemo<CSSProperties>(\r\n        function memoizePopupCoordinates() {\r\n            return {\r\n                position: 'fixed',\r\n                top: popupRect?.y ?? 0,\r\n                left: popupRect?.x ?? 0,\r\n            }\r\n        },\r\n        [popupRect],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <div ref={unmaskPopupWrapperRef} className={className}>{children}</div>\r\n            <Popup\r\n                show={show}\r\n                data-testid=\"selection-popup\"\r\n                placement=\"top-start\"\r\n                contentClassName=\"border-none bg-transparent shadow-none p-0\"\r\n                data-visible={show}\r\n                onClickOutside={toggleShow}\r\n                style={coordinates}\r\n                mountNode={scrollContainer}\r\n                content={\r\n                    <MessageAction\r\n                        onClick={handleUnmask}\r\n                        data-testid=\"unmask-content-button\"\r\n                    >\r\n                        <IconUnmask />\r\n                        {t.EMAIL.button_unMaskSelectedText_text()}\r\n                    </MessageAction>\r\n                }\r\n            />\r\n        </>\r\n    )\r\n})\r\n","import type {ReactNode} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport type {SelectionData} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {WithSelectionPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChatScrollContainer, useChatSetHasSelection} from './ChatMessagesContext'\r\nimport {useSelectionActions} from './useSelectionActions'\r\nimport {WithUnmaskAction} from './WithUnmaskAction'\r\n\r\n\r\ntype WithActionsPopupProps = {\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithSelectionActions: React.FC<WithActionsPopupProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    interactionId,\r\n}) => {\r\n    const setHasSelection = useChatSetHasSelection()\r\n    const interaction = useInteraction(interactionId)\r\n    assertDefined(interaction)\r\n    const getPopupContent = useSelectionActions(interaction, withMaskAction)\r\n    const onSelectionChange = useCallback(\r\n        (selection?: SelectionData) => {\r\n            setHasSelection(!!selection?.range?.toString())\r\n        },\r\n        [setHasSelection],\r\n    )\r\n\r\n    const scrollContainer = useChatScrollContainer()\r\n\r\n    return (\r\n        <WithSelectionPopup\r\n            getPopupContent={getPopupContent}\r\n            onSelectionChange={onSelectionChange}\r\n            mountNode={scrollContainer}\r\n            popupContentClassName=\"border-none bg-transparent shadow-none flex gap-1\"\r\n        >\r\n            {withMaskAction ? (\r\n                <WithUnmaskAction interactionId={interactionId}>\r\n                    {children}\r\n                </WithUnmaskAction>\r\n            ) : (\r\n                children\r\n            )}\r\n        </WithSelectionPopup>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesContextProvider} from './ChatMessagesContext'\r\nimport {WithSelectionActions} from './WithSelectionActions'\r\n\r\n\r\ntype ChatMessagesSelectionActionsProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    withMaskAction?: boolean\r\n    interactionId: string\r\n    children: ReactNode\r\n    scrollContainer: ChatScrollNodeType\r\n}\r\n\r\nexport const ChatMessagesSelectionActions: React.FC<ChatMessagesSelectionActionsProps> = ({\r\n    children,\r\n    withMaskAction,\r\n    messages,\r\n    interactionId,\r\n    scrollContainer,\r\n}) => {\r\n    return (\r\n        <ChatMessagesContextProvider messages={messages} interactionId={interactionId} scrollContainer={scrollContainer}>\r\n            <WithSelectionActions withMaskAction={withMaskAction} interactionId={interactionId}>\r\n                {children}\r\n            </WithSelectionActions>\r\n        </ChatMessagesContextProvider>\r\n    )\r\n}\r\n","import type {FC, ReactElement} from 'react'\r\n\r\nimport {useActiveChatChecker} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {IconMask, IconUnmask} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {useFileMasker} from '../ExternalMessages/messages/FileMessage/useFileMasker'\r\n\r\n\r\ninterface WithAttachmentMaskActionProps {\r\n    fileIsMasked: boolean\r\n    canMask: boolean\r\n    globalInteractionId: string | undefined\r\n    interactionStepId: string\r\n    fileId: string\r\n    contactId: string\r\n    children: ReactElement\r\n}\r\n\r\nexport const WithAttachmentMaskAction: FC<WithAttachmentMaskActionProps> = ({\r\n    fileIsMasked,\r\n    canMask,\r\n    interactionStepId,\r\n    globalInteractionId,\r\n    fileId,\r\n    contactId,\r\n    children,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const isActiveChat = useActiveChatChecker(interactionStepId)\r\n\r\n    const maskFile = useFileMasker({\r\n        interactionStepId,\r\n        itemContactId: contactId,\r\n        globalInteractionId,\r\n        fileId,\r\n        isActiveChat,\r\n    })\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"group relative\"\r\n        >\r\n            {fileIsMasked && <IconMask className=\"absolute left-1/2 top-1/2 z-[1] size-6 -translate-x-1/2 -translate-y-1/2\" />}\r\n            {canMask && (\r\n                <MessageAction onClick={maskFile} className=\"absolute right-2 top-2 z-[1] opacity-0 transition-opacity group-hover:opacity-100\">\r\n                    {fileIsMasked ? <IconUnmask /> : <IconMask />}\r\n                    <p>\r\n                        {fileIsMasked\r\n                            ? t.EXTERNAL_CHAT.unmask()\r\n                            : t.EXTERNAL_CHAT.mask()}\r\n                    </p>\r\n                </MessageAction>\r\n            )}\r\n            <div\r\n                className={\r\n                    tcn(\r\n                        'border border-transparent',\r\n                        {\r\n                            'overflow-hidden rounded-xs border-[rgba(0,0,0,0.1)]': fileIsMasked,\r\n                        })\r\n                }\r\n            >\r\n                <div\r\n                    className={tcn({\r\n                        'pointer-events-none blur-[6px] state-layer-bg-white state-layer-mix-dark-on-white-1': fileIsMasked,\r\n                    })}\r\n                >\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {maskActivityHistoryMessages} from '@bpinc/ad-contacts-state-methods'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getErrorMessage} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface UseFileMaskerParams {\r\n    globalInteractionId?: string\r\n    itemContactId: string\r\n    fileId: string\r\n    interactionStepId: string\r\n    isActiveChat: boolean\r\n}\r\n\r\nexport function useFileMasker({\r\n    globalInteractionId,\r\n    interactionStepId,\r\n    itemContactId,\r\n    isActiveChat,\r\n    fileId,\r\n}: UseFileMaskerParams) {\r\n    const {loginId, sessionId, serverOrigin} = useSessionState()\r\n    const {maskFile} = useContactsStateMethods()\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const {toggleFileMask} = useInteractionChatStateMethods()\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    return useCallback(() => {\r\n        if (isFileInCurrentChatSession()) {\r\n            toggleFileMask({\r\n                itemId: interactionStepId,\r\n                fileId,\r\n            })\r\n        } else if (isFileInAH(globalInteractionId)) {\r\n            maskActivityHistoryMessages({\r\n                loginId,\r\n                sessionId,\r\n                serverOrigin,\r\n                globalInteractionId,\r\n                fileIds: [fileId],\r\n            })\r\n                .then(() => {\r\n                    if (itemContactId) {\r\n                        maskFile({fileId, contactId: itemContactId})\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    //TODO: Ask for real error message text\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.ChatFileMaskError,\r\n                        tags: ['current-view'],\r\n                        message: i18n.activity_history_file_masking_error(),\r\n                        duration: 5000,\r\n                    })\r\n                    bpLogger.error(getErrorMessage(err))\r\n                })\r\n        }\r\n        function isFileInCurrentChatSession() {\r\n            return isActiveChat && !globalInteractionId\r\n        }\r\n\r\n        function isFileInAH(checkingGlobalInteractionId?: string): checkingGlobalInteractionId is string {\r\n            return !!checkingGlobalInteractionId\r\n        }\r\n    }, [\r\n        i18n,\r\n        itemContactId,\r\n        fileId,\r\n        globalInteractionId,\r\n        interactionStepId,\r\n        isActiveChat,\r\n        loginId,\r\n        maskFile,\r\n        serverOrigin,\r\n        sessionId,\r\n        showNotification,\r\n        toggleFileMask,\r\n    ])\r\n}\r\n","import type {HTMLAttributes, ReactNode} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport * as Tooltip from '@radix-ui/react-tooltip'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconAddToCopy, IconCopy} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport {MessageAction} from '../../MessageAction'\r\nimport {\r\n    useChatGetClipboardBuffer,\r\n    useChatHasSelection,\r\n    useChatMessages,\r\n    useChatScrollContainer,\r\n    useChatSetClipboardBuffer,\r\n} from './ChatMessagesContext'\r\nimport {useGetFormattedClipboardMessage} from './useGetFormattedClipboardMessage'\r\n\r\n\r\ninterface WithHoverOverActionsProps extends HTMLAttributes<HTMLElement> {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const WithHoverOverActions: React.FC<WithHoverOverActionsProps> = ({children, messageId, ...triggerHtmlProps}) => {\r\n    const getFormattedClipboardMessage = useGetFormattedClipboardMessage()\r\n    const hasSelection = useChatHasSelection()\r\n    const messages = useChatMessages()\r\n    const getClipboardBuffer = useChatGetClipboardBuffer()\r\n    const setClipboardBuffer = useChatSetClipboardBuffer()\r\n    const scrollContainer = useChatScrollContainer()\r\n    const message = useMemo(() => messages.find(m => getMessageId(m) === messageId), [messageId, messages])\r\n    const t = useLocalizationState('t')\r\n    const open = useBoolean()\r\n\r\n    const handleCopyToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n\r\n        const result = getFormattedClipboardMessage(message)\r\n\r\n        console.info('📋 Clipboard text\\n', result)\r\n        navigator.clipboard.writeText(result)\r\n        setClipboardBuffer(result)\r\n        open.setFalse()\r\n    }, [getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n    const handleAddToClipboard = useCallback(() => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        const result = getFormattedClipboardMessage(message)\r\n        const stored = getClipboardBuffer()\r\n        const newClipboardData = stored + result\r\n        navigator.clipboard.writeText(newClipboardData)\r\n        setClipboardBuffer(newClipboardData)\r\n        console.info('📋 Clipboard text\\n', newClipboardData)\r\n        open.setFalse()\r\n    }, [getClipboardBuffer, getFormattedClipboardMessage, message, open, setClipboardBuffer])\r\n\r\n\r\n    return (\r\n        <Tooltip.Root open={hasSelection ? false : open.value} onOpenChange={open.toggle} >\r\n            <Tooltip.Trigger asChild>\r\n                <div {...triggerHtmlProps}>\r\n                    {children}\r\n                </div>\r\n            </Tooltip.Trigger>\r\n            <Tooltip.Portal container={scrollContainer}>\r\n                <Tooltip.Content collisionBoundary={scrollContainer} side=\"top\" align=\"end\" className=\"z-10 flex gap-1\" hideWhenDetached>\r\n                    <MessageAction onClick={handleCopyToClipboard}>\r\n                        <IconCopy />\r\n                        {t.GLOBAL.copy()}\r\n                    </MessageAction>\r\n                    <MessageAction onClick={handleAddToClipboard}>\r\n                        <IconAddToCopy />\r\n                        {t.GLOBAL.add_to_copy()}\r\n                    </MessageAction>\r\n                </Tooltip.Content>\r\n            </Tooltip.Portal>\r\n        </Tooltip.Root>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {createSelector} from 'reselect'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedItems, isCall, isChat} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InteractionStateDataWithComputeds, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport function useBotSuggestions(itemId: string) {\r\n    const botSuggestionSelector = useMemo(() => selectBotSuggestions(itemId), [itemId])\r\n    return useInteractionStateSelector(botSuggestionSelector)\r\n}\r\n\r\nexport function useBotSuggestionsByType(itemId: string) {\r\n    const botSuggestionSelector = useMemo(() => selectBotSuggestionsByType(itemId), [itemId])\r\n    return useInteractionStateSelector(botSuggestionSelector)\r\n}\r\n\r\nfunction selectBotSuggestionsByType(itemId: string) {\r\n    return createSelector(\r\n        (state: InteractionStateDataWithComputeds) => state.items.find(item => item.id === itemId),\r\n        (state: InteractionStateDataWithComputeds) => state.items,\r\n        (item, items) => {\r\n            const associatedItems = getAssociatedItems({item, items})\r\n            const allItems = truthy([...associatedItems, item])\r\n\r\n            return allItems.reduce<Record<'voice' | 'chat', VoiceTranscriptSuggestion[]>>((acc, innerItem) => {\r\n                if (isCall(innerItem)) {\r\n                    acc.voice = innerItem?.botSuggestions ?? []\r\n                } else if (isChat(innerItem)) {\r\n                    acc.chat = innerItem?.botSuggestions ?? []\r\n                }\r\n                return acc\r\n            }, {voice: [], chat: []})\r\n        })\r\n}\r\n\r\nfunction selectBotSuggestions(itemId: string) {\r\n    return createSelector(\r\n        (state: InteractionStateDataWithComputeds) => state.items.find(item => item.id === itemId),\r\n        (state: InteractionStateDataWithComputeds) => state.items,\r\n        (item, items) => {\r\n            const associatedItems = getAssociatedItems({item, items})\r\n            const allItems = truthy([...associatedItems, item])\r\n\r\n            return allItems.flatMap(innerItem => innerItem?.botSuggestions ?? [])\r\n        })\r\n}\r\n","import {atom} from 'jotai'\r\n\r\n\r\nexport const predefinedMessagesSearchAtom = atom('')\r\nexport const predefinedSearchInsertPositionAtom = atom(-1)\r\nexport const chatPopupContentAtom = atom<'predefinedMessages' | 'emojiPicker' | undefined>(undefined)\r\nexport const attachmentButtonElementAtom = atom<HTMLButtonElement | null>(null)\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue} from 'jotai'\r\nimport {uniq} from 'lodash-es'\r\n\r\nimport {mimeTypeToExternalChatFileType} from '@bpinc/ad-formatting-helpers'\r\nimport {Attachment as AttachmentUI, InlineAlert, Modal} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport type {getFileRejection} from '../../../helpers'\r\nimport {attachmentButtonElementAtom} from './atoms'\r\n\r\n\r\ntype UploadErrorModalProps = CommonModalProps & {\r\n    rejection: Exclude<ReturnType<typeof getFileRejection>, null>[]\r\n    totalFilesAmount: number\r\n    onCloseCallback?: () => void\r\n}\r\n\r\nexport const UploadErrorModal: FC<UploadErrorModalProps> = ({\r\n    rejection,\r\n    onClose,\r\n    onCloseCallback,\r\n    totalFilesAmount,\r\n    ...props\r\n}) => {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const t = useLocalizationState('t')\r\n    const errorMessages = uniq(rejection.flatMap(r => r.errors.map(e => e.message)))\r\n\r\n    function handleClose() {\r\n        onClose()\r\n        onCloseCallback?.()\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} onClose={handleClose}>\r\n            <Modal.Header type=\"error\">\r\n                {t.CHAT_CENTER.upload_failed()}\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                <InlineAlert variant=\"error\">\r\n                    <ul className=\"m-0 p-0\">\r\n                        {errorMessages.map((message, index) => (\r\n                            <li key={index}>{message}</li>\r\n                        ))}\r\n                    </ul>\r\n                </InlineAlert>\r\n                <p className=\"my-6\">\r\n                    {t.CHAT_CENTER.failed_to_upload(\r\n                        rejection.length,\r\n                        totalFilesAmount,\r\n                    )}\r\n                </p>\r\n                <div className=\"flex flex-col gap-2\">\r\n                    {rejection.map((err, index) =>\r\n                        mimeTypeToExternalChatFileType(err.file.type) ===\r\n                    'attachment' ? (\r\n                                <AttachmentUI.File\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ) : (\r\n                                <AttachmentUI.Image\r\n                                    key={index}\r\n                                    name={err.file.name}\r\n                                    className=\"pointer-events-none\"\r\n                                    isFailed\r\n                                />\r\n                            ),\r\n                    )}\r\n                </div>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    onClick={() => {\r\n                        attachmentButton?.click()\r\n                        handleClose()\r\n                    }}\r\n                >\r\n                    {t.CHAT_CENTER.select_files()}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={() => handleClose()}>\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getContactId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\nimport {useChannelState} from '../channel-context'\r\n\r\n\r\ninterface InitiateChatProps {\r\n    chatItem: Item\r\n}\r\n\r\n\r\n//TODO: Extend this function to use it for text messages as well (error validation logic is slightly different)\r\n\r\n/**\r\n * Initiates a chat with the selected channel and address.\r\n * @returns boolean. true if the chat was initiated, false otherwise.\r\n */\r\nexport function useInitiateChatByAttachment({\r\n    chatItem,\r\n}: InitiateChatProps): () => boolean {\r\n    const {showNotification, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const contacts = useContactsState('contacts')\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const selectedChannel = getSelectedChannel(chatItem.id)\r\n    const selectedPhone = getSelectedPhone(chatItem.id)\r\n    const contactMessengers = getMessengers(contacts, chatItem)\r\n    const phone = selectedPhone?.phone || getPhoneFromItem(chatItem)\r\n    const errorValidation = useErrorValidation()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const contactId = getContactId(chatItem)\r\n    const itemService = getServiceId(chatItem)\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const service = itemService || selectedService\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatServiceId = getAssociatedChatServiceId(\r\n        services,\r\n        selectedService,\r\n    )\r\n    return useEvent(() => {\r\n        /**\r\n         * Get the messenger address based on the selected channel value or fallback to the phone number.\r\n         */\r\n        const messengerAddress = contactMessengers?.find(\r\n            messenger => messenger.type === selectedChannel?.value,\r\n        )?.userId\r\n\r\n        const address = messengerAddress || phone\r\n\r\n        /**\r\n         * If there is no phone number or messenger available do nothing.\r\n         */\r\n        if (!address) {\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Check for any validation errors.\r\n         */\r\n        const errors = [\r\n            ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                service,\r\n                didNumber: selectedDIDNumber,\r\n                interactionType: 'sms',\r\n            }),\r\n            ...errorValidation.getChannelError({\r\n                selectedChannel: selectedChannel?.value,\r\n            }),\r\n        ]\r\n\r\n        /**\r\n         * If there are any errors, show the first one and return.\r\n         */\r\n        if (errors.length) {\r\n            showNotification(errors[0])\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * If there are no errors, hide existing 'interaction-init' errors and start the chat initiation process.\r\n         */\r\n        hideNotificationsByTag('interaction-init')\r\n\r\n        initiateChat({\r\n            channel: selectedChannel?.value,\r\n            address,\r\n            displayData: chatItem?.displayData,\r\n            serviceId: associatedChatServiceId,\r\n            accessNumberId: selectedDIDNumber,\r\n            contactId,\r\n            origination: 'interaction',\r\n        })\r\n\r\n        return true\r\n    })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dropzone\":\"communicator_Dropzone_dropzone_NnIGW\",\"dropzoneDisabled\":\"communicator_Dropzone_dropzoneDisabled_Z62xX\",\"dropzoneTitle\":\"communicator_Dropzone_dropzoneTitle_GjrhI\",\"dropzoneSubtitle\":\"communicator_Dropzone_dropzoneSubtitle_3av8B\"};","import React, {useEffect} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {getFileErrors} from '../../../../helpers'\r\nimport type {ChatProps} from '../../../../types'\r\nimport {UploadErrorModal} from '../../ChatForm/UploadErrorModal'\r\nimport {useOnDrop} from './useOnDrop'\r\nimport {useShowChecker} from './useShowChecker'\r\n\r\nimport styles from './Dropzone.module.less'\r\n\r\n\r\nexport const Dropzone: React.FC<ChatProps> = ({itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const show = useShowChecker()\r\n    const onDrop = useOnDrop(itemId)\r\n\r\n    const {getRootProps, getInputProps, fileRejections, acceptedFiles} = useDropzone({\r\n        onDrop,\r\n        validator: partial(getFileErrors, t),\r\n    })\r\n\r\n    const openUploadErrorModal = useModalComponentOpener(UploadErrorModal)\r\n\r\n    const acceptedFilesLengthRef = useAsRef(acceptedFiles.length)\r\n    useEffect(function addErrorMessageOnReject() {\r\n        if (fileRejections.length) {\r\n            openUploadErrorModal({\r\n                rejection: fileRejections,\r\n                totalFilesAmount: acceptedFilesLengthRef.current + fileRejections.length,\r\n            })\r\n        }\r\n    }, [acceptedFilesLengthRef, fileRejections, openUploadErrorModal])\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            className={show ? styles.dropzone : styles.dropzoneDisabled}\r\n            data-testid=\"attachments-dropzone\"\r\n            data-visible={show}\r\n        >\r\n            <input {...getInputProps()} />\r\n            <div className={styles.dropzoneContent}>\r\n                <p className={styles.dropzoneTitle}>{t.GLOBAL.drop_files_here()}</p>\r\n                <p className={styles.dropzoneSubtitle}>{t.GLOBAL.drag_and_drop_subtitle()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useShowChecker() {\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n    const dragCounterRef = useRef(0)\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('dragenter', onDragEnter)\r\n        document.addEventListener('dragleave', onDragLeave)\r\n        document.addEventListener('drop', onDragLeave)\r\n\r\n        return () => {\r\n            document.removeEventListener('dragenter', onDragEnter)\r\n            document.removeEventListener('dragleave', onDragLeave)\r\n            document.removeEventListener('drop', onDragLeave)\r\n        }\r\n\r\n        function onDragEnter() {\r\n            dragCounterRef.current++\r\n            toggleShow(true)\r\n        }\r\n\r\n        function onDragLeave() {\r\n            dragCounterRef.current--\r\n            if (dragCounterRef.current === 0) {\r\n                toggleShow(false)\r\n            }\r\n        }\r\n    }, [toggleShow])\r\n\r\n    return show\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useInteraction, useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isCall, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useInitiateChatByAttachment} from '../../../../hooks/useInitiateChatByAttachment'\r\n\r\n\r\nexport function useOnDrop(itemId: string) {\r\n    const addAttachment = useChatAttachmentsUIState('addAttachment')\r\n    const chatItem = useInteraction(itemId)\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    itemsRef.current = items\r\n\r\n    assertDefined(chatItem)\r\n    const initiateChat = useInitiateChatByAttachment({chatItem})\r\n    const shouldInitiateChat =\r\n        isPotentialInteraction(chatItem) || isCall(chatItem)\r\n\r\n    return useCallback(\r\n        function onDropCallback(acceptedFiles: File[]) {\r\n            if (!acceptedFiles.length) {\r\n                return\r\n            }\r\n\r\n            if (chatItem) {\r\n                if (shouldInitiateChat) {\r\n                    initiateChat()\r\n                }\r\n                const interactionStepId = getInteractionStepId(chatItem)\r\n                addAttachments(interactionStepId)\r\n            }\r\n\r\n            function addAttachments(interactionStepId: string) {\r\n                acceptedFiles.forEach(file => addAttachment(interactionStepId, file))\r\n            }\r\n        },\r\n        [chatItem, shouldInitiateChat, initiateChat, addAttachment],\r\n    )\r\n}\r\n","import {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\n\r\nimport {getMessageId} from '../helpers/common'\r\n\r\n\r\nexport function useFirstUnreadMessage(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const first = chatData?.messages?.find(m => (m.source === 'customer' || m.source === 'agent') && !m.isRead)\r\n    if (!first) {\r\n        return null\r\n    }\r\n\r\n    return getMessageId(first)\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isScrollAtBottom} from '../../../helpers'\r\nimport {useFirstUnreadMessage} from '../../../hooks/useFirstUnreadMessage'\r\nimport type {ChatScrollNodeType} from '../../../types'\r\n\r\n\r\ntype ScrollToFirstUnreadBadgeProps = {\r\n    itemId: string\r\n    scrollNode: ChatScrollNodeType\r\n}\r\n\r\nexport const ScrollToFirstUnreadBadge: React.FC<ScrollToFirstUnreadBadgeProps> = ({itemId, scrollNode}) => {\r\n    const {t} = useLocalizationState()\r\n    const [unreadMessagesClicked, setUnreadMessagesClicked] = useState(true)\r\n    const [scrollAtBottom, setScrollAtBottom] = useState(false)\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const firstUnreadMessageId = useFirstUnreadMessage(itemId)\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector?.dispenser.subscribe({\r\n            onNewMessage: newMessage => {\r\n                if (newMessage.item_id === interactionStepId) {\r\n                    setUnreadMessagesClicked(false)\r\n                }\r\n            },\r\n        })\r\n        return () => {\r\n            subscription?.unsubscribe()\r\n        }\r\n    }, [interactionChatStateConnector?.dispenser, interactionStepId])\r\n\r\n    useEffect(() => {\r\n        const scrollAtBottomThrottled = throttle(() => {\r\n            setScrollAtBottom(isScrollAtBottom(scrollNode))\r\n        }, 500)\r\n        scrollNode?.addEventListener('scroll', scrollAtBottomThrottled)\r\n        return () => {\r\n            scrollNode?.removeEventListener('scroll', scrollAtBottomThrottled)\r\n        }\r\n    }, [scrollNode])\r\n\r\n    const handleClick = useCallback(\r\n        function handleClickCallback() {\r\n            if (!firstUnreadMessageId) {\r\n                return\r\n            }\r\n\r\n            setUnreadMessagesClicked(true)\r\n            scrollerApi?.scrollTo(firstUnreadMessageId, 'end')\r\n        }, [firstUnreadMessageId, scrollerApi],\r\n    )\r\n\r\n\r\n    if (!firstUnreadMessageId || unreadMessagesClicked || scrollAtBottom) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            enabledInOffline\r\n            transparent\r\n            onClick={handleClick}\r\n            className=\"absolute bottom-4 left-4 z-10 h-8 items-center\r\n            rounded border border-solid border-primary-legacy bg-white px-6 text-primary-legacy\r\n            hover:border-primary-hover hover:text-primary-hover\r\n            active:border-primary-active active:text-primary-active\"\r\n        >\r\n            {t.CHAT_CENTER.unread_messages_button_text()}\r\n            <SmIcon name=\"caret down\" className=\"leading-[16px]\" />\r\n        </Button>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {formatChatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {areSameDays} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface GetTimeStamp<T> {\r\n    (message: T): number\r\n}\r\ninterface Conditions<T> {\r\n    (message: T): boolean\r\n}\r\n\r\ninterface AddKeyDatesCallback {\r\n    <T>(messages: T[], getTimestamp: GetTimeStamp<T>, additionalConditions?: Conditions<T>): (T | string)[]\r\n}\r\n\r\nexport function useKeyDatesInserter(): AddKeyDatesCallback {\r\n    function addKeyDates<T>(\r\n        messages: T[],\r\n        getTimestamp: (message: T) => number,\r\n        additionalConditions?: (message: T) => boolean,\r\n    ) {\r\n        return messages.reduce(\r\n            (acc: (T | string)[], message: T, index, messagesArray) => {\r\n                if (index === 0) {\r\n                    addTime(acc, message)\r\n                } else {\r\n                    if (\r\n                        (additionalConditions ? additionalConditions(message) : true) &&\r\n                        showTimeBeforeMessage(\r\n                            new Date(getTimestamp(messagesArray[index - 1])),\r\n                            new Date(getTimestamp(message)),\r\n                        )\r\n                    )\r\n                        addTime(acc, message)\r\n                }\r\n\r\n                acc.push(message)\r\n\r\n                return acc\r\n            },\r\n            [],\r\n        )\r\n\r\n        function addTime(acc: (T | string)[], message: T) {\r\n            const time = formatChatDate(getTimestamp(message))\r\n            acc.push(time)\r\n        }\r\n    }\r\n\r\n    return useCallback(addKeyDates, [])\r\n}\r\n\r\n//****************************\r\nfunction showTimeBeforeMessage(currentTime: Date, nextTime: Date) {\r\n    return !areSameDays(currentTime, nextTime)\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useActivitiesAsMessages} from './useActivitiesAsMessages'\r\n\r\n\r\nexport function useActivitiesMessagesTillCreatedTime(\r\n    contactId: string,\r\n    latestCreatedTime?: number,\r\n) {\r\n    const activitiesMessages = useActivitiesAsMessages(contactId)\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedActivitiesMessages() {\r\n            let finalLatestCreatedTime = latestCreatedTime\r\n            if (!latestCreatedTime) {\r\n                finalLatestCreatedTime = new Date().getTime()\r\n            }\r\n\r\n            return latestCreatedTime\r\n                ? activitiesMessages.filter(\r\n                    message =>\r\n                        finalLatestCreatedTime &&\r\n                        message.timestamp &&\r\n                        message.timestamp >= finalLatestCreatedTime,\r\n                )\r\n                : []\r\n        },\r\n        [latestCreatedTime, activitiesMessages],\r\n    )\r\n}\r\n","import {useEffect, useMemo} from 'react'\r\n\r\nimport {useActivitiesState, useActivitiesStateMethods} from '@bpinc/ad-activities-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {activityToChatMessage} from '../../../../helpers'\r\n\r\n\r\nexport function useActivitiesAsMessages(contactId: string) {\r\n    const activitiesListByContactId = useActivitiesState('activitiesListByContactId')\r\n    const {getActivitiesList} = useActivitiesStateMethods()\r\n    const {userId: selfUserId} = useSessionState()\r\n    const activitiesList = activitiesListByContactId[contactId]\r\n\r\n    useEffect(function initializeActivitiesList() {\r\n        if (contactId && !activitiesList) {\r\n            getActivitiesList({id: contactId})\r\n        }\r\n    }, [activitiesList, getActivitiesList, contactId])\r\n\r\n\r\n    return useMemo(function memoizeActivitiesMessages() {\r\n        return activitiesList?.data?.flatMap(activityToChatMessage(selfUserId)) ?? []\r\n    }, [activitiesList, selfUserId])\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ChatMessage, MessageDisplayType} from '@bpinc/ad-interaction-message-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getChatParties, getInteractionStepId, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../channel-context'\r\n\r\n\r\nexport function useMessagesList(itemId: string) {\r\n    const chatActiveItem = useInteraction(itemId)\r\n    const {channelOptions} = useChannelState()\r\n    const {t} = useLocalizationState()\r\n    const chatData = useInteractionChatData(getInteractionStepId(chatActiveItem))\r\n\r\n    const masked = chatData?.masked\r\n\r\n    const messagesList = useMemo(\r\n        function memoizeList() {\r\n            return (isExternalChat(chatActiveItem) && chatData?.messages) || []\r\n        },\r\n        [chatActiveItem, chatData],\r\n    )\r\n\r\n    const addUserId = useCallback(\r\n        (message: ChatMessage) => {\r\n            const partiesList = getChatParties(chatActiveItem)\r\n            const currentParty = partiesList?.find(party => party.party_id === message.partyId)\r\n            const userId = message.userId || (currentParty && currentParty.user_id)\r\n            return {...message, userId}\r\n        },\r\n        [chatActiveItem],\r\n    )\r\n\r\n    const maskMessage = useCallback(\r\n        function maskMessageCallback(message: ChatMessage): ChatMessage {\r\n            const maskedMessage = message.msgId ? masked?.messages?.[message.msgId] : undefined\r\n            const fileIsMasked = message.fileId ? masked?.files.includes(message.fileId) : undefined\r\n\r\n            if (maskedMessage || fileIsMasked) {\r\n                const updatedMessage = {...message}\r\n\r\n                updatedMessage.maskedText = maskedMessage?.maskedText\r\n                updatedMessage.fileIsMasked = fileIsMasked\r\n\r\n                return updatedMessage\r\n            }\r\n\r\n            return message\r\n\r\n        }, [masked],\r\n    )\r\n\r\n    const localizeSystemMessage = useCallback(\r\n        (message: ChatMessage): ChatMessage => {\r\n            message.eventType = message.msg\r\n            if (message.needLocalization && message.msg) {\r\n                let args: string[] = []\r\n                const partyName = message.partyName || 'unknown party'\r\n                if (message.msg === 'external_chat_party_joined_new' || message.msg === 'external_chat_party_left_new') {\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT[message.msg](),\r\n                    }\r\n                }\r\n                // @DEPRECATED (remove after tests)\r\n                if (message.msg === 'external_chat_party_joined' || message.msg === 'external_chat_party_left') {\r\n                    args = [partyName]\r\n                }\r\n                // @DEPRECATED (remove after tests)\r\n                // special case - special message for supervisor in Coaching mode\r\n                if (message.msg === 'external_chat_party_joined_new' && message.qmMode === 'whisper') {\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT.external_chat_party_coaching(partyName),\r\n                    }\r\n                }\r\n\r\n                if (message.msg === 'message_connection_accepted') {\r\n                    if (message.channel === 'sms') {\r\n                        args = [t.GLOBAL.chat_type_sms()]\r\n                    } else {\r\n                        const selectedChannel = channelOptions.find(channel => channel.value === message.channel)\r\n\r\n                        args = selectedChannel ? [selectedChannel?.text] : []\r\n                    }\r\n                }\r\n\r\n                if (message.msg in t.EXTERNAL_CHAT) {\r\n                    const msg = message.msg as Exclude<keyof typeof t.EXTERNAL_CHAT, 'sms_messages_number'>\r\n                    return {\r\n                        ...message,\r\n                        msg: t.EXTERNAL_CHAT[msg](args[0], args[1], args[2]),\r\n                    }\r\n                }\r\n            }\r\n            return message\r\n        },\r\n        [channelOptions, t],\r\n    )\r\n\r\n    const msgHasDisplayTypes = useCallback((displayTypes: MessageDisplayType[]) => {\r\n        return function skipMsgWithDisplayTypesInner(message: ChatMessage) {\r\n            return displayTypes.some(type => type === message.displayType)\r\n        }\r\n    }, [])\r\n\r\n    return useMemo(\r\n        () => ({\r\n            messagesList,\r\n            addUserId,\r\n            localizeSystemMessage,\r\n            msgHasDisplayTypes: msgHasDisplayTypes,\r\n            maskMessage,\r\n        }),\r\n        [messagesList, addUserId, localizeSystemMessage, msgHasDisplayTypes, maskMessage],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport type {ChatMessage as ChatMessageType} from '@bpinc/ad-interaction-message-types'\r\n\r\nimport {useMessagesList} from '../../../../hooks/useMessagesList'\r\n\r\n\r\nexport function useNormalizedChatMessages(itemId: string) {\r\n    const {messagesList, addUserId, localizeSystemMessage, maskMessage} = useMessagesList(itemId)\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedMessages() {\r\n            return {\r\n                normalizedChatMessages: messagesList.reduce<ChatMessageType[]>((messages, message) => {\r\n                    const normalizedMessage = flow(addUserId, localizeSystemMessage, maskMessage)(message)\r\n\r\n                    messages.push(normalizedMessage)\r\n\r\n                    return messages\r\n                }, []),\r\n            }\r\n        },\r\n        [addUserId, localizeSystemMessage, maskMessage, messagesList],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {formatDate, useInnerHTML} from '@bpinc/lib-helpers'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport {useCallMessageVoiceTranscriptName} from './useCallMessageVoiceTranscriptName'\r\n\r\n\r\ninterface CallMessageVoiceTranscriptProps {\r\n    message: HistoryVoiceTranscriptMessage\r\n}\r\n\r\nexport const CallMessageVoiceTranscript: React.FC<CallMessageVoiceTranscriptProps> = ({\r\n    message,\r\n}) => {\r\n    const name = useCallMessageVoiceTranscriptName(message)\r\n    const sanitizedText = useChatMessageSanitizer({message: message.msg})\r\n\r\n    const messageHTML = useInnerHTML(sanitizedText)\r\n\r\n    return (\r\n        <section className=\"flex w-full gap-2.5\" data-testid=\"transcript-message\">\r\n            <div className=\"shrink-0 caption-s text-neutral-fade\" data-testid=\"transcript-message-time\">\r\n                {formatDate(message.endTimestamp, 'h:mm A')}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n                {name && (\r\n                    <div\r\n                        className=\"break-all caption-s text-neutral-fade\"\r\n                        data-testid=\"transcript-message-name\"\r\n                    >\r\n                        {name}\r\n                    </div>\r\n                )}\r\n                <div\r\n                    className=\"break-words body\"\r\n                    data-testid=\"transcript-message-text\"\r\n                    dangerouslySetInnerHTML={messageHTML}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\n\r\n\r\nexport function useCallMessageVoiceTranscriptName(\r\n    voiceTranscriptMessage: HistoryVoiceTranscriptMessage,\r\n) {\r\n    const contacts = useContactsState('contacts')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(\r\n        function memoizeName() {\r\n            if (voiceTranscriptMessage.type === 'suggestion') {\r\n                return\r\n            }\r\n\r\n            const contactData = voiceTranscriptMessage.contactId && contacts[voiceTranscriptMessage.contactId]?.data\r\n            const contactName = contactData && formatFullName(contactData.firstName, contactData.lastName)\r\n            const nonContactName = formatFullName(voiceTranscriptMessage.firstName, voiceTranscriptMessage.lastName)\r\n\r\n            return contactData ? contactName : nonContactName\r\n        },\r\n        [\r\n            contacts,\r\n            formatFullName,\r\n            voiceTranscriptMessage.contactId,\r\n            voiceTranscriptMessage.firstName,\r\n            voiceTranscriptMessage.lastName,\r\n            voiceTranscriptMessage.type,\r\n        ],\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {stopPropagation, useBoolean} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconTranscriptOptions, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useTranscriptOptions} from './hooks/useTranscriptOptions'\r\n\r\n\r\ntype Props = {\r\n    isOpenModal?: boolean\r\n    contentVoiceTranscript: JSX.Element | null\r\n}\r\n\r\nexport const TranscriptDropdown: FC<Props> = React.memo(({contentVoiceTranscript, isOpenModal = false}) => {\r\n    const {t} = useLocalizationState()\r\n    const {value: open, toggle, setFalse} = useBoolean()\r\n    const transcriptOptions = useTranscriptOptions({\r\n        isOpenModal,\r\n        contentVoiceTranscript,\r\n        handleCloseView: setFalse,\r\n    })\r\n\r\n    return (\r\n        <TriggerDropdown\r\n            modal={false}\r\n            open={open}\r\n            onClick={stopPropagation}\r\n            onFocus={stopPropagation}\r\n            onOpenChange={toggle}\r\n            className=\"rounded-xs\"\r\n            align=\"end\"\r\n            side=\"bottom\"\r\n            options={transcriptOptions.map(({renderIcon, optionName, onClick}, i) => (\r\n                <button key={i} className=\"flex items-center gap-2\" onClick={onClick}>\r\n                    {renderIcon()}\r\n                    <div className=\"min-w-[140px] caption-s text-primary-on-primary\">{optionName}</div>\r\n                </button>\r\n            ))}\r\n        >\r\n            <ButtonIcon\r\n                tooltip={\r\n                    open\r\n                        ? t.ACTIVITY_HISTORY.call_message_collapse_voice_transcript()\r\n                        : t.ACTIVITY_HISTORY.call_message_expand_voice_transcript()\r\n                }\r\n                data-testid=\"voice-transcript-button\"\r\n                className=\"rounded-xs\"\r\n\r\n            >\r\n                <IconTranscriptOptions className=\"size-4\" />\r\n            </ButtonIcon>\r\n        </TriggerDropdown>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {IconDownloadTranscript, IconViewTranscript} from '@bpinc/lib-jskit-ui'\r\nimport {useCloseGlobalSlidingModal, useOpenGlobalSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype TranscriptOptions = {\r\n    renderIcon: () => JSX.Element\r\n    onClick: () => void\r\n    optionName: string\r\n}\r\n\r\ntype UseTranscriptionOptionsType = {\r\n    isOpenModal: boolean\r\n    handleCloseView: () => void\r\n    contentVoiceTranscript: JSX.Element | null\r\n}\r\n\r\nexport const useTranscriptOptions = ({isOpenModal, contentVoiceTranscript, handleCloseView}: UseTranscriptionOptionsType): TranscriptOptions[] => {\r\n    const {t} = useLocalizationState()\r\n    const openGlobalSlidingModal = useOpenGlobalSlidingModal()\r\n    const closeGlobalSlidingModal = useCloseGlobalSlidingModal()\r\n    const iconClassName = 'icon-default size-4'\r\n\r\n    const handleOpenViewTranscript = useCallback(() => {\r\n        openGlobalSlidingModal('voiceTranscript', {contentVoiceTranscript})\r\n    }, [openGlobalSlidingModal, contentVoiceTranscript])\r\n\r\n    const handleCloseViewTranscript = useCallback(() => {\r\n        closeGlobalSlidingModal('voiceTranscript')\r\n    }, [closeGlobalSlidingModal])\r\n\r\n    const viewOption = {\r\n        optionName: isOpenModal ? t.ACTIVITY_HISTORY.close_transcript_option() : t.ACTIVITY_HISTORY.view_transcript_option(),\r\n        onClick: isOpenModal ? handleCloseViewTranscript : handleOpenViewTranscript,\r\n        renderIcon: () => <IconViewTranscript className={iconClassName} />,\r\n    }\r\n\r\n    //TODO: add func for download call transcript file\r\n    const downloadOption = {\r\n        optionName: t.ACTIVITY_HISTORY.download_transcript_option(),\r\n        onClick: handleCloseView,\r\n        renderIcon: () => <IconDownloadTranscript className={iconClassName} />,\r\n    }\r\n\r\n    return [viewOption, downloadOption]\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {CHAT_VOICE_RECORDING_PLAYER_GROUP} from '@bpinc/ad-constants'\r\nimport {IconInteractionCall, IconMissedCall16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AudioPlayer, Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useContentVoiceTranscript} from './hooks/useContentVoiceTranscript'\r\nimport type {CallMessageProps} from './CallMessageContent'\r\nimport {TranscriptDropdown} from './TranscriptDropdown'\r\n\r\n\r\ntype Props = CallMessageProps & {\r\n    isOpenModal?: boolean\r\n    hasVoiceTranscript?: boolean\r\n    title: string\r\n    createdTime?: string\r\n    ariaLabel?: string\r\n    recordingLink: string\r\n    containerClassName?: string\r\n    audioPlayerClassName?: string\r\n}\r\n\r\nexport const CallMessageRecording: FC<Props> = React.memo(props => {\r\n    const {\r\n        isOpenModal,\r\n        hasVoiceTranscript,\r\n        isMissedCall,\r\n        duration,\r\n        title,\r\n        recordingLink,\r\n        sentiment,\r\n        createdTime,\r\n        ariaLabel,\r\n        containerClassName,\r\n        audioPlayerClassName,\r\n    } = props\r\n    const {t} = useLocalizationState()\r\n    const contentVoiceTranscript = useContentVoiceTranscript(props)\r\n\r\n    const renderTranscriptDropdown = useCallback(() => {\r\n        return (\r\n            <>\r\n                {hasVoiceTranscript && <TranscriptDropdown isOpenModal={isOpenModal} contentVoiceTranscript={contentVoiceTranscript} /> }\r\n            </>\r\n        )\r\n    }, [contentVoiceTranscript, hasVoiceTranscript, isOpenModal])\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col gap-1', containerClassName)} data-testid=\"call-content\" data-missed={isMissedCall}>\r\n            <div className=\"flex items-center justify-between gap-2\" aria-label={ariaLabel}>\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"flex items-center gap-1\">\r\n                        {isMissedCall\r\n                            ? <IconMissedCall16 className=\"size-4\" aria-hidden />\r\n                            : <IconInteractionCall className=\"size-4 icon-default\" aria-hidden />\r\n                        }\r\n                        <span\r\n                            className=\"caption-s text-primary-on-primary\"\r\n                            aria-hidden\r\n                            data-testid=\"call-title\"\r\n                        >\r\n                            {title}\r\n                        </span>\r\n                    </div>\r\n                    {!!duration && (\r\n                        <span>\r\n                            <span className=\"aria-description\">{t.ACTIVITY_HISTORY.call_message_duration_aria()}</span>\r\n                            <div className=\"flex items-center gap-2 caption-s text-neutral-fade\">\r\n                                <span aria-hidden className=\"flex size-0.5 items-center rounded-full bg-neutral-500\" />\r\n                                <span data-testid=\"call-duration\">{duration}</span>\r\n                            </div>\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                    {sentiment && <Sentiment sentiment={sentiment} className=\"mr-1 w-5\" />}\r\n                    <span>\r\n                        <span className=\"aria-description\">\r\n                            {t.ACTIVITY_HISTORY.call_message_created_time_aria()}\r\n                        </span>\r\n                        <span data-testid=\"call-start-time\" className=\"caption-s text-neutral-fade\">{createdTime}</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex select-none flex-nowrap\">\r\n                <AudioPlayer\r\n                    isNewAudioPlayerUI\r\n                    src={recordingLink}\r\n                    skipUnmount\r\n                    playerGroupTag={CHAT_VOICE_RECORDING_PLAYER_GROUP}\r\n                    pauseGroupWhenPlaying\r\n                    renderOptionalNode={renderTranscriptDropdown}\r\n                    className={audioPlayerClassName}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {getMessageId} from '../../../../../../helpers'\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../../types'\r\nimport type {CallMessageProps} from '../CallMessageContent'\r\nimport {CallMessageRecording} from '../CallMessageRecording'\r\nimport {CallMessageVoiceTranscript} from '../CallMessageVoiceTranscript'\r\n\r\n\r\n type Props = CallMessageProps & {\r\n     title: string\r\n     createdTime?: string\r\n     ariaLabel?: string\r\n }\r\nexport const useContentVoiceTranscript = (props: Props) => {\r\n    const {\r\n        direction,\r\n        duration,\r\n        timestamp,\r\n        hasVoiceRecording,\r\n        recordingLink,\r\n        isMissedCall,\r\n        voiceTranscript,\r\n        createdTime,\r\n        ariaLabel,\r\n        title,\r\n    } = props\r\n\r\n    return useMemo(() => {\r\n        return (\r\n            <div>\r\n                {recordingLink && (\r\n                    <CallMessageRecording\r\n                        isOpenModal\r\n                        audioPlayerClassName=\"bg-transparent shadow-none\"\r\n                        containerClassName=\"bg-primary-container-variant1 rounded-xs px-3 py-2\"\r\n                        hasVoiceRecording={hasVoiceRecording}\r\n                        recordingLink={recordingLink}\r\n                        voiceTranscript={voiceTranscript}\r\n                        timestamp={timestamp}\r\n                        duration={duration}\r\n                        isMissedCall={isMissedCall}\r\n                        title={title}\r\n                        createdTime={createdTime}\r\n                        hasVoiceTranscript={!!voiceTranscript?.length}\r\n                        ariaLabel={ariaLabel}\r\n                        direction={direction}\r\n                    />\r\n                )}\r\n                <div className=\"scrollbar-general mt-4 flex select-none flex-col gap-4 overflow-y-auto\" data-testid=\"voice-transcript-messages\">\r\n                    {voiceTranscript && voiceTranscript.map((message: HistoryVoiceTranscriptMessage) => (\r\n                        <CallMessageVoiceTranscript message={message} key={getMessageId(message)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }, [ariaLabel, createdTime, direction, duration, hasVoiceRecording, isMissedCall, recordingLink, timestamp, title, voiceTranscript])\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {IconInteractionCall, IconMissedCall16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {CallMessageProps} from './CallMessageContent'\r\n\r\n\r\ntype Props = CallMessageProps & {\r\n    hasVoiceTranscript?: boolean\r\n    title: string\r\n    createdTime?: string\r\n    ariaLabel?: string\r\n}\r\n\r\nexport const EmptyCallMessage: FC<Props> = React.memo(({\r\n    isMissedCall,\r\n    duration,\r\n    title,\r\n    sentiment,\r\n    ariaLabel,\r\n    createdTime,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between gap-4\" aria-label={ariaLabel}>\r\n            <div className=\"flex items-center gap-1\">\r\n                {isMissedCall\r\n                    ? <IconMissedCall16 className=\"size-4\" aria-hidden />\r\n                    : <IconInteractionCall className=\"size-4 icon-default\" aria-hidden />\r\n                }\r\n                <div\r\n                    className={tcn('flex items-center gap-1 caption-s text-neutral-on-secondary', {\r\n                        'text-on-error': isMissedCall,\r\n                    })}\r\n                >\r\n                    <span\r\n                        aria-hidden\r\n                        data-testid=\"call-title\"\r\n                    >\r\n                        {title}\r\n                    </span>\r\n                    {!!duration && (<span data-testid=\"call-duration\">{`(${duration})`}</span>)}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-1\">\r\n                {sentiment && <Sentiment sentiment={sentiment} className=\"mr-1 w-5\" />}\r\n                <span className=\"flex items-center\">\r\n                    <span className=\"aria-description\">\r\n                        {t.ACTIVITY_HISTORY.call_message_created_time_aria()}\r\n                    </span>\r\n                    <span data-testid=\"call-start-time\" className=\"caption-s text-neutral-fade\">{createdTime}</span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport type {ExternalChatMessageSentiment} from '@bpinc/ad-transport-types'\r\nimport {formatDate} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {HistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport {CallMessageRecording} from './CallMessageRecording'\r\nimport {EmptyCallMessage} from './EmptyCallMessage'\r\n\r\n\r\nexport interface CallMessageProps {\r\n    direction?: string\r\n    duration?: string\r\n    timestamp?: number\r\n    sentiment?: ExternalChatMessageSentiment\r\n    hasVoiceRecording?: boolean\r\n    recordingLink?: string\r\n    isMissedCall: boolean\r\n    voiceTranscript?: HistoryVoiceTranscriptMessage[]\r\n}\r\n\r\nexport const CallMessageContent: React.FC<CallMessageProps> = ({\r\n    direction,\r\n    duration,\r\n    timestamp,\r\n    hasVoiceRecording,\r\n    recordingLink,\r\n    isMissedCall,\r\n    voiceTranscript,\r\n    ...props\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const hasVoiceTranscript = !!voiceTranscript?.length\r\n    const createdTime = formatDate(timestamp, 'LT')\r\n\r\n    const ariaDirection =\r\n        direction === 'incoming'\r\n            ? t.ACTIVITY_HISTORY.call_message_incoming_aria_label()\r\n            : t.ACTIVITY_HISTORY.call_message_outgoing_aria_label()\r\n\r\n    const ariaLabel = [\r\n        ariaDirection,\r\n        t.ACTIVITY_HISTORY.call_message_created_time_aria() + createdTime,\r\n        t.ACTIVITY_HISTORY.call_message_duration_aria() + duration,\r\n    ].join('; ')\r\n\r\n    const title = isMissedCall\r\n        ? t.ACTIVITY_HISTORY.call_message_missed()\r\n        : direction === 'incoming'\r\n            ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n            : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n    if (!hasVoiceRecording || !recordingLink) {\r\n        return (\r\n            <EmptyCallMessage\r\n                timestamp={timestamp}\r\n                duration={duration}\r\n                isMissedCall={isMissedCall}\r\n                title={title}\r\n                createdTime={createdTime}\r\n                ariaLabel={ariaLabel}\r\n                direction={direction}\r\n                {...props}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <CallMessageRecording\r\n            hasVoiceRecording={hasVoiceRecording}\r\n            recordingLink={recordingLink}\r\n            voiceTranscript={voiceTranscript}\r\n            timestamp={timestamp}\r\n            duration={duration}\r\n            isMissedCall={isMissedCall}\r\n            title={title}\r\n            createdTime={createdTime}\r\n            hasVoiceTranscript={hasVoiceTranscript}\r\n            ariaLabel={ariaLabel}\r\n            direction={direction}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\n\r\n\r\ntype EmailMessageProps = {\r\n    caseId: string\r\n    caseNumber: string\r\n    caseTitle: string\r\n}\r\n\r\nexport const EmailMessage: React.FC<EmailMessageProps> = ({caseId, caseNumber, caseTitle}) => {\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const handleClick = useCallback(function handleClickCallback(evt: MouseEvent) {\r\n        evt.preventDefault()\r\n\r\n        setActivePage({\r\n            name: AppRoutes.Cases,\r\n            params: {\r\n                id: caseId,\r\n            },\r\n        })\r\n    }, [setActivePage, caseId])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SmIcon name=\"envelope\" color=\"grey\" />\r\n            </div>\r\n            <div>\r\n                <a href=\"#\" onClick={handleClick}>\r\n                    {`#${caseNumber}`}\r\n                </a>\r\n                {' '}\r\n                <span>\r\n                    {caseTitle}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"remoteAssistMessage\":\"communicator_RemoteAssistMessage_remoteAssistMessage_GuCjK\",\"remoteAssistMessageHeader\":\"communicator_RemoteAssistMessage_remoteAssistMessageHeader_1NdA1\",\"remoteAssistMessageIcon\":\"communicator_RemoteAssistMessage_remoteAssistMessageIcon_wYT2a\",\"remoteAssistMessageContent\":\"communicator_RemoteAssistMessage_remoteAssistMessageContent_BkraK\",\"remoteAssistContentRow\":\"communicator_RemoteAssistMessage_remoteAssistContentRow_gezxx\"};","import React from 'react'\r\n\r\nimport {getMomentUTC} from '@bpinc/lib-helpers'\r\nimport {IconRemoteAssistSession} from '@bpinc/lib-icons'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from './RemoteAssistMessage.module.less'\r\n\r\n\r\ntype RemoteAssistMessageProps = {\r\n    duration: number\r\n    privateIp?: string\r\n    publicIp?: string\r\n    osVersion?: string\r\n}\r\n\r\nexport const RemoteAssistMessage: React.FC<RemoteAssistMessageProps> = props => {\r\n    const {duration, privateIp, publicIp, osVersion} = props\r\n    const {t} = useLocalizationState()\r\n\r\n    const durationValue = getMomentUTC(duration * 1000, 'm:s')\r\n    const privateIpValue = privateIp || t.ACTIVITY_HISTORY.remote_assist_empty_private_ip_display_value()\r\n    const publicIpValue = publicIp || t.ACTIVITY_HISTORY.remote_assist_empty_public_ip_display_value()\r\n    const osVersionValue = osVersion || t.ACTIVITY_HISTORY.remote_assist_empty_os_version_display_value()\r\n\r\n    return (\r\n        <div className={styles.remoteAssistMessage}>\r\n            <div className={styles.remoteAssistMessageHeader}>\r\n                <IconRemoteAssistSession\r\n                    className={styles.remoteAssistMessageIcon}\r\n                    aria-hidden\r\n                />\r\n                <span>{t.ACTIVITY_HISTORY.remote_assist_title()}</span>\r\n            </div>\r\n            <div className={styles.remoteAssistMessageContent}>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_duration_label()}</span>\r\n                    <span>{durationValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_os_version_label()}</span>\r\n                    <span>{osVersionValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_private_ip_label()}</span>\r\n                    <span>{privateIpValue}</span>\r\n                </div>\r\n                <div className={styles.remoteAssistContentRow}>\r\n                    <span>{t.ACTIVITY_HISTORY.remote_assist_public_ip_label()}</span>\r\n                    <span>{publicIpValue}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {omit, pickBy} from 'lodash-es'\r\n\r\nimport type {PartyType} from '@bpinc/ad-activities-state-types'\r\nimport type {\r\n    ActivityHistoryItem,\r\n    Email,\r\n    FileMessage,\r\n    RemoteAssistSession,\r\n    TextMessageEvent,\r\n    TextMessageFromContact,\r\n    TextMessageType,\r\n    VoiceCallFromContact,\r\n    VoiceTranscriptItem,\r\n} from '@bpinc/ad-contacts-state-types'\r\nimport {\r\n    isCall,\r\n    isEmail,\r\n    isFile,\r\n    isMessage,\r\n    isRemoteAssistSession,\r\n    isTranscriptMessage,\r\n} from '@bpinc/ad-contacts-state-types'\r\nimport {formatCallDuration, getSentimentFrom} from '@bpinc/ad-formatting-helpers'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {\r\n    HistoryCallMessage,\r\n    HistoryChatMessage,\r\n    HistoryEmailMessage,\r\n    HistoryFileMessage,\r\n    HistoryMessage,\r\n    HistoryRemoteAssistMessage,\r\n    HistoryVoiceTranscriptMessage,\r\n} from '../../../../types'\r\nimport {CallMessageContent} from './CallMessageContent'\r\nimport {EmailMessage} from './EmailMessage'\r\nimport {RemoteAssistMessage} from './RemoteAssistMessage'\r\n\r\n\r\nconst fulfillMessages = (messages: PartyType[] = []): PartyType[] => {\r\n    const parties: Record<string, Partial<PartyType>> = {}\r\n    const notUndefined = (v: unknown) => v !== undefined\r\n\r\n    messages.forEach(m => {\r\n        const id = m.partyId\r\n        const partyData: Partial<PartyType> = {\r\n            partyId: id,\r\n            contactId: m.contactId,\r\n            firstName: m.firstName,\r\n            lastName: m.lastName,\r\n            phone: m.phone,\r\n            userId: m.userId,\r\n        }\r\n        parties[id] = {\r\n            ...parties[id],\r\n            ...pickBy(partyData, notUndefined),\r\n        }\r\n    })\r\n\r\n    return messages\r\n        .filter(({event}) => !['party_changed', 'party_navigation'].includes(event ?? ''))\r\n        .map(m => ({...m, ...parties[m.partyId]}))\r\n}\r\n\r\n\r\ninterface ReducerParams {\r\n    selfUserId: string | undefined\r\n}\r\n\r\nexport function activityHistoryToHistoryMessageReducer({\r\n    selfUserId,\r\n}: ReducerParams) {\r\n    return function historyMessagesReducer(messages: HistoryMessage[], message: ActivityHistoryItem): HistoryMessage[] {\r\n        const isSelf = message.userId === selfUserId\r\n\r\n        if (isCall(message)) {\r\n            messages.push(getHistoryCallMessage(message, selfUserId))\r\n        }\r\n\r\n        if (isMessage(message)) {\r\n            messages.push(getHistoryChatMessage(message, isSelf))\r\n        }\r\n\r\n        if (isFile(message)) {\r\n            messages.push(getHistoryFileMessage(message, isSelf))\r\n        }\r\n\r\n        if (isEmail(message)) {\r\n            messages.push(getHistoryEmailMessage(message, isSelf))\r\n        }\r\n\r\n        if (isRemoteAssistSession(message)) {\r\n            messages.push(getHistoryRemoteAssistMessage(message, selfUserId))\r\n        }\r\n\r\n        return messages\r\n    }\r\n}\r\n\r\nexport function mapActivityToActivityHistoryItems(data?: PartyType[]): ActivityHistoryItem[] | undefined {\r\n    if (!data) {\r\n        return undefined\r\n    }\r\n    return fulfillMessages(data).reduce<ActivityHistoryItem[]>((messages, activityItem) => {\r\n        if (activityItem.type && activityItem.event) {\r\n            messages.push({\r\n                ...activityItem,\r\n                mediaType: 'CHAT',\r\n                nickName: '',\r\n                createdTime: activityItem.timestamp,\r\n                phone: activityItem.phone ?? '',\r\n                type: activityItem.type as TextMessageType,\r\n                event: activityItem.event as TextMessageEvent,\r\n                msg: activityItem.msg ?? '',\r\n                channel: activityItem.channel as ExternalChatChannelType | undefined,\r\n                firstName: activityItem.firstName ?? '',\r\n                lastName: activityItem.lastName ?? '',\r\n            })\r\n        }\r\n        return messages\r\n    }, [])\r\n}\r\n\r\nfunction getHistoryCallMessage(call: VoiceCallFromContact, selfUserId?: string): HistoryCallMessage {\r\n    const direction = call.direction === 'INBOUND' ? 'incoming' : 'outgoing'\r\n    const duration = formatCallDuration(call.counterpartDuration)\r\n\r\n    const selfUser = call.users?.find(user => user.userId === selfUserId)\r\n    const isSelf = selfUser && call.users && call.users.length === 1\r\n    const wasMissedByParty = !!selfUser?.partyFailureCause && selfUser?.partyFailureCause !== 'OTHER'\r\n\r\n    // call can not be missed if there were no self party (that is, other agent's calls are never shown as missed)\r\n    const isMissedCall = !!selfUser && (call.duration === 0 || wasMissedByParty) && call.direction === 'INBOUND'\r\n\r\n    const voiceTranscript = call.transcript?.reduce<HistoryVoiceTranscriptMessage[]>((total, msg) => {\r\n        if (isTranscriptMessage(msg)) {\r\n            total.push(getHistoryVoiceTranscriptMessage(msg, selfUserId))\r\n        }\r\n        return total\r\n    }, [])\r\n\r\n    return {\r\n        direction,\r\n        users: call.users,\r\n        timestamp: call.createdTime,\r\n        mediaType: 'VOICE',\r\n        globalInteractionId: call.globalInteractionId,\r\n        msg: (\r\n            <CallMessageContent\r\n                direction={direction}\r\n                timestamp={call.createdTime}\r\n                sentiment={call.sentiment}\r\n                duration={duration}\r\n                isMissedCall={isMissedCall}\r\n                hasVoiceRecording={call.hasVoiceRecording}\r\n                recordingLink={call.recordingLink}\r\n                voiceTranscript={voiceTranscript}\r\n            />\r\n        ),\r\n        msgId: `${call.createdTime}`,\r\n        isSelf,\r\n        isMissedCall,\r\n        hasVoiceRecording: call.hasVoiceRecording,\r\n        duration,\r\n        firstName: undefined,\r\n        lastName: undefined,\r\n    }\r\n}\r\n\r\nfunction getHistoryChatMessage(msg: TextMessageFromContact, isSelf?: boolean): HistoryChatMessage {\r\n    return {\r\n        mediaType: 'CHAT',\r\n        msg: msg.msg,\r\n        msgId: msg.msgId || String(msg.timestamp),\r\n        timestamp: msg.timestamp,\r\n        userId: msg.userId,\r\n        contactId: msg.contactId,\r\n        direction: msg.type === 'external' ? 'incoming' : 'outgoing',\r\n        isSelf,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n        channel: msg.channel,\r\n        displayType: msg.type === 'scenario' ? 'scenario' : 'message',\r\n    }\r\n}\r\n\r\nfunction getHistoryEmailMessage(msg: Email, isSelf?: boolean): HistoryEmailMessage {\r\n    const direction = msg.direction === 'INBOUND' ? 'incoming' : 'outgoing'\r\n\r\n    return {\r\n        msgId: msg.caseId,\r\n        direction,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        timestamp: msg.createdTime,\r\n        mediaType: 'EMAIL',\r\n        isSelf,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n        msg: <EmailMessage caseId={msg.caseId} caseNumber={msg.caseNumber} caseTitle={msg.caseTitle} />,\r\n    }\r\n}\r\n\r\nfunction getHistoryRemoteAssistMessage(msg: RemoteAssistSession, selfUserId?: string): HistoryRemoteAssistMessage {\r\n    const selfAgent = msg.users?.find(user => !!selfUserId && user.userId === selfUserId)\r\n    const lastAgent = msg.users?.toSorted((user1, user2) => user2.startTime - user1.startTime)?.[0]\r\n    const agent = selfAgent || lastAgent\r\n\r\n    return {\r\n        mediaType: 'REMOTE_ASSIST',\r\n        direction: 'outgoing',\r\n        msgId: `${msg.createdTime}`,\r\n        globalInteractionId: msg.globalInteractionId,\r\n        timestamp: msg.createdTime,\r\n        isSelf: !!selfUserId && agent?.userId === selfUserId,\r\n        firstName: agent?.firstName,\r\n        lastName: agent?.lastName,\r\n        userId: agent?.userId,\r\n        msg: (\r\n            <RemoteAssistMessage\r\n                duration={msg.counterpartDuration}\r\n                privateIp={msg.privateIp}\r\n                publicIp={msg.publicIp}\r\n                osVersion={msg.osVersion}\r\n            />\r\n        ),\r\n    }\r\n}\r\n\r\nfunction getHistoryFileMessage(msg: FileMessage, isSelf?: boolean): HistoryFileMessage {\r\n    return {\r\n        globalInteractionId: msg.globalInteractionId,\r\n        direction: msg.userId ? 'outgoing' : 'incoming',\r\n        msgId: msg.fileId || uuid(),\r\n        displayType: 'file',\r\n        fileId: msg.fileId,\r\n        fileType: msg.fileType,\r\n        fileName: msg.fileName,\r\n        timestamp: msg && msg.timestamp ? Number(msg.timestamp) : Date.now(),\r\n        mediaType: 'CHAT',\r\n        isSelf,\r\n        msg: msg.text,\r\n        refMsgId: msg.refMsgId,\r\n        firstName: msg.firstName,\r\n        lastName: msg.lastName,\r\n    }\r\n}\r\n\r\nfunction getHistoryVoiceTranscriptMessage(\r\n    msg: VoiceTranscriptItem,\r\n    selfUserId?: string,\r\n): HistoryVoiceTranscriptMessage {\r\n    const isSelf = msg?.userId === selfUserId\r\n\r\n    return {\r\n        ...omit(getHistoryChatMessage(msg as unknown as TextMessageFromContact, isSelf), 'channel'),\r\n        confidence: msg.confidence,\r\n        endTimestamp: msg.endTimestamp,\r\n        mediaType: 'VOICE_TRANSCRIPT',\r\n        sentiment: msg.sentimentScore !== undefined ? getSentimentFrom(msg.sentimentScore) : undefined,\r\n        type: undefined,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useActivitiesState} from '@bpinc/ad-activities-state-context'\r\nimport type {PartyType} from '@bpinc/ad-activities-state-types'\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {activityHistoryToHistoryMessageReducer, mapActivityToActivityHistoryItems} from './helpers'\r\n\r\n\r\nexport function useNormalizedHistoryMessages(\r\n    contactId: string,\r\n    itemId: string,\r\n) {\r\n    const activityHistory = useContactsState('activityHistory')\r\n\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    const activities = useActivitiesState('activities')\r\n\r\n    const previousActivity = useInteractionProp(itemId, i => i?.previousActivity)\r\n    const previousActivityData = previousActivity ? activities[previousActivity.globalInteractionId] : undefined\r\n\r\n    return useMemo(\r\n        function memoizeNormalizedHistoryMessages() {\r\n            const activityHistoryItem = contactId ? activityHistory[contactId] : undefined\r\n\r\n            const activityHistoryMessages = activityHistoryItem?.messages\r\n            const previousActivityMessages = mapActivityToActivityHistoryItems(\r\n                previousActivityData?.data?.reduce<PartyType[]>((all, next) => {\r\n                    all.push(...next.messages)\r\n                    return all\r\n                }, []),\r\n            )\r\n            const messages = activityHistoryMessages || previousActivityMessages || []\r\n\r\n            return messages.reduce(activityHistoryToHistoryMessageReducer({selfUserId}), [])\r\n        },\r\n        [contactId, activityHistory, previousActivityData?.data, selfUserId],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {orderBy} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getExternalChatMessageDisplayType} from '../../../../helpers'\r\nimport {useKeyDatesInserter} from '../../../../hooks/useKeyDatesInserter'\r\nimport type {ExternalChatMessage, ExternalChatMessageWithDate} from '../../../../types'\r\nimport {\r\n    isCallOrVoiceTranscript,\r\n    isExternalChatMessageDate,\r\n    isHistoryMessage,\r\n    isVoiceTranscriptMessage,\r\n    isVoiceTranscriptSuggestion,\r\n} from '../../../../types'\r\nimport {useActivitiesMessagesTillCreatedTime} from './useActivitiesMessagesTillCreatedTime'\r\nimport {useNormalizedChatMessages} from './useNormalizedChatMessages'\r\nimport {useNormalizedHistoryMessages} from './useNormalizedHistoryMessages'\r\n\r\n\r\nconst defaultBotSuggestions: VoiceTranscriptSuggestion[] = []\r\n\r\nexport function useNormalizedMessagesWithDates(\r\n    type: ChatType,\r\n    contactId: string,\r\n    itemId: string,\r\n    botSuggestions: VoiceTranscriptSuggestion[] = defaultBotSuggestions,\r\n) {\r\n    const typeToMediaFilter = {\r\n        messages: 'chat',\r\n        calls: 'voice',\r\n        all: 'all',\r\n        transcript: 'all', //useNormalizedMessagesWithDates isn't called for transcript tab\r\n    } as const\r\n\r\n    const insertKeyDates = useKeyDatesInserter()\r\n    const normalizedHistoryMessages = useNormalizedHistoryMessages(contactId, itemId)\r\n    const {normalizedChatMessages} = useNormalizedChatMessages(itemId)\r\n    const activityHistory = useContactsState('activityHistory')\r\n    const latestCreatedTime = activityHistory[contactId]?.activityCreatedTimeByMedia?.[typeToMediaFilter[type]]\r\n\r\n    const activitiesMessages = useActivitiesMessagesTillCreatedTime(contactId, latestCreatedTime)\r\n\r\n    return useMemo(\r\n        function memoizeMessagesWithDates() {\r\n            const allMessages = orderBy(\r\n                [...normalizedHistoryMessages, ...botSuggestions, ...activitiesMessages, ...normalizedChatMessages],\r\n                'timestamp',\r\n            )\r\n\r\n            const filteredByTypeMessages = filterMessagesByTypeAndStartTime(allMessages, type, latestCreatedTime)\r\n\r\n            return {\r\n                messagesWithDates: insertKeyDates(filteredByTypeMessages, getTimestamp, additionalConditions),\r\n            }\r\n        },\r\n        [\r\n            botSuggestions,\r\n            normalizedHistoryMessages,\r\n            activitiesMessages,\r\n            normalizedChatMessages,\r\n            type,\r\n            latestCreatedTime,\r\n            insertKeyDates,\r\n        ],\r\n    )\r\n}\r\n\r\nfunction filterMessagesByTypeAndStartTime<T extends Exclude<ExternalChatMessage | VoiceTranscriptSuggestion, string>[]>(\r\n    messages: T,\r\n    type: ChatType,\r\n    latestCreatedTime: number | undefined,\r\n) {\r\n    return messages.reduce(filterReducer(type, latestCreatedTime), [])\r\n}\r\n\r\nfunction getTimestamp<T extends {timestamp: number}>(message: T): number {\r\n    return message.timestamp\r\n}\r\n\r\nfunction isChatMessage(value: {timestamp: number}): value is ChatMessage {\r\n    return 'displayName' in value && 'itemId' in value && 'partyId' in value\r\n}\r\n\r\nfunction additionalConditions<T extends {timestamp: number}>(message: T): boolean {\r\n    return isChatMessage(message) ? message.displayType !== 'navigation' : true\r\n}\r\n\r\nfunction filterReducer<T extends ExternalChatMessage | VoiceTranscriptSuggestion>(\r\n    type: ChatType, latestCreatedTime: number | undefined,\r\n) {\r\n    function allowMessage(messages: T[], message: T, predicate?: (msg: T) => boolean) {\r\n        if (\r\n            (!latestCreatedTime || latestCreatedTime <= message.timestamp) &&\r\n            (isVoiceTranscriptSuggestion(message) || !predicate || predicate(message))\r\n        ) {\r\n            messages.push(message)\r\n        }\r\n\r\n        return messages\r\n    }\r\n\r\n    function cleanKeyDates<N extends ExternalChatMessageWithDate | VoiceTranscriptSuggestion>(messages: N[], message: N) {\r\n        const lastIndex = messages.length - 1\r\n        if (isExternalChatMessageDate(messages[lastIndex])) {\r\n            messages.splice(lastIndex, 1, message)\r\n        } else {\r\n            messages.push(message)\r\n        }\r\n\r\n        return messages\r\n    }\r\n\r\n    return function checkByTypeReducer(messages: T[], message: T) {\r\n        if (isExternalChatMessageDate(message)) {\r\n            return cleanKeyDates(messages, message)\r\n        }\r\n        if (type === 'messages') {\r\n            return allowMessage(messages, message, isMessage)\r\n        }\r\n        if (type === 'calls') {\r\n            return allowMessage(messages, message, isCallOrVoiceTranscript)\r\n        }\r\n\r\n        return allowMessage(messages, message)\r\n    }\r\n}\r\n\r\n//**Private Functions***************************************\r\n\r\nfunction isMessage(message: ExternalChatMessageWithDate | VoiceTranscriptSuggestion): boolean {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        return false\r\n    }\r\n\r\n    if (isExternalChatMessageDate(message)) {\r\n        return true\r\n    }\r\n\r\n\r\n    const mediaType = isHistoryMessage(message) ? message.mediaType : undefined\r\n    if (mediaType === 'VOICE_TRANSCRIPT') {\r\n        return false\r\n    }\r\n\r\n    const displayType = getExternalChatMessageDisplayType(message)\r\n    return (\r\n        displayType === 'message' ||\r\n        displayType === 'file' ||\r\n        displayType === 'system' ||\r\n        mediaType === 'CHAT'\r\n    )\r\n}\r\n\r\n","import {useCallback, useRef} from 'react'\r\n\r\nimport {useActivityHistoryByContactId} from '@bpinc/ad-contacts-state-context'\r\nimport {chatTypeToMedia} from '@bpinc/ad-formatting-helpers'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\n\r\nconst MAX_ERRORS_NUMBER_IN_A_ROW = 5\r\n\r\nexport function useMessagesLoader(\r\n    itemId: string,\r\n    contactId: string,\r\n    type: ChatType,\r\n) {\r\n    const fetchMore = useFetchMoreExternalMessages(itemId, contactId, type)\r\n    const hasActiveRequest = useRef(false)\r\n    const errorsCountRef = useRef(0)\r\n\r\n    return useCallback(() => {\r\n        const fetchData = () => {\r\n            if (\r\n                hasActiveRequest.current ||\r\n                errorsCountRef.current > MAX_ERRORS_NUMBER_IN_A_ROW\r\n            ) {\r\n                return Promise.resolve(false)\r\n            }\r\n            hasActiveRequest.current = true\r\n\r\n            return fetchMore()\r\n                .then(r => {\r\n                    errorsCountRef.current = 0\r\n                    hasActiveRequest.current = false\r\n                    return r\r\n                }).catch(err => {\r\n                    errorsCountRef.current += 1\r\n                    hasActiveRequest.current = false\r\n                    console.error(err || 'Error while trying load messages again until scroll')\r\n                    fetchData()\r\n                })\r\n        }\r\n\r\n        fetchData()\r\n    }, [fetchMore])\r\n}\r\n\r\nfunction useFetchMoreExternalMessages(itemId: string, contactId: string, type: ChatType) {\r\n    const contactActivityHistoryRef = useAsRef(useActivityHistoryByContactId(contactId))\r\n    const getMessagesRef = useAsRef(useContactActivityHistory().getMessages)\r\n\r\n    return useCallback(\r\n        function fetchMoreExternalMessages() {\r\n            const {isLoading, reachedLimitByMedia} = contactActivityHistoryRef.current || {}\r\n            if (isLoading || type === 'transcript' || reachedLimitByMedia?.[chatTypeToMedia[type]] || !contactId) {\r\n                return Promise.resolve(false)\r\n            }\r\n\r\n            return getMessagesRef.current({contactId, type})\r\n                .then(() => true)\r\n                .catch(err => console.error(err || 'Error while trying loadMessages when top is reached'))\r\n        },\r\n        [contactActivityHistoryRef, contactId, getMessagesRef, type],\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"noMessages\":\"communicator_NoMessages_noMessages_UX4AP\",\"noRecent\":\"communicator_NoMessages_noRecent_7ixir\",\"searchForOlder\":\"communicator_NoMessages_searchForOlder_QGkjJ\"};","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useExternalActivityHistoryLoaded} from './useExternalActivityHistoryLoaded'\r\n\r\nimport styles from './NoMessages.module.less'\r\n\r\n\r\ninterface NoMessagesProps {\r\n    type: ChatType\r\n    contactId: string\r\n}\r\n\r\nexport const NoMessages = ({type, contactId}: NoMessagesProps) => {\r\n    const {isLoading: activityHistoryIsLoading, getMessages} = useContactActivityHistory()\r\n    const {t} = useLocalizationState()\r\n\r\n    const allActivityHistoryLoaded = useExternalActivityHistoryLoaded(contactId)\r\n\r\n    const searchForOlder = useCallback(\r\n        function searchForOlderCallback() {\r\n            getMessages({type, contactId})\r\n        },\r\n        [contactId, getMessages, type],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {!activityHistoryIsLoading && allActivityHistoryLoaded ? (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_found(type)}</p>\r\n                </div>\r\n            ) : (\r\n                <div className={styles.noMessages}>\r\n                    <p className={styles.noRecent}>{t.INTERNAL_CHAT.chat_history_no_recent_while_loading(type)}</p>\r\n                    <Button className={styles.searchForOlder} onClick={searchForOlder}>\r\n                        {t.INTERNAL_CHAT.chat_history_search_for_older(type)}\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\n\r\n\r\nexport function useExternalActivityHistoryLoaded(contactId: string) {\r\n    const activityHistory = useContactsState('activityHistory')\r\n\r\n    return useMemo(\r\n        () => get(activityHistory[contactId], 'reachedLimit', true),\r\n        [activityHistory, contactId],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\n\r\nimport {NoMessages} from './NoMessages'\r\n\r\n\r\ntype NoMessagesPlaceholderProps = {\r\n    contactId: string\r\n    type: ChatType\r\n}\r\n\r\nexport const NoMessagesPlaceholder: React.FC<NoMessagesPlaceholderProps> = ({contactId, type}) => {\r\n\r\n    if (type !== 'messages' && type !== 'calls') {\r\n        return null\r\n    }\r\n\r\n    return <NoMessages type={type} contactId={contactId} />\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageWrapper\":\"communicator_Chat_messageWrapper_drgLf\",\"messageTopInfo\":\"communicator_Chat_messageTopInfo_VoA3v\",\"incoming\":\"communicator_Chat_incoming_6DHeo\",\"messageBlock\":\"communicator_Chat_messageBlock_i7M0B\",\"outgoing\":\"communicator_Chat_outgoing_JD3jd\",\"avatar\":\"communicator_Chat_avatar_mUd4N\",\"placementTop\":\"communicator_Chat_placementTop_Awuqp\",\"remoteAssistMessageAvatar\":\"communicator_Chat_remoteAssistMessageAvatar_FEd8Z\",\"message\":\"communicator_Chat_message_x5tfb\",\"urgent\":\"communicator_Chat_urgent_KfI8l\",\"messageContent\":\"communicator_Chat_messageContent_nw7Cp\",\"messageContentHtml\":\"communicator_Chat_messageContentHtml_AuPlx\",\"voice\":\"communicator_Chat_voice_GZnDG\",\"voiceRecording\":\"communicator_Chat_voiceRecording_crXBM\",\"emi\":\"communicator_Chat_emi_LuUC3\",\"errorMessageContent\":\"communicator_Chat_errorMessageContent_4XIXs\",\"messageTopInfoGap\":\"communicator_Chat_messageTopInfoGap_jZaVp\",\"transcriptSuggestionAvatar\":\"communicator_Chat_transcriptSuggestionAvatar_FScZp\",\"timeChannel\":\"communicator_Chat_timeChannel_N1P8J\",\"channelIcon\":\"communicator_Chat_channelIcon_nzkb9\",\"selectionPopupOption\":\"communicator_Chat_selectionPopupOption_UTtPT\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useGetUserPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface ExternalMessageAvatar {\r\n    userId?: string\r\n    displayName?: string\r\n    isSelf?: boolean\r\n    isScenarioAvatar?: boolean\r\n    showUserAvatar?: boolean\r\n    className?: string\r\n    isConference?: boolean\r\n}\r\n\r\nconst avatarClassName = 'm-0 mr-1.5'\r\n\r\nexport const MessageAvatar: React.FC<ExternalMessageAvatar> = ({\r\n    userId,\r\n    displayName,\r\n    isSelf,\r\n    isScenarioAvatar,\r\n    className,\r\n    isConference,\r\n    showUserAvatar = true,\r\n}) => {\r\n    const getUserPictureUrl = useGetUserPictureUrl()\r\n\r\n    const avatarUrl = useMemo(() => {\r\n        if (isConference) {\r\n            return undefined\r\n        }\r\n        return !isSelf && userId ? getUserPictureUrl(userId) : ''\r\n    }, [getUserPictureUrl, isConference, isSelf, userId])\r\n\r\n    const [firstName, lastName] = useMemo(() => {\r\n        return displayName ? displayName.split(' ') : ['', '']\r\n    }, [displayName])\r\n\r\n    if (isScenarioAvatar) {\r\n        return (\r\n            <Avatar\r\n                className={tcn(className, styles.avatar, avatarClassName)}\r\n                type=\"scenario\"\r\n                size=\"28\"\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showUserAvatar && (\r\n                <Avatar\r\n                    className={tcn(className, styles.avatar, avatarClassName)}\r\n                    url={avatarUrl}\r\n                    size=\"28\"\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    type={isConference ? 'conference' : 'contact'}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface Props {\r\n    className?: string\r\n    displayName?: string\r\n    isError?: boolean\r\n    isOutgoing?: boolean\r\n    messageId?: string\r\n    sendTime?: number\r\n    showName?: boolean\r\n    showTime?: boolean\r\n}\r\n\r\nexport const MessageContent: React.FC<React.PropsWithChildren<Props>> = props => {\r\n    const {children, className, isError, messageId} = props\r\n\r\n    const combinedClassName = tcn(className, {\r\n        [styles.errorMessageContent]: isError,\r\n    })\r\n\r\n    return (\r\n        <SelectionItem\r\n            data-message-id-selection={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            className={combinedClassName}\r\n            itemId={messageId}\r\n        >\r\n            {children}\r\n        </SelectionItem>\r\n    )\r\n}\r\n","import {formatDate} from '@bpinc/lib-helpers'\r\nimport {IconRobot} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface WithTopInfoProps {\r\n    displayName?: string\r\n    isOutgoing?: boolean\r\n    isDelivered?: boolean\r\n    isRead?: boolean\r\n    isSystemMessage?: boolean\r\n    showTime?: boolean\r\n    sendTime?: number\r\n    showName?: boolean\r\n}\r\n\r\nexport const WithTopInfo: React.FC<React.PropsWithChildren<WithTopInfoProps>> = props => {\r\n    const {\r\n        children,\r\n        displayName,\r\n        isOutgoing,\r\n        isSystemMessage,\r\n        sendTime,\r\n        showTime,\r\n        showName,\r\n    } = props\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const siblingClassName = tcn('text-neutral-fade [&:not(:last-child)]:mr-2')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex justify-between pb-1 text-sm leading-[16px]\">\r\n                <div className={tcn('flex items-center justify-start', {'w-full justify-end': isOutgoing})}>\r\n                    {isSystemMessage && <IconRobot className=\"mr-2\" />}\r\n                    {(showName || isSystemMessage) && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"party-display-name\"\r\n                        >\r\n                            {isSystemMessage ? t.EXTERNAL_CHAT.system_message() : displayName}\r\n                        </span>\r\n                    )}\r\n                    {showTime && (\r\n                        <span\r\n                            className={siblingClassName}\r\n                            data-testid=\"message-time\"\r\n                        >\r\n                            {formatDate(sendTime, 'h:mm A')}\r\n                        </span>\r\n                    )}\r\n                    {/* @TODO - implement isDelivered && isRead */}\r\n                    {/* {isOutgoing && isDelivered && !isRead && <IconDelivered className=\"[&:not(:last-child)]:mr-2\" />} */}\r\n                    {/* {isOutgoing && isRead && <IconRead className=\"[&:not(:last-child)]:mr-2 [&_path]:fill-primary-600\" />} */}\r\n                </div>\r\n            </div>\r\n            {children}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {isScenarioMessage} from '@bpinc/ad-interaction-state-methods'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {\r\n    getExternalChatFileData,\r\n    getExternalChatMessageDisplayName,\r\n    getExternalChatMessageDisplayType,\r\n    getMessageId,\r\n    isErrorExternalChatMessage,\r\n} from '../../../../helpers'\r\nimport type {ExternalChatMessage} from '../../../../types'\r\nimport {isActivityMessageGroup, isChatMessage, isHistoryCallMessage, isHistoryMessage} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {MessageAvatar} from './MessageAvatar'\r\nimport {MessageContent} from './MessageContent'\r\nimport {WithTopInfo} from './WithTopInfo'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ntype WithOptionalNameAndAvatarProps = {\r\n    className?: string\r\n    message: ExternalChatMessage\r\n    children: ReactNode\r\n    isFullWidth?: boolean\r\n    messageClassName?: string\r\n    withoutBorder?: boolean\r\n}\r\n\r\nexport const WithOptionalNameAndAvatar: React.FC<WithOptionalNameAndAvatarProps> = React.memo(\r\n    function WithOptionalNameAndAvatar({className, children, message, isFullWidth, messageClassName, withoutBorder}) {\r\n        const {formatFullName} = useFormatting()\r\n        const {userId, isSelf, timestamp} = message\r\n        const id = getMessageId(message)\r\n        const displayType = getExternalChatMessageDisplayType(message)\r\n\r\n        const isChat = isChatMessage(message)\r\n        const isLink = isChat ? !!message.page : false\r\n        const source = isChat ? message.source : undefined\r\n\r\n        const isActivityGroup = isActivityMessageGroup(message)\r\n        const isNotes = isActivityGroup ? !!message.notes : false\r\n        const isDisposition = isActivityGroup ? !!message.disposition : false\r\n\r\n        const isHistory = isHistoryMessage(message)\r\n        const direction = isHistory ? message.direction : undefined\r\n        const mediaType = isHistory ? message.mediaType : undefined\r\n        const isEmail = mediaType === 'EMAIL' && !isActivityGroup\r\n        const isCall = mediaType === 'VOICE' && !isActivityGroup\r\n\r\n        const callUsers = isHistoryCallMessage(message) ? message.users : undefined\r\n\r\n        const isError = isErrorExternalChatMessage(message)\r\n        const isFile = !!getExternalChatFileData(message)\r\n\r\n        const isTextMessage = !isActivityGroup && !isEmail && !isFile && !isCall\r\n        const isRemoteAssistSession = mediaType === 'REMOTE_ASSIST'\r\n        const isCallConference = callUsers && callUsers.length > 1\r\n\r\n        const isOutgoing =\r\n            direction === 'outgoing' ||\r\n            source === 'agent' ||\r\n            source === 'system' ||\r\n            displayType === 'navigation' ||\r\n            displayType === 'activityGroup' ||\r\n            isError ||\r\n            isDisposition ||\r\n            isSelf && !isCall\r\n\r\n        const isCustomMessage = displayType === 'activityGroup' || mediaType === 'REMOTE_ASSIST'\r\n\r\n        const fullName = getExternalChatMessageDisplayName(message, formatFullName)\r\n\r\n        const isSystemMessage = isOutgoing && (!isSelf && !message?.userId)\r\n\r\n        const showName = Boolean(isSystemMessage || (isCall && !isOutgoing && !isSelf) || (!isOutgoing && fullName))\r\n\r\n        const isScenario = isScenarioMessage(displayType)\r\n\r\n        const finalDirection = isOutgoing ? 'outgoing' : 'incoming'\r\n\r\n        const finalUserId = callUsers?.[0].userId ?? userId\r\n\r\n        const messageItemClassName = tcn(\r\n            styles.messageBlock,\r\n            styles[finalDirection],\r\n        )\r\n        return (\r\n            <div\r\n                className={messageItemClassName}\r\n                data-disposition={isDisposition || undefined}\r\n                data-email={isEmail || undefined}\r\n                data-error={isError || undefined}\r\n                data-file={isFile || undefined}\r\n                data-incoming={!isOutgoing || undefined}\r\n                data-testid=\"message-item\"\r\n                data-link={isLink || undefined}\r\n                data-notes={isNotes || undefined}\r\n                data-outgoing={isOutgoing || undefined}\r\n                data-remote-assist-session={isRemoteAssistSession || undefined}\r\n                data-text-message={isTextMessage || undefined}\r\n            >\r\n                <div className={tcn('z-0 flex max-w-[71%] flex-auto flex-col', {'w-full max-w-full': isFullWidth})}>\r\n                    <section className={tcn(styles.message, styles[finalDirection])}>\r\n                        {finalDirection === 'incoming' && !withoutBorder && (\r\n                            <MessageAvatar\r\n                                userId={finalUserId}\r\n                                isConference={isCallConference}\r\n                                displayName={fullName}\r\n                                isScenarioAvatar={isScenario}\r\n                                showUserAvatar\r\n                            />\r\n                        )}\r\n                        {isCustomMessage ? (\r\n                            children\r\n                        ) : (\r\n                            <MessageContent\r\n                                className={tcn('relative', {'w-full max-w-full': isFullWidth}, className)}\r\n                                isError={isError}\r\n                                messageId={id}\r\n                            >\r\n                                <WithHoverOverActions\r\n                                    messageId={id}\r\n                                    className={tcn(\r\n                                        `relative inline-block\r\n                                        whitespace-normal break-all rounded border p-2\r\n                                        border-on-secondary text-primary-on-primary before:absolute\r\n                                        before:-bottom-px before:z-[-1] before:h-0 before:w-0 before:rounded-b-[33%]\r\n                                        before:border-b-4 before:border-t-0\r\n                                        before:border-transparent before:border-b-secondary-100 before:content-[''] after:absolute\r\n                                        after:bottom-0 after:z-0 after:h-0 after:w-0 after:rounded-b-[33%] after:border-b-[9px]\r\n                                        after:border-t-0 after:border-transparent after:content-[''] hover:text-primary-on-primary`,\r\n                                        {\r\n                                            // we could use rounded-bl-md instead of rounded-bl-[8px],\r\n                                            // however we couldn't, the layout goes break down\r\n                                            [`rounded-bl-[8px] bg-secondary-50\r\n                                            before:left-[-5px] before:border-l-[9px] before:border-r-0\r\n                                            after:left-[-5px] after:border-l-[8px]\r\n                                            after:border-r-0 after:border-b-secondary-50`]: finalDirection === 'incoming',\r\n                                            [`rounded-br-[8px] bg-primary-background\r\n                                            before:right-[-5px] before:border-l-0 before:border-r-[9px]\r\n                                            after:right-[-5px] after:border-l-0\r\n                                            after:border-r-[8px] after:border-b-neutral-0`]: finalDirection === 'outgoing',\r\n                                        },\r\n                                        messageClassName,\r\n                                    )}\r\n                                >\r\n                                    {withoutBorder\r\n                                        ? children\r\n                                        : (\r\n                                            <WithTopInfo\r\n                                                displayName={fullName}\r\n                                                isOutgoing={isOutgoing}\r\n                                                isSystemMessage={isSystemMessage}\r\n                                                sendTime={timestamp}\r\n                                                showName={showName}\r\n                                                showTime={!isCall || isActivityGroup}\r\n                                            >\r\n                                                {children}\r\n                                            </WithTopInfo>\r\n                                        )\r\n                                    }\r\n                                </WithHoverOverActions>\r\n                            </MessageContent>\r\n                        )}\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n)\r\n","import {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nconst dotStyles = 'size-1.5 rounded bg-inverse-disabled inline-block'\r\n\r\nexport const DotsTransforming = () => {\r\n    return (\r\n        <>\r\n            <div className={tcn(dotStyles, 'ml-1.5 mr-1 animate-[dot-transform_1s_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'mr-1 animate-[dot-transform_1s_500ms_alternate_infinite]')} />\r\n            <div className={tcn(dotStyles, 'animate-[dot-transform_1s_1.5s_alternate_infinite]')} />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ExternalChatParty, TypingParty} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {WithOptionalNameAndAvatar} from '../../ExternalMessages/messages/WithOptionalNameAndAvatar'\r\nimport {DotsTransforming} from './DotsTransforming'\r\n\r\n\r\ninterface Props {\r\n    party: ExternalChatParty\r\n    typingParty: TypingParty\r\n}\r\n\r\nfunction removeLastThreeDots(str: string): string {\r\n    return str.replace(/\\.\\.\\.$/, '')\r\n}\r\nexport const TypingIndicator: React.FC<Props> = ({party, typingParty}) => {\r\n    const {first_name: firstName, last_name: lastName, user_id: userId} = party\r\n\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const name = formatFullName(firstName, lastName)\r\n    const displayName = name || t.EXTERNAL_CHAT.display_name_placeholder()\r\n\r\n    const content = removeLastThreeDots(\r\n        userId\r\n            ? t.EXTERNAL_CHAT.agent_is_typing(name)\r\n            : t.EXTERNAL_CHAT.party_is_typing(),\r\n    )\r\n\r\n    const timestamp = party?.timestamp\r\n        ? Number(party.timestamp)\r\n        : Date.now().valueOf()\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar\r\n            message={{\r\n                itemId: party.item_id,\r\n                partyId: party.party_id,\r\n                timestamp,\r\n                type: 'message',\r\n                displayType: 'message',\r\n                displayName,\r\n            }}\r\n        >\r\n            {content}\r\n            {' '}\r\n            {typingParty.message}\r\n            <DotsTransforming />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\nimport type {ListRange} from 'react-virtuoso'\r\n\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, getTypingParties} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatCommonMessagesType} from '../../../../types'\r\nimport {TypingIndicator} from './TypingIndicator'\r\n\r\n\r\ntype TypingPartiesProps = {\r\n    itemId: string\r\n    rangeRef: RefObject<ListRange | undefined>\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>\r\n}\r\n\r\nexport const TypingParties: React.FC<TypingPartiesProps> = ({itemId, rangeRef, messagesRef}) => {\r\n    const bottom = useRef<HTMLDivElement>(null)\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const chatData = useInteractionChatData(interactionStepId)\r\n    const typingParties = getTypingParties(chatData)\r\n    const hasTypingParties = typingParties.length > 0\r\n    const lastRenderedItem = rangeRef.current?.endIndex\r\n    const lastMessageIndex = messagesRef.current.length - 1\r\n    const isLastMessageRenderedRef = useAsRef(lastMessageIndex === lastRenderedItem)\r\n\r\n    useEffect(() => {\r\n        if (!hasTypingParties) {\r\n            return\r\n        }\r\n\r\n        if (!isLastMessageRenderedRef.current) {\r\n            return\r\n        }\r\n\r\n        bottom.current?.scrollIntoView({behavior: 'auto', block: 'start'})\r\n    }, [hasTypingParties, isLastMessageRenderedRef])\r\n\r\n    return (\r\n        <>\r\n            {typingParties.map((party, i) => (\r\n                <TypingIndicator\r\n                    key={i}\r\n                    party={party}\r\n                    typingParty={chatData?.typingParties[party.party_id]}\r\n                />\r\n            ))}\r\n            {hasTypingParties && <div ref={bottom} />}\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useRef} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\nimport produce from 'immer'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, getServiceNameFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {isExternalChatMessageDate} from '../../../types'\r\nimport {useMessagesLoader} from '../useMessagesLoader'\r\nimport {NoMessagesPlaceholder} from './NoMessagesPlaceholder'\r\nimport {TypingParties} from './TypingParties'\r\nimport {useInitialScrollPosition} from './useInitialScrollPosition'\r\nimport {useSaveScrollPositionEffect} from './useSaveScrollPositionEffect'\r\n\r\n\r\nconst VIEWPORT_INCREASE = 200 //Viewport increasing to prevent new messages from blinking\r\n\r\ntype VirtualizedMessagesProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    type: ChatType\r\n    renderMessage: (message: ChatCommonMessagesType) => React.ReactNode\r\n}\r\n\r\nexport const VirtualizedMessages = React.memo<VirtualizedMessagesProps>(\r\n    function VirtualizedMessages({\r\n        messages,\r\n        itemId,\r\n        type,\r\n        contactId,\r\n        scrollNode,\r\n        renderMessage,\r\n    }) {\r\n        const {t} = useLocalizationState()\r\n        const setItemState = useInteractionUIItemStateSetter()\r\n        const virtuosoRef = useRef<VirtuosoHandle>(null)\r\n        const rangeRef = useRef<ListRange | undefined>(undefined)\r\n        const messagesRef = useAsRef(messages)\r\n        const initialRender = useRef(false)\r\n\r\n        const interaction = useInteraction(itemId)\r\n        const serviceName = getServiceNameFromItem(interaction)\r\n        const channel = getChannel(interaction)\r\n        const ChannelIcon = getChannelImageIcon(channel)\r\n\r\n        const loadMoreMessages = useMessagesLoader(itemId, contactId, type)\r\n\r\n        useEffect(() => {\r\n            setItemState(itemId, produce(s => {\r\n                s.scrollerApi = {\r\n                    scrollToLast: () => {\r\n                        virtuosoRef.current?.scrollToIndex({index: 'LAST'})\r\n                    },\r\n                    scrollTo: (id, align) => {\r\n                        const index = messagesRef.current?.findIndex(m => id === getMessageId(m))\r\n                        virtuosoRef.current?.scrollToIndex({\r\n                            index,\r\n                            align,\r\n                        })\r\n                    },\r\n                }\r\n            }))\r\n        }, [itemId, messagesRef, setItemState])\r\n\r\n        useSaveScrollPositionEffect(messages, virtuosoRef, rangeRef, scrollNode)\r\n\r\n        const initialScrollPosition = useInitialScrollPosition(itemId, type, messagesRef, rangeRef, scrollNode)\r\n        const generateMessageKey = useCallback((_index: number, message: ChatCommonMessagesType) => getMessageId(message), [])\r\n        const channelTitle = channel ? (\r\n            channel === 'remoteassist'\r\n                ? t.ACTIVITY_HISTORY.remote_assist_title()\r\n                : t.GLOBAL[`chat_type_${channel}`]()\r\n        ) : ''\r\n        const renderHeader = useCallback(() => serviceName ? (\r\n            <div className=\"my-6 flex justify-center\">\r\n                <div className=\"text-neutral-on-secondary\">\r\n                    <p className=\"text-center font-semibold caption-s\">\r\n                        {serviceName}\r\n                    </p>\r\n                    <div className=\"flex items-center justify-center\">\r\n                        {ChannelIcon && <ChannelIcon className=\"mr-1 size-4 icon-disabled\" />}\r\n                        {' '}\r\n                        <p className=\"text-center caption-s\">\r\n                            {channelTitle}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : null, [ChannelIcon, channelTitle, serviceName])\r\n        const virtuosoComponents = useMemo(() => ({\r\n            Header: renderHeader,\r\n            Footer: () => (\r\n                <TypingParties\r\n                    itemId={itemId}\r\n                    messagesRef={messagesRef}\r\n                    rangeRef={rangeRef}\r\n                />\r\n            ),\r\n        }), [itemId, messagesRef, renderHeader])\r\n        const setListRange = useCallback((r: ListRange) => {\r\n            rangeRef.current = r\r\n        }, [])\r\n        const onHeightChange = useCallback((height: number) => {\r\n            if (scrollNode && scrollNode.clientHeight >= height) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages, scrollNode])\r\n\r\n        //Debounce is needed because for some reason Virtuoso calls onHeightChange twice\r\n        const debouncedOnHeightChange = useMemo(() => debounce(onHeightChange, 100), [onHeightChange])\r\n\r\n        const onTopStateChange = useCallback((atTop: boolean) => {\r\n            if (!initialRender.current) {\r\n                initialRender.current = true\r\n                return\r\n            }\r\n            if (atTop) {\r\n                loadMoreMessages()\r\n            }\r\n        }, [loadMoreMessages])\r\n\r\n        const messageRenderer = useCallback((_index: number, message: ChatCommonMessagesType) => {\r\n            return renderMessage(message)\r\n        }, [renderMessage])\r\n\r\n        const showNoMessagesPlaceholder = messages.length < 1 || messages.length == 1 && isExternalChatMessageDate(messages[0])\r\n        if (showNoMessagesPlaceholder) {\r\n            return <NoMessagesPlaceholder type={type} contactId={contactId} />\r\n        }\r\n\r\n        return (\r\n            <Virtuoso\r\n                tabIndex={undefined} // by default Virtuoso add the tabIndex=\"0\" but for better support SelectionContainer we should set it undefined\r\n                ref={virtuosoRef}\r\n                followOutput\r\n                data={messages}\r\n                itemContent={messageRenderer}\r\n                computeItemKey={generateMessageKey}\r\n                atTopStateChange={onTopStateChange}\r\n                initialTopMostItemIndex={initialScrollPosition}\r\n                customScrollParent={scrollNode || undefined}\r\n                components={virtuosoComponents}\r\n                rangeChanged={setListRange}\r\n                totalListHeightChanged={debouncedOnHeightChange}\r\n                increaseViewportBy={VIEWPORT_INCREASE}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {RefObject} from 'react'\r\nimport {useLayoutEffect} from 'react'\r\nimport type {ListRange, VirtuosoHandle} from 'react-virtuoso'\r\n\r\nimport {useAsRef, usePreviousValueRef, useValueUpdated} from '@bpinc/lib-helpers'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useSaveScrollPositionEffect(\r\n    messages: ChatCommonMessagesType[],\r\n    virtuosoRef: RefObject<VirtuosoHandle>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const messagesRef = useAsRef(messages)\r\n    const messagesPrevRef = usePreviousValueRef(messages)\r\n    const messagesLengthChanged = useValueUpdated(messages.length)\r\n\r\n    useLayoutEffect(() => {\r\n        if (!rangeRef.current ||\r\n            isScrollAtBottom(scrollNode) ||\r\n            getMessageId(messagesRef.current[0]) === getMessageId(messagesPrevRef.current?.[0] || '')\r\n        ) {\r\n            return\r\n        }\r\n\r\n        if (messagesLengthChanged) {\r\n            const {offset, id} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesPrevRef.current || [])\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === id)\r\n            virtuosoRef.current?.scrollToIndex({index, offset, align: 'start'})\r\n        }\r\n    }, [messagesLengthChanged, messagesPrevRef, messagesRef, rangeRef, scrollNode, virtuosoRef])\r\n}\r\n","import type {MutableRefObject, RefObject} from 'react'\r\nimport {useLayoutEffect, useMemo} from 'react'\r\nimport type {IndexLocationWithAlign, ListRange} from 'react-virtuoso'\r\nimport produce from 'immer'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionUIChatTypeTopItemId, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\nimport {findFirstVisibleItemWithOffset, getMessageId, isScrollAtBottom} from '../../../helpers'\r\nimport {useFirstUnreadMessage} from '../../../hooks/useFirstUnreadMessage'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\n\r\n\r\nexport function useInitialScrollPosition(\r\n    itemId: string,\r\n    type: ChatType,\r\n    messagesRef: MutableRefObject<ChatCommonMessagesType[]>,\r\n    rangeRef: RefObject<ListRange | undefined>,\r\n    scrollNode: ChatScrollNodeType,\r\n) {\r\n    const setInteractionUIState = useInteractionUIItemStateSetter()\r\n    const firstUnreadMessageIdRef = useAsRef(useFirstUnreadMessage(itemId))\r\n    const topItemRef = useAsRef(useInteractionUIChatTypeTopItemId(itemId, type))\r\n\r\n    useLayoutEffect(() => {\r\n        //Save current scroll position on unmount\r\n        return () => {\r\n            if (!rangeRef.current) {\r\n                return\r\n            }\r\n\r\n            if (isScrollAtBottom(scrollNode)) {\r\n                setInteractionUIState(itemId, produce(state => {\r\n                    delete state.tabTopItemId[type]\r\n                }))\r\n                return\r\n            }\r\n\r\n            const {id, offset} = findFirstVisibleItemWithOffset(scrollNode, rangeRef.current.startIndex, messagesRef.current)\r\n            setInteractionUIState(itemId, produce(state => {\r\n                state.tabTopItemId[type] = {id, offset}\r\n            }))\r\n        }\r\n\r\n    }, [itemId, messagesRef, rangeRef, scrollNode, setInteractionUIState, type])\r\n\r\n    return useMemo<IndexLocationWithAlign>(() => {\r\n        if (firstUnreadMessageIdRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === firstUnreadMessageIdRef.current)\r\n            return {index, align: 'end'}\r\n        }\r\n\r\n        if (topItemRef.current) {\r\n            const index = messagesRef.current.findIndex(m => getMessageId(m) === topItemRef.current?.id)\r\n            return {index, align: 'start', offset: (topItemRef.current?.offset || 0)}\r\n        }\r\n\r\n        return {index: 'LAST'}\r\n    }, [firstUnreadMessageIdRef, messagesRef, topItemRef])\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport type {ActivityHistoryType} from '@bpinc/ad-contacts-state-types'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-transport-types'\r\nimport {formatDate} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ninterface MessageTopInfoProps {\r\n    isScenario?: boolean\r\n    displayName?: string\r\n    showName?: boolean\r\n    gapBeforeTime?: boolean\r\n    channel?: ExternalChatChannelType\r\n    mediaType?: ActivityHistoryType\r\n    timestamp: number\r\n    showTime?: boolean\r\n    direction: 'incoming' | 'outgoing'\r\n}\r\n\r\nexport const MessageTopInfo: React.FC<MessageTopInfoProps> = ({\r\n    isScenario,\r\n    displayName,\r\n    showName,\r\n    timestamp,\r\n    gapBeforeTime,\r\n    channel,\r\n    mediaType,\r\n    direction,\r\n    showTime,\r\n}) => {\r\n    const finalGapBeforeTime = gapBeforeTime || (showTime && showName)\r\n\r\n    const ChannelIcon = getChannelImageIcon(channel, {omit: ['web'], default: undefined})\r\n\r\n    return (\r\n        <p className={tcn(styles.messageTopInfo, styles[direction])}>\r\n            <span data-testid=\"party-display-name\">\r\n                {showName && displayName}\r\n            </span>\r\n            <span className={finalGapBeforeTime ? styles.messageTopInfoGap : ''} />\r\n            {showTime && (\r\n                <span className={tcn(styles.timeChannel, styles[direction])}>\r\n                    {!isScenario && mediaType !== 'EMAIL' && ChannelIcon && (\r\n                        <ChannelIcon\r\n                            data-testid=\"channel\"\r\n                            data-value={channel}\r\n                            className={styles.channelIcon}\r\n                            title={channel}\r\n                        />\r\n                    )}\r\n                    <span data-testid=\"message-time\">\r\n                        {formatDate(timestamp, 'h:mm A')}\r\n                    </span>\r\n                </span>\r\n            )}\r\n        </p>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"communicator_Chat_messageBlock_i7M0B\",\"outgoing\":\"communicator_Chat_outgoing_JD3jd\",\"message\":\"communicator_Chat_message_x5tfb\",\"errorMessage\":\"communicator_ErrorMessage_errorMessage_LqBft\",\"errorMessageAvatar\":\"communicator_ErrorMessage_errorMessageAvatar_fhbT1\"};","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport {MessageAvatar} from '../MessageAvatar'\r\nimport {MessageContent} from '../MessageContent'\r\nimport {MessageTopInfo} from '../MessageTopInfo'\r\n\r\nimport styles from './ErrorMessage.module.less'\r\n\r\n\r\nexport const ErrorMessage: FCWithChildren<string> = ({children}) => {\r\n    return (\r\n        <div className={tcn(styles.messageBlock, styles.outgoing)}>\r\n            <MessageTopInfo direction=\"outgoing\" isScenario timestamp={0} />\r\n            <section className={tcn(styles.message, styles.outgoing)}>\r\n                <MessageContent className={styles.errorMessage} isError>\r\n                    {children}\r\n                </MessageContent>\r\n            </section>\r\n            <MessageAvatar className={styles.errorMessageAvatar} isScenarioAvatar />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {IconACWDisposition24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {WithHoverOverActions} from '../../../ChatMessagesActions'\r\n\r\n\r\ninterface DispositionMessageProps {\r\n    title: string\r\n    disposition?: string\r\n    serviceName?: string\r\n    messageId: string\r\n}\r\n\r\nexport const DispositionMessage: React.FC<DispositionMessageProps> = ({title, disposition, serviceName, messageId}) => {\r\n    const {t} = useLocalizationState()\r\n    const messageContentClassName = tcn('break-words font-normal caption-s text-neutral-on-secondary')\r\n    const rowMessageClassName = tcn('flex w-full items-center gap-1')\r\n\r\n    return (\r\n        <SelectionItem\r\n            touchedOnly\r\n            focusOnSelection\r\n            tabIndex={0}\r\n            itemId={messageId}\r\n            className=\"w-full rounded-xs border py-1.5 pl-2 pr-3 bg-primary-container-variant1 border-action\"\r\n        >\r\n            <WithHoverOverActions messageId={messageId}>\r\n                <div className=\"flex w-full flex-col gap-2\">\r\n                    <div className={rowMessageClassName}>\r\n                        <IconACWDisposition24 className=\"size-4 icon-neutral\" />\r\n                        <div className=\"font-semibold caption-xs text-primary-on-primary\">\r\n                            {t.ACTIVITY_HISTORY.disposition_title()}\r\n                        </div>\r\n                    </div>\r\n                    <div\r\n                        className={tcn('flex w-full gap-1', messageContentClassName)}\r\n                        data-testid=\"disposition-title\"\r\n                    >\r\n                        {title}\r\n                    </div>\r\n                    <div className={rowMessageClassName}>\r\n                        <span className={messageContentClassName}>\r\n                            {t.EXTERNAL_CHAT.disposition_message_service_name()}\r\n                        </span>\r\n                        <span\r\n                            className={tcn(messageContentClassName, 'font-semibold')}\r\n                            data-testid=\"disposition-service\"\r\n                        >\r\n                            {serviceName}\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        className={rowMessageClassName}\r\n                        data-testid=\"disposition\"\r\n                    >\r\n                        <span className={messageContentClassName}>\r\n                            {t.EXTERNAL_CHAT.disposition_message_name()}\r\n                        </span>\r\n                        <span className={tcn(messageContentClassName, 'font-semibold')}>\r\n                            {disposition}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </WithHoverOverActions>\r\n        </SelectionItem>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {IconAgentNotes} from '@bpinc/lib-jskit-ui'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const NotesMessage: FCWithChildren<string> = ({children}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <div\r\n            className=\"flex w-full flex-col gap-2 rounded-xs border py-1.5 pl-2 pr-3 bg-warning-variant border-on-warning\"\r\n            data-testid=\"notes\"\r\n        >\r\n            <div className=\"flex items-center gap-1\">\r\n                <IconAgentNotes className=\"size-4\" />\r\n                <div className=\"font-semibold caption-xs text-primary-on-primary\">\r\n                    {t.ACTIVITY_HISTORY.agent_notes_title()}\r\n                </div>\r\n            </div>\r\n            <div className=\"w-full gap-1 break-words caption-s text-neutral-on-secondary\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {getMessageId} from '../../../../../helpers'\r\nimport type {ActivityMessageGroup as ActivityMessageGroupType} from '../../../../../types'\r\nimport {WithHoverOverActions} from '../../../ChatMessagesActions'\r\nimport {WithOptionalNameAndAvatar} from '../WithOptionalNameAndAvatar'\r\nimport {DispositionMessage} from './DispositionMessage'\r\nimport {NotesMessage} from './NotesMessage'\r\nimport {useDispositionTitle} from './useDispositionTitle'\r\n\r\n\r\ntype ActivityMessageGroupProps = {\r\n    message: ActivityMessageGroupType\r\n}\r\n\r\nexport const ActivityMessageGroup: React.FC<ActivityMessageGroupProps> = ({message}) => {\r\n    const {notes, disposition, serviceName} = message\r\n    const messageId = getMessageId(message)\r\n\r\n    const dispositionTitle = useDispositionTitle(message)\r\n\r\n    return (\r\n        <div>\r\n            {notes && (\r\n                <WithOptionalNameAndAvatar isFullWidth message={message}>\r\n                    <WithHoverOverActions messageId={messageId} className=\"w-full\">\r\n                        <NotesMessage>{notes}</NotesMessage>\r\n                    </WithHoverOverActions>\r\n                </WithOptionalNameAndAvatar>\r\n            )}\r\n            {disposition && (\r\n                <WithOptionalNameAndAvatar isFullWidth message={message}>\r\n                    <DispositionMessage\r\n                        messageId={messageId}\r\n                        title={dispositionTitle}\r\n                        disposition={disposition}\r\n                        serviceName={serviceName}\r\n                    />\r\n                </WithOptionalNameAndAvatar>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {getDispositionTitle} from '../../../../../helpers'\r\nimport type {ActivityMessageGroup as ActivityMessageGroupType} from '../../../../../types'\r\n\r\n\r\nexport function useDispositionTitle(message: ActivityMessageGroupType) {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(function memoizeDispositionTitle() {\r\n        return getDispositionTitle(message, t, formatFullName)\r\n\r\n    }, [formatFullName, message, t])\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgBotSuggestion = function SvgBotSuggestion(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m12 21-2.575-2.5h-3.8a1.6 1.6 0 0 1-1.162-.448A1.5 1.5 0 0 1 4 16.93V4.575a1.5 1.5 0 0 1 .463-1.127A1.6 1.6 0 0 1 5.625 3h12.75a1.606 1.606 0 0 1 1.163.448A1.506 1.506 0 0 1 20 4.575V16.93a1.506 1.506 0 0 1-.462 1.127 1.606 1.606 0 0 1-1.163.448h-3.8Zm-6.375-3.464H9.85L12 19.619l2.15-2.083h4.225a.62.62 0 0 0 .45-.17.581.581 0 0 0 .175-.436V4.575a.581.581 0 0 0-.175-.436.62.62 0 0 0-.45-.17H5.625a.62.62 0 0 0-.45.17.581.581 0 0 0-.175.436V16.93a.581.581 0 0 0 .175.436.62.62 0 0 0 .45.17ZM5 3.969Zm8.175 7.922 2.6-1.139-2.6-1.139L12 7.094l-1.175 2.52-2.6 1.139 2.6 1.139L12 14.41Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgBotSuggestion);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"21ff305d2488d9478cc624e673ec8bab.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgFacebook = function SvgFacebook(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-4.974 0-9 3.645-9 8.1a7.687 7.687 0 0 0 2.842 5.895V21l3.695-2.115A10.817 10.817 0 0 0 12 19.2c4.974 0 9-3.645 9-8.1S16.974 3 12 3Z\",\n    fill: \"#448aff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m6.275 13.908 4.771-5.146 2.385 2.339 4.294-2.339-4.771 5.146-2.385-2.339Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgFacebook);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"57f727bf2f169e0b19d872ec87e1ebc4.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLine = function SvgLine(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.25 21h11.5A3.25 3.25 0 0 0 21 17.75V6.25A3.25 3.25 0 0 0 17.75 3H6.25A3.25 3.25 0 0 0 3 6.25v11.5A3.25 3.25 0 0 0 6.25 21Z\",\n    fill: \"#00c300\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.556 11.21c0-2.932-2.94-5.318-6.553-5.318S5.451 8.276 5.451 11.21c0 2.629 2.332 4.831 5.481 5.247.214.046.5.141.578.323a1.348 1.348 0 0 1 .021.593s-.076.462-.094.561c-.028.166-.132.648.568.354a21.147 21.147 0 0 0 5.146-3.807 4.728 4.728 0 0 0 1.405-3.271Zm-9.119 1.745h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .687 0v2.26h.958a.344.344 0 0 1 0 .688Zm1.347-.344a.344.344 0 1 1-.687 0V10.01a.344.344 0 1 1 .687 0Zm3.135 0a.344.344 0 0 1-.618.206L11.966 11v1.61a.344.344 0 0 1-.688 0v-2.6a.344.344 0 0 1 .235-.326.338.338 0 0 1 .109-.017.346.346 0 0 1 .274.137l1.335 1.818V10.01a.344.344 0 0 1 .688 0Zm2.107-1.646a.344.344 0 1 1 0 .688h-.958v.615h.958a.344.344 0 1 1 0 .688h-1.3a.344.344 0 0 1-.344-.344V10.01a.344.344 0 0 1 .344-.344h1.3a.344.344 0 1 1 0 .687h-.958v.615h.958Z\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLine);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"0c921db40ddee9f34a5d15b376ee0df7.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgSms = function SvgSms(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 11.2a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133A.722.722 0 0 0 8 11.2Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251Zm4 0a.725.725 0 0 0 .538-.251.8.8 0 0 0 0-1.133.7.7 0 0 0-1.075 0 .793.793 0 0 0 0 1.133.722.722 0 0 0 .537.251ZM3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgSms);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"910dfbe6763a148f8a6af4b2866390ff.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTelegram = function SvgTelegram(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#29b6f6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m17.109 7.525-1.844 9.415a.574.574 0 0 1-.613.43.659.659 0 0 1-.43-.135l-3.994-3.315-1.954-.987-2.508-.667s-.447-.129-.447-.5c0-.308.459-.454.459-.454l10.493-4.169a2 2 0 0 1 .555-.11c.144 0 .308.062.308.246a1.439 1.439 0 0 1-.025.246Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11.649 14.855-1.687 1.661a.322.322 0 0 1-.171.059.243.243 0 0 1-.108-.021l.475-2.936Z\",\n    fill: \"#b0bec5\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.968 9.007a.246.246 0 0 0-.345-.046l-6.496 3.884s1.037 2.9 1.195 3.4.286.514.286.514l.475-2.936 4.84-4.478a.246.246 0 0 0 .045-.338Z\",\n    fill: \"#cfd8dc\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTelegram);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"3b81ec51938bfa793e8ba0cb4f274188.svg\";","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgTwitter = function SvgTwitter(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3a9 9 0 1 0 9 9 9 9 0 0 0-9-9Z\",\n    fill: \"#03a9f4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.224 8.73a4.6 4.6 0 0 1-1.306.415 3.333 3.333 0 0 0 1.306-1.415 5.926 5.926 0 0 1-1.651.648 2 2 0 0 0-1.563-.648A2.176 2.176 0 0 0 12 10.09v.94c-1.741 0-3.439-1.438-4.5-2.832a2.42 2.42 0 0 0-.29 1.16 3.038 3.038 0 0 0 1.3 2.145 3.828 3.828 0 0 1-1.306-.472v.027a2.065 2.065 0 0 0 1.7 2.088 2.548 2.548 0 0 1-1.236.246c.272.913 1.642 1.4 2.58 1.416a5.19 5.19 0 0 1-3.047.944 2.958 2.958 0 0 1-.424-.008 6.359 6.359 0 0 0 3.482.955 6.1 6.1 0 0 0 6.094-6.312c0-.1 0-.435-.008-.533a3.528 3.528 0 0 0 .879-1.124\",\n    fill: \"#fff\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgTwitter);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"6157ddd8a81feea7b302231a623e132e.svg\";","var _path, _path2, _path3, _path4;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgViber = function SvgViber(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3.426c-1.191 0-4.815 0-6.819 1.738-1.193 1.129-1.755 2.762-1.755 5.121v1.286c0 2.36.562 3.992 1.769 5.134a6.358 6.358 0 0 0 2.423 1.221l.321.092v2.288c0 .268.082.268.109.268.056 0 .144-.017.313-.159.041-.038.338-.344 1.787-1.886l.146-.156.219.013c.485.029.986.044 1.487.044 1.191 0 4.815 0 6.819-1.738 1.193-1.129 1.755-2.761 1.755-5.121v-1.286c0-2.36-.562-3.992-1.769-5.134-1.99-1.725-5.614-1.725-6.805-1.725Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.443 13.623a9.161 9.161 0 0 0-1.477-.911 2.611 2.611 0 0 0-.994-.3.814.814 0 0 0-.479.223c-.307.279-.407.629-.945.629a3.863 3.863 0 0 1-2.105-1.118 3.357 3.357 0 0 1-1.228-1.917c0-.49.377-.588.684-.868a.7.7 0 0 0 .252-.435 2.068 2.068 0 0 0-.334-.9 8.2 8.2 0 0 0-1-1.345.663.663 0 0 0-.494-.234 1.894 1.894 0 0 0-.957.315 2.088 2.088 0 0 0-.929 1.1 1 1 0 0 0-.028.191 2.759 2.759 0 0 0 .408 1.377 14.5 14.5 0 0 0 1.977 2.749 9.6 9.6 0 0 0 .778.759 9.94 9.94 0 0 0 .834.708 16.219 16.219 0 0 0 3.02 1.8 3.553 3.553 0 0 0 1.5.372 1.325 1.325 0 0 0 .223-.025 2.236 2.236 0 0 0 1.209-.846 1.532 1.532 0 0 0 .346-.871.568.568 0 0 0-.261-.453Zm.257-2.067a.448.448 0 0 1-.468-.426v-.426a4.04 4.04 0 0 0-4.21-3.833.428.428 0 1 1 0-.852 4.938 4.938 0 0 1 5.146 4.685v.426a.448.448 0 0 1-.468.43Zm-2.873-.852a.463.463 0 0 1-.452-.319 1.341 1.341 0 0 0-1-.912.424.424 0 0 1-.336-.519.474.474 0 0 1 .57-.306 2.242 2.242 0 0 1 1.672 1.522.424.424 0 0 1-.334.52.517.517 0 0 1-.121.018Z\",\n    fill: \"#7e57c2\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.095 11.126a.426.426 0 0 1-.426-.426 2.553 2.553 0 0 0-2.418-2.549.426.426 0 0 1 .045-.851 3.4 3.4 0 0 1 3.225 3.4.426.426 0 0 1-.426.426Z\",\n    fill: \"#7e57c2\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 3c-2.025 0-5.28.977-7.1 1.85C3.538 6.138 3 7.946 3 10.286v1.285c0 2.34.538 4.147 1.9 5.436a6.8 6.8 0 0 0 2.6 1.331V20.3c0 .684.472.7.558.7a.944.944 0 0 0 .607-.267c.072-.061.909-.949 1.819-1.92.542.033 1.057.045 1.511.045 2.025 0 5.18-.178 7.1-1.85 1.359-1.288 1.9-3.1 1.9-5.436v-1.286c0-2.34-.538-4.147-1.9-5.436C17.18 3.177 14.025 3 12 3Zm7.65 8.422v.149c0 2.1-.47 3.535-1.479 4.505-1.747 1.5-5.075 1.5-6.172 1.5-.334 0-.876 0-1.515-.043L8.4 19.75v-2.513a6.03 6.03 0 0 1-2.571-1.161c-1.008-.97-1.479-2.4-1.479-4.506v-1.282c0-2.1.47-3.535 1.479-4.505 1.746-1.5 5.075-1.5 6.171-1.5s4.424 0 6.171 1.5c1.009.97 1.479 2.4 1.479 4.505v1.134Z\",\n    fill: \"#7e57c2\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgViber);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"705a55fc7f1f462947be817d84a580cc.svg\";","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWebChat = function SvgWebChat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 21V4.713a1.711 1.711 0 0 1 .463-1.226A1.534 1.534 0 0 1 4.625 3h14.75a1.537 1.537 0 0 1 1.163.487A1.713 1.713 0 0 1 21 4.713v11.332a1.713 1.713 0 0 1-.462 1.226 1.537 1.537 0 0 1-1.163.487h-13.3Zm1-2.556L5.65 16.7h13.725a.593.593 0 0 0 .45-.184.661.661 0 0 0 .175-.471V4.713a.661.661 0 0 0-.175-.474.593.593 0 0 0-.45-.184H4.625a.593.593 0 0 0-.45.184.661.661 0 0 0-.175.474ZM4 4.713Z\",\n    fill: \"#767676\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWebChat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"14effeb1e434fca9cf40a30e4b4c1cfa.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWechat = function SvgWechat(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.689 3c-4.23 0-7.691 2.884-7.691 6.489a6.076 6.076 0 0 0 2.884 5.047l-.961 2.884 3.028-1.875a8.4 8.4 0 0 0 2.74.433c4.23 0 7.691-2.884 7.691-6.489S14.919 3 10.689 3Z\",\n    fill: \"#8bc34a\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.933 14.068c.38-2.708 3.331-4.51 6.614-4.05.137.02 1.617.409 1.758.429a3.465 3.465 0 0 0 0-1.33c-.046-.006-.137-.083-.183-.09-5.07-1.443-9.06 1.238-9.098 4.913a5.88 5.88 0 0 0 .07 1.82 7.053 7.053 0 0 0 .97.046 4.36 4.36 0 0 1-.13-1.738Z\",\n    fill: \"#7cb342\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 14.751a5.52 5.52 0 0 0-5.75-5.288 5.52 5.52 0 0 0-5.75 5.288 5.52 5.52 0 0 0 5.75 5.288 6.515 6.515 0 0 0 2.212-.385L19.674 21l-.619-2.307A5.033 5.033 0 0 0 21 14.751Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.866 7.478a.961.961 0 1 1-.962-.961.964.964 0 0 1 .962.961Zm4.807-.961a.961.961 0 1 0 .961.961.964.964 0 0 0-.961-.961Z\",\n    fill: \"#33691e\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.996 13.254a.721.721 0 1 1-.721-.721.739.739 0 0 1 .721.721Zm3.605-.721a.721.721 0 1 0 .721.721.739.739 0 0 0-.721-.721Z\",\n    fill: \"#546e7a\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWechat);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"720e2babef2e76400cb343b776053cba.svg\";","var _path, _path2, _path3, _path4, _path5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgWhatsapp = function SvgWhatsapp(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m3.46 20.54 1.207-4.386A8.5 8.5 0 0 1 18.052 5.941a8.394 8.394 0 0 1 2.489 5.988 8.5 8.5 0 0 1-8.5 8.464 8.525 8.525 0 0 1-4.073-1.034Z\",\n    fill: \"#fff\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.454 20.77a.223.223 0 0 1-.216-.282l1.183-4.3A8.725 8.725 0 0 1 18.214 5.78a8.622 8.622 0 0 1 2.556 6.15 8.742 8.742 0 0 1-12.833 7.677l-4.426 1.156a.206.206 0 0 1-.057.007Z\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.032 3.447a8.48 8.48 0 1 1 0 16.959 8.534 8.534 0 0 1-4.07-1.032l-4.514 1.179 1.208-4.392a8.474 8.474 0 0 1 7.376-12.714m0-.447a8.922 8.922 0 0 0-7.86 13.22l-1.157 4.215a.445.445 0 0 0 .117.432.449.449 0 0 0 .433.118l4.345-1.134A8.972 8.972 0 0 0 21 11.93 8.945 8.945 0 0 0 12.032 3Z\",\n    fill: \"#cfd8dc\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.01 6.982a7.014 7.014 0 0 0-10.93 8.659l.168.265-.711 2.579 2.661-.694.257.152a7.047 7.047 0 0 0 3.579.974 7.02 7.02 0 0 0 7.031-6.99 6.928 6.928 0 0 0-2.055-4.945Z\",\n    fill: \"#40c351\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.854 8.28c-.163-.363-.335-.37-.491-.377-.127-.006-.272-.005-.418-.005a.8.8 0 0 0-.581.273 2.443 2.443 0 0 0-.763 1.817 4.238 4.238 0 0 0 .89 2.254 8.948 8.948 0 0 0 3.723 3.29c1.841.726 2.216.582 2.615.545a2.2 2.2 0 0 0 1.471-1.036 1.825 1.825 0 0 0 .127-1.036c-.055-.091-.2-.145-.418-.255s-1.29-.636-1.489-.709-.345-.109-.491.109-.563.709-.69.854-.255.164-.472.055a5.966 5.966 0 0 1-1.753-1.081 6.566 6.566 0 0 1-1.212-1.509c-.127-.218-.014-.336.1-.445s.218-.255.327-.382a1.49 1.49 0 0 0 .218-.363.4.4 0 0 0-.018-.382c-.057-.117-.481-1.19-.675-1.617Z\",\n    fill: \"#fff\",\n    fillRule: \"evenodd\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgWhatsapp);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"a39c903b5cca1b36c65e91151a83b019.svg\";","// extracted by mini-css-extract-plugin\nexport default {\"messageRow\":\"communicator_Message_messageRow_UOs4p\",\"incoming\":\"communicator_Message_incoming_bnpcD\",\"outgoing\":\"communicator_Message_outgoing_pKbZe\",\"time\":\"communicator_Message_time_wb5xv\",\"message\":\"communicator_Message_message_chWfh\",\"link\":\"communicator_Message_link_J61uY\",\"error\":\"communicator_Message_error_NKpnz\",\"html\":\"communicator_Message_html_rIkTi\",\"closable\":\"communicator_Message_closable_a7mGz\",\"sentiment\":\"communicator_Message_sentiment_jM9aL\",\"icon\":\"communicator_Message_icon_XNLkK\"};","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {formatDate, useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionItem, Sentiment, Svg} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getMessageId} from '../../../../helpers'\r\nimport type {Direction} from '../../../../types'\r\nimport {WithHoverOverActions} from '../../ChatMessagesActions'\r\nimport {useLinkOpener} from '../hooks/useLinkOpener'\r\nimport {getTranscriptMessageIcon} from './utils'\r\n\r\nimport styles from './Message.module.less'\r\n\r\n\r\nexport type MessageProps = MessageAdditionalProps & {\r\n    message: VoiceTranscriptCommonMessage\r\n}\r\n\r\nexport interface MessageAdditionalProps {\r\n    itemId: string\r\n    direction: Direction\r\n    closeButton?: ReactElement\r\n    content: string\r\n    isHtml: boolean\r\n    isLink: boolean\r\n}\r\n\r\nexport const Message = React.forwardRef<HTMLDivElement, MessageProps>(({\r\n    message,\r\n    itemId,\r\n    direction,\r\n    closeButton,\r\n    isLink,\r\n    isHtml,\r\n    content,\r\n}, ref) => {\r\n    const {\r\n        endTime,\r\n        sentiment,\r\n        chatMessageData,\r\n    } = message\r\n\r\n    //Already sanitized in useVoiceTranscriptMessagesContentMap\r\n    const innerHTML = useInnerHTML(content)\r\n\r\n    const iconSrc = getTranscriptMessageIcon(message)\r\n    const messageId = getMessageId(message)\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    const bubbleElement = (\r\n        <SelectionItem\r\n            ref={ref}\r\n            itemId={messageId}\r\n            focusOnSelection\r\n            touchedOnly\r\n            tabIndex={0}\r\n            data-message-id-selection={messageId}\r\n            className={tcn(styles.message, styles[direction], {\r\n                [styles.html]: isHtml,\r\n                [styles.link]: isLink,\r\n                [styles.closable]: !!closeButton,\r\n                [styles.error]: chatMessageData?.displayType === 'error',\r\n            })}\r\n        >\r\n            <WithHoverOverActions messageId={messageId}>\r\n                <div\r\n                    dangerouslySetInnerHTML={innerHTML}\r\n                    onClickCapture={evt => {\r\n                        if (isLink) {\r\n                            evt.preventDefault()\r\n                            evt.stopPropagation()\r\n                            openLink(message)\r\n                        }\r\n                    }}\r\n                />\r\n            </WithHoverOverActions>\r\n            {closeButton}\r\n        </SelectionItem>\r\n    )\r\n\r\n    return (\r\n        <div className={tcn(styles.messageRow, styles[direction])}>\r\n            <div className={tcn(styles.time, styles[direction])}>{formatDate(endTime, 'h:mm A')}</div>\r\n            {bubbleElement}\r\n            {iconSrc && <Svg src={iconSrc} className={tcn(styles.icon, styles[direction])} />}\r\n            {sentiment && (\r\n                <Sentiment sentiment={sentiment} className={tcn(styles.sentiment, styles[direction])} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport botSuggestionIcon from './images/bot-suggestion.svg'\r\nimport facebookIcon from './images/facebook.svg'\r\nimport lineIcon from './images/line.svg'\r\nimport smsIcon from './images/sms.svg'\r\nimport telegramIcon from './images/telegram.svg'\r\nimport twitterIcon from './images/twitter.svg'\r\nimport viberIcon from './images/viber.svg'\r\nimport webChatIcon from './images/web-chat.svg'\r\nimport wechatIcon from './images/wechat.svg'\r\nimport whatsappIcon from './images/whatsapp.svg'\r\n\r\n\r\nexport function getTranscriptMessageIcon(transcriptMessage: VoiceTranscriptCommonMessage) {\r\n    if (isSuggestion(transcriptMessage)) {\r\n        return botSuggestionIcon\r\n    }\r\n    if (isCurrentChatTranscriptMessage(transcriptMessage) && transcriptMessage.chatMessageData.channel) {\r\n        switch (transcriptMessage.chatMessageData.channel) {\r\n            case 'sms':\r\n                return smsIcon\r\n            case 'whatsapp':\r\n                return whatsappIcon\r\n            case 'facebook':\r\n                return facebookIcon\r\n            case 'line':\r\n                return lineIcon\r\n            case 'telegram':\r\n                return telegramIcon\r\n            case 'twitter':\r\n                return twitterIcon\r\n            case 'viber':\r\n                return viberIcon\r\n            case 'web':\r\n                return webChatIcon\r\n            case 'wechat':\r\n                return wechatIcon\r\n        }\r\n    }\r\n}\r\n","import type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {normalizeExternalURL} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface ParseLinkParams {\r\n    text: string\r\n    url: string\r\n    target: string\r\n}\r\nexport function parseTranscriptLinksAsHTML({text, url, target}: ParseLinkParams) {\r\n    const parsedUrl = normalizeExternalURL(url)\r\n    return `<a href=${parsedUrl} target=\"${target}\">${text}</a>`\r\n}\r\n\r\nexport function chatMessageToVoiceTranscript(message: ChatMessage): ChatSessionTranscriptMessage {\r\n    return {\r\n        partyId: message.partyId,\r\n        msgId: message.msgId ?? '',\r\n        text: message.msg ?? '',\r\n        startTime: message.timestamp,\r\n        endTime: message.timestamp,\r\n        sentiment: message.sentiment,\r\n        type: 'chatMessage',\r\n        format: 'HTML',\r\n        isSelf: message.isSelf,\r\n        chatMessageData: message,\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport type {MessageProps} from '../../VoiceTranscript/messages/Message'\r\nimport {Message} from '../../VoiceTranscript/messages/Message'\r\nimport {parseTranscriptLinksAsHTML} from '../../VoiceTranscript/utils'\r\n\r\n\r\ntype BotSuggestionProps = Omit<MessageProps, 'content' | 'isLink' | 'isHtml'>\r\n\r\nexport const BotSuggestion: React.FC<BotSuggestionProps> = ({message, itemId, ...rest}) => {\r\n    const {text = ''} = message\r\n    const isHtml = isHTMLSuggestion(message)\r\n    const isLink = isLinkSuggestion(message)\r\n\r\n    const content = isLink\r\n        ? parseTranscriptLinksAsHTML({\r\n            text: message.text,\r\n            target: itemId,\r\n            url: message.suggestionURL,\r\n        })\r\n        : text\r\n\r\n\r\n    return (\r\n        <Message\r\n            message={message}\r\n            isHtml={isHtml}\r\n            isLink={isLink}\r\n            content={content}\r\n            itemId={itemId}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessageDate} from '../../../../../types'\r\n\r\n\r\ntype DateMessageProps = {\r\n    message: ChatMessageDate\r\n}\r\n\r\nexport const DateMessage: React.FC<DateMessageProps> = React.memo(function DateMessage({message}) {\r\n    return (\r\n        <div\r\n            className=\"text-neutral-on-fade words-break flex w-full select-none items-center justify-center gap-1 px-8 py-4 caption-s\"\r\n            data-testid=\"date-separator\"\r\n        >\r\n            {message}\r\n        </div>\r\n    )\r\n})\r\n","import {useCallback, useEffect, useMemo, useRef} from 'react'\r\n\r\nimport {\r\n    useInteractionChatStateMethods,\r\n    useInteractionChatStateSelector,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessageSource} from '@bpinc/ad-interaction-message-types'\r\nimport {useIntersectionObserver, usePageVisibility} from '@bpinc/lib-helpers'\r\n\r\nimport type {ChatScrollNodeType, HistoryMessage} from '../types'\r\n\r\n\r\ninterface UseMarkAsReadVisibilitySensor {\r\n    msgId?: string | undefined\r\n    scrollNode: ChatScrollNodeType\r\n    mediaType?: HistoryMessage['mediaType']\r\n    source?: MessageSource\r\n    isRead?: boolean\r\n    historyMessageGlobalInteractionId?: string\r\n\r\n    isDIDChat: boolean\r\n    itemGlobalInteractionId?: string\r\n    itemInteractionStepId: string\r\n    itemContactId: string\r\n}\r\n\r\nexport function useMarkAsReadVisibilitySensor({\r\n    msgId,\r\n    scrollNode,\r\n    mediaType,\r\n    isDIDChat,\r\n    itemInteractionStepId,\r\n    itemContactId,\r\n    itemGlobalInteractionId,\r\n    source,\r\n    isRead,\r\n    historyMessageGlobalInteractionId,\r\n}: UseMarkAsReadVisibilitySensor) {\r\n\r\n    const pageIsVisible = usePageVisibility()\r\n\r\n    const {markMessageAsRead, markPersonalMessageAsRead} = useInteractionChatStateMethods()\r\n\r\n    const unreadActivityHistory = useInteractionChatStateSelector(\r\n        s =>\r\n            !!itemContactId &&\r\n            !!msgId &&\r\n            !!historyMessageGlobalInteractionId &&\r\n            !!s.unreadPersonalMessages[itemContactId]?.[historyMessageGlobalInteractionId]?.[msgId],\r\n    )\r\n\r\n    const visibilitySensorIsActive = useMemo(() => {\r\n        if (!pageIsVisible) {\r\n            return false\r\n        }\r\n\r\n        if (isActivityHistoryMessage()) {\r\n            return unreadActivityHistory\r\n        }\r\n\r\n        return itemIsActivated() && isNotServiceMessage() && !isRead\r\n\r\n        function isActivityHistoryMessage() {\r\n            return mediaType\r\n        }\r\n        function itemIsActivated() {\r\n            return !!itemInteractionStepId\r\n        }\r\n\r\n        function isNotServiceMessage() {\r\n            return source === 'customer' || source === 'agent'\r\n        }\r\n    }, [itemInteractionStepId, isRead, mediaType, pageIsVisible, source, unreadActivityHistory])\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    const {isIntersecting} = useIntersectionObserver(ref, {\r\n        root: scrollNode,\r\n        enabled: visibilitySensorIsActive,\r\n    })\r\n\r\n    const markAsRead = useCallback(\r\n        function handleVisibleCallback(visible: boolean) {\r\n            if (visible) {\r\n                if (unreadActivityHistory) {\r\n                    if (historyMessageGlobalInteractionId) {\r\n                        markPersonalMessageAsRead({\r\n                            globalInteractionId: historyMessageGlobalInteractionId,\r\n                            messageId: msgId!,\r\n                            contactId: itemContactId,\r\n                        })\r\n                    }\r\n                } else if (msgId) {\r\n                    if (itemInteractionStepId) {\r\n                        markMessageAsRead({\r\n                            interactionStepId: itemInteractionStepId,\r\n                            messageId: msgId,\r\n                        })\r\n                    }\r\n                    if (itemGlobalInteractionId) {\r\n                        if (isDIDChat && itemContactId) {\r\n                            markPersonalMessageAsRead({\r\n                                globalInteractionId: itemGlobalInteractionId,\r\n                                messageId: msgId,\r\n                                contactId: itemContactId,\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [\r\n            unreadActivityHistory,\r\n            msgId,\r\n            markPersonalMessageAsRead,\r\n            historyMessageGlobalInteractionId,\r\n            itemContactId,\r\n            itemInteractionStepId,\r\n            itemGlobalInteractionId,\r\n            markMessageAsRead,\r\n            isDIDChat,\r\n        ],\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (isIntersecting && visibilitySensorIsActive) {\r\n            markAsRead(true)\r\n        }\r\n    }, [markAsRead, isIntersecting, visibilitySensorIsActive])\r\n\r\n    return ref\r\n}\r\n","import React from 'react'\r\n\r\nimport {Attachment} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ninterface AttachmentFileMessageProps {\r\n    fileName: string\r\n    fileLink: string\r\n}\r\n\r\nexport const AttachmentFileMessage = React.forwardRef<HTMLDivElement, AttachmentFileMessageProps>(({\r\n    fileLink,\r\n    fileName,\r\n}, attachmentRef) => {\r\n\r\n    return (\r\n        <div ref={attachmentRef}>\r\n            <Attachment.File height=\"44\" name={fileName} link={fileLink} withDownloadButton />\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport {AudioPlayer} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface AudioFileMessageProps {\r\n    fileLink: string\r\n}\r\n\r\nexport const AudioFileMessage: React.FC<AudioFileMessageProps> = ({fileLink}) => {\r\n    return (\r\n        <AudioPlayer src={fileLink} showDownloadButton isNewAudioPlayerUI />\r\n    )\r\n}\r\n","import type {HTMLAttributes} from 'react'\r\nimport React from 'react'\r\nimport * as Dialog from '@radix-ui/react-dialog'\r\n\r\nimport {formatChatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {IconClose24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface ImageFileMessageProps extends HTMLAttributes<HTMLImageElement> {\r\n    fileName: string\r\n    fileLink: string\r\n    senderName: string | undefined\r\n    timestamp: number\r\n}\r\n\r\nexport const ImageFileMessage = React.forwardRef<\r\n    HTMLImageElement,\r\n    ImageFileMessageProps\r\n>(\r\n    (\r\n        {\r\n            fileLink,\r\n            fileName,\r\n            className,\r\n            senderName,\r\n            timestamp,\r\n            ...htmlImageProps\r\n        },\r\n        ref,\r\n    ) => {\r\n        const open = useBoolean(false)\r\n\r\n        useEscapeManager(open.setFalse, {enabled: open.value})\r\n\r\n        return (\r\n            <Dialog.Root open={open.value} onOpenChange={open.toggle}>\r\n                <Dialog.Trigger asChild>\r\n                    <img\r\n                        ref={ref}\r\n                        {...htmlImageProps}\r\n                        className={tcn('cursor-zoom-in rounded-xs', className)}\r\n                        alt={fileName}\r\n                        src={fileLink}\r\n                        title={fileName}\r\n                        data-testid=\"attachment\"\r\n                        data-value={fileName}\r\n                    />\r\n                </Dialog.Trigger>\r\n                <Dialog.Portal>\r\n                    <Dialog.Overlay\r\n                        className={tcn(\r\n                            'fixed left-0 top-0 z-10 h-full w-full bg-inverse-overlay',\r\n                            'data-[state=open]:animate-fade-in-100',\r\n                            'data-state=[closed]:animate-fade-out-100',\r\n                        )}\r\n                    />\r\n                    <Dialog.Content\r\n                        className={tcn(\r\n                            'fixed left-1/2 top-1/2 z-20 max-h-[90vw] max-w-[90vw] -translate-x-1/2 -translate-y-1/2',\r\n                            'data-[state=open]:animate-fade-in-100',\r\n                            'data-state=[closed]:animate-fade-out-100',\r\n                        )}\r\n                    >\r\n                        <Dialog.Close className=\"absolute right-0 top-0 translate-y-[calc(-100%-10px)]\">\r\n                            <IconClose24 className=\"size-8 icon-reversed\" />\r\n                        </Dialog.Close>\r\n                        <img\r\n                            ref={ref}\r\n                            {...htmlImageProps}\r\n                            className={'h-auto w-auto'}\r\n                            alt={fileName}\r\n                            src={fileLink}\r\n                            title={fileName}\r\n                            data-testid=\"attachment\"\r\n                            data-value={fileName}\r\n                        />\r\n                        <p className=\"mt-2 caption-s text-inverse-disabled\">\r\n                            {fileName}\r\n                        </p>\r\n                        <p className=\"caption-s text-inverse-disabled\">\r\n                            <b className=\"text-inverse-disabled\">\r\n                                {senderName}\r\n                            </b>\r\n                            {', '}\r\n                            <b className=\"text-inverse-disabled\">\r\n                                {formatChatDate(timestamp)}\r\n                            </b>\r\n                        </p>\r\n                    </Dialog.Content>\r\n                </Dialog.Portal>\r\n            </Dialog.Root>\r\n        )\r\n    },\r\n)\r\n","import React from 'react'\r\n\r\nimport type {ActivityMediaType} from '@bpinc/ad-activities-state-types'\r\nimport type {MessageSource} from '@bpinc/ad-interaction-message-types'\r\nimport {paramsToQueryString, requestUrls} from '@bpinc/ad-request-urls'\r\nimport {FileProgress} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ExternalChatMessageFileData} from '../../../../../types'\r\nimport {WithAttachmentMaskAction} from '../../../ChatMessagesActions'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {AttachmentFileMessage} from './AttachmentFileMessage'\r\nimport {AudioFileMessage} from './AudioFileMessage'\r\nimport {ImageFileMessage} from './ImageFileMessage'\r\n\r\n\r\ninterface SessionProps {\r\n    id?: string\r\n    domain?: string\r\n    loginId?: string\r\n}\r\n\r\ninterface FileMessageContentProps {\r\n    canMask: boolean\r\n    session?: SessionProps\r\n    globalInteractionId?: string\r\n    mediaType?: ActivityMediaType | 'EMAIL' | 'VOICE_TRANSCRIPT' | 'REMOTE_ASSIST'\r\n    source?: MessageSource\r\n    isRead?: boolean\r\n    fileData: ExternalChatMessageFileData\r\n    markAsReadData: MarkAsReadProps\r\n    timestamp: number\r\n    senderName: string | undefined\r\n    msg?: string\r\n}\r\n\r\nexport const FileMessageContent: React.FC<FileMessageContentProps> = ({\r\n    session = {},\r\n    canMask,\r\n    mediaType,\r\n    source,\r\n    isRead,\r\n    fileData,\r\n    markAsReadData,\r\n    globalInteractionId,\r\n    msg,\r\n    senderName,\r\n    timestamp,\r\n}) => {\r\n    const {\r\n        refMsgId,\r\n        fileId = '',\r\n        fileType = 'attachment',\r\n        fileName = '',\r\n        fileProgress = 0,\r\n        fileError,\r\n        fileIsMasked = false,\r\n    } = fileData\r\n    const {id: sessionId, domain, loginId} = session\r\n    const queryString = paramsToQueryString({\r\n        token: sessionId,\r\n        user: loginId,\r\n        tenant: domain,\r\n        id: fileId,\r\n        no_disposition: 0,\r\n    })\r\n    const fileLink = `${requestUrls.getChatAttachmentDownload}?${queryString}`\r\n    const {t} = useLocalizationState()\r\n\r\n    const fileIsLoading = !fileId && !fileError\r\n\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId: refMsgId,\r\n        historyMessageGlobalInteractionId: globalInteractionId,\r\n        mediaType,\r\n        source,\r\n        isRead,\r\n        ...markAsReadData,\r\n    })\r\n\r\n    if (fileIsLoading && fileProgress) {\r\n        return <FileProgress progress={fileProgress} />\r\n    }\r\n\r\n    if (!fileId) {\r\n        const attachmentText = t.INTERNAL_CHAT.chat_removedAttachment_label()\r\n        return (\r\n            <>\r\n                <div>\r\n                    [\r\n                    {attachmentText}\r\n                    {' '}\r\n                    <del data-testid=\"file-name\">{fileName}</del>\r\n                    ]\r\n                </div>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileError) {\r\n        return (\r\n            <>\r\n                <div data-testid=\"file-error\">{fileError}</div>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileType === 'attachment' || fileType === 'video') {\r\n        return (\r\n            <>\r\n                <WithAttachmentMaskAction\r\n                    fileId={fileId}\r\n                    fileIsMasked={fileIsMasked}\r\n                    canMask={canMask}\r\n                    globalInteractionId={globalInteractionId}\r\n                    interactionStepId={markAsReadData.itemInteractionStepId}\r\n                    contactId={markAsReadData.itemContactId}\r\n                >\r\n                    <AttachmentFileMessage\r\n                        ref={ref}\r\n                        fileName={fileName}\r\n                        fileLink={fileLink}\r\n                    />\r\n                </WithAttachmentMaskAction>\r\n                {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (fileType === 'audio') {\r\n        return (\r\n            <WithAttachmentMaskAction\r\n                fileId={fileId}\r\n                fileIsMasked={fileIsMasked}\r\n                canMask={canMask}\r\n                globalInteractionId={globalInteractionId}\r\n                interactionStepId={markAsReadData.itemInteractionStepId}\r\n                contactId={markAsReadData.itemContactId}\r\n            >\r\n                <AudioFileMessage\r\n                    fileLink={fileLink}\r\n                />\r\n            </WithAttachmentMaskAction>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WithAttachmentMaskAction\r\n                fileId={fileId}\r\n                fileIsMasked={fileIsMasked}\r\n                canMask={canMask}\r\n                globalInteractionId={globalInteractionId}\r\n                interactionStepId={markAsReadData.itemInteractionStepId}\r\n                contactId={markAsReadData.itemContactId}\r\n            >\r\n                <ImageFileMessage\r\n                    ref={ref as React.RefObject<HTMLImageElement>}\r\n                    fileName={fileName}\r\n                    fileLink={fileLink}\r\n                    senderName={senderName}\r\n                    timestamp={timestamp}\r\n                />\r\n            </WithAttachmentMaskAction>\r\n            <p className=\"mt-1 caption-xs text-neutral-fade\">{fileName}</p>\r\n            {msg && (<div data-testid=\"message-content\">{msg}</div>)}\r\n        </>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"file\":\"communicator_FileMessage_file_JZUYk\",\"isError\":\"communicator_FileMessage_isError_gJF8O\",\"maskFilePopup\":\"communicator_FileMessage_maskFilePopup_KMI7v\",\"maskedFileImageWrapper\":\"communicator_FileMessage_maskedFileImageWrapper_TNxcX\",\"maskedAttachment\":\"communicator_FileMessage_maskedAttachment_TqLyM\",\"selectionPopupOption\":\"communicator_FileMessage_selectionPopupOption_wXL8h\",\"voice\":\"communicator_FileMessage_voice_fmzfp\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {getExternalChatMessageDisplayName} from '../../../../../helpers'\r\nimport type {ExternalChatMessage, ExternalChatMessageFileData} from '../../../../../types'\r\nimport {isHistoryMessage} from '../../../../../types'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {WithOptionalNameAndAvatar} from '../WithOptionalNameAndAvatar'\r\nimport {FileMessageContent} from './FileMessageContent'\r\n\r\nimport styles from './FileMessage.module.less'\r\n\r\n\r\ntype FileMessageProps = {\r\n    message: ExternalChatMessage\r\n    fileData: ExternalChatMessageFileData\r\n    markAsReadData: MarkAsReadProps\r\n}\r\n\r\nexport const FileMessage: React.FC<FileMessageProps> = ({message, fileData, markAsReadData}) => {\r\n    const {fileError, fileType} = fileData\r\n    const {sessionId, domain, loginId, privileges} = useSessionState()\r\n    const session = useMemo(() => ({id: sessionId, domain, loginId}), [sessionId, domain, loginId])\r\n    const canMask = !!privileges.CAN_MASK_INTERACTION_CONTENT\r\n    const globalInteractionId = isHistoryMessage(message) ? message.globalInteractionId : undefined\r\n    const isAudioFile = fileType === 'audio'\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar\r\n            message={message}\r\n            className={tcn(styles.file, {\r\n                [styles.isError]: fileError,\r\n                [styles.voice]: isAudioFile,\r\n            })}\r\n        >\r\n            <FileMessageContent\r\n                timestamp={message.timestamp}\r\n                senderName={getExternalChatMessageDisplayName(message, formatFullName)}\r\n                fileData={fileData}\r\n                markAsReadData={markAsReadData}\r\n                canMask={canMask}\r\n                session={session}\r\n                globalInteractionId={globalInteractionId}\r\n            />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useHandleCancelInviteClick} from './useHandleCancelInviteClick'\r\n\r\n\r\ntype InviteMessageProps = {\r\n    message: ChatMessage\r\n}\r\n\r\nexport const InviteMessage: React.FC<InviteMessageProps> = React.memo(({message}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleCancelClick = useHandleCancelInviteClick(message)\r\n\r\n    return (\r\n        <div className=\"select-none pb-2.5\" data-testid=\"message-item\" data-outgoing=\"true\" data-invitation=\"true\">\r\n            <span className=\"mr-[5px]\">{t.EXTERNAL_CHAT.external_chat_party_inviting()}</span>\r\n            <SemanticButton\r\n                size=\"mini\"\r\n                negative\r\n                onClick={handleCancelClick}\r\n                tooltip={t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                data-testid=\"cancel-invitation-button\"\r\n            >\r\n                {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n            </SemanticButton>\r\n        </div>\r\n    )\r\n})\r\n","import {useCallback} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\n\r\n\r\nexport function useHandleCancelInviteClick(message: ChatMessage) {\r\n    const {itemId, partyId, inviteId} = message\r\n    const {removeInviteFromChat} = useInteractionChatStateMethods()\r\n\r\n    return useCallback(\r\n        function handleCancelClickCallback() {\r\n            removeInviteFromChat({\r\n                itemId: itemId,\r\n                partyId: partyId,\r\n                messageId: inviteId || '',\r\n            })\r\n        },\r\n        [inviteId, itemId, partyId, removeInviteFromChat],\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {SmImage} from '@bpinc/lib-external-ui-elements'\r\nimport {iconLocation} from '@bpinc/lib-icons'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    link?: string\r\n    latitude?: number\r\n    longitude?: number\r\n}\r\n\r\nconst googleMapsUrl = (latitude: number, longitude: number) => {\r\n    return `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`\r\n}\r\n\r\nexport const LocationMessage: React.FC<Props> = ({link, latitude, longitude}) => {\r\n\r\n    const {EXTERNAL_CHAT: i18n} = useLocalizationState('t')\r\n    const url = link || ((latitude && longitude) ? googleMapsUrl(latitude, longitude) : undefined)\r\n\r\n    return (\r\n        <SmImage\r\n            src={iconLocation}\r\n            title={i18n.location_message_icon_tooltip()}\r\n            as=\"a\"\r\n            href={url}\r\n            target=\"_blank\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {IconOutboundCampaign} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {getMessageId} from '../../../../helpers'\r\nimport type {HistoryOutboundMessagingCampaignMessage} from '../../../../types'\r\nimport {MessageContent} from './MessageContent'\r\nimport {MessageTopInfo} from './MessageTopInfo'\r\n\r\nimport styles from '../../../../styles/Chat.module.less'\r\n\r\n\r\ntype OutboundMessagingCampaignMessageProps = {\r\n    message: HistoryOutboundMessagingCampaignMessage\r\n}\r\n\r\nexport const OutboundMessagingCampaignMessage: React.FC<OutboundMessagingCampaignMessageProps> = ({message}) => {\r\n    const {serviceName, serviceAddress, msg, timestamp} = message\r\n    const topInfo = `${serviceName} ${formatPhone(serviceAddress)}`\r\n    const id = getMessageId(message)\r\n\r\n    const sanitizedMessage = useChatMessageSanitizer({message: msg})\r\n\r\n    const messageInnerHTML = useInnerHTML(sanitizedMessage)\r\n\r\n    return (\r\n        <div\r\n            className={tcn(styles.messageBlock, styles.outgoing)}\r\n            data-testid=\"message-item\"\r\n            data-outgoing-campaign=\"true\"\r\n            data-outgoing=\"true\"\r\n        >\r\n            <div className={styles.messageWrapper}>\r\n                <MessageTopInfo\r\n                    direction=\"outgoing\"\r\n                    timestamp={timestamp}\r\n                    showName\r\n                    gapBeforeTime\r\n                    displayName={topInfo}\r\n                />\r\n                <section className={tcn(styles.message, styles.outgoing)}>\r\n                    <MessageContent messageId={id}>\r\n                        <span dangerouslySetInnerHTML={messageInnerHTML} />\r\n                    </MessageContent>\r\n                </section>\r\n            </div>\r\n            <IconOutboundCampaign className={styles.avatar} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {IconSendInvitation, Link} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface PageLinkMessageProps {\r\n    link: string\r\n    partyId?: string\r\n    title?: string\r\n}\r\n\r\nexport const PageLinkMessage: React.FC<PageLinkMessageProps> = ({\r\n    link,\r\n    title,\r\n    partyId,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const item = useActiveInteraction()\r\n    const partyData = item?.chatParties?.find(party => party.party_id === partyId)\r\n    const contactId = partyData?.contact_id\r\n    const contactData = useContact(contactId)?.data\r\n    const {formatFullName} = useFormatting()\r\n    const displayNameContact = formatFullName(contactData?.firstName, contactData?.lastName)\r\n    const partyName = formatFullName(partyData?.first_name, partyData?.last_name)\r\n    const externalChatName = formatFullName(item?.externalChatData?.firstName, item?.externalChatData?.lastName)\r\n    const displayNameText = displayNameContact || partyName || externalChatName || !!contactData?.phones?.length && contactData?.phones?.[0]?.phone\r\n        || !!contactData?.emails?.length && contactData?.emails[0]?.emailAddress || t.EXTERNAL_CHAT.display_name_placeholder()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center bg-transparent py-4\">\r\n            <div className=\"flex flex-wrap items-center justify-center\">\r\n                <IconSendInvitation className=\"mr-2 size-4 icon-default\" />\r\n                {displayNameText && (<span className=\"mr-1 font-semibold caption-s text-neutral-on-secondary\">{displayNameText}</span>)}\r\n                <span className=\"caption-s text-neutral-fade\">\r\n                    {t.ACTIVITY_HISTORY.navigate_to()}\r\n                </span>\r\n                <Link\r\n                    href={link}\r\n                    title={link}\r\n                    data-testid=\"link\"\r\n                    className=\"!caption-s\"\r\n                >\r\n                    {title || t.EXTERNAL_CHAT.external_chat_customer_navigates_to()}\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype VoiceTranscriptConfidenceProps = {\r\n    confidence: number\r\n    className?: string\r\n}\r\n\r\nfunction hsv2rgb(h: number, s: number, v: number) {\r\n    // adapted from http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/\r\n    let rgb, i, data = []\r\n    if (s === 0) {\r\n        rgb = [v, v, v]\r\n    } else {\r\n        h = h / 60\r\n        i = Math.floor(h)\r\n        data = [v * (1 - s), v * (1 - s * (h - i)), v * (1 - s * (1 - (h - i)))]\r\n        switch (i) {\r\n            case 0:\r\n                rgb = [v, data[2], data[0]]\r\n                break\r\n            case 1:\r\n                rgb = [data[1], v, data[0]]\r\n                break\r\n            case 2:\r\n                rgb = [data[0], v, data[2]]\r\n                break\r\n            case 3:\r\n                rgb = [data[0], data[1], v]\r\n                break\r\n            case 4:\r\n                rgb = [data[2], data[0], v]\r\n                break\r\n            default:\r\n                rgb = [v, data[0], data[1]]\r\n                break\r\n        }\r\n    }\r\n    return '#' + rgb.map(code => {\r\n        return ('0' + Math.round(code * 255).toString(16)).slice(-2)\r\n    }).join('')\r\n}\r\n\r\ntype ConfidenceGrade = 'high' | 'medium' | 'low'\r\n\r\nexport const VoiceTranscriptConfidence: React.FC<VoiceTranscriptConfidenceProps> = ({className, confidence}) => {\r\n\r\n    const {t} = useLocalizationState()\r\n    const color = hsv2rgb(Math.floor(confidence * 120), .66, 1)\r\n    const style = useMemo(() => ({backgroundColor: color}), [color])\r\n\r\n    const confidenceGrade: ConfidenceGrade = confidence > .7 ? 'high' : confidence > .4 ? 'medium' : 'low'\r\n    const confidencePercentage = Math.floor(confidence * 100)\r\n\r\n    const messages = useMemo<Record<ConfidenceGrade, string>>(() => ({\r\n        'high': t.ACTIVITY_HISTORY.call_message_transcript_confidence_high(),\r\n        'medium': t.ACTIVITY_HISTORY.call_message_transcript_confidence_medium(),\r\n        'low': t.ACTIVITY_HISTORY.call_message_transcript_confidence_low(),\r\n    }), [t])\r\n    const title = messages[confidenceGrade] + ` (${confidencePercentage}%)`\r\n\r\n    return (\r\n        <span\r\n            className={className}\r\n            style={style}\r\n            title={title}\r\n            data-testid=\"message-confidence\"\r\n            data-value={confidencePercentage}\r\n            data-confidence-low={confidenceGrade === 'low'}\r\n            data-confidence-medium={confidenceGrade === 'medium'}\r\n            data-confidence-high={confidenceGrade === 'high'}\r\n        />\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"plainMessage\":\"communicator_PlainMessage_plainMessage_gEaYP\",\"sentiment\":\"communicator_PlainMessage_sentiment_jQ32U\",\"sentimentLeft\":\"communicator_PlainMessage_sentimentLeft_Uh6NW\",\"sentimentRight\":\"communicator_PlainMessage_sentimentRight_kUWim\",\"visible\":\"communicator_PlainMessage_visible_kcCDF\"};","import React from 'react'\r\n\r\nimport {CHAT_MESSAGE_ALLOWED_ATTRIBUTES, CHAT_MESSAGE_ALLOWED_TAGS} from '@bpinc/ad-constants'\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useInnerHTML} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useChatSentimentsOn} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ExternalChatMessage} from '../../../../../types'\r\nimport {isChatMessage, isHistoryMessage, isHistoryVoiceTranscriptMessage} from '../../../../../types'\r\nimport type {MarkAsReadProps} from '../../ExternalChatMessage'\r\nimport {VoiceTranscriptConfidence} from '../../VoiceTranscriptConfidence'\r\n\r\nimport styles from './PlainMessage.module.less'\r\n\r\n\r\ntype PlainMessageProps = {\r\n    message: ExternalChatMessage\r\n    markAsReadData: MarkAsReadProps\r\n}\r\n\r\nexport const PlainMessage: React.FC<PlainMessageProps> = ({\r\n    markAsReadData,\r\n    message,\r\n}) => {\r\n    const {\r\n        scrollNode,\r\n        itemGlobalInteractionId,\r\n        itemInteractionStepId,\r\n        isDIDChat,\r\n        itemContactId,\r\n        interactionItemId,\r\n    } = markAsReadData\r\n\r\n    const {msgId, userId} = message\r\n\r\n    const isHistory = isHistoryMessage(message)\r\n    const mediaType = isHistory ? message.mediaType : undefined\r\n    const globalInteractionId = isHistory ? message.globalInteractionId : undefined\r\n    const confidence = isHistoryVoiceTranscriptMessage(message) ? message.confidence : undefined\r\n\r\n    const isChat = isChatMessage(message)\r\n    const source = isChat ? message.source : undefined\r\n    const sentiment = isChat ? message.sentiment : undefined\r\n    const isRead = isChat ? message.isRead : undefined\r\n    const maskedText = isChat ? message.maskedText : undefined\r\n\r\n    const msg = isChat || isHistory ? message.msg : undefined\r\n\r\n    const sanitizedText = useChatMessageSanitizer({\r\n        message: msg,\r\n        allowedAttributes: CHAT_MESSAGE_ALLOWED_ATTRIBUTES,\r\n        allowedTags: CHAT_MESSAGE_ALLOWED_TAGS,\r\n    })\r\n    const messageInnerHTML = useInnerHTML(maskedText || sanitizedText)\r\n    const chatSentimentsOn = useChatSentimentsOn(interactionItemId)\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId,\r\n        historyMessageGlobalInteractionId: globalInteractionId,\r\n        scrollNode,\r\n        mediaType,\r\n        source,\r\n        isRead,\r\n        itemContactId,\r\n        isDIDChat,\r\n        itemInteractionStepId,\r\n        itemGlobalInteractionId,\r\n    })\r\n\r\n    return (\r\n        <div data-message-id={msgId} data-global-interaction-id={globalInteractionId ?? 'current'} ref={ref}>\r\n            {userId && sentiment && (\r\n                <Sentiment\r\n                    sentiment={sentiment}\r\n                    className={tcn({[styles.visible]: chatSentimentsOn}, styles.sentimentLeft)}\r\n                />\r\n            )}\r\n            {userId && confidence && (\r\n                <VoiceTranscriptConfidence confidence={confidence} />\r\n            )}\r\n\r\n            <span\r\n                dangerouslySetInnerHTML={messageInnerHTML}\r\n                className={styles.plainMessage}\r\n                data-testid=\"message-content\"\r\n            />\r\n\r\n            {!userId && sentiment && (\r\n                <Sentiment\r\n                    sentiment={sentiment}\r\n                    className={tcn({[styles.visible]: chatSentimentsOn}, styles.sentimentRight)}\r\n                />\r\n            )}\r\n            {!userId && confidence && (\r\n                <VoiceTranscriptConfidence confidence={confidence} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\nimport {IconJoin, IconLeaveParty} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const useGetSystemMessageIcon = () => {\r\n    return useCallback((message: ChatMessage) => {\r\n        switch (message.eventType) {\r\n            case 'external_chat_party_joined_new':\r\n                if (message.qmMode !== 'whisper') {\r\n                    return <IconJoin className=\"size-4 icon-default\" />\r\n                }\r\n                return null\r\n            case 'external_chat_party_left_new':\r\n                return <IconLeaveParty className=\"size-4 icon-default\" />\r\n            default:\r\n                return null\r\n        }\r\n    }, [])\r\n}\r\n\r\nconst useGetTypeReceivedData = () => {\r\n    const {t} = useLocalizationState()\r\n    return useCallback((message: string) => {\r\n        switch (message) {\r\n            case 'external_chat_file_received':\r\n                return t.EXTERNAL_CHAT.file()\r\n            case 'external_chat_contact_received':\r\n                return t.EXTERNAL_CHAT.contact()\r\n            case 'external_chat_url_received':\r\n                return t.EXTERNAL_CHAT.url()\r\n            default:\r\n                return null\r\n        }\r\n    }, [t.EXTERNAL_CHAT])\r\n}\r\n\r\nexport const useGetTextContentSystemMessage = () => {\r\n    const {t} = useLocalizationState()\r\n    const getTypeReceivedData = useGetTypeReceivedData()\r\n    return useCallback((msg: ChatMessage) => {\r\n        const name = `\"${msg.partyName}\"`\r\n        if (msg.needLocalization && msg.eventType && msg.partyName && msg.msg) {\r\n            switch (msg.eventType) {\r\n                case 'external_chat_party_joined_new':\r\n                case 'external_chat_party_left_new':\r\n                    return (\r\n                        <>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{msg.partyName}</span>\r\n                            <span className=\"caption-s text-neutral-fade\">{msg.msg}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_party_coaching':\r\n                    return (\r\n                        <>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{msg.partyName}</span>\r\n                            <span className=\"caption-s text-neutral-fade\">{t.EXTERNAL_CHAT.external_chat_party_coaching_new()}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_file_received':\r\n                case 'external_chat_contact_received':\r\n                case 'external_chat_url_received':\r\n                    return (\r\n                        <>\r\n                            <span className=\"caption-s text-neutral-fade\">{getTypeReceivedData(msg.eventType)}</span>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{name}</span>\r\n                            <span>{t.EXTERNAL_CHAT.received()}</span>\r\n                        </>\r\n                    )\r\n                case 'external_chat_file_sent':\r\n                    return (\r\n                        <>\r\n                            <span className=\"caption-s text-neutral-fade\">{t.EXTERNAL_CHAT.external_chat_file_sent_new()}</span>\r\n                            <span className=\"font-semibold caption-s text-neutral-on-secondary\">{name}</span>\r\n                        </>\r\n                    )\r\n                default:\r\n                    return <span className=\"caption-s text-neutral-fade\">{msg.msg}</span>\r\n            }\r\n\r\n        }\r\n    }, [getTypeReceivedData, t.EXTERNAL_CHAT])\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ChatMessage} from '@bpinc/ad-interaction-message-types'\r\n\r\nimport {useGetSystemMessageIcon, useGetTextContentSystemMessage} from './utils'\r\n\r\n\r\ntype SystemMessageProps = {\r\n    message: ChatMessage\r\n}\r\n\r\nexport const SystemMessage: React.FC<SystemMessageProps> = ({message}) => {\r\n    const getTextContentSystemMessage = useGetTextContentSystemMessage()\r\n    const getSystemMessageIcon = useGetSystemMessageIcon()\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-center pb-2.5\">\r\n            <div\r\n                className=\"flex flex-col\"\r\n                data-testid=\"message-item\"\r\n                data-system=\"true\"\r\n            >\r\n                <div className=\"flex items-center gap-2\">\r\n                    {getSystemMessageIcon(message)}\r\n                    <div className=\"flex items-center gap-1\">\r\n                        {getTextContentSystemMessage(message)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {\r\n    getExternalChatFileData,\r\n    isErrorExternalChatMessage,\r\n    isInviteExternalChatMessage,\r\n    isLocationExternalChatMessage,\r\n    isSystemExternalChatMessage,\r\n} from '../../../helpers'\r\nimport type {ChatScrollNodeType, ExternalChatMessageWithDate} from '../../../types'\r\nimport {\r\n    isActivityMessageGroup,\r\n    isChatMessage,\r\n    isChatMessageDate,\r\n    isHistoryCallMessage,\r\n    isHistoryEmailMessage,\r\n    isHistoryOutboundMessagingCampaignMessage,\r\n    isHistoryRemoteAssistMessage,\r\n    isVoiceTranscriptSuggestion,\r\n} from '../../../types'\r\nimport {ActivityMessageGroup} from './messages/ActivityMessageGroup'\r\nimport {BotSuggestion} from './messages/BotSuggestion'\r\nimport {DateMessage} from './messages/DateMessage'\r\nimport {FileMessage} from './messages/FileMessage'\r\nimport {InviteMessage} from './messages/InviteMessage'\r\nimport {LocationMessage} from './messages/LocationMessage'\r\nimport {OutboundMessagingCampaignMessage} from './messages/OutboundMessagingCampaignMessage'\r\nimport {PageLinkMessage} from './messages/PageLinkMessage'\r\nimport {PlainMessage} from './messages/PlainMessage'\r\nimport {SystemMessage} from './messages/SystemMessage'\r\nimport {WithOptionalNameAndAvatar} from './messages/WithOptionalNameAndAvatar'\r\n\r\n\r\nexport type MarkAsReadProps = {\r\n    scrollNode: ChatScrollNodeType\r\n    itemInteractionStepId: string\r\n    itemContactId: string\r\n    isDIDChat: boolean\r\n    itemGlobalInteractionId: string\r\n    interactionItemId: string\r\n}\r\n\r\ntype ExternalChatMessageProps = MarkAsReadProps & {\r\n    message: ExternalChatMessageWithDate | VoiceTranscriptSuggestion\r\n}\r\n\r\nexport const ExternalChatMessage: React.FC<ExternalChatMessageProps> = React.memo(function ExternalChatMessage({\r\n    message,\r\n    scrollNode,\r\n    itemInteractionStepId,\r\n    itemContactId,\r\n    isDIDChat,\r\n    itemGlobalInteractionId,\r\n    interactionItemId,\r\n}) {\r\n    const markAsReadData = useMemo(() => ({scrollNode,\r\n        itemInteractionStepId,\r\n        itemContactId,\r\n        isDIDChat,\r\n        itemGlobalInteractionId,\r\n        interactionItemId}), [interactionItemId, isDIDChat, itemContactId, itemGlobalInteractionId, itemInteractionStepId, scrollNode])\r\n\r\n    const fileData = useMemo(() => {\r\n        if (isVoiceTranscriptSuggestion(message)) {\r\n            return\r\n        }\r\n        return getExternalChatFileData(message)\r\n    }, [message])\r\n\r\n    if (isVoiceTranscriptSuggestion(message)) {\r\n        return <BotSuggestion itemId={interactionItemId} direction=\"outgoing\" message={message} />\r\n    }\r\n\r\n    if (isChatMessageDate(message)) {\r\n        return <DateMessage message={message} />\r\n    }\r\n\r\n    if (isActivityMessageGroup(message)) {\r\n        return <ActivityMessageGroup message={message} />\r\n    }\r\n\r\n    if (isHistoryOutboundMessagingCampaignMessage(message)) {\r\n        return <OutboundMessagingCampaignMessage message={message} />\r\n    }\r\n\r\n    if (isHistoryCallMessage(message)) {\r\n        return (\r\n            <WithOptionalNameAndAvatar\r\n                messageClassName=\"w-full\"\r\n                className=\"min-w-[300px]\"\r\n                message={message}\r\n            >\r\n                {message.msg}\r\n            </WithOptionalNameAndAvatar>\r\n        )\r\n    }\r\n    if (isHistoryEmailMessage(message)) {\r\n        return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n    }\r\n\r\n    if (isChatMessage(message)) {\r\n        if (isSystemExternalChatMessage(message)) {\r\n            return <SystemMessage message={message} />\r\n        }\r\n        if (isInviteExternalChatMessage(message)) {\r\n            return <InviteMessage message={message} />\r\n        }\r\n        if (isErrorExternalChatMessage(message)) {\r\n            return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n        }\r\n        if (isLocationExternalChatMessage(message)) {\r\n            const {page, longitude, latitude} = message\r\n            return (\r\n                <WithOptionalNameAndAvatar message={message}>\r\n                    <LocationMessage link={page} longitude={longitude} latitude={latitude} />\r\n                </WithOptionalNameAndAvatar>\r\n            )\r\n        }\r\n\r\n        const {page, title, partyId} = message\r\n        if (page) {\r\n            return (\r\n                <WithOptionalNameAndAvatar\r\n                    message={message}\r\n                    isFullWidth\r\n                    withoutBorder\r\n                    messageClassName=\"w-full !border-none !bg-transparent after:content-none before:content-none\"\r\n                >\r\n                    <PageLinkMessage link={page} title={title} partyId={partyId} />\r\n                </WithOptionalNameAndAvatar>\r\n            )\r\n        }\r\n    }\r\n\r\n    if (fileData) {\r\n        return <FileMessage markAsReadData={markAsReadData} message={message} fileData={fileData} />\r\n    }\r\n\r\n    if (isHistoryRemoteAssistMessage(message)) {\r\n        return <WithOptionalNameAndAvatar message={message}>{message.msg}</WithOptionalNameAndAvatar>\r\n    }\r\n\r\n    return (\r\n        <WithOptionalNameAndAvatar message={message}>\r\n            <PlainMessage message={message} markAsReadData={markAsReadData} />\r\n        </WithOptionalNameAndAvatar>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react'\r\n\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId} from '@bpinc/ad-interaction-state-methods'\r\nimport {ErrorBoundary} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType} from '../../../types'\r\nimport {isVoiceTranscriptMessage, isVoiceTranscriptSuggestion} from '../../../types'\r\nimport {VirtualizedMessages} from '../VirtualizedMessages/VirtualizedMessages'\r\nimport {ErrorMessage} from './messages/ErrorMessage'\r\nimport {ExternalChatMessage} from './ExternalChatMessage'\r\n\r\n\r\nconst ErrorBoundaryFallback = <ErrorMessage>Broken message</ErrorMessage>\r\n\r\ntype VirtualizedExternalMessagesProps = {\r\n    messages: ChatCommonMessagesType[]\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    type: ChatType\r\n    interactionStepId: string\r\n}\r\n\r\nexport const VirtualizedExternalMessages = React.memo<VirtualizedExternalMessagesProps>(\r\n    function VirtualizedExternalMessages({\r\n        itemId,\r\n        contactId,\r\n        scrollNode,\r\n        interactionStepId,\r\n        messages,\r\n        type,\r\n    }) {\r\n        const isDIDChat = useInteractionProp(itemId, item => item?.scenarioData?.isDID ?? false)\r\n        const globalInteractionId = useInteractionProp(itemId, getGlobalInteractionId) ?? ''\r\n        const renderMessage = useCallback((message: ChatCommonMessagesType) => {\r\n            if (isVoiceTranscriptMessage(message) && !isVoiceTranscriptSuggestion(message)) {\r\n                return null\r\n            }\r\n\r\n            return (\r\n                <div data-message=\"true\">\r\n                    <ErrorBoundary fallback={ErrorBoundaryFallback}>\r\n                        <ExternalChatMessage\r\n                            message={message}\r\n                            scrollNode={scrollNode}\r\n                            interactionItemId={itemId}\r\n                            itemContactId={contactId}\r\n                            itemInteractionStepId={interactionStepId}\r\n                            itemGlobalInteractionId={globalInteractionId}\r\n                            isDIDChat={isDIDChat}\r\n                        />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            )\r\n        }, [contactId, globalInteractionId, interactionStepId, isDIDChat, itemId, scrollNode])\r\n\r\n        return (\r\n            <VirtualizedMessages\r\n                key={`${itemId}_${type}`}\r\n                itemId={itemId}\r\n                contactId={contactId}\r\n                type={type}\r\n                messages={messages}\r\n                renderMessage={renderMessage}\r\n                scrollNode={scrollNode}\r\n            />\r\n        )\r\n    })\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"communicator_ExternalMessages_messagesContainer_mpPuU\",\"messages\":\"communicator_ExternalMessages_messages_istRY\"};","import React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId, getInteractionStepId, isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport type {SelectionOrigin} from '@bpinc/lib-ui-elements'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi, useInteractionUIChatType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatProps, ChatScrollNodeType} from '../../../types'\r\nimport {isExternalChatMessageDate, isHistoryMessage, isVoiceTranscriptMessage} from '../../../types'\r\nimport {ChatMessagesSelectionActions} from '../ChatMessagesActions'\r\nimport {useBotSuggestionsByType} from '../VoiceTranscript/selectors'\r\nimport {Dropzone} from './Dropzone'\r\nimport {ScrollToFirstUnreadBadge} from './ScrollToFirstUnreadBadge'\r\nimport {useNormalizedMessagesWithDates} from './useMessages'\r\nimport {VirtualizedExternalMessages} from './VirtualizedExternalMessages'\r\n\r\nimport styles from './ExternalMessages.module.less'\r\n\r\n\r\nexport const ExternalMessages: React.FC<ChatProps> = React.memo(function ExternalMessages({\r\n    itemId,\r\n}) {\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const [scrollNode, setScrollNode] = useState<ChatScrollNodeType>(null)\r\n\r\n    const type = useInteractionUIChatType(itemId)\r\n    const interaction = useInteraction(itemId)\r\n    const contactId = getContactId(interaction)\r\n    const interactionStepId = getInteractionStepId(interaction)\r\n\r\n    const botSuggestionsByType = useBotSuggestionsByType(itemId)\r\n    const botSuggestions = useMemo(() => {\r\n        switch (type) {\r\n            case 'calls':\r\n                return botSuggestionsByType.voice\r\n            case 'messages':\r\n                return botSuggestionsByType.chat\r\n            default:\r\n                return [...botSuggestionsByType.voice, ...botSuggestionsByType.chat]\r\n        }\r\n\r\n    }, [botSuggestionsByType.chat, botSuggestionsByType.voice, type])\r\n\r\n    const {messagesWithDates} = useNormalizedMessagesWithDates(\r\n        type,\r\n        contactId,\r\n        itemId,\r\n        botSuggestions,\r\n    )\r\n\r\n    const itemIsACW = useInteractionProp(itemId, isAfterCallWork)\r\n\r\n    const itemsIds = useMemo(() => {\r\n        return messagesWithDates\r\n            .filter(isSelectableMessage)\r\n            .map(getMessageId)\r\n    }, [messagesWithDates])\r\n    const itemsIdsRef = useAsRef(itemsIds)\r\n    const itemsProvider = useCallback(() => itemsIdsRef.current, [itemsIdsRef])\r\n    const onItemSelect = useCallback((id: string, selectionOrigin: SelectionOrigin | undefined) => {\r\n        if (selectionOrigin === 'keys') {\r\n            scrollerApi?.scrollTo(id, 'center')\r\n        }\r\n    }, [scrollerApi])\r\n\r\n    return (\r\n        <SelectionContainer\r\n            startFrom=\"bottom\"\r\n            className={styles.messagesContainer}\r\n            itemsListProvider={itemsProvider}\r\n            onItemSelect={onItemSelect}\r\n        >\r\n            {!itemIsACW && <Dropzone itemId={itemId} />}\r\n            <div ref={setScrollNode} className={styles.messages}>\r\n                <ChatMessagesSelectionActions messages={messagesWithDates} interactionId={itemId} scrollContainer={scrollNode} withMaskAction>\r\n                    <VirtualizedExternalMessages\r\n                        messages={messagesWithDates}\r\n                        scrollNode={scrollNode}\r\n                        itemId={itemId}\r\n                        contactId={contactId}\r\n                        type={type}\r\n                        interactionStepId={interactionStepId}\r\n                    />\r\n                </ChatMessagesSelectionActions>\r\n            </div>\r\n            <ScrollToFirstUnreadBadge itemId={itemId} scrollNode={scrollNode} />\r\n        </SelectionContainer>\r\n    )\r\n})\r\n\r\nfunction isSelectableMessage(message: ChatCommonMessagesType) {\r\n    if (isVoiceTranscriptMessage(message)) {\r\n        return true\r\n    }\r\n\r\n    return !(isExternalChatMessageDate(message) || (isHistoryMessage(message) && message.mediaType === 'REMOTE_ASSIST'))\r\n\r\n\r\n}\r\n\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo, useState} from 'react'\r\nimport {createContext, useContext} from 'use-context-selector'\r\n\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport type {FCWithChildren, StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {VoiceTranscriptSearchResultType} from '../../../types'\r\n\r\n\r\ninterface VoiceTranscriptUIState {\r\n    search: string\r\n    setSearch: StateSetter<string>\r\n\r\n    searchResult: VoiceTranscriptSearchResultType | undefined\r\n    setSearchResult: StateSetter<VoiceTranscriptSearchResultType | undefined>\r\n\r\n    showBotSuggestions: boolean\r\n    toggleBotSuggestions: Toggle\r\n\r\n    showSMS: boolean\r\n    toggleSMS: Toggle\r\n\r\n    showTranscript: boolean\r\n    toggleTranscript: Toggle\r\n}\r\n\r\nconst noop = () => {}\r\n\r\nconst initialState: VoiceTranscriptUIState = {\r\n    search: '',\r\n    setSearch: noop,\r\n\r\n    searchResult: undefined,\r\n    setSearchResult: noop,\r\n\r\n    showBotSuggestions: true,\r\n    toggleBotSuggestions: noop,\r\n\r\n    showSMS: true,\r\n    toggleSMS: noop,\r\n\r\n    showTranscript: true,\r\n    toggleTranscript: noop,\r\n}\r\n\r\nconst VoiceTranscriptUIContext = createContext<VoiceTranscriptUIState>(initialState)\r\n\r\nVoiceTranscriptUIContext.displayName = 'VoiceTranscriptUIContext'\r\n\r\nexport const VoiceTranscriptStateProvider: FCWithChildren<ReactElement> = ({children}) => {\r\n    const [search, setSearch] = useState<VoiceTranscriptUIState['search']>(initialState.search)\r\n    const [searchResult, setSearchResult] = useState<VoiceTranscriptUIState['searchResult']>(undefined)\r\n    const {value: showBotSuggestions, toggle: toggleBotSuggestions} = useBoolean(initialState.showBotSuggestions)\r\n    const {value: showSMS, toggle: toggleSMS} = useBoolean(initialState.showSMS)\r\n    const {value: showTranscript, toggle: toggleTranscript} = useBoolean(initialState.showTranscript)\r\n\r\n    const contextValue = useMemo(function memoizeContextValue() {\r\n        return {\r\n            search,\r\n            setSearch,\r\n\r\n            searchResult,\r\n            setSearchResult,\r\n\r\n            showBotSuggestions,\r\n            toggleBotSuggestions,\r\n\r\n            showSMS,\r\n            toggleSMS,\r\n\r\n            showTranscript,\r\n            toggleTranscript,\r\n        }\r\n    }, [search, searchResult, showBotSuggestions, showSMS, showTranscript, toggleBotSuggestions, toggleSMS, toggleTranscript])\r\n\r\n    return <VoiceTranscriptUIContext.Provider value={contextValue}>{children}</VoiceTranscriptUIContext.Provider>\r\n}\r\n\r\nexport function useVoiceTranscriptUIState() {\r\n    return useContext(VoiceTranscriptUIContext)\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {\r\n    ButtonIcon,\r\n    IconIntentFilled,\r\n    IconMessageExternal,\r\n    IconVoiceTranscript,\r\n    SearchField,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SearchResultsSwitcher} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {VoiceTranscriptMessageContentMap, VoiceTranscriptSearchResultType} from '../../../types'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype FiltersProps = {\r\n    className?: string\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    itemId: string\r\n}\r\n\r\nexport const Filters: FC<FiltersProps> = ({className, messagesContent, itemId}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        search,\r\n        setSearch,\r\n        setSearchResult,\r\n        showBotSuggestions,\r\n        showSMS,\r\n        showTranscript,\r\n        toggleBotSuggestions,\r\n        toggleSMS,\r\n        toggleTranscript,\r\n    } = useVoiceTranscriptUIState()\r\n\r\n    const [searchLocal, setSearchLocal] = useState(search)\r\n    const [highlightIndex, setHighlightIndex] = useState<number | undefined>(undefined)\r\n\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n\r\n    const setDebouncedSearch = useMemo(() => debounce((innerValue: string) => {\r\n        setSearch(innerValue)\r\n    }, 500), [setSearch])\r\n\r\n    const filteredResults = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            if (!search) {\r\n                return []\r\n            }\r\n            return Object.entries(messagesContent).reduce<VoiceTranscriptSearchResultType[]>((result, [messageId, {marksCount}]) => {\r\n                const markers = Array.from({length: marksCount}).map((_, index) => ({\r\n                    messageId,\r\n                    index,\r\n                })).reverse()\r\n                return [...markers, ...result]\r\n            }, [])\r\n\r\n        },\r\n        [search, messagesContent],\r\n    )\r\n\r\n    useEffect(() => {\r\n        setDebouncedSearch(searchLocal)\r\n    }, [searchLocal, setDebouncedSearch])\r\n\r\n    useEffect(() => {\r\n        if (highlightIndex) {\r\n            const searchResult = filteredResults[highlightIndex - 1]\r\n            setSearchResult(searchResult)\r\n            if (searchResult && searchResult.messageId) {\r\n                scrollerApi?.scrollTo(searchResult.messageId, 'center')\r\n            }\r\n        } else {\r\n            setSearchResult(undefined)\r\n        }\r\n    }, [filteredResults, scrollerApi, highlightIndex, setSearchResult])\r\n\r\n\r\n    const handleHighlight = useCallback(\r\n        function handleHighlightedMessageCallback(position: number) {\r\n            setHighlightIndex(position)\r\n        },\r\n        [],\r\n    )\r\n\r\n    const handleSearch = useCallback(\r\n        function handleSearchCallback(evt: ChangeEvent<HTMLInputElement>) {\r\n            setSearchLocal(evt.target.value)\r\n            setHighlightIndex(1)\r\n        },\r\n        [],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn('flex items-center gap-2 px-4 py-2 bg-primary-background', className)}>\r\n            <SearchField\r\n                value={searchLocal}\r\n                onChange={handleSearch}\r\n                layoutClassName=\"grow\"\r\n                placeholder={t.EXTERNAL_CHAT.search_transcript()}\r\n            />\r\n            {!!searchLocal &&\r\n              <SearchResultsSwitcher current={highlightIndex || 0} total={filteredResults.length} onChange={handleHighlight} />\r\n            }\r\n            <div className=\"flex items-center gap-0.5\">\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showBotSuggestions}\r\n                    onClick={toggleBotSuggestions}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.bot_suggestion_btn_tooltip()}\r\n                >\r\n                    <IconIntentFilled className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    disabled={!showSMS}\r\n                    onClick={toggleSMS}\r\n                    className=\"rounded-xs\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.sms_btn_tooltip()}\r\n                >\r\n                    <IconMessageExternal className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n                <ButtonIcon\r\n                    size=\"40\"\r\n                    tooltip={t.VOICE_TRANSCRIPT.transcript_btn_tooltip()}\r\n                    disabled={!showTranscript}\r\n                    onClick={toggleTranscript}\r\n                    className=\"rounded-xs\"\r\n                >\r\n                    <IconVoiceTranscript className=\"size-6 icon-disabled\" />\r\n                </ButtonIcon>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"communicator_VoiceTranscript_root_rV7hU\",\"list\":\"communicator_VoiceTranscript_list_OyGEE\",\"selectionContainer\":\"communicator_VoiceTranscript_selectionContainer_ftUaB\",\"filters\":\"communicator_VoiceTranscript_filters_Ik63Q\",\"filtersRight\":\"communicator_VoiceTranscript_filtersRight_hhmng\",\"searchInput\":\"communicator_VoiceTranscript_searchInput_eIydo\",\"filterButton\":\"communicator_VoiceTranscript_filterButton_fuvI7\",\"mark\":\"communicator_VoiceTranscript_mark_t17ja\",\"highlighted\":\"communicator_VoiceTranscript_highlighted_6A15l\"};","import {useMemo} from 'react'\r\nimport {orderBy} from 'lodash-es'\r\n\r\nimport type {ChatMessage as ChatMessageType, VoiceTranscriptMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {chatMessageToVoiceTranscript} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\n\r\ntype UseVoiceTranscriptVisibleMessagesParams = {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[]\r\n    botSuggestions: VoiceTranscriptSuggestion[]\r\n    chatMessages: ChatMessageType[]\r\n}\r\nexport function useVoiceTranscriptVisibleMessages({chatMessages, voiceTranscript, botSuggestions}: UseVoiceTranscriptVisibleMessagesParams) {\r\n    const {showBotSuggestions, showTranscript, showSMS} = useVoiceTranscriptUIState()\r\n\r\n    const visibleMessages = useMemo(\r\n        function memoizeVisibleMessages() {\r\n            const allMessages = showSMS\r\n                ? orderBy([...voiceTranscript, ...botSuggestions, ...getSMSMessagesForTranscript()], 'endTime')\r\n                : [...voiceTranscript]\r\n\r\n            return allMessages.filter(m => {\r\n                return filterByType(m.type)\r\n            })\r\n\r\n            function filterByType(type: VoiceTranscriptMessageType) {\r\n                const allowType = {\r\n                    voiceTranscriptMessage: showTranscript,\r\n                    suggestion: showBotSuggestions,\r\n                    chatMessage: showSMS,\r\n                }\r\n\r\n                return allowType[type]\r\n            }\r\n\r\n            function getSMSMessagesForTranscript(): VoiceTranscriptCommonMessage[] {\r\n                return chatMessages.filter(message => message.displayType === 'message' || message.displayType === 'error').map(chatMessageToVoiceTranscript)\r\n            }\r\n        },\r\n\r\n\r\n        [botSuggestions, chatMessages, showBotSuggestions, showSMS, showTranscript, voiceTranscript],\r\n    )\r\n\r\n    return visibleMessages\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatSessionTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useMarkAsReadVisibilitySensor} from '../../../../hooks/useMarkAsReadVisibilitySensor'\r\nimport type {ChatScrollNodeType} from '../../../../types'\r\nimport type {MessageAdditionalProps} from './Message'\r\nimport {Message} from './Message'\r\n\r\n\r\ntype ChatMessageProps = MessageAdditionalProps & {\r\n    itemContactId?: string\r\n    itemInteractionStepId?: string\r\n    isDIDChat: boolean\r\n    scrollNode: ChatScrollNodeType\r\n    message: ChatSessionTranscriptMessage\r\n}\r\nexport const ChatMessage: FC<ChatMessageProps> = ({\r\n    itemContactId = '',\r\n    itemInteractionStepId = '',\r\n    scrollNode,\r\n    isDIDChat,\r\n    message,\r\n    ...restProps\r\n}) => {\r\n    const ref = useMarkAsReadVisibilitySensor({\r\n        msgId: message.msgId,\r\n        itemInteractionStepId,\r\n        itemContactId,\r\n\r\n        scrollNode,\r\n        source: message.chatMessageData.source,\r\n        isRead: message.chatMessageData.isRead,\r\n        isDIDChat,\r\n    })\r\n\r\n    return <Message message={message} {...restProps} ref={ref} />\r\n}\r\n","import type {FC, ReactNode} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\ntype SearchResultHighlightProps = {\r\n    messageId: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const SearchResultHighlight: FC<SearchResultHighlightProps> = ({messageId, children}) => {\r\n    const {searchResult} = useVoiceTranscriptUIState()\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (ref.current && searchResult && searchResult.messageId === messageId) {\r\n            const highlightedMarkElem = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            highlightedMarkElem.classList.add(styles.highlighted)\r\n\r\n            const markElement = ref.current.querySelectorAll<HTMLElement>('mark')?.[searchResult.index]\r\n            markElement?.scrollIntoView({block: 'center'})\r\n\r\n            return () => highlightedMarkElem.classList.remove(styles.highlighted)\r\n        }\r\n    }, [messageId, searchResult])\r\n\r\n    return (\r\n        <div ref={ref} data-message-highlight={messageId}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatCommonMessagesType, ChatScrollNodeType, VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {isVoiceTranscriptMessage} from '../../../types'\r\nimport {VirtualizedMessages} from '../VirtualizedMessages/VirtualizedMessages'\r\nimport {ChatMessage} from './messages/ChatMessage'\r\nimport {Message} from './messages/Message'\r\nimport {SearchResultHighlight} from './SearchResultHighlight'\r\n\r\n\r\ntype VirtualizedVoiceTranscriptMessagesProps = {\r\n    messages: VoiceTranscriptCommonMessage[]\r\n    messagesContent: VoiceTranscriptMessageContentMap\r\n    scrollNode: ChatScrollNodeType\r\n    itemId: string\r\n    contactId: string\r\n    interactionStepId: string\r\n}\r\n\r\nexport const VirtualizedVoiceTranscriptMessages = React.memo<VirtualizedVoiceTranscriptMessagesProps>(\r\n    function VirtualizedVoiceTranscriptMessages({\r\n        itemId,\r\n        contactId,\r\n        scrollNode,\r\n        messages,\r\n        interactionStepId,\r\n        messagesContent,\r\n    }) {\r\n        const isDIDChat = useInteractionProp(itemId, item => item?.scenarioData?.isDID ?? false)\r\n\r\n        const renderMessage = useCallback((message: ChatCommonMessagesType) => {\r\n            if (!isVoiceTranscriptMessage(message)) {\r\n                return null\r\n            }\r\n\r\n            const messageId = getMessageId(message)\r\n            const messageData = messagesContent[messageId]\r\n\r\n            if (!messageData) {\r\n                return null\r\n            }\r\n\r\n            const direction =\r\n                message.isSelf || message.type === 'suggestion'\r\n                    ? 'outgoing'\r\n                    : 'incoming'\r\n\r\n            return (\r\n                <SearchResultHighlight messageId={messageId}>\r\n                    <div data-message=\"true\">\r\n                        {\r\n                            isCurrentChatTranscriptMessage(message) ? (\r\n                                <ChatMessage\r\n                                    isDIDChat={isDIDChat}\r\n                                    scrollNode={scrollNode}\r\n                                    itemContactId={contactId}\r\n                                    itemInteractionStepId={interactionStepId}\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            ) : (\r\n                                <Message\r\n                                    direction={direction}\r\n                                    itemId={itemId}\r\n                                    message={message}\r\n                                    content={messageData.content}\r\n                                    isLink={messageData.isLink}\r\n                                    isHtml={messageData.isHTML}\r\n                                />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </SearchResultHighlight>\r\n            )\r\n        }, [contactId, interactionStepId, isDIDChat, itemId, messagesContent, scrollNode])\r\n\r\n        return (\r\n            <VirtualizedMessages\r\n                key={`${itemId}_transcript`}\r\n                itemId={itemId}\r\n                contactId={contactId}\r\n                type=\"transcript\"\r\n                messages={messages}\r\n                renderMessage={renderMessage}\r\n                scrollNode={scrollNode}\r\n            />\r\n        )\r\n    })\r\n\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\n\r\nimport type {ChatMessage as ChatMessageType} from '@bpinc/ad-interaction-message-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId, getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {VoiceTranscriptCommonMessage, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIChatScrollerApi} from '@bpinc/state-interaction-ui'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {ChatScrollNodeType} from '../../../types'\r\nimport {ChatMessagesSelectionActions} from '../ChatMessagesActions'\r\nimport {Filters} from './Filters'\r\nimport {useVoiceTranscriptMessagesContentMap} from './useVoiceTranscriptMessagesContentMap'\r\nimport {useVoiceTranscriptVisibleMessages} from './useVoiceTranscriptVisibleMessages'\r\nimport {VirtualizedVoiceTranscriptMessages} from './VirtualizedVoiceTranscriptMessages'\r\n\r\n\r\ninterface VoiceTranscriptProps {\r\n    voiceTranscript: VoiceTranscriptCommonMessage[] | undefined\r\n    botSuggestions: VoiceTranscriptSuggestion[] | undefined\r\n    chatMessages: ChatMessageType[] | undefined\r\n    itemId: string\r\n    className?: string\r\n    filtersClassName?: string\r\n}\r\n\r\nconst emptyChatMessages: ChatMessageType[] = []\r\nconst emptyTranscript: VoiceTranscriptCommonMessage[] = []\r\nconst emptySuggestions: VoiceTranscriptSuggestion[] = []\r\n\r\nexport const VoiceTranscript: FC<VoiceTranscriptProps> = ({\r\n    chatMessages = emptyChatMessages,\r\n    voiceTranscript = emptyTranscript,\r\n    botSuggestions = emptySuggestions,\r\n    itemId,\r\n    className,\r\n    filtersClassName,\r\n}) => {\r\n    const scrollerApi = useInteractionUIChatScrollerApi(itemId)\r\n    const [scrollNode, setScrollNode] = useState<ChatScrollNodeType>(null)\r\n    const interaction = useInteraction(itemId)\r\n    const contactId = getContactId(interaction)\r\n    const interactionStepId = getInteractionStepId(interaction)\r\n\r\n    const visibleMessages = useVoiceTranscriptVisibleMessages({voiceTranscript, chatMessages, botSuggestions})\r\n    const messagesContent = useVoiceTranscriptMessagesContentMap(visibleMessages, itemId)\r\n\r\n    const itemsIds = useMemo(() => visibleMessages.map(getMessageId), [visibleMessages])\r\n    const itemsIdsRef = useAsRef(itemsIds)\r\n    const itemsProvider = useCallback(() => itemsIdsRef.current, [itemsIdsRef])\r\n    const onItemSelect = useCallback((id: string) => {\r\n        scrollerApi?.scrollTo(id, 'center')\r\n    }, [scrollerApi])\r\n\r\n    return (\r\n        <div className={tcn('flex h-full flex-col', className)}>\r\n            <Filters className={filtersClassName} messagesContent={messagesContent} itemId={itemId} />\r\n            <SelectionContainer\r\n                startFrom=\"bottom\"\r\n                className=\"mt-1 flex h-0 flex-auto flex-col\"\r\n                itemsListProvider={itemsProvider}\r\n                onItemSelect={onItemSelect}\r\n            >\r\n                <div\r\n                    className=\"relative mr-1.5 flex-auto overflow-y-auto overflow-x-hidden pl-4 pr-2\"\r\n                    ref={setScrollNode}\r\n                >\r\n                    <ChatMessagesSelectionActions messages={visibleMessages} interactionId={itemId} scrollContainer={scrollNode}>\r\n                        <VirtualizedVoiceTranscriptMessages\r\n                            itemId={itemId}\r\n                            contactId={contactId}\r\n                            messages={visibleMessages}\r\n                            interactionStepId={interactionStepId}\r\n                            scrollNode={scrollNode}\r\n                            messagesContent={messagesContent}\r\n                        />\r\n                    </ChatMessagesSelectionActions>\r\n                </div>\r\n            </SelectionContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {normalizeByUrlParser} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {VoiceTranscriptCommonMessage} from '@bpinc/ad-interaction-state-types'\r\nimport {isCurrentChatTranscriptMessage, isHTMLSuggestion, isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {highlightHTML} from '@bpinc/lib-html-utils'\r\n\r\nimport {getMessageId} from '../../../helpers'\r\nimport type {VoiceTranscriptMessageContentMap} from '../../../types'\r\nimport {parseTranscriptLinksAsHTML} from './utils'\r\nimport {useVoiceTranscriptUIState} from './VoiceTranscriptContext'\r\n\r\nimport styles from './VoiceTranscript.module.less'\r\n\r\n\r\nexport function useVoiceTranscriptMessagesContentMap(messages: VoiceTranscriptCommonMessage[], itemId: string) {\r\n    const {search} = useVoiceTranscriptUIState()\r\n\r\n    return useMemo(() => {\r\n        return messages.reduce<VoiceTranscriptMessageContentMap>((result, message) => {\r\n            const {format = 'TEXT'} = message\r\n            const id = getMessageId(message)\r\n            let text = message.text\r\n\r\n            const isCurrentChatMessage = isCurrentChatTranscriptMessage(message)\r\n            if (isCurrentChatMessage) {\r\n                text = normalizeByUrlParser(message.text)\r\n            }\r\n\r\n            const parsedText = format === 'TEXT'\r\n                ? text\r\n                : parseTranscriptLinksAsHTML({\r\n                    text: message.text,\r\n                    target: itemId,\r\n                    url: message.suggestionURL || '',\r\n                })\r\n\r\n\r\n            const content = highlightHTML({html: parsedText, textToHighlight: search, className: styles.mark})\r\n            const marksCount = (content.match(new RegExp(escapeRegExp(styles.mark), 'g')) || []).length\r\n\r\n            result[id] = {\r\n                content,\r\n                marksCount,\r\n                isLink: isLinkSuggestion(message),\r\n                isHTML: isHTMLSuggestion(message),\r\n            }\r\n\r\n            return result\r\n        }, {})\r\n    }, [itemId, messages, search])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedCallItem} from '@bpinc/ad-interaction-state-methods'\r\n\r\nimport {useMessagesList} from '../../../hooks/useMessagesList'\r\nimport type {ChatProps} from '../../../types'\r\nimport {VoiceTranscript, VoiceTranscriptStateProvider} from './index'\r\nimport {useBotSuggestions} from './selectors'\r\n\r\n\r\nexport const VoiceTranscriptMessages: React.FC<ChatProps> = React.memo(function ExternalMessages({\r\n    itemId,\r\n}) {\r\n    const callItem = useInteractionStateSelector(state => getAssociatedCallItem({item: state.items.find(i => i.id === itemId), items: state.items}))\r\n    const botSuggestions = useBotSuggestions(itemId)\r\n    const {messagesList} = useMessagesList(itemId)\r\n\r\n    if (!callItem) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <VoiceTranscriptStateProvider>\r\n            <VoiceTranscript\r\n                botSuggestions={botSuggestions}\r\n                voiceTranscript={callItem?.voiceTranscript}\r\n                chatMessages={messagesList}\r\n                itemId={callItem?.id}\r\n            />\r\n        </VoiceTranscriptStateProvider>\r\n    )\r\n})\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconArrowDown8, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {getChannelImageIcon, PhoneOption} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useInitializeDefaultChannelEffect} from './useInitializeDefaultChannelEffect'\r\n\r\n\r\ninterface ChannelSelectorProps {\r\n    disabled?: boolean\r\n}\r\n\r\nexport const ChannelSelector: React.FC<ChannelSelectorProps> = React.memo(\r\n    function ChannelSelector({disabled}) {\r\n        const itemId = useInteractionId()\r\n\r\n        useInitializeDefaultChannelEffect()\r\n\r\n        const {channelOptions, getSelectedChannel, getSelectedPhone, setSelectedChannel} =\r\n            useChannelState()\r\n\r\n        const selectedPhone = getSelectedPhone(itemId)\r\n        const selectedChannel = getSelectedChannel(itemId)\r\n        /*\r\n         * Use effect that ensures a valid channel is selected when the channel options change.\r\n         * If no channel is currently selected or the selected channel is not present in the updated\r\n         * options, then the first option is selected as the new current channel.\r\n         */\r\n        useEffect(\r\n            function selectFirstValidChannel() {\r\n                if (\r\n                    channelOptions.length &&\r\n                    (!selectedChannel?.value ||\r\n                        channelOptions.every(\r\n                            o => o.value !== selectedChannel.value,\r\n                        ))\r\n                ) {\r\n                    setSelectedChannel(itemId, channelOptions[0])\r\n                }\r\n            },\r\n            [channelOptions, itemId, selectedChannel?.value, setSelectedChannel],\r\n        )\r\n\r\n\r\n        const show = useBoolean()\r\n\r\n        useEscapeManager(show.setFalse, {enabled: show.value})\r\n\r\n        if (!channelOptions.length) {\r\n            return null\r\n        }\r\n\r\n        const SelectedIcon = getChannelImageIcon(selectedChannel?.value)\r\n        const finalDisabled =\r\n            disabled ||\r\n            (channelOptions.length < 2 &&\r\n                (channelOptions[0]?.phones?.length ?? 0) < 2)\r\n\r\n        return (\r\n            <TriggerDropdown\r\n                open={show.value}\r\n                onOpenChange={show.toggle}\r\n                disabled={finalDisabled}\r\n                className=\"min-w-[168px]\"\r\n                modal={false}\r\n                side=\"top\"\r\n                onEscapeKeyDown={e => {\r\n                    e.stopPropagation()\r\n                }}\r\n                align=\"start\"\r\n                data-testid=\"channel-selector\"\r\n                options={\r\n                    <>\r\n                        {channelOptions.map(channel => {\r\n                            function renderChannel() {\r\n                                const Icon = getChannelImageIcon(channel.value)\r\n                                return (\r\n                                    <>\r\n                                        {Icon && (\r\n                                            <Icon className=\"icon-neutral\" />\r\n                                        )}\r\n                                        {channel.text}\r\n                                    </>\r\n                                )\r\n                            }\r\n\r\n                            return channel.phones ? (\r\n                                <TriggerDropdown.Sub key={channel.value}>\r\n                                    <TriggerDropdown.SubTrigger contentClassName=\"flex items-center gap-2\">\r\n                                        {renderChannel()}\r\n                                    </TriggerDropdown.SubTrigger>\r\n                                    <TriggerDropdown.SubContent>\r\n                                        {channel.phones.map(phone => (\r\n                                            <TriggerDropdown.Item\r\n                                                asChild={false}\r\n                                                data-selected={phone.id === selectedPhone?.id}\r\n                                                aria-selected={phone.id === selectedPhone?.id}\r\n                                                onClick={() => {\r\n                                                    setSelectedChannel(\r\n                                                        itemId,\r\n                                                        channel,\r\n                                                        phone.id,\r\n                                                    )\r\n                                                }}\r\n                                                key={phone.id}\r\n                                            >\r\n                                                <PhoneOption\r\n                                                    value={phone.phone}\r\n                                                    type={phone.type}\r\n                                                />\r\n                                            </TriggerDropdown.Item>\r\n                                        ))}\r\n                                    </TriggerDropdown.SubContent>\r\n                                </TriggerDropdown.Sub>\r\n                            ) : (\r\n                                <TriggerDropdown.Item\r\n                                    onClick={() => {\r\n                                        setSelectedChannel(itemId, channel)\r\n                                    }}\r\n                                    key={channel.value}\r\n                                    asChild={false}\r\n                                    contentClassName=\"flex gap-2\"\r\n                                >\r\n                                    {renderChannel()}\r\n                                </TriggerDropdown.Item>\r\n                            )\r\n                        })}\r\n                    </>\r\n                }\r\n            >\r\n                <CircleButton className=\"group flex w-auto shrink-0 gap-0.5 p-[7.5px]\">\r\n                    {SelectedIcon && <SelectedIcon />}\r\n                    {!finalDisabled && (\r\n                        <IconArrowDown8 className=\"group-data-[state=open]:rotate-180\" />\r\n                    )}\r\n                </CircleButton>\r\n            </TriggerDropdown>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useMemo} from 'react'\r\nimport {escapeRegExp} from 'lodash-es'\r\n\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getChannel, hasMultiplyPhones} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport type {ChannelOption} from '../../../channel-context/types'\r\n\r\n\r\nexport function useInitializeDefaultChannelEffect() {\r\n    const itemId = useInteractionId()\r\n    const itemChannel = useAssociatedChatInteractionProp(itemId, getChannel)\r\n    const phoneNumber = useAssociatedChatInteractionProp(itemId, chatActiveItem => chatActiveItem?.displayData?.number)\r\n    const itemHasMultiplyPhones = useAssociatedChatInteractionProp(itemId, hasMultiplyPhones)\r\n\r\n    const {isTouched, setIsTouched, channelOptions, setSelectedChannel} = useChannelState()\r\n\r\n    //-------Initialize default channel-----//\r\n    /* based on item's multiply phones and own channel */\r\n    const defaultChannel = useMemo(\r\n        function memoizeDefaultChannel() {\r\n            if (itemChannel) {\r\n                return itemHasMultiplyPhones ? getChannelWhenMultiplyPhones() : getChannelWhenOnePhone()\r\n            }\r\n\r\n            if (itemHasMultiplyPhones && phoneNumber) {\r\n                return getChannelWhenMultiplyPhones()\r\n            }\r\n\r\n            return getSMSChannel()\r\n\r\n            function getChannelWhenMultiplyPhones() {\r\n                return (\r\n                    channelOptions.find((item: ChannelOption) =>\r\n                        !itemChannel || itemChannel === 'sms'\r\n                            ? new RegExp(escapeRegExp(phoneNumber) ?? '').test(item.value)\r\n                            : item.value === itemChannel,\r\n                    ) || channelOptions[0]\r\n                )\r\n            }\r\n\r\n            function getChannelWhenOnePhone() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === itemChannel)\r\n            }\r\n\r\n            function getSMSChannel() {\r\n                return channelOptions.find((item: ChannelOption) => item.value === 'sms')\r\n            }\r\n        },\r\n        [itemChannel, itemHasMultiplyPhones, phoneNumber, channelOptions],\r\n    )\r\n\r\n    const currentItemTouched = isTouched(itemId)\r\n\r\n    useEffect(function selecteDefaultChannel() {\r\n        if (!currentItemTouched && defaultChannel) {\r\n            setSelectedChannel(itemId, defaultChannel)\r\n        }\r\n    }, [currentItemTouched, defaultChannel, itemId, setIsTouched, setSelectedChannel])\r\n\r\n}\r\n","import type {FormEvent, SyntheticEvent} from 'react'\r\nimport React, {useRef} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {CircleButton, FieldFrame, IconSendFilled} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {AttachmentsList, ContentEditable} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useAgentTypingDetect} from './useAgentTypingDetect'\r\nimport {useAttachmentsList} from './useAttachmentsList'\r\nimport {useHasMultipleLines} from './useHasMultipleLines'\r\n\r\n\r\ntype ChatTextAreaProps = {\r\n    currentMessage: string\r\n    handleKeyDown(evt: SyntheticEvent): void\r\n    handleChange(evt: FormEvent<HTMLElement>, value?: string): void\r\n    sendCurrentMessage: () => void\r\n    disabled?: boolean\r\n    interactionStepId?: string\r\n    itemId: string\r\n    isExternalChat?: boolean\r\n}\r\n\r\nexport const TEXT_AREA_DATA_ID = 'chat-input'\r\n\r\nexport const ChatTextArea: React.FC<ChatTextAreaProps> = React.memo(\r\n    function TextArea({\r\n        currentMessage,\r\n        handleKeyDown,\r\n        handleChange,\r\n        disabled,\r\n        isExternalChat,\r\n        interactionStepId,\r\n        sendCurrentMessage,\r\n        itemId,\r\n    }) {\r\n        const isAttachmentsListReady = useChatAttachmentsUIState(\r\n            'isAttachmentsListReady',\r\n        )\r\n        const chatItem = useInteraction(itemId)\r\n        assertDefined(chatItem)\r\n\r\n        const partyWithoutAddress =\r\n            chatItem?.itemKind === 'potential'\r\n                ? !chatItem.contactId && !chatItem?.displayData?.number\r\n                : false\r\n\r\n        const {t} = useLocalizationState()\r\n        const handleBlur = useAgentTypingDetect([currentMessage], {\r\n            interactionStepId,\r\n            isExternalChat,\r\n        })\r\n        const {getSelectedChannel} = useChannelState()\r\n\r\n        const isSmsChannel =\r\n            getSelectedChannel(itemId)?.value.startsWith('sms')\r\n\r\n        const attachmentsList = useAttachmentsList(itemId)\r\n\r\n        const sendButtonDisabled =\r\n            !isAttachmentsListReady(interactionStepId ?? '') ||\r\n            isAfterCallWork(chatItem) ||\r\n            partyWithoutAddress ||\r\n            (!currentMessage.trim() && !attachmentsList.length)\r\n\r\n        const removeAttachment = useChatAttachmentsUIState('removeAttachment')\r\n        const contentEditableRef = useRef<HTMLDivElement>(null)\r\n        const hasMultipleLines = useHasMultipleLines(contentEditableRef)\r\n        assertDefined(interactionStepId)\r\n\r\n        return (\r\n            <FieldFrame\r\n                disabled={disabled}\r\n                contentClassName=\"p-0 overflow-hidden\"\r\n                className=\"max-h-36 flex-auto items-end overflow-hidden px-2 py-1.5\"\r\n                data-testid=\"chat-text-area\"\r\n            >\r\n                <div className=\"flex flex-auto flex-col gap-1 overflow-hidden\">\r\n                    <AttachmentsList\r\n                        className={tcn('flex flex-wrap gap-1 overflow-auto', {\r\n                            'flex-nowrap': hasMultipleLines,\r\n                        })}\r\n                        list={attachmentsList}\r\n                        removeAttachment={removeAttachment}\r\n                        attachmentsListGroupId={interactionStepId}\r\n                    />\r\n                    <div className=\"flex cursor-text items-end overflow-hidden\">\r\n                        <ContentEditable\r\n                            ref={contentEditableRef}\r\n                            data-testid=\"chat-text-area-input\"\r\n                            onKeyDown={handleKeyDown}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className=\"h-full w-full overflow-auto\"\r\n                            placeholder={t.INTERNAL_CHAT.message_input_placeholder()}\r\n                            plainTextOnly={isSmsChannel}\r\n                            data-id={TEXT_AREA_DATA_ID}\r\n                            value={currentMessage}\r\n                            disabled={disabled}\r\n                        />\r\n                        <CircleButton\r\n                            className={tcn(\r\n                                'size-6 state-layer-bg-primary-600',\r\n                                'hover:state-layer-mix-dark-on-teal-1',\r\n                                'focus-visible:state-layer-mix-dark-on-teal-2',\r\n                                'active:state-layer-mix-dark-on-teal-3',\r\n                                {\r\n                                    'bg-primary-container-disabled':\r\n                                        sendButtonDisabled,\r\n                                },\r\n                            )}\r\n                            onClick={sendCurrentMessage}\r\n                            tooltip={{\r\n                                content:\r\n                                    t.EXTERNAL_CHAT.send_message_btn_tooltip(),\r\n                            }}\r\n                            disabled={sendButtonDisabled}\r\n                            //TODO: Add throttle\r\n                            // clickThrottle={500}\r\n                            data-testid=\"send-button\"\r\n                        >\r\n                            <IconSendFilled\r\n                                className={tcn('size-4 icon-reversed', {\r\n                                    'icon-disabled': sendButtonDisabled,\r\n                                })}\r\n                            />\r\n                        </CircleButton>\r\n                    </div>\r\n                </div>\r\n            </FieldFrame>\r\n        )\r\n    },\r\n)\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\n\r\n\r\ninterface UseAgentTypingDetectParams {\r\n    interactionStepId?: string\r\n    isExternalChat?: boolean\r\n}\r\nexport function useAgentTypingDetect(dependencies: unknown[], {interactionStepId = '', isExternalChat}: UseAgentTypingDetectParams) {\r\n    const [timerValue, setTimerValue] = useState<number>(0)\r\n    const [isTyping, setTyping] = useState<boolean>(false)\r\n    const [isSending, setSendingValue] = useState<boolean>(false)\r\n    const {sendAgentIsTyping, sendAgentIsNotTyping} = useInteractionChatStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            const interval = setInterval(() => {\r\n                setTimerValue(currentTimerValue => currentTimerValue + 1)\r\n            }, 1000)\r\n            return () => clearInterval(interval)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isExternalChat])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat) {\r\n            let timeout: number\r\n\r\n            if (!isTyping) {\r\n                setTyping(true)\r\n                setSendingValue(false)\r\n            }\r\n            setTimerValue(0)\r\n            if (!isSending) {\r\n                if (dependencies.filter(Boolean).length) {\r\n                    sendAgentIsTyping(interactionStepId)\r\n                }\r\n                setSendingValue(true)\r\n                timeout = setTimeout(() => {\r\n                    setSendingValue(false)\r\n                }, 5000)\r\n            }\r\n\r\n            return () => clearTimeout(timeout)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [...dependencies, isExternalChat])\r\n\r\n    useEffect(() => {\r\n        if (isExternalChat && timerValue > 10 && isTyping) {\r\n            sendAgentIsNotTyping(interactionStepId)\r\n            setTyping(false)\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [isTyping, interactionStepId, sendAgentIsNotTyping, timerValue, isExternalChat])\r\n\r\n    function stopTyping() {\r\n        setTyping(false)\r\n        sendAgentIsNotTyping(interactionStepId)\r\n    }\r\n\r\n    function empty() {\r\n        return\r\n    }\r\n\r\n    return isExternalChat ? stopTyping : empty\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\n\r\n\r\nexport function useAttachmentsList(itemId: string) {\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const getAttachmentsList = useChatAttachmentsUIState('getAttachmentsList')\r\n\r\n    return useMemo(function memoizeAttachmentsList() {\r\n        return getAttachmentsList(interactionStepId)\r\n    }, [getAttachmentsList, interactionStepId])\r\n\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useHasMultipleLines(contentEditableRef: React.RefObject<HTMLElement>) {\r\n    const [hasMultipleLines, setHasMultipleLines] = useState(false)\r\n    const contentEditableROEntry = useResizeObserver(contentEditableRef)\r\n\r\n    useEffect(() => {\r\n        if (contentEditableROEntry) {\r\n            const lineHeight = computeLineHeight(\r\n                contentEditableROEntry.target,\r\n            )\r\n            const height = computeHeight(contentEditableROEntry.target)\r\n\r\n            setHasMultipleLines(height > lineHeight)\r\n        }\r\n\r\n        function computeLineHeight(element: Element) {\r\n            const result =\r\n              parseFloat(window.getComputedStyle(element).lineHeight) ||\r\n              0\r\n            return isNaN(result) ? 0 : result\r\n        }\r\n\r\n        function computeHeight(element: Element) {\r\n            return element.clientHeight\r\n        }\r\n    }, [contentEditableROEntry])\r\n\r\n    return hasMultipleLines\r\n\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useSetAtom} from 'jotai'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {getInteractionStepId, isCall, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {not, useDidUnmount} from '@bpinc/lib-helpers'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {type InjectedFileInputProps, withFileInput} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {getFileRejection} from '../../../helpers'\r\nimport {useInitiateChatByAttachment} from '../../../hooks/useInitiateChatByAttachment'\r\nimport {UploadErrorModal} from './UploadErrorModal'\r\n\r\n\r\ninterface InvisibleAttachButtonProps {\r\n    disabled?: boolean\r\n    chatItem: Item\r\n    buttonElementAtom: PrimitiveAtom<HTMLButtonElement | null>\r\n}\r\n\r\n/** It's invisible, and uncontrolled like every other file input element.\r\n * To control it, you need to pass the buttonElementAtom throuth the props\r\n * Ane later you can use the buttonElementAtom to trigger the click event like this:\r\n * const buttonElement = useAtomValue(buttonElementAtom)\r\n * buttonElement?.click()\r\n */\r\nexport const InvisibleAttachButton: React.FC<InvisibleAttachButtonProps> = ({\r\n    disabled = false,\r\n    chatItem,\r\n    buttonElementAtom,\r\n}) => {\r\n    const setAttachmentButtonElement = useSetAtom(buttonElementAtom)\r\n\r\n    const {\r\n        addAttachment,\r\n        fileRejections,\r\n        setFileRejections,\r\n        isAttachmentsListReady,\r\n        getAttachmentsList,\r\n    } = useChatAttachmentsUIState([\r\n        'addAttachment',\r\n        'fileRejections',\r\n        'setFileRejections',\r\n        'isAttachmentsListReady',\r\n        'getAttachmentsList',\r\n    ])\r\n    const shouldInitiateChat =\r\n        isPotentialInteraction(chatItem) || isCall(chatItem)\r\n    const interactionStepId = getInteractionStepId(chatItem)\r\n\r\n    const {t} = useLocalizationState()\r\n    const openUploadErrorModal = useModalComponentOpener(UploadErrorModal)\r\n    const handleUploadFiles = useCallback(\r\n        (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            addFilesToAttachmentsList()\r\n\r\n            function addFilesToAttachmentsList() {\r\n                const files = getFilesFromEvent()\r\n                if (!files) {\r\n                    return\r\n                }\r\n\r\n                const getLocalizedFileError = partial(getFileRejection, t)\r\n                const fileRejection = truthy(files.map(getLocalizedFileError))\r\n                const validFiles = files.filter(not(getLocalizedFileError))\r\n\r\n                if (fileRejection.length) {\r\n                    openUploadErrorModal({\r\n                        rejection: fileRejection,\r\n                        totalFilesAmount: files.length,\r\n                    })\r\n                }\r\n\r\n                if (interactionStepId) {\r\n                    validFiles.forEach(\r\n                        partial(addAttachment, interactionStepId),\r\n                    )\r\n                }\r\n            }\r\n\r\n            function getFilesFromEvent() {\r\n                const input = event.target\r\n                return input.files ? Array.from(input.files) : []\r\n            }\r\n        },\r\n        [addAttachment, interactionStepId, openUploadErrorModal, t],\r\n    )\r\n\r\n    useEffect(\r\n        function showRejections() {\r\n            if (isAttachmentsListReady(interactionStepId) && fileRejections.length) {\r\n                openUploadErrorModal({\r\n                    rejection: fileRejections,\r\n                    onCloseCallback: () => setFileRejections([]),\r\n                    totalFilesAmount:\r\n                        getAttachmentsList(interactionStepId).length +\r\n                        fileRejections.length,\r\n                })\r\n            }\r\n        },\r\n        [\r\n            fileRejections,\r\n            getAttachmentsList,\r\n            interactionStepId,\r\n            isAttachmentsListReady,\r\n            openUploadErrorModal,\r\n            setFileRejections,\r\n        ],\r\n    )\r\n\r\n    useDidUnmount(() => {\r\n        setAttachmentButtonElement(null)\r\n        setFileRejections([])\r\n    })\r\n\r\n    const initiateChat = useInitiateChatByAttachment({chatItem})\r\n    /**\r\n     * Callback function for clicking on a file input element.\r\n     *\r\n     * @remarks\r\n     * Opens the file input dialog and initiates a chat if necessary.\r\n     */\r\n    const onFileClick = useCallback(async () => {\r\n        /**\r\n         * If the user is not supposed to initiate a chat, simply open the file input dialog.\r\n         */\r\n        if (!shouldInitiateChat) {\r\n            return {selectFiles: true}\r\n        }\r\n\r\n        const chatWasInitiated = initiateChat()\r\n\r\n        return {selectFiles: chatWasInitiated}\r\n    }, [initiateChat, shouldInitiateChat])\r\n\r\n    //This is workaround because passing atom value directly leads to infinite loop\r\n    const [innerButtonElement, setInnerButtonElement] =\r\n        useState<HTMLButtonElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        setAttachmentButtonElement(innerButtonElement)\r\n    }, [innerButtonElement, setAttachmentButtonElement])\r\n\r\n    return (\r\n        <InvisibleAttachButtonWithInput\r\n            ref={element => {\r\n                if (element instanceof HTMLButtonElement || element === null) {\r\n                    setInnerButtonElement(element)\r\n                }\r\n            }}\r\n            onFileInputClick={onFileClick}\r\n            handleUploadFiles={handleUploadFiles}\r\n            isDisabled={disabled}\r\n        />\r\n    )\r\n}\r\n\r\nconst InvisinbleAttachButtonUI = React.forwardRef<\r\n    HTMLButtonElement,\r\n    InjectedFileInputProps\r\n>(({onFileInputClick}, ref) => (\r\n    <button\r\n        onClick={onFileInputClick}\r\n        ref={ref}\r\n        className=\"invisible absolute z-[-1] w-0\"\r\n    />\r\n))\r\n\r\nconst InvisibleAttachButtonWithInput = withFileInput(InvisinbleAttachButtonUI)\r\n","import type React from 'react'\r\nimport type {FormEvent, KeyboardEvent} from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\nimport produce from 'immer'\r\nimport {useAtom} from 'jotai'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDidState} from '@bpinc/ad-did-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {MessengerType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {messengerTypes} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getAssociatedChatServiceId,\r\n    getInteractionStepId,\r\n    getMessengers,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    isCall,\r\n    isExternalChat,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useIsOffline, useOfflineStateMethods} from '@bpinc/ad-offline-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useChatAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {condenseNewLines, isHTMLElement} from '@bpinc/lib-html-utils'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {getCursorPosition, moveCursorToTheEnd, setCursorPosition} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\nimport {useMessageUpdater} from '../../../hooks/useMessageUpdater'\r\nimport {chatPopupContentAtom, predefinedMessagesSearchAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\nimport {TEXT_AREA_DATA_ID} from './ChatTextArea'\r\n\r\n\r\ninterface UseChatMessagesParams {\r\n    itemId: string\r\n    serviceId?: string\r\n}\r\n\r\ninterface UseChatMessagesOutput {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n\r\n    sendCurrentMessage(): void\r\n\r\n    handleKeyDown(event: KeyboardEvent<HTMLTextAreaElement>): void\r\n\r\n    handleTextareaChange(event: FormEvent<HTMLElement>, value: string): void\r\n\r\n    updateMessage<T, S extends string>(\r\n        arg0?: (arg0: T) => S\r\n    ): (arg0: T) => void\r\n\r\n    handleSelectPredefinedMessage: (text: string) => void\r\n}\r\n\r\nexport function useChatMessages(\r\n    params: UseChatMessagesParams,\r\n): UseChatMessagesOutput {\r\n    const [chatPopupContent, setChatPopupContent] = useAtom(\r\n        chatPopupContentAtom,\r\n    )\r\n\r\n    const {itemId, serviceId} = params\r\n\r\n    const [predefinedSearchInsertPosition, setPredefinedSearchInsertPoisition] =\r\n        useAtom(predefinedSearchInsertPositionAtom)\r\n    const [predefinedMessagesSearch, setPredefinedMessagesSearch] = useAtom(\r\n        predefinedMessagesSearchAtom,\r\n    )\r\n    const {showNotification, hideNotificationById, hideNotificationsByTag} =\r\n        useNotificationsState('methods')\r\n    const errorValidation = useErrorValidation()\r\n    const {getSelectedChannel, getSelectedPhone} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n    const contacts = useContactsState('contacts')\r\n    const isOffline = useIsOffline()\r\n    const {setShowOfflineAlert} = useOfflineStateMethods()\r\n    const {ERROR_MESSAGES: i18n} = useLocalizationState('t')\r\n\r\n    const chatActiveItem = useInteraction(itemId)\r\n\r\n    const id = chatActiveItem?.id ?? ''\r\n    const contactMessengers = getMessengers(contacts, chatActiveItem)\r\n    const interactionStepId = getInteractionStepId(chatActiveItem)\r\n\r\n    const {initiateChat} = useInteractionStateMethods()\r\n    const {sendMessage, addMessageToPending, sendFile, openChannel} =\r\n        useInteractionChatStateMethods()\r\n\r\n    const {getItemState, setItemState} = useInteractionUIState()\r\n\r\n    const {clearAttachmentsList, getAttachmentsList, isAttachmentsListReady} =\r\n        useChatAttachmentsUIState([\r\n            'clearAttachmentsList',\r\n            'getAttachmentsList',\r\n            'isAttachmentsListReady',\r\n        ])\r\n\r\n    const {selectedService} = useServiceState()\r\n    const didNumbers = useDidState('didNumbers')\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    const associatedCallsNumber =\r\n        isCall(chatActiveItem) && chatActiveItem?.callData?.incoming\r\n            ? chatActiveItem.callData.fromNumber\r\n            : chatActiveItem?.callData?.destination\r\n\r\n    const phone = getSelectedPhone(itemId)?.phone || getPhoneFromItem(chatActiveItem)\r\n    const sameNumberWithAssociatedCall = associatedCallsNumber === phone\r\n\r\n    const didNumber = useMemo(\r\n        function memoizeDidNumber() {\r\n            if (isCall(chatActiveItem)) {\r\n                if (isOutboundInteraction(chatActiveItem)) {\r\n                    const callHasSmsDIDNumber =\r\n                        chatActiveItem?.accessNumberId &&\r\n                        didNumbers[chatActiveItem.accessNumberId]?.isSMS\r\n\r\n                    if (sameNumberWithAssociatedCall && callHasSmsDIDNumber) {\r\n                        return chatActiveItem!.accessNumberId\r\n                    }\r\n                } else {\r\n                    const isDID = chatActiveItem?.scenarioData?.isDID\r\n                    if (\r\n                        isDID &&\r\n                        (!selectedDIDNumber ||\r\n                            didNumbers[selectedDIDNumber]?.isSMS)\r\n                    ) {\r\n                        for (const accessNumberId of Object.keys(didNumbers)) {\r\n                            if (didNumbers[accessNumberId].isSMS) {\r\n                                return accessNumberId\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return selectedDIDNumber\r\n        },\r\n        [\r\n            chatActiveItem,\r\n            didNumbers,\r\n            sameNumberWithAssociatedCall,\r\n            selectedDIDNumber,\r\n        ],\r\n    )\r\n\r\n    const itemService = getServiceId(chatActiveItem)\r\n    const service =\r\n        serviceId ||\r\n        (sameNumberWithAssociatedCall ? itemService : selectedService)\r\n    const {services} = useServicesDispositionsState()\r\n    const associatedChatService =\r\n        getAssociatedChatServiceId(services, service) ||\r\n        getAssociatedChatServiceId(services, selectedService)\r\n\r\n    const currentMessage = getItemState(id)?.chatMessage ?? ''\r\n    const attachmentsList = getAttachmentsList(interactionStepId)\r\n\r\n    const setCurrentMessage = useCallback(\r\n        function setCurrentMessageCallback(\r\n            setMessage: React.SetStateAction<string>,\r\n        ) {\r\n            setItemState(\r\n                id,\r\n                produce(state => {\r\n                    if (typeof setMessage === 'string') {\r\n                        state.chatMessage = setMessage\r\n                    } else {\r\n                        state.chatMessage = setMessage(state.chatMessage)\r\n                    }\r\n                }),\r\n            )\r\n        },\r\n        [id, setItemState],\r\n    )\r\n\r\n    const resetCurrentMessage = useCallback(\r\n        function resetCurrentMessageCallback() {\r\n            !isOffline && setCurrentMessage('')\r\n        },\r\n        [isOffline, setCurrentMessage],\r\n    )\r\n\r\n    const sendCurrentPotentialMessage = useCallback(\r\n        function sendCurrentPotentialMessageCallback() {\r\n            const contactId = get(chatActiveItem, 'contactId')\r\n\r\n\r\n            const messengerAddress = contactMessengers?.find(\r\n                messenger => messenger.type === channel,\r\n            )?.userId\r\n            const address = messengerAddress || phone\r\n\r\n            if (!address || !channel) {\r\n                return\r\n            }\r\n\r\n            addMessageToPending(\r\n                {\r\n                    content: currentMessage,\r\n                    channel,\r\n                    type: 'message',\r\n                },\r\n                address,\r\n            )\r\n            initiateChat({\r\n                channel,\r\n                address,\r\n                serviceId: associatedChatService,\r\n                accessNumberId: didNumber,\r\n                contactId,\r\n                displayData: chatActiveItem?.displayData,\r\n                origination: 'interaction',\r\n            })\r\n\r\n            return resetCurrentMessage()\r\n        },\r\n        [\r\n            channel,\r\n            chatActiveItem,\r\n            contactMessengers,\r\n            phone,\r\n            addMessageToPending,\r\n            currentMessage,\r\n            initiateChat,\r\n            associatedChatService,\r\n            didNumber,\r\n            resetCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const sendCurrentExternalMessage = useCallback(\r\n        function sendCurrentExternalMessageCallback() {\r\n            //if chat is initialized\r\n            if (isExternalChat(chatActiveItem)) {\r\n                if (isAttachmentsListReady(interactionStepId)) {\r\n                    if (currentMessage) {\r\n                        sendMessage({\r\n                            content: condenseNewLines(currentMessage),\r\n                            itemId: interactionStepId,\r\n                            channel,\r\n                            type: 'message',\r\n                        })\r\n                    }\r\n\r\n                    if (attachmentsList.length) {\r\n                        attachmentsList.forEach(attachment => {\r\n                            if (attachment.fileData)\r\n                                sendFile({\r\n                                    fileData: attachment.fileData,\r\n                                    itemId: interactionStepId,\r\n                                    channel: channel || 'sms',\r\n                                })\r\n                        })\r\n                        clearAttachmentsList(interactionStepId)\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            } else {\r\n                const messengerAddress = contactMessengers?.find(\r\n                    messenger => messenger.type === channel,\r\n                )?.userId\r\n                const address = messengerAddress || phone\r\n\r\n                if (\r\n                    service &&\r\n                    chatActiveItem &&\r\n                    associatedChatService &&\r\n                    channel &&\r\n                    address\r\n                ) {\r\n                    addMessageToPending(\r\n                        {\r\n                            content: currentMessage,\r\n                            channel,\r\n                            type: 'message',\r\n                        },\r\n                        address,\r\n                    )\r\n                    initiateChat({\r\n                        channel,\r\n                        address,\r\n                        serviceId: associatedChatService,\r\n                        contactId: chatActiveItem.contactId,\r\n                        displayData: chatActiveItem.displayData,\r\n                        accessNumberId: didNumber,\r\n                        origination: 'interaction',\r\n                    })\r\n                }\r\n                resetCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            phone,\r\n            contactMessengers,\r\n            channel,\r\n            chatActiveItem,\r\n            isAttachmentsListReady,\r\n            interactionStepId,\r\n            currentMessage,\r\n            attachmentsList,\r\n            resetCurrentMessage,\r\n            sendMessage,\r\n            clearAttachmentsList,\r\n            sendFile,\r\n            service,\r\n            associatedChatService,\r\n            addMessageToPending,\r\n            initiateChat,\r\n            didNumber,\r\n        ],\r\n    )\r\n\r\n    const tryToParseCommandsInCurrentMessage = useCallback(() => {\r\n        if (currentMessage.startsWith('/invite')) {\r\n            const words = currentMessage.split(' ')\r\n            if (words.length !== 2) {\r\n                showNotification({\r\n                    id: Notifications.ChatChannelInviteBadFormatError,\r\n                    type: 'error',\r\n                    message: i18n.chat_channel_invite_bad_format(),\r\n                    tags: ['current-view'],\r\n                    duration: 30_000,\r\n                    closable: true,\r\n                })\r\n            } else {\r\n                const inviteChannel = words[1] as MessengerType\r\n                if (!messengerTypes.includes(inviteChannel)) {\r\n                    showNotification({\r\n                        id: Notifications.ChatChannelInviteUnknownMessengerError,\r\n                        type: 'error',\r\n                        tags: ['current-view'],\r\n                        message: i18n.chat_channel_invite_unknown_messenger(),\r\n                        duration: 30_000,\r\n                        closable: true,\r\n                    })\r\n                } else {\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteBadFormatError,\r\n                    )\r\n                    hideNotificationById(\r\n                        Notifications.ChatChannelInviteUnknownMessengerError,\r\n                    )\r\n\r\n                    const messengerAddress = contactMessengers?.find(\r\n                        messenger => messenger.type === inviteChannel,\r\n                    )?.userId\r\n                    const address = messengerAddress || phone\r\n\r\n                    if (itemService && address) {\r\n                        openChannel({\r\n                            channel: inviteChannel,\r\n                            address,\r\n                            interactionStepId,\r\n                            serviceId: itemService,\r\n                        })\r\n                    }\r\n                    resetCurrentMessage()\r\n                }\r\n            }\r\n            return true\r\n        }\r\n    }, [\r\n        contactMessengers,\r\n        currentMessage,\r\n        hideNotificationById,\r\n        interactionStepId,\r\n        itemService,\r\n        openChannel,\r\n        phone,\r\n        showNotification,\r\n        resetCurrentMessage,\r\n        i18n,\r\n    ])\r\n\r\n    const sendCurrentMessage = useCallback(\r\n        function sendCurrentMessageCallback() {\r\n            if (isOffline) {\r\n                setShowOfflineAlert(true)\r\n                return\r\n            }\r\n\r\n            if (currentMessage) {\r\n                const scrollerApi = getItemState(itemId)?.scrollerApi\r\n                scrollerApi?.scrollToLast()\r\n            }\r\n\r\n            const isPotentialChat =\r\n                isPotentialInteraction(chatActiveItem) ||\r\n                isCall(chatActiveItem)\r\n\r\n\r\n            if (isPotentialChat) {\r\n                const errors = [\r\n                    ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                        service,\r\n                        didNumber,\r\n                        interactionType: 'sms',\r\n                    }),\r\n                    ...errorValidation.getChannelError({\r\n                        selectedChannel: channel,\r\n                    }),\r\n                ]\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                if (currentMessage) {\r\n                    const messageErrors = errorValidation.getMessageErrors({\r\n                        message: currentMessage,\r\n                        channel: channel || 'sms',\r\n                    })\r\n                    if (messageErrors.length) {\r\n                        showNotification(messageErrors[0])\r\n                        return\r\n                    }\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                return currentMessage && sendCurrentPotentialMessage()\r\n            }\r\n            const messageErrors = errorValidation.getMessageErrors({\r\n                message: currentMessage,\r\n                channel: channel || 'sms',\r\n            })\r\n            if (messageErrors.length) {\r\n                showNotification(messageErrors[0])\r\n                return\r\n            }\r\n\r\n            if (interactionStepId) {\r\n                if (tryToParseCommandsInCurrentMessage()) {\r\n                    return\r\n                }\r\n                return (\r\n                    (currentMessage || attachmentsList.length) &&\r\n                    sendCurrentExternalMessage()\r\n                )\r\n            }\r\n        },\r\n        [\r\n            isOffline,\r\n            currentMessage,\r\n            chatActiveItem,\r\n            channel,\r\n            errorValidation,\r\n            interactionStepId,\r\n            setShowOfflineAlert,\r\n            getItemState,\r\n            itemId,\r\n            service,\r\n            didNumber,\r\n            hideNotificationsByTag,\r\n            sendCurrentPotentialMessage,\r\n            showNotification,\r\n            attachmentsList.length,\r\n            sendCurrentExternalMessage,\r\n            tryToParseCommandsInCurrentMessage,\r\n        ],\r\n    )\r\n\r\n    const handleSelectPredefinedMessage = useEvent((text: string) => {\r\n        setCurrentMessage(\r\n            m =>\r\n                m.slice(0, predefinedSearchInsertPosition) +\r\n                text +\r\n                m.slice(\r\n                    predefinedSearchInsertPosition + 1,\r\n                    predefinedMessagesSearch.length,\r\n                ),\r\n        )\r\n        setPredefinedMessagesSearch('')\r\n        setChatPopupContent(undefined)\r\n\r\n        const htmlElement = document.querySelector(\r\n            '[data-testid=\"chat-text-area-input\"]',\r\n        )\r\n\r\n        if (!(htmlElement instanceof HTMLElement)) {\r\n            return\r\n        }\r\n\r\n        setTimeout(() => {\r\n            htmlElement.focus()\r\n            if (predefinedSearchInsertPosition === -1) {\r\n                moveCursorToTheEnd(htmlElement)\r\n            } else {\r\n                setCursorPosition(\r\n                    htmlElement,\r\n                    predefinedSearchInsertPosition + text.length,\r\n                )\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleKeyDown = useCallback(\r\n        (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n            const textareaElement =\r\n                event.target instanceof HTMLElement ? event.target : undefined\r\n\r\n            function exitPredefinedMessages() {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedSearchInsertPoisition(-1)\r\n                setPredefinedMessagesSearch('')\r\n            }\r\n\r\n            if (!textareaElement) {\r\n                return\r\n            }\r\n\r\n            const cursorPosition = getCursorPosition(textareaElement)\r\n\r\n            if (event.key === ';') {\r\n                setPredefinedSearchInsertPoisition(cursorPosition)\r\n                setChatPopupContent('predefinedMessages')\r\n            }\r\n\r\n            if (\r\n                event.key === ' ' &&\r\n                cursorPosition - 1 === predefinedSearchInsertPosition\r\n            ) {\r\n                exitPredefinedMessages()\r\n            }\r\n\r\n            if (event.key === 'Escape' && chatPopupContent === 'predefinedMessages') {\r\n                exitPredefinedMessages()\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n            }\r\n\r\n            if (event.key === 'Enter') {\r\n                if (event.shiftKey || event.ctrlKey) {\r\n                    return\r\n                }\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n                sendCurrentMessage()\r\n            }\r\n        },\r\n        [\r\n            chatPopupContent,\r\n            setChatPopupContent,\r\n            predefinedSearchInsertPosition,\r\n            sendCurrentMessage,\r\n            setPredefinedMessagesSearch,\r\n            setPredefinedSearchInsertPoisition,\r\n        ],\r\n    )\r\n\r\n    const handleTextareaChange = useCallback(\r\n        function handleTextareaChangeCallback(\r\n            event: FormEvent<HTMLElement>,\r\n            value: string,\r\n        ) {\r\n            const el = event.target\r\n            if (!isHTMLElement(el)) {\r\n                return\r\n            }\r\n            el.scrollTop = el.scrollHeight\r\n\r\n            const cursorPosition = getCursorPosition(el)\r\n\r\n            setCurrentMessage(value)\r\n            if (\r\n                predefinedMessagesSearch &&\r\n                cursorPosition <= predefinedSearchInsertPosition\r\n            ) {\r\n                setChatPopupContent(undefined)\r\n                setPredefinedMessagesSearch('')\r\n            } else {\r\n                setPredefinedMessagesSearch(\r\n                    chatPopupContent === 'predefinedMessages'\r\n                        ? value.slice(predefinedSearchInsertPosition + 1)\r\n                        : '',\r\n                )\r\n            }\r\n        },\r\n        [chatPopupContent, predefinedMessagesSearch, predefinedSearchInsertPosition, setChatPopupContent, setCurrentMessage, setPredefinedMessagesSearch],\r\n    )\r\n\r\n    const updateMessage = useMessageUpdater(\r\n        setCurrentMessage,\r\n        `[data-id=\"${TEXT_AREA_DATA_ID}\"]`,\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                handleSelectPredefinedMessage,\r\n                sendCurrentMessage,\r\n                handleKeyDown,\r\n                currentMessage,\r\n                setCurrentMessage,\r\n                handleTextareaChange,\r\n                setPredefinedMessagesSearch,\r\n                predefinedMessagesSearch,\r\n                updateMessage,\r\n            }\r\n        },\r\n        [\r\n            handleSelectPredefinedMessage,\r\n            predefinedMessagesSearch,\r\n            setPredefinedMessagesSearch,\r\n            currentMessage,\r\n            setCurrentMessage,\r\n            handleTextareaChange,\r\n            sendCurrentMessage,\r\n            handleKeyDown,\r\n            updateMessage,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport {Selection} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useMessageUpdater(\r\n    setCurrentMessage: (setter: (message: string) => string) => void,\r\n    textAreaSelector: string,\r\n) {\r\n    return useCallback(\r\n        function updateMessageCallback<T, S extends string>(getMessage = (e: T) => e as unknown as S) {\r\n            return function updater(data: T) {\r\n                const textAreaNode = document.querySelector(textAreaSelector)\r\n\r\n                flow(getMessage, updateMessageContent, setCaretToRightPosition)(data)\r\n\r\n\r\n                function updateMessageContent(dataToAdd: string) {\r\n                    let offsetToFocus = 0\r\n                    let nodeToFocus: Node | null = null\r\n\r\n                    setCurrentMessage((currentMessage: string) => {\r\n                        const selection = new Selection()\r\n                        const selectionNode = selection?.getLastNode()\r\n                        const selectionElement = (\r\n                            selectionNode?.nodeType === Node.TEXT_NODE ? selectionNode?.parentElement : selectionNode\r\n                        ) as Element\r\n\r\n                        const textAreaSelected = selectionElement?.closest(textAreaSelector)\r\n\r\n                        if (textAreaNode) {\r\n                            currentMessage = cutExtraBR()\r\n\r\n                            if (!textAreaSelected) {\r\n                                return currentMessage + dataToAdd\r\n                            } else if (selection && selectionNode) {\r\n                                setNodeAndOffsetToFocus(selection)\r\n                                removeSelectedTextOnPaste(selection)\r\n\r\n                                if (nodeToFocus) {\r\n                                    insertDataInSelectedNode(nodeToFocus, offsetToFocus)\r\n                                }\r\n\r\n                                return getUpdatedHTMLAsString()\r\n                            }\r\n\r\n                            return currentMessage\r\n                        }\r\n\r\n                        return currentMessage + dataToAdd\r\n\r\n                        function differentNodesSelected(selectionInner: Selection) {\r\n                            return selectionInner.getFirstNode() !== selectionInner.getLastNode()\r\n                        }\r\n\r\n                        function textSelected(selectionInner: Selection) {\r\n                            return selectionInner.getSelectionStartIndex() !== selectionInner.getSelectionEndIndex()\r\n                        }\r\n\r\n                        function setNodeAndOffsetToFocus(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else if (textSelected(selectionInner)) {\r\n                                offsetToFocus = selectionInner.getSelectionStartIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getFirstNode()\r\n                            } else {\r\n                                offsetToFocus = selectionInner.getSelectionEndIndex() ?? 0\r\n                                nodeToFocus = selectionInner.getLastNode()\r\n                            }\r\n                        }\r\n                        function removeSelectedTextOnPaste(selectionInner: Selection) {\r\n                            if (differentNodesSelected(selectionInner) || textSelected(selectionInner)) {\r\n                                selectionInner.deleteSelected()\r\n                            }\r\n                        }\r\n\r\n                        function insertDataInSelectedNode(selectionNodeInner: Node, selectionOffset: number) {\r\n                            const textContent = selectionNodeInner?.textContent ?? ''\r\n                            selectionNodeInner.textContent =\r\n                                textContent?.slice(0, selectionOffset) + dataToAdd + textContent?.slice(selectionOffset)\r\n                        }\r\n\r\n                        function getUpdatedHTMLAsString() {\r\n                            return document.querySelector(textAreaSelector)?.innerHTML ?? currentMessage\r\n                        }\r\n\r\n                        function cutExtraBR() {\r\n                            const extraBRExist = currentMessage.substring(currentMessage.length - 8) === '<br><br>'\r\n                            if (extraBRExist) {\r\n                                return currentMessage.substring(0, currentMessage.length - 4)\r\n                            } else {\r\n                                return currentMessage\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    return {nodeToFocus, offsetToFocus, dataToAdd} as const\r\n                }\r\n\r\n                function setCaretToRightPosition({\r\n                    nodeToFocus,\r\n                    offsetToFocus,\r\n                    dataToAdd,\r\n                }: {\r\n                    nodeToFocus: Node | null\r\n                    offsetToFocus: number\r\n                    dataToAdd: string\r\n                }) {\r\n                    if (textAreaNode instanceof HTMLElement) {\r\n                        textAreaNode.focus()\r\n                        requestAnimationFrame(() => {\r\n                            setCursorPosition()\r\n                            requestAnimationFrame(setCursorPosition)\r\n\r\n                            function setCursorPosition() {\r\n                                if (textAreaNode) {\r\n                                    if (nodeToFocus) {\r\n                                        keepCursorAtTheCurrentPosition(nodeToFocus)\r\n                                    } else if (textAreaNode.lastChild) {\r\n                                        setCursorToTheEnd(textAreaNode.lastChild)\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            function keepCursorAtTheCurrentPosition(node: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(node, offsetToFocus + dataToAdd.length)\r\n                                range.setEnd(node, offsetToFocus + dataToAdd.length)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n\r\n                            function setCursorToTheEnd(lastChild: Node) {\r\n                                const range = document.createRange()\r\n                                range.setStart(lastChild, lastChild.textContent?.length ?? 0)\r\n                                range.setEnd(lastChild, lastChild.textContent?.length ?? 0)\r\n                                window.getSelection()?.removeAllRanges()\r\n                                window.getSelection()?.addRange(range)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [textAreaSelector, setCurrentMessage],\r\n    )\r\n}\r\n","import {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useMainPageUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {IconAttachment, IconKnowledgeBase, IconPredefinedMessage, IconSentimentGood} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {moveCursorToTheEnd} from '@bpinc/lib-ui-elements'\r\nimport {useKbBridgeMethods} from '@bpinc/state-kb-bridge-provider'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedSearchInsertPositionAtom} from './atoms'\r\n\r\n\r\ninterface UseControlsOptions {\r\n    itemId: string\r\n    setCurrentMessage: (message: React.SetStateAction<string>) => void\r\n}\r\n\r\nexport function useControlsOptions({itemId, setCurrentMessage}: UseControlsOptions) {\r\n    const attachmentButton = useAtomValue(attachmentButtonElementAtom)\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const setChatPopupContent = useSetAtom(chatPopupContentAtom)\r\n    const setPredefinedSearchInsertPoisition = useSetAtom(predefinedSearchInsertPositionAtom)\r\n    const t = useLocalizationState('t')\r\n    const isMacOs = platformInfo.platform === 'mac'\r\n    const commandButton = isMacOs ? '⌘' : 'Ctrl'\r\n\r\n    const setKBFloatingState = useMainPageUIState('setKBFloatingState')\r\n    const isCommunicator = useIsCommunicator()\r\n    const {setupInteractionKB} = useKbBridgeMethods()\r\n\r\n    const openKB = async () => {\r\n        if (isCommunicator) {\r\n            openInteractionSlidingModal(itemId, 'knowledgeBase')\r\n        } else {\r\n            setKBFloatingState(s => s === 'closed' ? 'floating' : s)\r\n            setupInteractionKB()\r\n        }\r\n    }\r\n\r\n\r\n    return [\r\n        {\r\n            Icon: IconSentimentGood,\r\n            text: t.EXTERNAL_CHAT.add_emoji(),\r\n            shortcut: `${commandButton}E`,\r\n            onClick: () => {\r\n                setChatPopupContent('emojiPicker')\r\n            },\r\n        },\r\n        {\r\n            Icon: IconAttachment,\r\n            text: t.EXTERNAL_CHAT.attachment(),\r\n            shortcut: `${commandButton}A`,\r\n            onClick: () => attachmentButton?.click(),\r\n        },\r\n        {\r\n            Icon: IconPredefinedMessage,\r\n            text: t.EXTERNAL_CHAT.predefined_messages(),\r\n            shortcut: ';',\r\n            onClick: () => {\r\n                const textareaElement = document.querySelector('[data-testid=\"chat-text-area-input\"]')\r\n                if (textareaElement instanceof HTMLElement) {\r\n                    setPredefinedSearchInsertPoisition(textareaElement.innerHTML.length)\r\n                    setCurrentMessage(m => m + ';')\r\n                    textareaElement.focus()\r\n\r\n                    setTimeout(() => {\r\n                        moveCursorToTheEnd(textareaElement)\r\n                    })\r\n                }\r\n                setChatPopupContent('predefinedMessages')\r\n\r\n            },\r\n        },\r\n        {\r\n            Icon: IconKnowledgeBase,\r\n            text: t.EXTERNAL_CHAT.knowledge_base(),\r\n            shortcut: `${commandButton}K`,\r\n            onClick: openKB,\r\n        },\r\n    ] as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"smsMessageCounter\":\"communicator_ChatForm_smsMessageCounter_MlvOG\"};","import React from 'react'\r\nimport * as Popover from '@radix-ui/react-popover'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {useAssociatedChatInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useBoolean, useEscapeManager, useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useChatResponsesVariablesParser} from '@bpinc/lib-helpers-ui'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, IconPlus24, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {ViewPredefinedMessages} from '@bpinc/lib-predefined-messages-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmojiPopup} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ChatProps} from '../../../types'\r\nimport {ChannelSelector} from '../ChannelSelector'\r\nimport {attachmentButtonElementAtom, chatPopupContentAtom, predefinedMessagesSearchAtom} from './atoms'\r\nimport {ChatTextArea} from './ChatTextArea'\r\nimport {InvisibleAttachButton} from './InvisibleAttachButton'\r\nimport {useChatMessages} from './useChatMessages'\r\nimport {useControlsOptions} from './useControlsOptions'\r\nimport {useGreetings} from './useGreeting'\r\nimport {useSmsMessageCounter} from './useSmsMessageCounter'\r\n\r\nimport styles from './ChatForm.module.less'\r\n\r\n\r\nconst PREDEFINED_MESSAGES_MAX_OFFSET = 24\r\nconst PREDEFINED_MESSAGES_SIDE_OFFSET = 5\r\n\r\nfunction getChatMessagesElement() {\r\n    const element = document.querySelector('[data-testid=\"chat-content\"]')\r\n    if (element instanceof HTMLElement) {\r\n        return element\r\n    }\r\n}\r\n\r\nexport const ChatForm: React.FC<ChatProps> = React.memo(function ExternalChat({\r\n    itemId,\r\n    serviceId,\r\n}) {\r\n    const chatFormRef = useCommunicatorUIState('interactionChatFormRef')\r\n    const activeInteractionId = useNonAssertedInteractionId()\r\n    const {\r\n        updateMessage,\r\n        handleSelectPredefinedMessage,\r\n        sendCurrentMessage,\r\n        handleKeyDown,\r\n        handleTextareaChange,\r\n        setCurrentMessage,\r\n        currentMessage,\r\n    } = useChatMessages({itemId, serviceId})\r\n\r\n    const predefinedMessagesSearch = useAtomValue(predefinedMessagesSearchAtom)\r\n    const parseVariables = useChatResponsesVariablesParser()\r\n    useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables})\r\n\r\n    const interactionStepId = useInteractionProp(itemId, getInteractionStepId)\r\n    const itemIsExternalChat = useInteractionProp(itemId, isExternalChat)\r\n\r\n    const {text: smsMessageCounter, enabled: smsMessageCounterEnabled} =\r\n        useSmsMessageCounter(itemId, currentMessage)\r\n\r\n\r\n    const messagesElementEntry = useResizeObserver(getChatMessagesElement())\r\n    const [chatPopupContent, setChatPopupContent] =\r\n    useAtom(chatPopupContentAtom)\r\n\r\n    const chatItem = useAssociatedChatInteraction(itemId)\r\n    assertDefined(chatItem)\r\n\r\n    const controlsOptions = useControlsOptions({setCurrentMessage, itemId})\r\n    const controlsDropdownOpen = useBoolean()\r\n    useEscapeManager(() => {\r\n        controlsDropdownOpen.setFalse()\r\n    }, {enabled: controlsDropdownOpen.value})\r\n\r\n    useEscapeManager(\r\n        () => {\r\n            setChatPopupContent(undefined)\r\n        },\r\n        {enabled: Boolean(chatPopupContent)},\r\n    )\r\n\r\n\r\n    return (\r\n        <div\r\n            ref={chatFormRef}\r\n            className=\"flex px-4 py-2.5\"\r\n            data-testid=\"chat-bottom-panel\"\r\n        >\r\n            <InvisibleAttachButton chatItem={chatItem} buttonElementAtom={attachmentButtonElementAtom} />\r\n            {/* TODO Use it appropriately once design is added: */}\r\n            {smsMessageCounterEnabled && (\r\n                <span className={styles.smsMessageCounter}>\r\n                    {smsMessageCounter}\r\n                </span>\r\n            )}\r\n            <div className=\"flex flex-auto items-end gap-2\">\r\n                <div className=\"flex h-[33px] items-center gap-2\">\r\n                    {!!activeInteractionId && <ChannelSelector />}\r\n                    <TriggerDropdown\r\n                        data-chat-actions-menu\r\n                        modal={false}\r\n                        open={controlsDropdownOpen.value}\r\n                        onOpenChange={controlsDropdownOpen.toggle}\r\n                        className=\"group z-10\"\r\n                        align=\"start\"\r\n                        side=\"top\"\r\n                        options={controlsOptions.map(\r\n                            ({Icon, text, shortcut, onClick}) => (\r\n                                <button\r\n                                    onClick={onClick}\r\n                                    key={text}\r\n                                    className=\"flex w-full min-w-[210px] items-center gap-2\"\r\n                                >\r\n                                    <Icon className=\"size-4\" />\r\n                                    <p className=\"flex-auto caption-s text-primary-on-primary\">\r\n                                        {text}\r\n                                    </p>\r\n                                    <p className=\"caption-s text-neutral-disabled\">\r\n                                        {shortcut}\r\n                                    </p>\r\n                                </button>\r\n                            ),\r\n                        )}\r\n                    >\r\n                        <CircleButton>\r\n                            <IconPlus24 className=\"size-4.5\" />\r\n                        </CircleButton>\r\n                    </TriggerDropdown>\r\n                </div>\r\n                <Popover.Root\r\n                    open={Boolean(chatPopupContent)}\r\n                    onOpenChange={open => {\r\n                        if (!open) {\r\n                            setChatPopupContent(undefined)\r\n                        }\r\n                    }}\r\n                >\r\n                    <Popover.Trigger\r\n                        asChild\r\n                        className=\"flex flex-auto\"\r\n                        onClick={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <ChatTextArea\r\n                                itemId={itemId}\r\n                                sendCurrentMessage={sendCurrentMessage}\r\n                                interactionStepId={interactionStepId}\r\n                                isExternalChat={itemIsExternalChat}\r\n                                currentMessage={currentMessage}\r\n                                handleKeyDown={handleKeyDown}\r\n                                handleChange={handleTextareaChange}\r\n                            />\r\n                        </div>\r\n                    </Popover.Trigger>\r\n                    <Popover.Content\r\n                        side=\"top\"\r\n                        align=\"start\"\r\n                        className=\"z-[100] w-[--radix-popover-trigger-width]\"\r\n                        sideOffset={PREDEFINED_MESSAGES_SIDE_OFFSET}\r\n                        onOpenAutoFocus={e => {\r\n                            e.preventDefault()\r\n                        }}\r\n                    >\r\n                        {chatPopupContent === 'emojiPicker' ? (\r\n                            <EmojiPopup\r\n                                onSelectEmoji={emojiChar => {\r\n                                    updateMessage((emoji: string) => emoji)(emojiChar)\r\n                                    setChatPopupContent(undefined)\r\n                                }}\r\n                            />\r\n                        ) : chatPopupContent === 'predefinedMessages' ? (\r\n                            <ViewPredefinedMessages\r\n                                handleSelect={handleSelectPredefinedMessage}\r\n                                search={predefinedMessagesSearch}\r\n                                className=\"w-[--radix-popover-trigger-width]\"\r\n                                style={{\r\n                                    maxHeight:\r\n                                        (messagesElementEntry?.contentRect\r\n                                            .height ?? 0) -\r\n                                        (PREDEFINED_MESSAGES_MAX_OFFSET -\r\n                                            PREDEFINED_MESSAGES_SIDE_OFFSET),\r\n                                }}\r\n                            />\r\n                        ) : null}\r\n                    </Popover.Content>\r\n                </Popover.Root>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat, isInboundInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePredefinedChatMessageState,\r\n    usePredefinedChatMessageStateMethods,\r\n} from '@bpinc/ad-predefined-chat-message-state-context'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\n\r\ninterface UseGreetingsParams {\r\n    currentMessage: string\r\n    setCurrentMessage: (message: string) => void\r\n    parseVariables: (message: string) => string\r\n    itemId: string\r\n}\r\n\r\nexport function useGreetings({currentMessage, setCurrentMessage, itemId, parseVariables}: UseGreetingsParams) {\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const itemIsInboundExternalChat = useInteractionProp(\r\n        itemId,\r\n        item => isExternalChat(item) && isInboundInteraction(item),\r\n    )\r\n\r\n    const {greetings} = usePredefinedChatMessageState()\r\n    const {resetGreeting} = usePredefinedChatMessageStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (currentMessage) {\r\n            resetGreeting(itemId)\r\n        } else if (greetings[itemId] && itemIsInboundExternalChat) {\r\n            setCurrentMessage(parseVariables(greetings[itemId]))\r\n            resetGreeting(itemId)\r\n            // TODO: investigate which notification we need to hide here\r\n            // hideNotificationsByTag()\r\n        }\r\n    }, [\r\n        itemId,\r\n        currentMessage,\r\n        greetings,\r\n        hideNotificationsByTag,\r\n        parseVariables,\r\n        resetGreeting,\r\n        setCurrentMessage,\r\n        itemIsInboundExternalChat,\r\n    ])\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {getCharCount} from '@bpinc/lib-gsm-charset-utils'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useChannelState} from '../../../channel-context'\r\n\r\n\r\ntype MessageCounter = {\r\n    text: string\r\n    enabled: boolean\r\n}\r\n\r\nexport function useSmsMessageCounter(itemId: string, message: string): MessageCounter {\r\n    const {enableSmsCharacterCount} = useAppConfigState()\r\n    const {t} = useLocalizationState()\r\n    const {getSelectedChannel} = useChannelState()\r\n    const channel = getSelectedChannel(itemId)?.value\r\n\r\n    return useMemo(() => {\r\n        if (!enableSmsCharacterCount || channel?.startsWith('sms')) {\r\n            return {enabled: false, text: ''}\r\n        }\r\n        const {msgCount, charCount, charsPerSegment} = getCharCount(message)\r\n\r\n        let text: string\r\n        if (msgCount === 1) {\r\n            text = `${charCount}/${charsPerSegment}`\r\n        } else if (charCount < 1000) {\r\n            text = `${charCount} (${t.EXTERNAL_CHAT.sms_messages_number(msgCount)})`\r\n        } else {\r\n            text = String(charCount)\r\n        }\r\n        return {enabled: true, text}\r\n    }, [enableSmsCharacterCount, channel, message, t.EXTERNAL_CHAT])\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\n\r\nimport {CHAT_VOICE_RECORDING_PLAYER_GROUP} from '@bpinc/ad-constants'\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId} from '@bpinc/ad-interaction-state-methods'\r\nimport {unmountPlayers} from '@bpinc/lib-audio-player'\r\nimport {Loader} from '@bpinc/lib-jskit-ui'\r\nimport {useInteractionUIChatType} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useBotSuggestionsLinksAutoOpener} from '../../hooks/useBotSuggestionsLinksAutoOpener'\r\nimport {useChatFormVisible} from '../../hooks/useChatFormVisible'\r\nimport type {ChatProps} from '../../types'\r\nimport {ExternalMessages} from './ExternalMessages/ExternalMessages'\r\nimport {useBotSuggestions} from './VoiceTranscript/selectors'\r\nimport {VoiceTranscriptMessages} from './VoiceTranscript/VoiceTranscriptMessages'\r\nimport {ChatForm} from './ChatForm'\r\nimport {useChatIsLoading} from './useChatIsLoading'\r\nimport {useMessagesLoader} from './useMessagesLoader'\r\n\r\n\r\nfunction typeToMediaFilter(type: ChatType) {\r\n    switch (type) {\r\n        case 'messages':\r\n            return 'chat'\r\n        case 'calls':\r\n            return 'voice'\r\n        default:\r\n            return 'all'\r\n    }\r\n}\r\n\r\nexport const ExternalChat: React.FC<ChatProps> = React.memo(function ExternalChat(props) {\r\n    const {itemId} = props\r\n    const isChatFormVisible = useChatFormVisible(itemId)\r\n    const botSuggestions = useBotSuggestions(itemId)\r\n    const type = useInteractionUIChatType(itemId)\r\n    const contactId = useInteractionProp(itemId, getContactId)\r\n    const activityHistoryExists = useContactsState(s => s.activityHistory[contactId]?.activityCreatedTimeByMedia?.[typeToMediaFilter(type)])\r\n    const loadMessages = useMessagesLoader(itemId, contactId, type)\r\n    useEffect(() => {\r\n        if (!activityHistoryExists) {\r\n            loadMessages()\r\n        }\r\n    }, [activityHistoryExists, loadMessages])\r\n\r\n    const {isLoading, isInitialLoading} = useChatIsLoading(contactId)\r\n\r\n    const ChatMessages = useMemo(() => type === 'transcript' ? VoiceTranscriptMessages : ExternalMessages, [type])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            unmountPlayers({playerGroup: CHAT_VOICE_RECORDING_PLAYER_GROUP})\r\n        }\r\n    }, [])\r\n\r\n    //Auto open bot suggestions links only in specified tabs\r\n    useBotSuggestionsLinksAutoOpener(itemId, botSuggestions, type === 'all' || type === 'transcript' || type === 'messages')\r\n\r\n    return (\r\n        <div className=\"relative flex flex-1 flex-col justify-between overflow-hidden\">\r\n            <div className=\"relative flex flex-auto flex-col overflow-hidden bg-secondary-background\" data-testid=\"chat-content\">\r\n                {!isInitialLoading && isLoading && <Loader size=\"32\" className=\"top-[30px] z-10\" color=\"primary\" />}\r\n                {isInitialLoading\r\n                    ? <Loader size=\"32\" color=\"primary\" className=\"z-10\" />\r\n                    : <ChatMessages {...props} />\r\n                }\r\n            </div>\r\n            {isChatFormVisible && (\r\n                <ChatForm {...props} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    isAfterCallWork,\r\n    isDelivered,\r\n    isExternalChat,\r\n    isExternalContactCall,\r\n    isNeedToShowWorkitemUI,\r\n    isOnHold,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n    isQualityManagementItemInMonitorMode,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useChatFormVisible(itemId: string) {\r\n    const {privileges} = useSessionState()\r\n    const isPotentialItem = useInteractionProp(itemId, isPotentialInteraction)\r\n    const iqQmMonitorMode = useInteractionProp(itemId, isQualityManagementItemInMonitorMode)\r\n    const isOngoingCall = useInteractionProp(itemId, item => isExternalContactCall(item) && (isDelivered(item) || isOnHold(item)))\r\n    const isDeliveredChat = useInteractionProp(itemId, item => {\r\n        /**\r\n         * delivered - when item is active,\r\n         * hold - when other interaction is active, even if it's an associated interaction\r\n         */\r\n        return isExternalChat(item) && (isDelivered(item) || isOnHold(item))\r\n    })\r\n    const isOutboundChat = useInteractionProp(itemId, item => isExternalChat(item) && isOutboundInteraction(item))\r\n    const isAfterCallWorkChat = useInteractionProp(itemId, isAfterCallWork)\r\n    const needToShowWorkitemUI = useInteractionProp(itemId, isNeedToShowWorkitemUI)\r\n\r\n\r\n    return useMemo(() => {\r\n        /** Hide for supervisor in monitor mode */\r\n        if (iqQmMonitorMode) {\r\n            return false\r\n        }\r\n        /** Don't show chat form if it's after call work chat */\r\n        if (isAfterCallWorkChat) {\r\n            return false\r\n        }\r\n        /** Preview contact activity history for workitem and workitem call */\r\n        if (needToShowWorkitemUI) {\r\n            return false\r\n        }\r\n\r\n        /** Show chat form if it's outbound chat or delivered chat */\r\n        if (isOutboundChat || isDeliveredChat) {\r\n            return true\r\n        }\r\n\r\n        /** If user has CAN_START_EXTERNAL_CHAT privilege, show chat form if it's potential item or delivered call\r\n         * Basically, it's scenario when chat interaction isn't started yet\r\n         */\r\n        if (privileges?.CAN_START_EXTERNAL_CHAT) {\r\n            return isPotentialItem || isOngoingCall\r\n        }\r\n    },\r\n    [\r\n        iqQmMonitorMode,\r\n        isAfterCallWorkChat,\r\n        needToShowWorkitemUI,\r\n        isOngoingCall,\r\n        isDeliveredChat,\r\n        isOutboundChat,\r\n        isPotentialItem,\r\n        privileges?.CAN_START_EXTERNAL_CHAT,\r\n    ])\r\n}\r\n","import {useActivitiesState} from '@bpinc/ad-activities-state-context'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\n\r\n\r\nexport function useChatIsLoading(contactId: string) {\r\n    const {isLoading: isLoadingExternal, messages} = useContactActivityHistory()\r\n    const isInitLoadingExternal = isLoadingExternal && !messages.length\r\n\r\n    const activities = useActivitiesState('activitiesListByContactId')[contactId]\r\n    const activitiesIsLoading = !!activities?.isLoading\r\n    const activitiesInitialLoading = activitiesIsLoading && !activities?.data.length\r\n\r\n    return {isLoading: isLoadingExternal || activitiesIsLoading, isInitialLoading: isInitLoadingExternal || activitiesInitialLoading}\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport type {OpenedBotSuggestionsUrls, VoiceTranscriptSuggestion} from '@bpinc/ad-interaction-state-types'\r\nimport {isLinkSuggestion} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useLinkOpener} from '../components/external/VoiceTranscript/hooks/useLinkOpener'\r\n\r\n\r\nexport function useBotSuggestionsLinksAutoOpener(\r\n    itemId: string,\r\n    suggestions: VoiceTranscriptSuggestion[] | undefined,\r\n    enabled: boolean,\r\n) {\r\n    const alreadyOpened = useInteractionProp(itemId, s => s?.openedBotSuggestionsUrls)\r\n\r\n    const getSuggestionsToOpen = useCallback(\r\n        function getSuggestionsToOpenCallback(\r\n            opened: OpenedBotSuggestionsUrls | undefined,\r\n        ) {\r\n            return suggestions?.filter(\r\n                message =>\r\n                    isLinkSuggestion(message) &&\r\n                    message.autoOpenURL &&\r\n                    !opened?.[message.suggestionURL],\r\n            )\r\n        },\r\n        [suggestions],\r\n    )\r\n\r\n    const openLink = useLinkOpener(itemId)\r\n\r\n    useEffect(() => {\r\n        openSuggestions()\r\n        function openSuggestions() {\r\n            if (!enabled) return\r\n\r\n            const suggestionsToOpen = getSuggestionsToOpen(alreadyOpened)\r\n\r\n            suggestionsToOpen?.forEach(openLink)\r\n        }\r\n    }, [alreadyOpened, enabled, getSuggestionsToOpen, openLink])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport type {GroupChatUIScope} from '@bpinc/state-group-chat-ui'\r\n\r\nimport {ExternalChat} from './external/ExternalChat'\r\n\r\n\r\nconst {ChatCenterInteractionLoader} = createComponentLoader(\r\n    'chatCenter', () => import('chatCenter'), 'ChatCenterInteraction',\r\n)\r\n\r\ntype Props = {\r\n    itemId: string\r\n    scope: GroupChatUIScope\r\n}\r\n\r\nexport const Chat: React.FC<Props> = React.memo(function Chat({itemId, scope}) {\r\n    const item = useInteraction(itemId)\r\n    const isInternalChat = Boolean(item && (\r\n        item.groupChatId ||\r\n        item.groupChatMembers ||\r\n        item.userId\r\n    ))\r\n\r\n    return isInternalChat\r\n        ? <ChatCenterInteractionLoader scope={scope} interactionId={itemId} />\r\n        : <ExternalChat itemId={itemId} />\r\n})\r\n","import type {FC, HTMLAttributes} from 'react'\r\nimport React from 'react'\r\n\r\nimport {IconCogwheel} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\nexport const SystemMessageUI: FC<HTMLAttributes<HTMLDivElement>> = ({children, className, ...rest}) => {\r\n    return (\r\n        <div className={tcn('flex items-center px-3 py-2 text-sm/[18px] text-chat-title', className)} {...rest}>\r\n            <IconCogwheel className=\"mr-4.5 h-6 shrink-0\" />\r\n            <div data-testid=\"content\">{children}</div>\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\n\r\nimport {type ScrollData, useScrollStateProviderBuilder} from '@bpinc/ad-scroll-state-context-builder'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {ScrollStateData} from './types'\r\n\r\n\r\nconst scrollAtTheTopNative: ScrollData = {type: 'NATIVE'}\r\nconst scrollAtTheTopVirtual: ScrollData = {type: 'VIRTUAL'}\r\n\r\nconst defaultScrollStateData: ScrollStateData = {\r\n    recent: {\r\n        all: scrollAtTheTopNative,\r\n        messages: scrollAtTheTopNative,\r\n        calls: scrollAtTheTopNative,\r\n    },\r\n    directory: {\r\n        internal: scrollAtTheTopNative,\r\n        external: scrollAtTheTopVirtual,\r\n    },\r\n    favorites: scrollAtTheTopNative,\r\n}\r\n\r\nexport const ScrollStateProvider: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const {Provider} = useScrollStateProviderBuilder<ScrollStateData>({\r\n        children,\r\n        defaultScrollStateData,\r\n    })\r\n\r\n    return Provider\r\n}\r\n\r\n","import type {ChatType} from '@bpinc/ad-interaction-chat-state-types'\r\n\r\n\r\nexport const SCROLL_KEYS = {\r\n    recent: (tab: ChatType) => `recent.${tab}`,\r\n    directory: (tab: 'internal' | 'external') => `directory.${tab}`,\r\n    favorites: () => 'favorites',\r\n    INTERACTIONS: {\r\n        transfer: {\r\n            recent: (activeItemId: string, tab: ChatType) => `interactions.${activeItemId}.recent.${tab}`,\r\n            directory: (activeItemId: string, tab: 'internal' | 'external') => `interactions.${activeItemId}.directory.${tab}`,\r\n            favorites: (activeItemId: string) => `interactions.${activeItemId}.favorites`,\r\n        },\r\n    },\r\n}\r\n","import type {ReactElement, ReactFragment} from 'react'\r\nimport React, {useEffect, useMemo} from 'react'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport {useUserActivityStateMethods} from '@bpinc/ad-user-activity-state-context'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nconst eventsToTrack = [\r\n    'mousemove',\r\n    'click',\r\n    'keydown',\r\n    'scroll',\r\n]\r\n\r\nexport const WebUserActivityTracker: FCWithChildren<ReactElement | ReactFragment> = ({children}) => {\r\n    const {registerActivity} = useUserActivityStateMethods()\r\n\r\n    const throttledRegisterActivity = useMemo(\r\n        () => throttle(registerActivity, 5000),\r\n        [registerActivity],\r\n    )\r\n\r\n    useEffect(() => {\r\n        eventsToTrack.forEach(event => {\r\n            window.addEventListener(event, throttledRegisterActivity)\r\n        })\r\n\r\n        return () => {\r\n            eventsToTrack.forEach(event => {\r\n                window.removeEventListener(event, throttledRegisterActivity)\r\n            })\r\n        }\r\n    }, [throttledRegisterActivity])\r\n\r\n    return <>{children}</>\r\n}\r\n","import {DIDNumberStateProvider} from '@bpinc/ad-did-number-context'\r\nimport {ServiceStateProvider} from '@bpinc/ad-service-context'\r\nimport {UIContextProvider} from '@bpinc/ad-ui-context'\r\nimport {ADCShortcutsProvider as ShortcutsProvider} from '@bpinc/lib-accessible-shortcuts-context'\r\nimport {ChatAttachmentsUIStateProvider} from '@bpinc/lib-attachments-state'\r\nimport {ChannelStateProvider} from '@bpinc/lib-chat-ui'\r\nimport {NavigationStateProvider} from '@bpinc/lib-communicator-navigation-state'\r\nimport {CommunicatorUIProvider} from '@bpinc/lib-communicator-ui-context'\r\nimport {ActiveInteractionContextProvider} from '@bpinc/lib-interaction-context'\r\nimport {SlidingModalContextProvider} from '@bpinc/lib-sliding-modal-context'\r\nimport {CountrySelectorStateProvider} from '@bpinc/lib-ui-elements'\r\nimport {InteractionUIStateProvider} from '@bpinc/state-interaction-ui'\r\n\r\nimport {ScrollStateProvider} from '../scroll-context'\r\nimport {WebUserActivityTracker} from './web-user-activity-tracker'\r\n\r\n\r\nexport const parallelChatProviders = [\r\n    SlidingModalContextProvider,\r\n    ChannelStateProvider,\r\n    ChatAttachmentsUIStateProvider,\r\n    DIDNumberStateProvider,\r\n    WebUserActivityTracker,\r\n]\r\n\r\n\r\nexport const providers = [\r\n    ActiveInteractionContextProvider,\r\n    SlidingModalContextProvider,\r\n    ScrollStateProvider,\r\n    ChannelStateProvider,\r\n    ChatAttachmentsUIStateProvider,\r\n    CountrySelectorStateProvider,\r\n    DIDNumberStateProvider,\r\n    WebUserActivityTracker,\r\n]\r\n\r\n// These providers are only required for the standalone Communicator application\r\n// and not for the built-in application, as they are already defined in the AgentDesktop.\r\nexport const standaloneProviders = [\r\n    ActiveInteractionContextProvider,\r\n    ServiceStateProvider,\r\n    ...providers,\r\n    InteractionUIStateProvider,\r\n    NavigationStateProvider,\r\n    ShortcutsProvider,\r\n    UIContextProvider,\r\n    CommunicatorUIProvider,\r\n]\r\n","import React from 'react'\r\n\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nconst {\r\n    CalendarNavigationLoader,\r\n    CalendarViewSelectLoader,\r\n    CalendarViewTitleLoader,\r\n} = createComponentLoader(\r\n    'calendar',\r\n    () => import('calendar'),\r\n    'CalendarNavigation',\r\n    'CalendarViewSelect',\r\n    'CalendarViewTitle',\r\n)\r\n\r\nexport const CalendarHeader = React.memo(() => {\r\n    return (\r\n        <div className=\"my-2 grid grid-cols-[150px_1fr_150px] px-4 py-0\">\r\n            <CalendarNavigationLoader />\r\n\r\n            <div className=\"align-center flex justify-center text-base\">\r\n                <CalendarViewTitleLoader />\r\n            </div>\r\n\r\n            <div className=\"flex justify-end\">\r\n                <CalendarViewSelectLoader />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {CalendarHeader} from './CalendarHeader'\r\n\r\n\r\nconst {CalendarBodyLoader} = createComponentLoader('calendar', () => import('calendar'), 'CalendarBody')\r\n\r\nexport const Calendar = () => {\r\n    return (\r\n        <div\r\n            data-testid=\"calendar-page\"\r\n            className=\"flex h-full flex-col\"\r\n        >\r\n            <CalendarHeader />\r\n            <CalendarBodyLoader />\r\n        </div>\r\n    )\r\n}\r\n","import type {Party} from '@bpinc/ad-case-state-types'\r\n\r\n\r\nexport const getNameFromParty = (party?: Party): [string, string] => {\r\n    const firstName = (party && party.firstName) || 'Unidentified'\r\n    const lastName = (party && party.lastName) || ''\r\n    return [firstName, lastName]\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface Props {\r\n    title: React.ReactNode\r\n    size?: 'small'\r\n    children: ReactNode\r\n}\r\n\r\nexport const Info: React.FC<Props> = ({title, size, children}) => {\r\n    return (\r\n        <div className={tcn('flex py-1 align-top text-[15px]', {'text-[13px] text-main': size === 'small'})}>\r\n            <div className=\"inline-block whitespace-nowrap pr-[0.4em] text-main-text-inverted\">\r\n                {`${title}:`}\r\n            </div>\r\n            <div className=\"inline-block break-words align-top\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {isValidElement, useCallback} from 'react'\r\n\r\nimport type {ChatTranscriptMessage as ChatTranscriptMessageType} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useChatMessageSanitizer} from '@bpinc/ad-interaction-state-hooks'\r\nimport {paramsToQueryString, requestUrls} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {formatTime, useInnerHTML} from '@bpinc/lib-helpers'\r\n\r\nimport {useMessage} from '../utils'\r\nimport {Info} from './Info'\r\n\r\n\r\nexport const ChatTranscriptMessage: FC<ChatTranscriptMessageType> = message => {\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const {sessionId, domain, loginId} = useSessionState()\r\n\r\n    const getFileLink = useCallback(\r\n        function getFileLinkCallback(fileId: string) {\r\n            const queryString = paramsToQueryString({\r\n                token: sessionId,\r\n                user: loginId,\r\n                tenant: domain,\r\n                id: fileId,\r\n                no_disposition: 0,\r\n            })\r\n            return `${requestUrls.getChatAttachmentDownload}?${queryString}`\r\n        },\r\n        [domain, loginId, sessionId],\r\n    )\r\n\r\n    const messageNode = useMessage(message, formatFullName, getFileLink)\r\n    const fileMessage = isValidElement(messageNode) ? messageNode : null\r\n\r\n    const textMessageNormalizedByURLParser = useChatMessageSanitizer({message: messageNode})\r\n\r\n    const textMessageHTML = useInnerHTML(textMessageNormalizedByURLParser)\r\n\r\n    return (\r\n        <Info title={formatTime(message.timestamp)}>\r\n            {fileMessage || <span dangerouslySetInnerHTML={textMessageHTML} />}\r\n        </Info>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ChatTranscriptMessage as Message} from '@bpinc/ad-case-state-types'\r\nimport {AttachmentFileMessage, ImageFileMessage} from '@bpinc/lib-chat-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n// -------------------------\r\n// Chat\r\n// -------------------------\r\nexport const useMessage = (\r\n    message: Message,\r\n    formatName: (f?: string, l?: string) => string,\r\n    getFileLink: (fileId: string) => string,\r\n): ReactNode => {\r\n    const {event, firstName, lastName, msg, fileId, fileName, fileType} = message\r\n    const name = formatName(firstName, lastName) || 'Chat BOT'\r\n    const {t} = useLocalizationState()\r\n\r\n    switch (event) {\r\n        case 'party_joined':\r\n            return t.CASE_MESSAGE.party_joined(name)\r\n        case 'party_message':\r\n            return msg?.includes('<br>') ? `${name}:<br> ${msg}` : `${name}: ${msg}`\r\n        case 'party_file': {\r\n            if (!fileId || !fileName) {\r\n                return\r\n            }\r\n\r\n            const fileLink = getFileLink(fileId)\r\n            return fileType === 'image' ? (\r\n                <>\r\n                    <p>\r\n                        {name}\r\n                        :\r\n                    </p>\r\n                    <ImageFileMessage\r\n                        fileLink={fileLink}\r\n                        fileName={fileName}\r\n                        timestamp={message.timestamp}\r\n                        senderName={name}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <p>\r\n                        {name}\r\n                        :\r\n                    </p>\r\n                    <AttachmentFileMessage\r\n                        fileName={fileName}\r\n                        fileLink={fileLink}\r\n                    />\r\n                </>\r\n            )\r\n        }\r\n        case 'party_message_attributes':\r\n            return ''\r\n        case 'party_changed':\r\n            return ''\r\n        case 'party_navigation':\r\n            return ''\r\n        case 'party_left':\r\n            return t.CASE_MESSAGE.party_left(name)\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport type {Party, Service} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\n\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    data: Party\r\n    type?: string\r\n    services?: Service[]\r\n}\r\n\r\nexport const Disposition: React.FC<Props> = ({data, type, services}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const {firstName, lastName, serviceId, disposition, startTime = ''} = data\r\n\r\n    const name = formatFullName(firstName, lastName)\r\n    const date = formatDate(startTime, {prefixed: true, full: true})\r\n    const heading = [name, 'dispositioned', type, 'interaction', date].filter(Boolean).join(' ')\r\n    const service = (services || []).find(s => s.serviceId === serviceId)\r\n\r\n    return (\r\n        <div className=\"rounded border border-main p-2 text-lg\">\r\n            <div className=\"text-main\">\r\n                {heading}\r\n            </div>\r\n            <div className=\"mb-0.5 mt-1.5\">\r\n                {disposition}\r\n            </div>\r\n            {service && (\r\n                <Info title=\"Service\">\r\n                    {service.serviceName}\r\n                </Info>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport cn from 'classnames'\r\nimport {pickBy} from 'lodash-es'\r\n\r\nimport {useCaseState} from '@bpinc/ad-case-state-context'\r\nimport type {ActivityChat, ChatTranscriptMessage as Message, Party} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {getNameFromParty} from '../utils'\r\nimport {ChatTranscriptMessage} from './ChatTranscriptMessage'\r\nimport {Disposition} from './Disposition'\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityChat\r\n}\r\n\r\nconst fulfillMessages = (messages: Message[] = [], parties: Party[]): Message[] => {\r\n    const messagesByPartyId: {[id: string]: Message} = {}\r\n    const isDefined = (v: unknown) => typeof v !== 'undefined'\r\n\r\n    messages = messages\r\n        .filter(\r\n            ({event}) => event && !['party_changed', 'party_navigation', 'party_message_attributes'].includes(event),\r\n        )\r\n        .map(m => {\r\n            const id = m.partyId\r\n            const message = pickBy(m, isDefined) as Message\r\n            const party = parties.find(currParty => currParty.partyId === message.partyId)\r\n\r\n            message.firstName = party?.firstName || message.firstName\r\n            message.lastName = party?.lastName || message.lastName\r\n\r\n            messagesByPartyId[id] = {\r\n                ...messagesByPartyId[id],\r\n                ...message,\r\n            }\r\n\r\n            return message\r\n        })\r\n\r\n    return messages.map(m => ({...messagesByPartyId[m.partyId], ...m}))\r\n}\r\n\r\nexport const ChatPreview: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const chats = useCaseState('chats')\r\n    const {direction, createdTime, parties, services, globalInteractionId} = activity\r\n    const isOutbound = direction === 'OUTBOUND'\r\n\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const [fromFirstName, fromLastName] = getNameFromParty(partyExternal)\r\n    const [handledByFirstName, handledByLastName] = getNameFromParty(partyInternal)\r\n    const contactId = isOutbound ? undefined : partyExternal?.contactId\r\n    const userId = isOutbound ? partyInternal?.userId : undefined\r\n\r\n    const {data = null} = chats[globalInteractionId] || {}\r\n\r\n    const avatar = useMemo(() => {\r\n        return {\r\n            firstName: fromFirstName,\r\n            lastName: fromLastName,\r\n            url: isOutbound && partyInternal ? getAvatarUrl({userId: partyInternal.userId}) : undefined,\r\n            isAgent: isOutbound,\r\n        }\r\n    }, [fromFirstName, fromLastName, getAvatarUrl, isOutbound, partyInternal])\r\n\r\n    const title = formatFullName(fromFirstName, fromLastName)\r\n    const interactionId = useInteractionId()\r\n    const interactionStepId = useAssociatedChatInteractionProp(interactionId, getInteractionStepId)\r\n    const noteContentClassName = cn('relative inline-block bg-[--c-note-content-bg] py-2 pl-2 pr-6',\r\n        'after:absolute after:bottom-0 after:right-0 after:h-0 after:w-0 after:border-[8px]',\r\n        'after:border-b-white after:border-l-[--c-note-border] after:border-r-white after:border-t-[--c-note-border]')\r\n    const body = (\r\n        <span className=\"relative -top-1 text-[0.8em]\">\r\n            <SmIcon name=\"chat\" />\r\n            {formatDate(createdTime)}\r\n        </span>\r\n    )\r\n\r\n    const messages = useMemo(() => {\r\n        return data ? fulfillMessages(data.messages, parties) : []\r\n    }, [data, parties])\r\n\r\n    if (!data) return null\r\n\r\n    return (\r\n        <div>\r\n            <ContactListItem\r\n                as=\"div\"\r\n                contactId={contactId}\r\n                userId={userId}\r\n                avatarProps={avatar}\r\n                title={title}\r\n                body={body}\r\n                isAlignedToRight={isOutbound}\r\n                isFitted\r\n            />\r\n            <div className=\"my-2 rounded bg-note-bg p-2\">\r\n                <Info title=\"Handled by\" size=\"small\">\r\n                    {formatFullName(handledByFirstName, handledByLastName)}\r\n                </Info>\r\n                {messages.map((message, i) => (\r\n                    <ChatTranscriptMessage key={i} {...message} />\r\n                ))}\r\n            </div>\r\n            {partyInternal && partyInternal.notes && (\r\n                <div className={cn(noteContentClassName, 'mb-2')}>{partyInternal.notes}</div>\r\n            )}\r\n            {partyInternal && partyInternal.disposition && (\r\n                <Disposition data={partyInternal} type=\"chat\" services={services} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport type {Attachment as AttachmentType} from '@bpinc/ad-request-urls'\r\nimport {getAttachmentUrl} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Attachment} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nexport const EmailAttachment: FC<AttachmentType> = ({id, name}) => {\r\n    const {serverOrigin, domain, sessionId, loginId} = useSessionState()\r\n\r\n    const attachmentURL = useMemo(() => {\r\n        if (sessionId && domain && loginId) {\r\n            return getAttachmentUrl({serverOrigin, sessionId, domain, loginId, attachmentId: id})\r\n        }\r\n    }, [domain, id, loginId, serverOrigin, sessionId])\r\n\r\n    return attachmentURL ? (\r\n        <Attachment name={name} link={attachmentURL} className=\"!mr-5 !mt-2.5 inline-block w-auto\" />\r\n    ) : null\r\n}\r\n","import React, {useEffect, useMemo, useState} from 'react'\r\n\r\nimport type {Party, Service} from '@bpinc/ad-case-state-types'\r\nimport type {Attachment as AttachmentType} from '@bpinc/ad-request-urls'\r\nimport {sanitizeHtml} from '@bpinc/lib-html-utils'\r\n\r\nimport {EmailAttachment} from './EmailAttachment'\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    html: string\r\n    title?: string\r\n    info?: React.ReactNode\r\n    actions?: React.ReactNode\r\n    attachments?: AttachmentType[]\r\n    services?: Service[]\r\n    partyInternal?: Party\r\n}\r\n\r\nexport const EmailContent: React.FC<Props> = ({html, title, info, actions, partyInternal, services, attachments}) => {\r\n    const [content, setContent] = useState<string>('')\r\n    const innerHtmlObject = useMemo(() => ({__html: content}), [content])\r\n    const serviceId = partyInternal?.serviceId\r\n    const service = (services || []).find(s => s.serviceId === serviceId)\r\n\r\n    useEffect(() => {\r\n        setContent(sanitizeHtml(html))\r\n    }, [html])\r\n\r\n    return (\r\n        <div className=\"my-2 rounded bg-note-bg  p-2\">\r\n            {info && <div>{info}</div>}\r\n            {title && <div className=\"mb-3 font-bold [&:not(:first-child)]:mt-2\">{title}</div>}\r\n            <div dangerouslySetInnerHTML={innerHtmlObject} />\r\n            {attachments?.map(attachment => <EmailAttachment {...attachment} key={attachment.id} />)}\r\n            {actions}\r\n            {service && (\r\n                <Info title=\"Service\">\r\n                    {service.serviceName}\r\n                </Info>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {ActivityEmail} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {SmIcon} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {getNameFromParty} from '../utils'\r\nimport {Disposition} from './Disposition'\r\nimport {EmailContent} from './EmailContent'\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityEmail\r\n    onOpenClick: (id: string) => void\r\n}\r\n\r\nexport const EmailPreview: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {emailData, direction, parties, services} = activity\r\n    const receivers = (emailData.toAddresses || []).map(a => a.name).join(', ')\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n    const isOutbound = direction !== 'INBOUND'\r\n    const [firstName, lastName] = getNameFromParty(isOutbound ? partyInternal : partyExternal)\r\n    const contactId = isOutbound ? undefined : partyExternal?.contactId\r\n    const userId = isOutbound ? partyInternal?.userId : undefined\r\n\r\n    const avatar = useMemo(() => {\r\n        return {\r\n            firstName,\r\n            lastName,\r\n            url: getAvatarUrl({\r\n                userId,\r\n                contactId,\r\n            }),\r\n            isAgent: isOutbound,\r\n        }\r\n    }, [contactId, firstName, getAvatarUrl, isOutbound, lastName, userId])\r\n\r\n    const title = formatFullName(firstName, lastName)\r\n    const body = (\r\n        <span className=\"relative -top-1 text-[0.8em]\">\r\n            <SmIcon name=\"envelope\" />\r\n            {formatDate(emailData.date)}\r\n        </span>\r\n    )\r\n\r\n    const emailTitle = emailData.subject\r\n    const emailInfo = isOutbound && receivers\r\n        ? <Info title=\"To\" size=\"small\">{receivers}</Info>\r\n        : undefined\r\n\r\n    return (\r\n        <div>\r\n            <ContactListItem\r\n                as=\"div\"\r\n                avatarProps={avatar}\r\n                contactId={contactId}\r\n                userId={userId}\r\n                title={title}\r\n                body={body}\r\n                isAlignedToRight={isOutbound}\r\n                isFitted\r\n            />\r\n            <EmailContent\r\n                info={emailInfo}\r\n                title={emailTitle}\r\n                html={emailData.content}\r\n                attachments={emailData.attachments}\r\n                services={services}\r\n                partyInternal={partyInternal}\r\n            />\r\n            {partyInternal && partyInternal.disposition && (\r\n                <Disposition data={partyInternal} type=\"email\" services={services} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport type {ActivityNotes} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\n\r\nimport {Disposition} from './Disposition'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityNotes\r\n}\r\n\r\nexport const NotesPreview: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {createdTime, parties} = activity\r\n\r\n    const user = parties.find(p => p.partyType === 'USER')\r\n    const {userId, firstName = '', lastName = '', notes = '', disposition = ''} = user || {}\r\n    const noteContentClassName = cn('relative inline-block bg-[--c-note-content-bg] py-2 pl-2 pr-6',\r\n        'after:absolute after:bottom-0 after:right-0 after:h-0 after:w-0 after:border-[8px]',\r\n        'after:border-b-white after:border-l-[--c-note-border] after:border-r-white after:border-t-[--c-note-border]')\r\n    const name = formatFullName(firstName, lastName)\r\n    const avatar = useMemo(() => {\r\n        return {\r\n            firstName,\r\n            lastName,\r\n            url: getAvatarUrl({userId}),\r\n            isAgent: true,\r\n        }\r\n    }, [firstName, getAvatarUrl, lastName, userId])\r\n\r\n    const title = name\r\n    const body = <span className=\"relative -top-1 text-[0.8em]\">{formatDate(createdTime)}</span>\r\n\r\n    if (user && disposition) {\r\n        return (\r\n            <>\r\n                <div className={cn(noteContentClassName, 'mb-2')}>{notes}</div>\r\n                <Disposition data={user} />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ContactListItem\r\n                as=\"div\"\r\n                avatarProps={avatar}\r\n                title={title}\r\n                body={body}\r\n                userId={userId}\r\n                isFitted\r\n                isAlignedToRight\r\n            />\r\n            <div className={noteContentClassName}>{notes}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {Case} from '@bpinc/ad-case-state-types'\r\nimport {useGetContactPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\n\r\n\r\ninterface Props {\r\n    data: Case\r\n}\r\n\r\nexport const Reporter: React.FC<Props> = props => {\r\n    const {data: {reporterId, reporterFirstName, reporterLastName, createdTime}} = props\r\n    const {formatFullName} = useFormatting()\r\n    const getContactPictureUrl = useGetContactPictureUrl()\r\n\r\n    const name = formatFullName(reporterFirstName, reporterLastName)\r\n    const avatar = name\r\n        ? {firstName: reporterFirstName, lastName: reporterLastName, url: reporterId && getContactPictureUrl(reporterId)}\r\n        : {firstName: 'Unidentified'}\r\n    const title = `${name || 'Unidentified'}, reporter`\r\n    const body = createdTime\r\n        ? <span className=\"relative -top-1 text-[0.8em]\">{formatDate(createdTime)}</span>\r\n        : undefined\r\n\r\n    return (\r\n        <div>\r\n            <ContactListItem\r\n                as=\"div\"\r\n                avatarProps={avatar}\r\n                title={title}\r\n                body={body}\r\n                contactId={reporterId}\r\n                isFitted\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgPhone = function SvgPhone(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#767676\",\n    d: \"M4.492 2.003a.791.791 0 0 0-.254.021 2.588 2.588 0 0 0-1.21.727C1.62 4.159.873 6.533 6.169 11.831s7.671 4.55 9.081 3.141a2.59 2.59 0 0 0 .728-1.212.783.783 0 0 0-.366-.865l-3.128-1.832a.783.783 0 0 0-.8 0l-1.245.742a.781.781 0 0 1-.883-.052 20.421 20.421 0 0 1-1.772-1.546 20.189 20.189 0 0 1-1.546-1.772.78.78 0 0 1-.052-.883l.742-1.245a.786.786 0 0 0 0-.8L5.107 2.391a.789.789 0 0 0-.615-.388Z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgPhone);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"e906ca7943e06d28dc48bf55f127fbd9.svg\";","import type {RefObject} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport type {ActivityVoice, Recordings} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {SmImage} from '@bpinc/lib-external-ui-elements'\r\nimport {AudioPlayer} from '@bpinc/lib-ui-elements'\r\n\r\nimport iconPhone from '../images/phone.svg'\r\nimport {getNameFromParty} from '../utils'\r\nimport {Disposition} from './Disposition'\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityVoice\r\n    recordings?: Recordings\r\n    scrollRef?: RefObject<HTMLDivElement>\r\n}\r\n\r\nexport const VoicePreview: React.FC<Props> = ({activity, recordings, scrollRef}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {direction, createdTime, parties, services} = activity\r\n\r\n    const partyContact = parties.find(p => p.partyType === 'CONTACT')\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const [contactFirstName, contactLastName] = getNameFromParty(partyContact)\r\n    const [agentFirstName, agentLastName] = getNameFromParty(partyInternal)\r\n    const contactName = formatFullName(contactFirstName, contactLastName)\r\n    const agentName = formatFullName(agentFirstName, agentLastName)\r\n    const isOutbound = direction === 'OUTBOUND'\r\n\r\n    const avatar = useMemo(() => {\r\n        return {\r\n            firstName: isOutbound ? agentFirstName : contactFirstName,\r\n            lastName: isOutbound ? agentLastName : contactLastName,\r\n            url: getAvatarUrl({\r\n                userId: isOutbound ? partyInternal?.userId : undefined,\r\n                contactId: isOutbound ? undefined : partyContact?.contactId,\r\n            }),\r\n            isAgent: isOutbound,\r\n        }\r\n    }, [\r\n        agentFirstName,\r\n        agentLastName,\r\n        contactFirstName,\r\n        contactLastName,\r\n        getAvatarUrl,\r\n        isOutbound,\r\n        partyContact,\r\n        partyInternal,\r\n    ])\r\n    const title = isOutbound ? agentName : contactName\r\n    const noteContentClassName = cn('relative inline-block bg-[--c-note-content-bg] py-2 pl-2 pr-6',\r\n        'after:absolute after:bottom-0 after:right-0 after:h-0 after:w-0 after:border-[8px]',\r\n        'after:border-b-white after:border-l-[--c-note-border] after:border-r-white after:border-t-[--c-note-border]')\r\n    const body = (\r\n        <span className=\"relative -top-1 text-[0.8em]\">\r\n            <SmImage src={iconPhone} />\r\n            {formatDate(createdTime)}\r\n        </span>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <ContactListItem\r\n                as=\"div\"\r\n                avatarProps={avatar}\r\n                title={title}\r\n                body={body}\r\n                isAlignedToRight={isOutbound}\r\n                isFitted\r\n            />\r\n            <div className=\"my-2 rounded bg-note-bg p-2\">\r\n                {isOutbound && (\r\n                    <Info title=\"To\" size=\"small\">\r\n                        {contactName}\r\n                    </Info>\r\n                )}\r\n                {recordings && scrollRef?.current ? (\r\n                    recordings.map((recording: string) => {\r\n                        return (\r\n                            <AudioPlayer\r\n                                key={recording}\r\n                                src={recording}\r\n                                agentName={agentName}\r\n                            />\r\n                        )\r\n                    })\r\n                ) : (\r\n                    <Info title=\"Handled by\" size=\"small\">\r\n                        {agentName}\r\n                    </Info>\r\n                )}\r\n            </div>\r\n            {partyInternal?.notes && <div className={cn(noteContentClassName, 'mb-2')}>{partyInternal.notes}</div>}\r\n            {partyInternal?.disposition && <Disposition data={partyInternal} type=\"call\" services={services} />}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useRef} from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport type {Activity} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getAssignee} from '../utils'\r\nimport {ChatPreview} from './ChatPreview'\r\nimport {EmailPreview} from './EmailPreview'\r\nimport {Info} from './Info'\r\nimport {NotesPreview} from './NotesPreview'\r\nimport {Reporter} from './Reporter'\r\nimport {VoicePreview} from './VoicePreview'\r\n\r\n\r\ninterface Props {\r\n    id: string\r\n}\r\n\r\n\r\nexport const Case: React.FC<Props> = ({id}) => {\r\n    const {setActivePage, goBack} = useNavigationState(['setActivePage', 'goBack'])\r\n    const {formatFullName} = useFormatting()\r\n    const cases = useCaseState('cases')\r\n    const {getCase} = useCaseStateMethods()\r\n    const {data = null, recordings = undefined, assignments = undefined, isLoading = true} = cases[id] || {}\r\n    const assignedTo = getAssignee(assignments, formatFullName)\r\n\r\n    const handleEmailOpen = useCallback((emailId: string) => {\r\n        setActivePage({\r\n            name: AppRoutes.Cases,\r\n            params: {id, emailId},\r\n        })\r\n    }, [setActivePage, id])\r\n\r\n    useEffect(() => {\r\n        !cases[id] && getCase(id)\r\n        // do not track methods change\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const scrollRef = useRef<HTMLDivElement>(null)\r\n    const caseListItemClassName = cn('[&:not(:first-child)]:mt-2')\r\n\r\n    return (\r\n        <div className=\"relative h-full overflow-auto p-4\" ref={scrollRef}>\r\n            <div className=\"absolute left-0 top-0 cursor-pointer px-4 py-3\">\r\n                <SmButton icon=\"angle left\" onClick={goBack} basic compact />\r\n            </div>\r\n\r\n            {isLoading ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : !data ? (\r\n                <div className=\"text-center\">\r\n                    Error occurred while loading data\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div className=\"mb-[1em] truncate px-[3em] text-center text-[1.2em]\">\r\n                        {`#${data.number} ${data.title}`}\r\n                    </div>\r\n\r\n                    <Reporter data={data} />\r\n\r\n                    <Info title=\"State\">{data.status}</Info>\r\n                    {assignedTo && <Info title=\"Assigned to\">{assignedTo}</Info>}\r\n                    {data.categoryName && <Info title=\"Category\">{data.categoryName}</Info>}\r\n\r\n                    {data.activities.length > 0 ? (\r\n                        <div>\r\n                            {data.activities.map((activity: Activity) => {\r\n                                if (activity.mediaType === 'NOTES') {\r\n                                    return (\r\n                                        <div key={activity.id} className={caseListItemClassName}>\r\n                                            <NotesPreview activity={activity} />\r\n                                        </div>\r\n                                    )\r\n                                } else if (activity.mediaType === 'EMAIL') {\r\n                                    return (\r\n                                        <div key={activity.id} className={caseListItemClassName}>\r\n                                            <EmailPreview\r\n                                                activity={activity}\r\n                                                onOpenClick={handleEmailOpen}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                } else if (activity.mediaType === 'VOICE') {\r\n                                    return (\r\n                                        <div key={activity.id} className={caseListItemClassName}>\r\n                                            <VoicePreview activity={activity} scrollRef={scrollRef} recordings={recordings} />\r\n                                        </div>\r\n                                    )\r\n                                } else if (activity.mediaType === 'CHAT') {\r\n                                    return (\r\n                                        <div key={activity.id} className={caseListItemClassName}>\r\n                                            <ChatPreview activity={activity} />\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    ) : (\r\n                        <div>No activities</div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {Assignments} from '@bpinc/ad-case-state-types'\r\n\r\n\r\nexport const getAssignee = (\r\n    assignments: Assignments | undefined,\r\n    formatFullName: (first: string, last: string) => string,\r\n): string => {\r\n    const users = assignments && assignments.personal\r\n\r\n    if (users && users.length) {\r\n        return users\r\n            .map(user => formatFullName(user.firstName || '', user.lastName || ''))\r\n            .join(', ')\r\n    }\r\n\r\n    return ''\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport {useCaseState, useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {formatDate, formatEmail} from '@bpinc/ad-formatting-helpers'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmButton} from '@bpinc/lib-external-ui-elements'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {EmailContent} from './EmailContent'\r\nimport {Info} from './Info'\r\n\r\n\r\ninterface Props {\r\n    id: string\r\n}\r\n\r\nexport const Email: React.FC<Props> = ({id}) => {\r\n    const goBack = useNavigationState('goBack')\r\n    const emails = useCaseState('emails')\r\n    const {getEmail} = useCaseStateMethods()\r\n    const {data = null, isLoading = true} = emails[id] || {}\r\n\r\n    useEffect(() => {\r\n        !emails[id] && getEmail(id)\r\n        // do not track methods change\r\n        // eslint-disable-next-line\r\n    }, [id, emails])\r\n\r\n    return (\r\n        <div className=\"relative p-4\">\r\n            <div className=\"absolute left-0 top-0 cursor-pointer px-4 py-3\">\r\n                <SmButton icon=\"angle left\" onClick={goBack} basic compact />\r\n            </div>\r\n\r\n            {isLoading ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : !data ? (\r\n                <div className=\"text-center\">\r\n                    Error occurred while loading data\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <div className=\"mb-[1em] truncate px-[3em] text-center text-[1.2em]\">\r\n                        {data.subject}\r\n                    </div>\r\n                    {data.fromAddresses && data.fromAddresses.length > 0 && (\r\n                        <Info title=\"From\">\r\n                            {data.fromAddresses.map(formatEmail).join(', ')}\r\n                        </Info>\r\n                    )}\r\n                    {data.toAddresses && data.toAddresses.length > 0 && (\r\n                        <Info title=\"To\">\r\n                            {data.toAddresses.map(formatEmail).join(', ')}\r\n                        </Info>\r\n                    )}\r\n                    <Info title=\"Date\">\r\n                        {formatDate(data.date)}\r\n                    </Info>\r\n\r\n                    <EmailContent html={data.content} />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useDIDNumberLocalization, useDidState} from '@bpinc/ad-did-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport type {DIDNumber} from '@bpinc/ad-did-types'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getServiceId, getServiceName, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport type {Service} from '@bpinc/ad-services-dispositions-types'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {SelectItemType} from '@bpinc/lib-jskit-ui'\r\nimport {SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nfunction serviceFilter(service: Pick<Service, 'id' | 'name' | 'type' | 'notUserSelectable'>): boolean {\r\n    return ['INBOUND', 'OUTBOUND', 'BLENDED'].includes(service.type) && !service.notUserSelectable\r\n}\r\n\r\nfunction serviceToOption({id, name}: Pick<Service, 'id' | 'name'>): SelectItemType {\r\n    return {\r\n        value: id,\r\n        content: name,\r\n    }\r\n}\r\n\r\nfunction didNumberToOption(\r\n    didNumber: DIDNumber,\r\n    normalizer = (didNumberInner: DIDNumber) => didNumberInner.externalNumber.toString(),\r\n): SelectItemType {\r\n    return {\r\n        value: didNumber.id,\r\n        content: normalizer(didNumber),\r\n    }\r\n}\r\n\r\ntype ServiceSelectProps = {\r\n    itemId: string | undefined\r\n    trackVisibility?: boolean\r\n    labeled?: boolean\r\n    className?: string\r\n}\r\n\r\nexport const ServiceSelect: React.FC<ServiceSelectProps> = React.memo(\r\n    ({className, itemId, trackVisibility = true, labeled}) => {\r\n        const [selectedOption, setSelectedOption] = useState<string | undefined>(() =>\r\n            (selectedService && services[selectedService])\r\n                ? serviceToOption(services[selectedService]).value\r\n                : undefined,\r\n        )\r\n\r\n        const t = useLocalizationState('t')\r\n        const didNumbers = useDidState('didNumbers')\r\n        const {services} = useServicesDispositionsState()\r\n        const setServiceSelectorVisibility = useCommunicatorUIState('setServiceSelectorVisibility')\r\n        const {selectedDIDNumber, setDIDNumber} = useDIDNumberState()\r\n\r\n        const {selectedService, setService} = useServiceState()\r\n        const localizeDIDNumber = useDIDNumberLocalization()\r\n        const activeItem = useInteraction(itemId)\r\n\r\n        const itemServiceId = getServiceId(activeItem)\r\n        const itemServiceName = useMemo(() => {\r\n            return getServiceName(services, activeItem, isExternalChat(activeItem))\r\n        }, [services, activeItem])\r\n\r\n        useEffect(() => {\r\n            if (trackVisibility) {\r\n                setServiceSelectorVisibility(true)\r\n            }\r\n            return () => {\r\n                if (trackVisibility) {\r\n                    setServiceSelectorVisibility(false)\r\n                }\r\n            }\r\n        }, [setServiceSelectorVisibility, trackVisibility])\r\n\r\n        const serviceOptions = useMemo<SelectItemType[]>(() => {\r\n\r\n            const availableServices = {...services}\r\n            if (itemServiceId) {\r\n                availableServices[itemServiceId] = {\r\n                    ...availableServices[itemServiceId],\r\n                    id: itemServiceId,\r\n                    name: itemServiceName,\r\n                    type: 'BLENDED' as const, //used to pass serviceFilter\r\n                    notUserSelectable: false,\r\n                }\r\n            }\r\n\r\n            return [\r\n                ...Object.values(availableServices)\r\n                    .filter(serviceFilter)\r\n                    .map(serviceToOption),\r\n\r\n                ...Object.values(didNumbers)\r\n                    .map(didNumber => didNumberToOption(didNumber, localizeDIDNumber)),\r\n            ]\r\n        }, [didNumbers, localizeDIDNumber, itemServiceId, itemServiceName, services])\r\n\r\n        const handleSelect = useEvent(async (value?: string) => {\r\n            updateSelectValue()\r\n            async function updateSelectValue() {\r\n\r\n                if (!value) {\r\n                    await setService(value, itemId)\r\n                    await setDIDNumber(value)\r\n\r\n                } else if (value in didNumbers) {\r\n                    await setDIDNumber(value)\r\n                    await setService(undefined, itemId)\r\n\r\n                } else if (value in services) {\r\n                    await setDIDNumber(undefined)\r\n                    await setService(value, itemId)\r\n                }\r\n            }\r\n        })\r\n\r\n        useEffect(() => {\r\n            if (selectedService && services[selectedService]) {\r\n                setSelectedOption(serviceToOption(services[selectedService]).value)\r\n            } else if (selectedDIDNumber && didNumbers[selectedDIDNumber]) {\r\n                setSelectedOption(didNumberToOption(didNumbers[selectedDIDNumber]).value)\r\n            } else {\r\n                setSelectedOption(undefined)\r\n            }\r\n        }, [didNumbers, selectedDIDNumber, selectedService, services])\r\n\r\n        return (\r\n            <SelectField\r\n                clearable\r\n                inPortal={false}\r\n                value={selectedOption}\r\n                options={serviceOptions}\r\n                onChange={handleSelect}\r\n                placeholder={labeled ? t.GLOBAL.select() : t.GLOBAL.service_selector_no_value()}\r\n                label={labeled ? t.GLOBAL.service_selector_label() : undefined}\r\n                data-testid=\"service-selector\"\r\n                className=\"w-full px-2 py-[7.5px]\"\r\n                layoutClassName={tcn('w-full', className)}\r\n            />\r\n        )\r\n    },\r\n)\r\n","import type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport type {\r\n    DirectoryEntry,\r\n    DirectoryStateUserObject,\r\n    MsTeamsChannel,\r\n    MsTeamsUser,\r\n    SearchUserItem,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport type {UserDetails} from '@bpinc/ad-user-details-state-types'\r\n\r\n\r\nexport type User = ContactType | InternalUser | DirectoryEntry | EmiUser\r\n\r\ntype InternalUser = DirectoryStateUserObject | UserDetails | SearchUserItem\r\n\r\ntype EmiUser = MsTeamsUser | MsTeamsChannel\r\n\r\nexport const isExternalUser = (user: User): user is ContactType => 'Id' in user\r\n\r\nexport const isDirectoryEntry = (user: User): user is DirectoryEntry =>\r\n    'title' in user && 'mediaType' in user\r\n\r\nexport const isMsTeamsChannel = (user: User): user is MsTeamsChannel =>\r\n    'userType' in user && user.userType === 'msteams_channel'\r\n\r\nexport const isMsTeamsUser = (user: User): user is MsTeamsUser =>\r\n    'userType' in user && user.userType === 'msteams'\r\n\r\nexport const isMsTeamsUserDetails = (user: User): user is UserDetails & {userType: 'msteams'} =>\r\n    'userType' in user && user.userType === 'msteams' &&\r\n    'msTeamsPhones' in user\r\n\r\nexport const isInternalUser = (user: User): user is InternalUser =>\r\n    !isExternalUser(user) &&\r\n    !isDirectoryEntry(user) &&\r\n    !isMsTeamsUser(user) &&\r\n    !isMsTeamsChannel(user)\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {isHuntGroupEntry, isStaticEmailEntry, isStaticVoiceEntry} from '@bpinc/ad-directory-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {getInitials} from '@bpinc/ad-formatting-helpers'\r\nimport {MS_TEAMS_CHANNEL_AVATAR_FIRST_NAME, MS_TEAMS_CHANNEL_AVATAR_LAST_NAME} from '@bpinc/lib-avatar-ui'\r\nimport type {AvatarType} from '@bpinc/lib-jskit-ui'\r\nimport {Avatar as LibAvatar} from '@bpinc/lib-jskit-ui'\r\n\r\nimport type {User} from '../helpers'\r\nimport {isDirectoryEntry, isExternalUser, isMsTeamsChannel, isMsTeamsUser} from '../helpers'\r\n\r\n\r\nconst getAvatarType = (user: User): AvatarType => {\r\n    if (isMsTeamsChannel(user)) {\r\n        return 'msteams-channel'\r\n    }\r\n    if (isMsTeamsUser(user)) {\r\n        return 'msteams-user'\r\n    }\r\n    if (isExternalUser(user)) {\r\n        return 'contact'\r\n    }\r\n    if (isDirectoryEntry(user)) {\r\n        if (isHuntGroupEntry(user)) {\r\n            return 'hunt-group'\r\n        } else if (isStaticVoiceEntry(user) || isStaticEmailEntry(user)) {\r\n            return 'static-entry'\r\n        } else {\r\n            return 'scenario-entry'\r\n        }\r\n    } else {\r\n        return 'user'\r\n    }\r\n}\r\n\r\n\r\nexport const Avatar: React.FC<{\r\n    user: User\r\n}> = ({\r\n    user,\r\n}) => {\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    const avatarPhotoUrl = isMsTeamsChannel(user) || isDirectoryEntry(user)\r\n        ? undefined\r\n        : getAvatarUrl({\r\n            contactId: isExternalUser(user) ? user.Id.oid : undefined,\r\n            userId: isExternalUser(user) ? undefined : user.userId,\r\n            userType: isMsTeamsUser(user) ? user.userType : undefined,\r\n            photoUrl: isMsTeamsUser(user) ? user.photoUrl : undefined,\r\n        })\r\n\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n\r\n    const firstName = isMsTeamsChannel(user)\r\n        ? MS_TEAMS_CHANNEL_AVATAR_FIRST_NAME\r\n        : isDirectoryEntry(user)\r\n            ? getNamesFromDisplayName(user.title)?.[0]\r\n            : user.firstName\r\n\r\n    const lastName = isMsTeamsChannel(user)\r\n        ? MS_TEAMS_CHANNEL_AVATAR_LAST_NAME\r\n        : isDirectoryEntry(user)\r\n            ? getNamesFromDisplayName(user.title)?.[1]\r\n            : user.lastName\r\n\r\n    const avatarInitials = getInitials(firstName, lastName)\r\n\r\n    const type = getAvatarType(user)\r\n\r\n    return (\r\n        <LibAvatar\r\n            src={avatarPhotoUrl}\r\n            size=\"56\"\r\n            type={type}\r\n            fallback={avatarInitials}\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport type {DirectoryStateUserObject} from '@bpinc/ad-directory-state-types'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {UserDetails} from '@bpinc/ad-user-details-state-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {IconChat, IconPhone24} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    user: DirectoryStateUserObject | UserDetails\r\n}\r\n\r\nexport const AgentControls: React.FC<Props> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const onCall = useCallHandler()\r\n    const {userId: selfUserId, phoneDeviceCapabilities} = useSessionState()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n    const handleChat = useCallback(() => {\r\n        assertDefined(selfUserId)\r\n        const {userId, firstName = '', lastName = ''} = user\r\n        openActivityHistory({\r\n            userId,\r\n            firstName,\r\n            lastName,\r\n            origination: 'contact-profile',\r\n        })\r\n        setActivePage({name: AppRoutes.Interactions})\r\n    }, [selfUserId, user, openActivityHistory, setActivePage])\r\n\r\n    const handleCall = useCallback(() => {\r\n        onCall({\r\n            phone: user.extension,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            userId: user.userId,\r\n            navigateToInteractionsPage: true,\r\n            origination: 'contact-profile',\r\n        })\r\n    }, [onCall, user.extension, user.firstName, user.lastName, user.userId])\r\n\r\n    return (\r\n        <div className=\"-mt-1 ml-auto flex flex-none items-center\">\r\n            <Button\r\n                onClick={handleChat}\r\n                tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                data-testid=\"chat-button\"\r\n                variant=\"ghost\"\r\n                icon={<IconChat />}\r\n            />\r\n            {phoneDeviceCapabilities.canDial && (\r\n                <Button\r\n                    onClick={handleCall}\r\n                    tooltip={t.CONTACT.button_start_call_text()}\r\n                    data-testid=\"call-button\"\r\n                    variant=\"ghost\"\r\n                    icon={<IconPhone24 />}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport type {DirectoryEntry} from '@bpinc/ad-directory-state-types'\r\nimport {isEmailServiceEntry, isScenarioChatEntry} from '@bpinc/ad-directory-state-types'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {FavoritesChannelMedia} from '@bpinc/ad-transport-types'\r\nimport {DirectoryContactChannelFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconPhone24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {FavoritesChannel} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    item: DirectoryEntry\r\n}\r\n\r\nexport const DirectoryEntryControls: React.FC<Props> = ({item}) => {\r\n    const t = useLocalizationState('t')\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n    const onCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const handleCall = useEvent(() => {\r\n        onCall({\r\n            phone: item.number,\r\n            userId: item.id,\r\n            lastName: item.title,\r\n            navigateToInteractionsPage: true,\r\n            origination: 'contact-profile',\r\n        })\r\n    })\r\n\r\n    const handlePhoneChannelInteraction = useEvent((number: string, media: FavoritesChannelMedia) => {\r\n        if (media === 'voice') {\r\n            handleCall()\r\n        } else {\r\n            openActivityHistory({\r\n                phone: number,\r\n                userId: item.id,\r\n                lastName: item.title,\r\n                origination: 'contact-profile',\r\n            })\r\n        }\r\n    })\r\n\r\n    const favoritesButton = useMemo(() => {\r\n        let channel: FavoritesChannel | undefined\r\n        if (isScenarioChatEntry(item)) {\r\n            channel = {channelType: 'internal', media: ['chat']}\r\n        }\r\n        if (isEmailServiceEntry(item)) {\r\n            channel = {channelType: 'email', email: ''}\r\n        }\r\n        if (channel) {\r\n            return (\r\n                <DirectoryContactChannelFavoriteButton\r\n                    item={item}\r\n                    channel={channel}\r\n                    onPhoneInteraction={handlePhoneChannelInteraction}\r\n                />\r\n            )\r\n        }\r\n        return null\r\n    }, [handlePhoneChannelInteraction, item])\r\n\r\n    return (\r\n        <div className={tcn('-mt-1 ml-auto flex flex-none items-center', {'ml-3 mt-1': !!favoritesButton})}>\r\n            {item.mediaType === 'voice' && phoneDeviceCapabilities.canDial && (\r\n                <Button\r\n                    onClick={handleCall}\r\n                    tooltip={t.CONTACT.button_start_call_text()}\r\n                    data-testid=\"call-button\"\r\n                    variant=\"ghost\"\r\n                    icon={<IconPhone24 />}\r\n                />\r\n            )}\r\n            {favoritesButton}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {EmailTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {Modal, SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {isStringInEnum} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype AddEmailModalProps = CommonModalProps & {\r\n    email?: string\r\n    contactId?: string\r\n    firstName?: string\r\n    lastName?: string\r\n    onConfirm?: () => void\r\n}\r\n\r\nexport const AddEmailModal: React.FC<AddEmailModalProps> = ({\r\n    onClose,\r\n    email,\r\n    contactId,\r\n    firstName,\r\n    lastName,\r\n    onConfirm,\r\n    ...other\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {addEmail} = useContactsStateMethods()\r\n    const {formatEmailType, formatFullName} = useFormatting()\r\n    const [value, setValue] = useState<EmailTypes>(EmailTypes.PRIMARY)\r\n\r\n    const name = formatFullName(firstName, lastName)\r\n\r\n    const options = useMemo(() => {\r\n        return Object.keys(EmailTypes).map(type => ({\r\n            value: type,\r\n            content: formatEmailType(type, false),\r\n        }))\r\n    }, [formatEmailType])\r\n\r\n    function handleSelect(innerValue: string | undefined) {\r\n        if (!isStringInEnum(EmailTypes, innerValue)) {\r\n            throw Error('Invalid email type')\r\n        }\r\n        setValue(innerValue)\r\n    }\r\n\r\n    function handleConfirm() {\r\n        contactId && email && addEmail({contactId, type: value, email})\r\n        onConfirm?.()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            data-testid=\"contact-add-email-modal\"\r\n            {...other}\r\n        >\r\n            <Modal.Header>\r\n                {t.CONTACT.add_email_heading()}\r\n            </Modal.Header>\r\n\r\n            <Modal.Content className=\"body-m\">\r\n                <div className=\"flex flex-col gap-4\">\r\n                    <p>\r\n                        {t.CONTACT.add_email_description_1()}\r\n                        {' '}\r\n                        <b>{email}</b>\r\n                        {' '}\r\n                        {t.CONTACT.add_email_description_2()}\r\n                        {' '}\r\n                        <b>{name}</b>\r\n                        {' '}\r\n                        {t.CONTACT.add_email_description_3()}\r\n                    </p>\r\n                    <p>\r\n                        {t.CONTACT.add_email_description_4()}\r\n                        <SelectField\r\n                            layoutClassName=\"inline-block min-w-[187px] mx-4\"\r\n                            placeholder={t.CONTACT.add_email_email_type_placeholder()}\r\n                            value={value}\r\n                            onValueChange={handleSelect}\r\n                            options={options}\r\n                            data-testid=\"phone-type-dropdown\"\r\n                        />\r\n                        {t.CONTACT.add_email_description_5()}\r\n                    </p>\r\n                </div>\r\n            </Modal.Content>\r\n\r\n            <Modal.Actions>\r\n                <Button variant=\"secondary\" onClick={() => onClose()} data-testid=\"cancel-button\">\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleConfirm} data-testid=\"add-button\">\r\n                    {t.CONTACT.add_email_confirmation_button()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AddEmailModal} from './AddEmailModal'\r\n\r\n\r\nexport function useOpenAddEmailModal() {\r\n    return useModalComponentOpener(AddEmailModal)\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {Modal, SelectField} from '@bpinc/lib-jskit-ui'\r\nimport {isStringInEnum} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\n\r\ntype AddPhoneModalProps = CommonModalProps & {\r\n    phone?: string\r\n    contactId?: string\r\n    firstName?: string\r\n    lastName?: string\r\n    onConfirm?: () => void\r\n}\r\n\r\nexport const AddPhoneModal: React.FC<AddPhoneModalProps> = ({onClose, phone, contactId, firstName, lastName, onConfirm, ...other}) => {\r\n    const {t} = useLocalizationState()\r\n    const {addPhone} = useContactsStateMethods()\r\n    const {formatPhoneType, formatFullName} = useFormatting()\r\n    const [value, setValue] = useState<PhoneTypes>(PhoneTypes.BUSINESS)\r\n\r\n    const name = formatFullName(firstName, lastName)\r\n    const formattedPhone = formatPhone(phone)\r\n\r\n    const options = useMemo(() => {\r\n        return Object.keys(PhoneTypes).map(type => ({\r\n            value: type,\r\n            content: formatPhoneType(type),\r\n        }))\r\n    }, [formatPhoneType])\r\n\r\n    function handleSelect(innerValue: string | undefined) {\r\n        if (!isStringInEnum(PhoneTypes, innerValue)) {\r\n            throw Error('Invalid phone type')\r\n        }\r\n        setValue(innerValue)\r\n    }\r\n\r\n    function handleConfirm() {\r\n        if (contactId && phone) {\r\n            addPhone({contactId, type: value, phone})\r\n        }\r\n        onConfirm?.()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            onClose={onClose}\r\n            data-testid=\"contact-add-phone-modal\"\r\n            {...other}\r\n        >\r\n            <Modal.Header>\r\n                {t.CONTACT.add_phone_heading()}\r\n            </Modal.Header>\r\n            <Modal.Content className=\"body-m\">\r\n                {!!formattedPhone && (\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        <p>\r\n                            {t.CONTACT.add_phone_description_1()}\r\n                            {' '}\r\n                            <b>{formattedPhone}</b>\r\n                            {' '}\r\n                            {t.CONTACT.add_phone_description_2()}\r\n                            {' '}\r\n                            <b>{name}</b>\r\n                            {' '}\r\n                            {t.CONTACT.add_phone_description_3()}\r\n                        </p>\r\n                        <p>\r\n                            {t.CONTACT.add_phone_description_4()}\r\n                            <SelectField\r\n                                layoutClassName=\"inline-block min-w-[187px] mx-4\"\r\n                                placeholder={t.CONTACT.add_phone_phone_type_placeholder()}\r\n                                value={value}\r\n                                onValueChange={handleSelect}\r\n                                options={options}\r\n                                data-testid=\"phone-type-dropdown\"\r\n                            />\r\n                            {t.CONTACT.add_phone_description_5()}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={() => onClose()} data-testid=\"cancel-button\" variant=\"secondary\" >\r\n                    {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n                </Button>\r\n                <Button onClick={handleConfirm} data-testid=\"add-button\" variant=\"primary\">\r\n                    {t.CONTACT.add_phone_confirmation_button()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {AddPhoneModal} from './AddPhoneModal'\r\n\r\n\r\nexport function useOpenAddPhoneModal() {\r\n    return useModalComponentOpener(AddPhoneModal)\r\n}\r\n","var _path, _path2, _path3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgUseContact = function SvgUseContact(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 22 22\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#707070\",\n    d: \"M10.253 19.999H-.001l.053-.516c.211-2.818 2.728-3.7 4.751-4.413h.01c1.161-.4 2.259-.785 2.58-1.453v-1.69a4.393 4.393 0 0 1-1.056-2.16 2.04 2.04 0 0 1-.951-1.643 1.41 1.41 0 0 1 .37-1.174c-.633-2.392-.437-4.209.581-5.4A5.507 5.507 0 0 1 10.562 0a3.62 3.62 0 0 1 2.747.845 3.019 3.019 0 0 1 2.06 1.22c1.108 1.548.48 3.931.158 4.883a1.6 1.6 0 0 1 .317 1.174 2.707 2.707 0 0 1-.23.888 6.983 6.983 0 0 0-1.776.329l.053-.372.422-.048c.063 0 .319-.151.422-.892a.521.521 0 0 0-.157-.516l-.318-.188.105-.423c.168-.493.962-3.018.052-4.366a2.225 2.225 0 0 0-1.532-.8l-.264-.047-.106-.188c-.212-.376-.96-.61-1.954-.61A4.493 4.493 0 0 0 7.18 2.11c-.842.982-.951 2.671-.317 4.882l.106.329-.317.187a.522.522 0 0 0-.159.517c.1.678.359.892.423.892l.423.048.052.375a3.6 3.6 0 0 0 .846 1.925l.264.14v2.355l-.053.094c-.41 1.048-1.715 1.52-3.1 2.02l-.126.045c-1.705.58-3.638 1.236-4.067 3.146h8.54a7.014 7.014 0 0 0 .55.937Z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#707070\",\n    d: \"M15.903 9.903a6 6 0 1 1-6 6 6 6 0 0 1 6-6Z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"#fff\",\n    strokeLinecap: \"round\",\n    strokeMiterlimit: 10,\n    d: \"m12.999 15.54 2.548 2.019 3.452-4\",\n    fill: \"none\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgUseContact);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"21f900e1764bd92edf6ccf942800db38.svg\";","import React, {useCallback} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {contactToShortContact} from '@bpinc/ad-contacts-state-methods'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useHandleUseContact, useIsUseContactButtonVisible} from '@bpinc/lib-contact-details'\r\nimport {IconChat, IconPhone24} from '@bpinc/lib-jskit-ui'\r\nimport {InteractionDropdown, Svg} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport iconUseContact from '../../images/use-contact.svg'\r\n\r\n\r\ninterface Props {\r\n    user: ContactType\r\n}\r\n\r\nconst getId = (user: ContactType) => user.Id.oid\r\n\r\nconst getPhone = (user: ContactType) => {\r\n    if (user.primaryPhone) {\r\n        return user.primaryPhone.phone\r\n    }\r\n    return user.phones?.length ? user.phones[0].phone : ''\r\n}\r\n\r\nconst getFirstName = (user: ContactType) => {\r\n    return user.firstName\r\n}\r\n\r\nconst getLastName = (user: ContactType) => {\r\n    return user.lastName\r\n}\r\n\r\nexport const ExternalUserControls: React.FC<Props> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const [contactId, phone, firstName, lastName] = [\r\n        getId(user),\r\n        getPhone(user),\r\n        getFirstName(user),\r\n        getLastName(user),\r\n    ]\r\n\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n\r\n    const setActivePage = useNavigationState('setActivePage')\r\n\r\n    const isUseButtonVisible = useIsUseContactButtonVisible()\r\n    const handleUse = useHandleUseContact()\r\n\r\n    const handleChat = useCallback(() => {\r\n        if (contactId) {\r\n            interactionStateMethods.createPotentialItem({\r\n                phone,\r\n                contactId,\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n            })\r\n            setActivePage({name: AppRoutes.Interactions})\r\n        }\r\n    }, [\r\n        contactId,\r\n        interactionStateMethods,\r\n        phone,\r\n        setActivePage,\r\n        user.firstName,\r\n        user.lastName,\r\n    ])\r\n\r\n    const onCall = useCallHandler()\r\n\r\n    const handleCall = useCallback(\r\n        (initiateCallParams: InitiateCall) => {\r\n            onCall({...initiateCallParams, navigateToInteractionsPage: true})\r\n        },\r\n        [onCall],\r\n    )\r\n\r\n\r\n    return (\r\n        <div className=\"flex flex-none items-center\">\r\n            {isUseButtonVisible && (\r\n                <Button\r\n                    onClick={partial(handleUse, contactToShortContact(user))}\r\n                    tooltip={t.UNDEFINED.button_use_contact_title()}\r\n                    data-testid=\"use-contact-button\"\r\n                    variant=\"ghost\"\r\n                    icon={<Svg src={iconUseContact} className=\"!h-3.5 !w-3.5\" />} // TODO: change icon when it's created by designers\r\n                />\r\n            )}\r\n            <Button\r\n                onClick={handleChat}\r\n                tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                data-testid=\"chat-button\"\r\n                variant=\"ghost\"\r\n                icon={<IconChat />}\r\n            />\r\n            <InteractionDropdown\r\n                searchMode=\"none\"\r\n                callParams={{\r\n                    phone,\r\n                    firstName,\r\n                    lastName,\r\n                    contactId,\r\n                    origination: 'contact-profile',\r\n                }}\r\n                onCall={handleCall}\r\n                trigger={({handleCallClick, isLoading, openerRef}) => (\r\n                    <Button\r\n                        onClick={handleCallClick}\r\n                        tooltip={t.CONTACT.button_start_call_text()}\r\n                        state={isLoading ? 'loading' : undefined}\r\n                        ref={openerRef}\r\n                        data-testid=\"call-button\"\r\n                        variant=\"ghost\"\r\n                        icon={<IconPhone24 />}\r\n                    />\r\n                )\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useActiveInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isCall, isEmail, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\n\r\n\r\nexport function useIsUseContactButtonVisible() {\r\n    return useActiveInteractionProp(i => isCall(i) || isExternalChat(i) || isEmail(i))\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useActiveInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getChannel,\r\n    getChatParties,\r\n    isCall,\r\n    isExternalChat,\r\n    isWorkItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {isMessengerChannel} from '@bpinc/ad-transport-types'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useOpenAddEmailModal, useOpenAddPhoneModal} from '../components/modals'\r\n\r\n\r\nexport function useHandleUseContact() {\r\n    const activeInteraction = useActiveInteraction()\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const openAddEmailModal = useOpenAddEmailModal()\r\n    const openAddPhoneModal = useOpenAddPhoneModal()\r\n    const channel = getChannel(activeInteraction)\r\n    const {getContactDetails} = useContactsStateMethods()\r\n\r\n    return useCallback((contact: ContactShortType) => {\r\n        assertDefined(activeInteraction)\r\n\r\n        const contactId = contact.id\r\n        const {firstName: contactFirstName, lastName: contactLastName} = contact\r\n\r\n        if (isCall(activeInteraction)) {\r\n            const parties = activeInteraction.allParties || []\r\n\r\n            if (parties.length) {\r\n                const {id: partyId, theirItemId, phone: partyPhone} = parties[0]\r\n\r\n                interactionStateMethods.useContact({\r\n                    partyId,\r\n                    itemId: theirItemId || '',\r\n                    contactId: contactId,\r\n                    firstName: contactFirstName || '',\r\n                    lastName: contactLastName || '',\r\n                })\r\n\r\n                if (partyPhone && phoneIsAbsent(partyPhone)) {\r\n                    openAddPhoneModal({\r\n                        phone: partyPhone,\r\n                        contactId,\r\n                        firstName: contactFirstName,\r\n                        lastName: contactLastName,\r\n                    })\r\n                }\r\n                return Promise.resolve()\r\n            }\r\n\r\n        } else if (isExternalChat(activeInteraction)) {\r\n            const parties = getChatParties(activeInteraction)\r\n\r\n            if (parties?.length) {\r\n                const {\r\n                    email,\r\n                    item_id: itemId,\r\n                    party_id: partyId,\r\n                    first_name: partyFirstName,\r\n                    last_name: partyLastName,\r\n                    phone: partyPhone,\r\n                } = parties[0]\r\n\r\n                const firstNameComputed = contactFirstName || partyFirstName || ''\r\n                const lastNameComputed = contactLastName || partyLastName || ''\r\n\r\n                interactionStateMethods.useContact({\r\n                    itemId,\r\n                    partyId,\r\n                    contactId: contactId,\r\n                    firstName: firstNameComputed,\r\n                    lastName: lastNameComputed,\r\n                })\r\n\r\n                if (partyPhone && phoneIsAbsent(partyPhone)) {\r\n                    openAddPhoneModal({\r\n                        phone: partyPhone,\r\n                        contactId,\r\n                        firstName: firstNameComputed,\r\n                        lastName: lastNameComputed,\r\n                    })\r\n                }\r\n\r\n                if (email) {\r\n                    openAddEmailModal({\r\n                        email,\r\n                        contactId,\r\n                        firstName: contactFirstName,\r\n                        lastName: contactLastName,\r\n                    })\r\n                }\r\n\r\n                if (isMessengerChannel(channel)) {\r\n                    setTimeout(() => {\r\n                        getContactDetails({id: contactId, force: true})\r\n                    }, 500)\r\n                }\r\n                return Promise.resolve()\r\n            }\r\n\r\n        } else if (isWorkItem(activeInteraction)) {\r\n            interactionStateMethods.useContact({\r\n                itemId: activeInteraction.id,\r\n                contactId: contactId,\r\n                firstName: contactFirstName ?? '',\r\n                lastName: contactLastName ?? '',\r\n            })\r\n            return Promise.resolve()\r\n        }\r\n        return Promise.reject()\r\n\r\n        function phoneIsAbsent(checkingPhone: string) {\r\n            return contact.phones?.every(p => p !== checkingPhone)\r\n        }\r\n    }, [activeInteraction, interactionStateMethods, openAddPhoneModal, channel, openAddEmailModal, getContactDetails])\r\n\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport type {MsTeamsChannel} from '@bpinc/ad-directory-state-types'\r\nimport {useActivityHistoryOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {IconChat} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    user: MsTeamsChannel\r\n}\r\nexport const MsTeamsChannelControls: FC<Props> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {userId: selfUserId} = useSessionState()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const handleChat = useCallback(() => {\r\n        assertDefined(selfUserId)\r\n        const {channelId, title} = user\r\n        openActivityHistory({\r\n            userId: channelId,\r\n            firstName: title,\r\n            origination: 'contact-profile',\r\n        })\r\n        setActivePage({name: AppRoutes.Interactions})\r\n    }, [selfUserId, user, openActivityHistory, setActivePage])\r\n\r\n    return (\r\n        <div className=\"-mt-1 ml-auto flex flex-none items-center\">\r\n            <Button\r\n                onClick={handleChat}\r\n                tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                data-testid=\"chat-button\"\r\n                icon={<IconChat />}\r\n                variant=\"ghost\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {UserDetails} from '@bpinc/ad-user-details-state-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {IconChat, IconPhone24} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    user: UserDetails\r\n}\r\nexport const MsTeamsChatControls: FC<Props> = ({user}) => {\r\n    const {t} = useLocalizationState()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const onCall = useCallHandler()\r\n    const {userId: selfUserId, phoneDeviceCapabilities} = useSessionState()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const handleChat = useCallback(() => {\r\n        assertDefined(selfUserId)\r\n        const {userId, firstName = '', lastName = ''} = user\r\n        openActivityHistory({\r\n            userId,\r\n            firstName,\r\n            lastName,\r\n            origination: 'contact-profile',\r\n        })\r\n        setActivePage({name: AppRoutes.Interactions})\r\n    }, [selfUserId, user, openActivityHistory, setActivePage])\r\n\r\n    const handleCall = useCallback(() => {\r\n        onCall({\r\n            phone: user.extension,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            userId: user.userId,\r\n            navigateToInteractionsPage: true,\r\n            origination: 'contact-profile',\r\n        })\r\n    }, [onCall, user.extension, user.firstName, user.lastName, user.userId])\r\n\r\n    return (\r\n        <div className=\"-mt-1 ml-auto flex flex-none items-center\">\r\n            <Button\r\n                onClick={handleChat}\r\n                tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                data-testid=\"chat-button\"\r\n                variant=\"ghost\"\r\n                icon={<IconChat />}\r\n            />\r\n            {user.extension && phoneDeviceCapabilities.canDial && (\r\n                <Button\r\n                    onClick={handleCall}\r\n                    tooltip={t.CONTACT.button_start_call_text()}\r\n                    data-testid=\"call-button\"\r\n                    variant=\"ghost\"\r\n                    icon={<IconPhone24 />}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {User} from '../../helpers'\r\nimport {isDirectoryEntry, isExternalUser, isMsTeamsChannel, isMsTeamsUser} from '../../helpers'\r\nimport {AgentControls} from './AgentControls'\r\nimport {DirectoryEntryControls} from './DirectoryEntryControls'\r\nimport {ExternalUserControls} from './ExternalUserControls'\r\nimport {MsTeamsChannelControls} from './MsTeamsChannelControls'\r\nimport {MsTeamsChatControls} from './MsTeamsChatControls'\r\n\r\n\r\nexport const ContactDetailsControls: React.FC<{\r\n    user: User\r\n}> = ({user}) => {\r\n    return isExternalUser(user) ? (\r\n        <ExternalUserControls user={user} />\r\n    ) : isMsTeamsChannel(user) ? (\r\n        <MsTeamsChannelControls user={user} />\r\n    ) : isMsTeamsUser(user) ? (\r\n        <MsTeamsChatControls user={user} />\r\n    ) : isDirectoryEntry(user) ? (\r\n        <DirectoryEntryControls item={user} />\r\n    ) : (\r\n        <AgentControls user={user} />\r\n    )\r\n}\r\n","import type {FormDefinition} from '@bpinc/ad-request-urls'\r\n\r\nimport {checkIsLayout} from './checkIsLayout'\r\nimport {getAllFormFields} from './getAllFormFields'\r\nimport {getFormElementMappingString} from './getFormElementMappingString'\r\n\r\n/**\r\n * Form values are stored as a map of field names to values.\r\n * This function creates a map of lead mapping strings to form values.\r\n */\r\nexport function createLeadMappingStringToFormValueMap(\r\n    formValues: Record<string, unknown>,\r\n    formDefinition: FormDefinition,\r\n): Record<string, unknown> {\r\n    const nonLayoutFields = getAllFormFields(formDefinition)\r\n        .filter(({field}) => !checkIsLayout(field))\r\n\r\n    return Object.entries(formValues)\r\n        .reduce((acc, [fieldName, value]) => {\r\n            const field = nonLayoutFields.find(it => it.field?.name === fieldName)\r\n            const mappingString = getFormElementMappingString(field)\r\n\r\n            if (!mappingString) {\r\n                return acc\r\n            }\r\n\r\n            return {\r\n                ...acc,\r\n                [mappingString]: value,\r\n            }\r\n        }, {})\r\n}\r\n","import type {FormDefinition} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function getAllFormFields(form?: FormDefinition) {\r\n    return form?.layout?.pages\r\n        ?.flatMap(page => page?.fields || [])\r\n        .flat() || []\r\n}\r\n","import type {\r\n    FormDefinitionField,\r\n    FormDefinitionFieldContainer,\r\n    FormDefinitionFieldSection,\r\n} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport function checkIsLayout(field: FormDefinitionField): field is FormDefinitionFieldSection | FormDefinitionFieldContainer {\r\n    return field.type === 'STATIC' &&\r\n    (field.staticType === 'SECTION' || field.staticType === 'CONTAINER')\r\n}\r\n","import type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\n\r\n/**\r\n * Mapping string is a string that is used to map form element to a specific scenario variable\r\n * It is specified in different ways for different form elements\r\n */\r\nexport function getFormElementMappingString(field: FormDefinitionPageItem | undefined) {\r\n    if (\r\n        field?.field.type === 'CUSTOM' &&\r\n        field?.field.leadMappingString\r\n    ) {\r\n        return field.field.leadMappingString\r\n    }\r\n\r\n    if (\r\n        field?.field.type === 'STATIC' &&\r\n        field?.field.staticType === 'MESSENGER' &&\r\n        field?.field.mapping\r\n    ) {\r\n        return field.field.mapping\r\n    }\r\n\r\n    return ''\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ActionCase, FormButtonAction, FormDefinition} from '@bpinc/ad-request-urls'\r\nimport {createLeadMappingStringToFormValueMap} from '@bpinc/lib-form-builder/src/utils'\r\nimport type {SemanticButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useButtonActionConditionsChecker} from './useButtonActionConditionsChecker'\r\nimport {useButtonHandlers} from './useButtonHandlers'\r\nimport {useButtonPrivilegesChecker} from './useButtonPrivilegesChecker'\r\n\r\n\r\nexport type ChangeFormPageId = (newPage: string) => void\r\n\r\nexport type FormBuilderButtonProps = SemanticButtonProps & {\r\n    contactId?: string\r\n    values?: Record<string, unknown>\r\n    changeFormPageId?: ChangeFormPageId\r\n    formDefinition?: FormDefinition\r\n    action: FormButtonAction\r\n    actionCases?: ActionCase[]\r\n    children: React.ReactNode\r\n    dataKey?: string\r\n}\r\n\r\nexport const FormBuilderButton: React.FC<FormBuilderButtonProps> = ({\r\n    contactId,\r\n    values,\r\n    formDefinition,\r\n    changeFormPageId,\r\n    action,\r\n    actionCases,\r\n    children,\r\n    dataKey,\r\n    ...props\r\n}) => {\r\n    const mappingToFormValues = values && formDefinition\r\n        ? createLeadMappingStringToFormValueMap(values || {}, formDefinition)\r\n        : values\r\n\r\n    const handleClick = useButtonHandlers({\r\n        contactId,\r\n        actionCases,\r\n        action,\r\n        values: mappingToFormValues,\r\n        changeFormPageId,\r\n    })\r\n\r\n    const hasPrivileges = useButtonPrivilegesChecker(action)\r\n    const isConditionsPassed = useButtonActionConditionsChecker({values: mappingToFormValues, actionCases})\r\n\r\n    const disabled = !isConditionsPassed || !hasPrivileges\r\n\r\n    return (\r\n        <SemanticButton\r\n            {...props}\r\n            data-testid={dataKey}\r\n            data-form-field=\"true\"\r\n            data-field-type=\"button\"\r\n            data-disabled={disabled || undefined}\r\n            onClick={handleClick}\r\n            basic\r\n            disabled={disabled}\r\n        >\r\n            {children}\r\n        </SemanticButton>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractions, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getAssociatedChatServiceId, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {ActionCase, FormButtonAction} from '@bpinc/ad-request-urls'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {checkConditions} from '@bpinc/lib-form-builder'\r\nimport {useDisconnectButtonClickHandler} from '@bpinc/lib-helpers-ui'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\n\r\nimport type {ChangeFormPageId} from './FormBuilderButton'\r\n\r\n\r\n type UseButtonHandlersParams = {\r\n     contactId?: string\r\n     actionCases?: ActionCase[]\r\n     action: FormButtonAction\r\n     values?: Record<string, unknown>\r\n     changeFormPageId?: ChangeFormPageId\r\n }\r\n\r\nexport function useButtonHandlers({\r\n    contactId,\r\n    actionCases,\r\n    values,\r\n    action,\r\n    changeFormPageId,\r\n}: UseButtonHandlersParams) {\r\n    const {initiateCall, initiateChat} = useInteractionStateMethods()\r\n    const contact = useContact(contactId)\r\n    const {addMessageToPending} = useInteractionChatStateMethods()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {privileges} = useSessionState()\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n    const canStartExternalChatPrivilege = privilegesLoaded && privileges.CAN_START_EXTERNAL_CHAT\r\n\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const {services} = useServicesDispositionsState()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const {showNotification, hideNotificationsByTag} = useNotificationsState('methods')\r\n    const {getServiceAndDIDNumbersErrors} = useErrorValidation()\r\n\r\n    const {dispositions} = useServicesDispositionsState()\r\n\r\n    const associatedChatServiceId = getAssociatedChatServiceId(services, selectedService)\r\n\r\n    const startAction = useCallback(\r\n        function startActionCallback(actionCallback: (actionCase: ActionCase) => void) {\r\n            actionCases?.forEach(actionCase => {\r\n                const validConditions = checkConditions({\r\n                    conditions: actionCase?.conditions,\r\n                    values,\r\n                })\r\n\r\n                if (!validConditions) {\r\n                    return\r\n                }\r\n\r\n                actionCallback(actionCase)\r\n            })\r\n        },\r\n        [values, actionCases],\r\n    )\r\n\r\n    const startCallAction = useCallback(\r\n        function startCallCallback(actionCase: ActionCase) {\r\n            if (actionCase?.numberToCall) {\r\n                const errors = getServiceAndDIDNumbersErrors({\r\n                    skip: ['noChatInService'],\r\n                    interactionType: 'call',\r\n                })\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                initiateCall({\r\n                    phone: actionCase.numberToCall,\r\n                    serviceId: selectedService,\r\n                    accessNumberId: selectedDIDNumber,\r\n                    contactId,\r\n                    firstName: contact?.data?.firstName,\r\n                    lastName: contact?.data?.firstName,\r\n                    origination: 'contact-profile',\r\n                })\r\n                setActivePage({name: AppRoutes.Interactions})\r\n            }\r\n        },\r\n        [\r\n            contact?.data?.firstName,\r\n            contactId,\r\n            getServiceAndDIDNumbersErrors,\r\n            hideNotificationsByTag,\r\n            initiateCall,\r\n            selectedDIDNumber,\r\n            selectedService,\r\n            setActivePage,\r\n            showNotification,\r\n        ],\r\n    )\r\n\r\n    const startSMSChatAction = useCallback(\r\n        function startSMSChatCallback(actionCase: ActionCase) {\r\n            if (!canStartExternalChatPrivilege) {\r\n                return\r\n            }\r\n\r\n            if (actionCase?.numberToSMS) {\r\n                if (actionCase?.messageToSMS) {\r\n                    addMessageToPending(\r\n                        {\r\n                            content: actionCase.messageToSMS,\r\n                            channel: 'sms',\r\n                            type: 'message',\r\n                        },\r\n                        actionCase.numberToSMS,\r\n                    )\r\n                }\r\n\r\n                const errors = getServiceAndDIDNumbersErrors({interactionType: 'sms'})\r\n\r\n                if (errors.length) {\r\n                    showNotification(errors[0])\r\n                    return\r\n                }\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                initiateChat({\r\n                    channel: 'sms',\r\n                    address: actionCase.numberToSMS,\r\n                    serviceId: associatedChatServiceId,\r\n                    displayData: {\r\n                        firstName: contact?.data?.firstName,\r\n                        lastName: contact?.data?.lastName,\r\n                    },\r\n                    accessNumberId: selectedDIDNumber,\r\n                    contactId,\r\n                    origination: 'contact-profile',\r\n                })\r\n                setActivePage({name: AppRoutes.Interactions})\r\n            }\r\n        },\r\n        [\r\n            contact?.data?.firstName,\r\n            contact?.data?.lastName,\r\n            addMessageToPending,\r\n            associatedChatServiceId,\r\n            canStartExternalChatPrivilege,\r\n            contactId,\r\n            getServiceAndDIDNumbersErrors,\r\n            initiateChat,\r\n            hideNotificationsByTag,\r\n            selectedDIDNumber,\r\n            setActivePage,\r\n            showNotification,\r\n        ],\r\n    )\r\n\r\n    const searchKBAction = useCallback(\r\n        function searchKBCallback(actionCase: ActionCase) {\r\n            if (actionCase?.searchText) {\r\n                setActivePage({\r\n                    name: AppRoutes.KnowledgeBase,\r\n                    params: {\r\n                        searchText: actionCase.searchText,\r\n                    },\r\n                })\r\n            }\r\n        },\r\n        [setActivePage],\r\n    )\r\n\r\n    const changeFormPageAction = useCallback(\r\n        function changeFormPageActionCallback(actionCase: ActionCase) {\r\n            if (!actionCase.page) {\r\n                return\r\n            }\r\n\r\n            changeFormPageId?.(actionCase.page)\r\n        },\r\n        [changeFormPageId],\r\n    )\r\n\r\n    const items = useInteractions()\r\n    const handleDisconnectButtonClick = useDisconnectButtonClickHandler()\r\n\r\n    const completeItemAction = useCallback(\r\n        function completeItemActionCallback() {\r\n            const itemWithTheSameContactId = items.find(item => item.contactId === contactId)\r\n            if (itemWithTheSameContactId) {\r\n                handleDisconnectButtonClick(itemWithTheSameContactId, {\r\n                    completeAfterDisconnect: true,\r\n                    openInteractionsPageOnError: true,\r\n                })\r\n            }\r\n        },\r\n        [contactId, handleDisconnectButtonClick, items],\r\n    )\r\n\r\n    const sendDispositionAction = useCallback(\r\n        function sendDispositionActionCallback(actionCase: ActionCase) {\r\n            const itemWithTheSameContactId = items.find(item => item.contactId === contactId)\r\n\r\n            if (!itemWithTheSameContactId) {\r\n                return\r\n            }\r\n\r\n            const dispositionName = actionCase.disposition\r\n\r\n            const serviceId = isWorkItem(itemWithTheSameContactId)\r\n                ? itemWithTheSameContactId?.workitemData?.serviceId\r\n                : itemWithTheSameContactId?.scenarioData?.serviceId\r\n\r\n            const dispositionsObject = serviceId ? dispositions[serviceId] : {}\r\n\r\n            const dispositionToSelect = Object.values(dispositionsObject).find(\r\n                disposition => disposition.name === dispositionName,\r\n            )\r\n\r\n            if (dispositionToSelect) {\r\n                interactionStateMethods.setDisposition({\r\n                    itemId: itemWithTheSameContactId.id,\r\n                    disposition: {\r\n                        id: dispositionToSelect.id,\r\n                        name: dispositionToSelect.name,\r\n                    },\r\n                })\r\n            }\r\n\r\n            handleDisconnectButtonClick(itemWithTheSameContactId, {\r\n                completeAfterDisconnect: true,\r\n                openInteractionsPageOnError: true,\r\n                disposition: dispositionToSelect,\r\n            })\r\n        },\r\n        [contactId, dispositions, handleDisconnectButtonClick, interactionStateMethods, items],\r\n    )\r\n\r\n    const completeItem = useCallback(\r\n        function completeItemCallback() {\r\n            startAction(completeItemAction)\r\n        },\r\n        [completeItemAction, startAction],\r\n    )\r\n\r\n    const sendDisposition = useCallback(\r\n        function sendDispositionCallback() {\r\n            startAction(sendDispositionAction)\r\n        },\r\n        [startAction, sendDispositionAction],\r\n    )\r\n\r\n    const startCall = useCallback(\r\n        function startCallCallback() {\r\n            startAction(startCallAction)\r\n        },\r\n        [startAction, startCallAction],\r\n    )\r\n\r\n    const startSMSChat = useCallback(\r\n        function startSMSChatCallback() {\r\n            startAction(startSMSChatAction)\r\n        },\r\n        [startAction, startSMSChatAction],\r\n    )\r\n\r\n    const searchKB = useCallback(\r\n        function startSMSChatCallback() {\r\n            startAction(searchKBAction)\r\n        },\r\n        [searchKBAction, startAction],\r\n    )\r\n\r\n    const changeFormPage = useCallback(\r\n        function changeFormPageCallback() {\r\n            startAction(changeFormPageAction)\r\n        },\r\n        [changeFormPageAction, startAction],\r\n    )\r\n\r\n    return useCallback(\r\n        function handleClickCallback() {\r\n            if (action === 'Start SMS') {\r\n                startSMSChat()\r\n            }\r\n\r\n            if (action === 'Call number') {\r\n                startCall()\r\n            }\r\n\r\n            if (action === 'Search Knowledge Base') {\r\n                searchKB()\r\n            }\r\n\r\n            if (action === 'Complete') {\r\n                completeItem()\r\n            }\r\n\r\n            if (action === 'Disposition') {\r\n                sendDisposition()\r\n            }\r\n\r\n            if (action === 'Go To Page') {\r\n                changeFormPage()\r\n            }\r\n        },\r\n        [\r\n            action,\r\n            startSMSChat,\r\n            startCall,\r\n            searchKB,\r\n            completeItem,\r\n            sendDisposition,\r\n            changeFormPage,\r\n        ],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {FormButtonAction} from '@bpinc/ad-request-urls'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useServicesDispositionsState} from '@bpinc/ad-services-dispositions-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useButtonPrivilegesChecker(action?: FormButtonAction) {\r\n    const {privileges, phoneDeviceCapabilities} = useSessionState()\r\n    const {selectedService} = useServiceState()\r\n    const {outboundChatChannels} = useServicesDispositionsState()\r\n\r\n    return useMemo(function memoizeHasPrivileges() {\r\n        const privilegesLoaded = !!Object.keys(privileges).length\r\n        const canStartExternalChatPrivilege =\r\n            privilegesLoaded && !!privileges.CAN_START_EXTERNAL_CHAT\r\n\r\n        if (action === 'Start SMS') {\r\n            return canStartExternalChatPrivilege && !!withOutboundChatChannel()\r\n        }\r\n\r\n        if (action === 'Call number') {\r\n            return !!phoneDeviceCapabilities.canDial\r\n        }\r\n\r\n        return true\r\n\r\n        function withOutboundChatChannel() {\r\n            return selectedService && outboundChatChannels[selectedService]?.includes('SMS')\r\n        }\r\n    }, [outboundChatChannels, phoneDeviceCapabilities.canDial, privileges, selectedService, action])\r\n\r\n}\r\n","import type {ActionCase} from '@bpinc/ad-request-urls'\r\nimport {checkConditions} from '@bpinc/lib-form-builder'\r\n\r\n\r\ntype UseButtonConditionsParams = {\r\n    values?: Record<string, unknown>\r\n    actionCases?: ActionCase[]\r\n}\r\n\r\nexport function useButtonActionConditionsChecker({values, actionCases}: UseButtonConditionsParams) {\r\n    return actionCases?.some(actionCase => {\r\n        return checkConditions({\r\n            values,\r\n            conditions: actionCase?.conditions,\r\n        })\r\n    })\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\n\r\ninterface ImageProps {\r\n    style?: CSSProperties\r\n    value?: string\r\n    className?: string\r\n}\r\n\r\nexport const Image: React.FC<ImageProps> = ({\r\n    style,\r\n    value,\r\n    className,\r\n}) => {\r\n    const finalStyle = useMemo(() => ({\r\n        ...style,\r\n        minHeight: style?.height,\r\n    }), [style])\r\n\r\n    return (\r\n        <img\r\n            className={className}\r\n            src={value ? `data:image;base64,${value}` : undefined}\r\n            style={finalStyle}\r\n            alt=\"form-image\"\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\n\r\ninterface SpacerProps {\r\n    height?: CSSProperties['height']\r\n}\r\n\r\nexport const Spacer: React.FC<SpacerProps> = ({height}) => {\r\n    const style = useMemo(() => {\r\n        if (typeof height !== 'number') {\r\n            return {}\r\n        }\r\n\r\n        return {\r\n            flexShrink: 0,\r\n            height: height * 2,\r\n        }\r\n    }, [height])\r\n\r\n    return (\r\n        <div style={style} />\r\n    )\r\n}\r\n","import type {CSSProperties, ReactElement, ReactNode} from 'react'\r\nimport React, {useCallback, useId} from 'react'\r\nimport type {Control} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport type {ButtonElement, FormElement, ImageElement} from '@bpinc/lib-form-builder'\r\nimport {FormBuilderButton, Image, Spacer} from '@bpinc/lib-form-builder-ui'\r\nimport {MessengerView, RadioFieldRaw} from '@bpinc/lib-forms-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport interface FormElementViewProps {\r\n    label?: string\r\n    value?: string\r\n    contactId?: string\r\n    userId?: string\r\n    values?: ContactDetailsType\r\n    type?: FormElement['type']\r\n    image?: ImageElement\r\n    button?: ButtonElement\r\n    messenger?: ContactMessenger\r\n    height?: CSSProperties['height']\r\n    name?: string\r\n    options?: FormElement['options']\r\n    control?: Control<ContactDetailsType>\r\n    additionalControls?: ReactElement\r\n    isStaticEntry?: boolean\r\n}\r\n\r\nexport const FormElementView: React.FC<FormElementViewProps> = ({\r\n    label,\r\n    value,\r\n    type,\r\n    image,\r\n    button,\r\n    height,\r\n    contactId,\r\n    userId,\r\n    messenger,\r\n    values,\r\n    name,\r\n    options,\r\n    isStaticEntry,\r\n    control,\r\n    additionalControls,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const ariaId1 = useId()\r\n    const ariaId2 = useId()\r\n\r\n    const firstName = values?.['Contact.first_name']\r\n    const lastName = values?.['Contact.last_name']\r\n\r\n    const viewListItemClassName = tcn('flex flex-col border-b border-main-border px-4 py-2')\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent) => {\r\n            e.preventDefault()\r\n\r\n            const el = e.currentTarget\r\n            const elementType = el.getAttribute('data-type') as FormElementViewProps['type']\r\n            const elementValue = el.getAttribute('data-value')\r\n\r\n            if (elementType) {\r\n                switch (elementType) {\r\n                    case 'number':\r\n                        return (\r\n                            elementValue &&\r\n                            handleCall({\r\n                                phone: elementValue,\r\n                                contactId,\r\n                                firstName,\r\n                                lastName,\r\n                                navigateToInteractionsPage: true,\r\n                                origination: 'contact-profile',\r\n                            })\r\n                        )\r\n                    case 'email':\r\n                        return alert('TODO: handle email click for: ' + elementValue)\r\n                    case 'message':\r\n                        return openActivityHistory({\r\n                            contactId,\r\n                            userId,\r\n                            origination: 'contact-profile',\r\n                            firstName,\r\n                            lastName,\r\n                            phone: userId ? undefined : value,\r\n                        })\r\n                }\r\n            }\r\n        },\r\n        [handleCall, contactId, firstName, lastName, openActivityHistory, userId, value],\r\n    )\r\n\r\n    const renderTextFormElement = useCallback(\r\n        function renderTextFormElementCallback(content: ReactElement) {\r\n            return (\r\n                <div\r\n                    role=\"listitem\"\r\n                    className={viewListItemClassName}\r\n                    id={ariaId1}\r\n                    data-testid={name}\r\n                    data-form-field=\"true\"\r\n                    data-field-type=\"text-view\"\r\n                >\r\n                    <div>{label}</div>\r\n                    <div className=\"!flex leading-[20px]\">\r\n                        {content}\r\n                        {additionalControls && <div className=\"ml-2 inline-flex\">{additionalControls}</div>}\r\n                    </div>\r\n                </div>\r\n            )\r\n        },\r\n        [additionalControls, viewListItemClassName, ariaId1, label, name],\r\n    )\r\n\r\n    const renderLink = useCallback(\r\n        function renderLinkCallback(content: ReactNode) {\r\n            return (\r\n                <a\r\n                    onClick={handleClick}\r\n                    data-type={type}\r\n                    data-value={value}\r\n                    tabIndex={0}\r\n                    role=\"button\"\r\n                    aria-labelledby={`${ariaId1} ${ariaId2}`}\r\n                    id={ariaId2}\r\n                    data-testid=\"content\"\r\n                    data-clickable=\"true\"\r\n                    className=\"truncate font-bold text-primary-action\"\r\n                >\r\n                    {content}\r\n                </a>\r\n            )\r\n        },\r\n        [ariaId1, ariaId2, handleClick, type, value],\r\n    )\r\n\r\n\r\n    if (button) {\r\n        if (button.action === 'Augmentation' || button.action === 'Create email') {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <div role=\"listitem\" className={viewListItemClassName}>\r\n                <FormBuilderButton\r\n                    {...button}\r\n                    primary\r\n                    contactId={contactId}\r\n                    values={values}\r\n                    dataKey={name}\r\n                    action={button.action || 'Do Nothing'}\r\n                >\r\n                    {button.value}\r\n                </FormBuilderButton>\r\n            </div>\r\n        )\r\n    }\r\n    if (image) {\r\n        return (\r\n            <div role=\"listitem\" className={viewListItemClassName}>\r\n                <Image {...image} value={value} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (type === 'spacer') {\r\n        return (\r\n            <div role=\"listitem\" className={viewListItemClassName}>\r\n                <Spacer height={height} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (type === 'link') {\r\n        return (\r\n            <div role=\"listitem\" className={viewListItemClassName} data-testid={name} data-form-field=\"true\" data-field-type=\"link\">\r\n                <a href={`//${value}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {label}\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (type === 'radio' && name && control) {\r\n        return (\r\n            <div role=\"listitem\" className={viewListItemClassName} data-testid={name} data-form-field=\"true\" data-field-type=\"link\">\r\n                <div>{label}</div>\r\n                <div>\r\n                    <SmForm.Group className=\"mx-[-9px] mb-0 mt-2\">\r\n                        {options?.map(option => (\r\n                            <MergeContactRadioField\r\n                                key={option.id}\r\n                                control={control}\r\n                                name={name}\r\n                                label={option.name}\r\n                                radioValue={option.id}\r\n                                defaultValue={options[0]?.id}\r\n                            />\r\n                        ))}\r\n                    </SmForm.Group>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (type === 'message') {\r\n        return renderTextFormElement(\r\n            isStaticEntry ? (\r\n                <span data-testid=\"content\" className=\"truncate\">{value}</span>\r\n            ) : (\r\n                renderLink(userId === value ? t.CONTACT.internal_messages_field_value() : formatPhone(value))\r\n            ),\r\n        )\r\n    }\r\n\r\n    if (type === 'messenger' && messenger) {\r\n        return renderTextFormElement(\r\n            <MessengerView\r\n                contactId={contactId}\r\n                messenger={messenger}\r\n                firstName={firstName}\r\n                lastName={lastName}\r\n            />,\r\n        )\r\n    }\r\n\r\n    return renderTextFormElement(\r\n        type ? renderLink(type === 'number' ? formatPhone(value) : value) : <span data-testid=\"content\" className=\"truncate\">{value}</span>,\r\n    )\r\n}\r\n\r\ntype MergeContactRadioFieldProps = {\r\n    control: Control<ContactDetailsType>\r\n    name: string\r\n    label: string\r\n    defaultValue?: string\r\n    radioValue: string\r\n}\r\n\r\nconst MergeContactRadioField: React.FC<MergeContactRadioFieldProps> = ({\r\n    control,\r\n    radioValue,\r\n    name,\r\n    defaultValue,\r\n    label,\r\n}) => {\r\n    const {field} = useController({\r\n        name,\r\n        control,\r\n        defaultValue,\r\n    })\r\n\r\n    return (\r\n        <RadioFieldRaw\r\n            field={field}\r\n            className=\"!w-1/2\"\r\n            label={label}\r\n            radioValue={radioValue}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {IconClose24} from '@bpinc/lib-jskit-ui'\r\n\r\nimport type {User} from '../../helpers'\r\nimport {isDirectoryEntry, isMsTeamsChannel} from '../../helpers'\r\n\r\n\r\ninterface HeaderProps {\r\n    user: User\r\n    onGoBack: () => void\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({\r\n    user,\r\n    onGoBack,\r\n}) => {\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const title = (isDirectoryEntry(user) || isMsTeamsChannel(user))\r\n        ? user.title\r\n        : formatFullName(user.firstName ?? '', user.lastName)\r\n\r\n    return (\r\n        <div className=\"relative border-b p-6\">\r\n            <h1 className=\"truncate heading-s text-primary-on-primary\">\r\n                {title}\r\n            </h1>\r\n\r\n            <Button\r\n                icon={<IconClose24 />}\r\n                variant=\"ghost\"\r\n                onClick={onGoBack}\r\n                className=\"absolute right-6 top-1/2 -translate-y-1/2\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {\r\n    isHuntGroupEntry,\r\n    isScenarioVoiceEntry,\r\n    isStaticEmailEntry,\r\n    isStaticVoiceEntry,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {FavoritesChannelMedia} from '@bpinc/ad-transport-types'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {DirectoryContactChannelFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport type {FormElement} from '@bpinc/lib-form-builder'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport type {\r\n    FavoritesChannel,\r\n    FavoritesChannelEmail,\r\n    FavoritesChannelInternal,\r\n    FavoritesChannelPhone,\r\n} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ServiceSelect} from '../../../components/ServiceSelect'\r\nimport {Avatar} from '../Avatar'\r\nimport {ContactDetailsControls} from '../ContactDetailsControls'\r\nimport {FormElementView} from '../FormElementView'\r\nimport {Header} from '../Header'\r\n\r\n\r\ninterface Props {\r\n    entryId: string\r\n}\r\n\r\ninterface Field {\r\n    type?: FormElement['type']\r\n    value: string\r\n    label: string\r\n    favoritesChannel?: FavoritesChannel\r\n}\r\n\r\nexport const DirectoryEntry: React.FC<Props> = ({entryId}) => {\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n\r\n    const activeInteractionId = useActiveInteractionId()\r\n    const goBack = useNavigationState('goBack')\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const directoryEntries = useDirectoryState('categoryEntries')\r\n    const entryData = Object.values(directoryEntries).flat().find(entry => entry.id === entryId)\r\n\r\n    const fields = useMemo<Field[]>(() => {\r\n        if (!entryData) {\r\n            return []\r\n        }\r\n\r\n        if (isScenarioVoiceEntry(entryData) || isHuntGroupEntry(entryData)) {\r\n            return [\r\n                {\r\n                    type: 'number' as const,\r\n                    value: entryData.number,\r\n                    label: i18n.description_field_label(),\r\n                    favoritesChannel: {\r\n                        channelType: 'internal',\r\n                        number: entryData.number,\r\n                        media: ['voice'],\r\n                    } satisfies FavoritesChannelInternal,\r\n                },\r\n            ]\r\n        }\r\n        if (isStaticVoiceEntry(entryData)) {\r\n            return [\r\n                {\r\n                    value: i18n.phone_field_label(),\r\n                    label: i18n.type_field_label(),\r\n                },\r\n                {\r\n                    type: 'number' as const,\r\n                    value: entryData.number,\r\n                    label: i18n.description_field_label(),\r\n                    favoritesChannel: {\r\n                        channelType: 'phone',\r\n                        number: entryData.number,\r\n                        media: ['voice', 'chat'],\r\n                    } satisfies FavoritesChannelPhone,\r\n                },\r\n            ]\r\n        }\r\n        if (isStaticEmailEntry(entryData)) {\r\n            return [\r\n                {\r\n                    value: i18n.email_field_label(),\r\n                    label: i18n.type_field_label(),\r\n                },\r\n                {\r\n                    type: 'email' as const,\r\n                    value: entryData.email,\r\n                    label: i18n.description_field_label(),\r\n                    favoritesChannel: {\r\n                        channelType: 'email',\r\n                        email: entryData.email,\r\n                    } satisfies FavoritesChannelEmail,\r\n                },\r\n            ]\r\n        }\r\n        return []\r\n    }, [entryData, i18n])\r\n\r\n    const handlePhoneChannelInteraction = useEvent((number: string, media: FavoritesChannelMedia) => {\r\n        if (media === 'voice') {\r\n            handleCall({\r\n                userId: entryId,\r\n                phone: number,\r\n                lastName: entryData?.title,\r\n                navigateToInteractionsPage: true,\r\n                origination: 'contact-profile',\r\n            })\r\n        } else {\r\n            openActivityHistory({\r\n                userId: entryId,\r\n                phone: number,\r\n                lastName: entryData?.title,\r\n                origination: 'contact-profile',\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div\r\n            className=\"flex min-h-0 flex-auto flex-col overflow-y-auto overflow-x-hidden py-3\"\r\n            data-testid=\"contact-details\"\r\n        >\r\n            {!entryData ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Header user={entryData} onGoBack={goBack} />\r\n\r\n                    <div className=\"flex items-center gap-2 px-6 pb-2 pt-4\">\r\n                        <ServiceSelect itemId={activeInteractionId} />\r\n                        <ContactDetailsControls user={entryData} />\r\n                    </div>\r\n\r\n                    <div className=\"flex shrink-0 gap-8 px-6 py-4\">\r\n                        <Avatar user={entryData} />\r\n                        {!!fields.length && (\r\n                            <div role=\"list\" className=\"flex grow flex-col overflow-y-auto overflow-x-hidden px-4\">\r\n                                {fields.map((field, index) => (\r\n                                    <FormElementView\r\n                                        key={index}\r\n                                        isStaticEntry\r\n                                        label={field.label}\r\n                                        type={field.type}\r\n                                        value={field.value}\r\n                                        userId={entryId}\r\n                                        additionalControls={\r\n                                            field.favoritesChannel && (\r\n                                                <DirectoryContactChannelFavoriteButton\r\n                                                    item={entryData}\r\n                                                    channel={field.favoritesChannel}\r\n                                                    onPhoneInteraction={handlePhoneChannelInteraction}\r\n                                                />\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo} from 'react'\r\n\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {FavoritesChannelMedia} from '@bpinc/ad-transport-types'\r\nimport {useUserDetailsOnceGetter} from '@bpinc/ad-user-details-state-context'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {DirectoryContactChannelFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport type {FormElement} from '@bpinc/lib-form-builder'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport type {FavoritesChannel, FavoritesChannelInternal, FavoritesChannelPhone} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ServiceSelect} from '../../../components/ServiceSelect'\r\nimport {useInternalUserData} from '../../../hooks/useInternalUserData'\r\nimport {isDirectoryEntry, isMsTeamsChannel, isMsTeamsUser, isMsTeamsUserDetails} from '../../helpers'\r\nimport {Avatar} from '../Avatar'\r\nimport {ContactDetailsControls} from '../ContactDetailsControls'\r\nimport {FormElementView} from '../FormElementView'\r\nimport {Header} from '../Header'\r\n\r\n\r\ninterface Props {\r\n    userId: string\r\n}\r\n\r\ninterface Field {\r\n    type?: FormElement['type']\r\n    value: string\r\n    label: string\r\n    favoritesChannel?: FavoritesChannel\r\n}\r\n\r\nexport const User: React.FC<Props> = ({userId}) => {\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n\r\n    const activeInteractionId = useActiveInteractionId()\r\n    const getUserDetailsOnce = useUserDetailsOnceGetter()\r\n    const goBack = useNavigationState('goBack')\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const data = useInternalUserData(userId)\r\n\r\n    const firstName = data && !isMsTeamsChannel(data) ? data.firstName : undefined\r\n    const lastName = data && !isMsTeamsChannel(data) ? data.lastName : undefined\r\n    const emiUserType =\r\n        (data && (isMsTeamsUser(data) || isMsTeamsChannel(data)))\r\n            ? data.userType\r\n            : undefined\r\n    const emiPhotoUrl =\r\n        (data && (isMsTeamsUser(data) || isMsTeamsChannel(data)))\r\n            ? data.photoUrl\r\n            : undefined\r\n\r\n    useEffect(() => {\r\n        if (!data) {\r\n            getUserDetailsOnce({userIds: [userId]})\r\n        }\r\n        // onComponentDidMount\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const fields = useMemo<Field[]>(() => {\r\n        if (!data) {\r\n            return []\r\n        }\r\n\r\n        if (isMsTeamsChannel(data)) {\r\n            return []\r\n        }\r\n\r\n        if (isMsTeamsUser(data) || isMsTeamsUserDetails(data)) {\r\n            const msTeamsPhones = isMsTeamsUser(data) ? data.phones : data.msTeamsPhones ?? []\r\n            return Object.values(msTeamsPhones).reduce<Field[]>((result, phone) => {\r\n                result.push({\r\n                    type: 'number' as const,\r\n                    value: phone.phone,\r\n                    label: i18n.phone_field_label(),\r\n                    favoritesChannel: {\r\n                        channelType: 'phone',\r\n                        number: phone.phone,\r\n                        numberType: phone.type,\r\n                        media: ['voice'],\r\n                    } satisfies FavoritesChannelPhone,\r\n                })\r\n                return result\r\n            }, [])\r\n        }\r\n\r\n        return !data.extension\r\n            ? []\r\n            : [\r\n                {\r\n                    type: 'number' as const,\r\n                    value: data.extension,\r\n                    label: i18n.phone_field_label(),\r\n                    favoritesChannel: {\r\n                        channelType: 'internal',\r\n                        number: data.extension,\r\n                        media: ['voice', 'chat'],\r\n                    } satisfies FavoritesChannelInternal,\r\n                },\r\n            ]\r\n    }, [data, i18n])\r\n\r\n    const handlePhoneChannelInteraction = useEvent((number: string, media: FavoritesChannelMedia) => {\r\n        if (media === 'voice') {\r\n            handleCall({\r\n                userId,\r\n                phone: number,\r\n                firstName,\r\n                lastName,\r\n                navigateToInteractionsPage: true,\r\n                origination: 'contact-profile',\r\n            })\r\n        } else {\r\n            openActivityHistory({\r\n                userId,\r\n                phone: number,\r\n                firstName,\r\n                lastName,\r\n                emiUserType,\r\n                emiPhotoUrl,\r\n                origination: 'contact-profile',\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div\r\n            className=\"flex min-h-0 flex-auto flex-col overflow-y-auto overflow-x-hidden py-3\"\r\n            data-testid=\"contact-details\"\r\n        >\r\n            {!data ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Header user={data} onGoBack={goBack} />\r\n\r\n                    <div className=\"flex items-center gap-2 px-6 pb-2 pt-4\">\r\n                        <ServiceSelect itemId={activeInteractionId} />\r\n                        <ContactDetailsControls user={data} />\r\n                    </div>\r\n\r\n                    <div className=\"flex shrink-0 gap-8 px-6 py-4\">\r\n                        <Avatar user={data} />\r\n\r\n                        {!!fields.length && (\r\n                            <div role=\"list\" className=\"flex grow flex-col overflow-y-auto overflow-x-hidden px-4\">\r\n                                {fields.map((field, index) => (\r\n                                    <FormElementView\r\n                                        key={index}\r\n                                        label={field.label}\r\n                                        type={field.type}\r\n                                        value={field.value}\r\n                                        userId={userId}\r\n                                        isStaticEntry={isDirectoryEntry(data)}\r\n                                        additionalControls={\r\n                                            field.favoritesChannel && (\r\n                                                <DirectoryContactChannelFavoriteButton\r\n                                                    item={data}\r\n                                                    channel={field.favoritesChannel}\r\n                                                    onPhoneInteraction={handlePhoneChannelInteraction}\r\n                                                />\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {MS_TEAMS_CHANNELS_CATEGORY_ID, MS_TEAMS_CHATS_CATEGORY_ID} from '@bpinc/ad-directory-state-types'\r\nimport {useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\n\r\n\r\nexport function useInternalUserData(userId?: string) {\r\n    const {\r\n        users,\r\n        searchResults,\r\n        emiUsers,\r\n    } = useDirectoryState([\r\n        'users',\r\n        'searchResults',\r\n        'emiUsers',\r\n    ])\r\n    const userDetails = useUserDetailsById(userId)\r\n\r\n    return useMemo(() => {\r\n        const dialpadSearchInternalUsers = searchResults.dialpad?.data?.users ?? []\r\n        const msTeamsUsers = emiUsers[MS_TEAMS_CHATS_CATEGORY_ID] ?? []\r\n        const msTeamsChannels = emiUsers[MS_TEAMS_CHANNELS_CATEGORY_ID] ?? []\r\n\r\n        return (\r\n            [\r\n                ...users,\r\n                ...dialpadSearchInternalUsers,\r\n                ...msTeamsUsers,\r\n            ].find(user => user.userId === userId)\r\n            || msTeamsChannels.find(({channelId}) => channelId === userId)\r\n            || userDetails?.data\r\n        )\r\n    }, [\r\n        emiUsers,\r\n        searchResults.dialpad?.data?.users,\r\n        userDetails?.data,\r\n        userId,\r\n        users,\r\n    ])\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {ModalConfig} from '@bpinc/state-modals-types'\r\n\r\n\r\ninterface ActionsProps {\r\n    closeModal: () => void\r\n    onConfirm: () => void\r\n}\r\n\r\nconst Title: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const text = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning()\r\n\r\n    return <>{text}</>\r\n}\r\n\r\nconst Content: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <p>{t.CONTACT.unsaved_warning_message()}</p>\r\n    )\r\n}\r\n\r\nconst Actions: React.FC<ActionsProps> = props => {\r\n    const {t} = useLocalizationState()\r\n    const {closeModal, onConfirm} = props\r\n\r\n    const handleContinue = useCallback(() => {\r\n        closeModal()\r\n        onConfirm()\r\n    }, [closeModal, onConfirm])\r\n\r\n    return (\r\n        <>\r\n            <SemanticButton\r\n                enabledInOffline\r\n                primary\r\n                onClick={closeModal}\r\n                data-testid=\"cancel-button\"\r\n            >\r\n                {t.UNDEFINED.button_cancel_contact_text()}\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                enabledInOffline\r\n                onClick={handleContinue}\r\n                data-testid=\"continue-button\"\r\n            >\r\n                {t.GLOBAL.continue()}\r\n            </SemanticButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const getGoBackWarningModal = (onConfirm: () => void): ModalConfig => {\r\n    return {\r\n        dataKey: 'contact-details-go-back-modal',\r\n        title: <Title />,\r\n        body: <Content />,\r\n        actions: ({closeModal}: { closeModal: () => void }) => {\r\n            return (\r\n                <Actions\r\n                    closeModal={closeModal}\r\n                    onConfirm={onConfirm}\r\n                />\r\n            )\r\n        },\r\n    }\r\n}\r\n","import type {AriaAttributes, CSSProperties, ReactNode, RefCallback} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface Option {\r\n    value: string\r\n    label: string\r\n}\r\n\r\nexport type DropdownProps = AriaAttributes & {\r\n    inputRef?: RefCallback<HTMLSelectElement>\r\n    options?: Option[]\r\n    className?: string\r\n    value?: Option['value']\r\n    name?: string\r\n    label?: ReactNode\r\n    error?: ReactNode\r\n    placeholder?: string\r\n    noValueLabel?: string | null\r\n    labelClassName?: string\r\n    errorClassName?: string\r\n    onChange(value: Option['value'] | undefined, extra: { name?: string }): void\r\n    style?: CSSProperties\r\n}\r\n\r\nconst DEFAULT_LABEL = 'Please select'\r\n\r\nexport const Dropdown: React.FC<DropdownProps> = props => {\r\n    const {\r\n        options,\r\n        onChange,\r\n        className,\r\n        name,\r\n        label,\r\n        error,\r\n        value,\r\n        noValueLabel = DEFAULT_LABEL,\r\n        inputRef,\r\n        placeholder,\r\n        labelClassName,\r\n        errorClassName,\r\n        ...selectProps\r\n    } = props\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const el = e.target\r\n        if (el) {\r\n            const newValue = el.value || undefined\r\n            onChange(newValue, {name})\r\n        }\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                className,\r\n                'relative flex min-w-0 justify-between',\r\n                {\r\n                    'text-red-500': error,\r\n                },\r\n            )}\r\n        >\r\n            {label && <label className={tcn(labelClassName, 'mt-1.5 flex-1')}>{label}</label>}\r\n\r\n            <select\r\n                placeholder={placeholder}\r\n                ref={inputRef}\r\n                value={value || ''}\r\n                onChange={handleChange}\r\n                {...selectProps}\r\n                className=\"max-w-full flex-[2] rounded-md border border-gray-400 bg-white p-1\"\r\n            >\r\n                {noValueLabel && <option value=\"\">{noValueLabel}</option>}\r\n                {options?.map((o, i) => (\r\n                    <option key={i} value={o.value}>\r\n                        {o.label || o.value}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            {error && <p className={errorClassName} role=\"alert aria-atomic\">{error}</p>}\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRawProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor, FieldRawConstructor} from '@bpinc/lib-forms-base'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {DropdownProps} from './Dropdown'\r\nimport {Dropdown} from './Dropdown'\r\n\r\n\r\ntype SelectFieldProps = FieldImplementationProps<\r\n    Omit<DropdownProps, 'onChange' | 'label'> & {\r\n        label?: string\r\n    }>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    options,\r\n    onChange,\r\n    label,\r\n    ...props\r\n}: FieldRenderImplementationProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    const ariaId1 = uuid()\r\n\r\n    return (\r\n        <Dropdown\r\n            {...props}\r\n            inputRef={ref}\r\n            label={label}\r\n            placeholder={label}\r\n            errorClassName=\"self-end text-red-500\"\r\n            aria-labelledby={ariaId1}\r\n            options={options}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport function SelectFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\nexport function SelectField<TFormValues extends FieldValues>(props: FieldProps<SelectFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRawProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor, FieldRawConstructor} from '@bpinc/lib-forms-base'\r\nimport type {InputFieldProps} from '@bpinc/lib-jskit-ui'\r\nimport {InputField} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ntype TextFieldProps = FieldImplementationProps<InputFieldProps>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>(props: FieldRenderImplementationProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return (\r\n        <InputField {...props} />\r\n    )\r\n}\r\n\r\nexport function TextFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\nexport function TextField<TFormValues extends FieldValues>(props: FieldProps<TextFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import React, {useCallback} from 'react'\r\nimport type {UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport {IconCloseCircle} from '@bpinc/lib-icons'\r\n\r\n\r\ninterface RemoveRowProps {\r\n    index: number\r\n    remove: UseFieldArrayRemove\r\n}\r\n\r\nexport const RemoveRow: React.FC<RemoveRowProps> = ({index, remove}) => {\r\n    const handleRemove = useCallback(\r\n        function handleRemoveCallback() {\r\n            remove(index)\r\n        },\r\n        [index, remove],\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex shrink-0 items-center\">\r\n            <button\r\n                onClick={handleRemove}\r\n                data-index={index}\r\n                aria-label=\"Remove entry\"\r\n                title=\"Remove entry\"\r\n                className=\"cursor-pointer border-[none] bg-[none]\"\r\n            >\r\n                <IconCloseCircle />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport type {\r\n    Control,\r\n    FieldArrayPath,\r\n    FieldValues,\r\n    Path,\r\n    UseFieldArrayRemove,\r\n} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport {AddressTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype AddressFieldArrayContentProps<TValues extends FieldValues> = {\r\n    index: number\r\n    control: Control<TValues>\r\n    name: FieldArrayPath<TValues>\r\n    remove: UseFieldArrayRemove\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\ntype STATES_CODE = keyof typeof STATES\r\n\r\nexport const AddressFieldArrayContent = <TValues extends FieldValues>({\r\n    index,\r\n    control,\r\n    name,\r\n    remove,\r\n    typeClassName,\r\n    layoutClassName,\r\n    style,\r\n}: AddressFieldArrayContentProps<TValues>) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatAddressType} = useFormatting()\r\n\r\n    const optionsAddressStates = useMemo(() => {\r\n        return Object.keys(STATES).map(code => ({\r\n            value: code,\r\n            label: STATES[code as STATES_CODE],\r\n        }))\r\n    }, [])\r\n\r\n    const optionsAddressTypes = useMemo(() => {\r\n        return Object.keys(AddressTypes).map(type => ({\r\n            value: type,\r\n            label: formatAddressType(type),\r\n        }))\r\n    }, [formatAddressType])\r\n\r\n    const {field: typeField} = useController({\r\n        name: `${name}.${index}.type` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: addressLine1Field} = useController({\r\n        name: `${name}.${index}.address_line1` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: addressLine2Field} = useController({\r\n        name: `${name}.${index}.address_line2` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: cityField} = useController({\r\n        name: `${name}.${index}.city` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: stateField} = useController({\r\n        name: `${name}.${index}.state` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    const {field: zipField} = useController({\r\n        name: `${name}.${index}.postcode` as Path<TValues>,\r\n        control,\r\n    })\r\n\r\n    return (\r\n        <div role=\"row\" className={tcn('flex items-start', layoutClassName)}>\r\n            <SelectFieldRaw\r\n                style={style}\r\n                className={typeClassName}\r\n                field={typeField}\r\n                options={optionsAddressTypes}\r\n                placeholder={t.FORMS.address_type()}\r\n                aria-label={t.FORMS.address_type()}\r\n            />\r\n            <div className={tcn('flex min-w-0 flex-col', layoutClassName)}>\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={addressLine1Field}\r\n                    placeholder={t.FORMS.address_line_1()}\r\n                    aria-label={t.FORMS.address_line_1()}\r\n                />\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={addressLine2Field}\r\n                    placeholder={t.FORMS.address_line_2()}\r\n                    aria-label={t.FORMS.address_line_2()}\r\n                />\r\n                <TextFieldRaw\r\n                    style={style}\r\n                    field={cityField}\r\n                    aria-label={t.FORMS.city()}\r\n                    placeholder={t.FORMS.city()}\r\n                />\r\n                <div role=\"row\" className={tcn('flex items-start', layoutClassName)}>\r\n                    <SelectFieldRaw\r\n                        style={style}\r\n                        field={stateField}\r\n                        options={optionsAddressStates}\r\n                        placeholder={t.FORMS.state()}\r\n                    />\r\n                    <TextFieldRaw\r\n                        style={style}\r\n                        field={zipField}\r\n                        aria-label={t.FORMS.zip()}\r\n                        placeholder={t.FORMS.zip()}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <RemoveRow index={index} remove={remove} />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport type {FieldArray, FieldValues, UseFieldArrayAppend} from 'react-hook-form'\r\n\r\nimport type {FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype AddRowProps<\r\n    TFieldType extends FieldArray,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>\r\n> = {\r\n    initialValues: TFieldType\r\n    append: UseFieldArrayAppend<TValues, TFieldName>\r\n    AddButtonIcon: SVGRComponent\r\n    addButtonText?: string\r\n}\r\n\r\n\r\nexport function AddRow<\r\n    TFieldType extends FieldArray,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>\r\n>({\r\n    append,\r\n    AddButtonIcon,\r\n    initialValues,\r\n    addButtonText,\r\n}: AddRowProps<TFieldType, TValues, TFieldName>) {\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleAdd = useCallback(\r\n        function handleAddCallback() {\r\n            append(initialValues as FieldArray<TValues, TFieldName>)\r\n        },\r\n        [append, initialValues],\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onClick={handleAdd}\r\n                className=\"group/add-btn flex cursor-pointer border-[none] bg-[none] pl-0\"\r\n                title={t.CONTACT.add_entry_button_tooltip()}\r\n            >\r\n                <AddButtonIcon aria-hidden />\r\n                {addButtonText && (\r\n                    <span className=\"ml-1 align-middle text-main-secondary group-hover/add-btn:text-black\">\r\n                        {addButtonText}\r\n                    </span>\r\n                )}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import type {ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype FieldArrayItemProps = {\r\n    label?: string\r\n    layoutClassName?: string\r\n    children: ReactNode\r\n}\r\n\r\nexport const FieldArrayItem: React.FC<FieldArrayItemProps> = ({label, layoutClassName, children}) => {\r\n    return (\r\n        <div className={tcn('flex min-w-0 flex-col', layoutClassName)}>\r\n            {label && <label>{label}</label>}\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport type {FieldArray as FieldArrayType, FieldValues} from 'react-hook-form'\r\nimport {useFieldArray} from 'react-hook-form'\r\n\r\nimport type {FieldArrayInnerControlProps, FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\n\r\nimport {AddRow} from './AddRow'\r\nimport {FieldArrayItem} from './FieldArrayItem'\r\n\r\n\r\ntype FieldArrayProps = {\r\n    label?: string\r\n    layoutClassName?: string\r\n    className?: string\r\n    AddButtonIcon: SVGRComponent\r\n    addButtonText?: string\r\n}\r\n\r\nexport const FieldArray = <\r\n    TFieldType extends FieldArrayType,\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, TFieldType>,\r\n>({\r\n    control,\r\n    name,\r\n    AddButtonIcon,\r\n    addButtonText,\r\n    renderComponents,\r\n    layoutClassName,\r\n    initialValues,\r\n    label,\r\n    className,\r\n}: FieldArrayInnerControlProps<TFieldType, TValues, TFieldName> & FieldArrayProps) => {\r\n    const {fields, append, remove} = useFieldArray({\r\n        control,\r\n        name,\r\n    })\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col', layoutClassName, className)}>\r\n            {fields.map((_, index) => (\r\n                <FieldArrayItem\r\n                    key={index}\r\n                    layoutClassName={layoutClassName}\r\n                    label={label}\r\n                >\r\n                    {renderComponents(index, remove, fields.length)}\r\n                </FieldArrayItem>\r\n            ))}\r\n            <AddRow\r\n                append={append}\r\n                initialValues={initialValues}\r\n                AddButtonIcon={AddButtonIcon}\r\n                addButtonText={addButtonText}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerAddressType} from '@bpinc/ad-contacts-state-types'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue} from '@bpinc/lib-forms-base'\r\nimport {IconAddAddress} from '@bpinc/lib-icons'\r\n\r\nimport {AddressFieldArrayContent} from './AddressFieldArrayContent'\r\nimport {FieldArray} from './FieldArray'\r\n\r\n\r\ntype AddressFieldType = Partial<ServerAddressType>\r\n\r\nconst INITIAL_VALUES: AddressFieldType = {\r\n    address_line1: '',\r\n    address_line2: '',\r\n    city: '',\r\n    postcode: '',\r\n}\r\n\r\ntype AddressFieldArrayProps = {\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const AddressFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, AddressFieldType>,\r\n>({\r\n    name,\r\n    style,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: FieldArrayControlProps<AddressFieldType, TValues, TFieldName> & AddressFieldArrayProps) => {\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <AddressFieldArrayContent\r\n                    style={style}\r\n                    layoutClassName={layoutClassName}\r\n                    typeClassName={typeClassName}\r\n                    remove={remove}\r\n                    name={name}\r\n                    control={control}\r\n                    index={index}\r\n                />\r\n            )\r\n        },\r\n        [style, layoutClassName, control, name, typeClassName],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            className={className}\r\n            layoutClassName={layoutClassName}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddAddress}\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React from 'react'\r\n\r\n\r\nexport const ViewItem: React.FC<{\r\n    label?: JSX.Element | string\r\n    value?: JSX.Element | string\r\n    viewStyle?: CSSProperties\r\n}> = ({\r\n    label,\r\n    value,\r\n    viewStyle,\r\n}) => {\r\n\r\n    return (\r\n        <div className=\"flex w-full items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight] overflow-hidden\">\r\n            <span className=\"w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]\">\r\n                {label}\r\n            </span>\r\n\r\n            <div\r\n                className=\"flex-auto\"\r\n                style={viewStyle}\r\n            >\r\n                {value}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useId} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport type {ContactAddress, FormDefinitionFieldAddressList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {AddressFieldArray} from '../common/FieldArray/AddressFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const AddressListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldAddressList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatAddressType} = useFormatting()\r\n    const ariaId1 = useId()\r\n    const ariaId2 = useId()\r\n\r\n    if (view) {\r\n        const addresses = form.getValues()[field.name || ''] as ContactAddress[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {addresses?.map((address, index) => {\r\n                    const value = [\r\n                        address.address_line1,\r\n                        address.address_line2,\r\n                        address.city,\r\n                        STATES[address.state as keyof typeof STATES],\r\n                        address.postcode,\r\n                    ]\r\n                        .filter(Boolean)\r\n                        .join(', ')\r\n\r\n                    return (\r\n                        <ViewItem\r\n                            key={index}\r\n                            viewStyle={viewStyle}\r\n                            label={formatAddressType(address.type)}\r\n                            value={(\r\n                                <a\r\n                                    tabIndex={0}\r\n                                    aria-labelledby={`${ariaId1} ${ariaId2}`}\r\n                                    id={ariaId2}\r\n                                >\r\n                                    {value}\r\n                                </a>\r\n                            )}\r\n                        />\r\n                    )\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <AddressFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import type {ComponentProps, HTMLProps, ReactNode} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {TextAreaProps as BaseTextareaProps} from '@bpinc/lib-jskit-ui'\r\nimport {TextArea as TextAreaUI} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface DirectProps {\r\n    label?: ReactNode\r\n    labelClassName?: string\r\n    wrapperClassName?: string\r\n    error?: ReactNode\r\n    errorClassName?: string\r\n}\r\n\r\ntype TextAreaBaseProps = Omit<ComponentProps<'textarea'>, 'value'> &\r\nOmit<BaseTextareaProps, keyof Omit<HTMLProps<HTMLTextAreaElement>, 'value'>>\r\n\r\nexport type TextAreaProps = DirectProps & Omit<TextAreaBaseProps, keyof DirectProps | 'inputRef' | 'ref'> & { inputClassName?: string }\r\n\r\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\r\n    const {\r\n        id,\r\n        className,\r\n        inputClassName,\r\n        label,\r\n        error,\r\n        value,\r\n        onChange,\r\n        onKeyDown,\r\n        onBlur,\r\n        minRows = 1,\r\n        maxRows = 8,\r\n        placeholder = '',\r\n        labelClassName,\r\n        wrapperClassName,\r\n        errorClassName,\r\n        ...other\r\n    } = props\r\n\r\n    return (\r\n        <div className={tcn(wrapperClassName, 'flex w-full flex-row')}>\r\n            {label && <label className={tcn('my-1 block', labelClassName)} htmlFor={id}>{label}</label>}\r\n            <div className=\"flex w-full flex-col\">\r\n                <div\r\n                    className={tcn(\r\n                        className,\r\n                        'box-border w-full flex-1 rounded border border-[#abb6bb] bg-white p-2',\r\n                        'focus:border-[#4b85a0] focus:shadow-inner',\r\n                        'hover:border-[#96a7b0] hover:shadow-inner',\r\n                        {\r\n                            'self-end border-[#ff8997] bg-[#ffdee2] text-red-500': error,\r\n                        },\r\n                    )}\r\n                >\r\n                    <TextAreaUI\r\n                        ref={ref}\r\n                        className={tcn(\r\n                            inputClassName,\r\n                            'm-0 box-border block w-full resize-none overflow-auto border-none bg-transparent p-0 leading-tight focus:outline-none',\r\n                        )}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onKeyDown={onKeyDown}\r\n                        onBlur={onBlur}\r\n                        minRows={minRows}\r\n                        maxRows={maxRows}\r\n                        placeholder={placeholder}\r\n                        id={id}\r\n                        {...other}\r\n                    />\r\n                </div>\r\n                {error && <p className={errorClassName} role=\"alert aria-atomic\">{error}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {FieldImplementationProps, FieldProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\nimport type {TextAreaProps} from './TextArea'\r\nimport {TextArea as TextAreaUI} from './TextArea'\r\n\r\n\r\ntype TextAreaFieldProps = FieldImplementationProps<TextAreaProps & {\r\n    dataKey?: string\r\n}>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    errorClassName,\r\n    ...props\r\n}: FieldRenderImplementationProps<TextAreaFieldProps, TFormValues>): ReactElement {\r\n    const ariaId1 = uuid()\r\n\r\n    return (\r\n        <TextAreaUI\r\n            {...props}\r\n            aria-labelledby={ariaId1}\r\n            errorClassName={tcn('self-end text-red-500', errorClassName)}\r\n        />\r\n    )\r\n}\r\n\r\nexport function TextAreaField<TFormValues extends FieldValues>(props: FieldProps<TextAreaFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n\r\n","import React from 'react'\r\nimport type {Control} from 'react-hook-form'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {TextField} from '../TextField'\r\nimport {TextAreaField} from './TextAreaField'\r\n\r\n\r\nconst labelClassName = `w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]`\r\nconst editItemClassName = `flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]`\r\n\r\nexport const GeneralTextFormField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    control: Control\r\n\r\n    multiline: boolean\r\n    placeholder: string\r\n    label: string | null\r\n    required: boolean\r\n    name: string\r\n    type?: string\r\n    minRows: number\r\n}> = ({\r\n    pageItem,\r\n    control,\r\n\r\n    multiline,\r\n    placeholder,\r\n    label,\r\n    required,\r\n    name,\r\n    type = 'text',\r\n    minRows,\r\n}) => {\r\n    const style = getFormElementStyle(pageItem)\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return multiline ? (\r\n        <TextAreaField\r\n            placeholder={placeholder}\r\n            label={label}\r\n            required={required}\r\n            name={name}\r\n            control={control}\r\n            minRows={minRows}\r\n            wrapperClassName={editItemClassName}\r\n            style={style}\r\n            labelClassName={labelClassName}\r\n        />\r\n    ) : (\r\n        <TextField\r\n            placeholder={placeholder}\r\n            label={label}\r\n            required={required}\r\n            name={name}\r\n            control={control}\r\n            style={editStyle}\r\n            type={type as any}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldAmount, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const AmountField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldAmount\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n        const viewValue = form.getValues()[field.name || '']\r\n\r\n        if (field.hideEmpty && !viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"number\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldButton} from '@bpinc/ad-request-urls'\r\nimport {FormBuilderButton} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const ButtonField: React.FC<{\r\n    field: FormDefinitionFieldButton\r\n}> = ({\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        formDefinition,\r\n        changeFormPageId,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    return (\r\n        <FormBuilderButton\r\n            actionCases={field.properties.actionCase}\r\n            action={field.properties.action}\r\n            values={form.getValues()}\r\n            formDefinition={formDefinition}\r\n            changeFormPageId={changeFormPageId}\r\n        >\r\n            {field.value}\r\n        </FormBuilderButton>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport type {FieldImplementationProps, FieldProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldConstructor} from '@bpinc/lib-forms-base'\r\nimport type {CheckboxProps} from '@bpinc/lib-ui-elements'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype CheckboxFieldProps = FieldImplementationProps<Omit<CheckboxProps, 'onChange' | 'checked' | 'type'>> & ({\r\n    type?: 'checkbox'\r\n    radioValue?: never\r\n} | {\r\n    type: 'radio'\r\n    radioValue: string\r\n})\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    value,\r\n    type = 'checkbox',\r\n    radioValue,\r\n    ...props\r\n}: FieldRenderImplementationProps<CheckboxFieldProps, TFormValues>): ReactElement {\r\n    const checked = type === 'checkbox' ? value : value === radioValue\r\n\r\n    if (type === 'checkbox') {\r\n        return (\r\n            <Checkbox\r\n                {...props}\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            type=\"radio\"\r\n            checked={checked}\r\n            value={radioValue ?? ''}\r\n        />\r\n    )\r\n}\r\n\r\nexport function CheckboxFieldBase<TFormValues extends FieldValues>(props: FieldProps<CheckboxFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport {noop} from 'lodash-es'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldCheckbox, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {ViewItem} from '../common/ViewItem'\r\nimport {CheckboxFieldBase} from './CheckboxFieldBase'\r\n\r\n\r\nexport const CheckboxField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldCheckbox\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={(\r\n                    <Checkbox\r\n                        checked={viewValue}\r\n                        onChange={noop}\r\n                    />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    const style = getFormElementStyle(pageItem)\r\n\r\n    const isChecked = form.getValues(field.name || '')\r\n\r\n    return (\r\n        <CheckboxFieldBase\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            className={classNames(`flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]`, {\r\n                'line-through': field.crossOutWhenChecked && isChecked,\r\n            })}\r\n            style={style}\r\n            label={field.label}\r\n            required={field.required}\r\n            disabled={field.intentCheckOnly}\r\n            type=\"checkbox\"\r\n        />\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport {SmRef} from '@bpinc/lib-external-ui-elements'\r\nimport type {\r\n    DateTimeBaseProps,\r\n    FieldImplementationProps,\r\n    FieldProps,\r\n    FieldRenderImplementationProps,\r\n} from '@bpinc/lib-forms-base'\r\nimport {DateTimeBase, FieldConstructor} from '@bpinc/lib-forms-base'\r\n\r\n\r\ntype DatePickerFieldProps = FieldImplementationProps<DateTimeBaseProps>\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    error,\r\n    ...props\r\n}: FieldRenderImplementationProps<DatePickerFieldProps, TFormValues>): ReactElement {\r\n    return (\r\n        <div>\r\n            <SmRef innerRef={ref}>\r\n                <DateTimeBase {...props} />\r\n            </SmRef>\r\n            {error && <p className=\"self-end text-red-500\" role=\"alert aria-atomic\">{error}</p>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport function DatePicker<TFormValues extends FieldValues>(props: FieldProps<DatePickerFieldProps, TFormValues>): ReactElement {\r\n    return <FieldConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport type {FormDefinitionFieldDatetime, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {ViewItem} from '../common/ViewItem'\r\nimport {DatePicker} from './DatePicker'\r\n\r\n\r\nexport const DateTimeField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldDatetime\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const fieldValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !fieldValue) {\r\n            return null\r\n        }\r\n\r\n        const viewValue = fieldValue ? formatDate(fieldValue) : ''\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <DatePicker\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label || ''}\r\n            required={field.required}\r\n            control={form.control}\r\n            style={editStyle}\r\n            name={field.name || ''}\r\n            className={classNames(\r\n                `w-full`,\r\n                `[&>.field]:w-full [&>.field>*]:w-full`,\r\n                `[&>.field>*>input]:p-[5px] [&>.field>*>input]:flex-auto`,\r\n                `[&>.field>*>input]:border [&>.field>*>input]:border-default [&>.field>*>input]:rounded-none [&>.field>*>input]:leading-6`,\r\n            )}\r\n            labelClassName={'!leading-3 caption-s text-primary-on-primary cursor-pointer'}\r\n            displayFormat={field.displayFormat ?? undefined}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldEmail, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const EmailField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldEmail\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={(\r\n                    <a\r\n                        data-value={viewValue}\r\n                        tabIndex={0}\r\n                    >\r\n                        {viewValue}\r\n                    </a>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"email\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\nimport type {FieldValues} from 'react-hook-form'\r\n\r\nimport {SmRef} from '@bpinc/lib-external-ui-elements'\r\nimport type {FieldRawProps, FieldRenderImplementationProps} from '@bpinc/lib-forms-base'\r\nimport {FieldRawConstructor} from '@bpinc/lib-forms-base'\r\n\r\n\r\nfunction renderElement<TFormValues extends FieldValues>({\r\n    ref,\r\n    ...props\r\n}: FieldRenderImplementationProps<unknown, TFormValues>): ReactElement {\r\n    return (\r\n        <SmRef innerRef={ref}>\r\n            <input\r\n                hidden\r\n                data-form-field=\"true\"\r\n                data-field-type=\"hidden-field\"\r\n                {...props}\r\n            />\r\n        </SmRef>\r\n    )\r\n}\r\n\r\n\r\nexport function HiddenFieldRaw<TFormValues extends FieldValues>(props: FieldRawProps<unknown, TFormValues>): ReactElement {\r\n    return <FieldRawConstructor {...props} renderElement={renderElement} />\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React from 'react'\r\nimport type {Control, FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\nimport {useController} from 'react-hook-form'\r\n\r\nimport type {FieldSubPathsByValue, RulesTypes} from '@bpinc/lib-forms-base'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport type {DropdownProps} from '../Dropdown'\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {HiddenFieldRaw} from './HiddenField'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype SelectAndTextFieldRowProps<\r\n    TFieldType,\r\n    TValues extends FieldValues,\r\n> = {\r\n    control: Control<TValues>\r\n    idFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    selectFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    textFieldName: FieldSubPathsByValue<TValues, TFieldType>\r\n    options: DropdownProps['options']\r\n    remove: UseFieldArrayRemove\r\n    index: number\r\n    textFiledRules?: RulesTypes\r\n    inputType?: 'tel' | 'email'\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const SelectAndTextFieldRow = <\r\n    TFieldType,\r\n    TValues extends FieldValues,\r\n>({\r\n    idFieldName,\r\n    selectFieldName,\r\n    textFieldName,\r\n    textFiledRules,\r\n    style,\r\n    control,\r\n    index,\r\n    options,\r\n    remove,\r\n    inputType,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: SelectAndTextFieldRowProps<TFieldType, TValues>) => {\r\n    const {\r\n        field: idField,\r\n    } = useController({\r\n        name: idFieldName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: selectField,\r\n    } = useController({\r\n        name: selectFieldName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: textField,\r\n        fieldState,\r\n    } = useController({\r\n        name: textFieldName,\r\n        control,\r\n        rules: textFiledRules,\r\n    })\r\n    const error = fieldState.error?.message\r\n\r\n    return (\r\n        <div role=\"row\" className={tcn(layoutClassName, 'flex flex-row')}>\r\n            <HiddenFieldRaw field={idField} />\r\n            <SelectFieldRaw className={typeClassName} field={selectField} style={style} options={options} />\r\n            <TextFieldRaw field={textField} style={style} type={inputType} error={error} />\r\n            <RemoveRow index={index} remove={remove} />\r\n        </div>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerEmailType} from '@bpinc/ad-contacts-state-types'\r\nimport {EmailTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue, FieldSubPathsByValue} from '@bpinc/lib-forms-base'\r\nimport {useEmailValidationRules} from '@bpinc/lib-forms-base'\r\nimport {IconAddEmail} from '@bpinc/lib-icons'\r\nimport type {OptionalBy} from '@bpinc/lib-types-helpers'\r\n\r\nimport {FieldArray} from './FieldArray'\r\nimport {SelectAndTextFieldRow} from './SelectAndTextFieldRow'\r\n\r\n\r\ntype EmailFieldType = OptionalBy<ServerEmailType, 'id'>\r\n\r\nconst INITIAL_VALUES: EmailFieldType = {type: EmailTypes.BUSINESS, email_address: ''}\r\n\r\ntype EmailFieldArrayProps = {\r\n    typeClassName?: string\r\n    className?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const EmailFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, EmailFieldType>\r\n>({\r\n    name,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n    style,\r\n}: FieldArrayControlProps<EmailFieldType, TValues, TFieldName> & EmailFieldArrayProps) => {\r\n    const {formatEmailType} = useFormatting()\r\n    const emailValidationRules = useEmailValidationRules()\r\n\r\n    const optionsEmailTypes = useMemo(() => {\r\n        return Object.keys(EmailTypes).map(type => ({\r\n            value: type,\r\n            label: formatEmailType(type),\r\n        }))\r\n    }, [formatEmailType])\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <SelectAndTextFieldRow\r\n                    idFieldName={`${name}.${index}.id` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    selectFieldName={`${name}.${index}.type` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    textFieldName={`${name}.${index}.email_address` as FieldSubPathsByValue<TValues, EmailFieldType>}\r\n                    control={control}\r\n                    layoutClassName={layoutClassName}\r\n                    typeClassName={typeClassName}\r\n                    index={index}\r\n                    options={optionsEmailTypes}\r\n                    textFiledRules={emailValidationRules}\r\n                    inputType=\"email\"\r\n                    remove={remove}\r\n                    style={style}\r\n                />\r\n            )\r\n        },\r\n        [layoutClassName, typeClassName, name, control, optionsEmailTypes, emailValidationRules, style],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            className={className}\r\n            layoutClassName={layoutClassName}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddEmail}\r\n        />\r\n    )\r\n}\r\n","import React, {useId} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ContactEmail, FormDefinitionFieldEmailList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {EmailFieldArray} from '../common/FieldArray/EmailFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const EmailListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldEmailList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatEmailType} = useFormatting()\r\n    const ariaId1 = useId()\r\n    const ariaId2 = useId()\r\n\r\n    if (view) {\r\n        const emails = form.getValues()[field.name || ''] as ContactEmail[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {emails?.map((email, index) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={formatEmailType(email.type)}\r\n                        value={(\r\n                            <a\r\n                                tabIndex={0}\r\n                                aria-labelledby={`${ariaId1} ${ariaId2}`}\r\n                                id={ariaId2}\r\n                            >\r\n                                {email.email_address}\r\n                            </a>\r\n                        )}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <EmailFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldImage, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle, getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {Image} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const ImageField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldImage\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n        const style = getFormElementStyle(pageItem)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <Image\r\n                style={{...viewStyle, ...style}}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    // TODO: Implement ImageField\r\n    return null\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldLabel} from '@bpinc/ad-request-urls'\r\nimport {parseTemplateToString} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\n\r\n\r\nexport const LabelField: React.FC<{\r\n    field: FormDefinitionFieldLabel\r\n}> = ({\r\n    field,\r\n}) => {\r\n    const {runtimeVariables} = useContext(FormBuilderContext)\r\n    const label = parseTemplateToString(field.value || '', runtimeVariables)\r\n    return <h4>{label}</h4>\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionFieldLink} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport const LinkField: React.FC<{\r\n    field: FormDefinitionFieldLink\r\n}> = ({\r\n    field,\r\n}) => {\r\n    return (\r\n        <a\r\n            href={field.linkUrl}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"underline\"\r\n        >\r\n            {field.initialValue || field.linkUrl}\r\n        </a>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useEffect, useMemo} from 'react'\r\nimport type {FieldPathValue, FieldValues, Path} from 'react-hook-form'\r\nimport {useController, useWatch} from 'react-hook-form'\r\n\r\nimport type {MessengerData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SelectFieldRaw} from '../SelectField'\r\nimport {TextFieldRaw} from '../TextField'\r\nimport {HiddenFieldRaw} from './HiddenField'\r\n\r\n\r\ntype MessengerFieldItemProps<TValues> = {\r\n    typeFiledName: Path<TValues>\r\n    userIdFieldName: Path<TValues>\r\n    userNameFieldName: Path<TValues>\r\n    accountIdFieldName: Path<TValues>\r\n    availableMessengers: MessengerData[]\r\n    userNameDefault?: string\r\n    userIdDefault?: string\r\n    typeClassName?: string\r\n    accountIdDefault?: string\r\n    style?: CSSProperties\r\n}\r\n\r\n\r\nconst MESSENGERS_WITH_USER_NAME: ContactMessenger['type'][] = ['telegram', 'twitter']\r\n\r\nexport const MessengerFieldItem = <TValues extends FieldValues>({\r\n    control,\r\n    userNameFieldName,\r\n    typeFiledName,\r\n    userIdFieldName,\r\n    accountIdFieldName,\r\n    availableMessengers,\r\n    userNameDefault,\r\n    accountIdDefault,\r\n    userIdDefault,\r\n    typeClassName,\r\n    style,\r\n}: FieldControlProps<TValues, FieldValues> & MessengerFieldItemProps<TValues>) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {\r\n        field: accountIdField,\r\n    } = useController({\r\n        name: accountIdFieldName,\r\n        defaultValue: (accountIdDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n        control,\r\n    })\r\n\r\n    const {field: typeField} = useController({\r\n        name: typeFiledName,\r\n        control,\r\n    })\r\n\r\n    const {\r\n        field: userIdField,\r\n    } = useController({\r\n        name: userIdFieldName,\r\n        control,\r\n        defaultValue: (userIdDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n    })\r\n\r\n    const {\r\n        field: userNameField,\r\n    } = useController({\r\n        name: userNameFieldName,\r\n        control,\r\n        defaultValue: (userNameDefault || '') as FieldPathValue<TValues, Path<TValues>>,\r\n    })\r\n\r\n    const accountField = useWatch({control, name: accountIdFieldName})\r\n    const currentType = useMemo(() => availableMessengers.find(messenger => messenger.id === accountField)?.type, [accountField, availableMessengers])\r\n\r\n    const showUserName = currentType ? MESSENGERS_WITH_USER_NAME.includes(currentType) : false\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    const options = useMemo<{label: string; value: string}[]>(() => {\r\n        return availableMessengers.map(messenger => ({value: messenger.id, label: getMessengerName(messenger.type)}))\r\n    }, [availableMessengers, getMessengerName])\r\n\r\n\r\n    useEffect(function synchronizeTypeField() {\r\n        typeField.onChange(currentType)\r\n    }, [currentType, typeField])\r\n\r\n    useEffect(function synchronizeUserNameField() {\r\n        if (!showUserName) {\r\n            userNameField.onChange('')\r\n        }\r\n    }, [showUserName, userNameField])\r\n\r\n    return (\r\n        <>\r\n            <SelectFieldRaw\r\n                className={typeClassName}\r\n                style={style}\r\n                field={accountIdField}\r\n                placeholder={t.UNDEFINED.contact_messenger()}\r\n                options={options}\r\n            />\r\n            <HiddenFieldRaw field={typeField} />\r\n            <TextFieldRaw\r\n                style={style}\r\n                placeholder={t.UNDEFINED.contact_messenger_user_id_placeholder()}\r\n                field={userIdField}\r\n            />\r\n            {\r\n                showUserName && (\r\n                    <TextFieldRaw\r\n                        style={style}\r\n                        placeholder={t.UNDEFINED.contact_messenger_username_placeholder()}\r\n                        field={userNameField}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {\r\n    FieldArray,\r\n    FieldArrayPath,\r\n    FieldValues,\r\n    Path,\r\n    UseFieldArrayRemove,\r\n} from 'react-hook-form'\r\nimport {useFieldArray} from 'react-hook-form'\r\n\r\nimport type {MessengerData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport type {FieldControlProps} from '@bpinc/lib-forms-base'\r\nimport {IconAddMessenger} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {AddRow} from './AddRow'\r\nimport {FieldArrayItem} from './FieldArrayItem'\r\nimport {MessengerFieldItem} from './MessengerFieldItem'\r\nimport {RemoveRow} from './RemoveRow'\r\n\r\n\r\ntype MessengersFieldArrayFormType = {type: ContactMessenger['type'] | null; user_name: string; user_id: string; account_id: string}\r\n\r\nconst INITIAL_VALUES: MessengersFieldArrayFormType = {type: null, user_name: '', user_id: '', account_id: ''}\r\n\r\ntype MessengersFieldArrayProps<TValues extends FieldValues> = {\r\n    name: FieldArrayPath<TValues>\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    availableMessengers: MessengerData[]\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const MessengersFieldArray = <TValues extends FieldValues>({\r\n    availableMessengers,\r\n    name,\r\n    control,\r\n    className,\r\n    layoutClassName,\r\n    typeClassName,\r\n    style,\r\n}: FieldControlProps<TValues, FieldValues> & MessengersFieldArrayProps<TValues>) => {\r\n    const {fields, append, remove: removeItem} = useFieldArray({\r\n        control,\r\n        name,\r\n    })\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            field: Partial<MessengersFieldArrayFormType>,\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <div role=\"row\" className={tcn(layoutClassName, 'flex flex-row')}>\r\n                    <MessengerFieldItem\r\n                        control={control}\r\n                        typeFiledName={`${name}.${index}.type` as Path<TValues>}\r\n                        userIdFieldName={`${name}.${index}.user_id` as Path<TValues>}\r\n                        userNameFieldName={`${name}.${index}.user_name` as Path<TValues>}\r\n                        accountIdFieldName={`${name}.${index}.account_id` as Path<TValues>}\r\n                        availableMessengers={availableMessengers}\r\n                        accountIdDefault={field.account_id}\r\n                        userIdDefault={field.user_id}\r\n                        userNameDefault={field.user_name}\r\n                        typeClassName={typeClassName}\r\n                        style={style}\r\n                    />\r\n                    <RemoveRow index={index} remove={remove} />\r\n                </div>\r\n            )\r\n        },\r\n        [availableMessengers, control, layoutClassName, name, style, typeClassName],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn('flex flex-col', layoutClassName, className)}>\r\n            {fields.map((field, index) => (\r\n                <FieldArrayItem key={index}>\r\n                    {renderComponents(field as TValues, index, removeItem)}\r\n                </FieldArrayItem>\r\n            ))}\r\n            {Boolean(availableMessengers.length) && (\r\n                <AddRow\r\n                    append={append}\r\n                    initialValues={INITIAL_VALUES as FieldArray<TValues>}\r\n                    AddButtonIcon={IconAddMessenger}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useInteractionChatState} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ContactMessenger, FormDefinitionFieldMessenger, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\nimport {MessengerView} from '@bpinc/lib-forms-ui'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {MessengersFieldArray} from '../common/FieldArray/MessengersFieldArray'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const MessengersField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldMessenger\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n        contactData,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const availableMessengers = useInteractionChatState('messengers')\r\n\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    if (view) {\r\n        const messengers = form.getValues()[field.name || ''] as ContactMessenger[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!messengers) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {messengers?.map((messenger, index) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={getMessengerName(messenger.type)}\r\n                        value={(\r\n                            <MessengerView\r\n                                messenger={messenger}\r\n                                {...contactData}\r\n                            />\r\n                        )}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <MessengersFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            availableMessengers={availableMessengers}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldNotes, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\n\r\n\r\nexport const NotesField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldNotes\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {form} = useContext(FormBuilderContext)\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\n\r\nimport {usePhoneClickHandler} from './usePhoneClickHandler'\r\n\r\n\r\nexport const PhoneLink: React.FC<{\r\n    phone: string\r\n}> = ({\r\n    phone,\r\n}) => {\r\n    const phoneClickHandler = usePhoneClickHandler()\r\n\r\n    return (\r\n        <a\r\n            onClick={phoneClickHandler}\r\n            data-phone={phone}\r\n            tabIndex={0}\r\n        >\r\n            {formatPhone(phone)}\r\n        </a>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\n\r\n\r\nexport const usePhoneClickHandler = () => {\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    return useCallback((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n\r\n        const el = e.currentTarget\r\n        const phone = el.getAttribute('data-phone')\r\n\r\n        if (!phone) {\r\n            return\r\n        }\r\n\r\n        interactionStateMethods.initiateCall({\r\n            phone,\r\n            serviceId: selectedService,\r\n            accessNumberId: selectedDIDNumber,\r\n        })\r\n\r\n        return\r\n    }, [selectedService, selectedDIDNumber, interactionStateMethods])\r\n\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldPhone, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {PhoneLink} from '../common/PhoneLink'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const PhoneField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldPhone\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (!viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={<PhoneLink phone={viewValue} />}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            key={field.key}\r\n            type=\"tel\"\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            pageItem={pageItem}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n        />\r\n    )\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\nimport type {FieldValues, UseFieldArrayRemove} from 'react-hook-form'\r\n\r\nimport type {ServerPhoneType} from '@bpinc/ad-contacts-state-types'\r\nimport {PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {FieldArrayControlProps, FieldArrayPathByValue, FieldSubPathsByValue} from '@bpinc/lib-forms-base'\r\nimport {usePhoneValidationRules} from '@bpinc/lib-forms-base'\r\nimport {IconAddPhone} from '@bpinc/lib-icons'\r\nimport type {OptionalBy} from '@bpinc/lib-types-helpers'\r\n\r\nimport {FieldArray} from './FieldArray'\r\nimport {SelectAndTextFieldRow} from './SelectAndTextFieldRow'\r\n\r\n\r\ntype PhoneFieldType = OptionalBy<ServerPhoneType, 'id'>\r\n\r\nconst INITIAL_VALUES: PhoneFieldType = {type: PhoneTypes.BUSINESS, phone: ''}\r\n\r\ntype PhonesFieldArrayProp = {\r\n    className?: string\r\n    typeClassName?: string\r\n    layoutClassName?: string\r\n    style?: CSSProperties\r\n}\r\n\r\nexport const PhonesFieldArray = <\r\n    TValues extends FieldValues,\r\n    TFieldName extends FieldArrayPathByValue<TValues, PhoneFieldType>,\r\n>({\r\n    name,\r\n    style,\r\n    control,\r\n    className,\r\n    typeClassName,\r\n    layoutClassName,\r\n}: FieldArrayControlProps<PhoneFieldType, TValues, TFieldName> & PhonesFieldArrayProp) => {\r\n    const {formatPhoneType} = useFormatting()\r\n    const phoneValidationRules = usePhoneValidationRules()\r\n\r\n    const optionsPhoneTypes = useMemo(() => {\r\n        return Object.keys(PhoneTypes).map(type => ({\r\n            value: type,\r\n            label: formatPhoneType(type),\r\n        }))\r\n    }, [formatPhoneType])\r\n\r\n    const renderComponents = useCallback(\r\n        function renderComponentsCallback(\r\n            index: number,\r\n            remove: UseFieldArrayRemove,\r\n        ) {\r\n            return (\r\n                <SelectAndTextFieldRow\r\n                    idFieldName={`${name}.${index}.id` as FieldSubPathsByValue<TValues, ServerPhoneType>}\r\n                    selectFieldName={`${name}.${index}.type` as FieldSubPathsByValue<TValues, ServerPhoneType> }\r\n                    textFieldName={`${name}.${index}.phone` as FieldSubPathsByValue<TValues, ServerPhoneType>}\r\n                    control={control}\r\n                    typeClassName={typeClassName}\r\n                    index={index}\r\n                    options={optionsPhoneTypes}\r\n                    textFiledRules={phoneValidationRules}\r\n                    inputType=\"tel\"\r\n                    remove={remove}\r\n                    layoutClassName={layoutClassName}\r\n                    style={style}\r\n                />\r\n            )\r\n        },\r\n        [typeClassName, name, control, optionsPhoneTypes, phoneValidationRules, layoutClassName, style],\r\n    )\r\n\r\n    return (\r\n        <FieldArray\r\n            layoutClassName={layoutClassName}\r\n            className={className}\r\n            control={control}\r\n            name={name}\r\n            initialValues={INITIAL_VALUES}\r\n            renderComponents={renderComponents}\r\n            AddButtonIcon={IconAddPhone}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ContactPhone, FormDefinitionFieldPhoneList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {PhonesFieldArray} from '../common/FieldArray/PhonesFieldArray'\r\nimport {PhoneLink} from '../common/PhoneLink'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const PhoneListField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldPhoneList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const {formatPhoneType} = useFormatting()\r\n\r\n    if (view) {\r\n        const listValue = form.getValues()[field.name || ''] as ContactPhone[]\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        return (\r\n            <>\r\n                {listValue?.map((phone, index: number) => (\r\n                    <ViewItem\r\n                        key={index}\r\n                        viewStyle={viewStyle}\r\n                        label={formatPhoneType(phone.type)}\r\n                        value={<PhoneLink phone={phone.phone} />}\r\n                    />\r\n                ))}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    return (\r\n        <PhonesFieldArray\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            style={editStyle}\r\n            layoutClassName={'gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]'}\r\n            typeClassName={'w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]'}\r\n        />\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldKeyValueList, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {SelectField as SelectFieldBase} from '../common/SelectField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const SelectField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldKeyValueList\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    const options = useMemo(() => field.listNameDataItems.map(option => ({\r\n        value: option.id,\r\n        label: option.name,\r\n    }) || []), [field])\r\n\r\n    const editStyle = getPageItemCSSProperties(pageItem.editStyle)\r\n\r\n    if (view) {\r\n        const selectedOptionId = form.getValues()[field.name || '']\r\n        const viewValue = options?.find(option => option.value === selectedOptionId)?.label\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !selectedOptionId) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <SelectFieldBase\r\n            name={field.name || ''}\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label || ''}\r\n            required={field.required}\r\n            control={form.control}\r\n            style={editStyle}\r\n            options={options}\r\n            className=\"flex items-center gap-x-[--form-cellPadding] gap-y-[--form-rowHeight]\"\r\n            labelClassName=\"w-[--form-fieldLabelWidth] min-w-[--form-fieldLabelWidth] max-w-[--form-fieldLabelWidth]\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getFormElementStyle} from '@bpinc/lib-form-builder'\r\nimport {Spacer} from '@bpinc/lib-form-builder-ui'\r\n\r\n\r\nexport const SpacerField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n}> = ({\r\n    pageItem,\r\n}) => {\r\n    const {height} = getFormElementStyle(pageItem)\r\n\r\n    return <Spacer height={height} />\r\n}\r\n","import React from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionFieldText, FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {getPageItemCSSProperties} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../../FormBuilder'\r\nimport {GeneralTextFormField} from '../common/GeneralTextFormField'\r\nimport {ViewItem} from '../common/ViewItem'\r\n\r\n\r\nexport const TextFormField: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n    field: FormDefinitionFieldText\r\n}> = ({\r\n    pageItem,\r\n    field,\r\n}) => {\r\n    const {\r\n        form,\r\n        view,\r\n    } = useContext(FormBuilderContext)\r\n\r\n    if (view) {\r\n        const viewValue = form.getValues()[field.name || '']\r\n        const viewStyle = getPageItemCSSProperties(pageItem.style)\r\n\r\n        if (field.hideEmpty && !viewValue) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ViewItem\r\n                viewStyle={viewStyle}\r\n                label={field.label || ''}\r\n                value={viewValue}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <GeneralTextFormField\r\n            placeholder={field.emptyText || ''}\r\n            label={field.label}\r\n            required={field.required}\r\n            name={field.name || ''}\r\n            control={form.control}\r\n            minRows={field.initialLinesNumber}\r\n            multiline={field.multiline}\r\n            pageItem={pageItem}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\n\r\nimport {AddressListField} from './AddressListField'\r\nimport {AmountField} from './AmountField'\r\nimport {ButtonField} from './ButtonField'\r\nimport {CheckboxField} from './CheckboxField'\r\nimport {DateTimeField} from './DateTimeField'\r\nimport {EmailField} from './EmailField'\r\nimport {EmailListField} from './EmailListField'\r\nimport {ImageField} from './ImageField'\r\nimport {LabelField} from './LabelField'\r\nimport {LinkField} from './LinkField'\r\nimport {MessengersField} from './MessengersField'\r\nimport {NotesField} from './NotesField'\r\nimport {PhoneField} from './PhoneField'\r\nimport {PhoneListField} from './PhoneListField'\r\nimport {SelectField} from './SelectField'\r\nimport {SpacerField} from './SpacerField'\r\nimport {TextFormField} from './TextFormField'\r\nimport {useConditionalFieldCheck} from './useConditionalFieldCheck'\r\n\r\n\r\nexport const FormElementResolver: React.FC<{\r\n    pageItem: FormDefinitionPageItem\r\n}> = ({\r\n    pageItem,\r\n}) => {\r\n    const {field} = pageItem\r\n\r\n    const isConditionMet = useConditionalFieldCheck(field)\r\n    if (!isConditionMet) {\r\n        return null\r\n    }\r\n\r\n    if (field?.type === 'CUSTOM') {\r\n        switch (field?.customType) {\r\n            case 'TEXT':\r\n                return <TextFormField pageItem={pageItem} field={field} />\r\n            case 'EMAIL':\r\n                return <EmailField pageItem={pageItem} field={field} />\r\n            case 'PHONE':\r\n                return <PhoneField pageItem={pageItem} field={field} />\r\n            case 'PHONE_LIST':\r\n                return <PhoneListField pageItem={pageItem} field={field} />\r\n            case 'EMAIL_LIST':\r\n                return <EmailListField pageItem={pageItem} field={field} />\r\n            case 'ADDRESS_LIST':\r\n                return <AddressListField pageItem={pageItem} field={field} />\r\n            case 'DATETIME':\r\n                return <DateTimeField pageItem={pageItem} field={field} />\r\n            case 'CHECKBOX':\r\n                return <CheckboxField pageItem={pageItem} field={field} />\r\n            case 'KEY_VALUE_LIST':\r\n                return <SelectField pageItem={pageItem} field={field} />\r\n            case 'NOTES':\r\n                return <NotesField pageItem={pageItem} field={field} />\r\n            case 'AMOUNT':\r\n                return <AmountField pageItem={pageItem} field={field} />\r\n            case 'IMAGE':\r\n                return <ImageField pageItem={pageItem} field={field} />\r\n        }\r\n    }\r\n\r\n    if (field?.type === 'STATIC') {\r\n        switch (field?.staticType) {\r\n            case 'LINK':\r\n                return <LinkField field={field} />\r\n            case 'TEXT':\r\n                return <LabelField field={field} />\r\n            case 'SPACER':\r\n                return <SpacerField pageItem={pageItem} />\r\n            case 'BUTTON':\r\n                return <ButtonField field={field} />\r\n            case 'MESSENGER':\r\n                return <MessengersField pageItem={pageItem} field={field} />\r\n        }\r\n    }\r\n\r\n    if (\r\n        !(field?.type === 'STATIC' && field?.staticType === 'CONTAINER') &&\r\n        !(field?.type === 'STATIC' && field?.staticType === 'SECTION')\r\n    ) {\r\n        console.warn('Not supported field type', field)\r\n    }\r\n\r\n    return null\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinitionField} from '@bpinc/ad-request-urls'\r\nimport {checkConditions, isFieldWithConditions} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from '../FormBuilder'\r\n\r\n\r\nexport function useConditionalFieldCheck(field: FormDefinitionField) {\r\n    const {intents, runtimeVariables} = useContext(FormBuilderContext)\r\n\r\n    return useMemo(() => {\r\n        if (!isFieldWithConditions(field)) {\r\n            return true\r\n        }\r\n        return !!checkConditions({\r\n            conditions: field.conditions,\r\n            values: runtimeVariables,\r\n            intents,\r\n        })\r\n    }, [field, runtimeVariables, intents])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {checkIsLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from './FormBuilder'\r\nimport {FormElementResolver} from './FormElementResolver'\r\n\r\n/**\r\n * Renders all form fields in a single column.\r\n * It is used in Communicator.\r\n */\r\nexport function CompactForm() {\r\n    const {formDefinition, pageIndex} = useContext(FormBuilderContext)\r\n\r\n    const pageFields = useMemo(() => {\r\n        return formDefinition?.layout?.pages?.[pageIndex]?.fields || []\r\n    }, [formDefinition?.layout?.pages, pageIndex])\r\n\r\n    const flatFields = pageFields.filter(item => !checkIsLayout(item.field))\r\n\r\n    return (\r\n        <>\r\n            {flatFields.map(pageItem => (\r\n                <FormElementResolver\r\n                    key={pageItem.field.id}\r\n                    pageItem={pageItem}\r\n                />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {FormDefinitionPageItem} from '@bpinc/ad-request-urls'\r\nimport {type RecursiveFormLayout, calculateContainerStyle, isRecuriveFormLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormElementResolver} from './FormElementResolver'\r\n\r\n\r\nexport const FormLayout: React.FC<{\r\n    contentItem: RecursiveFormLayout | FormDefinitionPageItem\r\n}> = ({\r\n    contentItem,\r\n}) => {\r\n    if (!isRecuriveFormLayout(contentItem)) {\r\n        return <FormElementResolver pageItem={contentItem} />\r\n    }\r\n\r\n    return (\r\n        <div\r\n            data-testid={contentItem.key}\r\n            className=\"gap-6\"\r\n            style={calculateContainerStyle(contentItem)}\r\n        >\r\n            {contentItem.content.map(it => {\r\n                const key = isRecuriveFormLayout(it) ? it.key : it.field.id\r\n\r\n                return (\r\n                    <FormLayout\r\n                        key={key}\r\n                        contentItem={it}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useMemo, useRef} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {type FieldValues, useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\nimport type {Context} from 'use-context-selector'\r\nimport {createContext} from 'use-context-selector'\r\n\r\nimport type {FormDefinition} from '@bpinc/ad-request-urls'\r\nimport {createLeadMappingStringToFormValueMap, getFormCSSVariables} from '@bpinc/lib-form-builder'\r\nimport type {ChangeFormPageId} from '@bpinc/lib-form-builder-ui'\r\n\r\nimport {CompactForm} from './CompactForm'\r\nimport {WideForm} from './WideForm'\r\n\r\n\r\ntype FormBuilderCommons = {\r\n    formDefinition: FormDefinition\r\n    changeFormPageId?: ChangeFormPageId\r\n    view?: boolean\r\n    contactData?: {\r\n        contactId: string\r\n        firstName: string\r\n        lastName: string\r\n    }\r\n    /** List of intent ID detected for the associated interaction */\r\n    intents?: string[]\r\n    /** Compact mode is used in Communicator. Form fields are displayed in a single column */\r\n    compact?: boolean\r\n}\r\ntype FormBuilderProps = FormBuilderCommons & {\r\n    pageIndex?: number\r\n    onFormAvailable: (form: UseFormReturn) => void\r\n    variables?: Record<string, unknown>\r\n    defaultValues?: Record<string, unknown>\r\n    shouldResetOnChange?: boolean\r\n}\r\n\r\ntype FormBuilderContextValue = FormBuilderCommons & {\r\n    runtimeVariables: Record<string, unknown>\r\n    form: UseFormReturn\r\n    pageIndex: number\r\n}\r\n\r\nexport let FormBuilderContext: Context<FormBuilderContextValue>\r\n\r\nexport const FormBuilder: React.FC<FormBuilderProps> = ({\r\n    variables = {},\r\n    formDefinition,\r\n    intents = [],\r\n    pageIndex = 0,\r\n    changeFormPageId,\r\n    view = false,\r\n    onFormAvailable,\r\n    contactData,\r\n    defaultValues,\r\n    shouldResetOnChange = false,\r\n    compact = false,\r\n}) => {\r\n    const form = useForm<FieldValues>({\r\n        defaultValues,\r\n        mode: 'onChange',\r\n        reValidateMode: 'onChange',\r\n    })\r\n\r\n    const isMountedRef = useRef(false)\r\n\r\n    useEffect(() => {\r\n        if (!isMountedRef.current) {\r\n            isMountedRef.current = true\r\n            return\r\n        }\r\n\r\n        if (shouldResetOnChange) {\r\n            form.reset(defaultValues)\r\n            /**\r\n             * Form could be changed outside the component, so we need to trigger the validation.\r\n             * If we reset the form with default values, we need to trigger the form validation\r\n             * manually, because the form is not dirty and the validation is not triggered.\r\n             * setTimeout is a workaround to trigger the validation after the form is rendered.\r\n             */\r\n            setTimeout(form.trigger)\r\n        }\r\n    }, [shouldResetOnChange, defaultValues, form])\r\n\r\n    useEffect(() => {\r\n        onFormAvailable?.(form)\r\n    }, [form, onFormAvailable])\r\n\r\n    const formValues = form.watch()\r\n    const runtimeVariables = useMemo(() => ({\r\n        ...variables,\r\n        ...createLeadMappingStringToFormValueMap(formValues, formDefinition),\r\n    }), [formDefinition, variables, formValues])\r\n\r\n    const formCSSVariables = useMemo(() => getFormCSSVariables(formDefinition), [formDefinition])\r\n\r\n    const contextValue = useMemo<FormBuilderContextValue>(() => ({\r\n        formDefinition,\r\n        pageIndex,\r\n        changeFormPageId,\r\n        view,\r\n        contactData,\r\n        form,\r\n        runtimeVariables,\r\n        intents,\r\n        compact,\r\n    }), [\r\n        formDefinition,\r\n        pageIndex,\r\n        changeFormPageId,\r\n        view,\r\n        contactData,\r\n        form,\r\n        runtimeVariables,\r\n        intents,\r\n        compact,\r\n    ])\r\n\r\n    if (!FormBuilderContext) {\r\n        FormBuilderContext = createContext<FormBuilderContextValue>(contextValue)\r\n    }\r\n\r\n    return (\r\n        <FormBuilderContext.Provider value={contextValue}>\r\n            <div\r\n                style={formCSSVariables}\r\n                className=\"\r\n                    flex\r\n                    flex-auto\r\n                    flex-col\r\n                    gap-6\r\n                    bg-[--form-backgroundColor]\r\n                    text-[--form-textColor]\r\n                \"\r\n            >\r\n                {compact ? <CompactForm /> : <WideForm />}\r\n            </div>\r\n\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n        </FormBuilderContext.Provider>\r\n    )\r\n\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {useContext} from 'use-context-selector'\r\n\r\nimport {transformFormDefinitionsToLayout} from '@bpinc/lib-form-builder'\r\n\r\nimport {FormBuilderContext} from './FormBuilder'\r\nimport {FormLayout} from './FormLayout'\r\n\r\n/**\r\n * Renders a form with multiple columns as it is defined in the form definition.\r\n * It is used in fullscreen Agent Desktop.\r\n */\r\nexport function WideForm() {\r\n    const {formDefinition, pageIndex} = useContext(FormBuilderContext)\r\n\r\n    const pageFields = useMemo(() => {\r\n        return formDefinition?.layout?.pages?.[pageIndex]?.fields || []\r\n    }, [formDefinition?.layout?.pages, pageIndex])\r\n\r\n    const pageLayouts = useMemo(() => {\r\n        return transformFormDefinitionsToLayout(pageFields)\r\n    }, [pageFields])\r\n\r\n    return (\r\n        <>\r\n            {pageLayouts.map(pageLayout => (\r\n                <FormLayout\r\n                    key={pageLayout.key}\r\n                    contentItem={pageLayout}\r\n                />\r\n            ),\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport type {FieldValues, UseFormReturn} from 'react-hook-form'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContactFormDefinition, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsUnflatten} from '@bpinc/ad-contacts-state-types'\r\nimport {unflatten} from '@bpinc/lib-flat'\r\nimport {createLeadMappingStringToFormValueMap} from '@bpinc/lib-form-builder'\r\nimport {dirtyValues as getDirtyValues} from '@bpinc/lib-forms-base'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ExternalEditControlsProps {\r\n    toggleEditMode: Toggle\r\n    form?: UseFormReturn<FieldValues>\r\n    contactId: string\r\n}\r\n\r\nexport function ExternalEditControls({\r\n    form,\r\n    contactId,\r\n    toggleEditMode,\r\n}: ExternalEditControlsProps): ReactElement<ExternalEditControlsProps> {\r\n    const {t} = useLocalizationState()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {saveContactDetails} = useContactsStateMethods()\r\n    const contactDetailsFormDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n\r\n    const handleSave = useCallback(\r\n        function handelSaveCallback() {\r\n            assertDefined(form)\r\n\r\n            const dirtyValues = getDirtyValues(form.formState.dirtyFields, form.getValues())\r\n\r\n            const onSuccess = () => toggleEditMode()\r\n            const onError = () => {\r\n                toggleEditMode()\r\n                showNotification({\r\n                    type: 'error',\r\n                    id: Notifications.ContactSaveError,\r\n                    tags: ['current-view'],\r\n                    message: t.CONTACT.save_error(),\r\n                })\r\n            }\r\n\r\n            const onValid = () => {\r\n                assertDefined(contactDetailsFormDefinition)\r\n\r\n                if (!Object.keys(dirtyValues).length) {\r\n                    toggleEditMode()\r\n                    return\r\n                }\r\n\r\n                const flatContactDetails = createLeadMappingStringToFormValueMap(dirtyValues, contactDetailsFormDefinition)\r\n                const newDetails = unflatten<FieldValues, ContactDetailsUnflatten>(flatContactDetails)\r\n\r\n                saveContactDetails(contactId, newDetails, {onSuccess, onError})\r\n            }\r\n            form.handleSubmit(onValid)()\r\n        },\r\n        [\r\n            form,\r\n            contactId,\r\n            saveContactDetails,\r\n            showNotification,\r\n            t.CONTACT,\r\n            toggleEditMode,\r\n            contactDetailsFormDefinition,\r\n        ],\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-end gap-2 border-t px-6 py-4\">\r\n            <Button\r\n                onClick={toggleEditMode}\r\n                tooltip={t.UNDEFINED.button_cancel_contact_title()}\r\n                data-testid=\"cancel-edit-button\"\r\n                variant=\"ghost\"\r\n            >\r\n                {t.UNDEFINED.button_cancel_contact_text()}\r\n            </Button>\r\n\r\n            <Button\r\n                onClick={handleSave}\r\n                tooltip={t.UNDEFINED.button_save_contact_title()}\r\n                data-testid=\"save-edit-button\"\r\n                variant=\"primary\"\r\n            >\r\n                {t.UNDEFINED.button_save_contact_text()}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\n\r\nimport {useContact, useContactFormDefinition} from '@bpinc/ad-contacts-state-context'\r\nimport {FormBuilder} from '@bpinc/ad-form-builder'\r\nimport {createFormValues} from '@bpinc/lib-form-builder'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Avatar} from '../../Avatar'\r\nimport {ExternalEditControls} from './ExternalEditControls'\r\n\r\n\r\nexport const ExternalEdit: React.FC<{\r\n    toggleEditMode: Toggle\r\n    contactId: string\r\n}> = ({\r\n    toggleEditMode,\r\n    contactId,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const formDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n    const contactData = useContact(contactId)\r\n    const variables = contactData?.details\r\n\r\n    const formValues = formDefinition && variables\r\n        ? createFormValues(formDefinition, variables)\r\n        : undefined\r\n\r\n    const [form, setForm] = useState<UseFormReturn | undefined>()\r\n\r\n    if (!formDefinition) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-auto flex-col overflow-y-auto overflow-x-hidden px-6\">\r\n                <div className=\"flex h-16 shrink-0 items-center pb-2 pt-4\">\r\n                    <h2>{t.CONTACT.external_contact()}</h2>\r\n                </div>\r\n\r\n                <div className=\"flex shrink-0 gap-8 px-6 py-4\">\r\n                    {contactData?.data && <Avatar user={contactData?.data} />}\r\n\r\n                    <FormBuilder\r\n                        formDefinition={formDefinition}\r\n                        onFormAvailable={setForm}\r\n                        defaultValues={formValues}\r\n                        compact\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <ExternalEditControls\r\n                form={form}\r\n                toggleEditMode={toggleEditMode}\r\n                contactId={contactId}\r\n            />\r\n\r\n            {process.env.NODE_ENV === 'development' && form?.control && <DevTool control={form?.control} />}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useContactFormDefinition} from '@bpinc/ad-contacts-state-context'\r\nimport {checkIsLayout, createFormElement} from '@bpinc/lib-form-builder'\r\n\r\n\r\nexport function useFormElements() {\r\n    const formDefinition = useContactFormDefinition('CONTACT_DETAIL')\r\n\r\n    return useMemo(() => {\r\n        const formElements = formDefinition?.layout?.pages?.[0]?.fields || []\r\n        const formFields = formElements.filter(field => !checkIsLayout(field.field))\r\n        return formFields?.map(createFormElement) ?? []\r\n    }, [formDefinition])\r\n}\r\n","import {useMemo} from 'react'\r\nimport {omit, remove} from 'lodash-es'\r\n\r\nimport type {\r\n    ContactDetailsType,\r\n    ServerAddressType,\r\n    ServerEmailType,\r\n    ServerPhoneType,\r\n} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {STATES} from '@bpinc/ad-location-data'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-transport-types'\r\nimport type {ButtonElement, FormElement, ImageElement, MessengersElement} from '@bpinc/lib-form-builder'\r\nimport {parseMessengers} from '@bpinc/lib-forms-base'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useGetMessengerName} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {FormElementViewProps} from '../components/FormElementView'\r\n\r\n\r\nexport type Field = Pick<\r\n    FormElementViewProps,\r\n    'label' | 'value' | 'type' | 'image' | 'height' | 'button' | 'name' | 'options' | 'messenger'\r\n>\r\ntype STATES_CODE = keyof typeof STATES\r\n\r\nexport const NON_FORKABLE_FIELDS = [\r\n    'Contact.phones',\r\n    'Contact.emails',\r\n    'Contact.addresses',\r\n    'Contact.messengers',\r\n] as const\r\n\r\nexport type NonForkableFields = typeof NON_FORKABLE_FIELDS[number]\r\n\r\n/*TODO: Refactor it:\r\n    Separate merge functionality\r\n*/\r\ninterface Params {\r\n    elements: FormElement[]\r\n    values: ContactDetailsType | undefined\r\n    srcValues?: ContactDetailsType\r\n}\r\nexport function useFormElementsToViews({elements, values, srcValues}: Params): Field[] {\r\n    const {formatPhoneType, formatEmailType, formatAddressType, formatFullName} = useFormatting()\r\n    const {t} = useLocalizationState()\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    const isMergeMode = !!srcValues && !!values\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            let updatedElements = [...elements]\r\n            const updatedValues = {...values}\r\n            const updatedSrcValues = {...srcValues}\r\n\r\n            if (isMergeMode) {\r\n                mergeNamesInSingleField()\r\n                createForkFields()\r\n            }\r\n\r\n            function mergeNamesInSingleField() {\r\n                remove(updatedElements, el => {\r\n                    return el.mapping === 'Contact.first_name' || el.mapping === 'Contact.last_name'\r\n                })\r\n\r\n                const fullName = formatFullName(values?.['Contact.first_name'], values?.['Contact.last_name'])\r\n\r\n                updatedElements.unshift({\r\n                    name: 'Contact.name',\r\n                    mapping: 'Contact.name',\r\n                    value: fullName,\r\n                    label: t.CONTACT.full_name(),\r\n                    type: 'text',\r\n                })\r\n                updatedValues['Contact.name'] = fullName\r\n\r\n                if (srcValues) {\r\n                    const newFullName = formatFullName(\r\n                        updatedSrcValues?.['Contact.first_name'],\r\n                        updatedSrcValues?.['Contact.last_name'],\r\n                    )\r\n                    updatedSrcValues['Contact.name'] = newFullName\r\n                }\r\n            }\r\n\r\n            function createForkFields() {\r\n                updatedElements = [...updatedElements].reduce<FormElement[]>((acc, element) => {\r\n                    if (haveTwoElements()) {\r\n                        const mapping = element.mapping\r\n                        assertDefined(mapping)\r\n                        addMergeField(updatedSrcValues[mapping], updatedValues[mapping])\r\n                    } else {\r\n                        acc.push(element)\r\n                    }\r\n\r\n                    return acc\r\n\r\n                    function haveTwoElements() {\r\n                        return (\r\n                            element.mapping &&\r\n                            updatedSrcValues?.[element.mapping] &&\r\n                            !NON_FORKABLE_FIELDS.includes(element.mapping as NonForkableFields)\r\n                        )\r\n                    }\r\n\r\n                    function addMergeField(srcValue: unknown, distValue: unknown) {\r\n                        if (typeof srcValue !== 'string' || typeof distValue !== 'string') {\r\n                            return\r\n                        }\r\n\r\n                        acc.push({\r\n                            name: element.mapping,\r\n                            mapping: element.mapping,\r\n                            label: element.label,\r\n                            type: 'radio',\r\n                            options: [\r\n                                {id: srcValue, name: srcValue},\r\n                                {id: distValue, name: distValue},\r\n                            ],\r\n                        })\r\n                    }\r\n                }, [])\r\n            }\r\n\r\n            return updatedElements.reduce<Field[]>((fields, element) => {\r\n                if (element.mapping) {\r\n                    const value = updatedValues?.[element.mapping]\r\n                    const srcValue = srcValues?.[element.mapping]\r\n                    if (element.type === 'radio') {\r\n                        fields.push({\r\n                            type: 'radio',\r\n                            name: element.mapping,\r\n                            options: element.options,\r\n                            label: element.label,\r\n                        })\r\n                    } else if (element.type === 'spacer') {\r\n                        fields.push({\r\n                            type: 'spacer',\r\n                            height: element?.style?.height,\r\n                            name: element.mapping,\r\n                        })\r\n                    } else if (element.type === 'button') {\r\n                        const button = omit(element, ['viewStyle', 'editStyle', 'containerId'])\r\n                        fields.push({\r\n                            type: 'button',\r\n                            button: button as ButtonElement,\r\n                            name: element.mapping,\r\n                        })\r\n                    } else if (element.type === 'image') {\r\n                        fields.push({\r\n                            type: 'image',\r\n                            image: element as ImageElement,\r\n                            value: value as string | undefined,\r\n                            name: element.mapping,\r\n                        })\r\n                    } else if (element.type === 'messengers') {\r\n                        const messengersElem = element as MessengersElement\r\n                        const messengers = parseMessengers(values?.[messengersElem.mapping])\r\n                        messengers?.filter(m => m.type).forEach(messenger => {\r\n                            fields.push({\r\n                                type: 'messenger',\r\n                                label: element.label || getMessengerName(messenger.type as ExternalChatChannelType),\r\n                                messenger,\r\n                            })\r\n                        })\r\n                    } else if (element.type === 'phoneList') {\r\n                        const phones = (value || []) as ServerPhoneType[]\r\n                        const srcPhones = (srcValue || []) as ServerPhoneType[]\r\n\r\n                        ;[...srcPhones, ...phones]?.forEach(phoneItem => {\r\n                            if (phoneItem.phone) {\r\n                                fields.push({\r\n                                    label: formatPhoneType(phoneItem.type),\r\n                                    value: phoneItem.phone,\r\n                                    type: 'number',\r\n                                    name: element.mapping,\r\n                                })\r\n                            }\r\n                        })\r\n                    } else if (element.type === 'emailList') {\r\n                        const emails = (value || []) as ServerEmailType[]\r\n                        const srcEmails = (srcValue || []) as ServerEmailType[]\r\n\r\n                        ;[...srcEmails, ...emails]?.forEach(emailItem => {\r\n                            if (emailItem.email_address) {\r\n                                fields.push({\r\n                                    label: formatEmailType(emailItem.type),\r\n                                    value: emailItem.email_address,\r\n                                    type: 'email',\r\n                                    name: element.mapping,\r\n                                })\r\n                            }\r\n                        })\r\n                    } else if (element.type === 'addressList') {\r\n                        const addresses = (value || []) as ServerAddressType[]\r\n                        const srcAddresses = (srcValue || []) as ServerAddressType[]\r\n\r\n                        ;[...srcAddresses, ...addresses]?.forEach(item => {\r\n                            fields.push({\r\n                                label: formatAddressType(item.type),\r\n                                value: [\r\n                                    item.address_line1,\r\n                                    item.address_line2,\r\n                                    item.city,\r\n                                    STATES[item.state as STATES_CODE],\r\n                                    item.postcode,\r\n                                ]\r\n                                    .filter(Boolean)\r\n                                    .join(', '),\r\n                                name: element.mapping,\r\n                            })\r\n                        })\r\n                    } else if (element.type === 'label' && element.value) {\r\n                        fields.push({\r\n                            label: element.value,\r\n                            name: element.mapping,\r\n                        })\r\n                    } else if (!element.hideEmpty || (value && typeof value === 'string')) {\r\n                        const typedValue = value as string | undefined\r\n\r\n                        if (element.type === 'select') {\r\n                            const optionValue = element?.options?.find(option => option.id === typedValue)?.name\r\n                            element.label &&\r\n                                fields.push({\r\n                                    value: optionValue,\r\n                                    label: element.label,\r\n                                    name: element.mapping,\r\n                                })\r\n                        } else if (element.type === 'email') {\r\n                            element.label &&\r\n                                fields.push({\r\n                                    type: 'email',\r\n                                    value: typedValue,\r\n                                    label: element.label,\r\n                                    name: element.mapping,\r\n                                })\r\n                        } else if (element.type === 'link') {\r\n                            fields.push({\r\n                                type: 'link',\r\n                                value: element.linkUrl,\r\n                                label: element.value || element.linkUrl,\r\n                                name: element.mapping,\r\n                            })\r\n                        } else if (element.type === 'dateTime') {\r\n                            element.label &&\r\n                                fields.push({\r\n                                    label: element.label,\r\n                                    value: typedValue && formatDate(typedValue, {birthday: true}),\r\n                                    name: element.mapping,\r\n                                })\r\n                        } else {\r\n                            element.label &&\r\n                                fields.push({\r\n                                    label: element.label,\r\n                                    value: typedValue,\r\n                                    name: element.mapping,\r\n                                })\r\n                        }\r\n                    }\r\n                }\r\n                return fields\r\n            }, [])\r\n        },\r\n        [\r\n            elements,\r\n            formatAddressType,\r\n            formatEmailType,\r\n            formatFullName,\r\n            formatPhoneType,\r\n            getMessengerName,\r\n            isMergeMode,\r\n            srcValues,\r\n            t.CONTACT,\r\n            values,\r\n        ],\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {ModalConfig} from '@bpinc/state-modals-types'\r\n\r\n\r\ninterface ActionsProps {\r\n    closeModal: () => void\r\n    onConfirm: () => void\r\n}\r\n\r\ninterface ContentProps {\r\n    name: string\r\n}\r\n\r\nconst Title: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const text = t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_title_warning()\r\n\r\n    return <>{text}</>\r\n}\r\n\r\nconst Content: React.FC<ContentProps> = ({name}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div>\r\n            <p>{t.UNDEFINED.contact_deleting_confirmation(name)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Actions: React.FC<ActionsProps> = props => {\r\n    const {t} = useLocalizationState()\r\n    const {closeModal, onConfirm} = props\r\n    const handleConfirm = useCallback(() => {\r\n        closeModal()\r\n        onConfirm()\r\n    }, [closeModal, onConfirm])\r\n\r\n    return (\r\n        <>\r\n            <SemanticButton\r\n                enabledInOffline\r\n                onClick={closeModal}\r\n                data-testid=\"cancel-button\"\r\n            >\r\n                {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonCancel()}\r\n            </SemanticButton>\r\n            <SemanticButton\r\n                primary\r\n                onClick={handleConfirm}\r\n                data-testid=\"confirm-button\"\r\n            >\r\n                {t.WINDOW_POPUP_TITLES_AND_MESSAGES.window_buttonOk()}\r\n            </SemanticButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const getDeleteWarningModal = (\r\n    onConfirm: () => void,\r\n    options: {name: string},\r\n): ModalConfig => {\r\n    const {name} = options\r\n    return {\r\n        dataKey: 'delete-contact-warning-button',\r\n        title: <Title />,\r\n        body: <Content name={name} />,\r\n        actions: ({closeModal}: { closeModal: () => void }) => {\r\n            return (\r\n                <Actions\r\n                    closeModal={closeModal}\r\n                    onConfirm={onConfirm}\r\n                />\r\n            )\r\n        },\r\n    }\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useGetDirectLink} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useOpenGlobalSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {getDeleteWarningModal} from '../components/modals/getDeleteWarningModal'\r\n\r\n\r\nexport function useViewModeHandlers(id: string) {\r\n    const goBack = useNavigationState('goBack')\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const {formatFullName} = useFormatting()\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    const contacts = useContactsState('contacts')\r\n    const {deleteContact} = useContactsStateMethods()\r\n    const getDirectLink = useGetDirectLink()\r\n\r\n    const {data, details} = contacts[id] || {}\r\n    const {openModal} = useModalsStateMethods()\r\n\r\n    const handleCopyLink = useCallback(() => {\r\n        const link = getDirectLink(undefined, id)\r\n        clipboard.copy(link)\r\n    }, [id, getDirectLink])\r\n\r\n    const handleDelete = useCallback(() => {\r\n        const onError = () => showNotification({\r\n            type: 'error',\r\n            id: Notifications.ContactDeleteError,\r\n            tags: ['current-view'],\r\n            message: i18n.delete_error(),\r\n        })\r\n        const onConfirm = () => {\r\n            if (data) {\r\n                deleteContact(data.Id.oid).then(goBack).catch(onError)\r\n            } else {\r\n                onError()\r\n            }\r\n        }\r\n        const name = formatFullName(data?.firstName, data?.lastName) || 'No name'\r\n        openModal(getDeleteWarningModal(onConfirm, {name}))\r\n\r\n    }, [data, deleteContact, formatFullName, goBack, openModal, showNotification, i18n])\r\n\r\n    const openGlobalSlidingModal = useOpenGlobalSlidingModal()\r\n    const handleMerge = useCallback(\r\n        function handleMergeCallback() {\r\n            openGlobalSlidingModal('mergeContacts', {\r\n                srcContactDetails: {...details, id},\r\n                onMerge() {\r\n                    bpLogger.warn(\r\n                        'TODO: Some server method is needed in order to replace',\r\n                        'outdated contact in entries like recent or favorites',\r\n                    )\r\n                },\r\n            })\r\n        },\r\n        [details, id, openGlobalSlidingModal],\r\n    )\r\n\r\n    return {\r\n        handleDelete,\r\n        handleCopyLink,\r\n        handleMerge,\r\n    }\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useState} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {SmLabel} from '@bpinc/lib-external-ui-elements'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {ButtonDropdown, IconMenu24, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useExternalMoreButtonOptions} from '../../../../../hooks/useExternalMoreButtonOptions'\r\n\r\n\r\ninterface ExernalViewMoreButtonProps {\r\n    handleMerge: () => void\r\n    handleCopyLink: () => void\r\n}\r\nexport const ExternalViewMoreButton: FC<ExernalViewMoreButtonProps> = ({handleMerge, handleCopyLink}) => {\r\n    const [linkClick, setLinkClicks] = useState(0)\r\n    const {t} = useLocalizationState()\r\n\r\n    const {value: show, toggle: toggleShow} = useBoolean()\r\n\r\n    const externalMoreButtonOptions = useExternalMoreButtonOptions({setLinkClicks, toggleShow, handleMerge, handleCopyLink})\r\n\r\n    return (\r\n        <>\r\n            <TriggerDropdown\r\n                modal={false}\r\n                open={show}\r\n                onOpenChange={toggleShow}\r\n                className=\"group z-10\"\r\n                align=\"start\"\r\n                options={\r\n                    <>\r\n                        {externalMoreButtonOptions.map((message, i) => {\r\n                            return (\r\n                                <ButtonDropdown.Item\r\n                                    key={i}\r\n                                    onClick={message.onClick}\r\n                                >\r\n                                    {message.children}\r\n                                </ButtonDropdown.Item>\r\n                            )\r\n                        })}\r\n                    </>\r\n                }\r\n            >\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    icon={<IconMenu24 />}\r\n                />\r\n            </TriggerDropdown>\r\n\r\n            {!!linkClick && (\r\n                <SmLabel key={linkClick} pointing=\"left\" className=\"animate-copied-label select-none\">\r\n                    {t.CONTACT.copied_confirmation_label_text()}\r\n                </SmLabel>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import type React from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\n\r\nimport type {PopupMenuOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ExternalMoreButtonOptionsProps {\r\n    setLinkClicks: React.Dispatch<React.SetStateAction<number>>\r\n    toggleShow: () => void\r\n    handleMerge: () => void\r\n    handleCopyLink: () => void\r\n}\r\nexport const useExternalMoreButtonOptions = ({\r\n    setLinkClicks,\r\n    toggleShow,\r\n    handleMerge,\r\n    handleCopyLink,\r\n}: ExternalMoreButtonOptionsProps): PopupMenuOption[] => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const openInCRM = useCallback(() => {\r\n        'TODO: HANDLER WHEN DESIGN IS READY'\r\n        toggleShow()\r\n    }, [toggleShow])\r\n\r\n    const copySharableLink = useCallback(() => {\r\n        handleCopyLink()\r\n        setLinkClicks(n => ++n)\r\n        toggleShow()\r\n    }, [toggleShow, setLinkClicks, handleCopyLink])\r\n\r\n    const mergeToExisting = useCallback(() => {\r\n        handleMerge()\r\n        toggleShow()\r\n    }, [toggleShow, handleMerge])\r\n    return useMemo(\r\n        function memoizeItems() {\r\n            return [\r\n                {\r\n                    children: t.CONTACT.open_in_crm(),\r\n                    onClick: openInCRM,\r\n                },\r\n                {\r\n                    children: t.GLOBAL.copy_shareable_link(),\r\n                    onClick: copySharableLink,\r\n                },\r\n                {\r\n                    children: t.CONTACT.merge_to_existing(),\r\n                    onClick: mergeToExisting,\r\n                },\r\n            ]\r\n        },\r\n        [\r\n            t,\r\n            openInCRM,\r\n            copySharableLink,\r\n            mergeToExisting,\r\n        ],\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {IconDelete24, IconEdit24} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useViewModeHandlers} from '../../../../hooks/useViewModeHandlers'\r\nimport {ExternalViewMoreButton} from './ExternalViewMoreButton'\r\n\r\n\r\nexport const ExternalViewControls: React.FC<{\r\n    toggleEditMode: Toggle\r\n    contactId: string\r\n}> = ({\r\n    toggleEditMode,\r\n    contactId,\r\n}) => {\r\n    const {privileges} = useSessionState()\r\n    const {t} = useLocalizationState()\r\n    const {handleDelete, handleCopyLink, handleMerge} = useViewModeHandlers(contactId)\r\n\r\n    return (\r\n        <div className=\"flex items-center gap-2 px-6 pb-2 pt-4\">\r\n            <h2>{t.CONTACT.external_contact()}</h2>\r\n\r\n            {!!privileges.EDIT_CONTACTS && (\r\n                <Button\r\n                    onClick={toggleEditMode}\r\n                    variant=\"ghost\"\r\n                    tooltip={t.UNDEFINED.button_edit_contact_title()}\r\n                    data-testid=\"edit-contact-button\"\r\n                    icon={<IconEdit24 />}\r\n                />\r\n            )}\r\n\r\n            {!!privileges.DELETE_CONTACTS && (\r\n                <Button\r\n                    onClick={handleDelete}\r\n                    variant=\"ghost\"\r\n                    tooltip={t.UNDEFINED.button_delete_contact_title()}\r\n                    data-testid=\"delete-contact-button\"\r\n                    icon={<IconDelete24 />}\r\n                >\r\n                    {t.UNDEFINED.button_delete_contact_text()}\r\n                </Button>\r\n            )}\r\n\r\n            <ExternalViewMoreButton\r\n                handleCopyLink={handleCopyLink}\r\n                handleMerge={handleMerge}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {FavoritesChannelMedia} from '@bpinc/ad-transport-types'\r\nimport {ExternalContactFieldFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\n\r\nimport {useFormElements} from '../../../hooks/useFormElements'\r\nimport {useFormElementsToViews} from '../../../hooks/useFormElementsToViews'\r\nimport {Avatar} from '../../Avatar'\r\nimport {FormElementView} from '../../FormElementView'\r\nimport {ExternalViewControls} from './ExternalViewControls'\r\n\r\n\r\nexport const ExternalView: React.FC<{\r\n    toggleEditMode: Toggle\r\n    contactId: string\r\n}> = ({toggleEditMode, contactId}) => {\r\n\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const formElements = useFormElements()\r\n    const contactData = useContact(contactId)\r\n    const formValues = contactData?.details\r\n    const fields = useFormElementsToViews({elements: formElements, values: formValues})\r\n\r\n    const handlePhoneChannelInteraction = useEvent((number: string, media: FavoritesChannelMedia) => {\r\n        if (media === 'voice') {\r\n            handleCall({\r\n                contactId,\r\n                phone: number,\r\n                firstName: contactData?.data?.firstName,\r\n                lastName: contactData?.data?.lastName,\r\n                navigateToInteractionsPage: true,\r\n                origination: 'contact-profile',\r\n            })\r\n        } else {\r\n            openActivityHistory({\r\n                contactId,\r\n                phone: number,\r\n                firstName: contactData?.data?.firstName,\r\n                lastName: contactData?.data?.lastName,\r\n                origination: 'contact-profile',\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <ExternalViewControls\r\n                contactId={contactId}\r\n                toggleEditMode={toggleEditMode}\r\n            />\r\n\r\n            <div className=\"flex shrink-0 gap-8 px-6 py-4\">\r\n                {contactData?.data && <Avatar user={contactData?.data} />}\r\n\r\n                <div role=\"list\" className=\"grow\">\r\n                    {fields.map((item, i) => {\r\n                        if (!item.value && !item.messenger) {\r\n                            return null\r\n                        }\r\n                        return (\r\n                            <FormElementView\r\n                                values={formValues}\r\n                                key={i}\r\n                                contactId={contactId}\r\n                                additionalControls={\r\n                                    <ExternalContactFieldFavoriteButton\r\n                                        contactId={contactId}\r\n                                        field={item}\r\n                                        onPhoneInteraction={handlePhoneChannelInteraction}\r\n                                    />\r\n                                }\r\n                                {...item}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\n\r\nimport {useContact, useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsStateMethods} from '@bpinc/state-modals-context'\r\n\r\nimport {ServiceSelect} from '../../../components/ServiceSelect'\r\nimport {ContactDetailsControls} from '../ContactDetailsControls'\r\nimport {Header} from '../Header'\r\nimport {getGoBackWarningModal} from '../modals/getGoBackWarningModal'\r\nimport {ExternalEdit} from './ExternalEdit'\r\nimport {ExternalView} from './ExternalView'\r\n\r\n\r\ninterface Props {\r\n    contactId: string\r\n}\r\n\r\nexport const External: React.FC<Props> = ({contactId}) => {\r\n    const goBack = useNavigationState('goBack')\r\n    const {t} = useLocalizationState()\r\n    const {openModal} = useModalsStateMethods()\r\n    const activeInteractionId = useActiveInteractionId()\r\n\r\n    const contact = useContact(contactId)\r\n    const formDefinitionsLoading = useContactsState('formDefinitionsLoading')\r\n\r\n    const {getContact, getContactDetails, getContactFormsDefinitions} = useContactsStateMethods()\r\n\r\n    const {data, contactDetailsUpdating, contactDetailsLoading, isLoading} = contact || {}\r\n    const {value: editMode, toggle: toggleEditMode} = useBoolean()\r\n\r\n    const handleGoBack = useCallback(() => {\r\n        const onConfirm = () => {\r\n            toggleEditMode(false)\r\n            goBack()\r\n        }\r\n        if (editMode) {\r\n            openModal(getGoBackWarningModal(onConfirm))\r\n        } else {\r\n            onConfirm()\r\n        }\r\n    }, [editMode, goBack, openModal, toggleEditMode])\r\n\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    useEffect(\r\n        () => {\r\n            Promise.all([\r\n                getContact({id: contactId}),\r\n                getContactFormsDefinitions({}),\r\n                getContactDetails({id: contactId}),\r\n            ],\r\n            )\r\n                .then(result => {\r\n                    if (!result.every(Boolean)) {\r\n                        throw Error()\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    goBack()\r\n                    showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.ContactOpenError,\r\n                        tags: ['current-view'],\r\n                        message: t.CONTACT.open_error(),\r\n                        duration: 7000,\r\n                    })\r\n                })\r\n        },\r\n        // onComponentDidMount\r\n        // eslint-disable-next-line\r\n        [],\r\n    )\r\n\r\n    const isLoaderShown = !data || formDefinitionsLoading || contactDetailsLoading || isLoading || contactDetailsUpdating\r\n\r\n    return (\r\n        <div\r\n            className=\"flex min-h-0 flex-auto flex-col overflow-y-auto overflow-x-hidden\"\r\n            data-testid=\"contact-details\"\r\n        >\r\n            {isLoaderShown ? (\r\n                <Loader\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                    active\r\n                />\r\n            ) : (\r\n                <>\r\n                    <Header\r\n                        user={data}\r\n                        onGoBack={handleGoBack}\r\n                    />\r\n\r\n                    {editMode ? (\r\n                        <ExternalEdit\r\n                            toggleEditMode={toggleEditMode}\r\n                            contactId={contactId}\r\n                        />\r\n                    ) : (\r\n                        <>\r\n                            <div className=\"flex items-center gap-2 px-6 pb-2 pt-4\">\r\n                                <ServiceSelect itemId={activeInteractionId} />\r\n                                <ContactDetailsControls user={data} />\r\n                            </div>\r\n\r\n                            <ExternalView\r\n                                toggleEditMode={toggleEditMode}\r\n                                contactId={contactId}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {ExternalChatChannelType} from '@bpinc/ad-transport-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {IconChat, IconPhone} from '@bpinc/lib-icons'\r\nimport {CircleButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport interface EditingContactControlsProps {\r\n    firstName?: string\r\n    lastName?: string\r\n    phone?: string\r\n    messengerId?: string\r\n    channel?: ExternalChatChannelType\r\n}\r\n\r\nexport const EditingContactControls: FC<EditingContactControlsProps> = ({phone, firstName, lastName}) => {\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleChat = useCallback(() => {\r\n        if (phone) {\r\n            interactionStateMethods.createPotentialItem({\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n            })\r\n            setActivePage({name: AppRoutes.Interactions})\r\n        }\r\n    }, [interactionStateMethods, phone, firstName, lastName, setActivePage])\r\n\r\n    const onCall = useCallHandler()\r\n\r\n    const handleCall = partial(onCall, {firstName, lastName, phone, navigateToInteractionsPage: true})\r\n\r\n    return (\r\n        <div className=\"-mr-1 ml-auto flex flex-none items-center\">\r\n            <CircleButton\r\n                noActiveState\r\n                onClick={handleChat}\r\n                tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                className=\"!h-10 !w-10\"\r\n                data-testid=\"chat-button\"\r\n            >\r\n                <IconChat />\r\n            </CircleButton>\r\n            <CircleButton\r\n                noActiveState\r\n                onClick={handleCall}\r\n                tooltip={t.CONTACT.button_start_call_text()}\r\n                className=\"!h-10 !w-10\"\r\n                data-testid=\"call-button\"\r\n            >\r\n                <IconPhone />\r\n            </CircleButton>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {RecentFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {GoBackButton} from '@bpinc/lib-ui-elements'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {EditingContactControlsProps} from './EditingContactControls'\r\nimport {EditingContactControls} from './EditingContactControls'\r\n\r\n\r\ninterface EditingContactDetailsHeaderProps extends EditingContactControlsProps {\r\n    title?: string\r\n    onGoBack: () => void\r\n    email?: string\r\n    recentItem?: RecentItem\r\n}\r\n\r\nexport const EditingContactDetailsHeader: FC<EditingContactDetailsHeaderProps> = ({\r\n    title,\r\n    onGoBack,\r\n    recentItem,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div className=\"relative flex pr-3.5\">\r\n            <div className=\"mr-4 shrink-0\">\r\n                <GoBackButton onClick={onGoBack} />\r\n            </div>\r\n            <AvatarLegacy size={60} type=\"unknown\" />\r\n            <div className=\"flex grow items-center overflow-hidden\">\r\n                {title && (\r\n                    <div\r\n                        className=\"ml-2 flex overflow-hidden text-2xl font-bold leading-[30px]\"\r\n                        role=\"alert\"\r\n                        data-testid=\"name\"\r\n                    >\r\n                        <div className=\"truncate\">{title}</div>\r\n                        {!!recentItem && (\r\n                            <RecentFavoriteButton item={recentItem} className=\"ml-2 text-lg\" />\r\n                        )}\r\n                    </div>\r\n                )}\r\n                {(props.messengerId || props.phone) && <EditingContactControls {...props} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useGetContactPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {AvatarLegacy} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface ContactPreview extends ContactShortType {\r\n    className?: string\r\n}\r\n\r\nexport const ContactPreview: FC<Partial<ContactPreview>> = ({firstName, lastName, id, phone, email, className}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getContactPictureUrl = useGetContactPictureUrl()\r\n    const fullName = formatFullName(firstName, lastName)\r\n    return (\r\n        <section className={tcn(className, 'flex')}>\r\n            <AvatarLegacy\r\n                size={60}\r\n                firstName={firstName}\r\n                lastName={lastName}\r\n                initialsClassName=\"text-2xl\"\r\n                url={getContactPictureUrl(id)}\r\n                type={id ? 'contact' : 'unknown'}\r\n            />\r\n            <div className=\"ml-2\">\r\n                {fullName && <h4 className=\"mx-0 mb-0 mt-0.5 text-base\">{fullName}</h4>}\r\n                {phone && <p className=\"mx-0 mb-0 mt-1 text-main-secondary\">{formatPhone(phone)}</p>}\r\n                {email && <p className=\"mx-0 mb-0 mt-1 text-main-secondary\">{email}</p>}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import {useMemo, useState} from 'react'\r\nimport type {UseFormReturn} from 'react-hook-form'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsType, ContactDetailsUnflatten, WithId} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {flatten, unflatten} from '@bpinc/lib-flat'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {useOpenGlobalSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {NonForkableFields} from '../../hooks/useFormElementsToViews'\r\nimport {NON_FORKABLE_FIELDS} from '../../hooks/useFormElementsToViews'\r\nimport type {MergeContactsProps} from './'\r\nimport type {MergeContactsFormProps} from './MergeContactsForm'\r\n\r\n\r\ninterface UseOnSubmitParams extends MergeContactsProps {\r\n    distContactDetails: MergeContactsFormProps['distContactDetails']\r\n    handleSubmit: UseFormReturn<Partial<WithId<ContactDetailsType>>>['handleSubmit']\r\n    contactId: string\r\n}\r\n\r\nexport function useOnSubmit({\r\n    handleSubmit,\r\n    contactId,\r\n    distContactDetails,\r\n    onMerge,\r\n    srcContactDetails,\r\n}: UseOnSubmitParams) {\r\n    const [submitting, setSubmitting] = useState(false)\r\n\r\n    const {t} = useLocalizationState()\r\n    const {showNotification} = useNotificationsState('methods')\r\n\r\n    const openGlobalSlidingModal = useOpenGlobalSlidingModal()\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n    const contactsStateMethods = useContactsStateMethods()\r\n    const onSubmit = useMemo(\r\n        function memoizeSubmit() {\r\n            return handleSubmit(function onSuccess(data) {\r\n                if (!contactId) {\r\n                    return\r\n                }\r\n\r\n                setSubmitting(true)\r\n\r\n                const submitValues = unflatten<ContactDetailsType, ContactDetailsUnflatten>(\r\n                    splitNames(getMergedDetails()),\r\n                )\r\n\r\n                contactsStateMethods.saveContactDetails(contactId, submitValues, {\r\n                    onSuccess() {\r\n                        onMerge?.({...submitValues, id: contactId}, srcContactDetails)\r\n                        openGlobalSlidingModal('mergeContacts')\r\n                        setSubmitting(false)\r\n                    },\r\n                    onError() {\r\n                        setSubmitting(false)\r\n                        showNotification({\r\n                            type: 'error',\r\n                            id: Notifications.ContactMergeError,\r\n                            tags: ['current-view'],\r\n                            message: t.VALIDATION.CONTACT_MERGE_ERROR(),\r\n                            duration: 10_000,\r\n                        })\r\n                    },\r\n                })\r\n\r\n                function getMergedDetails() {\r\n                    return {\r\n                        ...distContactDetails,\r\n                        ...mergedNonForkableFields(),\r\n                        ...flatten<ContactDetailsUnflatten, ContactDetailsType>(data),\r\n                    }\r\n                }\r\n                function splitNames(details: ContactDetailsType) {\r\n                    const updatedDetails = {...details}\r\n                    const fullName = updatedDetails['Contact.name']\r\n                    if (typeof fullName === 'string') {\r\n                        const [firstName, lastName] = getNamesFromDisplayName(fullName)\r\n                        delete updatedDetails['Contact.name']\r\n\r\n                        updatedDetails['Contact.first_name'] = firstName\r\n                        updatedDetails['Contact.last_name'] = lastName\r\n                    }\r\n\r\n                    return updatedDetails\r\n                }\r\n\r\n                function mergedNonForkableFields() {\r\n                    return NON_FORKABLE_FIELDS.reduce((fields, key) => {\r\n                        return {...fields, ...bothContactDetails(key)}\r\n                    }, {})\r\n                }\r\n\r\n                function bothContactDetails(key: NonForkableFields) {\r\n                    return {[key]: [...(srcContactDetails?.[key] ?? []), ...(distContactDetails?.[key] ?? [])]}\r\n                }\r\n            })\r\n        },\r\n        [\r\n            contactId,\r\n            contactsStateMethods,\r\n            distContactDetails,\r\n            getNamesFromDisplayName,\r\n            handleSubmit,\r\n            onMerge,\r\n            showNotification,\r\n            srcContactDetails,\r\n            t.VALIDATION,\r\n            openGlobalSlidingModal,\r\n        ],\r\n    )\r\n\r\n    return {submitting, onSubmit}\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\n\r\nimport type {ContactDetailsType, WithId} from '@bpinc/ad-contacts-state-types'\r\nimport {SmForm, SmList} from '@bpinc/lib-external-ui-elements'\r\nimport {Loader, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useFormElements} from '../../hooks/useFormElements'\r\nimport {useFormElementsToViews} from '../../hooks/useFormElementsToViews'\r\nimport {FormElementView} from '../FormElementView'\r\nimport type {MergeContactsProps} from './'\r\nimport {useOnSubmit} from './useOnSubmit'\r\n\r\n\r\nexport interface MergeContactsFormProps extends MergeContactsProps {\r\n    mergeFormPreparing: boolean\r\n    distContactDetails: Partial<WithId<ContactDetailsType>> | undefined\r\n    contactId: string\r\n}\r\n\r\nexport const MergeContactsForm: FC<MergeContactsFormProps> = ({\r\n    mergeFormPreparing,\r\n    srcContactDetails,\r\n    distContactDetails,\r\n    contactId,\r\n    onMerge,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const form = useForm()\r\n    const {control, handleSubmit} = form\r\n    const formElements = useFormElements()\r\n    const fields = useFormElementsToViews({elements: formElements, values: distContactDetails, srcValues: srcContactDetails})\r\n    const {submitting, onSubmit} = useOnSubmit({\r\n        srcContactDetails,\r\n        onMerge,\r\n        contactId,\r\n        handleSubmit,\r\n        distContactDetails,\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <SmForm className=\"overflow-hidden pt-5 text-left\">\r\n                <h3 className=\"m-0 text-xl\">\r\n                    {t.CONTACT.merge_form_title()}\r\n                </h3>\r\n                <section className=\"pt-4\">\r\n                    {!mergeFormPreparing && (\r\n                        <SmList divided relaxed>\r\n                            {fields.map((field, i) => (\r\n                                <FormElementView\r\n                                    values={distContactDetails}\r\n                                    key={i}\r\n                                    contactId={contactId}\r\n                                    {...field}\r\n                                    control={control}\r\n                                />\r\n                            ))}\r\n                        </SmList>\r\n                    )}\r\n                </section>\r\n                <SemanticButton\r\n                    className=\"mt-3.5 h-8 px-6\"\r\n                    onClick={onSubmit}\r\n                    disabled={submitting}\r\n                    primary\r\n                >\r\n                    {t.CONTACT.merge_contacts()}\r\n                </SemanticButton>\r\n                <Loader\r\n                    active={submitting}\r\n                    color=\"primary\"\r\n                    size=\"big\"\r\n                />\r\n            </SmForm>\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n        </>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useRef, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactDetailsType, ContactShortType, WithId} from '@bpinc/ad-contacts-state-types'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport type {SmDropdownItemProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmDropdown} from '@bpinc/lib-external-ui-elements'\r\nimport {getErrorMessage, useAsRef} from '@bpinc/lib-helpers'\r\nimport type {DropdownProps} from '@bpinc/lib-ui-elements'\r\n\r\nimport {ContactPreview} from './ContactPreview'\r\n\r\n\r\nfunction getOption(contact: ContactShortType) {\r\n    return {\r\n        value: contact.id,\r\n        as: (props: SmDropdownItemProps) => (\r\n            <SmDropdown.Item {...props} className=\"!px-4 !py-1\">\r\n                <ContactPreview {...contact} />\r\n            </SmDropdown.Item>\r\n        ),\r\n    }\r\n}\r\n\r\nexport function useSearchContactState() {\r\n    const [distContactDetails, setDistContactDetails] = useState<Partial<WithId<ContactDetailsType>>>()\r\n    const [mergeFormPreparing, setMergeFormPreparing] = useState(false)\r\n    const [searchQuery, setSearchQuery] = useState<string | undefined>('')\r\n    const contactsStateMethods = useContactsStateMethods()\r\n    const [contactsAreLoading, setContactsAreLoading] = useState(false)\r\n    const [options, setOptions] = useState<SmDropdownItemProps[]>([])\r\n\r\n    const searchQueryRef = useAsRef(searchQuery)\r\n\r\n    const getContactsList = useCallback(\r\n        function getContactsListCallback(searchQueryInner: string | undefined) {\r\n            const isOutdated = (checkingSearchQuery: string | undefined) => searchQueryRef.current !== checkingSearchQuery\r\n\r\n            if (isOutdated(searchQueryInner)) {\r\n                setOptions([])\r\n                setContactsAreLoading(false)\r\n                return\r\n            }\r\n\r\n            contactsStateMethods\r\n                .getContactList({query: searchQueryInner})\r\n                .then(contacts => {\r\n                    if (!contacts || isOutdated(searchQueryInner)) {\r\n                        return\r\n                    }\r\n\r\n                    setOptions(contacts?.map(getOption))\r\n                })\r\n                .finally(() => {\r\n                    setContactsAreLoading(false)\r\n                })\r\n        },\r\n        [contactsStateMethods, searchQueryRef],\r\n    )\r\n\r\n    const debouncedGetContactsList = useRef(debounce(getContactsList, 300)).current\r\n\r\n    const handleSearchChange = useCallback(\r\n        function handleSearchChangeCallback(_evt: SyntheticEvent, {searchQuery: searchQueryInner}: DropdownProps) {\r\n            if (searchQueryInner) {\r\n                setContactsAreLoading(true)\r\n                debouncedGetContactsList(searchQueryInner)\r\n            } else {\r\n                setOptions([])\r\n            }\r\n\r\n            setSearchQuery(searchQueryInner)\r\n        },\r\n        [debouncedGetContactsList],\r\n    )\r\n\r\n    const handleSelect = useCallback(\r\n        function handleSelectCallback(_evt: SyntheticEvent, {value: contactId}: DropdownProps) {\r\n            if (typeof contactId !== 'string') {\r\n                return\r\n            }\r\n\r\n            setMergeFormPreparing(true)\r\n\r\n            contactsStateMethods\r\n                .getContactDetails({id: contactId, force: true})\r\n                .then(selectedContact => {\r\n                    if (selectedContact) {\r\n                        setDistContactDetails({...selectedContact, id: contactId})\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    bpLogger.error(getErrorMessage(err))\r\n                })\r\n                .finally(() => {\r\n                    setMergeFormPreparing(false)\r\n                })\r\n        },\r\n        [contactsStateMethods],\r\n    )\r\n\r\n    const search = useCallback(() => {\r\n        return contactsAreLoading || mergeFormPreparing ? [] : options\r\n    }, [contactsAreLoading, mergeFormPreparing, options])\r\n\r\n    return {\r\n        mergeFormPreparing,\r\n        distContactDetails,\r\n        searchQuery,\r\n        contactsAreLoading,\r\n        options,\r\n        methods: {\r\n            search,\r\n            handleSearchChange,\r\n            handleSelect,\r\n        },\r\n    }\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect} from 'react'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {contactDetailsToContactShortType} from '@bpinc/ad-contacts-state-methods'\r\nimport type {ContactDetailsType, ContactDetailsUnflatten, WithId} from '@bpinc/ad-contacts-state-types'\r\nimport {Dropdown, Loader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ContactPreview} from './ContactPreview'\r\nimport {MergeContactsForm} from './MergeContactsForm'\r\nimport {useSearchContactState} from './useSearchContactState'\r\n\r\n\r\nexport interface MergeContactsProps {\r\n    srcContactDetails: Partial<WithId<ContactDetailsType>>\r\n    onMerge?: (mergedContactDetails: WithId<ContactDetailsUnflatten>, srcContactDetails: Partial<WithId<ContactDetailsType>>) => void\r\n}\r\n\r\nexport const MergeContacts: FC<MergeContactsProps> = ({srcContactDetails, onMerge}) => {\r\n    const {t} = useLocalizationState()\r\n    const {getContactFormsDefinitions} = useContactsStateMethods()\r\n\r\n    useEffect(() => {\r\n        getContactFormsDefinitions({})\r\n    }, [getContactFormsDefinitions])\r\n\r\n    const {\r\n        distContactDetails,\r\n        searchQuery,\r\n        contactsAreLoading,\r\n        mergeFormPreparing,\r\n        options,\r\n        methods: {search, handleSearchChange, handleSelect},\r\n    } = useSearchContactState()\r\n\r\n    const contactId = srcContactDetails?.id || distContactDetails?.id\r\n\r\n    return (\r\n        <div className=\"flex-auto overflow-auto pt-[5px] \">\r\n            <Dropdown\r\n                fluid\r\n                search={search}\r\n                clearable\r\n                selection\r\n                searchQuery={searchQuery}\r\n                loading={contactsAreLoading}\r\n                placeholder={t.CONTACT.search_contact_to_merge()}\r\n                onSearchChange={handleSearchChange}\r\n                onChange={handleSelect}\r\n                options={options}\r\n                menuClassName=\"[&>:global(.visible.menu)]:!max-h-[calc(100vh-260px)] !max-h-[calc(100vh-260px)]\"\r\n            />\r\n\r\n            {!distContactDetails && (\r\n                <ContactPreview\r\n                    {...contactDetailsToContactShortType(srcContactDetails)}\r\n                    className=\"mt-4 text-left text-lg\"\r\n                />\r\n            )}\r\n\r\n            {contactId && srcContactDetails && distContactDetails && !mergeFormPreparing && (\r\n                <MergeContactsForm\r\n                    mergeFormPreparing={mergeFormPreparing}\r\n                    contactId={contactId}\r\n                    srcContactDetails={srcContactDetails}\r\n                    distContactDetails={distContactDetails}\r\n                    onMerge={onMerge}\r\n                />\r\n            )}\r\n\r\n            <Loader active={mergeFormPreparing} color=\"primary\" size=\"big\" />\r\n        </div>\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\nimport type {ContactsListMethods} from './components/DialpadContacts'\r\n\r\n\r\nexport const isPadOpenAtom = atom(false)\r\n\r\nexport const selectedItemIdAtom = atom<string | undefined>(undefined)\r\n\r\nexport const phoneInputAtom = atom<HTMLInputElement | null>(null)\r\n\r\nexport const contactsListMethodsAtom = atom<ContactsListMethods | null>(null)\r\n","import {useCallback} from 'react'\r\n\r\nimport {PHONE_NUMBER_VALID_SYMBOLS_REGEX} from '@bpinc/ad-regexp-constants'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport type {CategoryItem, ComposedContact, InternalContact} from '../hooks/useQueryContacts/useQueryContacts'\r\n\r\n\r\nexport function isInternalContact(\r\n    contact: ComposedContact,\r\n): contact is InternalContact {\r\n    return 'userId' in contact\r\n}\r\n\r\nexport function isCategoryItem(\r\n    contact: ComposedContact,\r\n): contact is CategoryItem {\r\n    return 'mediaType' in contact && 'title' in contact\r\n}\r\nexport function isInternalContactExtension(extension: string) {\r\n    return new RegExp(PHONE_NUMBER_VALID_SYMBOLS_REGEX).test(extension)\r\n}\r\nexport function useCheckSelfUser() {\r\n    const {userId: selfUserId} = useSessionState()\r\n    return useCallback((userId: string) => {\r\n        return selfUserId && userId === selfUserId\r\n    }, [selfUserId])\r\n}\r\n","import type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport type {SearchUserItem} from '@bpinc/ad-directory-state-types'\r\n\r\nimport type {CategoryItem, ComposedContact} from '../hooks/useQueryContacts/useQueryContacts'\r\nimport {isCategoryItem, isInternalContact} from './checkers'\r\n\r\n\r\nexport function getPhone(contact: ComposedContact, pattern?: string) {\r\n    const primaryPhone = isInternalContact(contact)\r\n        ? contact.extension\r\n        : isCategoryItem(contact)\r\n            ? contact.number\r\n            : contact.phone\r\n\r\n    if (pattern && primaryPhone && !primaryPhone.includes(pattern)) {\r\n        if (!isInternalContact(contact) && !isCategoryItem(contact)) {\r\n            const phone = (contact.phones || []).find(phoneItem => {\r\n                return phoneItem.includes(pattern)\r\n            })\r\n            if (phone) return phone\r\n        }\r\n    }\r\n\r\n    return primaryPhone\r\n}\r\nexport function getDisplayName(item: ContactShortType | SearchUserItem | CategoryItem) {\r\n    return isCategoryItem(item) ? item.title : item.firstName + item.lastName\r\n}\r\n","import {fromPairs} from 'lodash-es'\r\n\r\nimport {digitizePhone} from '@bpinc/ad-interaction-state-methods'\r\n\r\n\r\nexport * from './checkers'\r\nexport * from './getters'\r\n\r\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\nconst digits = '0123456789'\r\nconst allowedSpecialKeys = '+*#:,'\r\n\r\nconst letterByCode: Record<string, string> = fromPairs([\r\n    ...Array.from(alphabet).map(letter => [`Key${letter.toUpperCase()}`, letter]),\r\n    ...Array.from(digits).map(digit => [`Digit${digit}`, digit]),\r\n    ...Array.from(digits).map(digit => [`Numpad${digit}`, digit]),\r\n])\r\n\r\nexport const getLetter = (key: string, code: string): string | undefined => {\r\n    if (allowedSpecialKeys.indexOf(key) !== -1) {\r\n        return key\r\n    }\r\n    return letterByCode[code]\r\n}\r\n\r\nexport const sanitizePhone = (value: string): string => {\r\n    const splitParts = value.split(':')\r\n    const colonValue = splitParts.length > 1 ? splitParts[0] + ':' + splitParts.slice(1).join() : value\r\n    return digitizePhone((colonValue[0] === '+' ? '+' : '') + colonValue.replace(/[^\\d*#,:a-z|A-Z]/g, ''))\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {phoneNumberFormatter} from '@bpinc/lib-phonenumber-formatter'\r\nimport {ALL_COUNTRIES_ID, useCountrySelectorState} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nfunction usePhoneNumberFormatter() {\r\n    const countrySelectorValue = useCountrySelectorState('countrySelectorValue')\r\n\r\n    return useCallback(\r\n        (phone: string) => {\r\n            if (countrySelectorValue === ALL_COUNTRIES_ID) {\r\n                return {formattedNumber: phone}\r\n            }\r\n\r\n            const result = phoneNumberFormatter.format(phone, countrySelectorValue)\r\n            return {\r\n                formattedNumber: result.success\r\n                    ? removeLeadingPlus(result.formatted.E164)\r\n                    : phone,\r\n                meta: result,\r\n            }\r\n        },\r\n        [countrySelectorValue],\r\n    )\r\n}\r\n\r\nfunction removeLeadingPlus(phone?: string) {\r\n    if (!phone) {\r\n        return\r\n    }\r\n    return phone[0] === '+' ? phone.substring(1) : phone\r\n}\r\n\r\nexport {removeLeadingPlus, usePhoneNumberFormatter}\r\n","import {useMemo} from 'react'\r\n\r\nimport {digitizePhone} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {PhoneNumberUtilCountryCodeSource} from '@bpinc/lib-phonenumber-formatter'\r\n\r\nimport {usePhoneNumberFormatter} from './usePhoneNumberFormatter'\r\n\r\n\r\nexport function useFormatedPhone() {\r\n    const {searchValue} = useCommunicatorUIState('dialpad')\r\n    const formatPhoneNumber = usePhoneNumberFormatter()\r\n\r\n    return useMemo(() => {\r\n        const digitizedNumber = digitizePhone(searchValue)\r\n        const {\r\n            formattedNumber,\r\n            meta = {success: false, countryCodeSource: 0},\r\n        } = formatPhoneNumber(digitizedNumber)\r\n\r\n        return {\r\n            phoneNumber: formattedNumber,\r\n            isValidPhoneNumber: meta.success,\r\n            countryCodeSourceFromPrefix: meta.success ? meta.countryCodeSource === PhoneNumberUtilCountryCodeSource.FROM_DEFAULT_COUNTRY : true,\r\n        }\r\n    }, [searchValue, formatPhoneNumber])\r\n}\r\n","import {useMemo} from 'react'\r\nimport {partialRight} from 'lodash-es'\r\n\r\nimport {useDirectoryState, useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport type {SearchUserItem} from '@bpinc/ad-directory-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {isInternalContactExtension, useCheckSelfUser} from '../../helpers'\r\nimport type {InternalContact} from './useQueryContacts'\r\n\r\n\r\nexport function useInternalContacts(searchQuery?: string) {\r\n    const {privileges} = useSessionState()\r\n    const checkSelfUser = useCheckSelfUser()\r\n    const searchResults = useDirectoryState('searchResults')\r\n    const {findContacts} = useDirectoryStateMethods()\r\n\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n    const internalContacts: InternalContact[] = useMemo(\r\n        function memoizeInternalContacts() {\r\n            const internalContactsInner =\r\n                privilegesLoaded && privileges.CAN_VIEW_DIRECTORY\r\n                    ? searchResults['dialpad']?.data.users ?? []\r\n                    : []\r\n            if (searchQuery?.length && internalContactsInner.length) {\r\n                return internalContactsInner.filter(({extension, userId}: SearchUserItem) =>\r\n                    extension.includes(searchQuery) && !checkSelfUser(userId) && isInternalContactExtension(extension),\r\n                )\r\n            }\r\n            return internalContactsInner\r\n        },\r\n        [privileges.CAN_VIEW_DIRECTORY, privilegesLoaded, searchQuery, searchResults],\r\n    )\r\n\r\n\r\n    const getInternalContactsByQuery = useMemo(\r\n        function memoizeGetInternalContactsByQuery() {\r\n            return partialRight(findContacts, 'dialpad', 0)\r\n        },\r\n        [findContacts],\r\n    )\r\n\r\n    const internalContactsLoading = useMemo(function memoizeInternalContactsLoading() {\r\n        return searchResults['dialpad']?.isLoading ?? false\r\n    }, [searchResults])\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {internalContacts, getInternalContactsByQuery, internalContactsLoading}\r\n        },\r\n        [getInternalContactsByQuery, internalContacts, internalContactsLoading],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport type {DirectoryEntry, SearchUserItem} from '@bpinc/ad-directory-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {selectedItemIdAtom} from '../../atoms'\r\nimport {getDisplayName, isInternalContact} from '../../helpers'\r\nimport {useFormatedPhone} from '../useFormatedPhone'\r\nimport {useCategoryItems} from './useCategoryItems'\r\nimport {useContactsLoader} from './useContactsLoader'\r\nimport {useExternalContacts} from './useExternalContacts'\r\nimport {useInternalContacts} from './useInternalContacts'\r\n\r\n\r\ntype ExternalContact = ContactShortType\r\nexport type InternalContact = SearchUserItem\r\nexport type CategoryItem = DirectoryEntry\r\n\r\nexport type ComposedContact = ExternalContact | InternalContact | CategoryItem\r\n\r\ntype QueryContactsState = {\r\n    contacts: ComposedContact[]\r\n    isLoading: boolean\r\n}\r\n\r\nexport function useQueryContacts(): QueryContactsState {\r\n    const selectedItemId = useAtomValue(selectedItemIdAtom)\r\n    const skipSearch = !!useAtomValue(selectedItemIdAtom)\r\n    const {phoneNumber: searchQuery} = useFormatedPhone()\r\n\r\n    const {\r\n        internalContacts,\r\n        internalContactsLoading,\r\n        getInternalContactsByQuery,\r\n    } = useInternalContacts(searchQuery)\r\n    const {language} = useLocalizationState()\r\n\r\n    const {\r\n        externalContacts,\r\n        externalContactsLoading,\r\n        getExternalContactsByQuery,\r\n    } = useExternalContacts()\r\n\r\n    const categoryItems = useCategoryItems(searchQuery)\r\n\r\n    const isDebouncing = useContactsLoader({\r\n        searchQuery,\r\n        skipSearch,\r\n        getExternalContactsByQuery,\r\n        getInternalContactsByQuery,\r\n    })\r\n\r\n    const isLoading = internalContactsLoading || externalContactsLoading || isDebouncing\r\n\r\n    const allContacts = useMemo(() => {\r\n        const composedList = [...internalContacts, ...externalContacts, ...categoryItems]\r\n            .sort((item, nextItem) => {\r\n                return getDisplayName(item)\r\n                    .localeCompare(getDisplayName(nextItem), language, {sensitivity: 'base'})\r\n            })\r\n\r\n        return searchQuery\r\n            ? composedList\r\n            : []\r\n    }, [internalContacts, externalContacts, categoryItems, searchQuery, language])\r\n\r\n    const contacts = useMemo(() => {\r\n        if (!selectedItemId) {\r\n            return allContacts\r\n        }\r\n        return allContacts.filter((item: ComposedContact) => {\r\n            const itemId = isInternalContact(item) ? item.userId : item.id\r\n            return selectedItemId === itemId\r\n        })\r\n    }, [allContacts, selectedItemId])\r\n\r\n    return useMemo(() => ({\r\n        contacts,\r\n        isLoading,\r\n    }), [contacts, isLoading])\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\n\r\n\r\nexport function useExternalContacts() {\r\n    const {getContactList} = useContactsStateMethods()\r\n    const {\r\n        contactList: externalContacts,\r\n        contactListLoading: externalContactsLoading,\r\n    } = useContactsState(['contactListLoading', 'contactList'])\r\n\r\n    const getExternalContactsByQuery = useCallback(\r\n        function getExternalContactsByQueryCallback(searchQuery: string) {\r\n            return getContactList({query: `phone: ${searchQuery}*`})\r\n        },\r\n        [getContactList],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                externalContacts,\r\n                externalContactsLoading,\r\n                getExternalContactsByQuery,\r\n            }\r\n        },\r\n        [externalContacts, externalContactsLoading, getExternalContactsByQuery],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport type {DirectoryEntry} from '@bpinc/ad-directory-state-types'\r\n\r\n\r\nexport function useCategoryItems(searchQuery?: string) {\r\n    const categoryEntries = useDirectoryState('categoryEntries')\r\n\r\n    return useMemo(() => {\r\n        const categoryItemsInner: DirectoryEntry[] = []\r\n\r\n        Object.values(categoryEntries).map((list: DirectoryEntry[]) => {\r\n            list.forEach(item => {\r\n                if (!searchQuery || item.number?.includes(searchQuery)) {\r\n                    categoryItemsInner.push(item)\r\n                }\r\n            })\r\n        })\r\n\r\n        return categoryItemsInner\r\n    }, [categoryEntries, searchQuery])\r\n}\r\n","import {useEffect, useState} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\n\r\n\r\ninterface useContactsLoaderParams {\r\n    searchQuery?: string\r\n    skipSearch?: boolean\r\n\r\n    getExternalContactsByQuery(query: string): void\r\n    getInternalContactsByQuery(query: string): void\r\n}\r\n\r\nconst TYPING_TIMEOUT = 500\r\n\r\nexport function useContactsLoader({\r\n    searchQuery,\r\n    skipSearch,\r\n    getExternalContactsByQuery,\r\n    getInternalContactsByQuery,\r\n}: useContactsLoaderParams) {\r\n    const [isDebouncing, setIsDebouncing] = useState(false)\r\n    const {\r\n        activePage: {params: pageParams},\r\n    } = useNavigationState()\r\n\r\n    const prevPage = get(pageParams, 'prev')\r\n\r\n    useEffect(() => {\r\n        let typingTimeout: number\r\n        const getContacts = () => {\r\n            if (searchQuery) {\r\n                getInternalContactsByQuery(searchQuery)\r\n                getExternalContactsByQuery(searchQuery)\r\n            }\r\n\r\n            setIsDebouncing(false)\r\n        }\r\n\r\n        if (!skipSearch) {\r\n            if (prevPage === AppRoutes.ContactDetails) {\r\n                getContacts()\r\n            } else {\r\n                setIsDebouncing(true)\r\n                typingTimeout = setTimeout(getContacts, TYPING_TIMEOUT)\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            setIsDebouncing(false)\r\n            typingTimeout && clearTimeout(typingTimeout)\r\n        }\r\n    }, [\r\n        getExternalContactsByQuery,\r\n        getInternalContactsByQuery,\r\n        prevPage,\r\n        skipSearch,\r\n        searchQuery,\r\n        setIsDebouncing,\r\n    ])\r\n\r\n    return isDebouncing\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\nimport {useAtom, useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useErrorValidation} from '@bpinc/ad-error-hooks'\r\nimport {useIntegrationApiStateRef} from '@bpinc/ad-integration-api-state-context'\r\nimport {useActiveInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useActivityHistoryOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {digitizePhone} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {getInputCaretPos, setInputCaretPos} from '@bpinc/lib-input-utils'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isPadOpenAtom, phoneInputAtom, selectedItemIdAtom} from '../atoms'\r\nimport {isCategoryItem, isInternalContact, sanitizePhone} from '../helpers'\r\nimport {useQueryContacts} from './useQueryContacts/useQueryContacts'\r\nimport {usePhoneNumberFormatter} from './usePhoneNumberFormatter'\r\n\r\n\r\nlet scheduledSetInputCaretPos: {\r\n    input: HTMLInputElement\r\n    pos: number[]\r\n} | null = null\r\n\r\nexport type InitiateChatAndCallOptionalParams = {\r\n    userId?: string\r\n    contactId?: string\r\n    firstName?: string\r\n    lastName?: string\r\n}\r\n\r\nexport type DialpadHandlersType = ReturnType<typeof useHandlers>\r\n\r\nexport const useHandlers = () => {\r\n    const [isPadOpen, setIsPadOpen] = useAtom(isPadOpenAtom)\r\n    const setSelectedItemId = useSetAtom(selectedItemIdAtom)\r\n    const {contacts} = useQueryContacts()\r\n\r\n    const {searchValue, setSearchValue} = useCommunicatorUIState('dialpad')\r\n\r\n    const phoneInput = useAtomValue(phoneInputAtom)\r\n\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const interactionStateMethods = useInteractionStateMethods()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n    const integrationApiStateRef = useIntegrationApiStateRef()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {showNotification, hideNotificationsByTag} = useNotificationsState('methods')\r\n    const errorValidation = useErrorValidation()\r\n    const {t} = useLocalizationState()\r\n    const formatPhoneNumber = usePhoneNumberFormatter()\r\n    const localSettings = useLocalSettings()\r\n\r\n    const toggleDialpad = useCallback((open: boolean) => {\r\n        setIsPadOpen(open)\r\n    }, [setIsPadOpen])\r\n\r\n    const closeDialpad = useCallback(() => toggleDialpad(false), [toggleDialpad])\r\n    const openDialpad = useCallback(() => toggleDialpad(true), [toggleDialpad])\r\n\r\n    const errorMessages = useMemo(\r\n        () => ({\r\n            noNumber: t.DIAL_PAD.error_empty_number,\r\n        }),\r\n        [t],\r\n    )\r\n\r\n    const onInputValueChange = useCallback(\r\n        (value: string, id?: string) => {\r\n            setSelectedItemId(id)\r\n            hideNotificationsByTag('interaction-init')\r\n            if (!isPadOpen) {\r\n                openDialpad()\r\n            }\r\n            setSearchValue(value)\r\n        },\r\n        [setSelectedItemId, hideNotificationsByTag, isPadOpen, openDialpad, setSearchValue],\r\n    )\r\n\r\n    const firstContact = contacts[0]\r\n    const contactsLength = contacts.length\r\n\r\n    const initiateInteractionParams: InitiateChatAndCallOptionalParams = useMemo(\r\n        function memoizeFirstContactId() {\r\n            if (contactsLength !== 1) {\r\n                return {}\r\n            }\r\n            if (isCategoryItem(firstContact)) {\r\n                if (firstContact.number === searchValue) {\r\n                    return {userId: firstContact.id, firstName: firstContact.title}\r\n                } else {\r\n                    return {}\r\n                }\r\n            }\r\n            if (isInternalContact(firstContact)) {\r\n                if (firstContact.extension === searchValue) {\r\n                    return {\r\n                        userId: firstContact.userId,\r\n                        firstName: firstContact.firstName,\r\n                        lastName: firstContact.lastName,\r\n                    }\r\n                } else {\r\n                    return {}\r\n                }\r\n            }\r\n            if (firstContact.phone === searchValue) {\r\n                return {\r\n                    contactId: firstContact.id,\r\n                    firstName: firstContact.firstName,\r\n                    lastName: firstContact.lastName,\r\n                }\r\n            } else {\r\n                return {}\r\n            }\r\n        },\r\n        [contactsLength, firstContact, searchValue],\r\n    )\r\n\r\n    const updateCaretPosition = useCallback((value?: string) => {\r\n        if (value) {\r\n            if (phoneInput) {\r\n                const [start, end] = getInputCaretPos(phoneInput)\r\n                const newCaretPos = start + value.length\r\n\r\n                scheduledSetInputCaretPos = {\r\n                    input: phoneInput,\r\n                    pos: [newCaretPos, newCaretPos],\r\n                }\r\n\r\n                return {start, end}\r\n            }\r\n        } else {\r\n            return {start: 0, end: 0}\r\n        }\r\n    }, [phoneInput])\r\n\r\n    const setValueIntoCaretPosition = useCallback(\r\n        (value?: string) => {\r\n            if (!value) {\r\n                return false\r\n            }\r\n            if (!phoneInput) {\r\n                onInputValueChange(searchValue + value)\r\n                return true\r\n            }\r\n            const position = updateCaretPosition(value)\r\n\r\n            if (!position) {\r\n                return\r\n            }\r\n\r\n            const newValue = sanitizePhone(\r\n                searchValue.slice(0, position.start) + value + searchValue.slice(position.end),\r\n            )\r\n\r\n            onInputValueChange(newValue)\r\n\r\n            requestAnimationFrame(() => {\r\n                if (scheduledSetInputCaretPos) {\r\n                    setInputCaretPos(scheduledSetInputCaretPos.input, scheduledSetInputCaretPos.pos)\r\n                }\r\n            })\r\n\r\n            return searchValue !== newValue\r\n        },\r\n        [onInputValueChange, searchValue, updateCaretPosition, phoneInput],\r\n    )\r\n\r\n    const callId = useActiveInteractionProp(activeItem => activeItem?.callData?.callId)\r\n\r\n    const isDeliveredCall = useActiveInteractionProp(\r\n        activeItem => activeItem?.state === 'delivered' && activeItem?.mediaType === 'voice',\r\n    )\r\n\r\n    const onButtonClick = useCallback((value: string) => {\r\n        hideNotificationsByTag('interaction-init')\r\n        setValueIntoCaretPosition(value)\r\n\r\n        if (isDeliveredCall && callId) {\r\n            interactionStateMethods.sendDtmf({\r\n                dtmf: value.trim(),\r\n                callId,\r\n            })\r\n        }\r\n    }, [\r\n        callId,\r\n        hideNotificationsByTag,\r\n        interactionStateMethods,\r\n        isDeliveredCall,\r\n        setValueIntoCaretPosition,\r\n    ])\r\n\r\n    const initiateChatWith = useCallback(\r\n        function chatContactCallback(\r\n            phone: string,\r\n            origination: 'dialpad' | 'dialpad-search' | 'integration-api',\r\n            {contactId, userId, firstName, lastName}: InitiateChatAndCallOptionalParams = {},\r\n        ) {\r\n            hideNotificationsByTag('interaction-init')\r\n\r\n            const digitizedNumber = digitizePhone(phone)\r\n            const {formattedNumber} = formatPhoneNumber(digitizedNumber)\r\n\r\n            if (userId || digitizedNumber) {\r\n                openActivityHistory({\r\n                    contactId,\r\n                    userId,\r\n                    phone: formattedNumber,\r\n                    firstName,\r\n                    lastName,\r\n                    origination,\r\n                })\r\n                setSearchValue('')\r\n            }\r\n        },\r\n        [setSearchValue, hideNotificationsByTag, formatPhoneNumber, openActivityHistory],\r\n    )\r\n\r\n    const restoreLastDialedNumber = useCallback(\r\n        function restoreLastDialedNumberCallback() {\r\n            localSettings.get('adLastCalledNumber').then(phone => {\r\n                if (phone) {\r\n                    setSearchValue(phone)\r\n                }\r\n            })\r\n        },\r\n        [localSettings, setSearchValue],\r\n    )\r\n\r\n    const onChatClick = useCallback(() => {\r\n        if (searchValue) {\r\n            initiateChatWith(searchValue, 'dialpad', initiateInteractionParams)\r\n        } else {\r\n            restoreLastDialedNumber()\r\n        }\r\n    },\r\n    [searchValue, initiateChatWith, initiateInteractionParams, restoreLastDialedNumber])\r\n\r\n    const callNumber = useCallback(\r\n        function callNumberCallback(\r\n            number: string,\r\n            origination: 'dialpad' | 'dialpad-search' | 'integration-api',\r\n            initiateCallParams?: Omit<InitiateCall, 'phone' | 'origination'>,\r\n        ) {\r\n            const errors = [\r\n                ...errorValidation.getNumberErrors({\r\n                    number: searchValue || number,\r\n                    errorMessages,\r\n                }),\r\n                ...errorValidation.getServiceAndDIDNumbersErrors({\r\n                    skip: ['noChatInService'],\r\n                    interactionType: 'call',\r\n                }),\r\n            ]\r\n            if (errors.length) {\r\n                showNotification(errors[0])\r\n                return\r\n            }\r\n            hideNotificationsByTag('interaction-init')\r\n\r\n            if (number) {\r\n                const digitizedNumber = digitizePhone(number)\r\n                const {formattedNumber} = formatPhoneNumber(digitizedNumber)\r\n                assertDefined(formattedNumber)\r\n\r\n                const deferredDialData = integrationApiStateRef.current.deferredDialData\r\n                const associatedRecords =\r\n                    deferredDialData?.number === number && deferredDialData?.objects.length\r\n                        ? deferredDialData.objects\r\n                        : initiateCallParams?.associatedRecords\r\n\r\n                interactionStateMethods.initiateCall({\r\n                    ...initiateCallParams,\r\n                    phone: formattedNumber,\r\n                    serviceId: selectedService,\r\n                    accessNumberId: selectedDIDNumber,\r\n                    associatedRecords,\r\n                    origination,\r\n                })\r\n                setActivePage({name: AppRoutes.Interactions})\r\n                setSearchValue('')\r\n            }\r\n        },\r\n        [\r\n            errorValidation,\r\n            searchValue,\r\n            errorMessages,\r\n            formatPhoneNumber,\r\n            hideNotificationsByTag,\r\n            showNotification,\r\n            integrationApiStateRef,\r\n            interactionStateMethods,\r\n            selectedService,\r\n            selectedDIDNumber,\r\n            setActivePage,\r\n            setSearchValue,\r\n        ],\r\n    )\r\n\r\n\r\n    const onCallClick = useMemo(() => {\r\n        return () =>\r\n            searchValue\r\n                ? callNumber(searchValue, 'dialpad', initiateInteractionParams)\r\n                : restoreLastDialedNumber()\r\n    }, [callNumber, initiateInteractionParams, searchValue, restoreLastDialedNumber])\r\n\r\n    const onContactSelect = useCallback(\r\n        (params: {id: string; phone: string}) => {\r\n            const {id, phone} = params\r\n\r\n            openDialpad()\r\n            onInputValueChange(phone, id)\r\n\r\n            const newPos = phone.length\r\n            if (phoneInput) {\r\n                phoneInput.focus()\r\n                scheduledSetInputCaretPos = {input: phoneInput, pos: [newPos, newPos]}\r\n            }\r\n        },\r\n        [openDialpad, onInputValueChange, phoneInput],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                callNumber,\r\n                closeDialpad,\r\n                initiateChatWith,\r\n                onButtonClick,\r\n                onCallClick,\r\n                onChatClick,\r\n                onContactSelect,\r\n                onInputValueChange,\r\n                openDialpad,\r\n                updateCaretPosition,\r\n            }\r\n        },\r\n        [\r\n            callNumber,\r\n            closeDialpad,\r\n            initiateChatWith,\r\n            onButtonClick,\r\n            onCallClick,\r\n            onChatClick,\r\n            onContactSelect,\r\n            onInputValueChange,\r\n            openDialpad,\r\n            updateCaretPosition,\r\n        ],\r\n    )\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React from 'react'\r\n\r\n\r\ninterface KeyyPadButtonProps {\r\n    value: string | ReactElement\r\n    additionalValue?: string\r\n}\r\n\r\nexport const KeyPadButtonContent: React.FC<KeyyPadButtonProps> = ({\r\n    value,\r\n    additionalValue,\r\n}) => {\r\n    return (\r\n        <>\r\n            <p className=\"flex flex-col items-center justify-center text-[22px] leading-[26px]\">{value}</p>\r\n            {additionalValue !== undefined && (\r\n                <span className=\"h-3 text-[9px] uppercase tracking-[1.44px]\">\r\n                    {additionalValue}\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import type {KeyboardEvent, SyntheticEvent} from 'react'\r\nimport React, {useCallback, useEffect, useState} from 'react'\r\n\r\nimport type {ButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ninterface LongPressButtonProps extends ButtonProps {\r\n    className: string\r\n    onClick?: (e: SyntheticEvent) => void\r\n    onHold?: (e: SyntheticEvent) => void\r\n}\r\n\r\nconst LongPressButton: React.FC<LongPressButtonProps> = props => {\r\n    const {\r\n        onClick,\r\n        onHold,\r\n        children,\r\n        ...rest\r\n    } = props\r\n    const [timer, setTimer] = useState<number>()\r\n    const [keyPressed, setKeyPressed] = useState<boolean>(false)\r\n\r\n    useEffect(() => () => {\r\n        timer && clearTimeout(timer)\r\n    })\r\n\r\n    const onTimeIsUp = useCallback((e: SyntheticEvent) => {\r\n        setTimer(undefined)\r\n        onHold && onHold(e)\r\n    }, [onHold])\r\n\r\n    const start = useCallback((e: SyntheticEvent) => {\r\n        const timerId = setTimeout(() => onTimeIsUp(e), 1000)\r\n        setTimer(timerId)\r\n    }, [onTimeIsUp])\r\n\r\n    const stop = useCallback((e: SyntheticEvent) => {\r\n        if (timer) {\r\n            clearTimeout(timer)\r\n            setTimer(undefined)\r\n            onClick && onClick(e)\r\n        }\r\n    }, [onClick, timer])\r\n\r\n\r\n    const onEnterOrSpacePress = useCallback(\r\n        (e: KeyboardEvent, handler: (e: SyntheticEvent) => void, isKeyDown?: boolean) => {\r\n            //-- Prevent auto repeating event -- start --//\r\n            if (isKeyDown) {\r\n                if (keyPressed) return\r\n                setKeyPressed(true)\r\n            } else {\r\n                setKeyPressed(false)\r\n            }\r\n            //-- Prevent auto repeating event -- end --//\r\n\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault()\r\n                handler(e)\r\n            }\r\n        },\r\n        [keyPressed],\r\n    )\r\n\r\n    const startByKey = useCallback(\r\n        (e: KeyboardEvent) => onEnterOrSpacePress(e, start, true),\r\n        [onEnterOrSpacePress, start],\r\n    )\r\n    const stopByKey = useCallback(\r\n        (e: KeyboardEvent) => onEnterOrSpacePress(e, stop),\r\n        [onEnterOrSpacePress, stop],\r\n    )\r\n\r\n    return (\r\n        <Button\r\n            onMouseDown={start}\r\n            onMouseUp={stop}\r\n            onTouchStart={start}\r\n            onTouchEnd={stop}\r\n            onKeyDownCapture={startByKey}\r\n            onKeyUp={stopByKey}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport {LongPressButton}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {KeyPadButtonContent} from './KeyPadButtonContent'\r\nimport {LongPressButton} from './LongPressButton'\r\nimport {useLetterBasedDialing} from './useLetterBasedDialing'\r\n\r\n\r\ntype ButtonsMatrix = {\r\n    value: string\r\n    additionalValue?: string\r\n    label?: ReactElement\r\n    holdAction?: boolean\r\n}[][]\r\n\r\nexport interface KeypadProps {\r\n    handleButtonClick: (value: string) => () => void\r\n    allowLetterBasedDialing?: boolean\r\n}\r\n\r\nconst keyCode = (key: string) => {\r\n    if (key === '*') {\r\n        return 'asterisk'\r\n    }\r\n    if (key === '#') {\r\n        return 'hashtag'\r\n    }\r\n    return key\r\n}\r\n\r\n\r\nexport const KeyPad: React.FC<KeypadProps> = ({\r\n    handleButtonClick,\r\n    allowLetterBasedDialing = true,\r\n}) => {\r\n    useLetterBasedDialing({handleButtonClick, allowLetterBasedDialing})\r\n\r\n    const {t} = useLocalizationState()\r\n    const buttons: ButtonsMatrix = useMemo(\r\n        () => [\r\n            [\r\n                {value: '1', additionalValue: ''},\r\n                {value: '2', additionalValue: t.DIAL_PAD.letter2()},\r\n                {value: '3', additionalValue: t.DIAL_PAD.letter3()},\r\n            ],\r\n            [\r\n                {value: '4', additionalValue: t.DIAL_PAD.letter4()},\r\n                {value: '5', additionalValue: t.DIAL_PAD.letter5()},\r\n                {value: '6', additionalValue: t.DIAL_PAD.letter6()},\r\n            ],\r\n            [\r\n                {value: '7', additionalValue: t.DIAL_PAD.letter7()},\r\n                {value: '8', additionalValue: t.DIAL_PAD.letter8()},\r\n                {value: '9', additionalValue: t.DIAL_PAD.letter9()},\r\n            ],\r\n            [\r\n                {\r\n                    value: '*',\r\n                    label: <span className=\"h-3.5 text-[25px]\">*</span>,\r\n                },\r\n                {value: '0', holdAction: true, additionalValue: '+'},\r\n                {\r\n                    value: '#',\r\n                    label: <span className=\"text-xl\">#</span>,\r\n                },\r\n            ],\r\n        ],\r\n        [t],\r\n    )\r\n\r\n    const dialpadButtonClassName = tcn(\r\n        'flex h-full w-full flex-col items-center justify-center',\r\n        'rounded-full',\r\n        'font-noto text-neutral-on-secondary',\r\n        'transition-colors state-layer-bg-neutral-50',\r\n        'hover:state-layer-mix-dark-on-white-1',\r\n        'focus:state-layer-mix-dark-on-white-2',\r\n        'active:state-layer-mix-dark-on-white-3',\r\n    )\r\n\r\n    return (\r\n        <div className=\"grid gap-2.5\">\r\n            {buttons.map((row, index) => (\r\n                <div key={index} className=\"flex items-center gap-[11px]\">\r\n                    {row.map(item => (\r\n                        <div key={item.value} className={tcn('flex h-[55px] w-[55px] items-center justify-center')}>\r\n                            {item.holdAction && item.additionalValue ? (\r\n                                <LongPressButton\r\n                                    className={dialpadButtonClassName}\r\n                                    onClick={handleButtonClick(item.value)}\r\n                                    onHold={handleButtonClick(item.additionalValue)}\r\n                                    data-testid={`keypad-${keyCode(item.value)}-button`}\r\n                                >\r\n                                    <KeyPadButtonContent\r\n                                        value={item.label || item.value}\r\n                                        additionalValue={item.additionalValue}\r\n                                    />\r\n                                </LongPressButton>\r\n                            ) : (\r\n                                <Button\r\n                                    className={dialpadButtonClassName}\r\n                                    onClick={handleButtonClick(item.value)}\r\n                                    data-testid={`keypad-${keyCode(item.value)}-button`}\r\n                                >\r\n                                    <KeyPadButtonContent\r\n                                        value={item.label || item.value}\r\n                                        additionalValue={item.additionalValue}\r\n                                    />\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {isSelectOrTextField} from '@bpinc/lib-helpers'\r\n\r\nimport {getLetter} from '../helpers'\r\nimport type {KeypadProps} from './KeyPad'\r\n\r\n\r\nexport function useLetterBasedDialing({allowLetterBasedDialing = true, handleButtonClick}: KeypadProps) {\r\n    useEffect(() => {\r\n        if (allowLetterBasedDialing) {\r\n            document.addEventListener('keydown', onKeyPress)\r\n        }\r\n\r\n        return function unsubscribeOnKeyPress() {\r\n            if (allowLetterBasedDialing) {\r\n                document.removeEventListener('keydown', onKeyPress)\r\n            }\r\n        }\r\n\r\n        function onKeyPress(evt: KeyboardEvent) {\r\n            if (!isSelectOrTextField(document.activeElement) && !evt.altKey && !evt.ctrlKey) {\r\n                const letter = getLetter(evt.key, evt.code) || ''\r\n                if (/^[/d*#+:a-z|A-Z]$/.test(letter)) {\r\n                    setTimeout(handleButtonClick(letter), 0)\r\n                }\r\n            }\r\n        }\r\n    }, [allowLetterBasedDialing, handleButtonClick])\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {IconDialpad} from '@bpinc/lib-icons'\r\nimport {IconArrowDown24, IconArrowUp24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {isPadOpenAtom, phoneInputAtom} from '../atoms'\r\nimport {useHandlers} from '../hooks/useHandlers'\r\nimport {KeyPad} from './KeyPad'\r\n\r\n\r\nexport const DialpadButtons: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const isPadOpen = useAtomValue(isPadOpenAtom)\r\n    const phoneInput = useAtomValue(phoneInputAtom)\r\n\r\n    const {\r\n        onButtonClick,\r\n        closeDialpad,\r\n        openDialpad,\r\n    } = useHandlers()\r\n\r\n    const handleWheel = useCallback((e: React.WheelEvent) => {\r\n        // scroll down\r\n        e.deltaY < -10 && closeDialpad()\r\n    }, [closeDialpad])\r\n    const handleButtonClick = useCallback((value: string) => {\r\n        return () => {\r\n            onButtonClick(value)\r\n            phoneInput?.focus()\r\n        }\r\n    }, [onButtonClick, phoneInput])\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'absolute inset-x-0 bottom-0 overflow-hidden',\r\n                'flex flex-col',\r\n                'border-t bg-white',\r\n                'transition-all duration-300',\r\n                {\r\n                    'h-[calc(100%-105px)]': isPadOpen,\r\n                    'h-14': !isPadOpen,\r\n                },\r\n            )}\r\n        >\r\n            <div className=\"flex w-full items-center justify-between px-6 py-3\">\r\n                <div className=\"flex items-center gap-1\">\r\n                    <IconDialpad />\r\n\r\n                    <div className=\"uppercase tracking-[0.8px] caption-xs text-neutral-disabled\">\r\n                        {t.DIAL_PAD.dialpad()}\r\n                    </div>\r\n                </div>\r\n\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    icon={isPadOpen ? <IconArrowDown24 /> : <IconArrowUp24 />}\r\n                    onClick={isPadOpen ? closeDialpad : openDialpad}\r\n                    aria-label={t.DIAL_PAD.hide_controls_label()}\r\n                    data-testid=\"collapse-keypad\"\r\n                />\r\n            </div>\r\n\r\n            {isPadOpen && (\r\n                <div\r\n                    className=\"relative flex flex-1 items-center justify-center py-4\"\r\n                    onWheel={handleWheel}\r\n                >\r\n                    <KeyPad handleButtonClick={handleButtonClick} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useMemo, useState} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\nimport {merge} from 'lodash-es'\r\n\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useInteractionChatState} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {emptyDirectoryUIState, useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SmForm} from '@bpinc/lib-external-ui-elements'\r\nimport {useEmailValidationRules, usePauseSymbolsValidation, usePhoneValidationRules} from '@bpinc/lib-forms-base'\r\nimport {MessengerFieldBase, TextField} from '@bpinc/lib-forms-ui'\r\nimport {usePersistedFormValues} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {Loader, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {EditingContactDetailsHeader} from '../../../contact-details'\r\n\r\n\r\nexport const CreateContactForm: FC = () => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const {t} = useLocalizationState()\r\n    const {renderWithOptionalPostfix} = useFormatting()\r\n    const {toggleCreateContactMode, setCreateContactFormValues, createContactFormValues} = useDirectoryUIState()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {createContact} = useContactsStateMethods()\r\n    const form = useForm({\r\n        defaultValues: createContactFormValues,\r\n        reValidateMode: 'onBlur',\r\n    })\r\n    const {control, handleSubmit, getValues} = form\r\n    const emailValidationRules = useEmailValidationRules()\r\n    const phoneValidationRules = usePhoneValidationRules()\r\n    const pauseSymbolsValidationRules = usePauseSymbolsValidation()\r\n    const phoneRules = useMemo(() => merge(phoneValidationRules, pauseSymbolsValidationRules), [phoneValidationRules, pauseSymbolsValidationRules])\r\n\r\n\r\n    const {controlledUnmountRef} = usePersistedFormValues({\r\n        clearPersistedValues: () => setCreateContactFormValues(emptyDirectoryUIState.createContactFormValues),\r\n        setPersistedValues: () => setCreateContactFormValues(getValues()),\r\n    })\r\n\r\n    const onSubmit = useMemo(\r\n        function onSubmitCallback() {\r\n            return handleSubmit(function onSuccess(data) {\r\n                setIsLoading(true)\r\n                createContact(\r\n                    {\r\n                        contact: {\r\n                            first_name: data.firstName,\r\n                            last_name: data.lastName,\r\n                            ...(data.email ? {emails: [{type: 'PRIMARY', email_address: data.email}]} : {}),\r\n                            ...(data.phone ? {phones: [{type: 'BUSINESS', phone: data.phone}]} : {}),\r\n                            ...(data.messenger?.type && data.messenger?.user_id ? {messengers: [\r\n                                {\r\n                                    type: data.messenger.type,\r\n                                    user_id: data.messenger.user_id,\r\n                                    user_name: data.messenger.user_name,\r\n                                    account_id: data.messenger.account_id,\r\n                                },\r\n                            ]} : {}),\r\n                        },\r\n                    },\r\n                    {\r\n                        onSuccess(contactId: string) {\r\n                            controlledUnmountRef.current = true\r\n                            setIsLoading(false)\r\n                            toggleCreateContactMode()\r\n                            setActivePage({name: AppRoutes.ContactDetails, params: {contactId}})\r\n                        },\r\n                        onError() {\r\n                            setIsLoading(false)\r\n                            showNotification({\r\n                                type: 'error',\r\n                                id: Notifications.ContactCreationError,\r\n                                tags: ['current-view'],\r\n                                message: t.VALIDATION.CONTACT_CREATION_ERROR(),\r\n                                duration: 10_000,\r\n                            })\r\n                        },\r\n                    },\r\n                )\r\n            })\r\n        },\r\n        [\r\n            controlledUnmountRef,\r\n            createContact,\r\n            handleSubmit,\r\n            setActivePage,\r\n            showNotification,\r\n            t.VALIDATION,\r\n            toggleCreateContactMode,\r\n        ],\r\n    )\r\n\r\n    const goBack = useCallback(\r\n        function goBackCallback() {\r\n            controlledUnmountRef.current = true\r\n            toggleCreateContactMode()\r\n        },\r\n        [controlledUnmountRef, toggleCreateContactMode],\r\n    )\r\n\r\n    const availableMessengers = useInteractionChatState('messengers')\r\n    return (\r\n        <>\r\n            <EditingContactDetailsHeader onGoBack={goBack} />\r\n            <SmForm className=\"overflow-y-auto overflow-x-hidden rounded pb-2 pr-3.5 pt-[21px]\">\r\n                <TextField\r\n                    name=\"firstName\"\r\n                    autoFocus\r\n                    control={control}\r\n                    label={renderWithOptionalPostfix(t.UNDEFINED.contact_first_name())}\r\n                    placeholder={t.UNDEFINED.contact_first_name()}\r\n                />\r\n                <TextField\r\n                    name=\"lastName\"\r\n                    control={control}\r\n                    required\r\n                    label={t.UNDEFINED.contact_last_name()}\r\n                    placeholder={t.UNDEFINED.contact_last_name()}\r\n                />\r\n                <TextField\r\n                    name=\"phone\"\r\n                    className=\"w-1/2\"\r\n                    control={control}\r\n                    label={renderWithOptionalPostfix(t.UNDEFINED.contact_phone())}\r\n                    placeholder={t.UNDEFINED.contact_phone()}\r\n                    rules={phoneRules}\r\n                />\r\n                <TextField\r\n                    name=\"email\"\r\n                    control={control}\r\n                    className=\"w-1/2\"\r\n                    label={renderWithOptionalPostfix(t.UNDEFINED.contact_email())}\r\n                    placeholder={t.UNDEFINED.contact_email()}\r\n                    rules={emailValidationRules}\r\n                />\r\n                <MessengerFieldBase\r\n                    withoutPadding\r\n                    control={control}\r\n                    label={t.UNDEFINED.contact_messenger()}\r\n                    availableMessengers={availableMessengers}\r\n                    className=\"first:!px-0\"\r\n                    accountIdFieldName=\"messenger.account_id\"\r\n                    typeFiledName=\"messenger.type\"\r\n                    userIdFieldName=\"messenger.user_id\"\r\n                    userNameFieldName=\"messenger.user_name\"\r\n                />\r\n                <SemanticButton basic size=\"mini\" onClick={onSubmit}>\r\n                    {t.CONTACT.create_contact()}\r\n                </SemanticButton>\r\n                {/* TODO: Add open in CRM functionality when design is ready */}\r\n                <SemanticButton basic size=\"mini\" onClick={onSubmit}>\r\n                    {t.CONTACT.create_and_open_in_crm()}\r\n                </SemanticButton>\r\n            </SmForm>\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n            {isLoading && <Loader active color=\"primary\" size=\"big\" className=\"pr-3.5\" />}\r\n        </>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {getDirectoryItemUniqueId} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nexport function useDirectoryFirstFoundItemAutoSelector(list: DirectoryItem[]) {\r\n    const {setFirstFoundItemId} = useDirectoryUIState()\r\n\r\n    useEffect(() => {\r\n        setFirstFoundItemId(getDirectoryItemUniqueId(list[0]))\r\n    }, [list, setFirstFoundItemId])\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useDirectorySearch(\r\n    query: string | undefined,\r\n    searchFunction: (query: string) => void,\r\n    debounceTimeout?: number,\r\n) {\r\n    const [isDebounceProcessing, setIsDebounceProcessing] = useState(false)\r\n\r\n    const searchEvent = useEvent(searchFunction)\r\n\r\n    useEffect(() => {\r\n        let timeout: number\r\n\r\n        if (query) {\r\n            if (debounceTimeout) {\r\n                setIsDebounceProcessing(true)\r\n                timeout = setTimeout(() => {\r\n                    searchEvent(query)\r\n                    setIsDebounceProcessing(false)\r\n                }, debounceTimeout)\r\n            } else {\r\n                searchEvent(query)\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (timeout) {\r\n                setIsDebounceProcessing(false)\r\n                clearTimeout(timeout)\r\n            }\r\n        }\r\n    }, [query, debounceTimeout, searchEvent])\r\n\r\n    return isDebounceProcessing\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useServiceDetailsState} from '@bpinc/ad-service-details-state-context'\r\n\r\n\r\nexport function useDirectoryEntryOnlineStatus(serviceId: string | undefined, huntGroupId: string | undefined) {\r\n    const {serviceDetails, huntGroupsDetails} = useServiceDetailsState()\r\n    const details = serviceId && serviceDetails[serviceId]\r\n    const huntGroupDetails = huntGroupId ? huntGroupsDetails[huntGroupId] : undefined\r\n\r\n    return useMemo(\r\n        function memoizeStaticEntryOnlineStatus() {\r\n            if (details) {\r\n                if (Number(details.agentsReady)) {\r\n                    return 'readyService'\r\n                } else if (Number(details.agentsLogged)) {\r\n                    return 'notReadyService'\r\n                } else {\r\n                    return 'loggedOut'\r\n                }\r\n            }\r\n            if (huntGroupDetails) {\r\n                if (huntGroupDetails.agentsLogged) {\r\n                    return 'readyService'\r\n                } else if (huntGroupDetails.phonesRegistered) {\r\n                    return 'notReadyService'\r\n                } else {\r\n                    return 'loggedOut'\r\n                }\r\n            }\r\n        },\r\n        [details, huntGroupDetails],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {DirectoryEntry} from '@bpinc/ad-directory-state-types'\r\nimport {\r\n    isHuntGroupEntry,\r\n    isScenarioVoiceEntry,\r\n    isStaticEmailEntry,\r\n    isStaticVoiceEntry,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {IconEmail16, IconPhone16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {highlighted} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype Props = {\r\n    item: DirectoryEntry\r\n    highlight?: string\r\n}\r\n\r\nexport const DirectoryEntryBody: React.FC<Props> = ({item, highlight}) => {\r\n\r\n    if (isScenarioVoiceEntry(item) || isStaticVoiceEntry(item) || isHuntGroupEntry(item)) {\r\n        const phone = formatPhone(item.number)\r\n\r\n        return (\r\n            <span className=\"flex items-center gap-1\">\r\n                <IconPhone16Filled className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n                <span data-testid=\"phone\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                    {highlighted({highlight, text: phone})}\r\n                </span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    if (isStaticEmailEntry(item)) {\r\n        return (\r\n            <span className=\"flex items-center gap-1\">\r\n                <IconEmail16 className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n                <span data-testid=\"email\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                    {highlighted({highlight, text: item.email})}\r\n                </span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n","import React from 'react'\r\n\r\nimport type {DirectoryEntry} from '@bpinc/ad-directory-state-types'\r\nimport {isStaticEmailEntry, isStaticVoiceEntry} from '@bpinc/ad-directory-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {\r\n    ButtonIcon,\r\n    IconEmail16,\r\n    IconInformation,\r\n    IconPhone16Filled,\r\n    IconRoundChat16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {OnChatParams, OnEmailParams} from '../types'\r\n\r\n\r\ntype Props = {\r\n    item: DirectoryEntry\r\n    transferMode?: 'messages' | 'calls'\r\n    onCall?: (callParams: InitiateCall) => void\r\n    onChat?: (chatParams: OnChatParams) => void\r\n    onEmail?: (chatParams: OnEmailParams) => void\r\n    onDetails?: (params: OpenContactDetailsParams) => void\r\n}\r\n\r\nexport const DirectoryEntryControls: React.FC<Props> = ({\r\n    item,\r\n    transferMode,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n\r\n    const [firstName, lastName] = getNamesFromDisplayName(item.title)\r\n\r\n    const showCallButton =\r\n        transferMode !== 'calls' &&\r\n        phoneDeviceCapabilities.canDial &&\r\n        item.mediaType === 'voice' &&\r\n        !!onCall &&\r\n        !!item.number\r\n\r\n    const showChatButton =\r\n        transferMode !== 'messages' &&\r\n        isStaticVoiceEntry(item) &&\r\n        !!onChat &&\r\n        !!item.number\r\n\r\n    const showEmailButton = isStaticEmailEntry(item) && !!onEmail && !!item.email\r\n\r\n    const handleCall = useEvent(() => {\r\n        assertDefined(onCall)\r\n        assertDefined(item.number)\r\n\r\n        onCall({\r\n            phone: item.number,\r\n            userId: item.id,\r\n            firstName,\r\n            lastName,\r\n            serviceId: item.serviceId,\r\n            origination: 'directory',\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent(() => {\r\n        assertDefined(onChat)\r\n        assertDefined(item.number)\r\n\r\n        onChat({\r\n            phone: item.number,\r\n            userId: item.id,\r\n            firstName,\r\n            lastName,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent(() => {\r\n        assertDefined(onEmail)\r\n        assertDefined(item.email)\r\n        onEmail({emailAddress: item.email})\r\n    })\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetails?.({entryId: item.id})\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex gap-0.5\">\r\n            {showCallButton && (\r\n                <ButtonIcon\r\n                    onClick={handleCall}\r\n                    tooltip={i18n.button_start_call_text()}\r\n                    data-testid=\"call-button\"\r\n                >\r\n                    <IconPhone16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            {showChatButton && (\r\n                <ButtonIcon\r\n                    onClick={handleChat}\r\n                    tooltip={i18n.button_initiate_chat_text()}\r\n                    data-testid=\"chat-button\"\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            {showEmailButton && (\r\n                <ButtonIcon\r\n                    onClick={handleEmail}\r\n                    tooltip={i18n.button_send_email_text()}\r\n                    data-testid=\"email-button\"\r\n                >\r\n                    <IconEmail16 />\r\n                </ButtonIcon>\r\n            )}\r\n            <ButtonIcon\r\n                tooltip={i18n.button_show_contact_details_text()}\r\n                data-testid=\"user-info-button\"\r\n                onPressed={handleDetails}\r\n            >\r\n                <IconInformation />\r\n            </ButtonIcon>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {HuntGroupDetails} from '@bpinc/ad-service-details-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    metrics: HuntGroupDetails\r\n}\r\n\r\nexport const HuntGroupMetrics: React.FC<Props> = ({metrics}) => {\r\n\r\n    const {DIRECTORY: i18n} = useLocalizationState('t')\r\n\r\n    function getDisplayMetrics(): string[] {\r\n        if (metrics.agentsLogged !== undefined && metrics.phonesRegistered !== undefined) {\r\n            return [\r\n                i18n.logged_in(metrics.agentsLogged),\r\n                i18n.phones_registered(metrics.phonesRegistered),\r\n            ]\r\n        }\r\n        if (metrics.agentsLogged !== undefined) {\r\n            return [i18n.logged_in(metrics.agentsLogged)]\r\n        }\r\n        if (metrics.phonesRegistered !== undefined) {\r\n            return [i18n.phones_registered(metrics.phonesRegistered)]\r\n        }\r\n        return []\r\n    }\r\n\r\n    const displayMetrics = getDisplayMetrics()\r\n\r\n    return (\r\n        <div\r\n            data-testid=\"rt-metrics\"\r\n            className=\"flex flex-col overflow-hidden caption-s text-neutral-fade\"\r\n        >\r\n            {displayMetrics.map((metric => (\r\n                <span key={metric}>{metric}</span>\r\n            )))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport type {ServiceDetails} from '@bpinc/ad-service-details-state-types'\r\nimport {toHHMMSS, useEvent} from '@bpinc/lib-helpers'\r\nimport {isDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    metrics: ServiceDetails\r\n}\r\n\r\nexport const ServiceMetrics: React.FC<Props> = ({metrics}) => {\r\n\r\n    const {DIRECTORY: i18n} = useLocalizationState('t')\r\n    const {primaryMetric, secondaryMetric} = useAppConfigState(['primaryMetric', 'secondaryMetric'])\r\n\r\n    const getDisplayMetrics = useEvent((): string[] => {\r\n        return [primaryMetric, secondaryMetric]\r\n            .map(serverMetricName => {\r\n                switch (serverMetricName) {\r\n                    case 'in_calls_waiting': {\r\n                        const value = Number(metrics.inCallsWaiting)\r\n                        return i18n.waiting(value)\r\n                    }\r\n                    case 'in_max_wait_time': {\r\n                        const seconds = Number(metrics.inMaxWaitTime)\r\n                        const value = toHHMMSS(seconds)\r\n                        return i18n.max_wait(value)\r\n                    }\r\n                    case 'in_ewt': {\r\n                        const seconds = Number(metrics.inEwt)\r\n                        const value = toHHMMSS(seconds)\r\n                        return i18n.ewt(value)\r\n                    }\r\n                    case 'service_level': {\r\n                        const value = Number(metrics.serviceLevel)\r\n                        return i18n.svc_level(value)\r\n                    }\r\n                    case 'agents_ready': {\r\n                        const value = Number(metrics.agentsReady)\r\n                        return i18n.ready(value)\r\n                    }\r\n                    case 'agents_logged': {\r\n                        const value = Number(metrics.agentsLogged)\r\n                        return i18n.logged_in(value)\r\n                    }\r\n                }\r\n            })\r\n            .filter(isDefined)\r\n    })\r\n\r\n    const displayMetrics = getDisplayMetrics()\r\n\r\n    return (\r\n        <div\r\n            data-testid=\"rt-metrics\"\r\n            className=\"flex flex-col overflow-hidden caption-s text-neutral-fade\"\r\n        >\r\n            {displayMetrics.map((metric => (\r\n                <span key={metric} className=\"truncate\">{metric}</span>\r\n            )))}\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport type {DirectoryEntry} from '@bpinc/ad-directory-state-types'\r\nimport {useServiceDetailsState} from '@bpinc/ad-service-details-state-context'\r\n\r\nimport {HuntGroupMetrics} from './HuntGroupMetrics'\r\nimport {ServiceMetrics} from './ServiceMetrics'\r\n\r\n\r\ntype Props = {\r\n    item: DirectoryEntry\r\n}\r\n\r\nexport const DirectoryEntryMetrics: React.FC<Props> = ({item}) => {\r\n\r\n    const {huntGroupsDetails, serviceDetails} = useServiceDetailsState()\r\n\r\n    const huntGroupMetrics = item.huntGroupId ? huntGroupsDetails[item.huntGroupId] : undefined\r\n    const serviceMetrics = item.serviceId ? serviceDetails[item.serviceId] : undefined\r\n\r\n    if (huntGroupMetrics) {\r\n        return <HuntGroupMetrics metrics={huntGroupMetrics} />\r\n    }\r\n    if (serviceMetrics) {\r\n        return <ServiceMetrics metrics={serviceMetrics} />\r\n    }\r\n    return null\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {DirectoryEntry as DirectoryEntryType} from '@bpinc/ad-directory-state-types'\r\nimport {isHuntGroupEntry, isStaticEmailEntry, isStaticVoiceEntry} from '@bpinc/ad-directory-state-types'\r\nimport type {LegacyAvatarType} from '@bpinc/lib-avatar-ui'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {DirectoryFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {highlighted, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useDirectoryEntryOnlineStatus} from '../../../hooks/useDirectoryEntryOnlineStatus'\r\nimport type {InternalCategoryUserProps} from '../types'\r\nimport {DirectoryEntryBody} from './DirectoryEntryBody'\r\nimport {DirectoryEntryControls} from './DirectoryEntryControls'\r\nimport {DirectoryEntryMetrics} from './DirectoryEntryMetrics'\r\n\r\n\r\nfunction getAvatarType(item: DirectoryEntryType): LegacyAvatarType {\r\n    if (isHuntGroupEntry(item)) {\r\n        return 'hunt-group'\r\n    } else if (isStaticVoiceEntry(item) || isStaticEmailEntry(item)) {\r\n        return 'static-entry'\r\n    } else {\r\n        return 'scenario-entry'\r\n    }\r\n}\r\n\r\nexport const DirectoryEntry: React.FC<InternalCategoryUserProps> = ({\r\n    transferMode,\r\n    transferNumberInput,\r\n    transferControlsStyle,\r\n    item,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    highlight,\r\n    onClick,\r\n    onDoubleClick,\r\n    showFavoriteButton = true,\r\n    ...other\r\n}) => {\r\n\r\n    const onlineStatus = useDirectoryEntryOnlineStatus(item.serviceId, item.huntGroupId)\r\n    const avatarType = getAvatarType(item)\r\n\r\n    const avatar = useMemo<PropsAvatar>(() => ({\r\n        fullName: item.title,\r\n        avatarType,\r\n        isAgent: true,\r\n        onlineStatusIcon: onlineStatus,\r\n    }), [avatarType, item.title, onlineStatus])\r\n\r\n    const title = useMemo(() => {\r\n        return (\r\n            <span className=\"flex gap-1\">\r\n                <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                    {highlighted({highlight, text: item.title})}\r\n                </b>\r\n                {showFavoriteButton && (\r\n                    <DirectoryFavoriteButton forContactListItem item={item} />\r\n                )}\r\n            </span>\r\n        )\r\n    }, [highlight, showFavoriteButton, item])\r\n\r\n    const body = <DirectoryEntryBody item={item} highlight={highlight} />\r\n\r\n    const stats = <DirectoryEntryMetrics item={item} />\r\n\r\n    const controls = (\r\n        <DirectoryEntryControls\r\n            item={item}\r\n            transferMode={transferMode}\r\n            onCall={onCall}\r\n            onChat={onChat}\r\n            onEmail={onEmail}\r\n            onDetails={onDetails}\r\n        />\r\n    )\r\n\r\n    const handleCall = useEvent((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        assertDefined(item.number)\r\n\r\n        onCall?.({\r\n            phone: item.number,\r\n            userId: item.id,\r\n            firstName: item.title,\r\n            origination: 'directory',\r\n        })\r\n    })\r\n\r\n    const handleClick = useEvent((evt: React.MouseEvent) => {\r\n        onClick?.(evt, item)\r\n    })\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick?.(item)\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            keyHandlerElement=\"directory-item\"\r\n            transferMode={transferMode}\r\n            transferNumberInput={transferNumberInput}\r\n            transferControlsStyle={transferControlsStyle}\r\n            userId={item.id}\r\n            number={item.number}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            body={body}\r\n            stats={stats}\r\n            controls={controls}\r\n            onClick={onClick ? handleClick : handleCall}\r\n            onDoubleClick={onDoubleClick && handleDoubleClick}\r\n            isStaticEntry\r\n            containerProps={{\r\n                focusOnSelection: true,\r\n                itemId: item.id,\r\n                tabIndex: 0,\r\n                'data-testid': 'directory-item',\r\n                'data-entry-point': 'true',\r\n            }}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {IconEmail16, IconPhone16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {highlighted} from '@bpinc/lib-ui-elements'\r\n\r\n\r\ntype Props = {\r\n    contact: ContactShortType\r\n    highlight?: string\r\n}\r\n\r\nexport const ExternalContactBody: React.FC<Props> = ({contact, highlight}) => {\r\n\r\n    if (contact.phone) {\r\n        const phone = formatPhone(contact.phone)\r\n\r\n        return (\r\n            <span className=\"flex items-center gap-1\">\r\n                <IconPhone16Filled className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n                <span data-testid=\"phone\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                    {highlighted({highlight, text: phone})}\r\n                </span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    if (contact.email) {\r\n        return (\r\n            <span className=\"flex items-center gap-1\">\r\n                <IconEmail16 className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n                <span data-testid=\"email\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                    {highlighted({highlight, text: contact.email})}\r\n                </span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n","import type {ButtonHTMLAttributes, FC, PropsWithChildren} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useContact, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {stopPropagation, useEvent} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconArrowDown16, IconArrowUp16, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {Loader} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {DropdownOption} from './InteractionButtonIcon'\r\n\r\n\r\ntype HtmlProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>\r\n\r\ntype OptionsExtractor = (contactData: ContactType) => DropdownOption[]\r\n\r\ntype Props = PropsWithChildren<HtmlProps & {\r\n    contactId: string\r\n    tooltip: string\r\n    popupOpen: boolean\r\n    optionsExtractor: OptionsExtractor\r\n    OptionComponent: FC<Omit<DropdownOption, 'key'>>\r\n    onPressed: (value: string) => void\r\n    onPopupOpenChange: (value: boolean) => void\r\n}>\r\n\r\nexport const ExternalContactInteractionButtonIcon: React.FC<Props> = ({\r\n    contactId,\r\n    tooltip,\r\n    popupOpen,\r\n    optionsExtractor,\r\n    OptionComponent,\r\n    onPressed,\r\n    onPopupOpenChange,\r\n    children,\r\n    ...htmlProps\r\n}) => {\r\n\r\n    const {getContact} = useContactsStateMethods()\r\n    const {data: fullContactData, isLoading} = useContact(contactId) ?? {}\r\n\r\n    const loadFullContactDataAndContinue = useEvent(() => {\r\n        getContact({id: contactId})\r\n            .then(contactData => {\r\n                if (!contactData) {\r\n                    return\r\n                }\r\n                const options = optionsExtractor(contactData)\r\n\r\n                if (options.length > 1) {\r\n                    onPopupOpenChange(true)\r\n                } else if (options.length === 1) {\r\n                    onPressed(options[0].value)\r\n                }\r\n            })\r\n    })\r\n\r\n    const keyDownHandler = useEvent((e: React.KeyboardEvent) => {\r\n        if (onPopupOpenChange && e.key === 'Escape') {\r\n            e.stopPropagation()\r\n            onPopupOpenChange(!popupOpen)\r\n        }\r\n    })\r\n\r\n    if (!fullContactData) {\r\n        if (isLoading) {\r\n            return (\r\n                <ButtonIcon tooltip={tooltip} className=\"relative [&>span]:h-4 [&>span]:w-4\">\r\n                    <Loader active size=\"mini\" />\r\n                </ButtonIcon>\r\n            )\r\n        }\r\n        return (\r\n            <ButtonIcon\r\n                onClick={loadFullContactDataAndContinue}\r\n                tooltip={tooltip}\r\n                {...htmlProps}\r\n            >\r\n                {children}\r\n            </ButtonIcon>\r\n        )\r\n    }\r\n\r\n    const options = optionsExtractor(fullContactData)\r\n\r\n    return options.length > 1 ? (\r\n        <TriggerDropdown\r\n            modal={false}\r\n            inPortal={false}\r\n            align=\"start\"\r\n            open={popupOpen}\r\n            onOpenChange={onPopupOpenChange}\r\n            onKeyDown={keyDownHandler}\r\n            onClick={stopPropagation}\r\n            onFocus={stopPropagation}\r\n            className=\"[&>*:not(:last-child)]:border-b [&>*:not(:last-child)]:border-default\"\r\n            options={options.map(({key, ...props}) => (\r\n                <button key={key} onClick={() => onPressed(props.value)}>\r\n                    <OptionComponent {...props} />\r\n                </button>\r\n            ))}\r\n        >\r\n            {isOpened => (\r\n                <ButtonIcon\r\n                    tooltip={tooltip}\r\n                    data-focused={isOpened}\r\n                    iconRight={isOpened ? <IconArrowUp16 /> : <IconArrowDown16 />}\r\n                >\r\n                    {children}\r\n                </ButtonIcon>\r\n            )}\r\n        </TriggerDropdown>\r\n    ) : (\r\n        <ButtonIcon\r\n            onClick={() => {\r\n                assertDefined(options[0])\r\n                onPressed(options[0].value)\r\n            }}\r\n            tooltip={tooltip}\r\n            disabled={!options.length}\r\n            {...htmlProps}\r\n        >\r\n            {children}\r\n        </ButtonIcon>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {externalContact} from '@bpinc/ad-contacts-state-types'\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {\r\n    ButtonIcon,\r\n    IconEmail16,\r\n    IconInformation,\r\n    IconPhone16Filled,\r\n    IconRoundChat16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmailOption, PhoneOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ExternalContactInteractionButtonIcon} from '../../shared/ExternalContactInteractionButtonIcon'\r\nimport type {OnChatParams, OnEmailParams} from '../types'\r\n\r\n\r\ntype Props = {\r\n    contact: ContactShortType\r\n    transferMode?: 'messages' | 'calls'\r\n    onCall?: (callParams: InitiateCall) => void\r\n    onChat?: (chatParams: OnChatParams) => void\r\n    onEmail?: (emailParams: OnEmailParams) => void\r\n    onDetails?: (params: OpenContactDetailsParams) => void\r\n    /**\r\n     * subscription for change in total popup state in this component\r\n     * `true` - when some popup is opened, `false` - when none popup is opened\r\n     * */\r\n    onPopupOpenChange?: (value: boolean) => void\r\n}\r\n\r\nexport const ExternalContactControls: React.FC<Props> = ({\r\n    contact,\r\n    transferMode,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    onPopupOpenChange = noop,\r\n}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const phoneDeviceCapabilities = useSessionState('phoneDeviceCapabilities')\r\n    const isCommunicator = useIsCommunicator()\r\n\r\n    const [callPopupOpen, setCallPopupOpen] = useState(false)\r\n    const [chatPopupOpen, setChatPopupOpen] = useState(false)\r\n    const [emailPopupOpen, setEmailPopupOpen] = useState(false)\r\n\r\n    const showCallButton =\r\n        !!contact.phone &&\r\n        contact.phone !== '-' &&\r\n        phoneDeviceCapabilities.canDial &&\r\n        transferMode !== 'calls' &&\r\n        !!onCall\r\n    const showChatButton = !!contact.phone && transferMode !== 'messages' && !!onChat\r\n    const showEmailButton = !isCommunicator && !!contact.email && !!onEmail\r\n\r\n    useEffect(() => {\r\n        onPopupOpenChange(callPopupOpen || chatPopupOpen || emailPopupOpen)\r\n    }, [onPopupOpenChange, callPopupOpen, chatPopupOpen, emailPopupOpen])\r\n\r\n    const handleCall = useEvent((phone: string) => {\r\n        assertDefined(onCall)\r\n        onCall({\r\n            phone,\r\n            contactId: contact.id,\r\n            firstName: contact.firstName,\r\n            lastName: contact.lastName,\r\n            origination: 'directory',\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent((phone: string) => {\r\n        assertDefined(onChat)\r\n        onChat({\r\n            phone,\r\n            contactId: contact.id,\r\n            firstName: contact.firstName,\r\n            lastName: contact.lastName,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent((email: string) => {\r\n        assertDefined(onEmail)\r\n        onEmail({\r\n            contactId: contact.id,\r\n            emailAddress: email,\r\n        })\r\n    })\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetails?.({contactId: contact.id})\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {showCallButton && (\r\n                <ExternalContactInteractionButtonIcon\r\n                    data-testid=\"call-button\"\r\n                    tooltip={i18n.button_start_call_text()}\r\n                    popupOpen={callPopupOpen}\r\n                    contactId={contact.id}\r\n                    optionsExtractor={externalContact.callOptions}\r\n                    OptionComponent={PhoneOption}\r\n                    onPopupOpenChange={setCallPopupOpen}\r\n                    onPressed={handleCall}\r\n                >\r\n                    <IconPhone16Filled />\r\n                </ExternalContactInteractionButtonIcon>\r\n            )}\r\n            {showChatButton && (\r\n                <ExternalContactInteractionButtonIcon\r\n                    data-testid=\"chat-button\"\r\n                    tooltip={i18n.button_initiate_chat_text()}\r\n                    popupOpen={chatPopupOpen}\r\n                    contactId={contact.id}\r\n                    optionsExtractor={externalContact.chatOptions}\r\n                    OptionComponent={PhoneOption}\r\n                    onPopupOpenChange={setChatPopupOpen}\r\n                    onPressed={handleChat}\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </ExternalContactInteractionButtonIcon>\r\n            )}\r\n            {showEmailButton && (\r\n                <ExternalContactInteractionButtonIcon\r\n                    data-testid=\"email-button\"\r\n                    tooltip={i18n.button_send_email_text()}\r\n                    popupOpen={emailPopupOpen}\r\n                    contactId={contact.id}\r\n                    optionsExtractor={externalContact.emailOptions}\r\n                    OptionComponent={EmailOption}\r\n                    onPopupOpenChange={setEmailPopupOpen}\r\n                    onPressed={handleEmail}\r\n                >\r\n                    <IconEmail16 />\r\n                </ExternalContactInteractionButtonIcon>\r\n            )}\r\n            <ButtonIcon\r\n                tooltip={i18n.button_show_contact_details_text()}\r\n                data-testid=\"user-info-button\"\r\n                onPressed={handleDetails}\r\n            >\r\n                <IconInformation />\r\n            </ButtonIcon>\r\n        </>\r\n    )\r\n}\r\n","import React, {useMemo, useState} from 'react'\r\n\r\nimport {useGetContactPictureUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {ExternalContactFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {highlighted, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {ExternalUserProps} from '../types'\r\nimport {ExternalContactBody} from './ExternalContactBody'\r\nimport {ExternalContactControls} from './ExternalContactControls'\r\n\r\n\r\nfunction getContactId(contact: ContactShortType) {\r\n    return contact.id\r\n}\r\n\r\nexport const ExternalContact: React.FC<ExternalUserProps> = ({\r\n    transferMode,\r\n    transferNumberInput,\r\n    transferControlsStyle,\r\n    contact,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    onClick,\r\n    noControls,\r\n    onDoubleClick,\r\n    highlight,\r\n    showFavoriteButton = true,\r\n    ...other\r\n}) => {\r\n\r\n    const getContactPictureUrl = useGetContactPictureUrl()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const [controlsPopupOpen, setControlsPopupOpen] = useState(false)\r\n\r\n    const contactId = getContactId(contact)\r\n\r\n    const avatar = useMemo(\r\n        () => ({\r\n            firstName: contact.firstName,\r\n            lastName: contact.lastName,\r\n            url: getContactPictureUrl(contactId),\r\n        }),\r\n        [getContactPictureUrl, contact.firstName, contactId, contact.lastName],\r\n    )\r\n\r\n    const title = useMemo(() => (\r\n        <span className=\"flex gap-1\">\r\n            <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                {highlighted({\r\n                    highlight,\r\n                    text: formatFullName(contact.firstName, contact.lastName),\r\n                })}\r\n            </b>\r\n            {showFavoriteButton && (\r\n                <ExternalContactFavoriteButton forContactListItem item={contact} />\r\n            )}\r\n        </span>\r\n    ), [formatFullName, highlight, showFavoriteButton, contact])\r\n\r\n    const body = <ExternalContactBody contact={contact} highlight={highlight} />\r\n\r\n    const controls = (\r\n        <ExternalContactControls\r\n            contact={contact}\r\n            transferMode={transferMode}\r\n            onPopupOpenChange={setControlsPopupOpen}\r\n            onChat={onChat}\r\n            onCall={onCall}\r\n            onEmail={onEmail}\r\n            onDetails={onDetails}\r\n        />\r\n    )\r\n\r\n    const handleChat = useEvent((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        onChat?.({\r\n            contactId,\r\n            firstName: contact.firstName,\r\n            lastName: contact.lastName,\r\n            phone: contact.phone,\r\n        })\r\n    })\r\n\r\n    const callButtonRef = React.useRef<HTMLButtonElement | null>(null)\r\n\r\n    const handleClick = useEvent((e: React.MouseEvent) => {\r\n        onClick?.(e, contact)\r\n    })\r\n\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick?.(contact, {\r\n            onCall: () => {\r\n                callButtonRef.current?.click()\r\n            },\r\n        })\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            keyHandlerElement=\"directory-item\"\r\n            transferMode={transferMode}\r\n            transferNumberInput={transferNumberInput}\r\n            transferControlsStyle={transferControlsStyle}\r\n            contactId={contactId}\r\n            number={contact.phone}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            body={body}\r\n            controls={controls}\r\n            onClick={onClick ? handleClick : handleChat}\r\n            onDoubleClick={onDoubleClick && handleDoubleClick}\r\n            containerProps={{\r\n                itemId: contact.id,\r\n                focusOnSelection: true,\r\n                tabIndex: 0,\r\n                'data-testid': 'directory-item',\r\n                'data-external-contact': 'true',\r\n            }}\r\n            forceHover={controlsPopupOpen}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n","import type {ButtonHTMLAttributes, FC, PropsWithChildren} from 'react'\r\nimport React from 'react'\r\n\r\nimport {stopPropagation, useEvent} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconArrowDown16, IconArrowUp16, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\n\r\ntype HtmlProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>\r\n\r\ntype Props = PropsWithChildren<HtmlProps & {\r\n    items: DropdownOption[]\r\n    tooltip: string\r\n    popupOpen?: boolean\r\n    OptionComponent: FC<Omit<DropdownOption, 'key'>>\r\n    onPressed: (value: string) => void\r\n    onPopupOpenChange?: (value: boolean) => void\r\n}>\r\n\r\nexport type DropdownOption = {\r\n    key: string\r\n    value: string\r\n    type: string\r\n}\r\n\r\nexport const InteractionButtonIcon: FC<Props> = ({\r\n    items,\r\n    tooltip,\r\n    popupOpen,\r\n    OptionComponent,\r\n    onPressed,\r\n    onPopupOpenChange,\r\n    children,\r\n    ...htmlProps\r\n}) => {\r\n\r\n    const keyDownHandler = useEvent((e: React.KeyboardEvent) => {\r\n        if (onPopupOpenChange && e.key === 'Escape') {\r\n            e.stopPropagation()\r\n            onPopupOpenChange(!popupOpen)\r\n        }\r\n    })\r\n\r\n    return items.length > 1 ? (\r\n        <TriggerDropdown\r\n            modal={false}\r\n            inPortal={false}\r\n            align=\"start\"\r\n            open={popupOpen}\r\n            onOpenChange={onPopupOpenChange}\r\n            onKeyDown={keyDownHandler}\r\n            onClick={stopPropagation}\r\n            onFocus={stopPropagation}\r\n            className=\"[&>*:not(:last-child)]:border-b [&>*:not(:last-child)]:border-default\"\r\n            options={items.map(({key, ...props}) => (\r\n                <button key={key} onClick={() => onPressed(props.value)}>\r\n                    <OptionComponent {...props} />\r\n                </button>\r\n            ))}\r\n        >\r\n            {isOpened => (\r\n                <ButtonIcon\r\n                    tooltip={tooltip}\r\n                    data-focused={isOpened}\r\n                    iconRight={isOpened ? <IconArrowUp16 /> : <IconArrowDown16 />}\r\n                >\r\n                    {children}\r\n                </ButtonIcon>\r\n            )}\r\n        </TriggerDropdown>\r\n    ) : items.length === 1\r\n        ? (\r\n            <ButtonIcon\r\n                onClick={() => {\r\n                    assertDefined(items[0])\r\n                    onPressed(items[0].value)\r\n                }}\r\n                tooltip={tooltip}\r\n                disabled={!items.length}\r\n                {...htmlProps}\r\n            >\r\n                {children}\r\n            </ButtonIcon>\r\n        )\r\n        : null\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {internalUser} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {\r\n    ButtonIcon,\r\n    IconEmail16,\r\n    IconInformation,\r\n    IconPhone16Filled,\r\n    IconRoundChat16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {EmailOption, PhoneOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {InteractionButtonIcon} from '../../shared/InteractionButtonIcon'\r\nimport type {InternalUser, OnChatParams, OnEmailParams} from '../types'\r\n\r\n\r\ntype Props = {\r\n    user: InternalUser\r\n    transferMode?: 'messages' | 'calls'\r\n    onCall?: (callParams: InitiateCall) => void\r\n    onChat?: (chatParams: OnChatParams) => void\r\n    onEmail?: (emailParams: OnEmailParams) => void\r\n    onDetails?: (user: OpenContactDetailsParams) => void\r\n    /**\r\n     * subscription for change in total popup state in this component\r\n     * `true` - when some popup is opened, `false` - when none popup is opened\r\n     * */\r\n    onPopupOpenChange?: (value: boolean) => void\r\n}\r\n\r\nexport const InternalUserControls: React.FC<Props> = ({\r\n    user,\r\n    transferMode,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    onPopupOpenChange = noop,\r\n}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const {userId: selfUserId, phoneDeviceCapabilities} = useSessionState()\r\n    const isCommunicator = useIsCommunicator()\r\n\r\n    const [callPopupOpen, setCallPopupOpen] = useState(false)\r\n    const [chatPopupOpen, setChatPopupOpen] = useState(false)\r\n    const [emailPopupOpen, setEmailPopupOpen] = useState(false)\r\n\r\n    const isSelf = user.userId === selfUserId\r\n    const showCallButton = !isSelf && phoneDeviceCapabilities.canDial && transferMode !== 'calls' && !!onCall\r\n    const showChatButton = transferMode !== 'messages' && !!onChat\r\n    const showEmailButton = !isCommunicator && !!onEmail\r\n\r\n    const callOptions = internalUser.callOptions(user)\r\n    const chatOptions = internalUser.chatOptions(user)\r\n    const emailOptions = internalUser.emailOptions(user)\r\n\r\n    useEffect(() => {\r\n        onPopupOpenChange(callPopupOpen || chatPopupOpen || emailPopupOpen)\r\n    }, [onPopupOpenChange, callPopupOpen, chatPopupOpen, emailPopupOpen])\r\n\r\n    const handleCall = useEvent((phone: string) => {\r\n        assertDefined(onCall)\r\n        onCall({\r\n            phone,\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            origination: 'directory',\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent((phone: string) => {\r\n        assertDefined(onChat)\r\n        onChat({\r\n            phone,\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent((email: string) => {\r\n        assertDefined(onEmail)\r\n        onEmail({emailAddress: email})\r\n    })\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetails?.({userId: user.userId})\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex gap-0.5\">\r\n            {showCallButton && (\r\n                <InteractionButtonIcon\r\n                    data-testid=\"call-button\"\r\n                    items={callOptions}\r\n                    tooltip={i18n.button_start_call_text()}\r\n                    popupOpen={callPopupOpen}\r\n                    OptionComponent={PhoneOption}\r\n                    onPopupOpenChange={setCallPopupOpen}\r\n                    onPressed={handleCall}\r\n                >\r\n                    <IconPhone16Filled />\r\n                </InteractionButtonIcon>\r\n            )}\r\n            {showChatButton && (\r\n                <InteractionButtonIcon\r\n                    data-testid=\"chat-button\"\r\n                    items={chatOptions}\r\n                    tooltip={i18n.button_initiate_chat_text()}\r\n                    popupOpen={chatPopupOpen}\r\n                    OptionComponent={PhoneOption}\r\n                    onPopupOpenChange={setChatPopupOpen}\r\n                    onPressed={handleChat}\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </InteractionButtonIcon>\r\n            )}\r\n            {showEmailButton && (\r\n                <InteractionButtonIcon\r\n                    data-testid=\"email-button\"\r\n                    items={emailOptions}\r\n                    tooltip={i18n.button_send_email_text()}\r\n                    popupOpen={emailPopupOpen}\r\n                    OptionComponent={EmailOption}\r\n                    onPopupOpenChange={setEmailPopupOpen}\r\n                    onPressed={handleEmail}\r\n                >\r\n                    <IconEmail16 />\r\n                </InteractionButtonIcon>\r\n            )}\r\n            <ButtonIcon\r\n                tooltip={i18n.button_show_contact_details_text()}\r\n                data-testid=\"user-info-button\"\r\n                onPressed={handleDetails}\r\n            >\r\n                <IconInformation />\r\n            </ButtonIcon>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useReducer} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getStateDuration} from '@bpinc/ad-user-details-state-context'\r\nimport type {CapacityItemType, UserDetails, UserDetailsObject} from '@bpinc/ad-user-details-state-types'\r\nimport {formatDurationShort} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype UserOnlineStatusProps = {\r\n    details: UserDetailsObject | undefined\r\n}\r\n\r\nexport const UserOnlineStatus: React.FC<UserOnlineStatusProps> = ({details}) => {\r\n    const tenantFeatures = useSessionState('tenantFeatures')\r\n\r\n    const [_, forceUpdate] = useReducer(s => s + 1, 0)\r\n    const stateDuration = getStateDuration(details)\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(forceUpdate, 1000)\r\n        return () => clearInterval(interval)\r\n    })\r\n\r\n    if (!details || !tenantFeatures?.rtDataEnabled) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <span\r\n            data-testid=\"online-status\"\r\n            className=\"flex max-w-[138px] gap-1 overflow-hidden caption-s\"\r\n        >\r\n            <span className=\"font-semibold\">\r\n                <UserStatusLabel userDetails={details?.data} />\r\n            </span>\r\n            {!!stateDuration && (\r\n                <span className=\"text-neutral-fade\">\r\n                    {`(${formatDurationShort(stateDuration)})`}\r\n                </span>\r\n            )}\r\n        </span>\r\n    )\r\n}\r\n\r\ntype UserStatusLabelProps = {\r\n    userDetails: UserDetails | undefined\r\n}\r\n\r\nconst UserStatusLabel: React.FC<UserStatusLabelProps> = ({userDetails}) => {\r\n    const {AGENT_STATE_CONTROL: i18n} = useLocalizationState('t')\r\n\r\n    function yellow(text: string) {\r\n        return <span className=\"line-clamp-2 truncate text-on-warning\">{text}</span>\r\n    }\r\n    function green(text: string) {\r\n        return <span className=\"line-clamp-2 truncate text-on-success\">{text}</span>\r\n    }\r\n    function red(text: string) {\r\n        return <span className=\"line-clamp-2 truncate text-on-error\">{text}</span>\r\n    }\r\n    function gray(text: string) {\r\n        return <span className=\"line-clamp-2 truncate text-neutral-disabled\">{text}</span>\r\n    }\r\n    function dark(text: string) {\r\n        return <span className=\"line-clamp-2 truncate text-primary-on-primary\">{text}</span>\r\n    }\r\n\r\n    if (!userDetails) {\r\n        return null\r\n    }\r\n    if (!userDetails.isLogged) {\r\n        return gray(i18n.presence_offline())\r\n    }\r\n\r\n    if (userDetails.presenceState && (!userDetails.acdState && !userDetails.isSuper && !userDetails.userType)) {\r\n        switch (userDetails.presenceState) {\r\n            case 'available':\r\n                return green(i18n.presence_available())\r\n            case 'busy':\r\n                return dark(getInteractionBusyStatus())\r\n            default:\r\n                return red(i18n.presence_dnd())\r\n        }\r\n    }\r\n\r\n    if (userDetails.acdState !== undefined) {\r\n        switch (userDetails.acdState) {\r\n            case '':\r\n                return gray(i18n.acd_supervision())\r\n            case 'ready':\r\n                return green(i18n.acd_ready())\r\n            case 'not_ready':\r\n                return yellow(userDetails.reason ?? i18n.acd_not_ready())\r\n            case 'busy':\r\n                return dark(userDetails.reason ?? i18n.acd_busy())\r\n            case 'after_call_work':\r\n                return dark(userDetails.reason ?? i18n.acd_acw_long())\r\n        }\r\n    }\r\n\r\n    if (userDetails.capacity) {\r\n        const userHasActiveCapacityOfType = (type: CapacityItemType) => {\r\n            const capacityItem = userDetails.capacity && userDetails.capacity[type]\r\n            return capacityItem && capacityItem.usedSlots > 0\r\n        }\r\n        if (userHasActiveCapacityOfType('voice') || userHasActiveCapacityOfType('workitem')) {\r\n            return dark(i18n.acd_busy_call())\r\n        }\r\n        if (userHasActiveCapacityOfType('chat')) {\r\n            return dark(i18n.acd_busy_chat())\r\n        }\r\n        if (userHasActiveCapacityOfType('email')) {\r\n            return dark(i18n.acd_busy_email())\r\n        }\r\n    }\r\n\r\n    switch (userDetails.presenceState) {\r\n        case 'available':\r\n            return green(i18n.presence_available())\r\n        case 'offline':\r\n            return gray(i18n.presence_offline())\r\n        case 'away':\r\n            return yellow(i18n.presence_away())\r\n        case 'dnd':\r\n            return red(i18n.presence_dnd())\r\n        case 'busy':\r\n            return dark(i18n.acd_busy())\r\n    }\r\n\r\n    if (userDetails.isSuper) {\r\n        return gray(i18n.acd_supervision())\r\n    }\r\n\r\n    return null\r\n\r\n\r\n    function getInteractionBusyStatus(): string {\r\n        if (userHasItemOfType('voice') || userHasItemOfType('workitem')) {\r\n            return i18n.acd_busy_call()\r\n        }\r\n        if (userHasItemOfType('chat')) {\r\n            return i18n.acd_busy_chat()\r\n        }\r\n        if (userHasItemOfType('email')) {\r\n            return i18n.acd_busy_email()\r\n        }\r\n        return i18n.acd_busy()\r\n\r\n        function userHasItemOfType(type: string) {\r\n            return userDetails?.items?.some(item => item.mediaType === type)\r\n        }\r\n    }\r\n}\r\n","import React, {useMemo, useRef, useState} from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {getUserStatusIcon, useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {DirectoryFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconPhone16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {highlighted, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {InternalUserProps} from '../types'\r\nimport {isSearchUser} from '../types'\r\nimport {InternalUserControls} from './InternalUserControls'\r\nimport {UserOnlineStatus} from './UserOnlineStatus'\r\n\r\n\r\nexport const InternalUser: React.FC<InternalUserProps> = ({\r\n    transferMode,\r\n    transferNumberInput,\r\n    transferControlsStyle,\r\n    user,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    highlight,\r\n    onClick,\r\n    onDoubleClick,\r\n    showFavoriteButton = true,\r\n    ...other\r\n}) => {\r\n\r\n    const {tenantFeatures} = useSessionState()\r\n    const {formatFullName} = useFormatting()\r\n    const rtUserDetails = useUserDetailsById(user.userId)\r\n\r\n    const mountTimestamp = useRef<number>(Date.now())\r\n    const details = isSearchUser(user)\r\n        ? {data: user, lastUpdated: mountTimestamp.current}\r\n        : rtUserDetails\r\n\r\n    const [controlsPopupOpen, setControlsPopupOpen] = useState(false)\r\n\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const userStatusIcon = getUserStatusIcon(details?.data)\r\n    const presenceState = details?.data?.presenceState\r\n    const isOnline = presenceState === 'available'\r\n\r\n    const onlineStatusIcon = useMemo(() => {\r\n        let icon = userStatusIcon\r\n\r\n        if (!tenantFeatures?.rtDataEnabled && userStatusIcon && userStatusIcon !== 'loggedOut') {\r\n            icon = 'ready'\r\n        }\r\n        return icon\r\n    }, [userStatusIcon, tenantFeatures?.rtDataEnabled])\r\n\r\n    const avatar = useMemo(() => ({\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        url: getAvatarUrl({\r\n            userId: user.userId,\r\n            photoUrl: 'photoId' in user ? user.photoId : undefined,\r\n        }),\r\n        isAgent: true,\r\n        isOnline,\r\n        onlineStatusIcon,\r\n    }), [user, isOnline, onlineStatusIcon, getAvatarUrl])\r\n\r\n    const title = useMemo(() => (\r\n        <span className=\"flex gap-1\">\r\n            <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                {highlighted({\r\n                    highlight,\r\n                    text: formatFullName(user.firstName, user.lastName),\r\n                })}\r\n            </b>\r\n            {showFavoriteButton && (\r\n                <DirectoryFavoriteButton forContactListItem item={user} />\r\n            )}\r\n        </span>\r\n    ), [formatFullName, highlight, showFavoriteButton, user])\r\n\r\n    const body = (\r\n        <span className=\"flex items-center gap-1\">\r\n            <IconPhone16Filled className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n            <span data-testid=\"phone\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                {highlighted({highlight, text: user.extension})}\r\n            </span>\r\n        </span>\r\n    )\r\n\r\n    const stats = <UserOnlineStatus details={details} />\r\n\r\n    const controls = (\r\n        <InternalUserControls\r\n            user={user}\r\n            transferMode={transferMode}\r\n            onPopupOpenChange={setControlsPopupOpen}\r\n            onChat={onChat}\r\n            onCall={onCall}\r\n            onEmail={onEmail}\r\n            onDetails={onDetails}\r\n        />\r\n    )\r\n\r\n    const handleChat = useEvent((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        onChat?.({\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            phone: user.extension,\r\n        })\r\n    })\r\n\r\n    const handleClick = useEvent((e: React.MouseEvent) => {\r\n        onClick?.(e, user)\r\n    })\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick?.(user)\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            keyHandlerElement=\"directory-item\"\r\n            transferMode={transferMode}\r\n            transferNumberInput={transferNumberInput}\r\n            transferControlsStyle={transferControlsStyle}\r\n            userId={user.userId}\r\n            number={user.extension}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            body={body}\r\n            stats={stats}\r\n            controls={controls}\r\n            onClick={onClick ? handleClick : handleChat}\r\n            onDoubleClick={onDoubleClick && handleDoubleClick}\r\n            containerProps={{\r\n                itemId: user.userId,\r\n                focusOnSelection: true,\r\n                tabIndex: 0,\r\n                'data-testid': 'directory-item',\r\n                'data-internal-user': 'true',\r\n            }}\r\n            forceHover={controlsPopupOpen}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n","import type React from 'react'\r\n\r\nimport type {CreateCaseEmail} from '@bpinc/ad-case-state-types'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport type {\r\n    DirectoryEntry,\r\n    DirectoryItem,\r\n    DirectoryStateUserObject,\r\n    MsTeamsChannel,\r\n    MsTeamsUser,\r\n    SearchUserItem,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport type {EmiUserType} from '@bpinc/ad-transport-types'\r\nimport type {RequiredBy} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport interface ExternalUserProps extends DirectoryItemProps {\r\n    contact: ContactShortType\r\n}\r\n\r\nexport interface InternalCategoryUserProps extends DirectoryItemProps {\r\n    item: DirectoryEntry\r\n}\r\n\r\nexport interface MsTeamsChannelProps extends DirectoryItemProps {\r\n    item: MsTeamsChannel\r\n}\r\n\r\nexport interface MsTeamsUserProps extends DirectoryItemProps {\r\n    user: MsTeamsUser\r\n}\r\n\r\nexport interface InternalUserProps extends DirectoryItemProps {\r\n    user: InternalUser\r\n}\r\n\r\nexport type InternalUser = DirectoryStateUserObject | SearchUserItem\r\n\r\nexport function isSearchUser(user: InternalUser | MsTeamsUser): user is SearchUserItem {\r\n    return (\r\n        'userType' in user && user.userType === 'internal' &&\r\n        'acdState' in user && 'isLoggedIn' in user\r\n    )\r\n}\r\n\r\nexport interface DirectoryItemProps {\r\n    isSelected?: boolean\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItem) => void\r\n    onDoubleClick?: (item: DirectoryItem, callbacks?: OnClickCallbacks) => void\r\n    onCall?: (callParams: InitiateCall) => void\r\n    onChat?: (chatParams: OnChatParams) => void\r\n    onEmail?: (emailParams: OnEmailParams) => void\r\n    onDetails?: (params: OpenContactDetailsParams) => void\r\n    transferMode?: 'messages' | 'calls'\r\n    transferNumberInput?: string\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    highlight?: string\r\n    noControls?: boolean\r\n    showControls?: boolean\r\n    contentClassName?: string\r\n    as?: React.ElementType\r\n    containerProps?: Record<string, unknown>\r\n    showFavoriteButton?: boolean\r\n}\r\n\r\nexport interface OnClickCallbacks {\r\n    onCall: () => void\r\n}\r\nexport interface OnChatParams {\r\n    userId?: string\r\n    contactId?: string\r\n    firstName: string\r\n    lastName: string\r\n    phone: string\r\n    userType?: EmiUserType\r\n    photoUrl?: string\r\n    members?: string[]\r\n    //chatId?: string\r\n}\r\n\r\nexport type OnEmailParams = RequiredBy<CreateCaseEmail, 'emailAddress'>\r\n","import React from 'react'\r\n\r\nimport type {MsTeamsChannel} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconInformation, IconRoundChat16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {OnChatParams} from '../types'\r\n\r\n\r\ntype Props = {\r\n    item: MsTeamsChannel\r\n    transferMode?: 'messages' | 'calls'\r\n    onChat?: (user: OnChatParams) => void\r\n    onDetails?: (user: OpenContactDetailsParams) => void\r\n}\r\n\r\nexport const MsTeamsChannelControls: React.FC<Props> = ({\r\n    item,\r\n    transferMode,\r\n    onChat,\r\n    onDetails,\r\n}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const showChatButton = transferMode !== 'messages' && !!onChat\r\n\r\n    const handleChat = useEvent(() => {\r\n        assertDefined(onChat)\r\n        onChat({\r\n            phone: '',\r\n            userId: item.channelId,\r\n            firstName: '',\r\n            lastName: item.title,\r\n            userType: item.userType,\r\n            photoUrl: item.photoUrl,\r\n        })\r\n    })\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetails?.({userId: item.channelId})\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex gap-0.5\">\r\n            {showChatButton && (\r\n                <ButtonIcon\r\n                    onClick={handleChat}\r\n                    tooltip={i18n.button_initiate_chat_text()}\r\n                    data-testid=\"chat-button\"\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            <ButtonIcon\r\n                tooltip={i18n.button_show_contact_details_text()}\r\n                data-testid=\"user-info-button\"\r\n                onPressed={handleDetails}\r\n            >\r\n                <IconInformation />\r\n            </ButtonIcon>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {MS_TEAMS_CHANNEL_AVATAR_FIRST_NAME, MS_TEAMS_CHANNEL_AVATAR_LAST_NAME} from '@bpinc/lib-avatar-ui'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {DirectoryFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {highlighted, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {MsTeamsChannelProps} from '../types'\r\nimport {MsTeamsChannelControls} from './MsTeamsChannelControls'\r\n\r\n\r\nexport const MsTeamsChannel: React.FC<MsTeamsChannelProps> = ({\r\n    transferMode,\r\n    transferControlsStyle,\r\n    item,\r\n    onDetails,\r\n    onChat,\r\n    highlight,\r\n    onClick,\r\n    onDoubleClick,\r\n    showFavoriteButton = true,\r\n    ...other\r\n}) => {\r\n\r\n    const avatar: PropsAvatar = useMemo(() => ({\r\n        firstName: MS_TEAMS_CHANNEL_AVATAR_FIRST_NAME,\r\n        lastName: MS_TEAMS_CHANNEL_AVATAR_LAST_NAME,\r\n    }), [])\r\n\r\n    const title = useMemo(() => (\r\n        <span className=\"flex gap-1\">\r\n            <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                {highlighted({\r\n                    highlight,\r\n                    text: item.title,\r\n                })}\r\n            </b>\r\n            {showFavoriteButton && (\r\n                <DirectoryFavoriteButton forContactListItem item={item} />\r\n            )}\r\n        </span>\r\n    ), [highlight, item.title, showFavoriteButton, item])\r\n\r\n    const controls = (\r\n        <MsTeamsChannelControls\r\n            item={item}\r\n            transferMode={transferMode}\r\n            onChat={onChat}\r\n            onDetails={onDetails}\r\n        />\r\n    )\r\n\r\n    const handleClick = useEvent((e: React.MouseEvent) => {\r\n        if (onClick) {\r\n            onClick(e, item)\r\n        } else if (onChat) {\r\n            onChat({\r\n                userId: item.channelId,\r\n                firstName: item.title,\r\n                lastName: '',\r\n                phone: '',\r\n                userType: item.userType,\r\n                photoUrl: item.photoUrl,\r\n            })\r\n        }\r\n    })\r\n\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick?.(item)\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            keyHandlerElement=\"directory-item\"\r\n            transferMode={transferMode}\r\n            transferControlsStyle={transferControlsStyle}\r\n            isStaticEntry\r\n            userId={item.channelId}\r\n            userType={item.userType}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            controls={controls}\r\n            onClick={handleClick}\r\n            onDoubleClick={handleDoubleClick}\r\n            containerProps={{\r\n                itemId: item.channelId,\r\n                focusOnSelection: true,\r\n                tabIndex: 0,\r\n                'data-testid': 'directory-item',\r\n                'data-ms-teams-channel': 'true',\r\n                'data-element': 'directory-item',\r\n            }}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {MsTeamsUser} from '@bpinc/ad-directory-state-types'\r\nimport {getMsTeamsUserPrimaryPhoneNumber} from '@bpinc/ad-emi-helpers'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconInformation, IconPhone16Filled, IconRoundChat16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {PhoneOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {DropdownOption} from '../../shared/InteractionButtonIcon'\r\nimport {InteractionButtonIcon} from '../../shared/InteractionButtonIcon'\r\nimport type {OnChatParams} from '../types'\r\n\r\n\r\ntype Props = {\r\n    user: MsTeamsUser\r\n    transferMode?: 'messages' | 'calls'\r\n    onCall?: (initiateCallParams: InitiateCall) => void\r\n    onChat?: (user: OnChatParams) => void\r\n    onDetails?: (user: OpenContactDetailsParams) => void\r\n}\r\n\r\nexport const MsTeamsUserControls: React.FC<Props> = ({\r\n    user,\r\n    transferMode,\r\n    onCall,\r\n    onChat,\r\n    onDetails,\r\n}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n\r\n    const primaryPhoneNumber = getMsTeamsUserPrimaryPhoneNumber(user.phones)\r\n    const callOptions = Object.values(user.phones).map<DropdownOption>(phoneData => ({\r\n        key: phoneData.phone,\r\n        type: phoneData.type.toUpperCase(),\r\n        value: phoneData.phone,\r\n    }))\r\n\r\n    const showCallButton = transferMode !== 'calls' && phoneDeviceCapabilities.canDial && !!onCall\r\n    const showChatButton = transferMode !== 'messages' && user.hasChat && !!onChat\r\n\r\n    const handleCall = useEvent((phone: string) => {\r\n        assertDefined(onCall)\r\n        onCall({\r\n            phone,\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            origination: 'directory',\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent(() => {\r\n        assertDefined(onChat)\r\n        onChat({\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            userType: user.userType,\r\n            phone: primaryPhoneNumber ?? '',\r\n            photoUrl: user.photoUrl,\r\n        })\r\n    })\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetails?.({userId: user.userId})\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex gap-0.5\">\r\n            {showCallButton && (\r\n                <InteractionButtonIcon\r\n                    data-testid=\"call-button\"\r\n                    items={callOptions}\r\n                    tooltip={i18n.button_start_call_text()}\r\n                    OptionComponent={PhoneOption}\r\n                    onPressed={handleCall}\r\n                >\r\n                    <IconPhone16Filled />\r\n                </InteractionButtonIcon>\r\n            )}\r\n            {showChatButton && (\r\n                <ButtonIcon\r\n                    onClick={handleChat}\r\n                    tooltip={i18n.button_initiate_chat_text()}\r\n                    data-testid=\"chat-button\"\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            <ButtonIcon\r\n                tooltip={i18n.button_show_contact_details_text()}\r\n                data-testid=\"user-info-button\"\r\n                onPressed={handleDetails}\r\n            >\r\n                <IconInformation />\r\n            </ButtonIcon>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {getMsTeamsUserPrimaryPhoneNumber} from '@bpinc/ad-emi-helpers'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {prepareHighlightFormattedPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {getUserStatusIcon, useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {DirectoryFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconPhone16Filled} from '@bpinc/lib-jskit-ui'\r\nimport {highlighted, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {UserOnlineStatus} from '../internal-user/UserOnlineStatus'\r\nimport type {MsTeamsUserProps} from '../types'\r\nimport {MsTeamsUserControls} from './MsTeamsUserControls'\r\n\r\n\r\nexport const MsTeamsUser: React.FC<MsTeamsUserProps> = props => {\r\n    const {\r\n        transferMode,\r\n        transferControlsStyle,\r\n        user,\r\n        onChat,\r\n        onCall,\r\n        onDetails,\r\n        highlight,\r\n        onClick,\r\n        onDoubleClick,\r\n        showFavoriteButton = true,\r\n        ...other\r\n    } = props\r\n\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const details = useUserDetailsById(user.userId)\r\n\r\n    //TODO: When MS Teams work again, check if we can omit user.presenceState as the second argument\r\n    const onlineStatusIcon = getUserStatusIcon(details?.data, user.presenceState)\r\n    const primaryPhoneNumber = getMsTeamsUserPrimaryPhoneNumber(user.phones)\r\n\r\n    const avatar: PropsAvatar = useMemo(\r\n        () => ({\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            isAgent: true,\r\n            url: getAvatarUrl({\r\n                userId: user.userId,\r\n                userType: user.userType,\r\n                photoUrl: user.photoUrl,\r\n            }),\r\n            onlineStatusIcon,\r\n            isOnline: onlineStatusIcon === 'ready',\r\n        }),\r\n        [getAvatarUrl, onlineStatusIcon, user],\r\n    )\r\n\r\n    const title = useMemo(() => (\r\n        <span className=\"flex gap-1\">\r\n            <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                {highlighted({\r\n                    highlight,\r\n                    text: formatFullName(user.firstName, user.lastName),\r\n                })}\r\n            </b>\r\n            {showFavoriteButton && (\r\n                <DirectoryFavoriteButton forContactListItem item={user} />\r\n            )}\r\n        </span>\r\n    ), [formatFullName, highlight, showFavoriteButton, user])\r\n\r\n    const body = useMemo(() => {\r\n        if (!primaryPhoneNumber) {\r\n            return null\r\n        }\r\n        return (\r\n            <span className=\"flex items-center gap-1\">\r\n                <IconPhone16Filled className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n                <span data-testid=\"phone\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                    {highlighted({\r\n                        highlight,\r\n                        text: primaryPhoneNumber,\r\n                        sanitizeText: prepareHighlightFormattedPhone,\r\n                    })}\r\n                </span>\r\n            </span>\r\n        )\r\n    }, [primaryPhoneNumber, highlight])\r\n\r\n    const stats = <UserOnlineStatus details={details} />\r\n\r\n    const controls = (\r\n        <MsTeamsUserControls\r\n            user={user}\r\n            transferMode={transferMode}\r\n            onChat={onChat}\r\n            onCall={onCall}\r\n            onDetails={onDetails}\r\n        />\r\n    )\r\n\r\n    const handleChat = useEvent((e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        onChat?.({\r\n            userId: user.userId,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            userType: user.userType,\r\n            phone: primaryPhoneNumber ?? '',\r\n        })\r\n    })\r\n\r\n    const handleClick = useEvent((e: React.MouseEvent) => {\r\n        onClick?.(e, user)\r\n    })\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick?.(user)\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            keyHandlerElement=\"directory-item\"\r\n            transferMode={transferMode}\r\n            transferControlsStyle={transferControlsStyle}\r\n            userId={user.userId}\r\n            userType={user.userType}\r\n            hasChat={user.hasChat}\r\n            number={primaryPhoneNumber}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            body={body}\r\n            stats={stats}\r\n            controls={controls}\r\n            onClick={onClick ? handleClick : handleChat}\r\n            onDoubleClick={onDoubleClick && handleDoubleClick}\r\n            containerProps={{\r\n                itemId: user.userId,\r\n                focusOnSelection: true,\r\n                tabIndex: 0,\r\n                'data-testid': 'directory-item',\r\n                'data-ms-teams-user': 'true',\r\n            }}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n","import React, {useMemo, useRef} from 'react'\r\n\r\nimport type {DirectoryItem as DirectoryItemType} from '@bpinc/ad-directory-state-types'\r\nimport {useIntersectionObserver} from '@bpinc/lib-helpers'\r\nimport {isDirectoryEntry, isExternalUser, isMsTeamsChannel, isMsTeamsUser} from '@bpinc/lib-helpers-ui'\r\n\r\nimport {DirectoryEntry} from './directory-entry/DirectoryEntry'\r\nimport {ExternalContact} from './external-contact/ExternalContact'\r\nimport {InternalUser} from './internal-user/InternalUser'\r\nimport {MsTeamsChannel} from './msteams-channel/MsTeamsChannel'\r\nimport {MsTeamsUser} from './msteams-user/MsTeamsUser'\r\nimport type {DirectoryItemProps} from './types'\r\nimport {useSubscribeForUserOrServiceDetails} from './useSubscribeForUserOrServiceDetails'\r\n\r\n\r\ninterface Props extends DirectoryItemProps {\r\n    item: DirectoryItemType\r\n    listNode: HTMLDivElement | null | undefined\r\n    className?: string\r\n}\r\n\r\nexport const DirectoryItem: React.FC<Props> = React.memo(function DirectoryItem({item, listNode, className, ...props}) {\r\n    const ref = useRef(null)\r\n\r\n    const observer = useIntersectionObserver(ref, {root: listNode})\r\n    useSubscribeForUserOrServiceDetails(item, observer?.isIntersecting)\r\n\r\n    const userComponent = useMemo(function memoizeUserComponent() {\r\n        if (isMsTeamsChannel(item)) {\r\n            return <MsTeamsChannel {...props} item={item} />\r\n        }\r\n        if (isMsTeamsUser(item)) {\r\n            return <MsTeamsUser {...props} user={item} />\r\n        }\r\n\r\n        if (isExternalUser(item)) {\r\n            return <ExternalContact {...props} contact={item} />\r\n        }\r\n\r\n        if (isDirectoryEntry(item)) {\r\n            return <DirectoryEntry {...props} item={item} />\r\n        }\r\n\r\n        return <InternalUser {...props} user={item} />\r\n    }, [props, item])\r\n\r\n    return <div ref={ref} className={className}>{userComponent}</div>\r\n})\r\n","import type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {useSubscribeForHuntGroupDetails, useSubscribeForServiceDetails} from '@bpinc/ad-service-details-state-context'\r\nimport {useSubscribeForUserDetails} from '@bpinc/ad-user-details-state-context'\r\nimport {isHuntGroup, isDirectoryEntry, isUserWithDetails} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nexport function useSubscribeForUserOrServiceDetails(item: DirectoryItem, isVisible?: boolean) {\r\n    useSubscribeForUserDetails(isUserWithDetails(item) ? item.userId : undefined, isVisible)\r\n    useSubscribeForServiceDetails(isDirectoryEntry(item) ? item.serviceId : undefined, isVisible)\r\n    useSubscribeForHuntGroupDetails(isHuntGroup(item) ? item.huntGroupId : undefined, isVisible)\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {IconPlus16} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const ExternalUsersHeader: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const toggleCreateContactMode = useDirectoryUIState(s => s.toggleCreateContactMode)\r\n    const privileges = useSessionState('privileges')\r\n\r\n    if (!privileges.EDIT_CONTACTS) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"mb-2 flex\">\r\n            <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"shrink-0\"\r\n                onClick={toggleCreateContactMode}\r\n                iconLeft={<IconPlus16 className=\"icon-primary\" />}\r\n            >\r\n                {t.CONTACT.create_new_contact_button_text()}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\n// More info in docs: https://help.brightpattern.com/5.8:Agent-guide/Tutorials/Search/AdvancedSearch#Contact_Keywords\r\nconst CONTACT_KEYWORDS_REGEX = /^(address|company_name|dob|email|first_name|last_name|name|phone|position|segment|title|url):/\r\n\r\nexport function useExternalUserHighlight(query: string | undefined) {\r\n    return useMemo(() => {\r\n        if (!query) {\r\n            return undefined\r\n        }\r\n        return query.replace(CONTACT_KEYWORDS_REGEX, '').trim()\r\n    }, [query])\r\n}\r\n","import type {KeyboardEvent, RefObject} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport type {VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport type {DirectoryItem as DirectoryItemType} from '@bpinc/ad-directory-state-types'\r\nimport {useDefaultTransferMode, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallHandler, useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useVirtualScrollDataManager} from '@bpinc/ad-scroll-state-context-builder'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {ContactListPlaceholder} from '@bpinc/lib-contact-list-item-ui'\r\nimport {useAsRef, useEvent} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {SelectionOrigin} from '@bpinc/lib-ui-elements'\r\nimport {ErrorBoundary, Loader, SelectionContainer, SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SCROLL_KEYS} from '../../../scroll-context'\r\nimport {UPLOAD_EXTERNAL_CONTACTS_LIMIT} from '../../constants'\r\nimport {useDirectoryFirstFoundItemAutoSelector} from '../../hooks/useDirectoryFirstFoundItemAutoSelector'\r\nimport {useDirectorySearch} from '../../hooks/useDirectorySearch'\r\nimport {DirectoryItem} from '../user/DirectoryItem'\r\nimport type {OnChatParams, OnEmailParams} from '../user/types'\r\nimport {ExternalUsersHeader} from './ExternalUsersHeader'\r\nimport {useExternalUserHighlight} from './useExternalUserHighlight'\r\n\r\n\r\nexport type ExternalContactProps = {\r\n    query?: string\r\n    noControls?: boolean\r\n    transferMode?: 'messages' | 'calls'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    selectedId?: string\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItemType) => void\r\n    onDoubleClick?: (item: DirectoryItemType) => void\r\n    withCreateContact?: boolean\r\n    scrollParent?: HTMLElement | null\r\n    searchInputRef?: RefObject<HTMLInputElement>\r\n    filter?: (item: DirectoryItemType) => boolean\r\n    isHighlighted?: (item: DirectoryItemType) => boolean\r\n}\r\n\r\nconst defaultFilter = () => true\r\n\r\nexport const ExternalUsers: React.FC<ExternalContactProps> = ({\r\n    query,\r\n    transferMode: rawTransferMode,\r\n    transferControlsStyle,\r\n    noControls,\r\n    onClick,\r\n    selectedId,\r\n    onDoubleClick,\r\n    scrollParent,\r\n    withCreateContact = true,\r\n    searchInputRef,\r\n    filter = defaultFilter,\r\n    isHighlighted,\r\n}) => {\r\n    const t = useLocalizationState('t')\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n    const transferMode = rawTransferMode || defaultTransferMode\r\n    const {\r\n        contactList,\r\n        contactListLoaded,\r\n        contactListByChunks,\r\n        contactListLoading,\r\n        contactListByChunksLoading,\r\n    } = useContactsState([\r\n        'contactList',\r\n        'contactListLoaded',\r\n        'contactListByChunks',\r\n        'contactListLoading',\r\n        'contactListByChunksLoading',\r\n    ])\r\n    const {getContactListByChunks, getContactList} = useContactsStateMethods()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const {createCaseEmail} = useCaseStateMethods()\r\n    const highlight = useExternalUserHighlight(query)\r\n    const handleCall = useCallHandler()\r\n    const openContactDetails = useContactDetailsOpener()\r\n\r\n    const hasQuery = !!query\r\n    const finalContactList = useMemo(\r\n        () =>\r\n            hasQuery\r\n                ? contactList.filter(filter)\r\n                : contactListByChunks.filter(filter),\r\n        [hasQuery, contactList, filter, contactListByChunks],\r\n    )\r\n\r\n    const isDebouncingSearch = useDirectorySearch(query, (q: string) => getContactList({query: q}), 500)\r\n    const {createPotentialItem} = useInteractionStateMethods()\r\n\r\n    const [scrollNode, setScrollNode] = useState<HTMLDivElement | undefined>(undefined)\r\n    const virtuosoRef = useRef<VirtuosoHandle>(null)\r\n\r\n    const getContactKey = useEvent((_idx: number, contact: ContactShortType) => contact.id)\r\n    const scrollSnapshotData = useVirtualScrollDataManager(SCROLL_KEYS.directory('external'), virtuosoRef)\r\n    const contactsIds = useMemo(() => finalContactList.map((contact, i) => getContactKey(i, contact)), [finalContactList, getContactKey])\r\n    const contactsIdsRef = useAsRef(contactsIds)\r\n    const itemsProvider = useEvent(() => contactsIdsRef.current)\r\n    const onItemSelect = useEvent((id: string, selectionOrigin: SelectionOrigin | undefined) => {\r\n        if (selectionOrigin === 'keys') {\r\n            const index = contactsIdsRef.current?.findIndex(contactId => id === contactId)\r\n            virtuosoRef.current?.scrollIntoView({index})\r\n        }\r\n    })\r\n\r\n\r\n    const fetchMoreContacts = useEvent((lastIndex: number) => {\r\n        if (hasQuery) {\r\n            return\r\n        }\r\n\r\n        const lastContact = finalContactList[lastIndex]\r\n        getContactListByChunks({\r\n            limit: UPLOAD_EXTERNAL_CONTACTS_LIMIT,\r\n            start: {\r\n                last_name: lastContact.lastName,\r\n                id: lastContact.id,\r\n            },\r\n        })\r\n    })\r\n\r\n    //Initial contacts loading\r\n    useEffect(() => {\r\n        const shouldMakeInitialLoad = !hasQuery && !contactListByChunks.length && !contactListByChunksLoading && !contactListLoaded\r\n        if (shouldMakeInitialLoad) {\r\n            getContactListByChunks({\r\n                limit: UPLOAD_EXTERNAL_CONTACTS_LIMIT,\r\n            })\r\n        }\r\n    }, [contactListByChunks.length, contactListByChunksLoading, contactListLoaded, getContactListByChunks, hasQuery])\r\n\r\n    const onCall = useEvent((callParams: InitiateCall) => {\r\n        handleCall({\r\n            ...callParams,\r\n            navigateToInteractionsPage: true,\r\n        })\r\n    })\r\n\r\n    const onChat = useEvent(({contactId, phone, firstName, lastName}: OnChatParams) => {\r\n        if (contactId) {\r\n            createPotentialItem({\r\n                phone,\r\n                contactId,\r\n                firstName,\r\n                lastName,\r\n            })\r\n            setActivePage({name: AppRoutes.Interactions})\r\n        }\r\n    })\r\n\r\n    const onEmail = useEvent((emailParams: OnEmailParams) => {\r\n        createCaseEmail(emailParams)\r\n    })\r\n\r\n    const renderContact = useCallback((index: number, contact: ContactShortType) => {\r\n        const contactId = getContactKey(index, contact)\r\n        const isSelected = selectedId === contactId\r\n\r\n        return (\r\n            <ErrorBoundary fallback={null}>\r\n                <DirectoryItem\r\n                    as={SelectionItem}\r\n                    listNode={scrollNode}\r\n                    item={contact}\r\n                    onCall={onCall}\r\n                    onChat={onChat}\r\n                    onEmail={onEmail}\r\n                    onClick={onClick}\r\n                    onDoubleClick={onDoubleClick}\r\n                    onDetails={openContactDetails}\r\n                    isSelected={isHighlighted?.(contact) || isSelected}\r\n                    transferMode={transferMode}\r\n                    transferNumberInput={query}\r\n                    transferControlsStyle={transferControlsStyle}\r\n                    noControls={noControls}\r\n                    highlight={highlight}\r\n                    containerProps={{\r\n                        itemId: contactId,\r\n                        focusOnSelection: true,\r\n                        tabIndex: 0,\r\n                        touchedOnly: true,\r\n                    }}\r\n                />\r\n            </ErrorBoundary>\r\n        )\r\n    }, [\r\n        getContactKey,\r\n        highlight,\r\n        noControls,\r\n        onCall,\r\n        onChat,\r\n        onClick,\r\n        onDoubleClick,\r\n        onEmail,\r\n        openContactDetails,\r\n        query,\r\n        scrollNode,\r\n        selectedId,\r\n        transferControlsStyle,\r\n        transferMode,\r\n    ])\r\n\r\n    const emptyMessage = useMemo(() => {\r\n        const messageText = query ? t.DIRECTORY.no_results_external_for_query(query) : t.DIRECTORY.no_results_external()\r\n        return <div className=\"w-full text-center\">{messageText}</div>\r\n    }, [t.DIRECTORY, query])\r\n\r\n    useDirectoryFirstFoundItemAutoSelector(finalContactList)\r\n\r\n    const handleKeyDown = useCallback((e: KeyboardEvent<HTMLDivElement>) => {\r\n        switch (e.key) {\r\n            case 'Escape': {\r\n                searchInputRef?.current?.focus()\r\n                break\r\n            }\r\n            case 'Home': {\r\n                virtuosoRef.current?.scrollIntoView({\r\n                    index: 0,\r\n                    done: () => {\r\n                        focusContactElement(scrollNode, contactsIdsRef.current[0])\r\n                    }})\r\n                break\r\n            }\r\n            case 'End': {\r\n                const lastIndex = contactsIdsRef.current?.length - 1\r\n                virtuosoRef.current?.scrollIntoView({\r\n                    index: lastIndex,\r\n                    done: () => {\r\n                        focusContactElement(scrollNode, contactsIdsRef.current[lastIndex])\r\n                    },\r\n                })\r\n                break\r\n            }\r\n        }\r\n    }, [contactsIdsRef, scrollNode, searchInputRef])\r\n\r\n    const showPlaceholder = contactListLoading || isDebouncingSearch\r\n\r\n    return (\r\n        <div className=\"relative flex flex-auto flex-col overflow-hidden\">\r\n            {withCreateContact && <ExternalUsersHeader />}\r\n            <div\r\n                ref={elem => setScrollNode(elem || undefined)}\r\n                className={tcn('scrollbar-on-hover relative !m-0 flex min-h-0 flex-auto flex-col overflow-y-auto overflow-x-hidden', {\r\n                    'overflow-y-hidden': showPlaceholder,\r\n                })}\r\n            >\r\n                {showPlaceholder ? (\r\n                    <div className=\"absolute inset-x-0\">\r\n                        <ContactListPlaceholder amount={15} />\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <SelectionContainer\r\n                            itemsListProvider={itemsProvider}\r\n                            onItemSelect={onItemSelect}\r\n                            circular={!contactListByChunksLoading}\r\n                            onKeyDown={handleKeyDown}\r\n                        >\r\n                            <Virtuoso\r\n                                ref={virtuosoRef}\r\n                                tabIndex={undefined}\r\n                                data={finalContactList}\r\n                                itemContent={renderContact}\r\n                                computeItemKey={getContactKey}\r\n                                customScrollParent={scrollParent || scrollNode}\r\n                                endReached={fetchMoreContacts}\r\n                                restoreStateFrom={scrollSnapshotData}\r\n                            />\r\n                        </SelectionContainer>\r\n                        {!finalContactList.length && emptyMessage}\r\n                    </>\r\n                )}\r\n            </div>\r\n            <Loader\r\n                active={!showPlaceholder && contactListByChunksLoading}\r\n                size=\"medium\"\r\n                color=\"primary\"\r\n                className=\"absolute bottom-0 top-auto z-10\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction focusContactElement(container: HTMLDivElement | undefined, id: string) {\r\n    container?.querySelector<HTMLDivElement>(`[data-id=\"${id}\"]`)?.focus()\r\n}\r\n","export const UPLOAD_EXTERNAL_CONTACTS_LIMIT = 20\r\n","import React from 'react'\r\n\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\n\r\nimport {CreateContactForm} from './CreateContactForm'\r\nimport type {ExternalContactProps} from './ExternalUsers'\r\nimport {ExternalUsers} from './ExternalUsers'\r\n\r\n\r\nexport const External: React.FC<ExternalContactProps> = props => {\r\n    const createContactMode = useDirectoryUIState(s => s.createContactMode)\r\n\r\n    return createContactMode ? <CreateContactForm /> : <ExternalUsers {...props} />\r\n}\r\n","import type {RefObject} from 'react'\r\nimport {useCallback} from 'react'\r\n\r\nimport {isHTMLElement} from '@bpinc/lib-html-utils'\r\n\r\n\r\nconst MOVE_KEYS = ['ArrowDown', 'ArrowUp', 'Home', 'End']\r\n\r\n/**\r\n * In this hook uses this accordion pattern for handler keys - https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\r\n * It contains regulars rules from link and all optional rules\r\n * @returns callback function that returns the focus of the correct HTML element\r\n */\r\nexport const useDirectoryHandlerKeys = (ref: RefObject<HTMLDivElement>, selector: string): (e: KeyboardEvent) => void => {\r\n    return useCallback((e: KeyboardEvent) => {\r\n        if (!e.target || !isHTMLElement(e.target)) {\r\n            return\r\n        }\r\n        const type = e.target.dataset?.element\r\n        if (type && type === selector && MOVE_KEYS.includes(e.key) && ref.current) {\r\n            const directoryItems = Array.from(ref.current.querySelectorAll<HTMLElement>(`[data-element=\"directory-item\"]`))\r\n            if (!directoryItems.length) {\r\n                return\r\n            }\r\n            let currentFocusIndex = directoryItems.indexOf(e.target) ?? 0\r\n            switch (e.key) {\r\n                case 'ArrowDown':\r\n                    currentFocusIndex = currentFocusIndex < directoryItems.length - 1 ? currentFocusIndex + 1 : 0\r\n                    return directoryItems[currentFocusIndex].focus()\r\n                case 'ArrowUp':\r\n                    currentFocusIndex = currentFocusIndex > 0 ? currentFocusIndex - 1 : directoryItems.length - 1\r\n                    return directoryItems[currentFocusIndex].focus()\r\n                case 'Home':\r\n                    currentFocusIndex = 0\r\n                    return directoryItems[currentFocusIndex].focus()\r\n                case 'End':\r\n                    currentFocusIndex = directoryItems.length - 1\r\n                    return directoryItems[currentFocusIndex].focus()\r\n            }\r\n        }\r\n    }, [ref, selector])\r\n}\r\n","import type {DirectoryObject, DirectoryStateUserObject, SearchUserItem} from '@bpinc/ad-directory-state-types'\r\n\r\n\r\nexport const teamFilter = (teamId: string) => (user: DirectoryStateUserObject) => {\r\n    return user.teamId === teamId\r\n}\r\n\r\nexport const omitSelfInTeams = (teams: DirectoryObject[], selfTeamId?: string) => {\r\n    return teams.map(team => {\r\n        if (team.id === selfTeamId) {\r\n            if (typeof team.usersCount !== 'undefined') {\r\n                return {\r\n                    ...team,\r\n                    usersCount: team.usersCount - 1,\r\n                }\r\n            }\r\n        }\r\n        return team\r\n    })\r\n}\r\n\r\nexport const omitSelfInUsers = (\r\n    users: Array<DirectoryStateUserObject | SearchUserItem>,\r\n    selfUserId?: string,\r\n) => {\r\n    return users.filter(user => user.userId !== selfUserId)\r\n}\r\n","import type {FC, RefObject} from 'react'\r\nimport React, {useRef} from 'react'\r\n\r\nimport type {DirectoryItem as DirectoryItemType} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {getDirectoryItemUniqueId} from '@bpinc/lib-helpers-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {ErrorBoundary} from '@bpinc/lib-ui-elements'\r\n\r\nimport {DirectoryItem} from './user/DirectoryItem'\r\nimport type {OnChatParams, OnEmailParams} from './user/types'\r\n\r\n\r\ninterface Props {\r\n    items: DirectoryItemType[]\r\n    listRef?: RefObject<HTMLDivElement>\r\n    transferMode?: 'messages' | 'calls'\r\n    transferNumberInput?: string\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    highlight?: string\r\n    noControls?: boolean\r\n    selectedId?: string\r\n    contentClassName?: string\r\n    onCall?: (callParams: InitiateCall) => void\r\n    onChat?: (chatParams: OnChatParams) => void\r\n    onEmail?: (emailParams: OnEmailParams) => void\r\n    onDetails?: (params: OpenContactDetailsParams) => void\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItemType) => void\r\n    onDoubleClick?: (item: DirectoryItemType) => void\r\n    isHighlighted?: (item: DirectoryItemType) => boolean\r\n}\r\n\r\nexport const DirectoryItems: FC<Props> = ({\r\n    transferMode,\r\n    transferNumberInput,\r\n    transferControlsStyle,\r\n    items,\r\n    highlight,\r\n    listRef,\r\n    selectedId,\r\n    noControls,\r\n    contentClassName,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    onClick,\r\n    onDoubleClick,\r\n    isHighlighted,\r\n}) => {\r\n    const innerListRef = useRef<HTMLDivElement>(null)\r\n    const finalListRef = listRef || innerListRef\r\n\r\n    return (\r\n        <div ref={innerListRef} className={tcn('[&>div]:border-b [&>div]:border-main-border [&>div]:last:border-b-0', 'ui divided relaxed list')}>\r\n            {items.map((item, index) => {\r\n                const isSelected = selectedId === getDirectoryItemUniqueId(item)\r\n                return (\r\n                    <ErrorBoundary key={index} fallback={null}>\r\n                        <DirectoryItem\r\n                            onDoubleClick={onDoubleClick}\r\n                            listNode={finalListRef.current}\r\n                            noControls={noControls}\r\n                            item={item}\r\n                            onCall={onCall}\r\n                            onChat={onChat}\r\n                            onEmail={onEmail}\r\n                            isSelected={isHighlighted?.(item) || isSelected}\r\n                            showControls={isSelected}\r\n                            onDetails={onDetails}\r\n                            transferMode={transferMode}\r\n                            transferNumberInput={transferNumberInput}\r\n                            transferControlsStyle={transferControlsStyle}\r\n                            highlight={highlight}\r\n                            contentClassName={contentClassName}\r\n                            onClick={onClick}\r\n                        />\r\n                    </ErrorBoundary>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React, {Fragment, useMemo} from 'react'\r\n\r\nimport type {AnyEmiUser, DirectoryEntry, DirectoryItem, SearchResult} from '@bpinc/ad-directory-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useDefaultTransferMode} from '@bpinc/ad-interaction-state-context'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {isDirectoryEntry, isMsTeamsChannel} from '@bpinc/lib-helpers-ui'\r\nimport type {Dictionary} from '@bpinc/lib-types-helpers'\r\nimport {isDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useDirectoryFirstFoundItemAutoSelector} from '../hooks/useDirectoryFirstFoundItemAutoSelector'\r\nimport {omitSelfInUsers} from '../utils'\r\nimport type {OnChatParams, OnEmailParams} from './user/types'\r\nimport {DirectoryItems} from './DirectoryItems'\r\n\r\n\r\ninterface Props {\r\n    transferMode?: 'messages' | 'calls'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    query?: string\r\n    filteredSearchResults: SearchResult\r\n    filteredDirectoryEntries: Dictionary<DirectoryEntry[]>\r\n    emptyMessage?: React.ReactNode\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: OnChatParams) => void\r\n    onEmail: (emailParams: OnEmailParams) => void\r\n    onDetails: (params: OpenContactDetailsParams) => void\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItem) => void\r\n    onDoubleClick?: (item: DirectoryItem) => void\r\n    isHighlighted?: (item: DirectoryItem) => boolean\r\n}\r\n\r\nconst userTypeOrder = [undefined, 'msteams', 'msteams_channels'] as const\r\nfunction sortByUserType(a: AnyEmiUser, b: AnyEmiUser): number {\r\n    const aIndex = userTypeOrder.indexOf(a.userType as 'msteams' | 'msteams_channels' | undefined)\r\n    const bIndex = userTypeOrder.indexOf(b.userType as 'msteams' | 'msteams_channels' | undefined)\r\n    if (aIndex > bIndex) return 1\r\n    if (aIndex < bIndex) return -1\r\n    return 0\r\n}\r\n\r\nfunction getName(formatFullName: (firstName: string, lastName: string) => string, item: DirectoryItem): string {\r\n    if (isMsTeamsChannel(item) || isDirectoryEntry(item)) {\r\n        return item.title\r\n    }\r\n\r\n    return formatFullName(item.firstName, item.lastName)\r\n}\r\n\r\nfunction sortByName(formatFullName: (firstName: string, lastName: string) => string, a: DirectoryItem, b: DirectoryItem): number {\r\n    const getFormattedName = getName.bind(null, formatFullName)\r\n    const aName = getFormattedName(a).toLowerCase()\r\n    const bName = getFormattedName(b).toLowerCase()\r\n\r\n    if (aName > bName) return 1\r\n    if (aName < bName) return -1\r\n\r\n    return 0\r\n}\r\n\r\nexport const SearchResults: React.FC<Props> = props => {\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n    const selected = useDirectoryUIState(s => s.selected)\r\n    const {formatFullName} = useFormatting()\r\n    const {\r\n        query,\r\n        transferMode = defaultTransferMode,\r\n        filteredSearchResults,\r\n        filteredDirectoryEntries,\r\n        emptyMessage,\r\n        ...rest\r\n    } = props\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    const items = useMemo(() => {\r\n        const emi = filteredSearchResults.data.emiUsers as Record<string, AnyEmiUser[]>\r\n        const sortByFormattedName = sortByName.bind(null, formatFullName)\r\n        const {\r\n            directoryEntries: directoryEntriesFromSearch,\r\n            users: usersFromSearch,\r\n        } = filteredSearchResults.data\r\n        const planeFilteredDirectoryEntries = Object.values(filteredDirectoryEntries).flat(1)\r\n\r\n        console.log('@@@ filteredSearchResults:', filteredSearchResults)\r\n\r\n        /** It is a known issue that search returns not enough data to display directory entry correctly.\r\n         * For this reason we need to prefetch all directory entries in directory\r\n         * and use their data in search results instead\r\n        */\r\n        const directoryEntries = directoryEntriesFromSearch.map(({id}) => {\r\n            return planeFilteredDirectoryEntries.find(entry => entry.id === id)\r\n        }).filter(isDefined)\r\n\r\n        // Display order:\r\n        return [\r\n            // 1) internal users\r\n            ...omitSelfInUsers(usersFromSearch, selfUserId),\r\n            // 2) directory entries\r\n            ...directoryEntries.sort(sortByFormattedName),\r\n            // 3) emi users (msteams users, then msteams channels)\r\n            ...Object.keys(emi).reduce<AnyEmiUser[]>((arr, categoryKey) => {\r\n                emi[categoryKey]?.forEach(user => arr.push(user))\r\n                return arr\r\n            }, [])\r\n                .sort(sortByFormattedName).sort(sortByUserType),\r\n        ]\r\n    }, [filteredDirectoryEntries, filteredSearchResults.data, formatFullName, selfUserId])\r\n\r\n    useDirectoryFirstFoundItemAutoSelector(items)\r\n\r\n    if (items.length === 0) {\r\n        return <Fragment>{emptyMessage}</Fragment>\r\n    }\r\n\r\n    return (\r\n        <DirectoryItems\r\n            transferMode={transferMode}\r\n            transferNumberInput={query}\r\n            items={items}\r\n            highlight={query}\r\n            selectedId={selected}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n","export const directoryFolderTypes = {\r\n    TEAM: 'TEAM',\r\n    CATEGORY: 'CATEGORY',\r\n    SEARCH_TEAM: 'SEARCH_TEAM',\r\n    SEARCH_CATEGORY: 'SEARCH_CATEGORY',\r\n    EMI_CATEGORY: 'EMI_CATEGORY',\r\n} as const\r\n\r\nexport type DirectoryFolderType = typeof directoryFolderTypes[keyof typeof directoryFolderTypes]\r\n\r\n\r\nexport type OpenFolders = {\r\n    list: string[]\r\n    diff: {\r\n        added: string[]\r\n        removed: string[]\r\n    }\r\n}\r\n\r\nconst ACTIVE_GROUP_STORAGE_NAME = 'adcDirectoryInternalActiveGroup'\r\nconst ACTIVE_GROUP_FOR_SEARCH_STORAGE_NAME = 'adcDirectoryInternalActiveGroupForSearch'\r\n\r\n\r\nexport function getActiveGroupStorageName({isSearchMode}: {isSearchMode: boolean }) {\r\n    return isSearchMode ? ACTIVE_GROUP_FOR_SEARCH_STORAGE_NAME : ACTIVE_GROUP_STORAGE_NAME\r\n}\r\n","import React from 'react'\r\n\r\nimport type {\r\n    DirectoryEntry,\r\n    DirectoryObject,\r\n    DirectoryStateUserObject,\r\n    EmiUsers,\r\n    SearchDirectoryCategory,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport {assertEmiCategoryId} from '@bpinc/ad-directory-state-types'\r\nimport type {Dictionary} from '@bpinc/lib-types-helpers'\r\nimport {Highlight} from '@bpinc/lib-ui-elements'\r\n\r\nimport {teamFilter} from '../../utils'\r\nimport type {DirectoryFolderType} from './helpers'\r\nimport {directoryFolderTypes} from './helpers'\r\n\r\n\r\ntype DirectoryFolderItem = DirectoryObject | SearchDirectoryCategory\r\n\r\ntype Props = {\r\n    type: DirectoryFolderType\r\n    folderItem: DirectoryFolderItem\r\n    users: DirectoryStateUserObject[]\r\n    directoryEntries: Dictionary<DirectoryEntry[]>\r\n    emiUsers: EmiUsers\r\n    searchQuery?: string\r\n}\r\n\r\nexport const DirectoryFolderTitle: React.FC<Props> = ({\r\n    type,\r\n    folderItem,\r\n    users,\r\n    directoryEntries,\r\n    emiUsers,\r\n    searchQuery,\r\n}) => {\r\n\r\n    const childrenCount = getFolderChildrenCount()\r\n    const showCount = childrenCount !== undefined\r\n\r\n    function getFolderChildrenCount(): number | undefined {\r\n        switch (type) {\r\n            case directoryFolderTypes.TEAM:\r\n                return 'usersCount' in folderItem\r\n                    ? folderItem.usersCount\r\n                    : users.filter(teamFilter(folderItem.id)).length\r\n\r\n            case directoryFolderTypes.CATEGORY:\r\n                return directoryEntries[folderItem.id]?.length\r\n\r\n            case directoryFolderTypes.EMI_CATEGORY:\r\n                assertEmiCategoryId(folderItem.id)\r\n                return emiUsers[folderItem.id]?.length\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span\r\n                data-testid=\"category-title\"\r\n                className=\"body text-primary-on-primary\"\r\n            >\r\n                {searchQuery\r\n                    ? <Highlight text={searchQuery}>{folderItem.name}</Highlight>\r\n                    : folderItem.name\r\n                }\r\n            </span>\r\n            {showCount && (\r\n                <span className=\"ml-2 font-semibold caption-s text-neutral-disabled \">\r\n                    (\r\n                    {childrenCount}\r\n)\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {AnyEmiUser, DirectoryStateData, SearchDirectoryCategory} from '@bpinc/ad-directory-state-types'\r\n\r\nimport {teamFilter} from '../../utils'\r\nimport type {DirectoryFolderType} from './helpers'\r\nimport {directoryFolderTypes} from './helpers'\r\n\r\n\r\nexport function useUsersList(type: DirectoryFolderType, item: SearchDirectoryCategory, {\r\n    users = [],\r\n    categoryEntries = {},\r\n    emiUsers = {},\r\n}: Pick<DirectoryStateData, 'users' | 'categoryEntries' | 'emiUsers'>) {\r\n    return useMemo(() => {\r\n        switch (type) {\r\n            case directoryFolderTypes.TEAM:\r\n            case directoryFolderTypes.SEARCH_TEAM:\r\n                return [...users]\r\n                    .filter(teamFilter(item.id))\r\n            case directoryFolderTypes.CATEGORY:\r\n            case directoryFolderTypes.SEARCH_CATEGORY:\r\n                return [...(categoryEntries[item.id] || [])].sort((a, b) => {\r\n                    const aTitle = `${a.title} ${a.number ?? a.email}`.toLowerCase()\r\n                    const bTitle = `${b.title} ${b.number ?? b.email}`.toLowerCase()\r\n\r\n                    return stringComparison(aTitle, bTitle)\r\n                })\r\n            case directoryFolderTypes.EMI_CATEGORY:\r\n                return [...(emiUsers as Record<string, AnyEmiUser[]>)[item.id] || []].sort((a, b) => {\r\n                    return stringComparison(a.title || '', b.title || '')\r\n                })\r\n            default:\r\n                return []\r\n        }\r\n    }, [categoryEntries, emiUsers, item.id, type, users])\r\n}\r\n\r\nfunction stringComparison(a: string, b: string) {\r\n    if (a > b) {\r\n        return 1\r\n    }\r\n    if (a < b) {\r\n        return -1\r\n    }\r\n    return 0\r\n}\r\n","import React, {useId} from 'react'\r\n\r\nimport type {\r\n    DirectoryEntry,\r\n    DirectoryItem,\r\n    DirectoryStateUserObject,\r\n    EmiUsers,\r\n    SearchDirectoryCategory,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconChevronDown16, IconChevronRight16} from '@bpinc/lib-jskit-ui'\r\nimport type {Dictionary} from '@bpinc/lib-types-helpers'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {DirectoryItems} from '../DirectoryItems'\r\nimport type {OnChatParams, OnEmailParams} from '../user/types'\r\nimport {DirectoryFolderTitle} from './DirectoryFolderTitle'\r\nimport type {DirectoryFolderType} from './helpers'\r\nimport {useUsersList} from './useUsersList'\r\n\r\n\r\ntype DirectoryFolderItem = {\r\n    transferMode?: 'calls' | 'messages'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    query?: string\r\n    type: DirectoryFolderType\r\n    opened: boolean\r\n    item: SearchDirectoryCategory\r\n    listRef?: React.RefObject<HTMLDivElement>\r\n    filteredUsers: DirectoryStateUserObject[]\r\n    filteredDirectoryEntries: Dictionary<DirectoryEntry[]>\r\n    filteredEmiUsers: EmiUsers\r\n    toggleDirectoryFolder: (folderId: string) => void\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: OnChatParams) => void\r\n    onEmail: (emailParams: OnEmailParams) => void\r\n    onDetails: (params: OpenContactDetailsParams) => void\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItem) => void\r\n    onDoubleClick?: (item: DirectoryItem) => void\r\n    isHighlighted?: (item: DirectoryItem) => boolean\r\n}\r\n\r\nexport const DirectoryFolderItem: React.FC<DirectoryFolderItem> = React.memo(({\r\n    filteredUsers,\r\n    filteredDirectoryEntries,\r\n    filteredEmiUsers,\r\n    type,\r\n    item,\r\n    opened,\r\n    query,\r\n    transferMode,\r\n    transferControlsStyle,\r\n    listRef,\r\n    toggleDirectoryFolder,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    onClick,\r\n    isHighlighted,\r\n    onDoubleClick,\r\n}) => {\r\n\r\n    const ariaId1 = useId()\r\n\r\n    const itemsList = useUsersList(type, item, {\r\n        users: filteredUsers,\r\n        categoryEntries: filteredDirectoryEntries,\r\n        emiUsers: filteredEmiUsers,\r\n    })\r\n\r\n    const folderClickHandler = useEvent(() => {\r\n        toggleDirectoryFolder(item.id)\r\n    })\r\n\r\n    const IconChevron = opened ? IconChevronDown16 : IconChevronRight16\r\n\r\n    return (\r\n        <>\r\n            <SelectionItem\r\n                focusOnSelection\r\n                className=\"flex w-full cursor-pointer items-center px-1 py-1.5 bg-primary-background\"\r\n                tabIndex={0}\r\n                data-testid=\"directory-folder\"\r\n                data-element=\"directory-item\"\r\n                aria-expanded={opened ? 'true' : 'false'}\r\n                aria-controls={ariaId1}\r\n                onClick={folderClickHandler}\r\n            >\r\n                <IconChevron className=\"mr-2\" />\r\n                <DirectoryFolderTitle\r\n                    type={type}\r\n                    folderItem={item}\r\n                    users={filteredUsers}\r\n                    directoryEntries={filteredDirectoryEntries}\r\n                    emiUsers={filteredEmiUsers}\r\n                    searchQuery={query}\r\n                />\r\n            </SelectionItem>\r\n\r\n            <div id={ariaId1}>\r\n                {opened && (\r\n                    <DirectoryItems\r\n                        listRef={listRef}\r\n                        transferMode={transferMode}\r\n                        transferNumberInput={query}\r\n                        transferControlsStyle={transferControlsStyle}\r\n                        items={itemsList}\r\n                        onCall={onCall}\r\n                        onChat={onChat}\r\n                        onEmail={onEmail}\r\n                        onDetails={onDetails}\r\n                        highlight={query}\r\n                        onClick={onClick}\r\n                        onDoubleClick={onDoubleClick}\r\n                        isHighlighted={isHighlighted}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\n\r\nimport type {OnEmailParams} from '../user/types'\r\n\r\n\r\nexport function useContentHandlers() {\r\n\r\n    const {createCaseEmail} = useCaseStateMethods()\r\n\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const onCall = useEvent((callParams: InitiateCall) => {\r\n        handleCall({...callParams, navigateToInteractionsPage: true})\r\n    })\r\n\r\n    const onEmail = useEvent((emailParams: OnEmailParams) => {\r\n        createCaseEmail(emailParams)\r\n    })\r\n\r\n    return {\r\n        onChat: openActivityHistory,\r\n        onCall,\r\n        onEmail,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport type {DirectoryObject, SearchDirectoryCategory, SearchResult} from '@bpinc/ad-directory-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport {omitSelfInTeams} from '../../utils'\r\nimport type {DirectoryFolderType} from './helpers'\r\nimport {directoryFolderTypes} from './helpers'\r\n\r\n\r\ninterface UseDirectoryListParams {\r\n    isSearchMode: boolean\r\n    filteredCategories: DirectoryObject[]\r\n    filteredSearchResults: SearchResult\r\n}\r\n\r\nexport interface DirectoryListItem {\r\n    type: DirectoryFolderType\r\n    item: SearchDirectoryCategory\r\n}\r\n\r\nexport function useDirectoryFoldersList({\r\n    filteredCategories,\r\n    isSearchMode,\r\n    filteredSearchResults,\r\n}: UseDirectoryListParams): DirectoryListItem[] {\r\n\r\n    const {teams, emiCategories} = useDirectoryState(['teams', 'emiCategories'])\r\n    const {teamId: selfTeamId} = useSessionState()\r\n\r\n    return useMemo(\r\n        function memoizeDirectoryList() {\r\n            return isSearchMode\r\n                ? getSearchResultsAsOneList(filteredSearchResults)\r\n                : getItemsAsOneList(\r\n                    omitSelfInTeams(teams, selfTeamId),\r\n                    filteredCategories,\r\n                    emiCategories,\r\n                )\r\n        },\r\n        [\r\n            filteredCategories,\r\n            emiCategories,\r\n            filteredSearchResults,\r\n            isSearchMode,\r\n            selfTeamId,\r\n            teams,\r\n        ],\r\n    )\r\n}\r\n\r\nfunction sortByNameAsc(a: DirectoryListItem, b: DirectoryListItem): number {\r\n    if (a.item.name.toLowerCase() > b.item.name.toLowerCase()) return 1\r\n    if (a.item.name.toLowerCase() < b.item.name.toLowerCase()) return -1\r\n    return 0\r\n}\r\n\r\nconst getItemsAsOneList = (\r\n    teams: DirectoryObject[],\r\n    categories: DirectoryObject[],\r\n    emiCategories: DirectoryObject[],\r\n) => {\r\n    return [\r\n        ...teams.map(item => ({\r\n            type: directoryFolderTypes.TEAM,\r\n            item,\r\n        })),\r\n        ...categories.map(item => ({\r\n            type: directoryFolderTypes.CATEGORY,\r\n            item,\r\n        })),\r\n        ...emiCategories.map(item => ({\r\n            type: directoryFolderTypes.EMI_CATEGORY,\r\n            item,\r\n        })),\r\n    ].sort(sortByNameAsc)\r\n}\r\n\r\nfunction getSearchResultsAsOneList(searchResults: SearchResult) {\r\n    if (!searchResults) return []\r\n\r\n    const {directoryCategories, teams} = searchResults.data\r\n\r\n    return [\r\n        ...teams.map(item => ({\r\n            type: directoryFolderTypes.SEARCH_TEAM,\r\n            item,\r\n        })),\r\n        ...directoryCategories.map(item => ({\r\n            type: directoryFolderTypes.SEARCH_CATEGORY,\r\n            item,\r\n        })),\r\n    ].sort(sortByNameAsc)\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useAssociatedChatInteractionProp, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getChatParties} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\n\r\ntype UserAssociatedObject = { userId?: string; contactId?: string }\r\n\r\nexport const useChatPartyUsersFilter = () => {\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const partiesList = useAssociatedChatInteractionProp(interactionId, getChatParties)\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    return useCallback(\r\n        (item: UserAssociatedObject) => {\r\n            return (\r\n                !partiesList?.find(\r\n                    party =>\r\n                        (party.user_id && party.user_id === item.userId) ||\r\n                        (party.contact_id && party.contact_id === item.contactId),\r\n                ) && item.userId != selfUserId\r\n            )\r\n        },\r\n        [partiesList, selfUserId],\r\n    )\r\n}\r\n\r\nexport const useCallPartyUsersFilter = () => {\r\n    const {userId: selfUserId} = useSessionState()\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const partiesList = useInteractionProp(interactionId, activeItem => activeItem?.parties)\r\n\r\n    return useCallback(\r\n        (item: UserAssociatedObject) => {\r\n            return (\r\n                !partiesList?.find(\r\n                    party =>\r\n                        (party.userId && party.userId === item.userId) ||\r\n                        (party.contactId && party.contactId === item.contactId),\r\n                ) && item.userId != selfUserId\r\n            )\r\n        },\r\n        [partiesList, selfUserId],\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useValueUpdated} from '@bpinc/lib-helpers'\r\n\r\nimport type {OpenFolders} from './helpers'\r\nimport {getActiveGroupStorageName} from './helpers'\r\n\r\n\r\nconst EMPTY_OPEN_FOLDERS = {\r\n    list: [],\r\n    diff: {added: [], removed: []},\r\n}\r\n\r\nexport function useOpenFoldersState(query: string | undefined) {\r\n    const localSettings = useLocalSettings()\r\n    const queryChanged = useValueUpdated(query)\r\n\r\n    const [openFolders, setOpenFolders] = useState<OpenFolders>(EMPTY_OPEN_FOLDERS)\r\n    const [searchOpenFolders, setSearchOpenFolders] = useState<OpenFolders>(EMPTY_OPEN_FOLDERS)\r\n\r\n    useEffect(() => {\r\n        if (queryChanged) {\r\n            setSearchOpenFolders(EMPTY_OPEN_FOLDERS)\r\n            localSettings.set(getActiveGroupStorageName({isSearchMode: true}), [])\r\n        }\r\n    }, [localSettings, queryChanged])\r\n\r\n    return query\r\n        ? [searchOpenFolders, setSearchOpenFolders] as const\r\n        : [openFolders, setOpenFolders] as const\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useDirectoryState, useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {useDefaultTransferMode} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useNativeScrollDataManager} from '@bpinc/ad-scroll-state-context-builder'\r\nimport {ContactListPlaceholder} from '@bpinc/lib-contact-list-item-ui'\r\nimport {useEventListener} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {SCROLL_KEYS} from '../../../scroll-context'\r\nimport {useDirectoryHandlerKeys} from '../../hooks/useDirectoryHandlerKeys'\r\nimport {useDirectorySearch} from '../../hooks/useDirectorySearch'\r\nimport {SearchResults} from '../SearchResults'\r\nimport {DirectoryFolderItem} from './DirectoryFolderItem'\r\nimport {useAgentTeamsInitializer} from './useAgentTeamsInitializer'\r\nimport {useContentHandlers} from './useContentHandlers'\r\nimport {useDirectoryFoldersList} from './useDirectoryFoldersList'\r\nimport {useFilteredDirectoryState} from './useFilteredDirectoryState'\r\nimport {useFilteredUsers} from './useFilteredUsers'\r\nimport {useOpenedTeamsRetrieverFromLocalStorage} from './useOpenedTeamsRetrieverFromLocalStorage'\r\nimport {useOpenFoldersState} from './useOpenFoldersState'\r\nimport {useTeamMembersLoader} from './useTeamMembersLoader'\r\nimport {useToggleDirectoryFolder} from './useToggleDirectoryFolder'\r\n\r\n\r\ntype Props = {\r\n    transferMode?: 'messages' | 'calls'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    query?: string\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItem) => void\r\n    onDoubleClick?: (item: DirectoryItem) => void\r\n    isHighlighted?: (item: DirectoryItem) => boolean\r\n    filter?: (item: DirectoryItem) => boolean\r\n}\r\n\r\nexport const Internal: React.FC<Props> = props => {\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n    const isTeamsLoading = useDirectoryState('isTeamsLoading')\r\n    const {\r\n        query,\r\n        transferMode = defaultTransferMode,\r\n        transferControlsStyle,\r\n        onClick,\r\n        onDoubleClick,\r\n        filter,\r\n        isHighlighted,\r\n    } = props\r\n    const [openFolders, setOpenFolders] = useOpenFoldersState(query)\r\n    const {DIRECTORY: i18n} = useLocalizationState('t')\r\n    const isSearchMode = !!query\r\n\r\n    const {\r\n        filteredSearchResults,\r\n        filteredDirectoryEntries,\r\n        filteredCategories,\r\n        filteredEmiUsers,\r\n    } = useFilteredDirectoryState({transferMode, filter})\r\n\r\n    const filteredUsers = useFilteredUsers({transferMode, filter})\r\n\r\n    const foldersList = useDirectoryFoldersList({\r\n        isSearchMode,\r\n        filteredSearchResults,\r\n        filteredCategories,\r\n    })\r\n\r\n    const {findContacts} = useDirectoryStateMethods()\r\n\r\n    const {onCall, onChat, onEmail} = useContentHandlers()\r\n\r\n    const openContactDetails = useContactDetailsOpener()\r\n\r\n    useDirectorySearch(query, (q: string) => findContacts(q, 'directory'))\r\n\r\n    useAgentTeamsInitializer()\r\n    useTeamMembersLoader({openFolders, foldersList})\r\n    const retrievedOpenedTeamsFromLocalStorage = useOpenedTeamsRetrieverFromLocalStorage({\r\n        isSearchMode,\r\n        setOpenFolders,\r\n    })\r\n\r\n    const retrieveScrollCondition = useMemo(() => {\r\n        return isSearchMode\r\n            ? !filteredSearchResults.isLoading\r\n            : !!foldersList.length && retrievedOpenedTeamsFromLocalStorage\r\n\r\n    }, [filteredSearchResults.isLoading, isSearchMode, foldersList.length, retrievedOpenedTeamsFromLocalStorage])\r\n\r\n    const listRef = useNativeScrollDataManager(SCROLL_KEYS.directory('internal'), {retrieveScrollCondition})\r\n\r\n    const toggleDirectoryFolder = useToggleDirectoryFolder({isSearchMode, setOpenFolders})\r\n\r\n    const emptyMessage = useMemo(() => {\r\n\r\n        if (filteredSearchResults.count) {\r\n            return (\r\n                <div className=\"text-center\" data-testid=\"too-many-search-results\">\r\n                    {i18n.too_many_results_found()}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const messageText = query\r\n            ? i18n.no_results_internal_for_query(query)\r\n            : i18n.no_results_internal()\r\n\r\n        return <div className=\"text-center\">{messageText}</div>\r\n\r\n    }, [filteredSearchResults.count, query, i18n])\r\n\r\n    const directoryHandlerKeys = useDirectoryHandlerKeys(listRef, 'directory-item')\r\n    useEventListener('keydown', directoryHandlerKeys)\r\n\r\n    const showPlaceholder = (isSearchMode && filteredSearchResults.isLoading) || (isTeamsLoading && !foldersList.length)\r\n\r\n    return (\r\n        <SelectionContainer\r\n            className={tcn(\r\n                'scrollbar-on-hover flex-auto overflow-auto',\r\n                '[&:not(:first-child)]:mt-0 [&:not(:last-child)]:mb-0',\r\n                '[&:not(:last-child)]:border-b [&:not(:last-child)]:border-main-border',\r\n                {'overflow-y-hidden': showPlaceholder},\r\n            )}\r\n        >\r\n            {/* without this extra wrapper with filled background \"scrollbar-on-hover\" produces visual artifacts */}\r\n            <div className=\"bg-primary-background\">\r\n                {showPlaceholder ? (\r\n                    <div className=\"mt-2\">\r\n                        <ContactListPlaceholder amount={15} />\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        {foldersList.map(({type, item}) => (\r\n                            <DirectoryFolderItem\r\n                                key={item.id}\r\n                                type={type}\r\n                                item={item}\r\n                                opened={openFolders.list.includes(item.id)}\r\n                                query={query}\r\n                                transferMode={transferMode}\r\n                                transferControlsStyle={transferControlsStyle}\r\n                                listRef={listRef}\r\n                                filteredUsers={filteredUsers}\r\n                                filteredDirectoryEntries={filteredDirectoryEntries}\r\n                                filteredEmiUsers={filteredEmiUsers}\r\n                                toggleDirectoryFolder={toggleDirectoryFolder}\r\n                                onCall={onCall}\r\n                                onChat={onChat}\r\n                                onEmail={onEmail}\r\n                                onDetails={openContactDetails}\r\n                                onClick={onClick}\r\n                                onDoubleClick={onDoubleClick}\r\n                                isHighlighted={isHighlighted}\r\n                            />\r\n                        ))}\r\n                        {isSearchMode && !filteredSearchResults.isLoading\r\n                            ? (\r\n                                <SearchResults\r\n                                    transferMode={transferMode}\r\n                                    transferControlsStyle={transferControlsStyle}\r\n                                    query={query}\r\n                                    filteredSearchResults={filteredSearchResults}\r\n                                    filteredDirectoryEntries={filteredDirectoryEntries}\r\n                                    emptyMessage={emptyMessage}\r\n                                    onCall={onCall}\r\n                                    onChat={onChat}\r\n                                    onEmail={onEmail}\r\n                                    onDetails={openContactDetails}\r\n                                    onClick={onClick}\r\n                                    onDoubleClick={onDoubleClick}\r\n                                    isHighlighted={isHighlighted}\r\n                                />\r\n                            )\r\n                            : null\r\n                        }\r\n                        {!isSearchMode && !foldersList.length\r\n                            ? emptyMessage\r\n                            : null\r\n                        }\r\n                    </>\r\n                )}\r\n            </div>\r\n        </SelectionContainer>\r\n    )\r\n}\r\n\r\n","import {useEffect} from 'react'\r\n\r\nimport {useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useAgentTeamsInitializer() {\r\n    const {privileges} = useSessionState()\r\n\r\n    const directoryStateMethods = useDirectoryStateMethods()\r\n\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n\r\n    useEffect(() => {\r\n        if (privilegesLoaded && privileges.CAN_VIEW_DIRECTORY) {\r\n            directoryStateMethods.getAgentTeams()\r\n        }\r\n    }, [directoryStateMethods, privileges.CAN_VIEW_DIRECTORY, privilegesLoaded])\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\nimport {mapValues, pickBy} from 'lodash-es'\r\n\r\nimport {useDirectorySearchResultsState, useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport type {\r\n    DirectoryItem,\r\n    EmiUsers,\r\n    MsTeamsChannel,\r\n    MsTeamsUser,\r\n    SearchResult,\r\n} from '@bpinc/ad-directory-state-types'\r\nimport {MS_TEAMS_CHANNELS_CATEGORY_ID, MS_TEAMS_CHATS_CATEGORY_ID} from '@bpinc/ad-directory-state-types'\r\nimport {getMsTeamsUserPrimaryPhoneNumber} from '@bpinc/ad-emi-helpers'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\ntype UseFilterDataParams = {\r\n    transferMode?: 'messages' | 'calls'\r\n    filter: ((user: DirectoryItem) => boolean) | undefined\r\n}\r\n\r\nexport function useFilteredDirectoryState({\r\n    transferMode,\r\n    filter = () => true,\r\n}: UseFilterDataParams) {\r\n    const {categories, categoryEntries, emiUsers} = useDirectoryState(\r\n        ['categories', 'categoryEntries', 'emiUsers'],\r\n    )\r\n    const searchResults = useDirectorySearchResultsState()\r\n    const {privileges} = useSessionState()\r\n\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n\r\n    const msTeamsUserFilter = useCallback((user: MsTeamsUser) => {\r\n        if (transferMode === 'messages') {\r\n            return user.hasChat\r\n        } else if (transferMode === 'calls') {\r\n            return getMsTeamsUserPrimaryPhoneNumber(user.phones) !== undefined\r\n        } else {\r\n            return true\r\n        }\r\n    }, [transferMode])\r\n\r\n    const msTeamsChannelFilter = useCallback((_channel: MsTeamsChannel) => {\r\n        return !transferMode\r\n    }, [transferMode])\r\n\r\n\r\n    const filteredSearchResults = useMemo((): SearchResult => {\r\n        return {\r\n            ...searchResults,\r\n            count: searchResults.count ? Number(searchResults.count) : undefined,\r\n            data: {\r\n                ...searchResults.data,\r\n                directoryEntries: searchResults.data.directoryEntries,\r\n                emiUsers: {\r\n                    msteamsUsers: searchResults.data.emiUsers.msteamsUsers?.filter(\r\n                        u => msTeamsUserFilter(u) && filter(u),\r\n                    ),\r\n                    msteamsChannels: searchResults.data.emiUsers.msteamsChannels?.filter(u =>\r\n                        msTeamsChannelFilter(u) && filter(u),\r\n                    ),\r\n                },\r\n                users:\r\n                    privilegesLoaded && privileges.CAN_VIEW_DIRECTORY\r\n                        ? searchResults.data.users.filter(filter)\r\n                        : [],\r\n                usersWithoutCurrentUser:\r\n                    privilegesLoaded && privileges.CAN_VIEW_DIRECTORY\r\n                        ? searchResults.data.usersWithoutCurrentUser.filter(filter)\r\n                        : [],\r\n                teams: privilegesLoaded && privileges.CAN_VIEW_DIRECTORY\r\n                    ? searchResults.data.teams\r\n                    : [],\r\n            },\r\n        }\r\n    }, [\r\n        filter,\r\n        searchResults,\r\n        msTeamsUserFilter,\r\n        msTeamsChannelFilter,\r\n        privilegesLoaded,\r\n        privileges.CAN_VIEW_DIRECTORY,\r\n    ])\r\n\r\n    const filteredDirectoryEntries = useMemo(() => {\r\n        return pickBy(mapValues(categoryEntries, entry => entry.filter(filter)), items => items.length)\r\n    }, [categoryEntries, filter])\r\n\r\n    const filteredCategories = useMemo(\r\n        function memoizeFilteredCategories() {\r\n            return categories.filter(\r\n                category => category.id in filteredDirectoryEntries,\r\n            )\r\n        },\r\n        [categories, filteredDirectoryEntries],\r\n    )\r\n\r\n    const filteredEmiUsers = useMemo<EmiUsers>(() => ({\r\n        [MS_TEAMS_CHATS_CATEGORY_ID]: emiUsers[MS_TEAMS_CHATS_CATEGORY_ID]?.filter(msTeamsUserFilter),\r\n        [MS_TEAMS_CHANNELS_CATEGORY_ID]: emiUsers[MS_TEAMS_CHANNELS_CATEGORY_ID]?.filter(msTeamsChannelFilter),\r\n    }), [emiUsers, msTeamsChannelFilter, msTeamsUserFilter])\r\n\r\n    return {\r\n        filteredSearchResults,\r\n        filteredDirectoryEntries,\r\n        filteredCategories,\r\n        filteredEmiUsers,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\n\r\nimport {useCallPartyUsersFilter, useChatPartyUsersFilter} from '../../hooks'\r\n\r\n\r\ninterface UseUsersFilterParams {\r\n    transferMode?: 'messages' | 'calls'\r\n    filter: ((item: DirectoryItem) => boolean) | undefined\r\n}\r\nexport function useFilteredUsers({transferMode, filter = () => true}: UseUsersFilterParams) {\r\n    const usersWithoutSelf = useDirectoryState('usersWithoutCurrentUser')\r\n    const chatUsersFilter = useChatPartyUsersFilter()\r\n    const callUsersFilter = useCallPartyUsersFilter()\r\n\r\n    return useMemo(() => {\r\n        if (transferMode === 'messages') {\r\n            return usersWithoutSelf.filter(i => chatUsersFilter(i) && filter(i))\r\n        } else if (transferMode === 'calls') {\r\n            return usersWithoutSelf.filter(i => callUsersFilter(i) && filter(i))\r\n        } else {\r\n            return usersWithoutSelf.filter(filter)\r\n        }\r\n    }, [transferMode, usersWithoutSelf, chatUsersFilter, filter, callUsersFilter])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\n\r\nimport type {OpenFolders} from './helpers'\r\nimport {directoryFolderTypes} from './helpers'\r\nimport type {DirectoryListItem} from './useDirectoryFoldersList'\r\n\r\n\r\ntype UseTeamMembersLoaderParams = {\r\n    openFolders: OpenFolders\r\n    foldersList: DirectoryListItem[]\r\n}\r\n\r\nexport function useTeamMembersLoader({openFolders, foldersList}: UseTeamMembersLoaderParams) {\r\n    const directoryStateMethods = useDirectoryStateMethods()\r\n\r\n    const isInitialLoadRef = useRef(true)\r\n\r\n    useEffect(() => {\r\n        const addedItems = foldersList.filter(({item}) => openFolders.diff.added.indexOf(item.id) !== -1)\r\n        const addedTeamsToLoad = addedItems.filter(({type}) => {\r\n            return type === directoryFolderTypes.TEAM || type === directoryFolderTypes.SEARCH_TEAM\r\n        })\r\n\r\n        // load users of new opened emi teams/categories\r\n        const addedEmiCategoryIds = addedItems.reduce((ids, {item, type}) => {\r\n            if (type === directoryFolderTypes.EMI_CATEGORY) {\r\n                ids.push(item.id)\r\n            }\r\n            return ids\r\n        }, [] as string[])\r\n        addedEmiCategoryIds.forEach(emiCategoryId => {\r\n            directoryStateMethods.getCategoryUsers(emiCategoryId)\r\n        })\r\n\r\n        // load users of all opened teams\r\n        if (isInitialLoadRef.current || addedTeamsToLoad.length) {\r\n            const openedItems = foldersList.filter(({item}) => openFolders.list.indexOf(item.id) !== -1)\r\n            const teamsToLoad = openedItems\r\n                .filter(({type}) => type === directoryFolderTypes.TEAM || type === directoryFolderTypes.SEARCH_TEAM)\r\n                .map(item => item.item.id)\r\n\r\n            if (teamsToLoad.length) {\r\n                directoryStateMethods.getLoggedUsers(teamsToLoad)\r\n                isInitialLoadRef.current = false\r\n            }\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isInitialLoadRef, directoryStateMethods, openFolders, foldersList.length])\r\n}\r\n","import type {Dispatch, SetStateAction} from 'react'\r\nimport {useEffect, useState} from 'react'\r\n\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\n\r\nimport type {OpenFolders} from './helpers'\r\nimport {getActiveGroupStorageName} from './helpers'\r\n\r\n\r\ntype UseOpenedTeamsRetrieverFromLocalStorageParams = {\r\n    isSearchMode: boolean\r\n    setOpenFolders: Dispatch<SetStateAction<OpenFolders>>\r\n}\r\n\r\nexport function useOpenedTeamsRetrieverFromLocalStorage(\r\n    {isSearchMode, setOpenFolders}: UseOpenedTeamsRetrieverFromLocalStorageParams,\r\n) {\r\n    const localSettings = useLocalSettings()\r\n    const [retrievedFromLocalStorage, setRetrievedFromLocalStorage] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        setRetrievedFromLocalStorage(false)\r\n\r\n        localSettings.get(getActiveGroupStorageName({isSearchMode})).then(list => {\r\n            if (typeof list !== 'undefined') {\r\n                setOpenFolders({list, diff: {added: [], removed: []}})\r\n            }\r\n            setRetrievedFromLocalStorage(true)\r\n        })\r\n    }, [isSearchMode, localSettings, setOpenFolders])\r\n\r\n    return retrievedFromLocalStorage\r\n}\r\n","import type {Dispatch, SetStateAction} from 'react'\r\n\r\nimport {useLocalSettings} from '@bpinc/ad-local-settings-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\n\r\nimport type {OpenFolders} from './helpers'\r\nimport {getActiveGroupStorageName} from './helpers'\r\n\r\n\r\ntype DirectoryFolderToggleParams = {\r\n    isSearchMode: boolean\r\n    setOpenFolders: Dispatch<SetStateAction<OpenFolders>>\r\n}\r\n\r\nexport function useToggleDirectoryFolder({isSearchMode, setOpenFolders}: DirectoryFolderToggleParams) {\r\n    const localSettings = useLocalSettings()\r\n\r\n    return useEvent((folderId: string) => {\r\n        setOpenFolders(state => {\r\n\r\n            let newList, newDiff\r\n\r\n            if (state.list.includes(folderId)) {\r\n                newList = state.list.filter(id => id !== folderId)\r\n                newDiff = {added: [], removed: [folderId]}\r\n            } else {\r\n                newList = [...state.list, folderId]\r\n                newDiff = {added: [folderId], removed: []}\r\n            }\r\n\r\n            localSettings.set(getActiveGroupStorageName({isSearchMode}), newList)\r\n\r\n            return {list: newList, diff: newDiff}\r\n        })\r\n    })\r\n}\r\n","export function combineDirectoryNavigationByArrows(e: React.KeyboardEvent) {\r\n    if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') {\r\n        return\r\n    }\r\n\r\n    const container = e.currentTarget\r\n    const currentElement = e.target\r\n    const internalItems = container.querySelectorAll(\r\n        '[data-combined-directory=\"internal\"] [data-element=\"directory-item\"]',\r\n    )\r\n    const lastInternalItem = internalItems[internalItems.length - 1]\r\n    const externalItems = container.querySelectorAll(\r\n        '[data-combined-directory=\"external\"] [data-element=\"directory-item\"]',\r\n    )\r\n    const externalItemHeader = externalItems[0]\r\n    const firstExternalItem = externalItems[1]\r\n\r\n    switch (e.key) {\r\n        case 'ArrowDown':\r\n            if (currentElement === lastInternalItem && externalItemHeader instanceof HTMLElement) {\r\n                externalItemHeader.focus()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            if (currentElement === externalItemHeader && firstExternalItem instanceof HTMLElement) {\r\n                firstExternalItem.focus()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            break\r\n        case 'ArrowUp':\r\n            if (currentElement === firstExternalItem && externalItemHeader instanceof HTMLElement) {\r\n                externalItemHeader.focus()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            if (currentElement === externalItemHeader && lastInternalItem instanceof HTMLElement) {\r\n                lastInternalItem.focus()\r\n                e.stopPropagation()\r\n            }\r\n            break\r\n    }\r\n}\r\n","import React, {useCallback, useId, useState} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDirectorySearchResultsState} from '@bpinc/ad-directory-state-context'\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {IconChevronDown16, IconChevronRight16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useExternalContactFolderOpenerForSearchMode} from '../../hooks/useExternalContactFolderOpenerForSearchMode'\r\nimport {External} from '../External'\r\nimport {Internal} from '../Internal/'\r\nimport {combineDirectoryNavigationByArrows} from './utils'\r\n\r\n\r\ninterface Props {\r\n    query?: string\r\n    transferMode?: 'messages' | 'calls'\r\n    onClick?: (evt: React.MouseEvent, item: DirectoryItem) => void\r\n    isHighlighted?: (item: DirectoryItem) => boolean\r\n    filter?: (item: DirectoryItem) => boolean\r\n    transferControlsStyle?: 'add' | 'replace'\r\n}\r\n\r\nexport const Combined: React.FC<Props> = ({\r\n    query,\r\n    transferMode,\r\n    onClick,\r\n    transferControlsStyle,\r\n    filter,\r\n    isHighlighted,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    const {\r\n        contactList,\r\n        contactListByChunks,\r\n        contactListLoading: isExternalLoading,\r\n    } = useContactsState([\r\n        'contactList',\r\n        'contactListByChunks',\r\n        'contactListLoading',\r\n    ])\r\n    const {isLoading: isInternalLoading, count: internalSearchResultCount} =\r\n        useDirectorySearchResultsState()\r\n\r\n    const ariaId1 = useId()\r\n    const [isExternalVisible, setIsExternalVisible] = useState<boolean>(false)\r\n\r\n    const externalContactsList = query ? contactList : contactListByChunks\r\n    const isLoading = isInternalLoading || isExternalLoading\r\n    const isSearchMode = !!query?.length\r\n\r\n    const toggleExternalVisibility = useCallback(\r\n        () => setIsExternalVisible(value => !value),\r\n        [],\r\n    )\r\n\r\n    useExternalContactFolderOpenerForSearchMode({\r\n        isSearchMode,\r\n        setIsExternalVisible,\r\n    })\r\n\r\n    const [scrollParent, setScrollParent] = useState<HTMLDivElement | null>(\r\n        null,\r\n    )\r\n\r\n    function getNoResultsMessage() {\r\n        if (!query || isLoading) {\r\n            return null\r\n        }\r\n\r\n        if (!internalSearchResultCount && !externalContactsList.length) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    {t.DIRECTORY.no_results_for_query(query)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const IconChevron = isExternalVisible\r\n        ? IconChevronDown16\r\n        : IconChevronRight16\r\n\r\n    return (\r\n        <div\r\n            onKeyDownCapture={combineDirectoryNavigationByArrows}\r\n            className=\"scrollbar-on-hover overflow-auto\"\r\n            ref={setScrollParent}\r\n        >\r\n            {isLoading && (\r\n                <div className=\"text-center\">{t.GLOBAL.loading()}</div>\r\n            )}\r\n            {getNoResultsMessage()}\r\n            <div\r\n                className={tcn({\r\n                    hidden:\r\n                        isInternalLoading ||\r\n                        (query && !internalSearchResultCount),\r\n                })}\r\n            >\r\n                <div data-combined-directory=\"internal\">\r\n                    <Internal\r\n                        filter={filter}\r\n                        query={query}\r\n                        onClick={onClick}\r\n                        isHighlighted={isHighlighted}\r\n                        transferMode={transferMode}\r\n                        transferControlsStyle={transferControlsStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div data-combined-directory=\"external\">\r\n                <button\r\n                    className=\"flex w-full cursor-pointer items-center px-1 py-1.5 bg-primary-background\"\r\n                    data-testid=\"directory-folder\"\r\n                    data-element=\"directory-item\"\r\n                    aria-expanded={isExternalVisible ? 'true' : 'false'}\r\n                    aria-controls={ariaId1}\r\n                    onClick={toggleExternalVisibility}\r\n                >\r\n                    <IconChevron className=\"mr-2\" />\r\n                    <span\r\n                        data-testid=\"category-title\"\r\n                        className=\"body text-primary-on-primary\"\r\n                    >\r\n                        {t.DIRECTORY.external_contacts()}\r\n                    </span>\r\n                </button>\r\n                <div\r\n                    id={ariaId1}\r\n                    className={tcn('min-h-2 bg-primary-background', {\r\n                        hidden:\r\n                            isExternalLoading ||\r\n                            (query && externalContactsList.length === 0),\r\n                    })}\r\n                >\r\n                    {isExternalVisible && (\r\n                        <External\r\n                            query={query}\r\n                            onClick={onClick}\r\n                            isHighlighted={isHighlighted}\r\n                            scrollParent={scrollParent}\r\n                            withCreateContact={false}\r\n                            transferMode={transferMode}\r\n                            transferControlsStyle={transferControlsStyle}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {TabsContent, TabsList, TabsRoot, TabsTrigger} from '@servicepattern/ui'\r\n\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {\r\n    getDirectoryItemContactId,\r\n    getDirectoryItemFirstName,\r\n    getDirectoryItemLastName,\r\n    getDirectoryItemPhone,\r\n    getDirectoryItemUniqueId,\r\n    getDirectoryItemUserId,\r\n    isMsTeamsUser,\r\n} from '@bpinc/lib-helpers-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ServiceSelect} from '../../components/ServiceSelect'\r\nimport {Internal} from './Internal/'\r\nimport type {OnClickCallbacks} from './user/types'\r\nimport {DirectorySearchControls} from './DirectorySearchControls'\r\nimport {External} from './External'\r\n\r\n\r\nlet singleClickTimeout: number\r\n\r\nexport const DirectoryTabs: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const {\r\n        selected,\r\n        setSelected,\r\n        tabIndex,\r\n        handleTabChange,\r\n        searchValue,\r\n        setSearchValue,\r\n        searchInputRef,\r\n    } = useDirectoryUIState()\r\n    const activeInteractionId = useActiveInteractionId()\r\n\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const onClick = useCallback((evt: React.MouseEvent, item: DirectoryItem) => {\r\n        /** Clicked more than 1 times in a row */\r\n        if (evt.nativeEvent.detail > 1) {\r\n            clearTimeout(singleClickTimeout)\r\n            return\r\n        }\r\n\r\n        /** wait for potential doubleclick before handling a single click*/\r\n        singleClickTimeout = setTimeout(() => {\r\n            const id = getDirectoryItemUniqueId(item)\r\n            setSelected(id)\r\n            const phoneNumber = getDirectoryItemPhone(item)\r\n            if (phoneNumber) {\r\n                setSearchValue(phoneNumber)\r\n            }\r\n        }, 250)\r\n    }, [setSelected, setSearchValue])\r\n\r\n    const onDoubleClick = useCallback((item: DirectoryItem, callbacks?: OnClickCallbacks) => {\r\n        clearTimeout(singleClickTimeout)\r\n        if (callbacks?.onCall) {\r\n            return callbacks.onCall()\r\n        }\r\n\r\n        const phone = getDirectoryItemPhone(item)\r\n        const firstName = getDirectoryItemFirstName(item)\r\n        const lastName = getDirectoryItemLastName(item)\r\n        const userId = getDirectoryItemUserId(item)\r\n        const contactId = getDirectoryItemContactId(item)\r\n\r\n        if (phone) {\r\n            handleCall({\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n                userId,\r\n                contactId,\r\n                navigateToInteractionsPage: true,\r\n            })\r\n        } else {\r\n            openActivityHistory({\r\n                contactId,\r\n                userId,\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n                origination: 'directory',\r\n                emiPhotoUrl: isMsTeamsUser(item) ? item.photoUrl : undefined,\r\n                emiUserType: isMsTeamsUser(item) ? item.userType : undefined,\r\n            })\r\n        }\r\n    }, [handleCall, openActivityHistory])\r\n\r\n    const tabs = useMemo(() => [\r\n        {\r\n            id: 'internal',\r\n            content: t.ADDRESS_BOOK_AREA.tab_directory_internal(),\r\n        },\r\n        {\r\n            id: 'external',\r\n            content: t.ADDRESS_BOOK_AREA.tab_directory_external(),\r\n        },\r\n    ], [t])\r\n\r\n    const onTabChange = useCallback((newTabId: string) => {\r\n        const newTabIndex = tabs.findIndex(tab => tab.id === newTabId)\r\n        handleTabChange(newTabIndex)\r\n    }, [handleTabChange, tabs])\r\n\r\n    const selectedTabId = tabs[Number(tabIndex)].id\r\n\r\n    return (\r\n        <TabsRoot value={selectedTabId} className=\"flex h-full flex-col gap-2.5 px-4 pt-2\">\r\n            <TabsList data-testid=\"directory-tabs\" >\r\n                {tabs.map(tab => (\r\n                    <TabsTrigger\r\n                        key={tab.id}\r\n                        value={tab.id}\r\n                        data-testid={`tab-${tab.id}`}\r\n                        isSelected={tab.id === selectedTabId}\r\n                        onClick={() => onTabChange(tab.id)}\r\n                        className=\"w-full text-center\"\r\n                        triggerClassName={tcn(\r\n                            'py-2',\r\n                            {['text-primary-on-primary']: tab.id === selectedTabId},\r\n                        )}\r\n                    >\r\n                        {tab.content}\r\n                    </TabsTrigger>\r\n                ))}\r\n            </TabsList>\r\n\r\n            <ServiceSelect itemId={activeInteractionId} />\r\n\r\n            <DirectorySearchControls />\r\n\r\n            <TabsContent\r\n                value={selectedTabId}\r\n                className=\"flex min-h-0 !flex-auto flex-col py-1 pr-0.5\"\r\n            >\r\n                {selectedTabId === 'internal' && (\r\n                    <Internal\r\n                        query={searchValue}\r\n                        onClick={onClick}\r\n                        onDoubleClick={onDoubleClick}\r\n                    />\r\n                )}\r\n                {selectedTabId === 'external' && (\r\n                    <External\r\n                        query={searchValue}\r\n                        onClick={onClick}\r\n                        selectedId={selected}\r\n                        onDoubleClick={onDoubleClick}\r\n                        searchInputRef={searchInputRef}\r\n                    />\r\n                )}\r\n            </TabsContent>\r\n        </TabsRoot>\r\n    )\r\n}\r\n","import type {Dispatch, SetStateAction} from 'react'\r\nimport {useEffect, useRef} from 'react'\r\n\r\n\r\ninterface UseExternalContactFolderOpenerForSearchModeParams {\r\n    isSearchMode: boolean\r\n    setIsExternalVisible: Dispatch<SetStateAction<boolean>>\r\n}\r\nexport function useExternalContactFolderOpenerForSearchMode({isSearchMode, setIsExternalVisible}: UseExternalContactFolderOpenerForSearchModeParams) {\r\n    const openedExternalFolderBecauseOfSearchRef = useRef(false)\r\n\r\n    useEffect(function openExternalFolderWhenSearchResultMatches() {\r\n        if (isSearchMode) {\r\n            setIsExternalVisible(isExternalVisible => {\r\n                if (!isExternalVisible) {\r\n                    openedExternalFolderBecauseOfSearchRef.current = true\r\n                }\r\n\r\n                return true\r\n            })\r\n        }\r\n\r\n        if (!isSearchMode && openedExternalFolderBecauseOfSearchRef.current) {\r\n            openedExternalFolderBecauseOfSearchRef.current = false\r\n            setIsExternalVisible(false)\r\n        }\r\n\r\n    }, [isSearchMode, setIsExternalVisible])\r\n\r\n}\r\n","import type {MutableRefObject, ReactNode, RefObject} from 'react'\r\nimport {invert} from 'lodash-es'\r\n\r\nimport type {ContactMessenger} from '@bpinc/ad-request-urls'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport type {Dictionary, StateSetter} from '@bpinc/lib-types-helpers'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\n\r\n\r\nexport const RECENT_TABS = ['all', 'calls', 'messages'] as const\r\nexport const RECENT_TAB_INDEXES: Dictionary<string> = invert(RECENT_TABS)\r\n\r\nexport const TRANSFER_TABS = ['recent', 'favorites', 'directory'] as const\r\nexport const TRANSFER_TAB_INDEXES: Dictionary<string> = invert(TRANSFER_TABS)\r\n\r\nexport const DIRECTORY_TABS = ['internal', 'external'] as const\r\nexport const DIRECTORY_TABS_INDEXES: Dictionary<string> = invert(DIRECTORY_TABS)\r\n\r\nexport interface CommunicatorUIState {\r\n    rightPanelOpened: boolean\r\n    leftPanelOpened: boolean\r\n    settingsOpened: boolean\r\n    toggleLeftPanel: Toggle\r\n    toggleRightPanel: Toggle\r\n    toggleSettings: Toggle\r\n\r\n    transferTabIndex: typeof TRANSFER_TAB_INDEXES[number]\r\n    handleTransferTabChange: HandleTabChange\r\n\r\n    interactionChatFormRef: MutableRefObject<HTMLDivElement | null>\r\n\r\n    recent: RecentUIState\r\n    directory: DirectoryUIState\r\n    dialpad: DialpadUIState\r\n\r\n    serviceSelectorVisible: boolean\r\n    setServiceSelectorVisibility: StateSetter<boolean>\r\n}\r\n\r\ntype HandleTabChange = (newTabIndex: number) => void\r\n\r\n\r\nexport interface FavoritesUIStateData {\r\n    editMode: boolean\r\n    contactMode: FavoriteContactMode | null\r\n    formSubmitError: ReactNode\r\n}\r\n\r\nexport interface FavoriteContactMode {\r\n    view: FavoriteContactModeView\r\n    contact?: Partial<FavoritesItem>\r\n    goBack: VoidFunction[]\r\n}\r\n\r\nexport type FavoriteContactModeView = 'create' | 'modify' | 'preview'\r\n\r\nexport type DialpadUIState = {\r\n    searchValue: string\r\n    setSearchValue: StateSetter<string>\r\n}\r\n\r\nexport type RecentUIStateData = TabUIStateData<typeof RECENT_TAB_INDEXES[number]>\r\n\r\nexport interface RecentUIState extends RecentUIStateData, TabUIStateMethods {}\r\n\r\nexport type DirectoryUIStateData = TabUIStateData<typeof DIRECTORY_TABS_INDEXES[number]> & {\r\n    createContactMode: boolean\r\n    firstFoundItemId: string | undefined\r\n    createContactFormValues: CreateContactFormFields\r\n    searchInputRef: RefObject<HTMLInputElement>\r\n}\r\n\r\n\r\nexport interface DirectoryUIState extends DirectoryUIStateData, TabUIStateMethods {\r\n    toggleCreateContactMode: Toggle\r\n    setFirstFoundItemId: StateSetter<string | undefined>\r\n    setCreateContactFormValues: StateSetter<CreateContactFormFields>\r\n}\r\n\r\n\r\ntype TabUIStateMethods = {\r\n    handleTabChange: HandleTabChange\r\n    setSearchValue: StateSetter<string>\r\n    setSelected: StateSetter<string | undefined>\r\n}\r\n\r\ntype TabUIStateData<T> = {\r\n    tabIndex: T\r\n    searchValue: string\r\n    selected: string | undefined\r\n}\r\n\r\nexport type CreateContactFormFields = {\r\n    firstName: string\r\n    lastName: string\r\n    phone: string\r\n    email: string\r\n    messenger: ContactMessenger | undefined\r\n}\r\n","import type {ChangeEvent, FC} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {isPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {DIRECTORY_TABS} from '@bpinc/lib-communicator-ui-types'\r\nimport {\r\n    getDirectoryItemContactId,\r\n    getDirectoryItemPhone,\r\n    getDirectoryItemPhoneBySearch,\r\n    getDirectoryItemUniqueId,\r\n    getDirectoryItemUserId,\r\n    isMsTeamsUser,\r\n} from '@bpinc/lib-helpers-ui'\r\nimport {isHTMLInputElement} from '@bpinc/lib-html-utils'\r\nimport {SearchField} from '@bpinc/lib-jskit-ui'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {SearchForInteractionControls} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const DirectorySearchControls: FC = () => {\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n\r\n    const users = useDirectoryState('users')\r\n    const {contactList} = useContactsState(['contactList', 'contactListLoading'])\r\n    const {t} = useLocalizationState()\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const {\r\n        tabIndex,\r\n        selected,\r\n        searchValue,\r\n        setSearchValue,\r\n        setSelected,\r\n        firstFoundItemId,\r\n        setFirstFoundItemId,\r\n        searchInputRef,\r\n    } = useDirectoryUIState()\r\n\r\n    const handleSearch = useCallback(\r\n        (e: ChangeEvent) => {\r\n            const input = e.target\r\n            if (!isHTMLInputElement(input)) {\r\n                return\r\n            }\r\n            const newValue = input.value\r\n            setSearchValue(newValue)\r\n            setSelected(undefined)\r\n            setFirstFoundItemId(undefined)\r\n        },\r\n        [setFirstFoundItemId, setSearchValue, setSelected],\r\n    )\r\n\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const directoryTab = DIRECTORY_TABS[+tabIndex]\r\n\r\n    const targetItem = useMemo(\r\n        function memoizeSelectedItem() {\r\n            if (directoryTab === 'internal') {\r\n                return users.find(u => getDirectoryItemUniqueId(u) === (selected || firstFoundItemId))\r\n            }\r\n            return contactList.find(u => getDirectoryItemUniqueId(u) === (selected || firstFoundItemId))\r\n        },\r\n        [contactList, directoryTab, firstFoundItemId, selected, users],\r\n    )\r\n\r\n    const handleCallClick = useCallback(\r\n        function handleCallClickCallback() {\r\n            if (!targetItem) {\r\n                if (!searchValue) {\r\n                    return\r\n                }\r\n                handleCall({\r\n                    serviceId: targetItem,\r\n                    accessNumberId: selectedDIDNumber,\r\n                    phone: searchValue,\r\n                    origination: 'directory',\r\n                    navigateToInteractionsPage: true,\r\n                })\r\n            } else {\r\n                handleCall({\r\n                    phone: getDirectoryItemPhoneBySearch(targetItem, searchValue),\r\n                    firstName: targetItem.firstName,\r\n                    lastName: targetItem.lastName,\r\n                    serviceId: selectedService,\r\n                    contactId: getDirectoryItemContactId(targetItem),\r\n                    userId: getDirectoryItemUserId(targetItem),\r\n                    accessNumberId: selectedDIDNumber,\r\n                    origination: 'directory',\r\n                    navigateToInteractionsPage: true,\r\n                })\r\n            }\r\n        },\r\n        [handleCall, searchValue, selectedDIDNumber, targetItem, selectedService],\r\n    )\r\n\r\n    const handleChatClick = useCallback(\r\n        function handleChatClickCallback() {\r\n            if (!targetItem) {\r\n                if (!searchValue) {\r\n                    return\r\n                }\r\n\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                return openActivityHistory({\r\n                    phone: searchValue,\r\n                    forceSearchForContact: false,\r\n                })\r\n            }\r\n\r\n            hideNotificationsByTag('interaction-init')\r\n\r\n            const userId = getDirectoryItemUserId(targetItem)\r\n            const contactId = getDirectoryItemContactId(targetItem)\r\n\r\n            openActivityHistory({\r\n                contactId,\r\n                userId,\r\n                phone: getDirectoryItemPhone(targetItem),\r\n                origination: 'directory',\r\n                firstName: targetItem.firstName,\r\n                lastName: targetItem.lastName,\r\n                emiPhotoUrl: isMsTeamsUser(targetItem) ? targetItem.photoUrl : undefined,\r\n                emiUserType: isMsTeamsUser(targetItem) ? targetItem.userType : undefined,\r\n            })\r\n        },\r\n        [hideNotificationsByTag, openActivityHistory, searchValue, targetItem],\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex items-start gap-2.5\">\r\n            <SearchField\r\n                value={searchValue}\r\n                onChange={handleSearch}\r\n                ref={searchInputRef}\r\n                layoutClassName=\"grow\"\r\n                data-testid=\"search-input\"\r\n                aria-label={t.DIRECTORY.search_field_placeholder()}\r\n                placeholder={t.DIRECTORY.search_field_placeholder()}\r\n            />\r\n            <SearchForInteractionControls\r\n                onCallClick={handleCallClick}\r\n                showCallButton={!!phoneDeviceCapabilities.canDial}\r\n                callButtonDisabled={!getDirectoryItemPhoneBySearch(targetItem, searchValue) && !isPhone(searchValue)}\r\n                chatButtonDisabled={!targetItem && !isPhone(searchValue)}\r\n                onChatClick={handleChatClick}\r\n                searchQuery={searchValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {PhoneData} from '@bpinc/adapters-public-api-types'\r\n\r\n\r\nexport const PhoneOption: React.FC<PhoneData> = ({\r\n    number,\r\n    type,\r\n    displayType,\r\n}) => {\r\n    const {formatPhoneType} = useFormatting()\r\n\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            <div className=\"mr-2 inline-block w-1/3\">\r\n                <span data-key=\"phone-type\">\r\n                    {displayType || formatPhoneType(type.toUpperCase())}\r\n                </span>\r\n                <span>:</span>\r\n            </div>\r\n            <span data-key=\"phone\">{formatPhone(number)}</span>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\n\r\nimport type {PhoneData} from '@bpinc/adapters-public-api-types'\r\nimport type {ArrayElement} from '@bpinc/lib-types-helpers'\r\nimport type {DropdownProps, UseDropdownOutput} from '@bpinc/lib-ui-elements'\r\nimport {useDropdown} from '@bpinc/lib-ui-elements'\r\n\r\nimport {PhoneOption} from './PhoneOption'\r\n\r\n\r\ntype Options = {\r\n    phones: PhoneData[]\r\n    handleCall: (phone: string) => void\r\n    handleSinglePhoneCall: () => void\r\n}\r\n\r\ninterface DropdownState extends UseDropdownOutput {\r\n    handleCallClick(e: React.MouseEvent): void\r\n}\r\n\r\nexport function useDialCandidatesPhonesDropdown({\r\n    phones,\r\n    handleCall,\r\n    handleSinglePhoneCall,\r\n}: Options): DropdownState {\r\n    const dropdownState = useDropdown()\r\n    const {openerRef, setOptions, show} = dropdownState\r\n\r\n    const onPhoneClick = useCallback(\r\n        (phone: string) => {\r\n            show.setFalse()\r\n            handleCall(phone)\r\n        },\r\n        [show, handleCall],\r\n    )\r\n\r\n    const getPhoneOption = useCallback(\r\n        ({type, number, displayType}: PhoneData): ArrayElement<DropdownProps['options']> => ({\r\n            onClick: () => onPhoneClick(number),\r\n            text: (\r\n                <PhoneOption\r\n                    number={number}\r\n                    type={type}\r\n                    displayType={displayType}\r\n                />\r\n            ),\r\n            value: `${type}_${number}`,\r\n        }),\r\n        [onPhoneClick],\r\n    )\r\n\r\n    const handleCallClick = useCallback(\r\n        (e: React.MouseEvent) => {\r\n            e.persist()\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n\r\n            if (show && e.target === openerRef.current) {\r\n                return show.setFalse()\r\n            }\r\n            if (phones.length > 1) {\r\n                setOptions(phones.map(getPhoneOption))\r\n                openerRef.current = e.target as HTMLButtonElement\r\n                return show.setTrue()\r\n            } else {\r\n                handleSinglePhoneCall()\r\n            }\r\n        },\r\n        [\r\n            handleSinglePhoneCall,\r\n            getPhoneOption,\r\n            openerRef,\r\n            phones,\r\n            setOptions,\r\n            show,\r\n        ],\r\n    )\r\n\r\n    return useMemo(\r\n        () => ({\r\n            handleCallClick,\r\n            dataKey: 'phones-dropdown',\r\n            ...dropdownState,\r\n        }),\r\n        [dropdownState, handleCallClick],\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {DialCandidateWithSource} from '@bpinc/ad-integration-api-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {PhoneData} from '@bpinc/adapters-public-api-types'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {IconChat, IconPhone} from '@bpinc/lib-icons'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {CircleButton, Dropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {useHandlers} from '../../hooks/useHandlers'\r\nimport {removeLeadingPlus} from '../../hooks/usePhoneNumberFormatter'\r\nimport {useDialCandidatesPhonesDropdown} from './useDialCandidatesPhonesDropdown'\r\n\r\n\r\ntype Props = {\r\n    candidate: DialCandidateWithSource\r\n    callNumber: ReturnType<typeof useHandlers>['callNumber']\r\n    initiateChatWith: ReturnType<typeof useHandlers>['initiateChatWith']\r\n}\r\n\r\nfunction getFirstPhone(phones: PhoneData[]): string | undefined {\r\n    if (!phones.length) {\r\n        return undefined\r\n    }\r\n    const businessPhone = phones.find(phone => phone.type === 'business')\r\n    if (businessPhone) {\r\n        return businessPhone.number\r\n    }\r\n    return phones[0].number\r\n}\r\n\r\nexport const CrmDialCandidate: React.FC<Props> = ({candidate, callNumber, initiateChatWith}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const {privileges, phoneDeviceCapabilities} = useSessionState()\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n\r\n    const {email, phones, displayName, associatedObjects} = candidate\r\n    const displayNameParts = displayName.split(': ')\r\n    const displayNameWithoutPrefix = displayNameParts.length > 1 ? displayNameParts[1] : displayName\r\n\r\n    const [firstName, lastName] = getNamesFromDisplayName(displayNameWithoutPrefix)\r\n\r\n    const firstPhone = getFirstPhone(phones)\r\n    const formattedPhone = formatPhone(removeLeadingPlus(firstPhone))\r\n\r\n    const title = (\r\n        <b data-key=\"name\">{candidate.displayName}</b>\r\n    )\r\n\r\n    const body = (\r\n        <>\r\n            {formattedPhone && (\r\n                <span data-key=\"phone\">{formattedPhone}</span>\r\n            )}\r\n            {email && !formattedPhone && (\r\n                <span data-key=\"email\">{email}</span>\r\n            )}\r\n        </>\r\n    )\r\n\r\n    const avatar = useMemo(() => ({\r\n        firstName,\r\n        lastName,\r\n    }), [firstName, lastName])\r\n\r\n    const handleCall = useCallback((phone: string) => {\r\n        callNumber(phone, 'integration-api', {\r\n            firstName,\r\n            lastName,\r\n            associatedRecords: associatedObjects,\r\n        })\r\n    }, [callNumber, firstName, lastName, associatedObjects])\r\n\r\n    const handleSinglePhoneCall = useCallback(() => {\r\n        assertDefined(formattedPhone)\r\n        handleCall(formattedPhone)\r\n    }, [handleCall, formattedPhone])\r\n\r\n    const handleChat = useCallback(() => {\r\n        assertDefined(formattedPhone)\r\n        initiateChatWith(formattedPhone, 'integration-api', {firstName, lastName})\r\n    }, [initiateChatWith, formattedPhone, firstName, lastName])\r\n\r\n    const dropdownState = useDialCandidatesPhonesDropdown({\r\n        phones,\r\n        handleCall,\r\n        handleSinglePhoneCall,\r\n    })\r\n\r\n    const controls = useMemo(\r\n        () => (\r\n            <>\r\n                {formattedPhone && phoneDeviceCapabilities.canDial && (\r\n                    <Dropdown\r\n                        //onOpen is intentionally omitted as it is controlled by trigger\r\n                        open={dropdownState.show.value}\r\n                        onClose={dropdownState.show.setFalse}\r\n                        options={dropdownState.options}\r\n                        selectOnBlur={false}\r\n                        tabIndex={-1}\r\n                        trigger={\r\n                            <CircleButton\r\n                                className=\"mx-1.5 h-4.5 w-4.5\"\r\n                                onClick={dropdownState.handleCallClick}\r\n                                tooltip={i18n.button_start_call_text()}\r\n                                noActiveState\r\n                                ref={dropdownState.openerRef}\r\n                                transparent\r\n                                clickThrottle={500}\r\n                                data-testid=\"call-button\"\r\n                            >\r\n                                <IconPhone />\r\n                            </CircleButton>\r\n                        }\r\n                    />\r\n                )}\r\n                {formattedPhone && privileges?.CAN_START_EXTERNAL_CHAT && (\r\n                    <CircleButton\r\n                        className=\"mx-1.5 h-4.5 w-4.5\"\r\n                        onClick={handleChat}\r\n                        tooltip={i18n.button_initiate_chat_text()}\r\n                        noActiveState\r\n                        transparent\r\n                        clickThrottle={500}\r\n                        data-testid=\"chat-button\"\r\n                    >\r\n                        <IconChat />\r\n                    </CircleButton>\r\n                )}\r\n            </>\r\n        ),\r\n        [\r\n            formattedPhone,\r\n            phoneDeviceCapabilities.canDial,\r\n            dropdownState.show,\r\n            dropdownState.options,\r\n            dropdownState.handleCallClick,\r\n            dropdownState.openerRef,\r\n            i18n,\r\n            privileges?.CAN_START_EXTERNAL_CHAT,\r\n            handleChat,\r\n        ],\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <ContactListItem\r\n                number={formattedPhone}\r\n                title={title}\r\n                body={body}\r\n                avatarProps={avatar}\r\n                onClick={noop}\r\n                controls={controls}\r\n                className=\"relative\"\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useIntegrationApiState} from '@bpinc/ad-integration-api-state-context'\r\n\r\nimport type {DialpadHandlersType} from '../../hooks/useHandlers'\r\nimport {CrmDialCandidate} from './CrmDialCandidate'\r\n\r\n\r\ntype Props = {\r\n    dialpadNumber?: string\r\n    callNumber: DialpadHandlersType['callNumber']\r\n    initiateChatWith: DialpadHandlersType['initiateChatWith']\r\n}\r\n\r\nexport const CrmDialCandidates: React.FC<Props> = ({\r\n    dialpadNumber,\r\n    callNumber,\r\n    initiateChatWith,\r\n}) => {\r\n\r\n    const {isAvailable, dialCandidates} = useIntegrationApiState()\r\n\r\n    if (!isAvailable || dialpadNumber || !dialCandidates.length) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dialCandidates.map(candidate => (\r\n                <CrmDialCandidate\r\n                    key={candidate.id}\r\n                    candidate={candidate}\r\n                    callNumber={callNumber}\r\n                    initiateChatWith={initiateChatWith}\r\n                />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import type {KeyboardEvent} from 'react'\r\nimport React, {\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react'\r\nimport type {VirtuosoHandle} from 'react-virtuoso'\r\nimport {Virtuoso} from 'react-virtuoso'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\nimport {throttle} from 'lodash-es'\r\n\r\nimport type {DirectoryItem as DirectoryItemType} from '@bpinc/ad-directory-state-types'\r\nimport {useDefaultTransferMode} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {ContactListPlaceholder} from '@bpinc/lib-contact-list-item-ui'\r\nimport {isMsTeamsChannel, isMsTeamsUser, isUserWithDetails} from '@bpinc/lib-helpers-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {ErrorBoundary, SelectionContainer, SelectionItem} from '@bpinc/lib-ui-elements'\r\n\r\nimport {DirectoryItem} from '../../directory'\r\nimport {contactsListMethodsAtom, phoneInputAtom, selectedItemIdAtom} from '../atoms'\r\nimport {getPhone, isInternalContact} from '../helpers'\r\nimport {type InitiateChatAndCallOptionalParams, useHandlers} from '../hooks/useHandlers'\r\nimport {type ComposedContact, useQueryContacts} from '../hooks/useQueryContacts/useQueryContacts'\r\nimport {CrmDialCandidates} from './dial-candidates/CrmDialCandidates'\r\n\r\nimport styles from '@bpinc/lib-chat-ui/src/components/external/VoiceTranscript/VoiceTranscript.module.less'\r\n\r\n\r\nexport type ContactsListMethods = {\r\n    scrollToFirst: () => void\r\n    scrollToLast: () => void\r\n}\r\n\r\nfunction getContactKey(_idx: number, contact: ComposedContact) {\r\n    return getContactId(contact)\r\n}\r\n\r\nfunction getContactId(contact: ComposedContact) {\r\n    return isInternalContact(contact) ? contact.userId : contact.id\r\n}\r\n\r\n\r\nexport const DialpadContacts = () => {\r\n    const {\r\n        callNumber,\r\n        initiateChatWith,\r\n        onContactSelect,\r\n        closeDialpad,\r\n    } = useHandlers()\r\n    const {searchValue: dialNumber} = useCommunicatorUIState('dialpad')\r\n    const {contacts, isLoading} = useQueryContacts()\r\n    const selectedItemId = useAtomValue(selectedItemIdAtom)\r\n    const phoneInput = useAtomValue(phoneInputAtom)\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n    const openContactDetails = useContactDetailsOpener()\r\n    const virtuosoRef = useRef<VirtuosoHandle>(null)\r\n    const contactsIds = useMemo(() => contacts.map((contact, i) => getContactId(contact)), [contacts])\r\n\r\n    const [scrollNode, setScrollNode] = useState<HTMLDivElement | undefined>(undefined)\r\n    const setScrollNodeRef = useCallback((node: HTMLDivElement) => {\r\n        setScrollNode(node)\r\n    }, [])\r\n\r\n    const setContactsListMethods = useSetAtom(contactsListMethodsAtom)\r\n\r\n    const contactsListMethods = useMemo<ContactsListMethods>(() => ({\r\n        scrollToFirst: () => {\r\n            virtuosoRef.current?.scrollIntoView({index: 0,\r\n                done: () => {\r\n                    focusContactElement(scrollNode, contactsIds[0])\r\n                }})\r\n        },\r\n        scrollToLast: () => {\r\n            const lastIndex = contactsIds?.length - 1\r\n            virtuosoRef.current?.scrollIntoView({\r\n                index: lastIndex,\r\n                done: () => {\r\n                    focusContactElement(scrollNode, contactsIds[lastIndex])\r\n                },\r\n            })\r\n        },\r\n    }), [contactsIds, scrollNode])\r\n\r\n    useEffect(() => {\r\n        setContactsListMethods(contactsListMethods)\r\n    }, [contactsListMethods, setContactsListMethods])\r\n\r\n    const handleContactSelect = useCallback(\r\n        (_evt: React.MouseEvent, contact: DirectoryItemType) => {\r\n            if (isMsTeamsUser(contact) || isMsTeamsChannel(contact) || isUserWithDetails(contact)) {\r\n                throw Error('We don\\'t support this type of contact in dialpad search.')\r\n            }\r\n\r\n            const phone = getPhone(contact, dialNumber) || ''\r\n            const id = getContactId(contact)\r\n            onContactSelect({id, phone})\r\n        },\r\n        [dialNumber, onContactSelect],\r\n    )\r\n\r\n    const renderContact = useCallback((_index: number, contact: ComposedContact) => {\r\n        const handleCall = ({phone, ...params}: InitiateCall) => {\r\n            callNumber(phone, 'dialpad-search', params)\r\n        }\r\n\r\n        const handleChat = ({phone, ...params}: InitiateChatAndCallOptionalParams & {phone: string}) => {\r\n            initiateChatWith(phone, 'dialpad-search', params)\r\n        }\r\n\r\n        const contactId = getContactId(contact)\r\n        const isSelected = selectedItemId === contactId\r\n\r\n        return (\r\n            <ErrorBoundary fallback={null}>\r\n                <DirectoryItem\r\n                    showFavoriteButton={false}\r\n                    className=\"h-14 w-full\"\r\n                    listNode={scrollNode}\r\n                    item={contact}\r\n                    isSelected={isSelected}\r\n                    transferMode={defaultTransferMode}\r\n                    onCall={handleCall}\r\n                    onChat={handleChat}\r\n                    onClick={handleContactSelect}\r\n                    onDetails={openContactDetails}\r\n                    as={SelectionItem}\r\n                    containerProps={{\r\n                        itemId: contactId,\r\n                        focusOnSelection: true,\r\n                        tabIndex: 0,\r\n                    }}\r\n                />\r\n            </ErrorBoundary>\r\n        )\r\n    }, [callNumber, defaultTransferMode, handleContactSelect, initiateChatWith, openContactDetails, scrollNode, selectedItemId])\r\n\r\n\r\n    function onItemSelect(id: string) {\r\n        const index = contactsIds?.findIndex(contactId => id === contactId)\r\n        virtuosoRef.current?.scrollIntoView({index})\r\n        closeDialpad()\r\n    }\r\n\r\n    function handleFocusInput(e: KeyboardEvent<HTMLDivElement>) {\r\n        e.stopPropagation()\r\n        if (e.key === 'Escape') {\r\n            phoneInput?.focus()\r\n        }\r\n    }\r\n\r\n    const handleCloseDialpad = useMemo(() => throttle(() => closeDialpad(), 300, {leading: true}), [closeDialpad])\r\n\r\n    return (\r\n        <div className=\"flex grow flex-col overflow-hidden pt-2\">\r\n            <div\r\n                ref={setScrollNodeRef}\r\n                className={tcn('scrollbar-on-hover relative !m-0 flex min-h-2.5 flex-auto grow flex-col overflow-y-auto overflow-x-hidden', {\r\n                    'relative overflow-y-hidden': isLoading,\r\n                })}\r\n                role=\"list\"\r\n                onScroll={handleCloseDialpad}\r\n            >\r\n                {dialNumber\r\n                    ? isLoading\r\n                        ? (\r\n                            <div className=\"absolute inset-x-0\">\r\n                                <ContactListPlaceholder amount={15} />\r\n                            </div>\r\n                        )\r\n                        : (\r\n                            <SelectionContainer\r\n                                className={styles.selectionContainer}\r\n                                itemsListProvider={() => contactsIds}\r\n                                onItemSelect={onItemSelect}\r\n                                circular\r\n                                onKeyDown={handleFocusInput}\r\n                            >\r\n                                <Virtuoso\r\n                                    ref={virtuosoRef}\r\n                                    tabIndex={undefined}\r\n                                    data={contacts}\r\n                                    itemContent={renderContact}\r\n                                    computeItemKey={getContactKey}\r\n                                    customScrollParent={scrollNode}\r\n                                />\r\n                            </SelectionContainer>\r\n                        )\r\n                    : null\r\n                }\r\n                {!dialNumber && !contacts.length && (\r\n                    <CrmDialCandidates\r\n                        callNumber={callNumber}\r\n                        dialpadNumber={dialNumber}\r\n                        initiateChatWith={initiateChatWith}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction focusContactElement(container: HTMLDivElement | undefined, id: string) {\r\n    container?.querySelector<HTMLDivElement>(`[data-id=\"${id}\"]`)?.focus()\r\n}\r\n","import type {KeyboardEvent} from 'react'\r\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserProfileState} from '@bpinc/ad-user-profile-state-context'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport type {CountryCode, CountryCodeWithAll, CountryPhoneValue} from '@bpinc/lib-jskit-ui'\r\nimport {CountryPhoneField} from '@bpinc/lib-jskit-ui'\r\nimport {phoneNumberFormatter} from '@bpinc/lib-phonenumber-formatter'\r\nimport {ALL_COUNTRIES_ID, DEFAULT_COUNTRY_RECENT_ID, useCountrySelectorState} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {contactsListMethodsAtom, phoneInputAtom} from '../atoms'\r\nimport {getLetter, sanitizePhone} from '../helpers'\r\nimport {useFormatedPhone} from '../hooks/useFormatedPhone'\r\nimport {useHandlers} from '../hooks/useHandlers'\r\nimport {useQueryContacts} from '../hooks/useQueryContacts/useQueryContacts'\r\n\r\n\r\nexport const PhoneInput = () => {\r\n    const {t} = useLocalizationState()\r\n    const {searchValue} = useCommunicatorUIState('dialpad')\r\n    const contactsListMethods = useAtomValue(contactsListMethodsAtom)\r\n    const {\r\n        onCallClick,\r\n        updateCaretPosition,\r\n        onInputValueChange,\r\n        closeDialpad,\r\n    } = useHandlers()\r\n\r\n    const setInputRef = useSetAtom(phoneInputAtom)\r\n    const contactsFound = !!useQueryContacts().contacts.length\r\n\r\n    const {countrySelectorValue, setCountrySelectorValue} = useCountrySelectorState(['countrySelectorValue', 'setCountrySelectorValue'])\r\n    const {countrySelectorRecent, addCountryToRecent} = useCountrySelectorState(['countrySelectorRecent', 'addCountryToRecent'])\r\n\r\n    const {isValidPhoneNumber} = useFormatedPhone()\r\n\r\n    const hasCountryPrefix = countrySelectorValue !== ALL_COUNTRIES_ID\r\n    const showCountryPrefixError = !!hasCountryPrefix && !!searchValue && !isValidPhoneNumber && !contactsFound\r\n\r\n    const {country: callCenterCountryCode} = useSessionState()\r\n    const {userProfile} = useUserProfileState()\r\n\r\n    const onCountryCodeChange = useCallback((value: CountryCodeWithAll) => {\r\n        const newCountryCode = value === 'ALL' ? ALL_COUNTRIES_ID : value\r\n\r\n        if (newCountryCode === countrySelectorValue) {\r\n            return\r\n        }\r\n        addCountryToRecent(DEFAULT_COUNTRY_RECENT_ID, newCountryCode)\r\n        setCountrySelectorValue(newCountryCode)\r\n    }, [setCountrySelectorValue, countrySelectorValue, addCountryToRecent])\r\n\r\n    const countryCode = countrySelectorValue === ALL_COUNTRIES_ID\r\n        ? 'ALL'\r\n        : countrySelectorValue\r\n\r\n    const countryPhoneValue = useMemo<CountryPhoneValue>(() => ({\r\n        phone: searchValue || '',\r\n        countryCode,\r\n    }), [searchValue, countryCode])\r\n\r\n\r\n    const onChangeDialNumber = useCallback((value: string) => {\r\n        const newValue = sanitizePhone(value)\r\n        if (newValue !== searchValue) {\r\n            onInputValueChange(newValue)\r\n        }\r\n    }, [searchValue, onInputValueChange])\r\n\r\n    const onChange = useCallback((value: CountryPhoneValue) => {\r\n        onChangeDialNumber(value.phone)\r\n        onCountryCodeChange(value.countryCode)\r\n    }, [onChangeDialNumber, onCountryCodeChange])\r\n\r\n    const countries = useMemo(() => {\r\n        const countriesInner = phoneNumberFormatter.getSupportedRegions()\r\n            .map(region => ({\r\n                code: region.toLowerCase(),\r\n                name: region,\r\n                prefix: phoneNumberFormatter.getCountryCodeForRegion(region),\r\n            }))\r\n\r\n        const profileCountryCode = countriesInner.find(country => country.name.toUpperCase() === userProfile?.country.toUpperCase())?.code\r\n\r\n        popCountryOnTop(profileCountryCode)\r\n        popCountryOnTop(callCenterCountryCode)\r\n\r\n        return countriesInner\r\n\r\n        /** Puts the country with the given code on top of the list. */\r\n        function popCountryOnTop(code?: CountryCode) {\r\n            const foundIndex = countriesInner.findIndex(country => {\r\n                return country.code.toUpperCase() === code?.toUpperCase()\r\n            })\r\n            if (foundIndex === -1) {\r\n                return countriesInner\r\n            }\r\n            return [\r\n                countriesInner[foundIndex],\r\n                ...countriesInner.slice(0, foundIndex),\r\n                ...countriesInner.slice(foundIndex + 1),\r\n            ]\r\n        }\r\n\r\n    }, [callCenterCountryCode, userProfile?.country])\r\n\r\n    const recentCountryCodes = useMemo(\r\n        () => (countrySelectorRecent[DEFAULT_COUNTRY_RECENT_ID] || []),\r\n        [countrySelectorRecent],\r\n    )\r\n\r\n    const handleInputKeyDown = useCallback((evt: KeyboardEvent<HTMLInputElement>) => {\r\n        if (evt.altKey) {\r\n            return\r\n        }\r\n        if (evt.key === 'Enter') {\r\n            onCallClick()\r\n            evt.preventDefault()\r\n        } else if (evt.key === 'ArrowDown' || evt.key === 'ArrowUp') {\r\n            if (evt.key === 'ArrowDown') {\r\n                contactsListMethods?.scrollToFirst()\r\n            } else {\r\n                contactsListMethods?.scrollToLast()\r\n            }\r\n            closeDialpad()\r\n            evt.preventDefault()\r\n        } else {\r\n            const letter = getLetter(evt.key, evt.code)\r\n            updateCaretPosition(letter)\r\n        }\r\n    }, [closeDialpad, onCallClick, updateCaretPosition, contactsListMethods])\r\n\r\n    const inputRef = useRef<HTMLInputElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        setInputRef(inputRef.current)\r\n        return () => setInputRef(null)\r\n    }, [inputRef, setInputRef])\r\n\r\n    return (\r\n        <CountryPhoneField\r\n            value={countryPhoneValue}\r\n            onChange={onChange}\r\n            countries={countries}\r\n            recentCountryCodes={recentCountryCodes}\r\n            inputRef={inputRef}\r\n            onKeyDown={handleInputKeyDown}\r\n            error={showCountryPrefixError && t.DIAL_PAD.invalid_number_error_text()}\r\n\r\n            searchFieldPlaceholder={t.GLOBAL.country_selector_search_input_placeholder()}\r\n            recentTitle={t.GLOBAL.country_selector_recent()}\r\n            countriesTitle={t.GLOBAL.country_selector_countries()}\r\n            allCountriesTitle={t.GLOBAL.country_selector_all_countries_title()}\r\n\r\n            data-testid=\"dialpad-input\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SearchForInteractionControls} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useHandlers} from '../hooks/useHandlers'\r\nimport {PhoneInput} from './PhoneInput'\r\n\r\n\r\nexport const DialpadForm: React.FC = () => {\r\n    const {searchValue} = useCommunicatorUIState('dialpad')\r\n    const {onCallClick, onChatClick} = useHandlers()\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n\r\n    return (\r\n        <div className=\"flex items-start gap-2 pr-3.5\">\r\n            <PhoneInput />\r\n            <SearchForInteractionControls\r\n                searchQuery={searchValue}\r\n                onCallClick={onCallClick}\r\n                onChatClick={onChatClick}\r\n                callButtonDisabled={!phoneDeviceCapabilities.canDial}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\nimport {\r\n    isFavoritesDirectoryEntryItem,\r\n    isFavoritesMultiMediaChannel,\r\n    isFavoritesUserItem,\r\n} from '@bpinc/state-favorites-types'\r\n\r\nimport {useCallPartyUsersFilter, useChatPartyUsersFilter} from '../../directory'\r\nimport type {FavoritesListChannelItem, FavoritesListProps} from '../types'\r\n\r\n\r\ninterface UseFilteredFavoritesListParams extends FavoritesListProps {\r\n    favoritesList: FavoritesItem[]\r\n}\r\n\r\nfunction isScenarioEntity(item: FavoritesItem) {\r\n    return isFavoritesUserItem(item) || isFavoritesDirectoryEntryItem(item)\r\n}\r\n\r\nexport function useFilteredAndSortedFavoritesList({\r\n    transferMode,\r\n    favoritesList,\r\n    filter = Boolean,\r\n}: UseFilteredFavoritesListParams) {\r\n    const chatUsersFilter = useChatPartyUsersFilter()\r\n    const callUsersFilter = useCallPartyUsersFilter()\r\n\r\n    return useMemo(() => {\r\n        return favoritesList.reduce<FavoritesListChannelItem[]>((result, item) => {\r\n            item.channels.forEach(channel => {\r\n                if (isFavoritesMultiMediaChannel(channel)) {\r\n                    channel.media.forEach(media => {\r\n                        if (!channel.hiddenMedia?.includes(media)) {\r\n                            result.push({item, channel, media})\r\n                        }\r\n                    })\r\n\r\n                } else if (!channel.hidden) {\r\n                    result.push({item, channel})\r\n                }\r\n            })\r\n\r\n            return result\r\n        }, [])\r\n            .filter(filterFavorites)\r\n            .sort((a, b) => sortFavoritesByName(a.item, b.item))\r\n\r\n        function filterFavorites(data: FavoritesListChannelItem) {\r\n            return (\r\n                filter(data) && isAgentInChatTransfer() && isNotAPartyOfActiveInteractionInTransferMode()\r\n            )\r\n\r\n            // TODO: revisit this logic, it looks wrong\r\n            function isAgentInChatTransfer() {\r\n                return transferMode === 'messages' ? isScenarioEntity(data.item) : true\r\n            }\r\n\r\n            function isNotAPartyOfActiveInteractionInTransferMode() {\r\n                return transferMode === 'calls'\r\n                    ? callUsersFilter(data.item)\r\n                    : transferMode === 'messages'\r\n                        ? chatUsersFilter(data.item)\r\n                        : true\r\n            }\r\n        }\r\n\r\n        function sortFavoritesByName(item1: FavoritesItem, item2: FavoritesItem) {\r\n            return item1.displayName.localeCompare(item2.displayName, undefined, {sensitivity: 'base'})\r\n        }\r\n\r\n    }, [\r\n        favoritesList,\r\n        filter,\r\n        transferMode,\r\n        callUsersFilter,\r\n        chatUsersFilter,\r\n    ])\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {FavoritesChannelMedia, MessengerChannelType} from '@bpinc/ad-transport-types'\r\nimport {IconEmail16, IconPhone16Filled} from '@bpinc/lib-jskit-ui'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {getChannelImageIcon, useGetMessengerName} from '@bpinc/lib-ui-elements'\r\nimport type {FavoritesChannel} from '@bpinc/state-favorites-types'\r\nimport {\r\n    isFavoritesEmailChannel,\r\n    isFavoritesInternalChannel,\r\n    isFavoritesMessengerChannel,\r\n    isFavoritesPhoneChannel,\r\n} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    channel: FavoritesChannel\r\n    media?: FavoritesChannelMedia\r\n}\r\n\r\nexport const FavoriteItemBody: React.FC<Props> = ({channel, media}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n    const getMessengerName = useGetMessengerName()\r\n\r\n    if (isFavoritesInternalChannel(channel) || isFavoritesPhoneChannel(channel)) {\r\n        assertDefined(media)\r\n        if (media === 'voice') {\r\n            return <Phone>{formatPhone(channel.number)}</Phone>\r\n        }\r\n        if (channel.number) {\r\n            return <Chat>{formatPhone(channel.number)}</Chat>\r\n        }\r\n        return <Chat>{i18n.internal_messages_field_value()}</Chat>\r\n    }\r\n\r\n    if (isFavoritesEmailChannel(channel)) {\r\n        return <Email>{channel.email}</Email>\r\n    }\r\n\r\n    if (isFavoritesMessengerChannel(channel)) {\r\n        return (\r\n            <Chat type={channel.messengerType}>\r\n                {`${getMessengerName(channel.messengerType)}: ${channel.userId}`}\r\n            </Chat>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nconst Email: FCWithChildren = ({children}) => {\r\n    return (\r\n        <span className=\"flex items-center gap-1\">\r\n            <IconEmail16 className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n            <span data-testid=\"email\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                {children}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n\r\nconst Phone: FCWithChildren = ({children}) => {\r\n    return (\r\n        <span className=\"flex items-center gap-1\">\r\n            <IconPhone16Filled className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n            <span data-testid=\"phone\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                {children}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n\r\nconst Chat: React.FC<{ type?: MessengerChannelType; children?: string }> = ({children, type}) => {\r\n    const IconComponent = getChannelImageIcon(type)\r\n    return (\r\n        <span className=\"flex items-center gap-1\">\r\n            {IconComponent && (\r\n                <IconComponent className=\"my-px mr-1 inline-block shrink-0 icon-neutral\" />\r\n            )}\r\n            <span data-testid=\"chat\" className=\"truncate caption-s text-neutral-on-secondary\">\r\n                {children}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {ButtonIcon, IconInformation} from '@bpinc/lib-jskit-ui'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = {\r\n    item: FavoritesItem\r\n    onDetailsClick: (item: FavoritesItem) => void\r\n}\r\n\r\nexport const FavoriteControls: React.FC<Props> = ({item, onDetailsClick}) => {\r\n\r\n    const {CONTACT: i18n} = useLocalizationState('t')\r\n\r\n    const handleDetails = useEvent(() => {\r\n        onDetailsClick?.(item)\r\n    })\r\n\r\n    return (\r\n        <ButtonIcon\r\n            tooltip={i18n.button_show_contact_details_text()}\r\n            data-testid=\"user-info-button\"\r\n            onPressed={handleDetails}\r\n        >\r\n            <IconInformation />\r\n        </ButtonIcon>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useServiceDetailsState} from '@bpinc/ad-service-details-state-context'\r\nimport {useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\nimport {isFavoritesDirectoryEntryItem} from '@bpinc/state-favorites-types'\r\n\r\nimport {HuntGroupMetrics} from '../../../directory/components/user/directory-entry/HuntGroupMetrics'\r\nimport {ServiceMetrics} from '../../../directory/components/user/directory-entry/ServiceMetrics'\r\nimport {UserOnlineStatus} from '../../../directory/components/user/internal-user/UserOnlineStatus'\r\n\r\n\r\ntype Props = {\r\n    item: FavoritesItem\r\n}\r\n\r\nexport const FavoriteItemStats: React.FC<Props> = ({item}) => {\r\n\r\n    const {huntGroupsDetails, serviceDetails} = useServiceDetailsState()\r\n    const userDetails = useUserDetailsById(item.userId ?? item.emiUserId)\r\n\r\n    if (userDetails) {\r\n        return <UserOnlineStatus details={userDetails} />\r\n    }\r\n\r\n    if (isFavoritesDirectoryEntryItem(item)) {\r\n\r\n        const huntGroupMetrics = item.huntGroupId ? huntGroupsDetails[item.huntGroupId] : undefined\r\n        const serviceMetrics = item.serviceId ? serviceDetails[item.serviceId] : undefined\r\n\r\n        if (huntGroupMetrics) {\r\n            return <HuntGroupMetrics metrics={huntGroupMetrics} />\r\n        }\r\n        if (serviceMetrics) {\r\n            return <ServiceMetrics metrics={serviceMetrics} />\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n","import {isDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {FavoritesListChannelItem} from '../../types'\r\n\r\n\r\nexport function getUniqueChannelId({item, channel, media}: FavoritesListChannelItem): string {\r\n    switch (channel.channelType) {\r\n        case 'internal':\r\n            return [\r\n                item.id,\r\n                channel.channelType,\r\n                media,\r\n            ].filter(isDefined).join('-')\r\n        case 'phone':\r\n            return [\r\n                item.id,\r\n                channel.channelType,\r\n                media,\r\n                channel.numberType,\r\n                channel.numberId,\r\n                channel.number,\r\n            ].filter(isDefined).join('-')\r\n        case 'email':\r\n            return [\r\n                item.id,\r\n                channel.channelType,\r\n                channel.emailId,\r\n                channel.email,\r\n            ].filter(isDefined).join('-')\r\n        case 'messenger':\r\n            return [\r\n                item.id,\r\n                channel.channelType,\r\n                channel.messengerType,\r\n                channel.userId,\r\n            ].filter(isDefined).join('-')\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {getUserStatusIcon, useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport type {LegacyAvatarType} from '@bpinc/lib-avatar-ui'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\nimport {isFavoritesDirectoryEntryItem, isFavoritesEmiItem, isFavoritesUserItem} from '@bpinc/state-favorites-types'\r\n\r\nimport {useDirectoryEntryOnlineStatus} from '../../../directory/hooks/useDirectoryEntryOnlineStatus'\r\n\r\n\r\nfunction getAvatarType(item: FavoritesItem): LegacyAvatarType | undefined {\r\n    if (!isFavoritesDirectoryEntryItem(item)) {\r\n        return\r\n    }\r\n    if (item.huntGroupId) {\r\n        return 'hunt-group'\r\n    }\r\n    // it can be empty string!\r\n    if (item.serviceId !== undefined) {\r\n        return 'scenario-entry'\r\n    }\r\n    return 'static-entry'\r\n}\r\n\r\nexport function useAvatar(item: FavoritesItem) {\r\n    const {\r\n        userId,\r\n        emiUserId,\r\n        contactId,\r\n        emiUserType,\r\n        emiPhotoUrl,\r\n        firstName,\r\n        lastName,\r\n        displayName,\r\n    } = item\r\n    const anyUserId = userId || emiUserId\r\n\r\n    const details = useUserDetailsById(anyUserId)\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const directoryEntryOnlineStatus = useDirectoryEntryOnlineStatus(item.serviceId, item.huntGroupId)\r\n\r\n    const avatarType = getAvatarType(item)\r\n    const isAgent =\r\n        isFavoritesUserItem(item) ||\r\n        isFavoritesDirectoryEntryItem(item) ||\r\n        (isFavoritesEmiItem(item) && item.emiUserType === 'msteams')\r\n\r\n    return useMemo(() => {\r\n        const avatar: PropsAvatar = {\r\n            firstName,\r\n            lastName,\r\n            fullName: displayName,\r\n            isAgent,\r\n            avatarType,\r\n            url: getAvatarUrl({\r\n                userId: anyUserId,\r\n                contactId,\r\n                userType: emiUserType,\r\n                photoUrl: emiPhotoUrl,\r\n            }),\r\n        }\r\n        if (details?.data) {\r\n            avatar.isOnline = details.data.presenceState === 'available'\r\n            avatar.onlineStatusIcon = getUserStatusIcon(details?.data)\r\n        } else if (directoryEntryOnlineStatus) {\r\n            avatar.onlineStatusIcon = directoryEntryOnlineStatus\r\n        }\r\n        return avatar\r\n    }, [\r\n        avatarType,\r\n        firstName,\r\n        lastName,\r\n        displayName,\r\n        directoryEntryOnlineStatus,\r\n        isAgent,\r\n        getAvatarUrl,\r\n        anyUserId,\r\n        contactId,\r\n        emiUserType,\r\n        emiPhotoUrl,\r\n        details,\r\n    ])\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {MS_TEAMS_CHATS_CATEGORY_ID} from '@bpinc/ad-directory-state-types'\r\nimport type {EmiItemStatus} from '@bpinc/ad-emi-helpers'\r\nimport type {EmiUserType} from '@bpinc/ad-transport-types'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {FavoriteChannelButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\n\r\nimport {useSubscribeForFavoriteItemDetails} from '../../hooks/useSubscribeForFavoriteItemDetails'\r\nimport type {FavoritesListChannelItem} from '../../types'\r\nimport {FavoriteItemBody} from './FavoriteItemBody'\r\nimport {FavoriteControls} from './FavoriteItemControls'\r\nimport {FavoriteItemStats} from './FavoriteItemStats'\r\nimport {getUniqueChannelId} from './getUniqueChannelId'\r\nimport {useAvatar} from './useAvatar'\r\nimport type {OnClickParams} from './useItemClickHandler'\r\n\r\n\r\ntype FavoritesItemProps = FavoritesListChannelItem & {\r\n    onClick?: (params: OnClickParams) => void\r\n    isHighlighted?: boolean\r\n    onDetailsClick: (item: FavoritesItem) => void\r\n    useEmiItemStatus: (emiUserType?: EmiUserType, ownerId?: string) => EmiItemStatus\r\n    transferMode?: 'messages' | 'calls'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n}\r\n\r\nexport const FavoritesListItem: React.FC<FavoritesItemProps> = ({\r\n    item,\r\n    channel,\r\n    media,\r\n    transferMode,\r\n    transferControlsStyle,\r\n    onClick,\r\n    onDetailsClick,\r\n    useEmiItemStatus,\r\n    isHighlighted,\r\n}) => {\r\n    const emiUsers = useDirectoryState('emiUsers')\r\n\r\n    const {active, disableReasonMessage} = useEmiItemStatus(item.emiUserType, item.emiOwnerId)\r\n\r\n    const relatedEMIUser = emiUsers[MS_TEAMS_CHATS_CATEGORY_ID]?.find(emiUser => emiUser.userId === item.userId)\r\n    const anyUserId = item.userId || item.emiUserId || item.entryId\r\n\r\n    useSubscribeForFavoriteItemDetails(item)\r\n\r\n    const avatar = useAvatar(item)\r\n\r\n    const title = useMemo(() => (\r\n        <span className=\"flex gap-1\">\r\n            <b data-testid=\"name\" className=\"inline-block truncate font-semibold body text-primary-on-primary\">\r\n                {item.displayName}\r\n            </b>\r\n            <FavoriteChannelButton\r\n                item={item}\r\n                channel={channel}\r\n                media={media}\r\n                className={tcn(\r\n                    'hidden group-[[data-pseudo-hover]]/contact-item:block',\r\n                    'group-focus-within/contact-item:block group-hover/contact-item:block',\r\n                )}\r\n            />\r\n        </span>\r\n    ), [item, channel, media])\r\n\r\n    const body = <FavoriteItemBody channel={channel} media={media} />\r\n    const stats = <FavoriteItemStats item={item} />\r\n    const controls = <FavoriteControls item={item} onDetailsClick={onDetailsClick} />\r\n\r\n    const handleClick = useEvent((event: React.MouseEvent) => {\r\n        assertDefined(onClick)\r\n        onClick({item, channel, media})\r\n        event.stopPropagation()\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            isSelected={isHighlighted}\r\n            transferMode={transferMode}\r\n            transferControlsStyle={transferControlsStyle}\r\n            userId={anyUserId}\r\n            contactId={item.contactId}\r\n            number={channel.number}\r\n            avatarProps={avatar}\r\n            title={title}\r\n            body={body}\r\n            stats={stats}\r\n            controls={controls}\r\n            userType={item.emiUserType}\r\n            disabled={!active}\r\n            tooltip={active ? undefined : disableReasonMessage}\r\n            hasChat={relatedEMIUser?.hasChat}\r\n            onClick={handleClick}\r\n            containerProps={{\r\n                itemId: getUniqueChannelId({item, channel, media}),\r\n                focusOnSelection: true,\r\n                tabIndex: 0,\r\n                'data-testid': 'favorites-item',\r\n            }}\r\n        />\r\n    )\r\n}\r\n","import {useSubscribeForHuntGroupDetails, useSubscribeForServiceDetails} from '@bpinc/ad-service-details-state-context'\r\nimport {useSubscribeForUserDetails} from '@bpinc/ad-user-details-state-context'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\n\r\n\r\nexport function useSubscribeForFavoriteItemDetails(item: FavoritesItem, isVisible?: boolean) {\r\n    useSubscribeForUserDetails(item.userId, isVisible)\r\n    useSubscribeForUserDetails(item.emiUserId, isVisible)\r\n    useSubscribeForServiceDetails(item.serviceId, isVisible)\r\n    useSubscribeForHuntGroupDetails(item.huntGroupId, isVisible)\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useEmiItemStatus} from '@bpinc/ad-emi-helpers'\r\nimport {useDefaultTransferMode} from '@bpinc/ad-interaction-state-context'\r\nimport {useNativeScrollDataManager} from '@bpinc/ad-scroll-state-context-builder'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ContactListPlaceholder} from '@bpinc/lib-contact-list-item-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {ErrorBoundary, SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useFavoritesState} from '@bpinc/state-favorites-context'\r\n\r\nimport {SCROLL_KEYS} from '../../../scroll-context'\r\nimport {useFilteredAndSortedFavoritesList} from '../../hooks/useFilteredAndSortedFavoritesList'\r\nimport type {FavoritesListProps} from '../../types'\r\nimport {FavoritesListItem} from './FavoritesListItem'\r\nimport {getUniqueChannelId} from './getUniqueChannelId'\r\nimport {useDetailsButtonClickHandler} from './useDetailsButtonClickHandler'\r\nimport {useItemClickHandler} from './useItemClickHandler'\r\n\r\n\r\nexport const FavoritesList: React.FC<FavoritesListProps> = props => {\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n\r\n    const {isHighlighted, transferMode = defaultTransferMode, transferControlsStyle, onClick} = props\r\n    const {favoritesList, isLoading} = useFavoritesState()\r\n    const emi = useSessionState('emi')\r\n\r\n    const handleDetailsClick = useDetailsButtonClickHandler()\r\n    const handleClick = useItemClickHandler(onClick)\r\n    const sortedAndFilterFavoritesList = useFilteredAndSortedFavoritesList({\r\n        ...props,\r\n        favoritesList,\r\n    })\r\n\r\n    const useEmiItemStatusCurried = useMemo(() => partial(useEmiItemStatus, emi), [emi])\r\n    const listRef = useNativeScrollDataManager(SCROLL_KEYS.favorites())\r\n\r\n    return (\r\n        <SelectionContainer\r\n            ref={listRef}\r\n            className={tcn(\r\n                'flex h-full min-h-0 flex-auto flex-col',\r\n                'scrollbar-on-hover overflow-auto',\r\n                {'overflow-hidden': isLoading},\r\n            )}\r\n        >\r\n            {/* without this extra wrapper with filled background \"scrollbar-on-hover\" produces visual artifacts */}\r\n            <div className=\"bg-primary-background\">\r\n                {\r\n                    isLoading ? (\r\n                        <div className=\"mt-2\">\r\n                            <ContactListPlaceholder amount={15} />\r\n                        </div>\r\n                    ) : (sortedAndFilterFavoritesList.map(listItem => (\r\n                        <ErrorBoundary key={getUniqueChannelId(listItem)} fallback={null}>\r\n                            <FavoritesListItem\r\n                                {...listItem}\r\n                                isHighlighted={isHighlighted?.(listItem)}\r\n                                transferMode={transferMode}\r\n                                transferControlsStyle={transferControlsStyle}\r\n                                onClick={handleClick}\r\n                                onDetailsClick={handleDetailsClick}\r\n                                useEmiItemStatus={useEmiItemStatusCurried}\r\n                            />\r\n                        </ErrorBoundary>\r\n                    )))\r\n                }\r\n            </div>\r\n        </SelectionContainer>\r\n    )\r\n}\r\n","import {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {FavoritesItem} from '@bpinc/state-favorites-types'\r\n\r\n\r\nexport function useDetailsButtonClickHandler() {\r\n\r\n    const openContactDetails = useContactDetailsOpener()\r\n\r\n    return useEvent((item: FavoritesItem) => {\r\n        openContactDetails({\r\n            contactId: item.contactId,\r\n            userId: item.userId || item.emiUserId,\r\n            entryId: item.entryId,\r\n        })\r\n    })\r\n}\r\n","import {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {FavoritesChannelMedia} from '@bpinc/ad-transport-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {FavoritesChannel, FavoritesItem} from '@bpinc/state-favorites-types'\r\nimport {\r\n    isFavoritesEmailChannel,\r\n    isFavoritesInternalChannel,\r\n    isFavoritesMessengerChannel,\r\n    isFavoritesPhoneChannel,\r\n} from '@bpinc/state-favorites-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport type OnClickParams = {\r\n    item: FavoritesItem\r\n    channel: FavoritesChannel\r\n    media?: FavoritesChannelMedia\r\n}\r\n\r\nexport function useItemClickHandler(onClick?: (params: OnClickParams) => void) {\r\n\r\n    const {CONTACT_POPUP: i18n} = useLocalizationState('t')\r\n    const {createCaseEmail} = useCaseStateMethods()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const setActivePage = useNavigationState('setActivePage')\r\n\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n    const handleCall = useCallHandler()\r\n\r\n    return useEvent(({item, channel, media}: OnClickParams) => {\r\n        if (onClick) {\r\n            return onClick({item, channel, media})\r\n        }\r\n\r\n        const {\r\n            contactId,\r\n            userId,\r\n            emiUserId,\r\n            entryId,\r\n            userDetails,\r\n            firstName,\r\n            lastName,\r\n            emiUserType,\r\n            emiPhotoUrl,\r\n        } = item\r\n\r\n        const anyUserId = userId || entryId || emiUserId\r\n\r\n        if (isFavoritesPhoneChannel(channel) || isFavoritesInternalChannel(channel)) {\r\n            assertDefined(media)\r\n            if (media === 'voice') {\r\n                handleCall({\r\n                    userId: anyUserId,\r\n                    contactId,\r\n                    firstName,\r\n                    lastName,\r\n                    phone: channel.number ?? '',\r\n                    origination: 'favorites',\r\n                    afterCallSideEffectCallback: () => {\r\n                        setActivePage({\r\n                            name: AppRoutes.Interactions,\r\n                            params: {contactId},\r\n                        })\r\n                    },\r\n                })\r\n            } else {\r\n                if (emiUserType === 'msteams' && !userDetails?.hasChat) {\r\n                    return showNotification({\r\n                        type: 'error',\r\n                        id: Notifications.MSTeamsNoChatWithUserError,\r\n                        tags: ['current-view'],\r\n                        message: i18n.contact_msteams_no_chat(),\r\n                        duration: 7000,\r\n                    })\r\n                }\r\n                openActivityHistory({\r\n                    contactId,\r\n                    phone: channel.number,\r\n                    firstName,\r\n                    lastName,\r\n                    userId: anyUserId,\r\n                    origination: 'favorites',\r\n                    emiUserType,\r\n                    emiPhotoUrl,\r\n                })\r\n            }\r\n        }\r\n\r\n        if (isFavoritesEmailChannel(channel)) {\r\n            createCaseEmail({\r\n                contactId,\r\n                emailAddress: channel.email,\r\n            })\r\n        }\r\n\r\n        if (isFavoritesMessengerChannel(channel)) {\r\n            openActivityHistory({\r\n                contactId,\r\n                firstName,\r\n                lastName,\r\n                userId: anyUserId,\r\n                origination: 'favorites',\r\n            })\r\n        }\r\n    })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"bar\":\"communicator_InteractionBar_bar_fIRUf\",\"icon\":\"communicator_InteractionBar_icon_2xikA\",\"desc\":\"communicator_InteractionBar_desc_hgnsA\",\"unread\":\"communicator_InteractionBar_unread_XE4rf\"};","import React from 'react'\r\n\r\nimport {useUnreadAmount} from '../hooks/useUnreadAmount'\r\n\r\nimport styles from '../styles/InteractionBar.module.less'\r\n\r\n\r\nexport const InteractionBarUnread = () => {\r\n    const unread = useUnreadAmount()\r\n    return (\r\n        <>\r\n            {!!unread && (\r\n                <div className={styles.unread} data-testid=\"unread-counter\">\r\n                    {unread}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useChatUnread, useInteractionChatStateSelector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInternalChatTotalUnread} from '@bpinc/ad-interaction-internal-chat-state-context'\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\n\r\n\r\nexport function useUnreadAmount() {\r\n    const unreadPersonalMessagesAmountByContactId = useInteractionChatStateSelector(\r\n        s => s.unreadPersonalMessagesAmountByContactId,\r\n    )\r\n\r\n    const sumUnreadReducerPersonalChats = (totalUnread: number, {contactId = ''}) =>\r\n        totalUnread + (contactId ? unreadPersonalMessagesAmountByContactId[contactId] ?? 0 : 0)\r\n\r\n    const unreadActivePersonalChats = useInteractionStateSelector(s =>\r\n        s.items.reduce(sumUnreadReducerPersonalChats, 0),\r\n    )\r\n    const unreadExternal = useChatUnread()\r\n    const unreadInternal = useInternalChatTotalUnread()\r\n\r\n    return unreadActivePersonalChats + unreadExternal + unreadInternal\r\n}\r\n","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useInteractionsCount} from '../hooks/useInteractionsCount'\r\n\r\nimport styles from '../styles/InteractionBar.module.less'\r\n\r\n\r\nexport const InteractionsCount: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionsCount = useInteractionsCount()\r\n\r\n    return (\r\n        <>\r\n            {!!interactionsCount.call && (\r\n                <span className={styles.desc}>\r\n                    <span>{t.GLOBAL.interaction_bar_calls_label()}</span>\r\n                    <span>: </span>\r\n                    <span data-testid=\"calls-number\">{interactionsCount.call}</span>\r\n                </span>\r\n            )}\r\n            {!!interactionsCount.chat && (\r\n                <span className={styles.desc}>\r\n                    <span>{t.GLOBAL.interaction_bar_chats_label()}</span>\r\n                    <span>: </span>\r\n                    <span data-testid=\"chats-number\">{interactionsCount.chat}</span>\r\n                </span>\r\n            )}\r\n            {!!interactionsCount.history && (\r\n                <span className={styles.desc}>\r\n                    <span>{t.GLOBAL.interaction_bar_contact_activities_label()}</span>\r\n                    <span>: </span>\r\n                    <span data-testid=\"contact-histories-number\">{interactionsCount.history}</span>\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {isCall, isExternalChat, isInternalChat, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\ntype InteractionCount = {\r\n    call: number\r\n    chat: number\r\n    history: number\r\n}\r\n\r\nexport function useInteractionsCount() {\r\n    const interactions = useInteractions()\r\n\r\n    return useMemo(function memoizeOutput() {\r\n        return interactions.reduce((count: InteractionCount, interaction: Item) => {\r\n            if (isExternalChat(interaction) || isInternalChat(interaction)) {\r\n                count.chat++\r\n                //reset history counter if there any other interactions\r\n                count.history = 0\r\n            } else if (isCall(interaction)) {\r\n                count.call++\r\n                //reset history counter if there any other interactions\r\n                count.history = 0\r\n            } else if (isPotentialInteraction(interaction)) {\r\n                count.history++\r\n            }\r\n            return count\r\n        }, {call: 0, chat: 0, history: 0})\r\n    }, [interactions])\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getMediaIcon, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {InteractionMediaIcon, InteractionTimer} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useActiveOrLastInteraction} from '../hooks/useActiveOrLastInteraction'\r\nimport {useInteractionBarDisplayName} from '../hooks/useInteractionBarText'\r\nimport {InteractionBarUnread} from './InteractionBarUnread'\r\nimport {InteractionsCount} from './InteractionsCount'\r\n\r\nimport styles from '../styles/InteractionBar.module.less'\r\n\r\n\r\ntype InteractionBarProps = {\r\n    action: () => void\r\n}\r\n\r\nexport const InteractionBar: React.FC<InteractionBarProps> = ({action}) => {\r\n    const activeItem = useActiveOrLastInteraction()\r\n    const {activateItem} = useInteractionStateMethods()\r\n    const displayName = useInteractionBarDisplayName(activeItem)\r\n\r\n    if (!activeItem) {\r\n        return null\r\n    }\r\n\r\n    const {\r\n        displayData: {deliveredStartTime},\r\n    } = activeItem\r\n\r\n    const iconType = getMediaIcon(activeItem)\r\n\r\n    const handleClick = () => {\r\n        activateItem(activeItem.id)\r\n        action()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleClick} className={styles.bar} data-testid=\"interaction-bar\">\r\n                <span key={activeItem.id} className={styles.desc}>\r\n                    <InteractionMediaIcon showPotentialInteractionIcon icon={iconType} className=\"mr-1.5\" />\r\n                    <span data-testid=\"display-name\">{displayName}</span>\r\n                    {!isPotentialInteraction(activeItem) && deliveredStartTime && (\r\n                        <InteractionTimer startTime={deliveredStartTime} data-testid=\"duration-timer\" />\r\n                    )}\r\n                </span>\r\n                <InteractionsCount />\r\n                <InteractionBarUnread />\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useAgentState} from '@bpinc/ad-agent-state-context'\r\nimport {useInteraction, useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {isInternalChat, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\n\r\n//TODO: Do we really need this hook?\r\nexport function useActiveOrLastInteraction() {\r\n    const interactions = useInteractions()\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n\r\n    const {\r\n        reservedForIncomingInteraction,\r\n        reservedForIncomingInteractionTimeout,\r\n    } = useAgentState()\r\n\r\n    return useMemo(\r\n        function memoizeActiveOrLastInteraction() {\r\n            if (!(interactions && interactions.length)) {\r\n                return null\r\n            }\r\n\r\n            if (!activeItem) {\r\n                if (\r\n                    reservedForIncomingInteraction ||\r\n                    reservedForIncomingInteractionTimeout\r\n                ) {\r\n                    return (\r\n                        interactions\r\n                            .reverse()\r\n                            .find(\r\n                                interaction =>\r\n                                    isInternalChat(interaction) ||\r\n                                        isPotentialInteraction(interaction),\r\n                            ) ?? null\r\n                    )\r\n                }\r\n                return interactions[interactions.length - 1]\r\n            }\r\n\r\n            return activeItem\r\n        },\r\n        [\r\n            activeItem,\r\n            interactions,\r\n            reservedForIncomingInteraction,\r\n            reservedForIncomingInteractionTimeout,\r\n        ],\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\nexport function useInteractionBarDisplayName(activeItem: Item | null) {\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const {\r\n        displayData: {displayName, firstName = '', lastName = ''},\r\n    } = activeItem ?? {displayData: {}}\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            if (!activeItem) {\r\n                return null\r\n            }\r\n\r\n            return firstName && lastName\r\n                ? formatFullName(firstName, lastName)\r\n                : displayName\r\n\r\n        },\r\n        [activeItem, displayName, firstName, formatFullName, lastName],\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {MAX_INTERACTIONS_PER_PAGE} from './usePagination'\r\n\r\n\r\ntype GetItemCoordsByIndex = (index: number) => {page: number; index: number}\r\ntype GoToPage = (page: number) => void\r\n\r\ninterface UseAccessibleShortcutsParams {\r\n    currentPage: number\r\n    getItemCoordsByIndex: GetItemCoordsByIndex\r\n    goToPage: GoToPage\r\n}\r\n\r\nexport function useAccessibleShortcuts(\r\n    {currentPage, getItemCoordsByIndex, goToPage}: UseAccessibleShortcutsParams,\r\n): void {\r\n    useEffect(() => {\r\n\r\n        function onKeyPress(evt: KeyboardEvent) {\r\n            if (evt.altKey && /^Digit[0-9]$/.test(evt.code)) {\r\n                evt.preventDefault()\r\n                const index = +evt.code.replace('Digit', '') - 1\r\n                return navigateOverInteractionsByNumbers(index, getItemCoordsByIndex, goToPage)\r\n            }\r\n            if (evt.altKey && /^ArrowLeft|ArrowRight$/.test(evt.code)) {\r\n                evt.preventDefault()\r\n                setTimeout(() => navigateOverInteractionsByArrows(evt, currentPage, getItemCoordsByIndex, goToPage), 0)\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', onKeyPress)\r\n\r\n        return function unsubscribeOnKeyPress() {\r\n            document.removeEventListener('keydown', onKeyPress)\r\n        }\r\n    }, [currentPage, getItemCoordsByIndex, goToPage])\r\n}\r\n\r\nfunction navigateOverInteractionsByArrows(\r\n    evt: KeyboardEvent,\r\n    currentPage: number,\r\n    getItemCoordsByIndex: GetItemCoordsByIndex,\r\n    goToPage: GoToPage,\r\n) {\r\n    const interactions: HTMLElement[] = Array.from(document.querySelectorAll('[data-testid=\"interaction-item\"]'))\r\n\r\n    if (interactions?.length) {\r\n        let currentPagedIndex = interactions.findIndex(elt => !!elt.dataset.active)\r\n\r\n        if (evt.code === 'ArrowLeft') {\r\n            currentPagedIndex--\r\n        } else {\r\n            currentPagedIndex++\r\n        }\r\n\r\n        const currentIndex = currentPagedIndex + currentPage * MAX_INTERACTIONS_PER_PAGE\r\n\r\n        return navigateOverInteractionsByNumbers(currentIndex, getItemCoordsByIndex, goToPage)\r\n    }\r\n}\r\n\r\nfunction navigateOverInteractionsByNumbers(\r\n    index: number,\r\n    getItemCoordsByIndex: GetItemCoordsByIndex,\r\n    goToPage: GoToPage,\r\n) {\r\n    const interactions: HTMLElement[] = Array.from(document.querySelectorAll('[data-testid=\"interaction-item\"]'))\r\n\r\n    if (interactions && interactions.length) {\r\n        const {page, index: pagedIndex} = getItemCoordsByIndex(index)\r\n\r\n        if (page === -1 || pagedIndex === -1) {\r\n            return\r\n        }\r\n\r\n        goToPage(page)\r\n\r\n        if (interactions[pagedIndex]) {\r\n            return interactions[pagedIndex].click()\r\n        }\r\n    }\r\n}\r\n","import {useRef, useState} from 'react'\r\n\r\n\r\nexport const MAX_INTERACTIONS_PER_PAGE = 4\r\n\r\ntype Props = {\r\n    itemIds: string[]\r\n}\r\n\r\nexport function usePagination({itemIds}: Props) {\r\n    const [currentPage, setCurrentPage] = useState<number>(0)\r\n\r\n    const totalAmountRef = useRef(itemIds.length)\r\n    totalAmountRef.current = itemIds.length\r\n\r\n    const paginationIsEnabledRef = useRef(false)\r\n    paginationIsEnabledRef.current = totalAmountRef.current > MAX_INTERACTIONS_PER_PAGE + 1\r\n\r\n    const numberOfPages = Math.ceil(totalAmountRef.current / MAX_INTERACTIONS_PER_PAGE)\r\n    const isLastPage = (page: number) => page + 1 >= numberOfPages\r\n    const isFirstPage = (page: number) => page + 1 <= 1\r\n\r\n    function goNextPage() {\r\n        if (!isLastPage(currentPage)) {\r\n            setCurrentPage(currentPage + 1)\r\n        }\r\n    }\r\n\r\n    function goPreviousPage() {\r\n        if (!isFirstPage(currentPage)) {\r\n            setCurrentPage(isFirstPage(currentPage) ? 1 : currentPage - 1)\r\n        }\r\n    }\r\n\r\n    const pagedItems = itemIds.filter((_, index) => {\r\n        if (!paginationIsEnabledRef.current) {\r\n            return true\r\n        }\r\n        const startIndex = currentPage * MAX_INTERACTIONS_PER_PAGE - 1\r\n        const lastIndex = startIndex + MAX_INTERACTIONS_PER_PAGE\r\n        return index > startIndex && index <= lastIndex\r\n    })\r\n\r\n    function getItemCoordsByIndex(index: number) {\r\n\r\n        if (index + 1 > totalAmountRef.current) {\r\n            return {page: -1, index: -1}\r\n        }\r\n\r\n        if (!paginationIsEnabledRef.current) {\r\n            return {page: 0, index}\r\n        } else {\r\n            const page = Math.floor(index / MAX_INTERACTIONS_PER_PAGE)\r\n            const pagedIndex = index % MAX_INTERACTIONS_PER_PAGE\r\n            return {page, index: pagedIndex}\r\n        }\r\n\r\n    }\r\n\r\n    function goToPage(page: number) {\r\n        setCurrentPage(page)\r\n    }\r\n    return {\r\n        currentPage,\r\n        goNextPage,\r\n        goPreviousPage,\r\n        showPrev: paginationIsEnabledRef.current && !isFirstPage(currentPage),\r\n        showNext: paginationIsEnabledRef.current && !isLastPage(currentPage),\r\n        prevAmount: MAX_INTERACTIONS_PER_PAGE,\r\n        nextAmount: isLastPage(currentPage + 1) ? (totalAmountRef.current % MAX_INTERACTIONS_PER_PAGE || MAX_INTERACTIONS_PER_PAGE) : MAX_INTERACTIONS_PER_PAGE,\r\n        pagedItems,\r\n        paginationIsEnabled: paginationIsEnabledRef.current,\r\n        getItemCoordsByIndex,\r\n        goToPage,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useIsParallelInteractionContext} from '@bpinc/lib-interaction-context'\r\nimport {parallelItemsAtom, parallelItemsHaveEnoughSpaceAtom} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport const useParallelChats = (item?: Item) => {\r\n    const getLocation = useNavigationState('getLocationState')\r\n    const isCommunicator = useIsCommunicator()\r\n    const isParalleled = useIsParallelInteractionContext()\r\n    const showParallelControls = !isCommunicator && getLocation() === AppRoutes.interactionWorkspace\r\n    const hasEnoughSpaceForParallelItem = useAtomValue(parallelItemsHaveEnoughSpaceAtom)\r\n\r\n\r\n    const parallelItems = useAtomValue(parallelItemsAtom)\r\n    const parallelItemsDispatch = useSetAtom(parallelItemsAtom)\r\n    const setParallelInteractionsWidth = useCommunicatorUIState(s => s.setParallelInteractionsWidth)\r\n\r\n    const openParallelChat = useEvent((e: React.SyntheticEvent) => {\r\n        e.stopPropagation()\r\n        item?.id && parallelItemsDispatch({\r\n            type: 'add',\r\n            payload: {activeId: item.id, ids: [item.id, ...item?.associatedItemIds ?? []]},\r\n        })\r\n\r\n        /**  If all parallel items have ids,\r\n         * we should increase the width as we add one more item visually\r\n        */\r\n        if (parallelItems.every(p => p.activeItemId)) {\r\n            setParallelInteractionsWidth(w => w + w / (parallelItems.length + 1))\r\n        }\r\n    })\r\n\r\n    const closeParallelChat = useEvent((e: React.SyntheticEvent) => {\r\n        e.stopPropagation()\r\n        item?.id && parallelItemsDispatch({\r\n            type: 'empty',\r\n            payload: {ids: [item.id, ...item?.associatedItemIds ?? []]},\r\n        })\r\n    })\r\n\r\n    return useMemo(() => ({\r\n        showOpenParallelChatButton: showParallelControls && hasEnoughSpaceForParallelItem && !isParalleled,\r\n        showCloseParallelChatButton: showParallelControls && isParalleled,\r\n        openParallelChat,\r\n        closeParallelChat,\r\n    }), [\r\n        showParallelControls,\r\n        hasEnoughSpaceForParallelItem,\r\n        isParalleled,\r\n        openParallelChat,\r\n        closeParallelChat,\r\n    ])\r\n}\r\n","import type {FC, MouseEvent} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface CompleteButtonProps {\r\n    onClick: (e: MouseEvent) => void\r\n    className?: string\r\n    tooltip?: string\r\n    children: string\r\n}\r\n\r\nexport const CompleteInteractionButton: FC<CompleteButtonProps> = ({className, onClick, children, tooltip}) => {\r\n    return (\r\n        //TO DO: add clickThrottle=500 in button after refactoring button\r\n        <Button\r\n            variant=\"primary\"\r\n            onClick={onClick}\r\n            className={tcn('h-7 rounded-xs px-3 py-1.5 !font-semibold button-sm', className)}\r\n            data-testid=\"complete-button\"\r\n            tooltip={tooltip}\r\n        >\r\n            {children}\r\n        </Button>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {ButtonProps} from '@servicepattern/ui'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = ButtonProps & {\r\n    withStateLayer?: boolean\r\n}\r\n\r\nexport const EndButton: FC<Props> = ({withStateLayer, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'rounded p-2.5',\r\n                'transition-colors hover:state-layer-opacity-4',\r\n                'state-layer-bg-[--c-main-bars-bg] state-layer-color-black state-layer-opacity-0', {\r\n                    'p-0': !withStateLayer,\r\n                })}\r\n        >\r\n            <Button\r\n                //TODO: Add the click throttle\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                color=\"danger\"\r\n                className=\"px-3 py-0.5\"\r\n                data-testid=\"complete-button\"\r\n                {...props}\r\n            >\r\n                {t.INTERACTIONS.end()}\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport type {ButtonProps} from '@servicepattern/ui'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {IconEndCall} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = ButtonProps & {\r\n    isDestructive?: boolean\r\n    renderIcon?: () => JSX.Element\r\n}\r\nexport const EndCallButton: FC<Props> = React.memo(({isDestructive, renderIcon, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <Button\r\n            //TODO: Add the click throttle\r\n            variant={isDestructive ? 'destructive' : 'neutral'}\r\n            size=\"sm\"\r\n            color=\"danger\"\r\n            className={tcn({'h-7 w-12 px-3 py-0.5': isDestructive, 'ml-2 h-6 px-2 py-1 text-on-error': !isDestructive})}\r\n            tooltip={t.CALL_DETAILS_FORM.interaction_endCall()}\r\n            data-testid=\"complete-button\"\r\n            {...props}\r\n        >\r\n            {renderIcon?.() || <IconEndCall className=\"size-5 svg-color-current\" />}\r\n        </Button>\r\n    )\r\n})\r\n","import React, {type FC} from 'react'\r\nimport {type ButtonProps, Button} from '@servicepattern/ui'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const EndChatButton: FC<ButtonProps> = ({className, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <Button\r\n            variant=\"neutral\"\r\n            size=\"xs\"\r\n            className={tcn(\r\n                'rounded-sm border-action',\r\n                'text-on-error',\r\n                'ml-2 px-2 py-1',\r\n                'h-6',\r\n                className,\r\n            )}\r\n            data-testid=\"complete-button\"\r\n            {...props}\r\n        >\r\n            {t.INTERACTIONS.end()}\r\n        </Button>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {AnimatePresence, motion} from 'framer-motion'\r\n\r\nimport {CircleButton, IconHold16, IconPause16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {InteractionTimer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\ninterface HoldButtonProps extends ControlButton {\r\n    holdStartTime?: number\r\n}\r\n\r\nexport const HoldButton: FC<HoldButtonProps> = ({\r\n    isActive,\r\n    onClick,\r\n    holdStartTime,\r\n    disabled,\r\n    iconClassName,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <CircleButton\r\n            isActive={isActive}\r\n            onClick={onClick}\r\n            className=\"group/hold w-auto\"\r\n            disabled={disabled}\r\n            tooltip={{\r\n                content: isActive\r\n                    ? t.CALL_DETAILS_FORM.interaction_retrieve()\r\n                    : t.CALL_DETAILS_FORM.interaction_hold(),\r\n            }}\r\n            data-testid=\"hold-button\"\r\n            data-on-hold={isActive || undefined}\r\n        >\r\n            <motion.div\r\n                animate={isActive ? {paddingRight: 9} : {paddingRight: 5}}\r\n                className=\"flex items-center py-[3px] pl-[5px]\"\r\n            >\r\n                <div className={tcn('flex gap-0.5 ')}>\r\n                    <IconHold16\r\n                        className={tcn(iconClassName, 'hidden size-4.5', {\r\n                            'group-hover/hold:block': isActive,\r\n                        })}\r\n                    />\r\n                    <IconPause16\r\n                        className={tcn(iconClassName, 'visible size-4.5', {\r\n                            'group-hover/hold:hidden': isActive,\r\n                        })}\r\n                    />\r\n                </div>\r\n                <AnimatePresence>\r\n                    {isActive && (\r\n                        <motion.div\r\n                            initial={{width: 0}}\r\n                            animate={{width: 'auto'}}\r\n                            exit={{width: 0}}\r\n                        >\r\n                            <InteractionTimer startTime={holdStartTime} />\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n            </motion.div>\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {MicrophoneVolume} from '@bpinc/lib-helpers'\r\nimport {IconMute16, IconVoiceVolume} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface MicrophoneIconProps {\r\n    muted: boolean\r\n    className?: string\r\n}\r\n\r\nconst micVolumeManager = new MicrophoneVolume()\r\n\r\nexport const MicrophoneIcon: FC<MicrophoneIconProps> = ({muted, className}) => {\r\n    const microphoneRef = useRef<SVGSVGElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (!muted) {\r\n            micVolumeManager.startAnalysis(volume => {\r\n                if (!microphoneRef.current) {\r\n                    return\r\n                }\r\n\r\n                updateGradient(microphoneRef.current)\r\n\r\n                function updateGradient(svg: SVGElement) {\r\n                    const breakpoint = svg.querySelector<SVGStopElement>('linearGradient stop')\r\n                    if (!breakpoint) {\r\n                        return\r\n                    }\r\n\r\n                    breakpoint.setAttribute('offset', `${volume}%`)\r\n                }\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            micVolumeManager.stopAnalysis()\r\n        }\r\n    }, [muted])\r\n    return muted ? (\r\n        <IconMute16 className={tcn('size-4.5', className)} />\r\n    ) : (\r\n        <IconVoiceVolume className={tcn('size-4.5 icon-default', className)} ref={microphoneRef} />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MicrophoneIcon} from './MicrophoneIcon'\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const MuteButton: FC<ControlButton> = ({\r\n    isActive,\r\n    disabled,\r\n    onClick,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <CircleButton\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            tooltip={{content: isActive\r\n                ? t.CALL_DETAILS_FORM.unmute_tooltip()\r\n                : t.CALL_DETAILS_FORM.mute_tooltip(),\r\n            }}\r\n            data-testid=\"mute-button\"\r\n            data-muted={isActive || undefined}\r\n        >\r\n            <MicrophoneIcon className=\"icon-fade\" muted={!!isActive} />\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton, IconRecording16, IconRecordingActive16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const RecordButton: FC<ControlButton> = ({\r\n    isActive,\r\n    onClick,\r\n    className,\r\n    disabled,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <CircleButton\r\n            onClick={onClick}\r\n            isActive={isActive}\r\n            disabled={disabled}\r\n            className={tcn(disabled ? 'icon-disabled' : 'icon-error', className)}\r\n            tooltip={{\r\n                content: isActive\r\n                    ? t.CALL_DETAILS_FORM.interaction_recordStop_tooltip()\r\n                    : t.CALL_DETAILS_FORM.interaction_recordStart_tooltip(),\r\n            }}\r\n            data-testid=\"call-recording-button\"\r\n            data-recording-active={isActive || undefined}\r\n        >\r\n            {isActive ? (\r\n                <IconRecordingActive16 className=\"size-4.5\" />\r\n            ) : (\r\n                <IconRecording16 className=\"size-4.5\" />\r\n            )}\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {CircleButton, IconForward16} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const TransferButton: FC<ControlButton> = ({isActive, onClick, disabled, iconClassName, tooltip}) => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <CircleButton\r\n            isActive={isActive}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            tooltip={{content: tooltip || t.CALL_DETAILS_FORM.interaction_initiate_transfer()}}\r\n            data-testid=\"transfer-button\"\r\n            data-on-hold={isActive || undefined}\r\n        >\r\n            <IconForward16 className={iconClassName} />\r\n        </CircleButton>\r\n    )\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {isAfterCallWork, isChatConference, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {CompleteInteractionButton, EndButton, EndCallButton, EndChatButton} from '@bpinc/lib-interaction-buttons'\r\nimport {IconCheck16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {useCompleteButtonTexts} from './useCompleteButtonTexts'\r\n\r\n\r\ninterface InteractionsListItemButtonProps {\r\n    item?: Item\r\n    className?: string\r\n    handleCloseClick: (e: MouseEvent) => void\r\n    small?: boolean\r\n    isChat?: boolean\r\n    isDestructive?: boolean\r\n    renderIcon?: () => JSX.Element\r\n}\r\n\r\nexport const CompleteButton: React.FC<InteractionsListItemButtonProps> = ({\r\n    handleCloseClick,\r\n    item,\r\n    small,\r\n    className,\r\n    isChat,\r\n    isDestructive,\r\n    renderIcon,\r\n}) => {\r\n    const {tooltip, text} = useCompleteButtonTexts(item)\r\n\r\n    if (isAfterCallWork(item) || isWorkItem(item)) {\r\n        return small ? (\r\n            <Button\r\n                variant=\"neutral\"\r\n                size=\"xs\"\r\n                className={tcn('ml-2 px-2 py-1 text-on-error', className)}\r\n                data-testid=\"complete-button\"\r\n                onClick={handleCloseClick}\r\n            >\r\n                <span className=\"flex size-3.5 items-center justify-center rounded-full bg-primary-default\">\r\n                    <IconCheck16 className=\"size-2.5 [&_path]:stroke-neutral-0\" />\r\n                </span>\r\n            </Button>\r\n        ) : (\r\n            <CompleteInteractionButton\r\n                onClick={handleCloseClick}\r\n                tooltip={tooltip}\r\n            >\r\n                {text}\r\n            </CompleteInteractionButton>\r\n        )\r\n    }\r\n\r\n    if (isChatConference(item) || isChat) {\r\n        return (\r\n            <EndButton\r\n                className=\"h-7 w-12\"\r\n                onClick={handleCloseClick}\r\n                tooltip={tooltip}\r\n            />\r\n        )\r\n    }\r\n\r\n    if (small) {\r\n        return (\r\n            <EndChatButton\r\n                onClick={handleCloseClick}\r\n                tooltip={tooltip}\r\n                className={className}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <EndCallButton\r\n            renderIcon={renderIcon}\r\n            isDestructive={isDestructive}\r\n            onClick={handleCloseClick}\r\n            tooltip={tooltip}\r\n        />\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {\r\n    isAfterCallWork,\r\n    isCall,\r\n    isCallConference,\r\n    isChatConference,\r\n    isPotentialInteraction,\r\n    isWorkItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Output {\r\n    text: string\r\n    tooltip?: string\r\n}\r\n\r\nexport function useCompleteButtonTexts(item?: Item): Output {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(function memoizeOutput() {\r\n\r\n        if (!item) {\r\n            return {\r\n                text: '',\r\n            }\r\n        }\r\n\r\n        if (isPotentialInteraction(item)) {\r\n            return {\r\n                text: t.ACTIVITY_HISTORY.button_close_tooltip(),\r\n            }\r\n        }\r\n        if (isAfterCallWork(item) || isWorkItem(item)) {\r\n            return {\r\n                text: t.CALL_DETAILS_FORM.interaction_completeACW(),\r\n                tooltip: t.GLOBAL.complete_interaction(),\r\n            }\r\n        }\r\n\r\n        if (isChatConference(item)) {\r\n            return {\r\n                text: t.CALL_DETAILS_FORM.interaction_leaveConference(),\r\n            }\r\n        }\r\n\r\n        if (isCallConference(item)) {\r\n            return {\r\n                text: item.isConferenceHost\r\n                    ? t.CALL_DETAILS_FORM.interaction_endConference()\r\n                    : t.CALL_DETAILS_FORM.interaction_leaveConference(),\r\n            }\r\n        }\r\n\r\n        if (isCall(item)) {\r\n            return {text: t.CALL_DETAILS_FORM.interaction_endCall()}\r\n        }\r\n\r\n        return {text: t.CALL_DETAILS_FORM.interaction_endChat()}\r\n\r\n    }, [item, t])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useOptimisticActivation} from '@bpinc/ad-interaction-state-hooks/src/hooks/useOptimisticActivation'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {FlagMode} from '@bpinc/ad-interaction-state-types'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {ButtonIcon, IconFlag16} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const FlagButton: React.FC<{className?: string}> = ({className}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const {flagItem} = useInteractionStateMethods()\r\n    const isFlagged = useInteractionProp(interactionId, activeItem => !!activeItem?.displayData?.isFlagged)\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n\r\n    const [optimisticIsFlagged, toggleOptimistigIsFlagged] = useOptimisticActivation(isFlagged)\r\n\r\n    function handleClick() {\r\n        toggleOptimistigIsFlagged()\r\n        flagItem(interactionStepId, isFlagged ? FlagMode.unflag : FlagMode.flag)\r\n    }\r\n\r\n    return (\r\n        <ButtonIcon\r\n            active={optimisticIsFlagged}\r\n            onClick={handleClick}\r\n            className={className}\r\n            tooltip={isFlagged ? t.SHORTCUTS_DIALOG_BOX.shortcuts_alt_shift_m() : t.SHORTCUTS_DIALOG_BOX.shortcuts_alt_m()}\r\n            data-testid=\"flag-button\"\r\n            data-flagged={isFlagged || undefined}\r\n        >\r\n            <IconFlag16 />\r\n        </ButtonIcon>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\nimport type {PrimitiveAtom} from 'jotai'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\n\r\n\r\nconst optimisticTimeout = 1_000\r\n\r\nexport function useOptimisticActivation(\r\n    isActive: boolean,\r\n) {\r\n    const optimisticActive = useBoolean(isActive)\r\n\r\n    useEffect(() => {\r\n        let timeout: number\r\n        if (isActive !== optimisticActive.value) {\r\n            timeout = setTimeout(() => {\r\n                optimisticActive.toggle(isActive)\r\n            }, optimisticTimeout)\r\n            return () => clearTimeout(timeout)\r\n        }\r\n    }, [isActive, optimisticActive])\r\n\r\n    return [optimisticActive.value, optimisticActive.toggle] as const\r\n}\r\n\r\nexport function useOptimisticAtomActivation(\r\n    isActive: boolean,\r\n    atom: PrimitiveAtom<boolean>,\r\n) {\r\n    const [value, setValue] = useAtom(atom)\r\n\r\n    useEffect(() => {\r\n        let timeout: number\r\n        if (isActive !== value) {\r\n            timeout = setTimeout(() => {\r\n                setValue(isActive)\r\n            }, optimisticTimeout)\r\n            return () => clearTimeout(timeout)\r\n        }\r\n    }, [isActive, setValue, value])\r\n\r\n    return [value, setValue] as const\r\n}\r\n","import React, {type FC, useCallback} from 'react'\r\n\r\nimport {ButtonIcon, IconChatDock} from '@bpinc/lib-jskit-ui'\r\nimport type {ButtonProps} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionPopupItemIdSelector, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface ChatWindowButtonProps extends ButtonProps {\r\n    itemId: string\r\n}\r\n\r\nexport const InternalChatWindowButton: FC<ChatWindowButtonProps> = ({itemId, ...props}) => {\r\n    const {ACTIVITY_HISTORY: i18n} = useLocalizationState('t')\r\n    const setState = useInteractionUIItemStateSetter()\r\n    const popupItemId = useInteractionPopupItemIdSelector()\r\n\r\n    const onClick = useCallback(\r\n        function onClickCallback() {\r\n            setState(itemId, s => ({...s, chatView: 'popup'}))\r\n            if (popupItemId) {\r\n                setState(popupItemId, s => ({...s, chatView: 'embedded'}))\r\n            }\r\n        }, [popupItemId, itemId, setState],\r\n    )\r\n    return (\r\n        <ButtonIcon\r\n            tooltip={i18n.button_open_popup_tooltip()}\r\n            onClick={onClick}\r\n            {...props}\r\n        >\r\n            <IconChatDock className=\"size-4\" />\r\n        </ButtonIcon>\r\n    )\r\n}\r\n","import {useEffect, useMemo, useState} from 'react'\r\n\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {cutMilliseconds, useTimer} from '@bpinc/lib-helpers'\r\nimport {useUnread as useUnreadHelper} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nconst MAX_TIME = 90\r\n\r\n// @TODO - we need to make that 90 seconds timer synchronized between multiple browser tabs.\r\n//  In order to achieve this we will have to rewrite this timer using timers-state\r\nexport const useUnread = (item: Item, withTimer: boolean) => {\r\n    const [startTime, setStartTime] = useState<number | undefined>(undefined)\r\n    const customerWaitTimer = useTimer(startTime, {format: cutMilliseconds})\r\n    const unreadAmount = useUnreadHelper(item)\r\n\r\n    useEffect(\r\n        function setTimer() {\r\n            withTimer && setStartTime(\r\n                unreadAmount > 0\r\n                    ? new Date().getTime()\r\n                    : undefined,\r\n            )\r\n        },\r\n        [unreadAmount, withTimer],\r\n    )\r\n\r\n    useEffect(\r\n        function resetTimer() {\r\n            if (customerWaitTimer && customerWaitTimer >= MAX_TIME) {\r\n                setStartTime(undefined)\r\n            }\r\n        },\r\n        [customerWaitTimer],\r\n    )\r\n\r\n    return useMemo(() => ({unreadAmount, customerWaitTimer}), [unreadAmount, customerWaitTimer])\r\n}\r\n","import React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype UnreadProps = {\r\n    unreadAmount: number\r\n    customerWaitTimer: number | undefined\r\n    showTimerProgressBar: boolean\r\n}\r\n\r\nexport const Unread: React.FC<UnreadProps> = ({unreadAmount, customerWaitTimer, showTimerProgressBar}) => {\r\n    const isActive = {'bg-primary-700': Boolean(customerWaitTimer)}\r\n\r\n    const textAmount = unreadAmount > 99 ? '99+' : unreadAmount\r\n\r\n    const width = `${customerWaitTimer ? (customerWaitTimer + 10) : 100}%`\r\n\r\n    if (unreadAmount < 1) return null\r\n\r\n    return (\r\n        <div className=\"relative ml-1.5 size-4\">\r\n            <div\r\n                data-testid=\"unread-counter\"\r\n                className={tcn(\r\n                    'flex size-full items-center justify-center rounded-full text-icon bg-warning',\r\n                    isActive,\r\n                )}\r\n            >\r\n                <span className=\"select-none caption-xs text-inverse-primary\">\r\n                    {textAmount}\r\n                </span>\r\n            </div>\r\n            {showTimerProgressBar && (\r\n                <div className=\"absolute -bottom-1.5 -left-0.5 m-auto h-[3px] w-5 rounded-full bg-primary-container-variant2\">\r\n                    <div\r\n                        className={tcn('h-[3px] rounded-full bg-warning', isActive)}\r\n                        style={{width}}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionChatDataSelector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getInteractionStepId,\r\n    isAfterCallWork,\r\n    isExternalCall,\r\n    isExternalChat,\r\n    isInternalChat,\r\n    isPotentialInteraction,\r\n    isPotentialInternalInteraction,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useDisconnectButtonClickHandler} from '@bpinc/lib-helpers-ui'\r\nimport {ButtonIcon, IconChatPanelOpen} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Sentiment} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIStateItemSelector} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useParallelChats} from '../../hooks/useParallelChats'\r\nimport {CompleteButton} from '../buttons/CompleteButton'\r\nimport {FlagButton} from '../buttons/FlagButton'\r\nimport {InternalChatWindowButton} from '../buttons/InternalChatWindowButton'\r\nimport {useUnread} from './hooks/useUnread'\r\nimport {Unread} from './Unread'\r\n\r\n\r\ntype ButtonsOnHoverProps = {\r\n    item: Item\r\n}\r\n\r\nconst common = 'flex items-center'\r\nconst showInFocusClassName = tcn(\r\n    common,\r\n    'w-0 group-focus-within:w-auto group-hover:w-auto',\r\n    'opacity-0 group-focus-within:opacity-100 group-hover:opacity-100',\r\n)\r\nconst showOutFocusClassName = tcn(\r\n    common,\r\n    'w-auto group-focus-within:w-0 group-hover:w-0',\r\n    'opacity-100 group-focus-within:opacity-0 group-hover:opacity-0',\r\n)\r\n\r\nexport const ButtonsOnHover: React.FC<ButtonsOnHoverProps> = ({item}) => {\r\n    const {t} = useLocalizationState()\r\n    const totalChatSentiment = useInteractionChatDataSelector(\r\n        getInteractionStepId(item),\r\n        s => s?.sentiment,\r\n    )\r\n    const isEmbeddedChatView = useInteractionUIStateItemSelector(\r\n        item.id,\r\n        s => s?.chatView === 'embedded',\r\n    )\r\n    const handleDisconnectButtonClick = useDisconnectButtonClickHandler()\r\n\r\n    const onClose = useCallback(\r\n        (event: React.SyntheticEvent) => handleDisconnectButtonClick(item, {event}),\r\n        [handleDisconnectButtonClick, item],\r\n    )\r\n\r\n    const showFlagButton = useInteractionProp(\r\n        item.id,\r\n        activeItem =>\r\n            !isPotentialInteraction(activeItem) && !isInternalChat(activeItem),\r\n    )\r\n\r\n    const showExternalChatWindowButton = (isExternalChat(item) || isExternalCall(item))\r\n    const showInternalChatWindowButton = (\r\n        (isInternalChat(item) || isPotentialInternalInteraction(item)) &&\r\n        isEmbeddedChatView\r\n    )\r\n    const isAfterCallWorkState = isAfterCallWork(item)\r\n\r\n    const {unreadAmount, customerWaitTimer} = useUnread(item, showExternalChatWindowButton)\r\n\r\n    const {showOpenParallelChatButton, openParallelChat} = useParallelChats(item)\r\n\r\n    if (isAfterCallWorkState) {\r\n        return (\r\n            <>\r\n                <div className={showOutFocusClassName}>\r\n                    <span className=\"button-sm text-neutral-on-secondary\">\r\n                        {t.INTERACTIONS.acl_after_call_work_label()}\r\n                    </span>\r\n                </div>\r\n                <div className={showInFocusClassName}>\r\n                    <CompleteButton\r\n                        item={item}\r\n                        handleCloseClick={onClose}\r\n                        small\r\n                    />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={showInFocusClassName}>\r\n                {showExternalChatWindowButton && showOpenParallelChatButton && (\r\n                    <ButtonIcon\r\n                        tooltip={t.KNOWLEDGE_BASE.new_tab_button_tooltip()}\r\n                        onClick={openParallelChat}\r\n                    >\r\n                        <IconChatPanelOpen className=\"size-4\" />\r\n                    </ButtonIcon>\r\n                )}\r\n                {showInternalChatWindowButton && (\r\n                    <InternalChatWindowButton itemId={item.id} />\r\n                )}\r\n                <CompleteButton\r\n                    item={item}\r\n                    handleCloseClick={onClose}\r\n                    small\r\n                />\r\n            </div>\r\n            <div className={showOutFocusClassName}>\r\n                {showFlagButton && <FlagButton />}\r\n                <Unread\r\n                    unreadAmount={unreadAmount}\r\n                    customerWaitTimer={customerWaitTimer}\r\n                    showTimerProgressBar={showExternalChatWindowButton}\r\n                />\r\n                {totalChatSentiment && <Sentiment className=\"ml-2\" sentiment={totalChatSentiment} />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"colorizeIconStates\":\"communicator_InteractionsPage_colorizeIconStates_O0SRk\",\"wrapper\":\"communicator_InteractionsPage_wrapper_P0HE5\",\"flex\":\"communicator_InteractionsPage_flex_3uIJI\",\"buttonsSubGroup\":\"communicator_InteractionsPage_buttonsSubGroup_o5Kvu\",\"noBorderButton\":\"communicator_InteractionsPage_noBorderButton_boq9g\",\"chatCallEndCall\":\"communicator_InteractionsPage_chatCallEndCall_hod3b\",\"interactionVideo\":\"communicator_InteractionsPage_interactionVideo_lxYHD\",\"interactionVideoExternal\":\"communicator_InteractionsPage_interactionVideoExternal_elzNi\",\"interactionVideoInternal\":\"communicator_InteractionsPage_interactionVideoInternal_Sarl8\",\"itemButton\":\"communicator_InteractionsPage_itemButton_tAf80\",\"exit\":\"communicator_InteractionsPage_exit_dObfC\",\"closeIconBordered\":\"communicator_InteractionsPage_closeIconBordered_6saxe\",\"stateIcon\":\"communicator_InteractionsPage_stateIcon_6fXP8\",\"timer\":\"communicator_InteractionsPage_timer_XYQro\",\"itemTop\":\"communicator_InteractionsPage_itemTop_zj7Aa\",\"smallConferenceItemTop\":\"communicator_InteractionsPage_smallConferenceItemTop_4gkWX\",\"bigConferenceItemTop\":\"communicator_InteractionsPage_bigConferenceItemTop_1cmJT\",\"activeItemExtraInfo\":\"communicator_InteractionsPage_activeItemExtraInfo_H9B1L\",\"itemHeader\":\"communicator_InteractionsPage_itemHeader_v3D6n\",\"activeInteraction\":\"communicator_InteractionsPage_activeInteraction_zY7HN\",\"row\":\"communicator_InteractionsPage_row_WoXDm\",\"partyRow\":\"communicator_InteractionsPage_partyRow_JOjV7\",\"nameRow\":\"communicator_InteractionsPage_nameRow_vV576\",\"itemExtraWrapper\":\"communicator_InteractionsPage_itemExtraWrapper_DoYgm\",\"itemExtra\":\"communicator_InteractionsPage_itemExtra_vCBFc\",\"mediaTypeIcon\":\"communicator_InteractionsPage_mediaTypeIcon_rIOe6\",\"buttonsGroup\":\"communicator_InteractionsPage_buttonsGroup_9PdmI\",\"transparentButton\":\"communicator_InteractionsPage_transparentButton_PMRu4\",\"closeChatButton\":\"communicator_InteractionsPage_closeChatButton_4h4w4\",\"end\":\"communicator_InteractionsPage_end_PgiOh\",\"singleButtonWrapper\":\"communicator_InteractionsPage_singleButtonWrapper_pUa7f\",\"modalsBlock\":\"communicator_InteractionsPage_modalsBlock_kQfLV\",\"tabContent\":\"communicator_InteractionsPage_tabContent_lVRnG\",\"tabInner\":\"communicator_InteractionsPage_tabInner_UK9aa\",\"rescue\":\"communicator_InteractionsPage_rescue_s4hA4\",\"complete\":\"communicator_InteractionsPage_complete_Wyvib\",\"completeSemantic\":\"communicator_InteractionsPage_completeSemantic_c8fM1\",\"flagButton\":\"communicator_InteractionsPage_flagButton_Afpau\",\"play\":\"communicator_InteractionsPage_play_1jZ7b\",\"playActive\":\"communicator_InteractionsPage_playActive_4hYcP\",\"removeParty\":\"communicator_InteractionsPage_removeParty_jskaD\",\"removePartyBig\":\"communicator_InteractionsPage_removePartyBig_mtPJS\",\"disabledTab\":\"communicator_InteractionsPage_disabledTab_KcegK\",\"errorMessage\":\"communicator_InteractionsPage_errorMessage_FHaA5\",\"keypadInput\":\"communicator_InteractionsPage_keypadInput_2Y2qj\",\"partyAvatar\":\"communicator_InteractionsPage_partyAvatar_7xErf\",\"pagination\":\"communicator_InteractionsPage_pagination_KgiGN\",\"paginationButton\":\"communicator_InteractionsPage_paginationButton_HNoWM\",\"partyName\":\"communicator_InteractionsPage_partyName_GZBI6\",\"commonPartyPhone\":\"communicator_InteractionsPage_commonPartyPhone_VcOw2\",\"partyPhone\":\"communicator_InteractionsPage_partyPhone_IYfIn\",\"bigPartyPhone\":\"communicator_InteractionsPage_bigPartyPhone_lHbKQ\",\"partyStar\":\"communicator_InteractionsPage_partyStar_gX0vG\",\"activityHistoryCallBtn\":\"communicator_InteractionsPage_activityHistoryCallBtn_D39PX\",\"workItemButtons\":\"communicator_InteractionsPage_workItemButtons_e0biP\",\"workItemButton\":\"communicator_InteractionsPage_workItemButton_60ofM\",\"workItemButtonsGroup\":\"communicator_InteractionsPage_workItemButtonsGroup_DMZkF\",\"workItemButtonsGroupTop\":\"communicator_InteractionsPage_workItemButtonsGroupTop_Ejm1G\",\"workItemCompleteButton\":\"communicator_InteractionsPage_workItemCompleteButton_iVwhV\",\"workItemCircleCompleteButton\":\"communicator_InteractionsPage_workItemCircleCompleteButton_HfOCb\",\"callProblemImage\":\"communicator_InteractionsPage_callProblemImage_n2yZK\",\"reportProblemButton\":\"communicator_InteractionsPage_reportProblemButton_fSFZQ\",\"showMoreList\":\"communicator_InteractionsPage_showMoreList_eHGPN\",\"prerecordedList\":\"communicator_InteractionsPage_prerecordedList_YgYJO\",\"showMoreListItem\":\"communicator_InteractionsPage_showMoreListItem_xc1PK\",\"prerecordedListItem\":\"communicator_InteractionsPage_prerecordedListItem_azPwM\",\"showMoreListItemIcon\":\"communicator_InteractionsPage_showMoreListItemIcon_wz1yk\",\"showMoreIcon\":\"communicator_InteractionsPage_showMoreIcon_3rDBc\",\"visitedCrmRecordsPopupWrapper\":\"communicator_InteractionsPage_visitedCrmRecordsPopupWrapper_fOLrv\",\"crmRecordsList\":\"communicator_InteractionsPage_crmRecordsList_MVCog\",\"crmRecordItem\":\"communicator_InteractionsPage_crmRecordItem_Mxa8R\",\"dtmfInput\":\"communicator_InteractionsPage_dtmfInput_XZlFP\",\"favoriteStar\":\"communicator_InteractionsPage_favoriteStar_lwV5w\",\"phoneBrowserIcon\":\"communicator_InteractionsPage_phoneBrowserIcon_miDPc\",\"phoneBrowserIconActive\":\"communicator_InteractionsPage_phoneBrowserIconActive_jqRCF\",\"muteVideo\":\"communicator_InteractionsPage_muteVideo_gPTxv\",\"muteVideoActive\":\"communicator_InteractionsPage_muteVideoActive_NcLsM\",\"record\":\"communicator_InteractionsPage_record_90xC0\",\"recordActive\":\"communicator_InteractionsPage_recordActive_GgiSe\",\"recordIsLoading\":\"communicator_InteractionsPage_recordIsLoading_5QNah\",\"callProblemButton\":\"communicator_InteractionsPage_callProblemButton_Fk4hW\",\"callProblemButtonActive\":\"communicator_InteractionsPage_callProblemButtonActive_VKGEy\",\"closeButtonSmall\":\"communicator_InteractionsPage_closeButtonSmall_ewXkG\",\"closeButton\":\"communicator_InteractionsPage_closeButton_N629F\",\"callButtonDropdown\":\"communicator_InteractionsPage_callButtonDropdown_EHKz5\",\"bigPartyLabel\":\"communicator_InteractionsPage_bigPartyLabel_nTz0c\",\"partyLabel\":\"communicator_InteractionsPage_partyLabel_B1qGf\",\"partyLabelInner\":\"communicator_InteractionsPage_partyLabelInner_u3XzI\",\"bigPartyAvatar\":\"communicator_InteractionsPage_bigPartyAvatar_PTZjS\",\"conferenceParties\":\"communicator_InteractionsPage_conferenceParties_0zkNf\",\"conferenceButtons\":\"communicator_InteractionsPage_conferenceButtons_0sWBq\",\"topButtons\":\"communicator_InteractionsPage_topButtons_d4GWS\",\"manyPartiesTopButtons\":\"communicator_InteractionsPage_manyPartiesTopButtons_Vf1OS\",\"showMorePartiesButton\":\"communicator_InteractionsPage_showMorePartiesButton_1xwKI\",\"callDialpadButton\":\"communicator_InteractionsPage_callDialpadButton_nA5Q3\",\"prolongedConnectionItemLabel\":\"communicator_InteractionsPage_prolongedConnectionItemLabel_y5oSA\",\"failedItemLabel\":\"communicator_InteractionsPage_failedItemLabel_2wH7a\",\"interactionTabImage\":\"communicator_InteractionsPage_interactionTabImage_OZmk9\",\"chatInWindowPlaceholder\":\"communicator_InteractionsPage_chatInWindowPlaceholder_2JLHf\",\"chatInWindowPlaceholderText\":\"communicator_InteractionsPage_chatInWindowPlaceholderText_x9y0Y\",\"scenarioMessages\":\"communicator_InteractionsPage_scenarioMessages_Hz3qR\"};","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../../styles/InteractionsPage.module.less'\r\n\r\n\r\nexport const Connecting = () => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <span data-testid=\"connecting\" className={styles.prolongedConnectionItemLabel}>\r\n            {t.GLOBAL.dial_request_status_long_connection()}\r\n        </span>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {useDisplayContent} from './hooks/useDisplayContent'\r\n\r\n\r\ntype DisplayTextProps = {\r\n    item: Item\r\n}\r\n\r\nexport const DisplayText: React.FC<DisplayTextProps> = ({item}) => {\r\n    const {name, service} = useDisplayContent(item)\r\n\r\n    return (\r\n        <>\r\n            {name && (\r\n                <div\r\n                    className={tcn(\r\n                        'shrink-0 truncate font-semibold caption-s text-primary-on-primary',\r\n                        {'max-w-[62%]': Boolean(service)},\r\n                    )}\r\n                    data-testid=\"display-name\"\r\n                >\r\n                    {name}\r\n                </div>\r\n            )}\r\n            {service && (\r\n                <div\r\n                    className=\"ml-1 flex-auto truncate caption-s text-neutral-fade\"\r\n                    data-testid=\"service-name\"\r\n                >\r\n                    {service}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useContactDisplayName} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {isCallConference, isChatConference, isExternalChat, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype DisplayContent = {\r\n    name?: string\r\n    service?: string\r\n}\r\n\r\nexport function useDisplayContent(item: Item): DisplayContent {\r\n    const {formatFullName} = useFormatting()\r\n    const {displayData, contactId} = item ?? {}\r\n    const {\r\n        displayName: interactionDisplayName,\r\n        firstName,\r\n        lastName,\r\n    } = displayData ?? {}\r\n    const {t} = useLocalizationState()\r\n    const contactDisplayName = useContactDisplayName(contactId)\r\n\r\n    const callConfDisplayText = t.HOME_SCREEN.interaction_call_conference_label()\r\n    const chatConfDisplayText = t.HOME_SCREEN.interaction_chat_conference_label()\r\n\r\n    return useMemo((): DisplayContent => {\r\n        const {\r\n            firstName: chatFirstName,\r\n            lastName: chatLastName,\r\n        } = item?.externalChatData ?? {}\r\n        const fullName =\r\n            contactDisplayName ||\r\n            interactionDisplayName ||\r\n            formatFullName(chatFirstName, chatLastName) ||\r\n            formatFullName(firstName, lastName)\r\n        const number = formatPhone(displayData?.number)\r\n\r\n        const serviceName: string = isWorkItem(item)\r\n            ? item?.workitemData?.serviceName || ''\r\n            : item?.scenarioData?.serviceName || ''\r\n\r\n        if (isCallConference(item)) {\r\n            return serviceName\r\n                ? {name: callConfDisplayText, service: serviceName}\r\n                : {name: callConfDisplayText}\r\n        }\r\n\r\n        if (isChatConference(item)) {\r\n            return serviceName\r\n                ? {name: chatConfDisplayText, service: serviceName}\r\n                : {name: chatConfDisplayText}\r\n        }\r\n\r\n        const name = isExternalChat()\r\n            ? fullName || number || t.EXTERNAL_CHAT.display_name_placeholder()\r\n            : fullName || number || t.GLOBAL.anonymous()\r\n\r\n        return serviceName\r\n            ? name\r\n                ? {name, service: serviceName}\r\n                : {service: serviceName}\r\n            : {name}\r\n    }, [\r\n        callConfDisplayText,\r\n        chatConfDisplayText,\r\n        contactDisplayName,\r\n        displayData?.number,\r\n        interactionDisplayName,\r\n        firstName,\r\n        formatFullName,\r\n        item,\r\n        lastName,\r\n        t,\r\n    ])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../../styles/InteractionsPage.module.less'\r\n\r\n\r\nexport const Failed = () => {\r\n    const {t} = useLocalizationState()\r\n    return (\r\n        <span data-testid=\"failed\" className={styles.failedItemLabel}>\r\n            {t.GLOBAL.dial_request_status_failed()}\r\n        </span>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {useInteractionTypeIcon} from './hooks/useInteractionTypeIcon'\r\n\r\n\r\ntype InteractionTypeImageProps = {\r\n    item: Item\r\n}\r\n\r\nexport const InteractionTypeImage: React.FC<InteractionTypeImageProps> = ({\r\n    item,\r\n}) => {\r\n    const Icon = useInteractionTypeIcon(item)\r\n\r\n    return (\r\n        <>\r\n            <Icon className=\"size-4 icon-neutral\" />\r\n            <div className=\"sr-only\" data-testid=\"media-type\">\r\n                {item.mediaType}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {\r\n    isAfterCallWork,\r\n    isCall,\r\n    isCallConference,\r\n    isChatConference,\r\n    isContact,\r\n    isEmail,\r\n    isExternalChat,\r\n    isInternalChat,\r\n    isInternalMessage,\r\n    isOnHold,\r\n    isOutboundInteraction,\r\n    isPotentialInteraction,\r\n    isWorkItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {\r\n    IconAfterCallWorkAD,\r\n    IconChat,\r\n    IconConferenceCall16,\r\n    IconConferenceChat16,\r\n    IconEmail16,\r\n    IconInternalChat16,\r\n    IconOutboundCall16,\r\n    IconOutboundPreview16,\r\n    IconPause16,\r\n    IconPhone16Filled,\r\n    IconRoundChat16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\nexport function useInteractionTypeIcon(item: Item) {\r\n    return useMemo(\r\n        function getInteractionTypeIcon() {\r\n            if (isWorkItem(item)) {\r\n                return IconOutboundPreview16\r\n            }\r\n\r\n            if (isPotentialInteraction(item)) {\r\n                return isContact(item) ? IconRoundChat16Filled : IconInternalChat16\r\n            }\r\n\r\n            if (isOnHold(item) && isCall(item)) {\r\n                return IconPause16\r\n            }\r\n\r\n            if (isChatConference(item)) {\r\n                return IconConferenceChat16\r\n            }\r\n\r\n            if (isAfterCallWork(item)) {\r\n                return IconAfterCallWorkAD\r\n            }\r\n\r\n            if (isInternalMessage(item)) {\r\n                return IconChat\r\n            }\r\n\r\n            if (isExternalChat(item)) {\r\n                return IconRoundChat16Filled\r\n            }\r\n\r\n            if (isInternalChat(item)) {\r\n                return IconInternalChat16\r\n            }\r\n\r\n            if (isEmail(item)) {\r\n                return IconEmail16\r\n            }\r\n\r\n            if (isCallConference(item)) {\r\n                return IconConferenceCall16\r\n            }\r\n\r\n            if (isOutboundInteraction(item) && isCall(item)) {\r\n                return IconOutboundCall16\r\n            }\r\n\r\n            return IconPhone16Filled\r\n        },\r\n        [item],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {isAfterCallWork, isCall, isOnHold} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {InteractionTimer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useShowTimerChecker} from './hooks/useShowTimerChecker'\r\nimport {InteractionTypeImage} from './InteractionTypeImage'\r\n\r\n\r\nexport const IconAndTimer: React.FC<{item: Item}> = ({item}) => {\r\n    const {DISPOSITION: i18n} = useLocalizationState('t')\r\n\r\n    const showTimer = useShowTimerChecker(item)\r\n    const isTimerShown = showTimer && item.displayData.deliveredStartTime\r\n    const isCallOnHold = Boolean(isCall(item) && isOnHold(item) && item.displayData.holdStartTime)\r\n    const isAfterCallWorkItem = isAfterCallWork(item)\r\n\r\n    const renderTimer = () => {\r\n        if (isTimerShown) {\r\n            return (\r\n                <InteractionTimer\r\n                    startTime={item.displayData.deliveredStartTime}\r\n                    className=\"ml-1 py-0 caption-xs\"\r\n                    data-testid=\"duration-timer\"\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isCallOnHold && (\r\n                <>\r\n                    <div className=\"flex h-6 items-center justify-center rounded-full pl-1 pr-2 bg-container-disabled\">\r\n                        <InteractionTypeImage item={item} />\r\n                        <InteractionTimer\r\n                            startTime={item.displayData.holdStartTime}\r\n                            className=\"m-0 text-primary-fade\"\r\n                            data-testid=\"hold-timer\"\r\n                        />\r\n                    </div>\r\n                    {renderTimer()}\r\n                </>\r\n            )}\r\n            {isAfterCallWorkItem && (\r\n                <>\r\n                    <InteractionTypeImage item={item} />\r\n                    <span className=\"mx-1 font-semibold caption-xs text-neutral-fade\">\r\n                        {i18n.ended()}\r\n                    </span>\r\n                </>\r\n            )}\r\n            {!isCallOnHold && !isAfterCallWorkItem && (\r\n                <>\r\n                    <InteractionTypeImage item={item} />\r\n                    {renderTimer()}\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\nexport function useShowTimerChecker(item?: Item) {\r\n\r\n    const {displayData} = item ?? {}\r\n    const {stateStartTime, failed} = displayData ?? {}\r\n\r\n    return useMemo(\r\n        () =>\r\n            stateStartTime !== undefined &&\r\n            !failed &&\r\n            !isPotentialInteraction(item),\r\n        [failed, item, stateStartTime],\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n    isQualityManagementItemInMonitorMode,\r\n    isQualityManagementItemInWhisperMode,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {IconCoaching, IconMonitor} from '@bpinc/lib-jskit-ui'\r\n\r\n\r\ntype MonitorIcon = {\r\n    item: Item\r\n}\r\n\r\nconst className = 'ml-1 size-4 icon-neutral'\r\n\r\nexport const MonitorIcon: React.FC<MonitorIcon> = ({item}) => {\r\n    if (isQualityManagementItemInMonitorMode(item)) {\r\n        return <IconMonitor className={className} />\r\n    }\r\n\r\n    if (isQualityManagementItemInWhisperMode(item)) {\r\n        return <IconCoaching className={className} />\r\n    }\r\n\r\n    return null\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useHandleKeyPress} from './hooks/useHandleKeyPress'\r\nimport {ButtonsOnHover} from './ButtonsOnHover'\r\nimport {Connecting} from './Connecting'\r\nimport {DisplayText} from './DisplayText'\r\nimport {Failed} from './Failed'\r\nimport {IconAndTimer} from './IconAndTimer'\r\nimport {MonitorIcon} from './MonitorIcon'\r\n\r\n\r\ninterface InteractionsListItemProps {\r\n    itemId: string\r\n    onClick: () => void\r\n    isActive: boolean\r\n    isSelected: boolean\r\n}\r\n\r\nexport const InteractionsListItem: React.FC<InteractionsListItemProps> = React.memo(({\r\n    itemId,\r\n    onClick,\r\n    isActive,\r\n    isSelected,\r\n}) => {\r\n    const item = useInteraction(itemId)\r\n    assertDefined(item)\r\n    const {failed, prolongedConnection} = item.displayData\r\n    const handleKeyPress = useHandleKeyPress(onClick)\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'flex items-center',\r\n                'h-9.5 cursor-pointer border-none px-2 py-1.5',\r\n                'transition ease-in-out',\r\n                'group state-layer-bg-neutral-0',\r\n                {'state-layer-mix-teal-on-white-2': isSelected},\r\n            )}\r\n            data-testid=\"interaction-item\"\r\n            data-active={isActive || undefined}\r\n            onClick={onClick}\r\n            onKeyPress={handleKeyPress}\r\n            role=\"button\"\r\n            tabIndex={0}\r\n        >\r\n            <div className=\"flex flex-none items-center overflow-hidden\">\r\n                <IconAndTimer item={item} />\r\n                <MonitorIcon item={item} />\r\n            </div>\r\n            <div className=\"ml-2 flex flex-auto items-center overflow-hidden\">\r\n                <DisplayText item={item} />\r\n                {failed && <Failed />}\r\n                {!failed && prolongedConnection && <Connecting />}\r\n            </div>\r\n            <div className=\"ml-4 flex flex-none shrink-0 items-center\">\r\n                <ButtonsOnHover item={item} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import type React from 'react'\r\nimport {useCallback} from 'react'\r\n\r\n\r\nexport function useHandleKeyPress(handler: () => void) {\r\n    return useCallback(\r\n        function handleKeyPressCallback(e: React.KeyboardEvent) {\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault()\r\n                handler()\r\n            }\r\n        },\r\n        [handler],\r\n    )\r\n}\r\n","import React, {useEffect, useMemo, useState} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useSlidingModalState} from '@bpinc/lib-sliding-modal-context'\r\n\r\n\r\ninterface AnimatedInteractionsListProps {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const AnimatedInteractionsList: React.FC<AnimatedInteractionsListProps> = ({\r\n    children,\r\n}) => {\r\n    const interactionId = useInteractionId()\r\n    const isInteractionsListShown = useSlidingModalState(\r\n        s => Object.values(s.getInteractionModalData(interactionId)).every(data => !data.show),\r\n    )\r\n\r\n    const [contentRef, setContentRef] = useState<HTMLDivElement | null>(null)\r\n    const resizeObserver = useResizeObserver(contentRef)\r\n    const [contentHeight, setContentHeight] = useState<number | undefined>(undefined)\r\n\r\n    useEffect(() => setContentHeight(resizeObserver?.contentRect.height), [resizeObserver])\r\n\r\n    const style = useMemo(() => {\r\n        const height = isInteractionsListShown ? contentHeight : 0\r\n\r\n        return {\r\n            height,\r\n            minHeight: height,\r\n            maxHeight: height,\r\n        }\r\n    }, [contentHeight, isInteractionsListShown])\r\n\r\n    return (\r\n        <div\r\n            className=\"overflow-hidden transition-all\"\r\n            style={style}\r\n        >\r\n            <div ref={setContentRef}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useId, useRef, useState} from 'react'\r\nimport {tw} from '@servicepattern/ui'\r\n\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport type {DnDParams} from '@bpinc/lib-ui-elements'\r\nimport {Draggable, DragItemTypes} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nexport const InteractionsListResizer = React.memo<{\r\n    height: number\r\n    onResize: (height: number) => void\r\n    min?: number\r\n    onReset: () => void\r\n}>(\r\n        function InteractionsListResizer({\r\n            height,\r\n            min = 0,\r\n            onResize,\r\n            onReset,\r\n        }) {\r\n            const id = useId()\r\n            const startHeightRef = useRef<number | undefined>(height)\r\n            const minRef = useAsRef(min)\r\n            const [isDrag, setIsDrag] = useState(false)\r\n\r\n            const onDragStart = useCallback(\r\n                function onDragStartCallback() {\r\n                    startHeightRef.current = height\r\n                    setIsDrag(true)\r\n                },\r\n                [setIsDrag, height],\r\n            )\r\n\r\n            const onDrag = useCallback(\r\n                function onDragCallback({offset, initialOffset}: DnDParams) {\r\n                    if (startHeightRef.current) {\r\n                        const diff = (offset?.y ?? 0) - (initialOffset?.y ?? 0)\r\n                        const newHeight = Math.max(minRef.current, startHeightRef.current + diff)\r\n\r\n                        onResize(newHeight)\r\n                    }\r\n                },\r\n                [minRef, onResize],\r\n            )\r\n\r\n            const onDrop = useCallback(\r\n                function onDropCallback({offset, initialOffset}: DnDParams) {\r\n                    if (startHeightRef.current) {\r\n                        const diff = (offset?.y ?? 0) - (initialOffset?.y ?? 0)\r\n                        const newHeight = Math.max(minRef.current, startHeightRef.current + diff)\r\n\r\n                        onResize(newHeight)\r\n                        startHeightRef.current = newHeight\r\n                    }\r\n                    setIsDrag(false)\r\n                },\r\n                [minRef, onResize],\r\n            )\r\n\r\n            return (\r\n                <Draggable\r\n                    className={tcn(\r\n                        tw`-mx-1 my-2 h-2 cursor-row-resize`,\r\n                        'bg-neutral-200 hover:bg-neutral-300',\r\n                        {'bg-neutral-300': isDrag},\r\n                    )}\r\n                    previewClassName=\"absolute w-0 h-0 invisible opacity-0 p-1\"\r\n                    type={DragItemTypes.RESIZE_TABLE_HEIGHT}\r\n                    onDragStart={onDragStart}\r\n                    onDrag={onDrag}\r\n                    onDrop={onDrop}\r\n                    onDoubleClick={onReset}\r\n                    id={id}\r\n                />\r\n            )\r\n        },\r\n        )\r\n","import React from 'react'\r\n\r\nimport {SmIcon, SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../styles/InteractionsPage.module.less'\r\n\r\n\r\ninterface PaginationProps {\r\n    goNextPage: () => void\r\n    goPreviousPage: () => void\r\n    showPrev: boolean\r\n    showNext: boolean\r\n    prevAmount: number\r\n    nextAmount: number\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationProps> = props => {\r\n    const {t} = useLocalizationState()\r\n    const {goNextPage, goPreviousPage, showNext, showPrev, prevAmount, nextAmount} = props\r\n\r\n    return (\r\n        <SmMenu.Item className={styles.pagination}>\r\n            <div className={styles.paginationButton}>\r\n                {showPrev && (\r\n                    <p\r\n                        onClick={goPreviousPage}\r\n                        className=\"aria-paginate-prev-interaction-items\"\r\n                        tabIndex={0}\r\n                        role=\"button\"\r\n                        data-testid=\"pagination-prev-button\"\r\n                    >\r\n                        <SmIcon name=\"chevron left\" />\r\n                        {' '}\r\n                        {t.UNDEFINED.bulk_button_previous()}\r\n                        {' '}\r\n                        {prevAmount}\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <div className={styles.paginationButton}>\r\n                {showNext && (\r\n                    <p\r\n                        onClick={goNextPage}\r\n                        className=\"aria-paginate-next-interaction-items\"\r\n                        tabIndex={0}\r\n                        role=\"button\"\r\n                        data-testid=\"pagination-next-button\"\r\n                    >\r\n                        {t.UNDEFINED.bulk_button_next()}\r\n                        {' '}\r\n                        {nextAmount}\r\n                        {' '}\r\n                        <SmIcon name=\"chevron right\" />\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </SmMenu.Item>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\n\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useEvent, useResizeObserver} from '@bpinc/lib-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useAccessibleShortcuts} from '../hooks/useAccessibleShortcuts'\r\nimport {usePagination} from '../hooks/usePagination'\r\nimport {InteractionsListItem} from './InteractionsListItem/'\r\nimport {AnimatedInteractionsList} from './AnimatedInteractionsList'\r\nimport {InteractionsListResizer} from './InteractionsListResizer'\r\nimport {Pagination} from './Pagination'\r\n\r\n\r\ntype Props = {\r\n    itemIds: string[]\r\n    selectedItemId: string | undefined\r\n    setSelectedItemId: (id: string) => void\r\n}\r\n\r\n\r\nexport const InteractionsList: React.FC<Props> = React.memo(\r\n    function InteractionsList({\r\n        itemIds,\r\n        selectedItemId,\r\n        setSelectedItemId,\r\n    }) {\r\n        const {t} = useLocalizationState()\r\n\r\n        const [height, setHeight] = useState(100)\r\n        const [isHeightCustomized, setIsHeightCustomized] = useState(false)\r\n        const [menuRef, setMenuRef] = useState<HTMLDivElement | null>(null)\r\n        const menuResizeObserver = useResizeObserver(menuRef)\r\n        const detectedHeight = menuResizeObserver?.contentRect.height\r\n\r\n        const menuStyle = isHeightCustomized ? {height} : undefined\r\n\r\n        const ITEM_HEIGHT = 37\r\n        const minHeight = itemIds.length * ITEM_HEIGHT\r\n\r\n        useEffect(\r\n            function saveAutoHeight() {\r\n                if (detectedHeight && !isHeightCustomized) {\r\n                    setHeight(detectedHeight)\r\n                }\r\n            },\r\n            [detectedHeight, isHeightCustomized, setHeight],\r\n        )\r\n\r\n        const resetHeightOnItemsChange = useEvent(() => {\r\n            if (minHeight > height) {\r\n                setHeight(minHeight)\r\n            }\r\n        })\r\n\r\n        useEffect(\r\n            resetHeightOnItemsChange,\r\n            [minHeight, resetHeightOnItemsChange],\r\n        )\r\n\r\n        const onManualResize = useCallback(\r\n            function onManualResize(newHeight: number) {\r\n                if (newHeight <= minHeight) {\r\n                    setIsHeightCustomized(false)\r\n                    return\r\n                }\r\n\r\n                setIsHeightCustomized(true)\r\n                setHeight(newHeight)\r\n            },\r\n            [setHeight, setIsHeightCustomized, minHeight],\r\n        )\r\n\r\n        const onResetCustomHeight = useCallback(\r\n            function onResetCustomHeight() {\r\n                setIsHeightCustomized(false)\r\n            },\r\n            [setIsHeightCustomized],\r\n        )\r\n\r\n        const {\r\n            currentPage,\r\n            goToPage,\r\n            getItemCoordsByIndex,\r\n            pagedItems,\r\n            paginationIsEnabled,\r\n            ...paginationProps\r\n        } = usePagination({itemIds})\r\n\r\n        useAccessibleShortcuts({getItemCoordsByIndex, goToPage, currentPage})\r\n\r\n        const activeItemId = useActiveInteractionId()\r\n\r\n        const handleItemClick = useCallback(\r\n            function handleItemClickOuter(itemId: string) {\r\n                return function handleItemClickInner() {\r\n                    setSelectedItemId(itemId)\r\n                }\r\n            },\r\n            [setSelectedItemId],\r\n        )\r\n\r\n        if (pagedItems.length === 0) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <AnimatedInteractionsList>\r\n                <div\r\n                    className=\"max-w-full shrink-0 overflow-hidden px-1 pb-2\"\r\n                    data-testid=\"interactions-list\"\r\n                >\r\n                    <div className=\"z-10 flex shrink-0 items-center p-4 uppercase tracking-[0.8px] caption-xs text-neutral-disabled\">\r\n                        {t.COMMUNICATION_PANEL.active_interactions()}\r\n                        {' '}\r\n                    (\r\n                        {itemIds.length}\r\n                    )\r\n                    </div>\r\n\r\n                    <div\r\n                        className=\"min-h-9.5\"\r\n                        style={menuStyle}\r\n                        ref={setMenuRef}\r\n                    >\r\n                        {pagedItems.map((itemId: string, index) => {\r\n                            return (\r\n                                <InteractionsListItem\r\n                                    key={index}\r\n                                    itemId={itemId}\r\n                                    onClick={handleItemClick(itemId)}\r\n                                    isSelected={selectedItemId === itemId}\r\n                                    isActive={activeItemId === itemId}\r\n                                />\r\n                            )\r\n                        })}\r\n                        {paginationIsEnabled && <Pagination {...paginationProps} />}\r\n                    </div>\r\n\r\n                    <InteractionsListResizer\r\n                        height={height}\r\n                        onResize={onManualResize}\r\n                        onReset={onResetCustomHeight}\r\n                        min={minHeight}\r\n                    />\r\n                </div>\r\n            </AnimatedInteractionsList>\r\n        )\r\n    },\r\n)\r\n","import {useLayoutEffect, useState} from 'react'\r\n\r\n\r\nexport function useCommunicatorContentHeight(isActive: boolean) {\r\n    const [communicatorContentHeight, setCommunicatorContentHeight] = useState(0)\r\n\r\n    useLayoutEffect(() => {\r\n        if (isActive) {\r\n            const communicatorContent = document.querySelector('[data-testid=\"communicator_content\"]')\r\n            const communicatorContentObserver = new ResizeObserver(([entry]) => {\r\n                setCommunicatorContentHeight(entry.contentRect.height)\r\n            })\r\n            communicatorContent && communicatorContentObserver.observe(communicatorContent)\r\n\r\n            return () => {\r\n                communicatorContentObserver.disconnect()\r\n            }\r\n        }\r\n\r\n    }, [isActive])\r\n\r\n    return communicatorContentHeight\r\n}\r\n","import {useRef} from 'react'\r\n\r\nimport {useResizeObserver} from '@bpinc/lib-helpers'\r\n\r\n\r\nexport function useCommunicatorNavbarHeight() {\r\n    const bottomNav = useRef<HTMLElement>(document.querySelector('[data-testid=\"bottom-nav\"]'))\r\n    const resizeObserver = useResizeObserver(bottomNav)\r\n\r\n    return resizeObserver?.contentRect?.height ?? 0\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback, useEffect} from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nimport {useCalendarState, useCalendarStateMethods} from '@bpinc/cal-state-context'\r\nimport type {CalendarEventFields} from '@bpinc/cal-state-types'\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {createComponentLoader, SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst {CalendarEventFormLoader} = createComponentLoader('calendar', () => import('calendar'), 'CalendarEventForm')\r\n\r\nexport const CalendarEventSlidingModal: FC<CommonSlidingModalItemProps> = ({closeModal, closing, style, show}) => {\r\n    const {t} = useLocalizationState()\r\n    const selectedEvent = useCalendarState('selectedEvent')\r\n    const {closeEventForm} = useCalendarStateMethods()\r\n\r\n    const form = useForm<CalendarEventFields>()\r\n\r\n    const handleClose = useCallback(() => {\r\n        closeEventForm()\r\n    }, [closeEventForm])\r\n\r\n    useEffect(() => {\r\n        if (!selectedEvent) {\r\n            closeModal()\r\n        }\r\n    }, [closeModal, selectedEvent])\r\n\r\n    return (\r\n        <SlidingModal\r\n            name=\"calendarEvent\"\r\n            header={t.CALENDAR_EVENT_MODAL.title()}\r\n            closeModal={handleClose}\r\n            show={show}\r\n            closing={closing}\r\n            style={style}\r\n        >\r\n            {selectedEvent && (\r\n                <CalendarEventFormLoader\r\n                    event={selectedEvent}\r\n                    form={form}\r\n                    onClose={handleClose}\r\n                />\r\n            )}\r\n        </SlidingModal>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {ContactDetailsType, ContactDetailsUnflatten, WithId} from '@bpinc/ad-contacts-state-types'\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MergeContacts} from '../../../contact-details'\r\n\r\n\r\ninterface MergeContactsModalProps extends CommonSlidingModalItemProps {\r\n    srcContactDetails: Partial<WithId<ContactDetailsType>>\r\n    onMerge?: (mergedContactDetails: WithId<ContactDetailsUnflatten>, srcContactDetails: Partial<WithId<ContactDetailsType>>) => void\r\n}\r\n\r\nexport const MergeContactsSlidingModal: FC<MergeContactsModalProps> = ({show, closing, closeModal, style, ...props}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <SlidingModal\r\n            show={show}\r\n            closing={closing}\r\n            style={style}\r\n            closeModal={closeModal}\r\n            name=\"mergeContacts\"\r\n            header={t.CONTACT.merge_contacts()}\r\n            data-testid=\"merge-contacts-modal\"\r\n        >\r\n            <MergeContacts {...props} />\r\n        </SlidingModal>\r\n    )\r\n}\r\n\r\n","import {atomWithReducer} from 'jotai/utils'\r\n\r\nimport type {RecentPartyType} from '@bpinc/state-recent-types'\r\n\r\n\r\ntype RecentConferencePanelState = {\r\n    selected: RecentPartyType | null\r\n    searchValue: string\r\n}\r\n\r\n\r\ntype SelectPartyAction = {\r\n    type: 'selectParty'\r\n    payload: {\r\n        party: RecentPartyType\r\n    }\r\n}\r\ntype SetSearchValueAction = {\r\n    type: 'setSearchValue'\r\n    payload: {\r\n        value: string\r\n    }\r\n}\r\ntype ClearStateAction = {type: 'clearState'}\r\ntype Action = SelectPartyAction | SetSearchValueAction | ClearStateAction\r\n\r\n\r\nfunction reducer(_prev: RecentConferencePanelState, action: Action) {\r\n    switch (action.type) {\r\n        case 'selectParty':\r\n            return {\r\n                selected: action.payload.party,\r\n                searchValue: action.payload.party.phone ?? '',\r\n            }\r\n        case 'setSearchValue':\r\n            return {\r\n                selected: null,\r\n                searchValue: action.payload.value,\r\n            }\r\n        case 'clearState':\r\n            return {\r\n                selected: null,\r\n                searchValue: '',\r\n            }\r\n    }\r\n}\r\n\r\nexport const stateAtom = atomWithReducer<RecentConferencePanelState, Action>(\r\n    {selected: null, searchValue: ''},\r\n    reducer,\r\n)\r\n","import React from 'react'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {isPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {SearchField} from '@bpinc/lib-jskit-ui'\r\nimport {type ChatParams, SearchForInteractionControls} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport {stateAtom} from './stateAtom'\r\n\r\n\r\ntype Props = {\r\n    recentItem: RecentItem\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: ChatParams) => void\r\n}\r\n\r\nexport const Footer: React.FC<Props> = ({recentItem, onCall, onChat}) => {\r\n\r\n    const {RECENT: i18n} = useLocalizationState('t')\r\n    const phoneDeviceCapabilities = useSessionState('phoneDeviceCapabilities')\r\n    const {selectedService} = useServiceState()\r\n\r\n    const {selected, searchValue} = useAtomValue(stateAtom)\r\n    const dispatch = useSetAtom(stateAtom)\r\n\r\n    const handleChange = useEvent((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        // digits only\r\n        const value = e.target.value.replace(/\\D/g, '')\r\n        dispatch({type: 'setSearchValue', payload: {value}})\r\n    })\r\n\r\n    const handleCallClick = useEvent(() => {\r\n        onCall({\r\n            phone: searchValue,\r\n            firstName: selected?.firstName,\r\n            lastName: selected?.lastName,\r\n            serviceId: selectedService ?? recentItem.serviceId,\r\n            contactId: selected?.contactId,\r\n            userId: selected?.userId,\r\n            origination: 'recent',\r\n        })\r\n    })\r\n\r\n    const handleChatClick = useEvent(() => {\r\n        onChat({\r\n            phone: searchValue,\r\n            firstName: selected?.firstName,\r\n            lastName: selected?.lastName,\r\n            serviceId: selectedService ?? recentItem.serviceId,\r\n            contactId: selected?.contactId,\r\n            userId: selected?.userId,\r\n            origination: 'recent',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex grow items-start gap-2.5\">\r\n            <SearchField\r\n                value={searchValue}\r\n                onChange={handleChange}\r\n                layoutClassName=\"grow\"\r\n                data-testid=\"search-input\"\r\n                aria-label={i18n.conference_details_input_placeholder()}\r\n                placeholder={i18n.conference_details_input_placeholder()}\r\n            />\r\n            <SearchForInteractionControls\r\n                searchQuery={searchValue}\r\n                showCallButton={!!phoneDeviceCapabilities.canDial}\r\n                callButtonDisabled={!selected && !isPhone(searchValue)}\r\n                chatButtonDisabled={!selected && !isPhone(searchValue)}\r\n                onCallClick={handleCallClick}\r\n                onChatClick={handleChatClick}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentPartyType} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function useConfPartiesToString() {\r\n    const t = useLocalizationState('t')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useCallback((parties: RecentPartyType[]) => {\r\n        return parties.map(party => {\r\n            if (party.lastName) {\r\n                return formatFullName(party.firstName, party.lastName)\r\n            }\r\n            if (party.phone) {\r\n                return formatPhone(party.phone)\r\n            }\r\n            return t.GLOBAL.anonymous()\r\n        }).join(', ')\r\n    }, [formatFullName, t.GLOBAL])\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {Avatar} from '@bpinc/lib-jskit-ui'\r\nimport {useConfPartiesToString} from '@bpinc/state-recent-helpers'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n}\r\n\r\nexport const Header: React.FC<Props> = ({item: {parties}}) => {\r\n\r\n    const confPartiesToString = useConfPartiesToString()\r\n\r\n    return (\r\n        <>\r\n            <Avatar size=\"32\" type=\"conference\" />\r\n            <span className=\"truncate\">\r\n                {`(${parties.length + 1}) ${confPartiesToString(parties)}`}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport type {DirectoryStateUserObject} from '@bpinc/ad-directory-state-types'\r\nimport type {OpenContactDetailsParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport type {RecentPartyType} from '@bpinc/state-recent-types'\r\n\r\nimport {ExternalContact} from '../../../directory/components/user/external-contact/ExternalContact'\r\nimport {InternalUser} from '../../../directory/components/user/internal-user/InternalUser'\r\n\r\n\r\ntype Props = {\r\n    party: RecentPartyType\r\n    transferMode?: 'messages' | 'calls'\r\n    onClick: (party: RecentPartyType) => void\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: ChatParams) => void\r\n    onDetails: (params: OpenContactDetailsParams) => void\r\n}\r\n\r\nexport const RecentConferenceItem: React.FC<Props> = ({\r\n    party,\r\n    transferMode,\r\n    onClick,\r\n    onCall,\r\n    onChat,\r\n    onDetails,\r\n}) => {\r\n\r\n    const userDetails = useUserDetailsById(party.userId)\r\n\r\n    const handleClick = useEvent(() => {\r\n        onClick({\r\n            phone: userDetails?.data.extension,\r\n            ...party,\r\n        })\r\n    })\r\n\r\n    if (party.userId) {\r\n        // ext chat party data doesn't include extension for internal users\r\n        const userData: DirectoryStateUserObject = {\r\n            userId: party.userId,\r\n            firstName: party.firstName ?? '',\r\n            lastName: party.lastName ?? '',\r\n            extension: userDetails?.data.extension ?? '',\r\n            presenceState: userDetails?.data.presenceState ?? 'offline',\r\n            isAgent: userDetails?.data.isAgent,\r\n            photoId: userDetails?.data.photoId,\r\n            teamId: userDetails?.data.teamId,\r\n        }\r\n        return (\r\n            <InternalUser\r\n                user={userData}\r\n                transferMode={transferMode}\r\n                onClick={handleClick}\r\n                onCall={onCall}\r\n                onChat={onChat}\r\n                onDetails={onDetails}\r\n            />\r\n        )\r\n    }\r\n    if (party.contactId) {\r\n        const contactData: ContactShortType = {\r\n            id: party.contactId,\r\n            firstName: party.firstName ?? '',\r\n            lastName: party.lastName ?? '',\r\n            phone: party.phone ?? '',\r\n            email: '',\r\n        }\r\n        return (\r\n            <ExternalContact\r\n                contact={contactData}\r\n                transferMode={transferMode}\r\n                onClick={handleClick}\r\n                onCall={onCall}\r\n                onChat={onChat}\r\n                onDetails={onDetails}\r\n            />\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {useSetAtom} from 'jotai'\r\n\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {isRecentCallConference} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {formatDate, useEvent} from '@bpinc/lib-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {type ChatParams, SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem, RecentPartyType} from '@bpinc/state-recent-types'\r\n\r\nimport {ServiceSelect} from '../../../components/ServiceSelect'\r\nimport {RecentConferenceItem} from './RecentConferenceItem'\r\nimport {stateAtom} from './stateAtom'\r\n\r\n\r\ntype CallConferenceModalContentProps = {\r\n    recentItem: RecentItem\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: ChatParams) => void\r\n    transferMode?: 'messages' | 'calls'\r\n}\r\n\r\nexport const RecentConferenceModalContent: React.FC<CallConferenceModalContentProps> = (\r\n    {recentItem, ...props},\r\n) => {\r\n    assertDefined(recentItem)\r\n\r\n    const {RECENT: i18n} = useLocalizationState('t')\r\n    const activeInteractionId = useActiveInteractionId()\r\n    const openContactDetails = useContactDetailsOpener()\r\n    const dispatch = useSetAtom(stateAtom)\r\n\r\n    const displayDate = formatDate(recentItem.time, 'LLL')\r\n\r\n    const description = isRecentCallConference(recentItem)\r\n        ? i18n.conference_call_details_description_text(displayDate)\r\n        : i18n.conference_chat_details_description_text(displayDate)\r\n\r\n    useEffect(() => {\r\n        return () => dispatch({type: 'clearState'})\r\n    })\r\n\r\n    const handleItemClick = useEvent((party: RecentPartyType) => {\r\n        dispatch({type: 'selectParty', payload: {party}})\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-4\">\r\n            <div>{description}</div>\r\n            <ServiceSelect itemId={activeInteractionId} />\r\n            <SelectionContainer>\r\n                {recentItem.parties.map(party => (\r\n                    <RecentConferenceItem\r\n                        key={party.phone}\r\n                        party={party}\r\n                        onClick={handleItemClick}\r\n                        onDetails={openContactDetails}\r\n                        {...props}\r\n                    />\r\n                ))}\r\n            </SelectionContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport {Footer} from './Footer'\r\nimport {Header} from './Header'\r\nimport {RecentConferenceModalContent} from './RecentConferenceModalContent'\r\n\r\n\r\nexport type RecentConferenceSlidingModalCommonProps = {\r\n    handleCallClick: (callParams: HandleCallParams) => void\r\n    handleChatClick: (chatParams: ChatParams) => void\r\n    transferMode?: 'messages' | 'calls'\r\n}\r\n\r\ninterface RecentConferenceSlidingModalProps\r\n    extends RecentConferenceSlidingModalCommonProps, CommonSlidingModalItemProps {\r\n    recentItem?: RecentItem\r\n}\r\n\r\nexport const RecentConferenceSlidingModal: React.FC<RecentConferenceSlidingModalProps> = ({\r\n    show,\r\n    closeModal,\r\n    closing,\r\n    style,\r\n    handleCallClick,\r\n    handleChatClick,\r\n    recentItem,\r\n    transferMode,\r\n}) => {\r\n    assertDefined(recentItem)\r\n\r\n    const onCall = useEvent((callParams: InitiateCall) => {\r\n        handleCallClick({\r\n            ...callParams,\r\n            origination: 'recent',\r\n            navigateToInteractionsPage: true,\r\n            afterCallSideEffectCallback: closeModal,\r\n        })\r\n    })\r\n\r\n    const onChat = useEvent((chatParams: ChatParams) => {\r\n        handleChatClick({\r\n            ...chatParams,\r\n            origination: 'recent',\r\n            previousActivity: recentItem.globalInteractionId\r\n                ? {\r\n                    globalInteractionId: recentItem.globalInteractionId,\r\n                    mediaType: recentItem.media,\r\n                }\r\n                : undefined,\r\n        })\r\n        closeModal()\r\n    })\r\n\r\n    return (\r\n        <SlidingModal\r\n            show={show}\r\n            closing={closing}\r\n            style={style}\r\n            closeModal={closeModal}\r\n            name=\"recentConference\"\r\n            data-testid=\"recent-conference-parties-modal\"\r\n            header={<Header item={recentItem} />}\r\n            footer={(\r\n                <Footer\r\n                    recentItem={recentItem}\r\n                    onCall={onCall}\r\n                    onChat={onChat}\r\n                />\r\n            )}\r\n        >\r\n            <RecentConferenceModalContent\r\n                recentItem={recentItem}\r\n                transferMode={transferMode}\r\n                onCall={onCall}\r\n                onChat={onChat}\r\n            />\r\n        </SlidingModal>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ntype Props = CommonSlidingModalItemProps & {\r\n    contentVoiceTranscript: JSX.Element | null\r\n}\r\n\r\nexport const VoiceTranscriptModal: React.FC<Props> = React.memo(function VoiceTranscriptModal({contentVoiceTranscript, ...props}) {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <SlidingModal\r\n            name=\"call-transcript\"\r\n            headerClassName={tcn('flex min-h-[72px] justify-center heading-xs text-primary-on-primary')}\r\n            showIconClose={false}\r\n            header={t.VOICE_TRANSCRIPT.title()}\r\n            {...props}\r\n        >\r\n            {contentVoiceTranscript}\r\n        </SlidingModal>\r\n    )\r\n})\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport type {GlobalModalName} from '@bpinc/lib-sliding-modal-context'\r\nimport {useCloseGlobalSlidingModal, useSlidingModalState} from '@bpinc/lib-sliding-modal-context'\r\n\r\nimport {useGlobalModalStyles} from './hooks/useGlobalModalStyles'\r\nimport {CalendarEventSlidingModal} from './modals/CalendarEventSlidingModal'\r\nimport {MergeContactsSlidingModal} from './modals/MergeContacts/MergeContactsSlidingModal'\r\nimport {RecentConferenceSlidingModal} from './modals/RecentConference'\r\nimport {VoiceTranscriptModal} from './modals/VoiceTranscriptModal'\r\n\r\n\r\ntype GlobalSlidingModalsListItemProps = {\r\n    name: GlobalModalName\r\n}\r\n\r\nexport const GlobalSlidingModalsListItem: FC<GlobalSlidingModalsListItemProps> = ({name}) => {\r\n    const closeGlobalSlidingModal = useCloseGlobalSlidingModal()\r\n    const data = useSlidingModalState('globalModalsData')\r\n\r\n    const {show, topOffset} = data[name]\r\n    const style = useGlobalModalStyles(show, topOffset)\r\n\r\n    const closeModal = useCallback(\r\n        function closeModalCallback() {\r\n            closeGlobalSlidingModal(name)\r\n        },\r\n        [name, closeGlobalSlidingModal],\r\n    )\r\n\r\n    switch (name) {\r\n        case 'recentConference': {\r\n            return <RecentConferenceSlidingModal closeModal={closeModal} style={style} {...data[name]} />\r\n        }\r\n        case 'mergeContacts': {\r\n            return <MergeContactsSlidingModal closeModal={closeModal} style={style} {...data[name]} />\r\n        }\r\n        case 'calendarEvent': {\r\n            return <CalendarEventSlidingModal closeModal={closeModal} style={style} {...data[name]} />\r\n        }\r\n        case 'voiceTranscript': {\r\n            return <VoiceTranscriptModal closeModal={closeModal} style={style} {...data[name]} />\r\n        }\r\n        default:\r\n            return null\r\n    }\r\n}\r\n","import type {CSSProperties} from 'react'\r\nimport {useMemo} from 'react'\r\n\r\nimport {useCommunicatorContentHeight} from './useCommunicatorContentHeight'\r\nimport {useCommunicatorNavbarHeight} from './useCommunicatorNavbarHeight'\r\n\r\n\r\nexport function useGlobalModalStyles(isOpened: boolean, topOffset = 5): CSSProperties {\r\n    const communicatorContentHeight = useCommunicatorContentHeight(isOpened)\r\n    const navBarHeight = useCommunicatorNavbarHeight()\r\n\r\n    return useMemo(() => ({\r\n        height: `${communicatorContentHeight + navBarHeight - topOffset}px`,\r\n    }), [communicatorContentHeight, navBarHeight, topOffset])\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {useSlidingModalState} from '@bpinc/lib-sliding-modal-context'\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\n\r\nimport {GlobalSlidingModalsListItem} from './GlobalSldigingModalsListItem'\r\n\r\n\r\nexport const GlobalSlidingModalsList: React.FC = React.memo(\r\n    function GlobalSlidingModalsList() {\r\n        const visibleGlobalModals = useSlidingModalState(s => {\r\n            const allModals = typedKeys(s.globalModalsData)\r\n            return allModals.filter(m => s.globalModalsData[m].show || s.globalModalsData[m].closing)\r\n        })\r\n\r\n        return (\r\n            <div className=\"pointer-events-none absolute inset-y-0 z-[15] h-full w-full overflow-hidden\">\r\n                {visibleGlobalModals.map(name => (\r\n                    <GlobalSlidingModalsListItem key={name} name={name} />\r\n                ))}\r\n            </div>\r\n        )\r\n    },\r\n)\r\n","import type {ChangeEvent, KeyboardEvent, RefObject, SyntheticEvent} from 'react'\r\nimport {useCallback, useMemo, useState} from 'react'\r\n\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {digitizePhone, isCall} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item, ItemState} from '@bpinc/ad-interaction-state-types'\r\nimport {isHTMLInputElement} from '@bpinc/lib-html-utils'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\n\r\nfunction checkAllowToSendDtmf(item?: Item) {\r\n    const itemState = item?.state\r\n\r\n    return isCall(item) && inDeliveryOrDeliveryPendingState(itemState)\r\n\r\n    function inDeliveryOrDeliveryPendingState(state?: ItemState) {\r\n        return state === 'delivered' || state === 'delivery_pending'\r\n    }\r\n}\r\n\r\nfunction isInvalidDtmfInput(inputValue: string) {\r\n    const onlyDTMFsRegexp = /^[0-9*#,]*$/g\r\n    return !onlyDTMFsRegexp.test(inputValue)\r\n}\r\n\r\nexport function useDtmfInputStateAndHandlers(inputRef: RefObject<HTMLInputElement>) {\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [delay, setDelay] = useState(0)\r\n    const interactionId = useInteractionId()\r\n\r\n    const {sendDtmf} = useInteractionStateMethods()\r\n\r\n    const activeItemCallId = useInteractionProp(interactionId, activeItem => activeItem?.callData?.callId)\r\n\r\n    const allowToSendDtmf = useInteractionProp(interactionId, checkAllowToSendDtmf)\r\n\r\n    const sendDTMFs = useCallback(\r\n        function sendDTMFsCallback(DTMFs: string[], delayMs: number) {\r\n            if (!activeItemCallId) return\r\n            setTimeout(() => {\r\n                DTMFs.forEach(pendingDtmf => {\r\n                    sendDtmf({dtmf: pendingDtmf, callId: activeItemCallId})\r\n                })\r\n            }, delayMs)\r\n        },\r\n        [activeItemCallId, sendDtmf],\r\n    )\r\n\r\n    const handleInputChange = useCallback(\r\n        function handleInputChangeCallback(evt: ChangeEvent<HTMLInputElement>) {\r\n            if (!activeItemCallId) return\r\n\r\n            const newInputValue = digitizePhone(evt.target.value.toLowerCase())\r\n\r\n            if (isInvalidDtmfInput(newInputValue)) {\r\n                return\r\n            }\r\n\r\n            if (allowToSendDtmf) {\r\n                setInputValue(newInputValue)\r\n                const {DTMFsToSend, DTMFSToQueue} = getDTMFs(inputValue, newInputValue)\r\n\r\n                decreaseDelayWhenComaIsRemoved(inputValue, newInputValue)\r\n\r\n                sendDTMFs(DTMFsToSend, delay)\r\n                queueDTMFs(DTMFSToQueue)\r\n            }\r\n\r\n            function decreaseDelayWhenComaIsRemoved(prevValue: string, newValue: string) {\r\n                const prevComasAmount = getComasAmount(prevValue)\r\n                const newComasAmount = getComasAmount(newValue)\r\n\r\n                if (newComasAmount < prevComasAmount) {\r\n                    decreaseDelay()\r\n                }\r\n\r\n                function getComasAmount(string: string) {\r\n                    return string.split(',').length - 1\r\n                }\r\n\r\n                function decreaseDelay() {\r\n                    const secondsToSubtract = getComasAmountDifference()\r\n                    const millisecondsToSubtract = secondsToSubtract * 1000\r\n                    setDelay(currentdelay => currentdelay - millisecondsToSubtract)\r\n                }\r\n\r\n                function getComasAmountDifference() {\r\n                    return prevComasAmount - newComasAmount\r\n                }\r\n            }\r\n\r\n            function queueDTMFs(DTMFsToQueue: string[][]) {\r\n                if (DTMFsToQueue.length) {\r\n                    let localDelay = delay\r\n                    DTMFsToQueue.forEach(DTMFs => {\r\n                        localDelay += 1000\r\n                        sendDTMFs(DTMFs, localDelay)\r\n                    })\r\n                    setDelay(localDelay)\r\n                }\r\n            }\r\n\r\n            function getDTMFs(\r\n                prevInputValue: string,\r\n                newInputValueInner: string,\r\n            ): {DTMFsToSend: string[]; DTMFSToQueue: string[][]} {\r\n                const sameBeginning = getSameBeginning(prevInputValue, newInputValueInner)\r\n\r\n                const DTMFsAsString = newInputValueInner.replace(sameBeginning, '')\r\n\r\n                const [DTMFsToSend, ...DTMFsToQueue] = DTMFsAsString.split(',')\r\n\r\n                return {\r\n                    DTMFsToSend: DTMFsToSend.split(''),\r\n                    DTMFSToQueue: DTMFsToQueue.map(DTMFs => DTMFs.split('')),\r\n                }\r\n\r\n                function getSameBeginning(a: string, b: string) {\r\n                    let sameBeginningCurrent = ''\r\n                    for (let i = 0; i < b.length; i++) {\r\n                        if (a[i] !== b[i]) {\r\n                            return sameBeginningCurrent\r\n                        }\r\n                        sameBeginningCurrent += a[i]\r\n                    }\r\n\r\n                    return sameBeginningCurrent\r\n                }\r\n            }\r\n        },\r\n        [activeItemCallId, allowToSendDtmf, delay, inputValue, sendDTMFs],\r\n    )\r\n\r\n    const moveCaretToTheEnd = useCallback(function moveCaretToTheEndCallback(e: SyntheticEvent<HTMLInputElement>) {\r\n        e.preventDefault()\r\n        const input = e.target\r\n        if (!isHTMLInputElement(input)) {\r\n            return\r\n        }\r\n        input.focus()\r\n        input.selectionStart = input.selectionEnd = input.value.length + 1\r\n    }, [])\r\n\r\n    const handleButtonClick = useCallback(\r\n        function handleButtonClickCallback(value: string) {\r\n            return function handleButtonClickInner() {\r\n                value = value.trim()\r\n                if (allowToSendDtmf && activeItemCallId) {\r\n                    sendDtmf({dtmf: value, callId: activeItemCallId})\r\n                    setInputValue(inputValue + value)\r\n                }\r\n                if (inputRef.current) {\r\n                    inputRef.current.focus()\r\n                }\r\n            }\r\n        },\r\n        [activeItemCallId, allowToSendDtmf, inputRef, inputValue, sendDtmf],\r\n    )\r\n\r\n    const preventToMoveLeft = useCallback(function preventToMoveLeftCallback(evt: KeyboardEvent<HTMLInputElement>) {\r\n        if (evt.key === 'ArrowLeft') {\r\n            evt.preventDefault()\r\n        }\r\n    }, [])\r\n\r\n    const preventDefault = useCallback(function preventDefaultCallback(evt: SyntheticEvent) {\r\n        evt.preventDefault()\r\n    }, [])\r\n\r\n    return useMemo(\r\n        function memoize() {\r\n            return {\r\n                inputValue,\r\n                preventDefault,\r\n                handleInputChange,\r\n                moveCaretToTheEnd,\r\n                handleButtonClick,\r\n                preventToMoveLeft,\r\n            }\r\n        },\r\n        [inputValue, preventDefault, handleInputChange, moveCaretToTheEnd, handleButtonClick, preventToMoveLeft],\r\n    )\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nimport {InputField} from '@bpinc/lib-jskit-ui'\r\n\r\nimport {KeyPad} from '../../../dialpad'\r\nimport {useDtmfInputStateAndHandlers} from './useDtmfInputStateAndHandlers'\r\n\r\n\r\nexport const KeypadModalContent = () => {\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const {\r\n        inputValue,\r\n        handleButtonClick,\r\n        moveCaretToTheEnd,\r\n        preventToMoveLeft,\r\n        handleInputChange,\r\n    } = useDtmfInputStateAndHandlers(inputRef)\r\n\r\n    return (\r\n        <div className=\"flex flex-auto flex-col\">\r\n            <InputField\r\n                ref={inputRef}\r\n                autoFocus\r\n                onMouseDown={moveCaretToTheEnd}\r\n                onFocus={moveCaretToTheEnd}\r\n                onKeyDown={preventToMoveLeft}\r\n                onSelect={moveCaretToTheEnd}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n            <div className=\"mt-12 flex flex-auto items-center justify-center\">\r\n                <KeyPad\r\n                    handleButtonClick={handleButtonClick}\r\n                    allowLetterBasedDialing={false}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {KeypadModalContent} from './KeypadModalContent'\r\n\r\n\r\nexport const KeypadModal: React.FC<CommonSlidingModalItemProps> = React.memo(function KeypadModal(props) {\r\n    const t = useLocalizationState('t')\r\n\r\n    return (\r\n        <SlidingModal name=\"keypad\" header={t.DIAL_PAD.keypad()} {...props}>\r\n            <KeypadModalContent />\r\n        </SlidingModal>\r\n    )\r\n})\r\n","import React, {memo} from 'react'\r\n\r\nimport type {KBFeatures} from '@bpinc/kb-types'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\n\r\n\r\nconst {KBPageLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBPage')\r\n\r\nconst features: Partial<KBFeatures> = {\r\n    openInNewTab: true,\r\n}\r\n\r\nexport const GlobalKB: React.FC = memo(function GlobalKB() {\r\n    const kbBridge = useKbBridgeConnector()\r\n\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    return (\r\n        <KBPageLoader features={features} kbBridge={kbBridge} />\r\n    )\r\n})\r\n","import {tw} from '@servicepattern/ui'\r\nimport {tv} from 'tailwind-variants'\r\n\r\n\r\nexport const slidingPanelStyles = tv({\r\n    base: [\r\n        tw`bg-primary-background`,\r\n        tw`flex flex-col`,\r\n        tw`rounded-t-md`,\r\n        tw`absolute z-10 w-[calc(100%_-_8px)]`,\r\n        tw`bottom-0 left-1 top-auto`,\r\n        tw`overflow-hidden`,\r\n        tw`data-[state=open]:animate-slide-panel-up`,\r\n        tw`data-[state=closed]:animate-fade-out-100`,\r\n    ],\r\n    variants: {\r\n        modal: {\r\n            false: tw`shadow-5`,\r\n        },\r\n    },\r\n    slots: {\r\n        overlay: [\r\n            tw`absolute inset-0 z-10 bg-inverse-overlay`,\r\n            tw`data-[state=open]:animate-fade-in-100`,\r\n            tw`data-[state=closed]:animate-fade-out-100`,\r\n        ],\r\n    },\r\n})\r\n\r\nexport const slidingPanelHeaderStyles = tv({\r\n    base: [\r\n        tw`relative truncate px-6 py-4`,\r\n        tw`flex items-center justify-between gap-4`,\r\n        tw`heading-s`,\r\n        tw`border-b border-default`,\r\n    ],\r\n    slots: {\r\n        innerContainer: tw`flex items-center gap-4 truncate`,\r\n        close: tw`size-10 shrink-0`,\r\n    },\r\n})\r\n\r\n\r\nexport const slidingPanelContentStyle = tv({\r\n    base: [\r\n        tw`relative overflow-y-auto p-6`,\r\n        tw`flex flex-auto flex-col`,\r\n    ],\r\n})\r\n\r\nexport const slidingPanelFooterStyles = tv({\r\n    base: [\r\n        tw`shrink-0`,\r\n        tw`relative truncate px-6 py-4`,\r\n        tw`flex items-center justify-between gap-4`,\r\n        tw`border-t border-default`,\r\n    ],\r\n})\r\n","import type {Context} from 'react'\r\nimport React, {forwardRef, useMemo} from 'react'\r\nimport * as RDialog from '@radix-ui/react-dialog'\r\n\r\nimport {slidingPanelStyles} from './styles'\r\nimport type {SlidingPanelContextType, SlidingPanelProps} from './types'\r\n\r\n\r\nexport let SlidingPanelContext: Context<SlidingPanelContextType>\r\n\r\nexport const SlidingPanel = forwardRef<HTMLDivElement, SlidingPanelProps>(function SlidingPanel({\r\n    children,\r\n    onClose,\r\n    isOpen = true,\r\n    closeOnClickOutside = true,\r\n    closeOnEscape = true,\r\n    autoFocus = true,\r\n    modal,\r\n    className,\r\n    ...props\r\n}, ref) {\r\n    const {base, overlay} = slidingPanelStyles()\r\n\r\n    if (!SlidingPanelContext) {\r\n        SlidingPanelContext = React.createContext({onClose})\r\n    }\r\n\r\n    const contextValue = useMemo(() => ({onClose}), [onClose])\r\n\r\n    return (\r\n        <SlidingPanelContext.Provider value={contextValue}>\r\n            <RDialog.Root\r\n                open={isOpen}\r\n                modal={modal}\r\n                onOpenChange={open => {\r\n                    if (!open) {\r\n                        onClose()\r\n                    }\r\n                }}\r\n            >\r\n                <RDialog.Overlay className={overlay()} />\r\n                <RDialog.Content\r\n                    className={base({className, modal})}\r\n                    {...props}\r\n                    ref={ref}\r\n                    onOpenAutoFocus={e => {\r\n                        !autoFocus && e.preventDefault()\r\n                    }}\r\n                    onEscapeKeyDown={e => {\r\n                        if (closeOnEscape) {\r\n                            onClose()\r\n                            e.stopPropagation()\r\n                        }\r\n                    }}\r\n                    onPointerDownOutside={e => {\r\n                        !closeOnClickOutside && e.preventDefault()\r\n                    }}\r\n                >\r\n                    {children}\r\n                </RDialog.Content>\r\n            </RDialog.Root>\r\n        </SlidingPanelContext.Provider>\r\n    )\r\n})\r\n","import React, {useContext} from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport type {KBFeatures} from '@bpinc/kb-types'\r\nimport {IconClose24} from '@bpinc/lib-jskit-ui'\r\nimport {SlidingPanelContext} from '@bpinc/lib-jskit-ui/src/components/SlidingPanel/SlidingPanel'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {assertKBBridgeInterface, useKbBridgeConnector} from '@bpinc/state-kb-bridge-provider'\r\n\r\n\r\nconst {KBPageLoader} = createComponentLoader('knowledgeBase', import('knowledgeBase'), 'KBPage')\r\n\r\nconst features: Partial<KBFeatures> = {\r\n    setupInteractionKB: true,\r\n    openInNewTab: true,\r\n}\r\n\r\n/** Interaction related KB */\r\nexport const InteractionKB: React.FC = () => {\r\n    const kbBridge = useKbBridgeConnector()\r\n    assertKBBridgeInterface(kbBridge)\r\n\r\n    const {onClose} = useContext(SlidingPanelContext)\r\n\r\n    const closeButton = (\r\n        <Button\r\n            className=\"ml-2\"\r\n            flat\r\n            icon={<IconClose24 />}\r\n            onPressed={onClose}\r\n            tooltipPlacement=\"bottom-end\"\r\n            variant=\"ghost\"\r\n        />\r\n    )\r\n    return (\r\n        <KBPageLoader\r\n            closeButton={closeButton}\r\n            features={features}\r\n            kbBridge={kbBridge}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\n\r\nimport {InteractionKB} from '../../kb'\r\n\r\n\r\nexport const KnowledgeBaseSlidingModal: React.FC<CommonSlidingModalItemProps> = React.memo(\r\n    function KnowledgeBaseSlidingModal(props) {\r\n        return (\r\n            <SlidingModal\r\n                className=\"text-left\"\r\n                contentClassName=\"p-0\"\r\n                name=\"knowledgeBase\"\r\n                focusTrap={false}\r\n                {...props}\r\n            >\r\n                <InteractionKB />\r\n            </SlidingModal>\r\n        )\r\n    },\r\n)\r\n","import React from 'react'\r\n\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {FocusTrap, SlidingModal} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n//TODO: Move RescheduleForm closer to components that use it?\r\nimport {RescheduleForm} from '../../reschedule'\r\n\r\n\r\nconst rescheduleSlidingModalContent = (\r\n    <FocusTrap className=\"flex flex-col items-start text-left\">\r\n        <RescheduleForm />\r\n    </FocusTrap>\r\n)\r\n\r\nexport const RescheduleSlidingModal: React.FC<CommonSlidingModalItemProps> = props => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <SlidingModal\r\n            name=\"reschedule\"\r\n            focusTrap={false}\r\n            header={t.CALL_DETAILS_FORM.button_schedule_followup_label()}\r\n            {...props}\r\n        >\r\n            {rescheduleSlidingModalContent}\r\n        </SlidingModal>\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\n\r\ntype SelectedAction = 'consult-call' | 'transfer' | 'conference'\r\n\r\nexport const selectedActionAtom = atom<SelectedAction>('consult-call')\r\nexport const searchAtom = atom('')\r\nexport const dialNumberAtom = atom('')\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {useAtom, useAtomValue} from 'jotai'\r\n\r\nimport {useTransferHandlers} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {\r\n    IconCompleteTransfer,\r\n    IconCompleteTransferFilled,\r\n    IconConference,\r\n    IconConferenceCall24,\r\n    IconPhone,\r\n    IconPhone24Filled,\r\n    SplitButtonDropdown,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {useCloseInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {dialNumberAtom, selectedActionAtom} from '../../atoms'\r\n\r\n\r\nexport const ActionButton: FC = () => {\r\n    const open = useBoolean()\r\n    const t = useLocalizationState('t')\r\n    const [action, setAction] = useAtom(selectedActionAtom)\r\n    const dialNumber = useAtomValue(dialNumberAtom)\r\n    const itemId = useInteractionId()\r\n    const closeModal = useCloseInteractionSlidingModal()\r\n    // eslint-disable-next-line react-perf/jsx-no-new-array-as-prop\r\n    const options = [\r\n        {\r\n            value: 'consult-call',\r\n            text: t.VOICE_CALL.dial_consult_button_tooltip(),\r\n            selectedIcon: <IconPhone24Filled className=\"svg-color-current\" />,\r\n            optionIcon: <IconPhone className=\"size-4\" />,\r\n        },\r\n        {\r\n            value: 'transfer',\r\n            text: t.VOICE_CALL.blind_transfer_button_tooltip(),\r\n            selectedIcon: (\r\n                <IconCompleteTransferFilled className=\"svg-color-current\" />\r\n            ),\r\n            optionIcon: <IconCompleteTransfer className=\"size-4\" />,\r\n        },\r\n        {\r\n            value: 'conference',\r\n            text: t.VOICE_CALL.dial_conference_button_tooltip(),\r\n            selectedIcon: (\r\n                <IconConferenceCall24 className=\"svg-color-current\" />\r\n            ),\r\n            optionIcon: <IconConference className=\"size-4\" />,\r\n        },\r\n    ] as const\r\n\r\n    const selectedOption = options.find(o => o.value === action)\r\n    const transferHandlers = useTransferHandlers()\r\n\r\n    return (\r\n        <SplitButtonDropdown\r\n            actionButton={{\r\n                onClick: () => {\r\n                    switch (action) {\r\n                        case 'consult-call':\r\n                            transferHandlers.consultCallHandler(dialNumber)\r\n                            break\r\n                        case 'transfer':\r\n                            transferHandlers.blindTransferHandler(dialNumber)\r\n                            break\r\n                        case 'conference':\r\n                            transferHandlers.singleStepConferenceHandler(\r\n                                dialNumber,\r\n                            )\r\n                            break\r\n                    }\r\n                    closeModal(itemId, 'transfer')\r\n                },\r\n            }}\r\n            open={open.value}\r\n            onOpenChange={open.toggle}\r\n            className=\"h-10\"\r\n            options={options.map(o => (\r\n                <button\r\n                    className=\"flex gap-2\"\r\n                    key={o.value}\r\n                    onClick={() => setAction(o.value)}\r\n                >\r\n                    {o.optionIcon}\r\n                    <span>{o.text}</span>\r\n                </button>\r\n            ))}\r\n        >\r\n            <span className=\"flex items-center gap-2\">\r\n                {selectedOption?.selectedIcon}\r\n                <span>{selectedOption?.text}</span>\r\n            </span>\r\n        </SplitButtonDropdown>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {InputField} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {dialNumberAtom} from '../../atoms'\r\nimport {ActionButton} from './ActionButton'\r\n\r\n\r\nexport const TransferModalFooter: FC = () => {\r\n    const [dialNumber, setDialNumber] = useAtom(dialNumberAtom)\r\n    const t = useLocalizationState('t')\r\n\r\n    return (\r\n        <>\r\n            <InputField\r\n                layoutClassName=\"flex-auto\"\r\n                value={dialNumber}\r\n                onChange={e => {\r\n                    setDialNumber(e.target.value)\r\n                }}\r\n                fieldClassName=\"h-10\"\r\n                label={t.CONTACT.channel_favorites_phone_icon_tooltip()}\r\n            />\r\n            <ActionButton />\r\n        </>\r\n    )\r\n}\r\n","import {useCallback, useDeferredValue, useMemo} from 'react'\r\n\r\nimport {itemTypeToTabType} from '@bpinc/ad-formatting-helpers'\r\nimport {\r\n    isRecentCall as isCall,\r\n    isRecentCallConference as isCallConference,\r\n    isRecentChat as isChat,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useRecentUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport {useCallPartyUsersFilter, useChatPartyUsersFilter} from '../../directory'\r\nimport type {ItemType, RecentListRenderContext} from '../'\r\n\r\n\r\nexport interface UniqueRecentItem extends RecentItem {\r\n    repeatCount?: number // if present, is > 1\r\n}\r\n\r\ninterface RecentChatUniqueData {\r\n    mediaType: 'chat'\r\n    type: string // direction or 'missed'\r\n    unique: boolean\r\n}\r\ninterface RecentVoiceUniqueData {\r\n    mediaType: 'voice'\r\n    phone: string\r\n    type: string // direction or 'missed'\r\n    isConference: boolean\r\n}\r\ninterface RecentCaseUniqueData {\r\n    mediaType: 'email'\r\n    caseId: string\r\n}\r\n\r\ntype RecentItemUniqueData = RecentChatUniqueData | RecentVoiceUniqueData | RecentCaseUniqueData\r\n\r\ntype SameContactChats = {\r\n    [type in 'contactIds' | 'emails' | 'numbers' | 'names']: {\r\n        [key: string]: true\r\n    }\r\n}\r\n\r\ninterface UseFilteredListParams {\r\n    recentList: RecentItem[]\r\n    renderContext: RecentListRenderContext | undefined\r\n    transferMode?: 'messages' | 'calls'\r\n    filter?: (item: RecentItem) => boolean | undefined\r\n    type: ItemType\r\n}\r\n\r\nconst defaultExternalFilter = () => true\r\n\r\nexport function useFilteredList({\r\n    type,\r\n    transferMode,\r\n    renderContext,\r\n    recentList,\r\n    filter: externalFilter = defaultExternalFilter,\r\n}: UseFilteredListParams) {\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    const searchValue = useRecentUIState(s => s.searchValue)\r\n    const deferredSearchValue = useDeferredValue(searchValue)\r\n\r\n    const searchValueFilter = useCallback(\r\n        function searchValueFilterCallback(item: RecentItem) {\r\n            return (\r\n                //Ignore search filter in transfer modals\r\n                renderContext === 'transfer' ||\r\n                //Ignore filter when no search\r\n                !deferredSearchValue ||\r\n                //Search by number\r\n                item.number?.includes(deferredSearchValue) ||\r\n                //Search by name\r\n                item.name?.toLowerCase().includes(deferredSearchValue.toLowerCase()) ||\r\n                item.firstName?.toLowerCase().includes(deferredSearchValue.toLowerCase()) ||\r\n                item.lastName?.toLowerCase().includes(deferredSearchValue.toLowerCase())\r\n            )\r\n        },\r\n        [renderContext, deferredSearchValue],\r\n    )\r\n\r\n    const callUsersFilter = useCallPartyUsersFilter()\r\n    const chatUsersFilter = useChatPartyUsersFilter()\r\n    const combinedFilter = useCallback(\r\n        (item: RecentItem) => {\r\n            const isAgent = !!item.userId\r\n            const isEMIUser = item?.userType === 'msteams'\r\n\r\n            const hasAgentsInChatConferenceMode = !(transferMode === 'messages') || isAgent || isEMIUser\r\n            const isCallWithSelf = isCall(item) && item.userId === selfUserId\r\n            const isNotAPartyOfActiveInteraction =\r\n                transferMode === 'calls'\r\n                    ? callUsersFilter(item)\r\n                    : transferMode === 'messages'\r\n                        ? chatUsersFilter(item)\r\n                        : true\r\n            return (\r\n                searchValueFilter(item) &&\r\n                externalFilter(item) &&\r\n                hasAgentsInChatConferenceMode &&\r\n                filterByType(item, type) &&\r\n                !isCallWithSelf &&\r\n                isNotAPartyOfActiveInteraction\r\n            )\r\n        },\r\n        [transferMode, selfUserId, callUsersFilter, chatUsersFilter, searchValueFilter, externalFilter, type],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeRecentList() {\r\n            return keepLastOfKindFilter(recentList).filter(combinedFilter)\r\n        },\r\n        [combinedFilter, recentList],\r\n    )\r\n}\r\n\r\n// ----------- Helpers--------------//\r\n\r\nconst filterByType = (item: RecentItem, type: ItemType) => {\r\n    return type === 'all' || itemTypeToTabType(item.type, item.media) === type\r\n}\r\n\r\nfunction incrementRecentItemRepeatCount(items: UniqueRecentItem[]): void {\r\n    const item = items[items.length - 1]\r\n    if (typeof item.repeatCount === 'number') {\r\n        item.repeatCount += 1\r\n    } else {\r\n        items[items.length - 1] = {...item, repeatCount: 2}\r\n    }\r\n}\r\n\r\nfunction keepLastOfKindFilter(list: RecentItem[]): UniqueRecentItem[] {\r\n    let lastUniqueData: RecentItemUniqueData | undefined = undefined\r\n    const result: UniqueRecentItem[] = []\r\n    const sameContactChats: SameContactChats = {\r\n        contactIds: {},\r\n        emails: {},\r\n        numbers: {},\r\n        names: {},\r\n    }\r\n    list.filter(item => isChatUnique(item, sameContactChats)) // first, keep only the latest chat from the same contact\r\n        .forEach(item => {\r\n            // then group repeated calls and emails from the same contact\r\n            const uniqueData = extractRecentItemUniqueData(item) // returns undefined for chat, and undefined is always unique (not equal)\r\n            if (result.length > 0 && equalRecentItemUniqueData(uniqueData, lastUniqueData)) {\r\n                // list is sorted so that the most recent item is the first - so keep it there, just increment the repeat count\r\n                incrementRecentItemRepeatCount(result)\r\n            } else {\r\n                result.push(item)\r\n            }\r\n            lastUniqueData = uniqueData\r\n        })\r\n    return result\r\n}\r\n\r\nconst extractRecentItemUniqueData = (item: RecentItem): RecentItemUniqueData | undefined => {\r\n    if (item.media === 'VOICE') {\r\n        if (item.number) {\r\n            const type = item.answered ? item.direction : 'missed'\r\n            return {\r\n                mediaType: 'voice',\r\n                phone: item.number,\r\n                type,\r\n                isConference: isCallConference(item),\r\n            }\r\n        } else {\r\n            return undefined\r\n        }\r\n    } else if (item.media === 'EMAIL') {\r\n        if (item.caseId) {\r\n            return {mediaType: 'email', caseId: item.caseId}\r\n        } else {\r\n            return undefined\r\n        }\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n\r\nfunction equalRecentItemUniqueData(\r\n    r1: RecentItemUniqueData | undefined,\r\n    r2: RecentItemUniqueData | undefined,\r\n): boolean {\r\n    if (!r1 || !r2) {\r\n        return false\r\n    } else if (r1.mediaType === 'chat') {\r\n        return false // chats are special-handled before this\r\n    } else if (r1.mediaType === 'voice') {\r\n        if (r2.mediaType === 'voice') {\r\n            if (r1.isConference || r2.isConference) {\r\n                return false\r\n            } else {\r\n                return r1.phone === r2.phone && r1.type === r2.type\r\n            }\r\n        } else {\r\n            return false\r\n        }\r\n    } else if (r1.mediaType === 'email') {\r\n        if (r2.mediaType === 'email') {\r\n            return r1.caseId === r2.caseId\r\n        } else {\r\n            return false\r\n        }\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction isChatUnique(item: RecentItem, sameContactChats: SameContactChats): boolean {\r\n    let unique = true\r\n    if (isChat(item)) {\r\n        if (item.contactId) {\r\n            if (sameContactChats.contactIds[item.contactId]) {\r\n                unique = false\r\n            } else {\r\n                sameContactChats.contactIds[item.contactId] = true\r\n            }\r\n        } else if (item.email) {\r\n            if (sameContactChats.emails[item.email]) {\r\n                unique = false\r\n            } else {\r\n                sameContactChats.emails[item.email] = true\r\n            }\r\n        } else if (item.number) {\r\n            if (sameContactChats.numbers[item.number]) {\r\n                unique = false\r\n            } else {\r\n                sameContactChats.numbers[item.number] = true\r\n            }\r\n        } else {\r\n            const name = item.name || [item.firstName, item.lastName].join(' ')\r\n            if (name.trim()) {\r\n                if (sameContactChats.names[name]) {\r\n                    unique = false\r\n                } else {\r\n                    sameContactChats.names[name] = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return unique\r\n}\r\n","import React from 'react'\r\n\r\nimport {useIntegrationApiStateMethods} from '@bpinc/ad-integration-api-state-context'\r\nimport type {InteractionAssociatedObject} from '@bpinc/ad-interaction-state-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ntype Props = {\r\n    crmObject: InteractionAssociatedObject\r\n}\r\n\r\nexport const CrmObjectListItem: React.FC<Props> = ({crmObject}) => {\r\n\r\n    const {openRecord} = useIntegrationApiStateMethods()\r\n    const {displayName} = crmObject\r\n\r\n    const showScreenPopOnClick = useEvent(() => {\r\n        openRecord(\r\n            crmObject,\r\n            undefined,\r\n            {inNewTab: false, source: 'user'},\r\n        )\r\n    })\r\n\r\n    return (\r\n        <button\r\n            data-testid=\"crm-object-item-button\"\r\n            onClick={showScreenPopOnClick}\r\n            className={tcn(\r\n                'cursor-pointer whitespace-nowrap caption-s',\r\n                'text-primary-on-primary hover:text-primary-link',\r\n            )}\r\n        >\r\n            {displayName}\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {InteractionAssociatedObject} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {CrmObjectListItem} from './CRMObjectListItem'\r\n\r\n\r\ntype Props = {\r\n    crmObjects: InteractionAssociatedObject[]\r\n}\r\n\r\nexport const CRMObjectsList: React.FC<Props> = ({\r\n    crmObjects,\r\n}) => {\r\n    return (\r\n        <div data-testid=\"crm-objects\" className=\"ml-11 flex flex-col\">\r\n            {crmObjects.map(crmObject => (\r\n                <CrmObjectListItem key={crmObject.id} crmObject={crmObject} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import type {ButtonHTMLAttributes, FC, PropsWithChildren} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useContact, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {ContactType} from '@bpinc/ad-contacts-state-types'\r\nimport {stopPropagation, useBoolean, useEvent} from '@bpinc/lib-helpers'\r\nimport {IconArrowDown16, IconArrowUp16, TriggerDropdown} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\n\r\ntype DropdownOption = {\r\n    key: string\r\n    value: string\r\n    type: string\r\n}\r\n\r\ntype HtmlProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>\r\n\r\ntype OptionsExtractor = (contactData: ContactType) => DropdownOption[]\r\n\r\ntype Props = PropsWithChildren<HtmlProps & {\r\n    icon: JSX.Element\r\n    contactId: string\r\n    tooltip: string\r\n    OptionComponent: FC<Omit<DropdownOption, 'key'>>\r\n    optionsExtractor: OptionsExtractor\r\n    onPressed: (value: string) => void\r\n}>\r\n\r\nexport const ExternalContactInteractionButton: React.FC<Props> = ({\r\n    contactId,\r\n    icon,\r\n    tooltip,\r\n    OptionComponent,\r\n    optionsExtractor,\r\n    onPressed,\r\n    className,\r\n    children,\r\n    ...htmlProps\r\n}) => {\r\n\r\n    const popupOpen = useBoolean()\r\n\r\n    const {getContact} = useContactsStateMethods()\r\n    const {data: fullContactData, isLoading} = useContact(contactId) ?? {}\r\n\r\n    const loadFullContactDataAndContinue = useEvent(() => {\r\n        getContact({id: contactId})\r\n            .then(contactData => {\r\n                if (!contactData) {\r\n                    return\r\n                }\r\n                const options = optionsExtractor(contactData)\r\n\r\n                if (options.length > 1) {\r\n                    popupOpen.setTrue()\r\n                } else if (options.length === 1) {\r\n                    onPressed(options[0].value)\r\n                }\r\n            })\r\n    })\r\n\r\n    const keyDownHandler = useEvent((e: React.KeyboardEvent) => {\r\n        if (e.key === 'Escape') {\r\n            e.stopPropagation()\r\n            popupOpen.setFalse()\r\n        }\r\n    })\r\n\r\n    if (!fullContactData) {\r\n        return (\r\n            <Button\r\n                size=\"sm\"\r\n                variant=\"neutral\"\r\n                state={isLoading ? 'loading' : 'default'}\r\n                className={className}\r\n                tooltip={tooltip}\r\n                iconLeft={icon}\r\n                onClick={loadFullContactDataAndContinue}\r\n                {...htmlProps}\r\n            >\r\n                {children}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    const options = optionsExtractor(fullContactData)\r\n\r\n    return options.length > 1 ? (\r\n        <TriggerDropdown\r\n            modal={false}\r\n            inPortal={false}\r\n            align=\"start\"\r\n            open={popupOpen.value}\r\n            onOpenChange={popupOpen.toggle}\r\n            onKeyDown={keyDownHandler}\r\n            onClick={stopPropagation}\r\n            onFocus={stopPropagation}\r\n            className=\"[&>*:not(:last-child)]:border-b [&>*:not(:last-child)]:border-default\"\r\n            options={options.map(({key, ...props}) => (\r\n                <button key={key} onClick={() => onPressed(props.value)}>\r\n                    <OptionComponent {...props} />\r\n                </button>\r\n            ))}\r\n        >\r\n            {isOpened => (\r\n                <Button\r\n                    size=\"sm\"\r\n                    variant=\"neutral\"\r\n                    className={className}\r\n                    tooltip={tooltip}\r\n                    iconLeft={icon}\r\n                    iconRight={isOpened ? <IconArrowUp16 /> : <IconArrowDown16 />}\r\n                    data-focused={isOpened}\r\n                >\r\n                    {children}\r\n                </Button>\r\n            )}\r\n        </TriggerDropdown>\r\n    ) : (\r\n        <Button\r\n            size=\"sm\"\r\n            variant=\"neutral\"\r\n            state={options.length ? 'default' : 'disabled'}\r\n            className={className}\r\n            tooltip={tooltip}\r\n            iconLeft={icon}\r\n            onPressed={() => {\r\n                assertDefined(options[0])\r\n                onPressed(options[0].value)\r\n            }}\r\n            {...htmlProps}\r\n        >\r\n            {children}\r\n        </Button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useContactDisplayName} from '@bpinc/ad-contacts-state-hooks'\r\nimport {contactToShortContact} from '@bpinc/ad-contacts-state-methods'\r\nimport {externalContact} from '@bpinc/ad-contacts-state-types'\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {ExternalContactFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconEmailEnvelope16, IconPhone16, IconRoundChat16} from '@bpinc/lib-jskit-ui'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport {EmailOption, PhoneOption} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {OnEmailParams} from '../../../directory/components/user/types'\r\nimport {ExternalContactInteractionButton} from './ExternalContactInteractionButton'\r\n\r\n\r\ntype Props = {\r\n    contactId: string\r\n    onCallClick: (callParams: HandleCallParams) => void\r\n    onChatClick: (chatParams: ChatParams) => void\r\n    onEmailClick: (emailParams: OnEmailParams) => void\r\n}\r\n\r\nexport const IdentifiedContactContent: React.FC<Props> = ({\r\n    contactId,\r\n    onCallClick,\r\n    onChatClick,\r\n    onEmailClick,\r\n}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n\r\n    const {data: contactData} = useContact(contactId) ?? {}\r\n    const contactDisplayName = useContactDisplayName(contactId) ?? t.GLOBAL.anonymous()\r\n\r\n    const shortContactData = contactData ? contactToShortContact(contactData) : undefined\r\n\r\n    const handleCall = useEvent((phone: string) => {\r\n        onCallClick({\r\n            phone,\r\n            contactId: contactId,\r\n            firstName: contactData?.firstName,\r\n            lastName: contactData?.lastName,\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent((phone: string) => {\r\n        onChatClick({\r\n            phone,\r\n            contactId: contactId,\r\n            firstName: contactData?.firstName,\r\n            lastName: contactData?.lastName,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent((email: string) => {\r\n        onEmailClick({\r\n            contactId: contactId,\r\n            emailAddress: email,\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex items-start gap-1 px-2 py-1.5\">\r\n                <div className=\"truncate font-semibold body text-primary-action\">\r\n                    {contactDisplayName}\r\n                </div>\r\n                {!!shortContactData && (\r\n                    <ExternalContactFavoriteButton\r\n                        item={shortContactData}\r\n                        className=\"ml-auto size-6 p-1\"\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className=\"flex flex-auto gap-2 px-2 pb-2\">\r\n                <ExternalContactInteractionButton\r\n                    contactId={contactId}\r\n                    className=\"h-7 flex-auto\"\r\n                    icon={<IconPhone16 className=\"svg-color-current\" />}\r\n                    tooltip={t.CONTACT.button_start_call_text()}\r\n                    OptionComponent={PhoneOption}\r\n                    optionsExtractor={externalContact.callOptions}\r\n                    onPressed={handleCall}\r\n                />\r\n                <ExternalContactInteractionButton\r\n                    contactId={contactId}\r\n                    className=\"h-7 flex-auto\"\r\n                    icon={<IconRoundChat16 className=\"svg-color-current\" />}\r\n                    tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                    OptionComponent={PhoneOption}\r\n                    optionsExtractor={externalContact.chatOptions}\r\n                    onPressed={handleChat}\r\n                />\r\n                <ExternalContactInteractionButton\r\n                    contactId={contactId}\r\n                    className=\"h-7 flex-auto\"\r\n                    icon={<IconEmailEnvelope16 className=\"svg-color-current\" />}\r\n                    tooltip={t.CONTACT.button_send_email_text()}\r\n                    OptionComponent={EmailOption}\r\n                    optionsExtractor={externalContact.emailOptions}\r\n                    onPressed={handleEmail}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useMemo} from 'react'\r\nimport {useController, useForm} from 'react-hook-form'\r\nimport {DevTool} from '@hookform/devtools'\r\n\r\nimport type {ActiveDraft} from '@bpinc/ad-interaction-state-types'\r\nimport {useEmailAttachmentsUIState} from '@bpinc/lib-attachments-state'\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AttachmentsList, Button} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useGetEmailQuery} from '../../queries/useGetEmailQuery'\r\nimport {EmailControls} from './EmailControls'\r\nimport {EmailSelectionInput} from './EmailSelectionInput'\r\nimport {emailAddressToEmailSearchItem} from './helpers'\r\nimport type {EmailFormFields} from './types'\r\nimport {useAttachmentsStateSync} from './useAttachmentsStateSync'\r\nimport {useEmailTemplateFetcher} from './useEmailTemplateFetcher'\r\nimport {usePasteFromKB} from './usePasteFromKB'\r\nimport {useSaveDraftInterval} from './useSaveDraftInterval'\r\nimport {WysiwygEditor} from './WysiwygEditor'\r\n\r\n\r\nconst inputSectionStyles = 'flex items-center border-t border-main-border pt-2'\r\n\r\nexport interface EmailFormProps extends ActiveDraft {\r\n    interactionId: string\r\n}\r\n\r\n\r\nexport const EmailForm: FC<EmailFormProps> = props => {\r\n    const {emailId, referencedEmailId} = props\r\n\r\n    const {data: email, isSuccess: emailLoaded} = useGetEmailQuery(emailId)\r\n\r\n    const form = useForm<EmailFormFields>({\r\n        values: {\r\n            to: email?.toAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            cc: email?.ccAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            bcc: email?.bccAddresses.map(emailAddressToEmailSearchItem) ?? [],\r\n            subject: email?.subject ?? '',\r\n            html: email?.content ?? '',\r\n            headerFooterUserId: email?.headerFooterUserId,\r\n            //Attachments are initialized in useAttachmentsStateSync\r\n            attachments: [],\r\n        },\r\n    })\r\n\r\n    useEmailTemplateFetcher({draft: props, form})\r\n\r\n    useSaveDraftInterval({emailId, form})\r\n\r\n    usePasteFromKB(props.interactionId, form)\r\n\r\n    const ccEnabled = useBoolean()\r\n    const bccEnabled = useBoolean()\r\n    const {\r\n        t: {EMAIL: i18n},\r\n    } = useLocalizationState()\r\n\r\n    const {field} = useController({\r\n        control: form.control,\r\n        name: 'subject',\r\n    })\r\n    const {getAttachmentsList, removeAttachment} = useEmailAttachmentsUIState(['getAttachmentsList', 'removeAttachment'])\r\n\r\n    const attachmentsList = useMemo(() => getAttachmentsList(emailId), [emailId, getAttachmentsList])\r\n    useAttachmentsStateSync({email, attachmentsList, control: form.control, emailLoaded})\r\n\r\n    return (\r\n        <div className=\"p-2\">\r\n            <div\r\n                className=\"rounded border border-main-border p-2\"\r\n            >\r\n                <div className=\"group min-h-10\">\r\n                    <section className=\"flex justify-between\">\r\n                        <EmailSelectionInput\r\n                            name=\"to\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_to_prefix()}\r\n                        />\r\n                        <div className=\"hidden shrink-0 group-focus-within:block\">\r\n                            <Button\r\n                                className={tcn('block text-sm', {\r\n                                    'text-primary-legacy': ccEnabled.value,\r\n                                })}\r\n                                onClick={ccEnabled.toggle}\r\n                            >\r\n                                {i18n.email_address_cc_prefix()}\r\n                            </Button>\r\n                            <Button\r\n                                className={tcn('block text-sm', {\r\n                                    'text-primary-legacy': bccEnabled.value,\r\n                                })}\r\n                                onClick={bccEnabled.toggle}\r\n                            >\r\n                                {i18n.email_address_bcc_prefix()}\r\n                            </Button>\r\n                        </div>\r\n                    </section>\r\n                    {ccEnabled.value && (\r\n                        <EmailSelectionInput\r\n                            name=\"cc\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_cc_prefix()}\r\n                        />\r\n                    )}\r\n                    {bccEnabled.value && (\r\n                        <EmailSelectionInput\r\n                            name=\"bcc\"\r\n                            control={form.control}\r\n                            label={i18n.email_address_bcc_prefix()}\r\n                        />\r\n                    )}\r\n                </div>\r\n                <section className={tcn(inputSectionStyles, 'h-10 pb-2')}>\r\n                    <label>{i18n.email_subject()}</label>\r\n                    <input {...field} className=\"w-full pl-2\" />\r\n                </section>\r\n                <section\r\n                    className={tcn(\r\n                        inputSectionStyles,\r\n                        'min-h-56 flex-col pb-2',\r\n                        {'min-h-80': attachmentsList.length},\r\n                    )}\r\n                >\r\n                    <WysiwygEditor control={form.control} emailId={emailId} referencedEmailId={referencedEmailId} />\r\n                    {!!attachmentsList.length && (\r\n                        <AttachmentsList\r\n                            list={attachmentsList}\r\n                            className=\"mb-2\"\r\n                            removeAttachment={removeAttachment}\r\n                            attachmentsListGroupId={emailId}\r\n                        />\r\n                    )}\r\n                    <EmailControls {...props} form={form} />\r\n                </section>\r\n            </div>\r\n            {process.env.NODE_ENV === 'development' && <DevTool control={form.control} />}\r\n        </div>\r\n    )\r\n}\r\n","import {createSelector} from 'reselect'\r\n\r\nimport type {ActivityCase} from '@bpinc/ad-case-state-types'\r\n\r\n\r\ntype FormatNameFunction = (\r\n    firstName: string | undefined,\r\n    lastName: string | undefined,\r\n) => string\r\n\r\nconst selectDispositions = createSelector(\r\n    (activity: ActivityCase) => activity.parties,\r\n    (parties: ActivityCase['parties']) => {\r\n        const result = new Set<string>()\r\n\r\n        parties?.forEach(party => {\r\n            if (party.partyType !== 'CONTACT' && party.disposition) {\r\n                result.add(party.disposition)\r\n            }\r\n        })\r\n\r\n        return Array.from(result)\r\n    },\r\n)\r\n\r\nconst selectServices = (activity: ActivityCase) => activity.services\r\n\r\n//TODO: Remove it if it won't be used after the case page is done.\r\nconst selectNotes = createSelector(\r\n    (activity: ActivityCase) => activity.parties,\r\n    (parties: ActivityCase['parties']) => {\r\n        const result = new Set<string>()\r\n\r\n        parties?.forEach(party => {\r\n            if (party.partyType !== 'CONTACT' && party.notes) {\r\n                result.add(party.notes)\r\n            }\r\n        })\r\n\r\n        return Array.from(result)\r\n    },\r\n)\r\n\r\nconst selectAgentsNames = (\r\n    formatNameFunction: FormatNameFunction,\r\n) =>\r\n    createSelector(\r\n        (a: ActivityCase) => a.parties,\r\n        (parties: ActivityCase['parties']) => {\r\n            const result = new Set<string>()\r\n\r\n            parties?.forEach(party => {\r\n                if (party.partyType !== 'CONTACT') {\r\n                    const name = formatNameFunction(\r\n                        party.firstName,\r\n                        party.lastName,\r\n                    )\r\n                    if (name) {\r\n                        result.add(name)\r\n                    }\r\n                }\r\n            })\r\n\r\n            return Array.from(result)\r\n        },\r\n    )\r\n\r\nexport const selectAgentsString = (formatNameFunction: FormatNameFunction) => createSelector(\r\n    selectAgentsNames(formatNameFunction),\r\n    agents => agents.join(', '),\r\n)\r\n\r\nconst selectServicesString = createSelector(selectServices, services =>\r\n    services?.map(service => service.serviceName)?.join(', '),\r\n)\r\n\r\nexport const selectDispositionsString = createSelector(\r\n    selectDispositions,\r\n    dispositions => dispositions?.join(', '),\r\n)\r\n\r\nexport const selectServicesAndDispositionsString = createSelector(\r\n    selectServicesString,\r\n    selectDispositionsString,\r\n    (servicesString, dispositionsString) => {\r\n        return [servicesString, dispositionsString].filter(Boolean).join(': ')\r\n    },\r\n)\r\n","import React from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {useCaseState} from '@bpinc/ad-case-state-context'\r\nimport type {ActivityChat as ActivityChatType} from '@bpinc/ad-case-state-types'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {LegacyIconChat} from '@bpinc/lib-icons'\r\nimport {Avatar} from '@bpinc/lib-ui-elements'\r\n\r\nimport {getFirstAndLastNames} from './utils/helpers'\r\nimport {CaseActivityService} from './CaseActivityService'\r\nimport {ChatContent} from './ChatContent'\r\n\r\n\r\ninterface Props {\r\n    activity: ActivityChatType\r\n}\r\n\r\nexport const ActivityChat: React.FC<Props> = ({activity}) => {\r\n    const {formatFullName} = useFormatting()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const chats = useCaseState('chats')\r\n    const {createdTime, parties, services, globalInteractionId} = activity\r\n    const partyInternal = parties.find(p => p.partyType === 'USER')\r\n    const partyExternal = parties.find(p => p.partyType !== 'USER')\r\n\r\n    const {data = null} = chats[globalInteractionId] || {}\r\n\r\n    if (!data) return null\r\n\r\n    const fullNameInternal = formatFullName(...getFirstAndLastNames(partyInternal))\r\n    const fullNameExternal = formatFullName(...getFirstAndLastNames(partyExternal))\r\n    const date = formatDate(createdTime)\r\n\r\n    const title = [fullNameExternal, 'chatted on', `${date}, handled by`, fullNameInternal].join(' ')\r\n\r\n    const avatar = {\r\n        firstName: get(partyExternal, 'firstName'),\r\n        lastName: get(partyExternal, 'lastName'),\r\n        size: 40,\r\n        url: getAvatarUrl({\r\n            contactId: partyExternal?.contactId,\r\n            notFoundPlaceholder: true,\r\n        }),\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex p-2\">\r\n            <div className=\"mr-2 flex-none\">\r\n                <Avatar\r\n                    size={avatar.size}\r\n                    firstName={avatar.firstName}\r\n                    lastName={avatar.lastName}\r\n                    url={avatar.url}\r\n                />\r\n            </div>\r\n            <div className=\"flex-auto bg-[--c-activity-bg] p-2\">\r\n                <div className=\"flex\">\r\n                    <div className=\"mr-2 h-4 w-4 flex-none self-center [&_svg]:h-full [&_svg]:w-full\">\r\n                        <LegacyIconChat />\r\n                    </div>\r\n                    <div className=\"mr-2 text-gray-500\">\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <ChatContent messages={data.messages} />\r\n                </div>\r\n\r\n                <CaseActivityService party={partyInternal} service={services?.[0]} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/** This is a transformed to TS copy of one we have in the old AD.\r\n * However, here we use our own implementation of the Email regex.\r\n * the old AD uses this regex:\r\n * '[a-zA-Z0-9.!#$%&\\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?' +\r\n * '(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+'\r\n */\r\n\r\nimport {EMAIL_REGEX} from '@bpinc/ad-regexp-constants'\r\n\r\n\r\nexport class EmailAddressValidator {\r\n    private static readonly emailPattern: RegExp = new RegExp(EMAIL_REGEX)\r\n\r\n    static validate(input: string | null | undefined): boolean {\r\n        return input !== null && input !== undefined && this.emailPattern.test(input)\r\n    }\r\n}\r\n\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLink = function SvgLink(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLink);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"768a4584de75be31d108c80afaed59bb.svg\";","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {getCaseURL} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {SemanticButton, Svg} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport iconLink from '../images/link.svg'\r\n\r\n\r\nconst linkIcon = <Svg src={iconLink} className=\"[&_svg]:!h-[15px] [&_svg]:!w-[15px]\" />\r\n\r\ninterface CopyCaseLinkButtonProps {\r\n    caseId: string\r\n}\r\n\r\nexport const CopyCaseLinkButton: FC<CopyCaseLinkButtonProps> = ({caseId}) => {\r\n    const {serverOrigin} = useSessionState()\r\n    const {t} = useLocalizationState()\r\n\r\n    const handleCopy = useCallback(() => {\r\n        clipboard.copy(getCaseURL(serverOrigin, caseId))\r\n    }, [caseId, serverOrigin])\r\n\r\n    return (\r\n        <SemanticButton\r\n            basic\r\n            icon={linkIcon}\r\n            onClick={handleCopy}\r\n            className=\"!h-9 !w-9 [&_svg]:h-full [&_svg]:w-full\"\r\n            tooltip={t.GLOBAL.copy_shareable_link_button_tooltip()}\r\n        />\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {useActiveInteraction} from '@bpinc/ad-interaction-state-context'\r\n\r\nimport {ActiveInteractionCaseFooterContent} from './ActiveInteractionCaseFooterContent'\r\nimport type {CaseProps} from './Case'\r\nimport {Case} from './Case'\r\n\r\n\r\ntype ActiveCaseProps = CaseProps\r\n\r\nexport const ActiveCase: FC<ActiveCaseProps> = props => {\r\n    const item = useActiveInteraction()\r\n\r\n\r\n    if (!item?.emailData?.caseId) {\r\n        return null\r\n    }\r\n\r\n\r\n    return (\r\n        <Case\r\n            {...props}\r\n            interactionId={item.id}\r\n            activeDrafts={item?.emailData?.activeDrafts}\r\n            FooterContent={\r\n                <ActiveInteractionCaseFooterContent\r\n                    caseId={item.emailData.caseId}\r\n                />\r\n            }\r\n        />\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\n\r\nimport type {QueueItem, QueueType} from '@bpinc/ad-request-urls'\r\n\r\n\r\nexport type Pagination = {\r\n    skip: number\r\n    size: number\r\n}\r\n\r\nexport type Sorting = {\r\n    field: string\r\n    direction: 'asc' | 'desc'\r\n}\r\n\r\nexport type User = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\n\r\nexport type CaseTab = QueueTab | ViewCaseTab\r\n\r\ninterface QueueTab extends BaseTab {\r\n    id: 'TEAM' | 'PERSONAL' | 'FOLLOWUP'\r\n    type: 'queue'\r\n    closeable: false\r\n}\r\n\r\nexport interface ViewCaseTab extends BaseTab {\r\n    id: string\r\n    case: {\r\n        id: string\r\n        serviceId: string | undefined\r\n        number: number\r\n    }\r\n    type: 'view_case'\r\n    closeable: true\r\n}\r\n\r\ninterface BaseTab {\r\n    queueType: QueueType\r\n    id: string\r\n    closeable: boolean\r\n}\r\n\r\nconst DEFAULT_SORTING_FIELD = 'updateTime'\r\nconst DEFAULT_SERVICE = 'all'\r\nconst INITIAL_QUEUE_TABLE_WIDTH = 400\r\n\r\nexport const PAGINATION_CHUNK_SIZE = 100\r\n\r\nconst DEFAULT_CASE_TABS: CaseTab[] = [\r\n    {\r\n        id: 'TEAM',\r\n        type: 'queue',\r\n        queueType: 'TEAM',\r\n        closeable: false,\r\n\r\n    },\r\n    {\r\n        id: 'PERSONAL',\r\n        type: 'queue',\r\n        queueType: 'PERSONAL',\r\n        closeable: false,\r\n    },\r\n    {\r\n        id: 'FOLLOWUP',\r\n        queueType: 'FOLLOWUP',\r\n        type: 'queue',\r\n        closeable: false,\r\n    },\r\n]\r\n\r\n//-------All tabs-------//\r\nexport const tabsAtom = atom(DEFAULT_CASE_TABS)\r\nexport const selectedTabIdAtom = atom('TEAM')\r\nexport const selectedTabAtom = atom(get => get(tabsAtom).find(tab => tab.id === get(selectedTabIdAtom)))\r\nexport const queueTableWidthAtom = atom<number>(INITIAL_QUEUE_TABLE_WIDTH)\r\n\r\n//-------Personal tab-------//\r\n//@ts-expect-error - User is always defined in JotaiProvider (self user by default).\r\nexport const personalTabUserAtom = atom<User>()\r\n\r\nexport const personalPaginationAtom = atom<Pagination>({\r\n    skip: 0,\r\n    size: 100,\r\n})\r\n\r\nexport const personalActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\n\r\nexport const personalSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\n//-------Team tab-------//\r\nexport const teamIdAtom = atom<string | undefined>(undefined)\r\nexport const serviceFilterAtom = atom(DEFAULT_SERVICE)\r\nexport const teamActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\nexport const teamSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\nexport const teamPaginationAtom = atom<Pagination>({\r\n    skip: 0,\r\n    size: 100,\r\n})\r\n\r\n\r\n//-------Pinned tab-------//\r\nexport const pinnedActiveQueueItemAtom = atom<QueueItem | undefined>(undefined)\r\nexport const pinnedSortingAtom = atom<Sorting>({\r\n    field: DEFAULT_SORTING_FIELD,\r\n    direction: 'desc',\r\n})\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {personalPaginationAtom, personalSortingAtom} from '../atoms'\r\nimport {Pagination} from '../Pagination'\r\nimport {SortingControls} from '../SortingControls'\r\nimport {useSortingOptions} from './useSortingOptions'\r\n\r\n\r\ninterface TableHeaderContentProps {\r\n    noData: boolean\r\n    actualQueueCount: number\r\n    totalQueueCount: number | undefined\r\n}\r\n\r\nexport const TableHeaderContent: FC<TableHeaderContentProps> = ({\r\n    actualQueueCount,\r\n    totalQueueCount,\r\n    noData,\r\n}) => {\r\n    const sortingOptions = useSortingOptions()\r\n\r\n    if (noData) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between\">\r\n            <SortingControls\r\n                sortingAtom={personalSortingAtom}\r\n                options={sortingOptions}\r\n            />\r\n            <Pagination\r\n                paginationAtom={personalPaginationAtom}\r\n                actualQueueCount={actualQueueCount}\r\n                totalQueueCount={totalQueueCount}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Sla} from './Sla'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useBasicColumns() {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.accessor(row => row.from || t.GLOBAL.heading_unknown(), {\r\n            id: 'from',\r\n            header: () => null,\r\n            /** Setting size and minSize to 0 is a hack to use 'auto' for the width */\r\n            size: 0,\r\n            minSize: 0,\r\n\r\n            cell: info => (\r\n                <>\r\n                    <p className=\"m-0 truncate\">{info.getValue()}</p>\r\n                    <p className=\"m-0 truncate\">{info.row.original.subject}</p>\r\n                </>\r\n            ),\r\n        }),\r\n        columnHelper.accessor('serviceName', {\r\n            id: 'serviceName',\r\n            header: () => null,\r\n            cell: info => <p className=\"m-0\">{info.getValue()}</p>,\r\n            size: 90,\r\n        }),\r\n        columnHelper.accessor(row => row.date && formatDate(row.date), {\r\n            id: 'date',\r\n            header: () => null,\r\n            cell: info => <p className=\"m-0\">{info.getValue()}</p>,\r\n            size: 120,\r\n        }),\r\n        columnHelper.accessor('sla', {\r\n            id: 'sla',\r\n            header: () => null,\r\n            cell: info => <Sla value={info.getValue()} />,\r\n            size: 70,\r\n        }),\r\n    ], [t.GLOBAL])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useBasicColumns} from '../useBasicColumns'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useColumns() {\r\n    const basicColumns = useBasicColumns()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: table.getIsAllRowsSelected(),\r\n                            indeterminate: table.getIsSomeRowsSelected(),\r\n                            onChange: checked =>\r\n                                table.toggleAllPageRowsSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            cell: ({row}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: row.getIsSelected(),\r\n                            disabled: !row.getCanSelect(),\r\n                            indeterminate: row.getIsSomeSelected(),\r\n                            onChange: checked =>\r\n                                row.toggleSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            size: 38,\r\n        }),\r\n        ...basicColumns,\r\n    ], [basicColumns])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {QueueItem} from '@bpinc/ad-request-urls'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useBasicColumns} from '../useBasicColumns'\r\n\r\n\r\nconst columnHelper = createColumnHelper<QueueItem>()\r\n\r\n\r\nexport function useColumns() {\r\n    const basicColumns = useBasicColumns()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: table.getIsAllRowsSelected(),\r\n                            indeterminate: table.getIsSomeRowsSelected(),\r\n                            onChange: checked =>\r\n                                table.toggleAllPageRowsSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            cell: ({row}) => (\r\n                <div className=\"w-9.5 px-2.5 pt-1\">\r\n                    <Checkbox\r\n                        {...{\r\n                            checked: row.getIsSelected(),\r\n                            disabled: !row.getCanSelect(),\r\n                            indeterminate: row.getIsSomeSelected(),\r\n                            onChange: checked =>\r\n                                row.toggleSelected(checked),\r\n                        }}\r\n                    />\r\n                </div>\r\n            ),\r\n            size: 38,\r\n        }),\r\n        ...basicColumns,\r\n    ], [basicColumns])\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {createStore, Provider} from 'jotai'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {FCWithChildren} from '@bpinc/lib-types-helpers'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {personalTabUserAtom} from './atoms'\r\n\r\n\r\nconst store = createStore()\r\n\r\nexport const JotaiProvider: FCWithChildren = ({children}) => {\r\n    const {\r\n        userId: selfUserId,\r\n        firstName: selfFirstName,\r\n        lastName: selfLastName,\r\n    } = useSessionState(['userId', 'firstName', 'lastName'])\r\n    const {formatFullName} = useFormatting()\r\n\r\n    //Use useMemo instead of useEffect, because we want to initialize the store before rendering the children\r\n    useMemo(function initializeStore() {\r\n        assertDefined(selfUserId)\r\n        store.set(personalTabUserAtom, {\r\n            id: selfUserId,\r\n            name: formatFullName(selfFirstName, selfLastName),\r\n        })\r\n    }, [formatFullName, selfFirstName, selfLastName, selfUserId])\r\n\r\n    return <Provider store={store}>{children}</Provider>\r\n}\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nvar SvgLink = function SvgLink(_ref, ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    ref: ref,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\"\n  })));\n};\nvar ForwardRef = /*#__PURE__*/forwardRef(SvgLink);\nexport { ForwardRef as ReactComponent };\nexport default __webpack_public_path__ + \"768a4584de75be31d108c80afaed59bb.svg\";","import type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\n\r\n\r\nexport const MAX_CONTACTS_FOR_MERGE = 3\r\nexport const DEFAULT_SEARCH_TAB: SearchPageTab = {id: 'search', type: 'search', title: '', closeable: false}\r\n\r\nexport type SearchPageTab = ContactTab | CaseTab | SearchTab | CreateContactTab | MergeContactsTab\r\n\r\nexport interface ContactTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'contact'\r\n    props: {\r\n        editMode?: boolean\r\n        onMerge: (() => void) | undefined\r\n        onEditMode?: (edit: boolean) => void\r\n    }\r\n}\r\n\r\ninterface CaseTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'case'\r\n}\r\n\r\ninterface SearchTab {\r\n    id: string\r\n    title: string\r\n    closeable: false\r\n    type: 'search'\r\n}\r\n\r\nexport interface CreateContactTab {\r\n    id: string\r\n    title: string\r\n    closeable: true\r\n    type: 'create_contact'\r\n    props: {\r\n        initialData?: ContactDetailsType\r\n        onContactCreated?: (contactId: string) => void\r\n    }\r\n}\r\n\r\ninterface MergeContactsTab {\r\n    id: string\r\n    title: string\r\n    closeable: false\r\n    type: 'merge_contacts'\r\n}\r\n\r\n","import {atom} from 'jotai'\r\n\r\nimport type {CaseServiceFilter, CasesSortBy, CaseStatus} from '@bpinc/ad-request-urls'\r\n\r\nimport type {SearchPageTab} from './utils'\r\nimport {DEFAULT_SEARCH_TAB} from './utils'\r\n\r\n\r\nexport const searchQueryAtom = atom<string>('')\r\nexport const searchPageTabsAtom = atom<SearchPageTab[]>([DEFAULT_SEARCH_TAB])\r\nexport const searchPageActiveTabIdAtom = atom<string>(DEFAULT_SEARCH_TAB.id)\r\n\r\nexport const selectedContactIdAtom = atom<string | undefined>(undefined)\r\nexport const selectedCaseIdAtom = atom<string | undefined>(undefined)\r\nexport const selectedCaseTabWidthAtom = atom<number>(600)\r\n\r\nexport const casesStatusesAtom = atom<CaseStatus[]>([])\r\nexport const casesSortingAtom = atom<{\r\n    sortBy: CasesSortBy\r\n    asc: boolean\r\n}>({\r\n    sortBy: 'score',\r\n    asc: false,\r\n})\r\nexport const casesServiceAtom = atom<CaseServiceFilter | undefined>(undefined)\r\nexport const casesTeamIdAtom = atom<string | undefined>(undefined)\r\n\r\nexport const mergingContactsAtom = atom<string[]>([])\r\n","import {useCallback} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {searchPageActiveTabIdAtom, searchPageTabsAtom} from './atoms'\r\nimport type {SearchPageTab} from './utils'\r\n\r\n\r\nexport function useSearchPageTabsActions() {\r\n    const [tabs, setTabs] = useAtom(searchPageTabsAtom)\r\n    const [activeTabId, setActiveTabId] = useAtom(searchPageActiveTabIdAtom)\r\n\r\n    const handleTabOpen = useCallback((tab: SearchPageTab) => {\r\n        const targetTab = tabs.find(it => it.id === tab.id)\r\n        if (targetTab) {\r\n            // tab is open. focus it\r\n            setActiveTabId(tab.id)\r\n        } else {\r\n            // open new tab\r\n            setTabs([...tabs, tab])\r\n            setActiveTabId(tab.id)\r\n        }\r\n    }, [setActiveTabId, setTabs, tabs])\r\n\r\n    const handleTabClose = useCallback((id: string) => {\r\n        if (id === activeTabId) setActiveTabId(tabs[0].id)\r\n        setTabs(tabs.filter(tab => tab.id !== id))\r\n    }, [activeTabId, setActiveTabId, setTabs, tabs])\r\n\r\n\r\n    const handleTabUpdate = useCallback((tab: SearchPageTab) => {\r\n        setTabs(currentTabs => currentTabs.map(t => {\r\n            if (t.id === tab.id) {\r\n                return tab\r\n            }\r\n            return t\r\n        }))\r\n    }, [setTabs])\r\n\r\n    return {handleTabOpen, handleTabClose, handleTabUpdate}\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport type {CellContext} from '@tanstack/react-table'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {CasesListItem} from '@bpinc/ad-case-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {Checkbox} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst columnHelper = createColumnHelper<CasesListItem>()\r\n\r\nexport const useCasesTableColumns = () => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.display({\r\n            id: 'select',\r\n            header: ({table}) => (\r\n                <Checkbox\r\n                    checked={table.getIsAllRowsSelected()}\r\n                    indeterminate={table.getIsSomeRowsSelected()}\r\n                    onChange={checked => table.toggleAllPageRowsSelected(checked)}\r\n                />\r\n            ),\r\n            cell: ({row}) => (\r\n                <Checkbox\r\n                    checked={row.getIsSelected()}\r\n                    disabled={!row.getCanSelect()}\r\n                    onChange={checked => row.toggleSelected(checked)}\r\n                />\r\n            ),\r\n            enableHiding: false,\r\n            size: 41,\r\n        }),\r\n        columnHelper.accessor(item => formatFullName(item.reporterFirstName, item.reporterLastName) || t.GLOBAL.unidentified(), {\r\n            id: 'title',\r\n            header: t.CASE_SEARCH.caseSearch_case_column(),\r\n            cell: ({getValue, row}) => {\r\n                const title = row.original.title\r\n                return (\r\n                    <>\r\n                        <p className=\"truncate\" title={getValue()}>{getValue()}</p>\r\n                        {title && <p className=\"truncate\" title={title}>{title}</p>}\r\n                    </>\r\n                )\r\n            },\r\n            enableHiding: false,\r\n            size: 0,\r\n        }),\r\n        columnHelper.accessor('queuedCase.ownerName', {\r\n            id: 'ownerName',\r\n            header: t.EMAIL.search_queue_case_content_location(),\r\n            size: 100,\r\n        }),\r\n        columnHelper.accessor('categoryName', {\r\n            id: 'categoryName',\r\n            header: t.EMAIL.search_queue_case_category(),\r\n            size: 100,\r\n        }),\r\n        columnHelper.accessor('status', {\r\n            id: 'status',\r\n            header: t.EMAIL.case_view_status_label(),\r\n            cell: renderTruncatedValue,\r\n            size: 80,\r\n        }),\r\n        columnHelper.accessor(item => formatDate(item.createdTime), {\r\n            id: 'createdTime',\r\n            header: t.EMAIL.search_queue_case_content_date(),\r\n            size: 110,\r\n        }),\r\n        columnHelper.accessor('queuedCase.sla', {\r\n            id: 'sla',\r\n            header: t.EMAIL.search_queue_case_content_sla(),\r\n            size: 70,\r\n        }),\r\n        columnHelper.accessor('lastService', {\r\n            id: 'lastService',\r\n            header: t.EMAIL.search_queue_case_content_last_service(),\r\n            cell: renderTruncatedValue,\r\n            size: 0,\r\n        }),\r\n        columnHelper.accessor('lastDisposition', {\r\n            id: 'lastDisposition',\r\n            header: t.EMAIL.search_queue_case_content_disposition(),\r\n            cell: renderTruncatedValue,\r\n            size: 80,\r\n        }),\r\n    ], [formatFullName, t.CASE_SEARCH, t.EMAIL])\r\n}\r\n\r\nconst renderTruncatedValue = (context: CellContext<CasesListItem, string>) => {\r\n    return <div className=\"truncate\" title={context.getValue()}>{context.getValue()}</div>\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport type {ContactDetailsType} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMergeContactsActions} from './useMergeContactsActions'\r\nimport {useSearchPageTabsActions} from './useSearchPageTabsActions'\r\nimport type {ContactTab, CreateContactTab} from './utils'\r\n\r\n\r\ninterface OpenContactItem {\r\n    id: string\r\n    firstName: string | undefined\r\n    lastName: string | undefined\r\n}\r\n\r\nexport function useContactsActions() {\r\n    const {t} = useLocalizationState()\r\n    const {handleTabOpen, handleTabClose, handleTabUpdate} = useSearchPageTabsActions()\r\n    const {formatFullName} = useFormatting()\r\n    const {addContactForMerge} = useMergeContactsActions()\r\n\r\n    const handleContactOpen = useCallback((item: OpenContactItem, editMode?: boolean) => {\r\n        const newTab: ContactTab = {\r\n            id: item.id,\r\n            type: 'contact',\r\n            title: formatFullName(item.firstName, item.lastName),\r\n            props: {\r\n                editMode,\r\n                onMerge: addContactForMerge ? () => addContactForMerge(item.id) : undefined,\r\n                onEditMode: edit => handleTabUpdate({...newTab, props: {...newTab.props, editMode: edit}}),\r\n            },\r\n            closeable: true,\r\n        }\r\n\r\n        handleTabOpen(newTab)\r\n    }, [addContactForMerge, formatFullName, handleTabOpen, handleTabUpdate])\r\n\r\n    const handleContactCreate = useCallback((\r\n        title?: string,\r\n        initialData?: ContactDetailsType,\r\n        onContactCreated?: (contactId: string) => void,\r\n    ) => {\r\n        const newTab: CreateContactTab = {\r\n            id: 'create',\r\n            type: 'create_contact',\r\n            title: title || t.GLOBAL.anonymous(),\r\n            closeable: true,\r\n            props: {\r\n                initialData,\r\n                onContactCreated,\r\n            },\r\n        }\r\n        handleTabOpen(newTab)\r\n    }, [t, handleTabOpen])\r\n\r\n    const handleContactCreateCancel = useCallback(() => {\r\n        handleTabClose('create')\r\n    }, [handleTabClose])\r\n\r\n    return {handleContactCreate, handleContactOpen, handleContactCreateCancel}\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {mergingContactsAtom} from './atoms'\r\nimport {useSearchPageTabsActions} from './useSearchPageTabsActions'\r\nimport {MAX_CONTACTS_FOR_MERGE} from './utils'\r\n\r\n\r\nexport function useMergeContactsActions() {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const [mergingContacts, setMergingContacts] = useAtom(mergingContactsAtom)\r\n    const {handleTabOpen, handleTabClose} = useSearchPageTabsActions()\r\n    const canAddContactForMerge = MAX_CONTACTS_FOR_MERGE > mergingContacts.length && privileges.EDIT_CONTACTS && privileges.DELETE_CONTACTS\r\n\r\n    const addContactForMerge = useCallback((contactId: string) => {\r\n        setMergingContacts(contacts => {\r\n            return Array.from(new Set([...contacts, contactId]))\r\n        })\r\n        handleTabOpen({\r\n            id: 'merge',\r\n            type: 'merge_contacts',\r\n            title: t.GLOBAL.merge(),\r\n            closeable: false,\r\n        })\r\n    }, [handleTabOpen, setMergingContacts, t.GLOBAL])\r\n\r\n    const removeContactFromMerge = useCallback((contactId: string) => {\r\n        const contacts = mergingContacts.filter(id => id !== contactId)\r\n        setMergingContacts(contacts)\r\n        if (!contacts.length) {\r\n            handleTabClose('merge')\r\n        }\r\n    }, [handleTabClose, mergingContacts, setMergingContacts])\r\n\r\n    const closeContactsMerge = useCallback(() => {\r\n        setMergingContacts([])\r\n        handleTabClose('merge')\r\n    }, [handleTabClose, mergingContacts, setMergingContacts])\r\n\r\n    return {\r\n        addContactForMerge: canAddContactForMerge ? addContactForMerge : undefined,\r\n        removeContactFromMerge,\r\n        canAddContactForMerge,\r\n        closeContactsMerge,\r\n    }\r\n}\r\n","import {useMemo} from 'react'\r\nimport type {Column} from '@tanstack/react-table'\r\nimport {createColumnHelper} from '@tanstack/react-table'\r\n\r\nimport type {ContactShortType} from '@bpinc/ad-contacts-state-types'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst columnHelper = createColumnHelper<ContactShortType>()\r\n\r\nexport const useContactTableColumns = () => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return useMemo(() => [\r\n        columnHelper.accessor('firstName', {\r\n            id: 'firstName',\r\n            header: () => t.UNDEFINED.contact_first_name(),\r\n            meta: {\r\n                width: '20%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('lastName', {\r\n            id: 'lastName',\r\n            header: () => t.UNDEFINED.contact_last_name(),\r\n            meta: {\r\n                width: '20%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('phone', {\r\n            id: 'phone',\r\n            header: () => t.UNDEFINED.contact_phone(),\r\n            meta: {\r\n                width: '10%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('email', {\r\n            id: 'email',\r\n            header: () => t.UNDEFINED.contact_email(),\r\n            meta: {\r\n                width: '50%',\r\n            },\r\n        }),\r\n        columnHelper.accessor('source', {\r\n            id: 'source',\r\n            header: () => t.UNDEFINED.column_type(),\r\n            meta: {\r\n                width: '100px',\r\n            },\r\n        }),\r\n    ], [t.UNDEFINED])\r\n}\r\n\r\nexport function getContactTableColumnWidth(column: Column<ContactShortType>) {\r\n    return (column.columnDef.meta && 'width' in column.columnDef.meta) ? column.columnDef.meta.width as string : 'auto'\r\n}\r\n\r\n","import {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {useOpenAddEmailModal, useOpenAddPhoneModal} from '@bpinc/lib-contact-details/src/components/modals'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function useUpdateContactWithRecentChannel() {\r\n    const openAddEmailModal = useOpenAddEmailModal()\r\n    const openAddPhoneModal = useOpenAddPhoneModal()\r\n\r\n    const {getContact} = useContactsStateMethods()\r\n\r\n    return useEvent(async (contactId: string, recentItem: RecentItem): Promise<void> => {\r\n        const contact = await getContact({id: contactId})\r\n\r\n        if (!contact) {\r\n            return Promise.reject()\r\n        }\r\n\r\n        const {number, email} = recentItem\r\n\r\n        if (!contact.emails.find(item => item.emailAddress === email)) {\r\n            return new Promise(resolve => {\r\n                openAddEmailModal({\r\n                    email,\r\n                    contactId,\r\n                    firstName: contact.firstName,\r\n                    lastName: contact.lastName,\r\n                    onConfirm: resolve,\r\n                })\r\n            })\r\n        }\r\n        if (!contact.phones?.find(item => item.phone === number)) {\r\n            return new Promise(resolve => {\r\n                openAddPhoneModal({\r\n                    phone: number,\r\n                    contactId,\r\n                    firstName: contact.firstName,\r\n                    lastName: contact.lastName,\r\n                    onConfirm: resolve,\r\n                })\r\n            })\r\n        }\r\n        // TODO: handle messengers\r\n    })\r\n}\r\n","import React from 'react'\r\nimport {tw} from '@servicepattern/ui'\r\n\r\nimport {AddToExistingModal, QuickAddModal} from '@bpinc/ad-contact-modals'\r\nimport {useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport {type ContactShortType, EmailTypes, PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useContactsActions} from '@bpinc/ad-searchpage-ui'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport type {MoreOption} from '@bpinc/lib-jskit-ui'\r\nimport {MoreOptions} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\nimport {useRecentStateMethods} from '@bpinc/state-recent-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport {recentToNewContact} from './recentToNewContact'\r\nimport {useUpdateContactWithRecentChannel} from './useUpdateContactWithRecentChannel'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    closeHovercard: () => void\r\n}\r\n\r\nexport const CreateContactOptionsButton: React.FC<Props> = ({item, closeHovercard}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n    const {formatFullName} = useFormatting()\r\n    const goTo = useNavigationState('goTo')\r\n    const {linkWithContact} = useRecentStateMethods()\r\n    const {createContact} = useContactsStateMethods()\r\n\r\n    const {handleContactCreate, handleContactOpen} = useContactsActions()\r\n    const updateContactWithRecentChannel = useUpdateContactWithRecentChannel()\r\n    // TODO: Standalone Comm.Widget must handle these action differently. Not using fullscreen AD modals\r\n    const openQuickAddModal = useModalComponentOpener(QuickAddModal)\r\n    const openAddToExistingModal = useModalComponentOpener(AddToExistingModal)\r\n\r\n\r\n    const addNewContact = useEvent(() => {\r\n        handleContactCreate(\r\n            formatFullName(item.firstName, item.lastName),\r\n            recentToNewContact(item),\r\n            contactId => {\r\n                linkWithContact(item.itemId, contactId)\r\n            },\r\n        )\r\n    })\r\n\r\n    async function handleAddToExisting(selectedContact: ContactShortType) {\r\n        await updateContactWithRecentChannel(selectedContact.id, item)\r\n        return closeHovercard()\r\n    }\r\n\r\n    function handleAddNewContact() {\r\n        addNewContact()\r\n        closeHovercard()\r\n        return Promise.resolve()\r\n    }\r\n\r\n    function handleQuickAdd() {\r\n        openQuickAddModal({\r\n            defaultValues: {\r\n                firstName: item.firstName,\r\n                lastName: item.lastName,\r\n                email: item.email,\r\n                phone: item.number,\r\n            },\r\n            onSubmit: contact => {\r\n                createContact(\r\n                    {\r\n                        contact: {\r\n                            first_name: contact.firstName,\r\n                            last_name: contact.lastName,\r\n                            emails: contact.email\r\n                                ? [{email_address: contact.email, type: EmailTypes.PRIMARY}]\r\n                                : [],\r\n                            phones: contact.phone\r\n                                ? [{phone: contact.phone, type: PhoneTypes.BUSINESS}]\r\n                                : [],\r\n                        },\r\n                    },\r\n                    {\r\n                        onSuccess(contactId: string) {\r\n                            linkWithContact(item.itemId, contactId)\r\n                            goTo(AppRoutes.search)\r\n                            handleContactOpen({\r\n                                id: contactId,\r\n                                firstName: contact.firstName,\r\n                                lastName: contact.lastName,\r\n                            })\r\n                        },\r\n                    },\r\n                )\r\n            },\r\n        })\r\n        closeHovercard()\r\n    }\r\n\r\n    function onAddToExistingContactClick() {\r\n        openAddToExistingModal({\r\n            handleAddNewContact,\r\n            handleAddToExisting,\r\n        })\r\n        closeHovercard()\r\n    }\r\n\r\n\r\n    const contactOptions = [\r\n        {\r\n            key: 'quick-add',\r\n            content: t.INTERACTIONS.quick_add(),\r\n            onSelect: handleQuickAdd,\r\n            className: tw`min-w-40`,\r\n        },\r\n        {\r\n            key: 'new-contact',\r\n            content: t.INTERACTIONS.new_contact(),\r\n            onSelect: handleAddNewContact,\r\n            className: tw`min-w-40`,\r\n        },\r\n        {\r\n            key: 'add-to-existing',\r\n            content: t.INTERACTIONS.add_to_existing(),\r\n            onSelect: onAddToExistingContactClick,\r\n            className: tw`min-w-40`,\r\n        },\r\n    ] satisfies MoreOption[]\r\n\r\n    return (\r\n        <MoreOptions\r\n            size=\"xs\"\r\n            className=\"size-7\"\r\n            buttonProps={{variant: 'neutral'}}\r\n            options={contactOptions}\r\n        />\r\n    )\r\n}\r\n","import {EmailTypes, PhoneTypes} from '@bpinc/ad-contacts-state-types'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function recentToNewContact(item: RecentItem) {\r\n    return {\r\n        ['Contact.first_name']: item.firstName,\r\n        ['Contact.last_name']: item.lastName,\r\n        ['Contact.phones']: item.number\r\n            ? [{phone: item.number, type: PhoneTypes.BUSINESS}]\r\n            : [],\r\n        ['Contact.emails']: item.email\r\n            ? [{email_address: item.email, type: EmailTypes.PRIMARY}]\r\n            : [],\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {IconEmailEnvelope16, IconPhone16, IconRoundChat16} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../../directory/components/user/types'\r\nimport {CreateContactOptionsButton} from './CreateContactOptionsButton'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    closeHovercard: () => void\r\n    onCallClick: (callParams: HandleCallParams) => void\r\n    onChatClick: (chatParams: ChatParams) => void\r\n    onEmailClick: (emailParams: OnEmailParams) => void\r\n}\r\n\r\nexport const UnidentifiedContactContent: React.FC<Props> = ({\r\n    item,\r\n    closeHovercard,\r\n    onCallClick,\r\n    onChatClick,\r\n    onEmailClick,\r\n}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n    const phoneDeviceCapabilities = useSessionState('phoneDeviceCapabilities')\r\n    const {formatFullName} = useFormatting()\r\n    const isCommunicator = useIsCommunicator()\r\n\r\n    const formattedPhone = item.number && formatPhone(item.number)\r\n    const fullName = formatFullName(item.firstName, item.lastName)\r\n    const displayName = fullName || item.name || formattedPhone || t.GLOBAL.anonymous()\r\n\r\n    const showCallButton = !!item.number && item.number !== '-' && phoneDeviceCapabilities.canDial\r\n    const showChatButton = !!item.number\r\n    const showEmailButton = !isCommunicator && !!item.email\r\n\r\n    const handleCall = useEvent(() => {\r\n        assertDefined(item.number)\r\n        onCallClick({\r\n            phone: item.number,\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent(() => {\r\n        assertDefined(item.number)\r\n        onChatClick({\r\n            phone: item.number,\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent(() => {\r\n        assertDefined(item.email)\r\n        onEmailClick({emailAddress: item.email})\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex items-start gap-1 px-2 py-1.5\">\r\n                <div className=\"truncate font-semibold body text-primary-action\">\r\n                    {displayName}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex flex-auto gap-2 px-2 pb-2\">\r\n                {showCallButton && (\r\n                    <Button\r\n                        size=\"sm\"\r\n                        variant=\"neutral\"\r\n                        className=\"h-7 flex-auto\"\r\n                        tooltip={t.CONTACT.button_start_call_text()}\r\n                        iconLeft={<IconPhone16 className=\"svg-color-current\" />}\r\n                        onPressed={handleCall}\r\n                    />\r\n                )}\r\n                {showChatButton && (\r\n                    <Button\r\n                        size=\"sm\"\r\n                        variant=\"neutral\"\r\n                        className=\"h-7 flex-auto\"\r\n                        tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                        iconLeft={<IconRoundChat16 className=\"svg-color-current\" />}\r\n                        onPressed={handleChat}\r\n                    />\r\n                )}\r\n                {showEmailButton && (\r\n                    <Button\r\n                        size=\"sm\"\r\n                        variant=\"neutral\"\r\n                        className=\"h-7 flex-auto\"\r\n                        tooltip={t.CONTACT.button_send_email_text()}\r\n                        iconLeft={<IconEmailEnvelope16 className=\"svg-color-current\" />}\r\n                        onPressed={handleEmail}\r\n                    />\r\n                )}\r\n                <CreateContactOptionsButton item={item} closeHovercard={closeHovercard} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import type {FC, PropsWithChildren} from 'react'\r\nimport React, {useEffect} from 'react'\r\nimport * as HoverCard from '@radix-ui/react-hover-card'\r\nimport {AnimatePresence, motion} from 'framer-motion'\r\n\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {stopPropagation, useBoolean, useEvent} from '@bpinc/lib-helpers'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../../directory/components/user/types'\r\nimport {IdentifiedContactContent} from './IdentifiedContactContent'\r\nimport {UnidentifiedContactContent} from './UnidentifiedContactContent'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    onCallClick: (callParams: HandleCallParams) => void\r\n    onChatClick: (chatParams: ChatParams) => void\r\n    onEmailClick: (emailParams: OnEmailParams) => void\r\n}\r\n\r\nexport const WithRecentContactCard: FC<PropsWithChildren<Props>> = ({\r\n    item,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n\r\n    const {floatingState} = useCommunicatorUIState()\r\n\r\n    const hovercardOpened = useBoolean()\r\n    const hovercardClosing = useBoolean()\r\n\r\n    useEffect(() => {\r\n        if (floatingState === 'closed') {\r\n            hovercardOpened.setFalse()\r\n            hovercardClosing.setFalse()\r\n        }\r\n    }, [floatingState, hovercardOpened, hovercardClosing])\r\n\r\n    const keyDownHandler = useEvent((e: React.KeyboardEvent) => {\r\n        if (e.key === 'Escape') {\r\n            e.stopPropagation()\r\n            hovercardOpened.setFalse()\r\n        }\r\n    })\r\n\r\n    const setHovercardState = useEvent((open: boolean) => {\r\n        if (open) {\r\n            hovercardOpened.setTrue()\r\n        } else {\r\n            hovercardClosing.setTrue()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <HoverCard.Root\r\n            open={hovercardOpened.value}\r\n            onOpenChange={setHovercardState}\r\n        >\r\n            <HoverCard.Trigger asChild>\r\n                {children}\r\n            </HoverCard.Trigger>\r\n            <HoverCard.Portal>\r\n                <AnimatePresence\r\n                    onExitComplete={() => {\r\n                        hovercardOpened.setFalse()\r\n                        hovercardClosing.setFalse()\r\n                    }}\r\n                >\r\n                    {!hovercardClosing.value && (\r\n                        <HoverCard.Content\r\n                            asChild\r\n                            onKeyDown={keyDownHandler}\r\n                            onClick={stopPropagation}\r\n                            onDoubleClick={stopPropagation}\r\n                            avoidCollisions\r\n                            align=\"start\"\r\n                            style={{transform: `translate(10px, 10px)`}}\r\n                            tabIndex={0}\r\n                            className=\"flex w-60 flex-col border shadow-4 bg-primary-background border-default\"\r\n                        >\r\n                            <motion.div\r\n                                initial={{opacity: 0}}\r\n                                animate={{opacity: 1}}\r\n                                exit={{opacity: 0}}\r\n                                transition={{duration: 0.15, ease: 'easeOut'}}\r\n                            >\r\n                                {item.contactId\r\n                                    ? (\r\n                                        <IdentifiedContactContent\r\n                                            contactId={item.contactId}\r\n                                            {...restProps}\r\n                                        />\r\n                                    )\r\n                                    : (\r\n                                        <UnidentifiedContactContent\r\n                                            item={item}\r\n                                            closeHovercard={hovercardOpened.setFalse}\r\n                                            {...restProps}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </motion.div>\r\n                        </HoverCard.Content>\r\n                    )}\r\n                </AnimatePresence>\r\n            </HoverCard.Portal>\r\n        </HoverCard.Root>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useDirectoryState} from '@bpinc/ad-directory-state-context'\r\nimport {MS_TEAMS_CHATS_CATEGORY_ID} from '@bpinc/ad-directory-state-types'\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {isRecentCallConference, isRecentExtChatConference, isRecentGroupChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../directory/components/user/types'\r\nimport {useAvatar} from '../hooks/useAvatar'\r\nimport {WithRecentContactCard} from './contact-card/WithRecentContactCard'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    onCallClick: (callParams: HandleCallParams) => void\r\n    onChatClick: (chatParams: ChatParams) => void\r\n    onEmailClick: (emailParams: OnEmailParams) => void\r\n}\r\n\r\nexport const RecentItemAvatar: React.FC<Props> = ({item, ...restProps}) => {\r\n\r\n    const emiUsers = useDirectoryState('emiUsers')\r\n    const relatedEMIUser = emiUsers[MS_TEAMS_CHATS_CATEGORY_ID]?.find(user => user.userId === item.userId)\r\n\r\n    const avatarProps = useAvatar(item, relatedEMIUser)\r\n\r\n    const avatar = (\r\n        <Avatar\r\n            firstName={avatarProps.firstName}\r\n            lastName={avatarProps.lastName}\r\n            fullName={avatarProps.fullName}\r\n            url={avatarProps.url}\r\n            icon={avatarProps.icon}\r\n            online={avatarProps.isOnline}\r\n            onlineStatus={avatarProps.onlineStatusIcon}\r\n            headPhones={avatarProps.isAgent}\r\n            type={avatarProps.avatarType}\r\n        />\r\n    )\r\n\r\n    /** show contact card only for 1) identified external contacts 2) not identified contacts */\r\n    if (\r\n        (item.contactId || !item.userId) &&\r\n        !isRecentCallConference(item) &&\r\n        !isRecentExtChatConference(item) &&\r\n        !isRecentGroupChat(item)\r\n    ) {\r\n        return (\r\n            <WithRecentContactCard item={item} {...restProps}>\r\n                {avatar}\r\n            </WithRecentContactCard>\r\n        )\r\n    }\r\n\r\n    return avatar\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useDirectoryUser} from '@bpinc/ad-directory-state-context'\r\nimport type {MsTeamsUser} from '@bpinc/ad-directory-state-types'\r\nimport {\r\n    isRecentCallConference,\r\n    isRecentEmail,\r\n    isRecentExtChatConference,\r\n    isRecentGroupChat,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionStateRef} from '@bpinc/ad-session-context'\r\nimport {getUserStatusIcon, useUserDetailsById} from '@bpinc/ad-user-details-state-context'\r\nimport {getAvatarType} from '@bpinc/lib-avatar-ui'\r\nimport {getGroupChatAvatar} from '@bpinc/lib-chat-ui/src/helpers'\r\nimport type {PropsAvatar} from '@bpinc/lib-contact-list-item-ui'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function useAvatar(item: RecentItem, relatedEMIUser?: MsTeamsUser) {\r\n    const sessionRef = useSessionStateRef()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    const userId = getUserId() || ''\r\n\r\n    useDirectoryUser(userId)\r\n    const userDetails = useUserDetailsById(userId)?.data\r\n\r\n    return useMemo(() => {\r\n        let avatar: PropsAvatar\r\n        if (isRecentCallConference(item) || isRecentExtChatConference(item)) {\r\n            avatar = {\r\n                avatarType: 'conference',\r\n                isAgent: isRecentGroupChat(item),\r\n            }\r\n        } else if (isRecentEmail(item)) {\r\n            avatar = {\r\n                avatarType: 'case',\r\n            }\r\n        } else if (item.groupChatData) {\r\n            avatar = getGroupChatAvatar({\r\n                chatData: item.groupChatData,\r\n                p2pUser: userDetails,\r\n                session: sessionRef.current,\r\n            })\r\n        } else {\r\n            avatar = {\r\n                avatarType: getAvatarType(item.userId, item.contactId, item.userType),\r\n                firstName: item.firstName || item.name,\r\n                lastName: item.lastName,\r\n                isAgent: !!item.userType || !!item.userId,\r\n                url: getAvatarUrl({\r\n                    userId: item.userId,\r\n                    contactId: item.contactId,\r\n                    userType: item.userType,\r\n                    photoUrl: item.photoUrl,\r\n                }),\r\n            }\r\n        }\r\n        if (userDetails) {\r\n            avatar.isOnline = userDetails.presenceState === 'available'\r\n            avatar.onlineStatusIcon = getUserStatusIcon(userDetails)\r\n        }\r\n        return avatar\r\n    }, [getAvatarUrl, item, userDetails, sessionRef])\r\n\r\n    function getUserId(): string | undefined {\r\n        if (item.userType === 'msteams' || item.userType === 'msteams_channel') {\r\n            return relatedEMIUser?.userId\r\n        }\r\n        if (item.groupChatData && item.groupChatData.members.length <= 2) {\r\n            const selfUserId = sessionRef.current.userId\r\n            return item.groupChatData.members.find(m => m.id !== selfUserId)?.id\r\n        }\r\n        return item.userId\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {tw} from '@servicepattern/ui'\r\nimport {tv} from 'tailwind-variants'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {\r\n    isRecentCall,\r\n    isRecentCallConference,\r\n    isRecentEmail,\r\n    isRecentExtChatConference,\r\n    isRecentExternalChat,\r\n    isRecentGroupChat,\r\n    isRecentInternalChat,\r\n    isRecentWorkitem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {cutMilliseconds, formatDurationShort} from '@bpinc/lib-helpers'\r\nimport {formatHTMLAsOneLineString} from '@bpinc/lib-html-utils'\r\nimport {\r\n    IconConferenceCall16,\r\n    IconConferenceChat16,\r\n    IconEmail16,\r\n    IconInternalChat16,\r\n    IconOutboundCall16,\r\n    IconOutboundPreview16,\r\n    IconPhone16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {getChannelImageIcon} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useConfPartiesToString, useGroupChatMembersToString} from '@bpinc/state-recent-helpers'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n}\r\n\r\nconst rootStyles = 'flex items-center overflow-hidden'\r\nconst iconStyles = tv({\r\n    base: tw`shrink-0`,\r\n    variants: {\r\n        isMissed: {\r\n            true: tw`icon-error`,\r\n            false: tw`icon-neutral`,\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        isMissed: false,\r\n    },\r\n})\r\nconst textStyles = tv({\r\n    base: tw`ml-1 truncate caption-s`,\r\n    variants: {\r\n        isMissed: {\r\n            true: tw`text-on-error`,\r\n            false: tw`text-neutral-on-secondary`,\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        isMissed: false,\r\n    },\r\n})\r\n\r\nexport const RecentItemBody: React.FC<Props> = ({item}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n    const partiesToString = useConfPartiesToString()\r\n    const groupChatMembersToString = useGroupChatMembersToString()\r\n\r\n    const durationBlock = !!Number(item.duration) && (\r\n        <span data-testid=\"duration\">\r\n            {`(${formatDurationShort(cutMilliseconds(item.duration))})`}\r\n        </span>\r\n    )\r\n\r\n    if (isRecentCallConference(item)) {\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconConferenceCall16 className={iconStyles()} />\r\n                <div className={textStyles()}>\r\n                    {durationBlock}\r\n                    {' '}\r\n                    <span data-testid=\"parties\">\r\n                        {partiesToString(item.parties)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentExtChatConference(item)) {\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconConferenceChat16 className={iconStyles()} />\r\n                <div className={textStyles()}>\r\n                    {durationBlock}\r\n                    {' '}\r\n                    <span data-testid=\"parties\">\r\n                        {partiesToString(item.parties)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentGroupChat(item)) {\r\n        assertDefined(item.groupChatData)\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconConferenceChat16 className={iconStyles()} />\r\n                <div className={textStyles()}>\r\n                    {durationBlock}\r\n                    {' '}\r\n                    <span data-testid=\"parties\">\r\n                        {groupChatMembersToString(item.groupChatData.members)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentInternalChat(item)) {\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconInternalChat16 className={iconStyles()} />\r\n                <div className={textStyles()}>\r\n                    {durationBlock}\r\n                    {' '}\r\n                    <span data-testid=\"last-message-author\">\r\n                        {item.lastMessageAuthor}\r\n                    </span>\r\n                    <span>{': '}</span>\r\n                    <span data-testid=\"last-message\">\r\n                        {item.lastMessage}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentExternalChat(item)) {\r\n        const isMissed = !item.userId && item.direction === 'INBOUND' && item.duration === '0'\r\n        const ChannelIcon = getChannelImageIcon(item.channel)\r\n\r\n        const text = isMissed\r\n            ? t.ACTIVITY_HISTORY.call_message_missed()\r\n            : item.direction === 'INBOUND'\r\n                ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n                : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n        const getLastMessage = () => {\r\n            if (item.lastMessage === 'external_chat_party_joined_new') {\r\n                return t.EXTERNAL_CHAT.external_chat_party_joined_new()\r\n            }\r\n            if (item.lastMessage === 'external_chat_party_left_new') {\r\n                return t.EXTERNAL_CHAT.external_chat_party_left_new()\r\n            }\r\n            return formatHTMLAsOneLineString(item.lastMessage)\r\n        }\r\n        const lastMessage = getLastMessage()\r\n\r\n        return (\r\n            <div className={rootStyles}>\r\n                {ChannelIcon && <ChannelIcon className={iconStyles({isMissed})} />}\r\n                <div className={textStyles({isMissed})}>\r\n                    <span>{text}</span>\r\n                    {' '}\r\n                    {durationBlock}\r\n                    {!isMissed && lastMessage && (\r\n                        <>\r\n                            {': '}\r\n                            <span data-testid=\"last-message\">\r\n                                {lastMessage}\r\n                            </span>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentCall(item)) {\r\n        const isMissed = item.direction === 'INBOUND' && item.duration === '0'\r\n        const IconComponent = item.direction === 'INBOUND' ? IconPhone16Filled : IconOutboundCall16\r\n\r\n        const text = isMissed\r\n            ? t.ACTIVITY_HISTORY.call_message_missed()\r\n            : item.direction === 'INBOUND'\r\n                ? t.ACTIVITY_HISTORY.call_message_incoming_text()\r\n                : t.ACTIVITY_HISTORY.call_message_outgoing_text()\r\n\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconComponent className={iconStyles({isMissed})} />\r\n                <div className={textStyles({isMissed})}>\r\n                    <span>{text}</span>\r\n                    {' '}\r\n                    {durationBlock}\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    } else if (isRecentEmail(item)) {\r\n        if (item.caseTitle) {\r\n            return (\r\n                <div className={rootStyles}>\r\n                    <IconEmail16 className={iconStyles()} />\r\n                    <div className={textStyles()}>\r\n                        <span data-testid=\"case-title\">\r\n                            {item.caseTitle}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    } else if (isRecentWorkitem(item)) {\r\n        const formattedPhone = item.number && formatPhone(item.number)\r\n\r\n        return (\r\n            <div className={rootStyles}>\r\n                <IconOutboundPreview16 className={iconStyles()} />\r\n                <div className={textStyles()}>\r\n                    <span data-testid=\"phone\">\r\n                        {formattedPhone}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {ChatUser} from '@bpinc/state-group-chat-types'\r\n\r\n\r\nexport function useGroupChatMembersToString() {\r\n    const {formatFullName} = useFormatting()\r\n\r\n    return useCallback((members: ChatUser[]) => {\r\n        return members\r\n            .map(member => formatFullName(member.firstName, member.lastName))\r\n            .join(', ')\r\n    }, [formatFullName])\r\n}\r\n","import React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {isRecentCallConference, isRecentEmail, isRecentExtChatConference} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {\r\n    ButtonIcon,\r\n    IconEmail16,\r\n    IconInformation,\r\n    IconPhone16Filled,\r\n    IconRoundChat16Filled,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {ChatParams} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../directory/components/user/types'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    transferMode?: 'messages' | 'calls'\r\n    crmObjectsListOpened: boolean\r\n    onCall: (callParams: InitiateCall) => void\r\n    onChat: (chatParams: ChatParams) => void\r\n    onEmail: (emailParams: OnEmailParams) => void\r\n    onDetails: (item: RecentItem) => void\r\n    toggleShowCrmObjectsList: () => void\r\n}\r\n\r\nexport const RecentItemControls: React.FC<Props> = ({\r\n    item,\r\n    transferMode,\r\n    crmObjectsListOpened,\r\n    onCall,\r\n    onChat,\r\n    onEmail,\r\n    onDetails,\r\n    toggleShowCrmObjectsList,\r\n}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n    const {\r\n        userId: selfUserId,\r\n        phoneDeviceCapabilities,\r\n    } = useSessionState(['userId', 'phoneDeviceCapabilities'])\r\n\r\n    const isCommunicator = useIsCommunicator()\r\n\r\n    const isSelf = item.userId === selfUserId\r\n    const cleanNumber = item.number?.startsWith('+') ? item.number.substring(1) : item.number\r\n\r\n    const showCallButton =\r\n        transferMode !== 'calls' &&\r\n        !!phoneDeviceCapabilities.canDial &&\r\n        !isRecentCallConference(item) &&\r\n        !isRecentExtChatConference(item) &&\r\n        !!cleanNumber &&\r\n        !isSelf\r\n\r\n    const showChatButton =\r\n        transferMode !== 'messages' &&\r\n        !isRecentCallConference(item) &&\r\n        !isRecentExtChatConference(item) &&\r\n        (\r\n            !!item.contactId ||\r\n            (!!item.userId && !isRecentEmail(item)) ||\r\n            !!cleanNumber ||\r\n            !!item.groupChatData\r\n        )\r\n\r\n    const showEmailButton = !isCommunicator && isRecentEmail(item) && !!item.email\r\n    const showDetailsButton = !!item.userId || !!item.contactId\r\n\r\n\r\n    const handleCall = useEvent(() => {\r\n        assertDefined(onCall)\r\n        assertDefined(cleanNumber)\r\n        onCall({\r\n            phone: cleanNumber,\r\n            contactId: item.contactId,\r\n            userId: item.userId,\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n            serviceId: item.serviceId,\r\n        })\r\n    })\r\n\r\n    const handleChat = useEvent(() => {\r\n        assertDefined(onChat)\r\n        onChat({\r\n            phone: cleanNumber,\r\n            contactId: item.contactId,\r\n            userId: item.userId,\r\n            firstName: item.firstName,\r\n            lastName: item.lastName,\r\n            serviceId: item.serviceId,\r\n            groupChatId: item.groupChatData?.chatId,\r\n        })\r\n    })\r\n\r\n    const handleEmail = useEvent(() => {\r\n        assertDefined(onEmail)\r\n        assertDefined(item.email)\r\n        onEmail({\r\n            contactId: item.contactId,\r\n            emailAddress: item.email,\r\n        })\r\n    })\r\n\r\n    const handleDetails = useEvent(() => onDetails(item))\r\n\r\n    const handleCrmObjectsClick = useEvent((e: React.MouseEvent) => {\r\n        e.stopPropagation()\r\n        toggleShowCrmObjectsList()\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {!!item.associatedCRMObjects?.length && (\r\n                <Button\r\n                    data-testid=\"crm-objects-button\"\r\n                    size=\"xs\"\r\n                    variant={crmObjectsListOpened ? 'secondary' : 'neutral'}\r\n                    tooltip={t.RECENT.button_show_crm_objects_text()}\r\n                    className=\"h-6 items-center pt-1\"\r\n                    onClick={handleCrmObjectsClick}\r\n                >\r\n                    {t.RECENT.button_show_crm_objects_text_short()}\r\n                </Button>\r\n            )}\r\n\r\n            {showCallButton && (\r\n                <ButtonIcon\r\n                    data-testid=\"call-button\"\r\n                    tooltip={t.CONTACT.button_start_call_text()}\r\n                    onClick={handleCall}\r\n                >\r\n                    <IconPhone16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            {showChatButton && (\r\n                <ButtonIcon\r\n                    data-testid=\"chat-button\"\r\n                    tooltip={t.CONTACT.button_initiate_chat_text()}\r\n                    onClick={handleChat}\r\n                >\r\n                    <IconRoundChat16Filled />\r\n                </ButtonIcon>\r\n            )}\r\n            {showEmailButton && (\r\n                <ButtonIcon\r\n                    data-testid=\"email-button\"\r\n                    tooltip={t.CONTACT.button_send_email_text()}\r\n                    onClick={handleEmail}\r\n                >\r\n                    <IconEmail16 />\r\n                </ButtonIcon>\r\n            )}\r\n            {showDetailsButton && (\r\n                <ButtonIcon\r\n                    data-testid=\"user-info-button\"\r\n                    tooltip={t.CONTACT.button_show_contact_details_text()}\r\n                    onPressed={handleDetails}\r\n                >\r\n                    <IconInformation />\r\n                </ButtonIcon>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {\r\n    isRecentCall as isCall,\r\n    isRecentCallConference as isCallConference,\r\n    isRecentChat as isChat,\r\n    isRecentEmail as isEmail,\r\n    isRecentExtChatConference as isChatConference,\r\n    isRecentGroupChat as isGroupChat,\r\n    isRecentWorkitem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {RecentFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n    repeatCount?: number\r\n}\r\n\r\nexport const RecentItemTitle: React.FC<Props> = ({item, repeatCount}) => {\r\n\r\n    const t = useLocalizationState('t')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const subTitleClassName = tcn('caption-s text-neutral-on-secondary')\r\n    const titleClassName = tcn('font-semibold body text-primary-on-primary')\r\n\r\n    const {data: contactData} = useContact(item.contactId) ?? {}\r\n\r\n    const formattedPhone = item.number && formatPhone(item.number)\r\n    const contactName = formatFullName(contactData?.firstName, contactData?.lastName)\r\n    const displayName =\r\n        contactName ||\r\n        formatFullName(item.firstName, item.lastName) ||\r\n        item.name ||\r\n        formattedPhone ||\r\n        t.GLOBAL.anonymous()\r\n\r\n    let innerTitle\r\n\r\n    const addRepeatCount = (text: string | undefined, count?: number): string | undefined => {\r\n        return text && repeatCount ? `${text} (${count})` : text\r\n    }\r\n\r\n    if (isCallConference(item) || isChatConference(item)) {\r\n        innerTitle = (\r\n            <span className={titleClassName}>\r\n                {`${t.RECENT.conference_title_text()} (${item.parties.length})`}\r\n            </span>\r\n        )\r\n\r\n    } else if (isChat(item)) {\r\n        const chatDisplayName = item.groupChatData ? item.groupChatData.title : displayName\r\n\r\n        innerTitle = (\r\n            <span className={titleClassName} data-testid=\"name\">\r\n                {chatDisplayName}\r\n            </span>\r\n        )\r\n\r\n    } else if (isCall(item)) {\r\n        innerTitle = (\r\n            <span className={titleClassName} data-testid=\"name\">\r\n                {addRepeatCount(displayName, repeatCount)}\r\n            </span>\r\n        )\r\n\r\n    } else if (isEmail(item)) {\r\n        const emailDisplayName =\r\n            formatFullName(item.firstName, item.lastName) ||\r\n            item.email ||\r\n            t.GLOBAL.unidentified()\r\n\r\n        // do not show repeatCount for emails, because it can be just the number of times the agent opened the same email\r\n        innerTitle = (\r\n            <>\r\n                <span className={subTitleClassName} data-testid=\"case-number\">\r\n                    {`#${item.caseNumber}`}\r\n                </span>\r\n                <span> </span>\r\n                <span className={titleClassName} data-testid=\"name\">\r\n                    {emailDisplayName}\r\n                </span>\r\n            </>\r\n        )\r\n\r\n    } else if (isRecentWorkitem(item)) {\r\n        innerTitle = (\r\n            <span className={titleClassName} data-testid=\"name\">\r\n                {displayName}\r\n            </span>\r\n        )\r\n\r\n    } else {\r\n        /** This should not be reached in normal. Keep it to catch bugs in saved data */\r\n        innerTitle = (\r\n            <span className={titleClassName} data-testid=\"unknown-media\">\r\n                {`[Unknown media: ${item.media}]`}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <span className=\"flex gap-1\">\r\n            <span className=\"truncate\">\r\n                {innerTitle}\r\n                {item.serviceName && (\r\n                    <>\r\n                        <span className=\"mx-1 inline-block h-[9px] border-l border-inverse\" />\r\n                        <span data-testid=\"service-name\" className={subTitleClassName}>\r\n                            {item.serviceName}\r\n                        </span>\r\n                    </>\r\n                )}\r\n            </span>\r\n            {!isCallConference(item) && !isChatConference(item) && !isGroupChat(item) && (\r\n                <RecentFavoriteButton forContactListItem item={item} />\r\n            )}\r\n        </span>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {tw} from '@servicepattern/ui'\r\nimport {tv} from 'tailwind-variants'\r\n\r\nimport {useChatUnread, usePersonalMessagesUnreadAmount} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInternalChatUnread} from '@bpinc/ad-interaction-internal-chat-state-context'\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getInteractionId,\r\n    getInteractionStepId,\r\n    isChatConference as isExternalChatConference,\r\n    isExternalChat,\r\n    isInternalChat,\r\n    isRecentChat,\r\n    isRecentExtChatConference,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useGroupChatTotalUnread} from '@bpinc/state-group-chat-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\ntype Props = {\r\n    item: RecentItem\r\n}\r\n\r\n// TODO: review unread indicator logic\r\nexport const RecentItemUnreadIndicator: React.FC<Props> = ({item}) => {\r\n\r\n    const internalInteractionId = useInteractionStateSelector(s => {\r\n        const currentItem = s.items.find(i => isInternalChat(i) && i.userId === item.userId)\r\n        return getInteractionId(currentItem)\r\n    })\r\n\r\n    const associatedActiveChatInteractionStepId = useInteractionStateSelector(s => {\r\n        const currentItem = s.items.find(i =>\r\n            (isExternalChat(i) || isExternalChatConference(i)) && i.contactId === item.contactId,\r\n        )\r\n        return getInteractionStepId(currentItem)\r\n    })\r\n    const activeChatUnreadAmount = useChatUnread(associatedActiveChatInteractionStepId)\r\n    const internalChatUnreadAmount = useInternalChatUnread(internalInteractionId)\r\n\r\n    const chatId = item.groupChatData?.chatId\r\n    const groupChatUnreadAmount = useGroupChatTotalUnread(i => i.chatId === chatId)\r\n\r\n    const personalMessagesUnreadAmount = usePersonalMessagesUnreadAmount(item.contactId ?? '')\r\n\r\n    const unreadAmount = useMemo(function memoizeUnreadAmount() {\r\n        if (internalChatUnreadAmount) {\r\n            return internalChatUnreadAmount\r\n        }\r\n\r\n        if (groupChatUnreadAmount) {\r\n            return groupChatUnreadAmount\r\n        }\r\n\r\n        if (!item.contactId || (!isRecentExtChatConference(item) && !isRecentChat(item))) {\r\n            return 0\r\n        }\r\n        return personalMessagesUnreadAmount + activeChatUnreadAmount\r\n    }, [\r\n        activeChatUnreadAmount,\r\n        internalChatUnreadAmount,\r\n        item,\r\n        personalMessagesUnreadAmount,\r\n        groupChatUnreadAmount,\r\n    ])\r\n\r\n    if (!unreadAmount) {\r\n        return null\r\n    }\r\n\r\n    const digitsNumber = String(unreadAmount).length\r\n\r\n    const styles = tv({\r\n        base: tw`flex items-center justify-center rounded-full bg-primary-700 caption-xs text-inverse-primary`,\r\n        variants: {\r\n            digitsNumber: {\r\n                1: tw`size-3.5`,\r\n                2: tw`size-4`,\r\n                3: tw`size-5`,\r\n            } as Record<number, string>,\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={styles({digitsNumber})}>\r\n            {unreadAmount}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport type {EmiItemStatus} from '@bpinc/ad-emi-helpers'\r\nimport {formatDate} from '@bpinc/ad-formatting-helpers'\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {\r\n    isRecentCall,\r\n    isRecentCallConference,\r\n    isRecentChat,\r\n    isRecentEmail,\r\n    isRecentExtChatConference,\r\n    isRecentInternalChat,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAuthorizedSession} from '@bpinc/ad-session-context'\r\nimport type {EmiUserType} from '@bpinc/ad-transport-types'\r\nimport {useSubscribeForUserDetails} from '@bpinc/ad-user-details-state-context'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {useBoolean, useEvent} from '@bpinc/lib-helpers'\r\nimport {type ChatParams, SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../directory/components/user/types'\r\nimport {isClickActionAvailable} from '../hooks/isClickActionAvailable'\r\nimport {CRMObjectsList} from './CRMObjectsList'\r\nimport {RecentItemAvatar} from './RecentItemAvatar'\r\nimport {RecentItemBody} from './RecentItemBody'\r\nimport {RecentItemControls} from './RecentItemControls'\r\nimport {RecentItemTitle} from './RecentItemTitle'\r\nimport {RecentItemUnreadIndicator} from './RecentItemUnreadIndicator'\r\n\r\n\r\nexport type RecentListItemProps = {\r\n    transferMode?: 'messages' | 'calls'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    repeatCount?: number\r\n    isSelected: boolean\r\n    isHighlighted?: boolean\r\n    recentItem: RecentItem\r\n\r\n    onClick(item: RecentItem, e: React.MouseEvent): void\r\n    onDoubleClick(item: RecentItem): void\r\n    onCallClick(callParams: HandleCallParams): void\r\n    onChatClick(chatParams: ChatParams): void\r\n    onEmailClick(emailParams: OnEmailParams): void\r\n    onDetailsClick(item: RecentItem): void\r\n    useEmiItemStatus(emiUserType?: EmiUserType, ownerId?: string): EmiItemStatus\r\n}\r\n\r\n\r\nexport const RecentListItem: React.FC<RecentListItemProps> = React.memo(function RecentListItem(props) {\r\n    const {\r\n        isHighlighted,\r\n        transferMode,\r\n        transferControlsStyle,\r\n        onClick,\r\n        onDoubleClick,\r\n        onCallClick,\r\n        onChatClick,\r\n        onEmailClick,\r\n        onDetailsClick,\r\n        useEmiItemStatus,\r\n        repeatCount,\r\n        isSelected,\r\n        recentItem,\r\n    } = props\r\n\r\n    const contacts = useContactsState('contacts')\r\n    const {userId: selfUserId} = useAuthorizedSession()\r\n\r\n    const item = useMemo(() => {\r\n        if (isRecentEmail(recentItem)) {\r\n            const {contactId} = recentItem\r\n            const number = contactId && contacts[contactId]?.data?.primaryPhone?.phone\r\n            if (number) {\r\n                return {...recentItem, number}\r\n            }\r\n        }\r\n        if (isRecentInternalChat(recentItem)) {\r\n            const chatMembers = recentItem.groupChatData?.members\r\n            if (chatMembers?.length === 2) {\r\n                const secondParty = chatMembers.find(member => member.id !== selfUserId)\r\n                if (secondParty) {\r\n                    return {\r\n                        ...recentItem,\r\n                        firstName: secondParty.firstName,\r\n                        lastName: secondParty.lastName,\r\n                        userId: secondParty.id,\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return recentItem\r\n    }, [contacts, recentItem, selfUserId])\r\n\r\n\r\n    const isMissed = item.direction === 'INBOUND' && item.duration === '0'\r\n    const isIncoming = item.direction === 'INBOUND'\r\n    const isOutgoing = item.direction === 'OUTBOUND'\r\n\r\n    const clickActionAvailable = isClickActionAvailable(item)\r\n\r\n    useSubscribeForUserDetails(item.userId)\r\n\r\n    const {value: crmObjectsListOpened, toggle: toggleShowCrmObjectsList} = useBoolean()\r\n\r\n    const avatar = (\r\n        <RecentItemAvatar\r\n            item={item}\r\n            onCallClick={onCallClick}\r\n            onChatClick={onChatClick}\r\n            onEmailClick={onEmailClick}\r\n        />\r\n    )\r\n\r\n    const title = <RecentItemTitle item={item} repeatCount={repeatCount} />\r\n    const body = <RecentItemBody item={item} />\r\n\r\n    const datetime = (\r\n        <span data-testid=\"date\" className=\"caption-s text-neutral-on-secondary\">\r\n            {formatDate(item.time)}\r\n        </span>\r\n    )\r\n\r\n    const unreadIndicator = <RecentItemUnreadIndicator item={item} />\r\n\r\n    const controls = (\r\n        <RecentItemControls\r\n            item={item}\r\n            transferMode={transferMode}\r\n            crmObjectsListOpened={crmObjectsListOpened}\r\n            onCall={onCallClick}\r\n            onChat={onChatClick}\r\n            onEmail={onEmailClick}\r\n            onDetails={onDetailsClick}\r\n            toggleShowCrmObjectsList={toggleShowCrmObjectsList}\r\n        />\r\n    )\r\n\r\n    const bottomContent = crmObjectsListOpened && item.associatedCRMObjects?.length\r\n        ? <CRMObjectsList crmObjects={item.associatedCRMObjects} />\r\n        : null\r\n\r\n    const {active, disableReasonMessage} = useEmiItemStatus(item.userType, item.ownerId)\r\n\r\n    const handleClick = useEvent((e: React.MouseEvent) => {\r\n        onClick(item, e)\r\n    })\r\n\r\n    const handleDoubleClick = useEvent(() => {\r\n        onDoubleClick(item)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <ContactListItem\r\n                as={SelectionItem}\r\n                containerProps={{\r\n                    focusOnSelection: true,\r\n                    touchedOnly: true,\r\n                    itemId: item.itemId,\r\n                    title: disableReasonMessage,\r\n                    'data-testid': 'recent-item',\r\n                    'data-conference': isRecentCallConference(item) || isRecentExtChatConference(item) || undefined,\r\n                    'data-chat': isRecentChat(item) || undefined,\r\n                    'data-call': isRecentCall(item) || undefined,\r\n                    'data-missed': isMissed || undefined,\r\n                    'data-incoming': isIncoming || undefined,\r\n                    'data-outgoing': isOutgoing || undefined,\r\n                    'data-email': isRecentEmail(item) || undefined,\r\n                    'data-disabled': !active || undefined,\r\n                    'data-selected': isSelected,\r\n                }}\r\n                isSelected={isHighlighted || isSelected}\r\n                showControls={isSelected}\r\n                isConference={isRecentCallConference(item) || isRecentExtChatConference(item)}\r\n                transferMode={transferMode}\r\n                transferControlsStyle={transferControlsStyle}\r\n                userId={item.userId}\r\n                contactId={item.contactId}\r\n                number={item.number}\r\n                avatar={avatar}\r\n                title={title}\r\n                titleRight={datetime}\r\n                body={body}\r\n                bodyRight={unreadIndicator}\r\n                controls={controls}\r\n                bottomContent={bottomContent}\r\n                onClick={clickActionAvailable ? handleClick : undefined}\r\n                onDoubleClick={handleDoubleClick}\r\n                userType={item.userType}\r\n                disabled={!active}\r\n            />\r\n        </>\r\n    )\r\n})\r\n","import React, {useDeferredValue, useEffect, useMemo, useRef} from 'react'\r\nimport {partial} from 'lodash-es'\r\n\r\nimport {useCaseStateMethods} from '@bpinc/ad-case-state-context'\r\nimport {useDirectoryState, useDirectoryStateMethods} from '@bpinc/ad-directory-state-context'\r\nimport {useEmiItemStatus} from '@bpinc/ad-emi-helpers'\r\nimport {useDefaultTransferMode} from '@bpinc/ad-interaction-state-context'\r\nimport type {HandleCallParams} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useActivityHistoryOpener, useCallHandler, useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {\r\n    isRecentCall as isCall,\r\n    isRecentCallConference as isCallConference,\r\n    isRecentChat as isChat,\r\n    isRecentEmail as isEmail,\r\n    isRecentExtChatConference as isChatConference,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useNativeScrollDataManager} from '@bpinc/ad-scroll-state-context-builder'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useRecentUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {ContactListPlaceholder} from '@bpinc/lib-contact-list-item-ui'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {\r\n    useOpenGlobalSlidingModal,\r\n    useOpenInteractionSlidingModal,\r\n    useShowSlidingModalChecker,\r\n} from '@bpinc/lib-sliding-modal-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {type ChatParams, ErrorBoundary, SelectionContainer} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useRecentState} from '@bpinc/state-recent-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\nimport {isRecentDirectoryEntryItem} from '@bpinc/state-recent-types'\r\n\r\nimport type {OnEmailParams} from '../../directory/components/user/types'\r\nimport {SCROLL_KEYS} from '../../scroll-context'\r\nimport {useContactData} from '../hooks/useContactsData'\r\nimport {useFilteredList} from '../hooks/useFilteredList'\r\nimport {useItemAutoSelector} from '../hooks/useItemAutoSelector'\r\nimport {useTransferRecentConferenceScrollManager} from '../hooks/useTransferRecentConferenceScrollManager'\r\nimport {RecentListItem} from './RecentListItem'\r\n\r\n\r\nexport type ItemType = 'all' | 'calls' | 'messages'\r\n\r\nexport type RecentListRenderContext = 'transfer'\r\n\r\ntype RecentListProps = {\r\n    type: ItemType\r\n    isHighlighted?: (item: RecentItem) => boolean\r\n    /** Custom onClick handler */\r\n    onClick?: (item: RecentItem, e: React.MouseEvent) => void\r\n    renderContext?: RecentListRenderContext\r\n    transferMode?: 'calls' | 'messages'\r\n    transferControlsStyle?: 'add' | 'replace'\r\n    filter?: (recentItem: RecentItem) => boolean\r\n}\r\n\r\nlet singleClickTimeout: number\r\n\r\nexport const RecentList: React.FC<RecentListProps> = props => {\r\n    const t = useLocalizationState('t')\r\n    const defaultTransferMode = useDefaultTransferMode()\r\n    const {selected, setSelected, setSearchValue, searchValue} = useRecentUIState()\r\n    const {filter, isHighlighted, transferMode = defaultTransferMode, transferControlsStyle, type, renderContext, onClick} = props\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n    const openContactDetails = useContactDetailsOpener()\r\n    const handleCall = useCallHandler()\r\n    const {selectedService} = useServiceState()\r\n    const listRef = useNativeScrollDataManager(SCROLL_KEYS.recent(type))\r\n    const {recentList, isLoading} = useRecentState()\r\n    const teams = useDirectoryState('teams')\r\n    const directoryStateMethods = useDirectoryStateMethods()\r\n    const {privileges, emi} = useSessionState()\r\n    const {createCaseEmail} = useCaseStateMethods()\r\n\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const isUsersRequestedRef = useRef(false)\r\n\r\n    const privilegesLoaded = !!Object.keys(privileges).length\r\n\r\n    useEffect(() => {\r\n        if (privilegesLoaded && privileges.CAN_VIEW_DIRECTORY) {\r\n            directoryStateMethods.getAgentTeams()\r\n        }\r\n    }, [directoryStateMethods, privileges.CAN_VIEW_DIRECTORY, privilegesLoaded])\r\n\r\n    useEffect(() => {\r\n        if (teams.length && !isUsersRequestedRef.current) {\r\n            directoryStateMethods.getLoggedUsers(teams.map(team => team.id))\r\n            isUsersRequestedRef.current = true\r\n        }\r\n    }, [directoryStateMethods, teams, isUsersRequestedRef])\r\n\r\n    const useEmiItemStatusCurried = useMemo(() => partial(useEmiItemStatus, emi), [emi])\r\n\r\n    const tryInitiateCall = useEvent((callParams: HandleCallParams) => {\r\n        handleCall({\r\n            ...callParams,\r\n            navigateToInteractionsPage: true,\r\n            serviceId: selectedService ?? callParams.serviceId,\r\n        })\r\n    })\r\n\r\n    // -------------------------\r\n    // handlers\r\n    // -------------------------\r\n\r\n    const handleCallClick = useEvent((callParams: HandleCallParams) => {\r\n        tryInitiateCall({\r\n            ...callParams,\r\n            origination: 'recent',\r\n        })\r\n    })\r\n\r\n    const handleChatClick = useEvent((chatParams: ChatParams) => {\r\n        if (chatParams.contactId || chatParams.userId || chatParams.phone || chatParams.groupChatId) {\r\n            openActivityHistory({\r\n                ...chatParams,\r\n                origination: 'recent',\r\n            })\r\n        }\r\n    })\r\n\r\n    const handleEmailClick = useEvent((emailParams: OnEmailParams) => {\r\n        createCaseEmail(emailParams)\r\n    })\r\n\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const openGlobalSlidingModal = useOpenGlobalSlidingModal()\r\n    const setActivePage = useNavigationState('setActivePage')\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const showRecentConferenceModal = useShowSlidingModalChecker(interactionId, 'recentConference')\r\n\r\n    const openRecentConferenceModal = useEvent((recentItem: RecentItem) => {\r\n        const payload = {\r\n            recentItem,\r\n            handleChatClick,\r\n            handleCallClick,\r\n            onClick,\r\n            transferMode,\r\n        }\r\n        if (transferMode) {\r\n            assertDefined(interactionId)\r\n            openInteractionSlidingModal(interactionId, 'recentConference', payload)\r\n        } else {\r\n            openGlobalSlidingModal('recentConference', payload)\r\n        }\r\n    })\r\n\r\n    useTransferRecentConferenceScrollManager(listRef)\r\n\r\n    const handleClick = useEvent((item: RecentItem, e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        /** Clicked more than 1 times in a row */\r\n        if (e.nativeEvent.detail > 1) {\r\n            clearTimeout(singleClickTimeout)\r\n            return\r\n        }\r\n\r\n        /** wait for potential double click before handling a single click*/\r\n        singleClickTimeout = setTimeout(handleClickCallback, 250)\r\n\r\n        function handleClickCallback() {\r\n            /** If custom onClick is passed, use it's handler */\r\n            if (onClick) {\r\n                onClick(item, e)\r\n                return\r\n            }\r\n\r\n            if (isCallConference(item) || isChatConference(item)) {\r\n                openRecentConferenceModal(item)\r\n                return\r\n            }\r\n\r\n            if (isCall(item)) {\r\n                setSelected(item.itemId)\r\n\r\n                if (item.number) {\r\n                    setSearchValue(item.number)\r\n                }\r\n                return\r\n            }\r\n\r\n            if (isChat(item)) {\r\n                hideNotificationsByTag('interaction-init')\r\n\r\n                openActivityHistory({\r\n                    contactId: item.contactId,\r\n                    userId: item.userId,\r\n                    phone: item.number,\r\n                    firstName: item.firstName,\r\n                    lastName: item.lastName,\r\n                    origination: 'recent',\r\n                    emiPhotoUrl: item.photoUrl,\r\n                    emiUserType: item.userType,\r\n                    previousActivity: item.globalInteractionId\r\n                        ? {\r\n                            globalInteractionId: item.globalInteractionId,\r\n                            mediaType: item.media,\r\n                        }\r\n                        : undefined,\r\n                })\r\n                return\r\n            }\r\n\r\n            if (isEmail(item)) {\r\n                if (!item.caseId) {\r\n                    return\r\n                }\r\n\r\n                setActivePage({\r\n                    name: AppRoutes.Cases,\r\n                    params: {\r\n                        id: item.caseId,\r\n                    },\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    const handleDoubleClick = useEvent((item: RecentItem) => {\r\n        clearTimeout(singleClickTimeout)\r\n\r\n        if (item.number && isCall(item)) {\r\n            setSearchValue('')\r\n\r\n            return handleCallClick({\r\n                phone: item.number,\r\n                firstName: item.firstName,\r\n                lastName: item.lastName,\r\n                userId: item.userId,\r\n                contactId: item.contactId,\r\n                serviceId: item.serviceId,\r\n            })\r\n        }\r\n    })\r\n\r\n    const handleDetailsClick = useEvent((item: RecentItem) => {\r\n        if (isCallConference(item) || isChatConference(item)) {\r\n            openRecentConferenceModal(item)\r\n            return\r\n        }\r\n        openContactDetails({\r\n            userId: isRecentDirectoryEntryItem(item) ? undefined : item.userId,\r\n            contactId: item.contactId,\r\n            entryId: isRecentDirectoryEntryItem(item) ? item.userId : undefined,\r\n        })\r\n    })\r\n\r\n    const filteredList = useFilteredList({type, transferMode, filter, recentList, renderContext})\r\n    useItemAutoSelector(filteredList)\r\n    useContactData(filteredList)\r\n\r\n    const deferredSearchValue = useDeferredValue(searchValue)\r\n\r\n    if (!filteredList.length) {\r\n        if (deferredSearchValue.length) {\r\n            return (\r\n                <p className=\"mt-[32.5px] text-center\">\r\n                    {t.RECENT.no_recent_interactions_found_for(deferredSearchValue)}\r\n                </p>\r\n            )\r\n        }\r\n        return (\r\n            <p className=\"mt-[32.5px] text-center\">\r\n                {t.RECENT.no_recent_interactions_found()}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"relative mt-2\">\r\n                <div className=\"absolute inset-x-0\">\r\n                    <ContactListPlaceholder amount={15} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <SelectionContainer\r\n            ref={listRef}\r\n            className={tcn(\r\n                'scrollbar-on-hover flex-auto overflow-auto',\r\n                {'overflow-hidden': showRecentConferenceModal},\r\n            )}\r\n        >\r\n            {/* without this extra wrapper with filled background \"scrollbar-on-hover\" produces visual artifacts */}\r\n            <div className=\"bg-primary-background\">\r\n                <ErrorBoundary fallback={null} >\r\n                    {filteredList.map((item, index) => (\r\n                        <RecentListItem\r\n                            key={item.itemId || index}\r\n                            onClick={handleClick}\r\n                            onDoubleClick={handleDoubleClick}\r\n                            onCallClick={handleCallClick}\r\n                            onChatClick={handleChatClick}\r\n                            onEmailClick={handleEmailClick}\r\n                            onDetailsClick={handleDetailsClick}\r\n                            isHighlighted={isHighlighted?.(item)}\r\n                            isSelected={!!selected && selected === item.itemId}\r\n                            transferMode={transferMode}\r\n                            transferControlsStyle={transferControlsStyle}\r\n                            useEmiItemStatus={useEmiItemStatusCurried}\r\n                            recentItem={item}\r\n                            repeatCount={item.repeatCount}\r\n                        />\r\n                    ))}\r\n                </ErrorBoundary>\r\n            </div>\r\n        </SelectionContainer>\r\n    )\r\n}\r\n","import type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function isClickActionAvailable(item: RecentItem) {\r\n\r\n    if (item.type === 'extChat' && item.channel === 'web') {\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n","import type {RefObject} from 'react'\r\nimport {useLayoutEffect, useRef} from 'react'\r\n\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useShowSlidingModalChecker} from '@bpinc/lib-sliding-modal-context'\r\n\r\n\r\nexport function useTransferRecentConferenceScrollManager(scrollRef: RefObject<HTMLDivElement>) {\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const showRecentConferenceModal = useShowSlidingModalChecker(interactionId, 'recentConference')\r\n\r\n\r\n    const scrollPositionRef = useRef(0)\r\n    useLayoutEffect(() => {\r\n        if (showRecentConferenceModal) {\r\n            scrollPositionRef.current = scrollRef.current?.scrollTop ?? 0\r\n            scrollRef.current?.scrollTo({top: 0})\r\n        } else {\r\n            requestAnimationFrame(() => {\r\n                scrollRef.current?.scrollTo({top: scrollPositionRef.current})\r\n                scrollPositionRef.current = 0\r\n            })\r\n        }\r\n    }, [scrollRef, showRecentConferenceModal])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useContactsState, useContactsStateMethods} from '@bpinc/ad-contacts-state-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\n\r\nexport function useContactData(recentsList: RecentItem[]) {\r\n\r\n    const contacts = useContactsState('contacts')\r\n    const {getContacts} = useContactsStateMethods()\r\n\r\n    useEffect(() => {\r\n        const ids: string[] = []\r\n        let timeout: number | undefined = undefined\r\n\r\n        recentsList.forEach(item => {\r\n            const {contactId} = item\r\n            if (contactId && !contacts[contactId] && !ids.includes(contactId)) {\r\n                ids.push(contactId)\r\n            }\r\n        })\r\n\r\n        if (ids.length) {\r\n            timeout = setTimeout(() => getContacts(ids), 500)\r\n            return () => clearTimeout(timeout)\r\n        }\r\n\r\n        // trigger on list change only\r\n        // eslint-disable-next-line\r\n    }, [recentsList]);\r\n\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useRecentUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\n\r\nimport type {UniqueRecentItem} from './useFilteredList'\r\n\r\n\r\nexport function useItemAutoSelector(filteredList: UniqueRecentItem[]) {\r\n    const {tabIndex, searchValue, setSelected} = useRecentUIState()\r\n    const prevTabIndex = usePrevious(tabIndex)\r\n\r\n    useEffect(() => {\r\n        if (searchValue && filteredList.length) {\r\n            setSelected(s => {\r\n                const tabIndexChanged = tabIndex !== prevTabIndex\r\n                const firstItem = filteredList[0]\r\n\r\n                if (tabIndexChanged) {\r\n                    return firstItem.itemId\r\n                }\r\n\r\n                const alreadySelected =\r\n                    s && filteredList.find(item => item.itemId === s)\r\n                if (!alreadySelected) {\r\n                    return firstItem.itemId\r\n                }\r\n                return alreadySelected.itemId\r\n            })\r\n        }\r\n\r\n        if (!searchValue || !filteredList.length) {\r\n            setSelected(undefined)\r\n        }\r\n    }, [searchValue, filteredList, setSelected, tabIndex, prevTabIndex])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {isPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useActivityHistoryOpener, useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {InitiateCall} from '@bpinc/ad-interaction-state-types'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useRecentUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {SearchField} from '@bpinc/lib-jskit-ui'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {SearchForInteractionControls} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useRecentState} from '@bpinc/state-recent-context'\r\n\r\n\r\nexport const RecentSearchControls: React.FC = () => {\r\n\r\n    const {RECENT: i18n} = useLocalizationState('t')\r\n    const phoneDeviceCapabilities = useSessionState('phoneDeviceCapabilities')\r\n\r\n    const {selected, searchValue, setSearchValue} = useRecentUIState()\r\n    const {recentList} = useRecentState()\r\n    const {selectedService} = useServiceState()\r\n    const {selectedDIDNumber} = useDIDNumberState()\r\n    const {hideNotificationsByTag} = useNotificationsState('methods')\r\n\r\n    const handleCall = useCallHandler()\r\n    const openActivityHistory = useActivityHistoryOpener()\r\n\r\n    const handleChange = useEvent((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value)\r\n    })\r\n\r\n    const tryInitiateCall = useEvent((callParams: InitiateCall) => {\r\n        handleCall({\r\n            ...callParams,\r\n            navigateToInteractionsPage: true,\r\n        })\r\n    })\r\n\r\n    const onCall = useEvent(function dialRecent() {\r\n        setSearchValue('')\r\n\r\n        const selectedItem = selected && recentList.find(i => selected === i.itemId)\r\n\r\n        if (!selectedItem) {\r\n            if (!searchValue) {\r\n                return\r\n            }\r\n\r\n            return tryInitiateCall({\r\n                phone: searchValue,\r\n                serviceId: selectedService,\r\n                accessNumberId: selectedDIDNumber,\r\n                origination: 'recent',\r\n            })\r\n        } else {\r\n            tryInitiateCall({\r\n                phone: selectedItem.number ?? '',\r\n                firstName: selectedItem.firstName,\r\n                lastName: selectedItem.lastName,\r\n                serviceId: selectedService ?? selectedItem.serviceId,\r\n                contactId: selectedItem.contactId,\r\n                userId: selectedItem.userId,\r\n                accessNumberId: selectedDIDNumber,\r\n                origination: 'recent',\r\n            })\r\n        }\r\n    })\r\n\r\n    const onChat = useEvent(function chatRecent() {\r\n        setSearchValue('')\r\n\r\n        const selectedItem = recentList.find(i => selected === i.itemId)\r\n\r\n        if (!selectedItem) {\r\n            if (!searchValue) {\r\n                return\r\n            }\r\n\r\n            hideNotificationsByTag('interaction-init')\r\n\r\n            return openActivityHistory({\r\n                phone: searchValue,\r\n            })\r\n        }\r\n\r\n        // TODO: investigate do we need it or with which tag?\r\n        hideNotificationsByTag('interaction-init')\r\n\r\n        if (selectedItem.userId || selectedItem.contactId || selectedItem.number) {\r\n            openActivityHistory({\r\n                contactId: selectedItem.contactId,\r\n                userId: selectedItem.userId,\r\n                phone: selectedItem.number,\r\n                firstName: selectedItem.firstName,\r\n                lastName: selectedItem.lastName,\r\n                origination: 'recent',\r\n                emiPhotoUrl: selectedItem.photoUrl,\r\n                emiUserType: selectedItem.userType,\r\n                previousActivity: selectedItem.globalInteractionId\r\n                    ? {\r\n                        globalInteractionId: selectedItem.globalInteractionId,\r\n                        mediaType: selectedItem.media,\r\n                    }\r\n                    : undefined,\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex items-start gap-2.5\">\r\n            <SearchField\r\n                value={searchValue}\r\n                onChange={handleChange}\r\n                layoutClassName=\"grow\"\r\n                data-testid=\"search-input\"\r\n                aria-label={i18n.search_field_placeholder()}\r\n                placeholder={i18n.search_field_placeholder()}\r\n            />\r\n            <SearchForInteractionControls\r\n                searchQuery={searchValue}\r\n                showCallButton={!!phoneDeviceCapabilities.canDial}\r\n                callButtonDisabled={!selected && !isPhone(searchValue)}\r\n                chatButtonDisabled={!selected && !isPhone(searchValue)}\r\n                onCallClick={onCall}\r\n                onChatClick={onChat}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {TabsContent, TabsList, TabsRoot, TabsTrigger} from '@servicepattern/ui'\r\n\r\nimport {\r\n    useActiveInteractionId,\r\n    useInteractionStateMethods,\r\n    useInteractionStateSelector,\r\n} from '@bpinc/ad-interaction-state-context'\r\nimport {useRecentUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useEvent, usePageVisibility} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {ServiceSelect} from '../../components/ServiceSelect'\r\nimport type {ItemType} from './RecentList'\r\nimport {RecentList} from './RecentList'\r\nimport {RecentSearchControls} from './RecentSearchControls'\r\n\r\n\r\nconst tabs = [\r\n    {\r\n        id: 'all',\r\n        testId: 'tab-all',\r\n        content: 'All',\r\n    },\r\n    {\r\n        id: 'calls',\r\n        testId: 'tab-calls',\r\n        content: 'Calls',\r\n    },\r\n    {\r\n        id: 'messages',\r\n        testId: 'tab-messages',\r\n        content: 'Messages',\r\n    },\r\n]\r\n\r\nexport const Recent: React.FC = () => {\r\n\r\n    const {resetMissedCalls} = useInteractionStateMethods()\r\n    const missedCallsAmount = useInteractionStateSelector(s => s.missedCallsAmount)\r\n    const {handleTabChange, tabIndex} = useRecentUIState()\r\n    const pageIsVisible = usePageVisibility()\r\n    const activeInteractionId = useActiveInteractionId()\r\n\r\n    const selectedTabId = tabs[Number(tabIndex)].id as ItemType\r\n\r\n    const onTabChange = useEvent((newTabId: string) => {\r\n        const newTabIndex = tabs.findIndex(tab => tab.id === newTabId)\r\n        handleTabChange(newTabIndex)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (pageIsVisible) {\r\n            resetMissedCalls()\r\n        }\r\n    }, [missedCallsAmount, resetMissedCalls, pageIsVisible])\r\n\r\n    return (\r\n        <TabsRoot\r\n            data-testid=\"recent\"\r\n            value={selectedTabId}\r\n            className=\"flex h-full flex-col gap-2.5 px-4 pt-2\"\r\n        >\r\n            <TabsList data-testid=\"recent-tabs\">\r\n                {tabs.map(tab => (\r\n                    <TabsTrigger\r\n                        key={tab.id}\r\n                        value={tab.id}\r\n                        data-testid={tab.testId}\r\n                        isSelected={selectedTabId === tab.id}\r\n                        onClick={() => onTabChange(tab.id)}\r\n                        className=\"w-full text-center\"\r\n                        triggerClassName={tcn(\r\n                            'py-2',\r\n                            {['text-primary-on-primary']: tab.id === selectedTabId},\r\n                        )}\r\n                    >\r\n                        {tab.content}\r\n                    </TabsTrigger>\r\n                ))}\r\n            </TabsList>\r\n\r\n            <ServiceSelect itemId={activeInteractionId} />\r\n\r\n            <RecentSearchControls />\r\n\r\n            <TabsContent\r\n                value={selectedTabId}\r\n                className=\"flex min-h-0 !flex-auto flex-col py-1 pr-0.5\"\r\n            >\r\n                <RecentList type={selectedTabId} />\r\n            </TabsContent>\r\n        </TabsRoot>\r\n    )\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\nimport {noop} from 'lodash-es'\r\n\r\nimport type {DirectoryItem} from '@bpinc/ad-directory-state-types'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat, isRecentCallConference, isRecentExtChatConference} from '@bpinc/ad-interaction-state-methods'\r\nimport {getDirectoryItemPhone} from '@bpinc/lib-helpers-ui'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {SearchField} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {RecentItem} from '@bpinc/state-recent-types'\r\n\r\nimport {DirectoryCombined, DirectoryInternal} from '../../../../../directory'\r\nimport {FavoritesList} from '../../../../../favorites'\r\nimport type {FavoritesListChannelItem} from '../../../../../favorites/types'\r\nimport {RecentList} from '../../../../../recent'\r\nimport {dialNumberAtom, searchAtom} from '../../atoms'\r\nimport type {TransferTab} from './InteractionsTransfer'\r\n\r\n\r\ninterface TabContentProps {\r\n    transferMode: 'messages' | 'calls'\r\n    selectedTab: TransferTab\r\n}\r\n\r\nexport function TabContent({\r\n    transferMode,\r\n    selectedTab,\r\n}: TabContentProps) {\r\n    const [search, setSearch] = useAtom(searchAtom)\r\n    const [dialNumber, setDialNumber] = useAtom(dialNumberAtom)\r\n\r\n    const t = useLocalizationState('t')\r\n    const interactionId = useInteractionId()\r\n    const activeItemIsExternalChat = useInteractionProp(\r\n        interactionId,\r\n        isExternalChat,\r\n    )\r\n\r\n    const recentsType = activeItemIsExternalChat ? 'all' : 'calls'\r\n\r\n    const recentFilter = useCallback(\r\n        (item: RecentItem) => {\r\n            return [item.firstName, item.lastName, item.number, item.name]\r\n                .join(' ')\r\n                .toLowerCase()\r\n                .includes(search.trim().toLowerCase())\r\n        },\r\n        [search],\r\n    )\r\n\r\n    const favoritesFilter = useCallback(\r\n        ({item, channel, media}: FavoritesListChannelItem) => {\r\n            function searchFilter() {\r\n                return [item.displayName, channel.number]\r\n                    .join(' ')\r\n                    .toLowerCase()\r\n                    .includes(search.trim().toLowerCase())\r\n            }\r\n\r\n            function channelFilter() {\r\n                return transferMode === 'calls' ? media === 'voice' : media === 'chat'\r\n            }\r\n            return searchFilter() && channelFilter()\r\n        },\r\n        [search, transferMode],\r\n    )\r\n\r\n    const directoryFilter = useCallback(\r\n        (item: DirectoryItem) => {\r\n            //Search filter is omitted as query prop is passed to Directory (Internal and Combined) components\r\n            return Boolean(getDirectoryItemPhone(item))\r\n        },\r\n        [],\r\n    )\r\n\r\n    const paneWrapperClassName = tcn(\r\n        'flex min-h-0 flex-auto flex-col overflow-auto',\r\n    )\r\n\r\n    const SearchInput = useMemo(() => {\r\n        return (\r\n            <SearchField\r\n                autoFocus\r\n                value={search}\r\n                data-testid=\"dialpad-input\"\r\n                fieldClassName=\"mb-4\"\r\n                onChange={e => setSearch(e.target.value)}\r\n                placeholder={t.VOICE_CALL.transfer_search_placeholder()}\r\n            />\r\n        )\r\n    }, [search, setSearch, t.VOICE_CALL])\r\n\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n\r\n    function openRecentConferenceModal(recentItem: RecentItem) {\r\n        const payload = {\r\n            recentItem,\r\n            onClick: onRecentClick,\r\n            handleCallClick: noop,\r\n            handleChatClick: noop,\r\n            transferMode,\r\n        }\r\n        assertDefined(interactionId)\r\n        openInteractionSlidingModal(interactionId, 'recentConference', payload)\r\n    }\r\n\r\n\r\n    function onRecentClick(item: RecentItem) {\r\n        if (isRecentCallConference(item) || isRecentExtChatConference(item)) {\r\n            return openRecentConferenceModal(item)\r\n        }\r\n\r\n        if (item.number) {\r\n            setDialNumber(item.number)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={tcn('flex min-h-0 flex-auto flex-col overflow-auto')}>\r\n            {selectedTab === 'favorites' && (\r\n                <div className={paneWrapperClassName}>\r\n                    {SearchInput}\r\n                    <FavoritesList\r\n                        onClick={({channel}) => {\r\n                            return channel.number && setDialNumber(channel.number)\r\n                        }}\r\n                        transferMode={transferMode}\r\n                        transferControlsStyle=\"replace\"\r\n                        isHighlighted={({channel}) => channel.number === dialNumber}\r\n                        filter={favoritesFilter}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {selectedTab === 'recent' && (\r\n                <div className={paneWrapperClassName}>\r\n                    {SearchInput}\r\n                    <RecentList\r\n                        onClick={onRecentClick}\r\n                        isHighlighted={item => item.number === dialNumber}\r\n                        renderContext=\"transfer\"\r\n                        filter={recentFilter}\r\n                        type={recentsType}\r\n                        transferMode={transferMode}\r\n                        transferControlsStyle=\"replace\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {selectedTab === 'directory' && (\r\n                <div className={paneWrapperClassName}>\r\n                    {SearchInput}\r\n                    {activeItemIsExternalChat ? (\r\n                        <DirectoryInternal\r\n                            onClick={(_evt, item) => {\r\n                                const phone = getDirectoryItemPhone(item)\r\n                                phone && setDialNumber(phone)\r\n                            }}\r\n                            query={search}\r\n                            filter={directoryFilter}\r\n                            transferMode={transferMode}\r\n                            isHighlighted={item => getDirectoryItemPhone(item) === dialNumber}\r\n                            transferControlsStyle=\"replace\"\r\n                        />\r\n                    ) : (\r\n                        <DirectoryCombined\r\n                            onClick={(_evt, item) => {\r\n                                const phone = getDirectoryItemPhone(item)\r\n                                phone && setDialNumber(phone)\r\n                            }}\r\n                            query={search}\r\n                            filter={directoryFilter}\r\n                            transferMode={transferMode}\r\n                            isHighlighted={item => getDirectoryItemPhone(item) === dialNumber}\r\n                            transferControlsStyle=\"replace\"\r\n                        />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\nimport {TabsContent, TabsList, TabsRoot, TabsTrigger} from '@servicepattern/ui'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ServiceSelect} from '../../../../../components/ServiceSelect'\r\nimport {useKeyboardShortcuts} from '../hooks/useKeyboardShortcuts'\r\nimport {TabContent} from './TabContent'\r\n\r\n\r\nexport type TransferTab = 'recent' | 'favorites' | 'directory'\r\n\r\nexport const InteractionsTransfer: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const itemId = useInteractionId()\r\n\r\n    const activeItemIsExternalChat = useInteractionProp(itemId, isExternalChat)\r\n    const transferMode = activeItemIsExternalChat ? 'messages' : 'calls'\r\n\r\n    useKeyboardShortcuts()\r\n\r\n    const {transferTabIndex, handleTransferTabChange} =\r\n        useCommunicatorUIState(['transferTabIndex', 'handleTransferTabChange'])\r\n\r\n\r\n    const tabs = useMemo(\r\n        () => [\r\n            {\r\n                id: 'recent',\r\n                key: 'tab-recent',\r\n                content: t.ADDRESS_BOOK_AREA.addressBook_recents(),\r\n                className: 'w-full',\r\n            },\r\n            {\r\n                id: 'favorites',\r\n                key: 'tab-favorites',\r\n                content: t.ADDRESS_BOOK_AREA.addressBook_favorites(),\r\n                className: 'w-full',\r\n            },\r\n            {\r\n                id: 'directory',\r\n                key: 'tab-directory',\r\n                content: t.ADDRESS_BOOK_AREA.addressBook_directory(),\r\n                className: 'w-full',\r\n            },\r\n        ],\r\n        [t],\r\n    )\r\n\r\n    const onTabChange = (newTabId: string) => {\r\n        const newTabIndex = tabs.findIndex(tab => tab.id === newTabId)\r\n        handleTransferTabChange(newTabIndex)\r\n    }\r\n\r\n    const selectedTab = tabs[Number(transferTabIndex)].id as TransferTab\r\n    return (\r\n        <div className=\"flex flex-auto flex-col overflow-auto px-4 pt-4\">\r\n            {transferMode === 'calls' && (\r\n                <ServiceSelect itemId={itemId} labeled />\r\n            )}\r\n            <TabsRoot\r\n                value={selectedTab}\r\n                className=\"mt-4 flex flex-col overflow-auto rounded-xs border px-4 pb-4 bg-primary-background border-default\"\r\n            >\r\n                <TabsList>\r\n                    {tabs.map(tab => (\r\n                        <TabsTrigger\r\n                            triggerClassName={tcn('p-2 text-center', {\r\n                                'text-primary-on-primary':\r\n                                        selectedTab === tab.id,\r\n                            })}\r\n                            key={tab.key}\r\n                            value={tab.id}\r\n                            className={tab.className}\r\n                            onClick={() => onTabChange(tab.id)}\r\n                            isSelected={selectedTab === tab.id}\r\n                        >\r\n                            {tab.content}\r\n                        </TabsTrigger>\r\n                    ))}\r\n                </TabsList>\r\n                <TabsContent\r\n                    value={selectedTab}\r\n                    className=\"flex flex-auto flex-col overflow-auto pt-4\"\r\n                >\r\n                    <TabContent\r\n                        transferMode={transferMode}\r\n                        selectedTab={selectedTab}\r\n                    />\r\n                </TabsContent>\r\n            </TabsRoot>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useTransferHandlers} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useEventListener} from '@bpinc/lib-helpers'\r\n\r\nimport {searchAtom} from '../../atoms'\r\n\r\n\r\nexport function useKeyboardShortcuts() {\r\n    const search = useAtomValue(searchAtom)\r\n\r\n    const transferHandlers = useTransferHandlers()\r\n\r\n    const consultCallHandler = useCallback(\r\n        () => transferHandlers.consultCallHandler(search),\r\n        [search, transferHandlers],\r\n    )\r\n    const blindTransferHandler = useCallback(\r\n        () => transferHandlers.blindTransferHandler(search),\r\n        [search, transferHandlers],\r\n    )\r\n    const singleStepConferenceHandler = useCallback(\r\n        () => transferHandlers.singleStepConferenceHandler(search),\r\n        [search, transferHandlers],\r\n    )\r\n\r\n    const handleKeypadKeyEnterKeyDown = useCallback(\r\n        function handleKeypadKeyEnterKeyDownCallback(keyboardEvent: KeyboardEvent) {\r\n            if (keyboardEvent.shiftKey && keyboardEvent.altKey) {\r\n                switch (keyboardEvent.code) {\r\n                    case 'KeyB':\r\n                        return blindTransferHandler()\r\n                    case 'KeyC':\r\n                        return singleStepConferenceHandler()\r\n                    case 'KeyD':\r\n                        return consultCallHandler()\r\n\r\n                }\r\n            }\r\n        },\r\n        [blindTransferHandler, consultCallHandler, singleStepConferenceHandler],\r\n    )\r\n\r\n    useEventListener('keydown', handleKeypadKeyEnterKeyDown)\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {CommonSlidingModalItemProps} from '@bpinc/lib-sliding-modal-context'\r\nimport {SlidingModal} from '@bpinc/lib-ui-elements'\r\n\r\nimport {TransferModalFooter} from './InteractionsTransfer/components/TransferModalFooter'\r\nimport {InteractionsTransfer} from './InteractionsTransfer'\r\nimport {useAutoClose} from './useAutoClose'\r\nimport {useHeader} from './useHeader'\r\n\r\n\r\nexport const TransferModal: React.FC<CommonSlidingModalItemProps> = React.memo(function TransferModal(props) {\r\n    const header = useHeader()\r\n    const itemId = useInteractionId()\r\n    const activeItemIsExternalChat = useInteractionProp(itemId, isExternalChat)\r\n\r\n    useAutoClose()\r\n\r\n    return (\r\n        <SlidingModal\r\n            name=\"transfer\"\r\n            header={header}\r\n            footer={!activeItemIsExternalChat && <TransferModalFooter />}\r\n            contentClassName=\"bg-secondary-background p-0\"\r\n            footerClassName=\"items-end\"\r\n            {...props}\r\n        >\r\n            <InteractionsTransfer />\r\n        </SlidingModal>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useCloseInteractionSlidingModal, useShowSlidingModalChecker} from '@bpinc/lib-sliding-modal-context'\r\n\r\n\r\nexport function useAutoClose() {\r\n    const interactionId = useInteractionId()\r\n    const isACW = useInteractionProp(interactionId, isAfterCallWork)\r\n\r\n    const closeInteractionSlidingModal = useCloseInteractionSlidingModal()\r\n    const showTransferModal = useShowSlidingModalChecker(interactionId, 'transfer')\r\n\r\n    useEffect(() => {\r\n        if (showTransferModal && isACW) {\r\n            closeInteractionSlidingModal(interactionId, 'transfer')\r\n        }\r\n    }, [isACW, showTransferModal, closeInteractionSlidingModal, interactionId])\r\n\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport function useHeader() {\r\n    const {t} = useLocalizationState()\r\n    const [label, setLabel] = useState<string>('')\r\n    const interactionId = useInteractionId()\r\n    const activeItemIsExternalChat = useInteractionProp(interactionId, isExternalChat)\r\n\r\n    useEffect(() => {\r\n        setLabel(\r\n            activeItemIsExternalChat\r\n                ? t.EXTERNAL_CHAT.invite_dialog_label()\r\n                : t.VOICE_CALL.consult_conference_blind_transfer(),\r\n        )\r\n    }, [t, activeItemIsExternalChat])\r\n\r\n    return label\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport type {InteractionModalName} from '@bpinc/lib-sliding-modal-context'\r\nimport {useCloseInteractionSlidingModal, useSlidingModalState} from '@bpinc/lib-sliding-modal-context'\r\n\r\nimport {KeypadModal} from './modals/KeypadModal/KeypadModal'\r\nimport {KnowledgeBaseSlidingModal} from './modals/KnowledgeBaseSlidingModal'\r\nimport {RecentConferenceSlidingModal} from './modals/RecentConference'\r\nimport {RescheduleSlidingModal} from './modals/RescheduleSlidingModal'\r\nimport {TransferModal} from './modals/TransferModal/TransferModal'\r\n\r\n\r\ntype InteractionsSlidingModalsListItemProps = {\r\n    name: InteractionModalName\r\n}\r\n\r\nexport const InteractionsSlidingModalsListItem: React.FC<InteractionsSlidingModalsListItemProps> = ({name}) => {\r\n    const closeInteractionSlidingModal = useCloseInteractionSlidingModal()\r\n    const itemId = useInteractionId()\r\n    const data = useSlidingModalState(s => s.getInteractionModalData(itemId))\r\n\r\n    const closeModal = useCallback(\r\n        function closeModalCallback() {\r\n            closeInteractionSlidingModal(itemId, name)\r\n        },\r\n        [closeInteractionSlidingModal, itemId, name],\r\n    )\r\n\r\n    switch (name) {\r\n        case 'knowledgeBase': {\r\n            return <KnowledgeBaseSlidingModal closeModal={closeModal} {...data[name]} />\r\n        }\r\n        case 'keypad': {\r\n            return <KeypadModal closeModal={closeModal} {...data[name]} />\r\n        }\r\n        case 'transfer': {\r\n            return <TransferModal closeModal={closeModal} {...data[name]} />\r\n        }\r\n        case 'reschedule': {\r\n            return <RescheduleSlidingModal closeModal={closeModal} {...data[name]} />\r\n        }\r\n        case 'recentConference': {\r\n            return <RecentConferenceSlidingModal closeModal={closeModal} {...data[name]} />\r\n        }\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useSlidingModalState} from '@bpinc/lib-sliding-modal-context'\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useActiveTransferModalOpener} from './hooks/useActiveTransferModalOpener'\r\nimport {InteractionsSlidingModalsListItem} from './InteractionsSlidingModalsListItem'\r\n\r\n\r\ntype InteractionsSlidingModalsListProps = {\r\n    className?: string\r\n}\r\n\r\nexport const InteractionsSlidingModalsList: React.FC<InteractionsSlidingModalsListProps> = React.memo(function SlidingModalsList() {\r\n    const itemId = useInteractionId()\r\n\r\n    const visibleInteractionModals = useSlidingModalState(s => {\r\n        const interactionModalsData = s.getInteractionModalData(itemId)\r\n        const allModals = typedKeys(interactionModalsData)\r\n        return allModals.filter(m => interactionModalsData[m].show || interactionModalsData[m].closing)\r\n    })\r\n\r\n\r\n    useActiveTransferModalOpener()\r\n\r\n    return (\r\n        <>\r\n            {visibleInteractionModals.map(name => {\r\n                return <InteractionsSlidingModalsListItem key={name} name={name} />\r\n            })}\r\n        </>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useOpenInteractionSlidingModal} from '@bpinc/lib-sliding-modal-context'\r\n\r\n\r\nexport const useActiveTransferModalOpener = () => {\r\n    const itemId = useInteractionId()\r\n    const {isOpenTransferModal, handleToggleTransferModal} = useCommunicatorUIState()\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n\r\n    useEffect(() => {\r\n        if (isOpenTransferModal) {\r\n            openInteractionSlidingModal(itemId, 'transfer')\r\n            handleToggleTransferModal?.(false)\r\n        }\r\n    }, [itemId, openInteractionSlidingModal, isOpenTransferModal, handleToggleTransferModal])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getServiceNameFromItem} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {ButtonIcon, IconChatPanelClose, IconDivider} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useParallelChats} from '../../hooks/useParallelChats'\r\n\r\n\r\nexport const ActiveInteractionTitle: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const item = useInteraction(interactionId)\r\n    const serviceName = getServiceNameFromItem(item)\r\n\r\n    const {closeParallelChat, showCloseParallelChatButton} = useParallelChats(item)\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between px-4 py-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n                <div className=\"uppercase caption-xs text-neutral-disabled\">\r\n                    {t.INTERACTIONS.interaction_details()}\r\n                </div>\r\n                {serviceName && (\r\n                    <>\r\n                        <IconDivider />\r\n                        <div className=\"capitalize caption-s text-neutral-disabled\">\r\n                            {serviceName}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n            {showCloseParallelChatButton && (\r\n                <ButtonIcon\r\n                    tooltip={t.KNOWLEDGE_BASE.close_tab_text()}\r\n                    onClick={closeParallelChat}\r\n                    className=\"p-0\"\r\n                >\r\n                    <IconChatPanelClose className=\"!size-6\" />\r\n                </ButtonIcon>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {IconPhone} from '@bpinc/lib-icons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton, InteractionDropdown} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const CallButton = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const handleCall = useCallHandler()\r\n    const {getNamesFromDisplayName} = useFormatting()\r\n\r\n    const displayName = activeItem?.displayData.displayName || ''\r\n    const [\r\n        firstName = activeItem?.displayData.firstName,\r\n        lastName = activeItem?.displayData.lastName,\r\n    ] = getNamesFromDisplayName(displayName)\r\n\r\n    const number = activeItem?.displayData.number || ''\r\n\r\n    return (\r\n        <div className=\"relative flex w-full justify-end\">\r\n            <InteractionDropdown\r\n                searchMode=\"single_contact\"\r\n                callParams={{\r\n                    phone: number,\r\n                    contactId: activeItem?.contactId,\r\n                    userId: activeItem?.userId,\r\n                    firstName,\r\n                    lastName,\r\n                    origination: 'interaction',\r\n                }}\r\n                onCall={handleCall}\r\n                trigger={({handleCallClick, isLoading, openerRef}) => (\r\n                    <CircleButton\r\n                        ref={openerRef}\r\n                        noActiveState\r\n                        isLoading={isLoading}\r\n                        onClick={handleCallClick}\r\n                        tooltip={t.CALL_DETAILS_FORM.button_initiate_call_tooltip()}\r\n                        data-testid=\"call-button\"\r\n                    >\r\n                        <IconPhone />\r\n                    </CircleButton>\r\n                )}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId, isInternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRemoteAssistState, useRemoteAssistStateMethods} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {IconRemoteAssist} from '@bpinc/lib-icons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const RemoteAssistButton: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const {openRemoteAssist} = useRemoteAssistStateMethods()\r\n    const raItems = useRemoteAssistState('items')\r\n\r\n    const globalInteractionId = getGlobalInteractionId(activeItem)\r\n    const raId = isInternalChat(activeItem) ? activeItem?.id : globalInteractionId\r\n    const raPopupExists = !!raId && !!raItems[raId]\r\n\r\n    const raIdRef = useAsRef(raId)\r\n    const activeItemRef = useAsRef(activeItem)\r\n\r\n    const handleRemoteAssistClick = useCallback(\r\n        function handleRemoteAssistClickCallback() {\r\n            if (!raIdRef.current) {\r\n                return\r\n            }\r\n            openRemoteAssist(\r\n                {\r\n                    globalInteractionId: raIdRef.current,\r\n                    popup: true,\r\n                },\r\n                {\r\n                    action: 'create',\r\n                    giid: raIdRef.current,\r\n                    mediaType: activeItemRef.current?.mediaType || 'unknown',\r\n                    caseId: activeItemRef.current?.emailData?.caseId,\r\n                    contactId: activeItemRef.current?.contactId,\r\n                    clientFirstName: activeItemRef.current?.displayData.firstName,\r\n                    clientLastName: activeItemRef.current?.displayData.lastName,\r\n                    clientDisplayName: activeItemRef.current?.displayData.displayName,\r\n                },\r\n            )\r\n        },\r\n        [raIdRef, activeItemRef, openRemoteAssist],\r\n    )\r\n\r\n    return (\r\n        <CircleButton\r\n            className=\"px-1\"\r\n            active={raPopupExists}\r\n            disabled={raPopupExists}\r\n            onClick={handleRemoteAssistClick}\r\n            tooltip={t.INTERNAL_CHAT.chat_remote_assist()}\r\n            data-testid=\"remote-assist-button\"\r\n            clickThrottle={500}\r\n        >\r\n            <IconRemoteAssist />\r\n        </CircleButton>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useAppConfigState} from '@bpinc/ad-app-config-state-context'\r\nimport {ButtonIcon, IconWarning16} from '@bpinc/lib-jskit-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalsState} from '@bpinc/state-modals-context'\r\n\r\nimport {useOpenCallProblemModal} from '../../../../modals'\r\n\r\n\r\ninterface ReportProblemButtonProps {\r\n    className?: string\r\n}\r\n\r\nexport const ReportProblemButton: React.FC<ReportProblemButtonProps> = ({\r\n    className,\r\n}) => {\r\n    const showModal = useModalsState(({modals}) => modals.some(({id}) => id === 'call_problem'))\r\n    const openCallProblemModal = useOpenCallProblemModal()\r\n    const {t} = useLocalizationState()\r\n    const renderReportProblemButton = useAppConfigState('renderReportProblemButton')\r\n\r\n    const onClick = useCallback(\r\n        () => openCallProblemModal(undefined, {id: 'call_problem'}),\r\n        [openCallProblemModal],\r\n    )\r\n\r\n\r\n    return (\r\n        <>\r\n            {renderReportProblemButton && (\r\n                <ButtonIcon\r\n                    active={showModal}\r\n                    className={className}\r\n                    onClick={onClick}\r\n                    tooltip={t.CALL_DETAILS_FORM.report_a_call_problem()}\r\n                    data-testid=\"report-problem-button\"\r\n                >\r\n                    <IconWarning16 />\r\n                </ButtonIcon>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {CallProblemModal} from './CallProblemModal'\r\n\r\n\r\nexport function useOpenCallProblemModal() {\r\n    return useModalComponentOpener(CallProblemModal)\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteraction, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    isCall,\r\n    isGroupChat,\r\n    isInternalChat,\r\n    isInternalInteraction,\r\n    isPotentialGroupChat,\r\n    isPotentialInteraction,\r\n    isWorkItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useCallableItemChecker} from '../../hooks/useCallableItemChecker'\r\nimport {CallButton} from '../buttons/CallButton'\r\nimport {FlagButton} from '../buttons/FlagButton'\r\nimport {RemoteAssistButton} from '../buttons/RemoteAssistButton'\r\nimport {ReportProblemButton} from '../buttons/ReportProblemButton'\r\n\r\n\r\nconst {ChatMembersButtonProviderLoader} = createComponentLoader(\r\n    'chatCenter',\r\n    import('chatCenter'),\r\n    'ChatMembersButtonProvider',\r\n)\r\n\r\ninterface ActiveInteractionTopButtonsProps {\r\n    className?: string\r\n}\r\n\r\nexport const ActiveInteractionTopButtons: React.FC<\r\n    ActiveInteractionTopButtonsProps\r\n> = ({className}) => {\r\n    const {tenantFeatures, privileges} = useSessionState()\r\n\r\n    const interactionId = useInteractionId()\r\n    const interaction = useInteraction(interactionId)\r\n\r\n    const showFlagButton = useInteractionProp(\r\n        interactionId,\r\n        activeItem =>\r\n            !isPotentialInteraction(activeItem) && !isInternalChat(activeItem),\r\n    )\r\n    const showReportProblemButton = isWorkItem(interaction) || isCall(interaction)\r\n\r\n    const isCallableItem = useCallableItemChecker()\r\n    const showCallButton = isCallableItem(interaction)\r\n\r\n    const remoteAssistEnabled =\r\n        !!tenantFeatures?.nativeRemoteAssistEnabled &&\r\n        !!privileges.SYS_USE_REMOTE_ASSIST\r\n\r\n    const showRemoteAssistButton =\r\n        isInternalChat(interaction) && remoteAssistEnabled\r\n\r\n    const showChatMembersButton =\r\n        isGroupChat(interaction) ||\r\n        isPotentialGroupChat(interaction) ||\r\n        isInternalInteraction(interaction)\r\n\r\n\r\n    return (\r\n        <div className={tcn('flex items-center gap-2', className)}>\r\n            {showFlagButton && <FlagButton />}\r\n            {showReportProblemButton && <ReportProblemButton />}\r\n            {showRemoteAssistButton && <RemoteAssistButton />}\r\n            {showCallButton && <CallButton />}\r\n            {showChatMembersButton && (\r\n                <ChatMembersButtonProviderLoader\r\n                    scope=\"communicator\"\r\n                    size=\"16\"\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {isInternalChat, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\ntype IsCallableItemChecker = (item?: Item) => boolean\r\n\r\nexport function useCallableItemChecker(): IsCallableItemChecker {\r\n    const {userId: selfUserId} = useSessionState()\r\n\r\n    return useCallback(\r\n        (item?: Item) => {\r\n            const itemNumber = get(item, 'displayData.number')\r\n            const itemUserId =\r\n                get(item, 'userId') || get(item, 'internalChatData.userId')\r\n            const isSelf = itemUserId === selfUserId\r\n            return (\r\n                (isPotentialInteraction(item) || isInternalChat(item)) &&\r\n                Boolean(itemNumber) &&\r\n                !isSelf\r\n            )\r\n        },\r\n        [selfUserId],\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {isEmail, isExternalChat, isInternalChat, isPotentialInteraction} from '@bpinc/ad-interaction-state-methods'\r\nimport {Avatar, getAvatarType} from '@bpinc/lib-avatar-ui'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useItemNames} from '../../hooks/useItemNames'\r\n\r\n\r\nexport const ActiveItemAvatar: React.FC = () => {\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const openContactDetails = useContactDetailsOpener()\r\n    const {CALL_DETAILS_FORM: i18n} = useLocalizationState('t')\r\n\r\n    const contactId = activeItem?.contactId\r\n    const userId = activeItem?.userId\r\n    const emiUserType = activeItem?.displayData?.emiUserType\r\n    const isClickable = !!contactId || !!userId\r\n\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n\r\n    const [firstName, lastName] = useItemNames(activeItem)\r\n    const avatarUrl = getAvatarUrl({\r\n        userId,\r\n        contactId,\r\n        userType: emiUserType,\r\n        photoUrl: activeItem?.displayData?.emiPhotoUrl,\r\n    })\r\n\r\n    const interactionIcon =\r\n        isPotentialInteraction(activeItem)\r\n            ? undefined\r\n            : isExternalChat(activeItem) || isInternalChat(activeItem)\r\n                ? 'chat'\r\n                : isEmail(activeItem)\r\n                    ? 'email'\r\n                    : 'phone'\r\n\r\n    const type = getAvatarType(userId, contactId, emiUserType)\r\n\r\n    const handleAvatarClick = useEvent(() => {\r\n        openContactDetails({contactId, userId})\r\n    })\r\n\r\n    const className = tcn({\r\n        'cursor-pointer': isClickable,\r\n    })\r\n\r\n    return (\r\n        <Avatar\r\n            interactionIcon={interactionIcon}\r\n            className={className}\r\n            firstName={firstName}\r\n            lastName={lastName}\r\n            url={avatarUrl}\r\n            type={type}\r\n            onClick={handleAvatarClick}\r\n            title={isClickable ? i18n.contact_details_link_tooltip() : undefined}\r\n        />\r\n    )\r\n}\r\n","import {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\nexport function useItemNames(item?: Item): string[] {\r\n    const {\r\n        getNamesFromDisplayName,\r\n        formatFullName,\r\n    } = useFormatting()\r\n\r\n    if (!item) return ['', '']\r\n\r\n    const {\r\n        displayData: {\r\n            displayName,\r\n            firstName: callFirstName,\r\n            lastName: callLastName,\r\n        },\r\n        externalChatData,\r\n    } = item\r\n\r\n    const chatFirstName = externalChatData?.firstName\r\n    const chatLastName = externalChatData?.lastName\r\n    const finalDisplayName =\r\n        displayName ||\r\n        formatFullName(\r\n            chatFirstName || callFirstName,\r\n            chatLastName || callLastName,\r\n        )\r\n\r\n    return getNamesFromDisplayName(finalDisplayName)\r\n}\r\n","import React from 'react'\r\n\r\n\r\ninterface ActiveItemDisplayNameProps {\r\n    displayName: string\r\n}\r\n\r\nexport const ActiveItemDisplayName: React.FC<ActiveItemDisplayNameProps> = ({displayName}) => {\r\n    return (\r\n        <div className=\"truncate font-semibold body text-primary-on-primary\" data-testid=\"display-name\">\r\n            {displayName}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\n\r\n\r\ninterface ActiveItemPhoneProps {\r\n    number: string\r\n    numberType?: string\r\n    isContact: boolean\r\n}\r\n\r\nexport const ActiveItemPhone: React.FC<ActiveItemPhoneProps> = ({number, numberType, isContact}) => {\r\n    const {\r\n        formatPhoneType,\r\n    } = useFormatting()\r\n\r\n    const phoneName = formatPhoneType(numberType)\r\n\r\n    return (\r\n        <div className=\"truncate caption-s text-neutral-fade\">\r\n            {isContact && (\r\n                <>\r\n                    <span data-testid=\"phone-type\">\r\n                        {phoneName}\r\n                    </span>\r\n                    <span>: </span>\r\n                </>\r\n            )}\r\n            <span data-testid=\"phone\">\r\n                {formatPhone(number)}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContactDisplayName} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isCallConference, isChatConference, isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {InteractionFavoriteButton} from '@bpinc/lib-favorites-button'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useIsMultiuserGroupChat} from '@bpinc/state-group-chat-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ActiveInteractionTopButtons} from './ActiveInteractionTopButtons'\r\nimport {ActiveItemAvatar} from './ActiveItemAvatar'\r\nimport {ActiveItemDisplayName} from './ActiveItemDisplayName'\r\nimport {ActiveItemPhone} from './ActiveItemPhone'\r\n\r\n\r\nexport const ActiveItem: React.FC = () => {\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const {t} = useLocalizationState()\r\n    const contactId = activeItem?.contactId\r\n    const contactDisplayName = useContactDisplayName(contactId)\r\n    const isMultiuserGroupChat = useIsMultiuserGroupChat(activeItem?.groupChatId)\r\n\r\n    if (!activeItem) {\r\n        return null\r\n    }\r\n\r\n    const {\r\n        displayData: {\r\n            displayName: interactionDisplayName,\r\n            number,\r\n            numberType,\r\n        },\r\n        externalChatData,\r\n    } = activeItem\r\n\r\n    const displayName = contactDisplayName || interactionDisplayName\r\n    const notEmptyDisplayName = displayName || (\r\n        isExternalChat(activeItem)\r\n            ? t.EXTERNAL_CHAT.display_name_placeholder()\r\n            : t.GLOBAL.anonymous()\r\n    )\r\n\r\n    const showFavoritesButton =\r\n        activeItem &&\r\n        !isMultiuserGroupChat &&\r\n        !isCallConference(activeItem) &&\r\n        !isChatConference(activeItem)\r\n\r\n    return (\r\n        <div className=\"flex flex-auto items-center gap-2 px-4 py-2\" data-testid=\"party\">\r\n            <ActiveItemAvatar />\r\n            <div className=\"flex flex-auto flex-col\">\r\n                <div className=\"relative flex flex-auto items-center justify-between\">\r\n                    <div className=\"flex items-center\">\r\n                        <ActiveItemDisplayName displayName={notEmptyDisplayName} />\r\n                        {showFavoritesButton && (\r\n                            <InteractionFavoriteButton interaction={activeItem} />\r\n                        )}\r\n                    </div>\r\n                    <ActiveInteractionTopButtons />\r\n                </div>\r\n                {!externalChatData && number && (\r\n                    <ActiveItemPhone number={number} numberType={numberType} isContact={!!contactId} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isExternalChat} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ParticipantItem} from './types'\r\n\r\n\r\ntype DisplayNameParams = {\r\n    isChat?: boolean\r\n    contactDisplayName?: string\r\n}\r\n\r\nexport const useDisplayNameParticipant = ({isChat}: DisplayNameParams) => {\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName, getNamesFromDisplayName} = useFormatting()\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    assertDefined(activeItem)\r\n\r\n    return useCallback((item: ParticipantItem, contactDisplayName?: string) => {\r\n        const {\r\n            name: callPartyName,\r\n            phone,\r\n            email,\r\n            userId,\r\n        } = item\r\n        const partyDisplayName = isChat ? formatFullName(item.firstName, item.lastName) : callPartyName\r\n        const displayNameLocal = contactDisplayName || partyDisplayName\r\n        const [firstName, lastName] = displayNameLocal\r\n            ? getNamesFromDisplayName(displayNameLocal)\r\n            : [item.firstName, item.lastName]\r\n\r\n        if (!isChat) {\r\n            const displayName = displayNameLocal || (phone\r\n                ? (userId\r\n                    ? phone\r\n                    : formatPhone(phone)\r\n                )\r\n                : t.GLOBAL.anonymous()\r\n            )\r\n            return {displayName, showPhone: !!(displayNameLocal && phone), firstName, lastName}\r\n        }\r\n\r\n        const displayName = displayNameLocal || (\r\n            (phone\r\n                ? formatPhone(phone)\r\n                : (\r\n                    email || (isExternalChat(activeItem)\r\n                        ? t.EXTERNAL_CHAT.display_name_placeholder()\r\n                        : t.GLOBAL.anonymous()\r\n                    )\r\n                )\r\n            )\r\n        )\r\n        return {displayName, showPhone: !!(displayNameLocal && phone), showEmail: !!(displayNameLocal && !phone && email), firstName, lastName}\r\n    }, [getNamesFromDisplayName, formatFullName, activeItem, t, isChat])\r\n}\r\n","import {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport type {CallParty} from '@bpinc/ad-interaction-state-types'\r\nimport type {ExternalChatParty} from '@bpinc/ad-transport-types'\r\n\r\nimport type {ParticipantItem} from './types'\r\nimport {useDisplayNameParticipant} from './useDisplayNameParticipant'\r\n\r\n\r\nexport const MAX_PARTICIPANTS_COUNT = 3\r\n\r\ntype Parties = {\r\n    callParties?: CallParty[]\r\n    chatParties?: ExternalChatParty[]\r\n}\r\n\r\nexport function getParticipantsListData({callParties, chatParties}: Parties) {\r\n    if (callParties?.length) {\r\n        return callParties?.map(party => ({\r\n            id: party.id,\r\n            name: party.name,\r\n            phone: party.phone,\r\n            firstName: party.firstName,\r\n            lastName: party.lastName,\r\n            userId: party.userId,\r\n            contactId: party.contactId,\r\n            party: party,\r\n        }))\r\n    }\r\n    return chatParties?.map(party => ({\r\n        id: party.party_id,\r\n        phone: party.phone,\r\n        itemId: party.item_id,\r\n        firstName: party.first_name,\r\n        lastName: party.last_name,\r\n        userId: party.user_id,\r\n        contactId: party.contact_id,\r\n        email: party.email,\r\n        party: party,\r\n    }))\r\n}\r\n\r\nexport const useContacts = (ids: string[] | undefined) => {\r\n    const {formatFullName} = useFormatting()\r\n    const {contacts} = useContactsState()\r\n    return ids?.map(id => formatFullName(contacts[id]?.data?.firstName, contacts[id]?.data?.lastName))\r\n}\r\n\r\nexport const useDisplayNamesParticipants = (participantItems?: ParticipantItem[], isChat?: boolean) => {\r\n    const data = participantItems?.slice(0, MAX_PARTICIPANTS_COUNT)\r\n    const contactIds = data?.map(({contactId}) => contactId).filter(id => id !== undefined)\r\n    const contacts = useContacts(contactIds as string[])\r\n    const getDisplayName = useDisplayNameParticipant({isChat})\r\n    return data?.map((item, i) => getDisplayName(item, contacts?.[i]).displayName).join(', ')\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {ControlButton} from './types'\r\n\r\n\r\nexport const DisconnectButton: FC<ControlButton> = ({onClick, className}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <button\r\n            className={tcn('underline button-sm text-primary-action', className)}\r\n            onClick={onClick}\r\n            data-testid=\"remove-party-button\"\r\n        >\r\n            {t.INTERACTIONS.disconnect()}\r\n        </button>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useContactDisplayName, useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {DisconnectButton} from '@bpinc/lib-interaction-buttons/src/DisconnectButton'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useDisplayNameParticipant} from './helpers/useDisplayNameParticipant'\r\nimport type {ParticipantItem} from './helpers'\r\n\r\n\r\ntype Props = {\r\n    isChat?: boolean\r\n    item: ParticipantItem\r\n    onRemoveItem: (id: string) => void\r\n    canRemove?: boolean\r\n}\r\n\r\nexport const InteractionParticipantsListItem: FC<Props> = ({item, onRemoveItem, isChat, canRemove}) => {\r\n    const {phone, id, userId, contactId, email, is_qm} = item\r\n    const contactDisplayName = useContactDisplayName(contactId)\r\n    const getDisplayInfo = useDisplayNameParticipant({isChat})\r\n    const {firstName, lastName, displayName, showPhone, showEmail} = getDisplayInfo(item, contactDisplayName)\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    assertDefined(activeItem)\r\n\r\n    const avatarUrl = getAvatarUrl({userId, contactId})\r\n    const isSupervisor = is_qm === '1'\r\n    const showDisconnectButton = isChat ? !isAfterCallWork(activeItem) && userId && !isSupervisor : canRemove\r\n    const avatarType = userId ? 'user' : contactId ? 'contact' : 'unknown'\r\n\r\n    const handleDisconnect = useCallback(() => {\r\n        onRemoveItem(id)\r\n    }, [onRemoveItem, id])\r\n\r\n    return (\r\n        <div\r\n            tabIndex={0}\r\n            className={tcn('group flex cursor-pointer items-center justify-between gap-2 rounded-xs',\r\n                'px-2 py-1 transition-colors hover:state-layer-bg-dark-on-white-1 focus:state-layer-bg-dark-on-white-1',\r\n                'active:state-layer-bg-dark-on-white-1',\r\n            )}\r\n        >\r\n            <div className=\"flex items-center\">\r\n                <Avatar\r\n                    size=\"16\"\r\n                    headPhones={!!userId}\r\n                    url={avatarUrl}\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    type={avatarType}\r\n                />\r\n                <div className=\"ml-1 flex gap-x-1 overflow-hidden\">\r\n                    <div className=\"flex items-center overflow-hidden\">\r\n                        <div\r\n                            className=\"truncate font-semibold caption-s text-primary-on-primary\"\r\n                            data-testid=\"display-name\"\r\n                        >\r\n                            {displayName}\r\n                        </div>\r\n                        {/*TO DO: add this button when designer will add in layout*/}\r\n                        {/*    <InteractionFavoriteButton interaction={activeItem} party={item.party} />*/}\r\n                    </div>\r\n\r\n                    {showPhone && (\r\n                        <div\r\n                            className=\"truncate caption-s text-primary-on-primary\"\r\n                            data-testid=\"phone\"\r\n                        >\r\n                            {userId\r\n                                ? phone\r\n                                : formatPhone(phone)\r\n                            }\r\n                        </div>\r\n                    )}\r\n                    {showEmail && (\r\n                        <div\r\n                            className=\"truncate caption-s text-primary-on-primary\"\r\n                            data-testid=\"email\"\r\n                        >\r\n                            {email}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {showDisconnectButton && (\r\n                <DisconnectButton\r\n                    onClick={handleDisconnect}\r\n                    className=\"opacity-0 hover:opacity-100 focus:opacity-100 active:opacity-100 group-hover:opacity-100 group-focus:opacity-100\"\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\n\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {Avatar as NewAvatarUI} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport type {ParticipantItem} from './helpers'\r\nimport {MAX_PARTICIPANTS_COUNT, useAvatarParticipantsList} from './helpers'\r\n\r\n\r\nexport const MultiAvatar: FC<{avatarsItems: ParticipantItem[]}> = ({avatarsItems}) => {\r\n    const leftItemsCount = `+${avatarsItems?.length - 1}`\r\n    const avatarParticipantsList = useAvatarParticipantsList(avatarsItems)\r\n    if (!avatarParticipantsList?.length) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className=\"flex items-center -space-x-1\">\r\n            {avatarParticipantsList.map((item, i) => {\r\n                const index = avatarParticipantsList.length - i\r\n                return (\r\n                    <Avatar\r\n                        key={i}\r\n                        {...item}\r\n                        className={tcn(`z-[${index}] border border-white`)}\r\n                    />\r\n                )\r\n            })}\r\n            {avatarsItems?.length > MAX_PARTICIPANTS_COUNT && <NewAvatarUI fallback={leftItemsCount} className=\"z-0\" />}\r\n        </div>\r\n    )\r\n}\r\n","import {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\nimport type {MultiAvatarItem, ParticipantItem} from './types'\r\n\r\n\r\nexport const useAvatarParticipantsList = (parties: ParticipantItem[]) => {\r\n    const {userId: selfUserId, firstName, lastName} = useSessionState()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const avatarItemsProps: MultiAvatarItem[] = parties.map(item => ({\r\n        firstName: item.firstName,\r\n        lastName: item.lastName,\r\n        type: item.userId ? 'user' as const : item.contactId ? 'contact' as const : 'unknown' as const,\r\n        url: getAvatarUrl({userId: item.userId, contactId: item.contactId}),\r\n    }))\r\n\r\n    if (selfUserId) {\r\n        avatarItemsProps.push({\r\n            firstName,\r\n            lastName,\r\n            url: getAvatarUrl({userId: selfUserId}),\r\n            type: 'user',\r\n        })\r\n    }\r\n    return avatarItemsProps.slice(0, 3)\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {Avatar} from '@bpinc/lib-avatar-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const SelfItem = () => {\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const {t} = useLocalizationState()\r\n    const {formatFullName} = useFormatting()\r\n    const {userId, isAgent, firstName, lastName} = useSessionState()\r\n    const avatarUrl = getAvatarUrl({userId})\r\n    return (\r\n        <div\r\n            tabIndex={0}\r\n            className={tcn('group flex shrink-0 cursor-pointer items-center justify-between gap-2 rounded-xs',\r\n                'px-2 py-1 transition-colors hover:state-layer-bg-dark-on-white-1',\r\n            )}\r\n        >\r\n            <div className=\"flex items-center\">\r\n                <Avatar\r\n                    size=\"16\"\r\n                    headPhones={isAgent}\r\n                    url={avatarUrl}\r\n                    firstName={firstName}\r\n                    lastName={lastName}\r\n                    type={isAgent ? 'user' : 'contact'}\r\n                />\r\n                <div className=\"ml-1 flex gap-x-1 overflow-hidden\">\r\n                    <div className=\"flex items-center overflow-hidden\">\r\n                        <div className=\"truncate font-semibold caption-s text-primary-on-primary\" data-testid=\"display-name\">\r\n                            {formatFullName(firstName, lastName)}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"truncate caption-s text-primary-on-primary\">\r\n                        {t.INTERACTIONS.self_item_name()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport * as RCollapsible from '@radix-ui/react-collapsible'\r\n\r\nimport {useBoolean} from '@bpinc/lib-helpers'\r\nimport {IconChevronDown16} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {ActiveInteractionTopButtons} from '../active-interaction/ActiveInteractionTopButtons'\r\nimport type {ParticipantItem} from './helpers'\r\nimport {MAX_PARTICIPANTS_COUNT, useDisplayNamesParticipants} from './helpers'\r\nimport {InteractionParticipantsListItem} from './InteractionParticipantsListItem'\r\nimport {MultiAvatar} from './MultiAvatar'\r\nimport {SelfItem} from './SelfItem'\r\n\r\n\r\nexport type ParticipantsListData = {\r\n    participantsItems?: ParticipantItem[]\r\n    onRemoveItem: (id: string) => void\r\n    canRemove?: boolean\r\n    isChat?: boolean\r\n}\r\n\r\nexport const InteractionParticipantsList: FC<ParticipantsListData> = ({\r\n    participantsItems,\r\n    onRemoveItem,\r\n    canRemove,\r\n    isChat,\r\n}) => {\r\n    const {value: open, toggle} = useBoolean()\r\n    const {t: {INTERACTIONS}} = useLocalizationState()\r\n    const displayNames = useDisplayNamesParticipants(participantsItems, isChat)\r\n    const countOfParticipants = participantsItems?.length\r\n    if (!countOfParticipants) {\r\n        return null\r\n    }\r\n\r\n    const renderTrigger = () => {\r\n        return (\r\n            <div className=\"flex items-center gap-x-2\">\r\n                <MultiAvatar avatarsItems={participantsItems} />\r\n                <div className=\"flex flex-col\">\r\n                    <span className=\"truncate font-semibold body\">{displayNames}</span>\r\n                    <div className=\"flex gap-0.5\">\r\n                        <div className=\"caption-s text-neutral-fade\">\r\n                            {INTERACTIONS.count_members(countOfParticipants + 1)}\r\n                        </div>\r\n                        <IconChevronDown16 className={tcn('transition-transform duration-300', {'-rotate-180': open})} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <div className=\"scrollbar-general flex max-h-[136px] flex-col overflow-y-auto pl-4 pr-2\">\r\n                {participantsItems.map((item, i) => (\r\n                    <InteractionParticipantsListItem\r\n                        key={i}\r\n                        item={item}\r\n                        onRemoveItem={onRemoveItem}\r\n                        isChat={isChat}\r\n                        canRemove={canRemove}\r\n                    />\r\n                ))}\r\n                {countOfParticipants < MAX_PARTICIPANTS_COUNT && <SelfItem />}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <RCollapsible.Root open={open} onOpenChange={toggle}>\r\n            <div data-testid=\"parties\" className=\"flex w-full items-center justify-between px-4 py-2\">\r\n                <RCollapsible.Trigger>\r\n                    {renderTrigger()}\r\n                </RCollapsible.Trigger>\r\n                <ActiveInteractionTopButtons className=\"mt-2.5\" />\r\n            </div>\r\n            <RCollapsible.Content className=\"pr-1\">\r\n                {renderContent()}\r\n            </RCollapsible.Content>\r\n        </RCollapsible.Root>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {CallParty} from '@bpinc/ad-interaction-state-types'\r\n\r\nimport {getParticipantsListData} from '../InteractionParticipantsList/helpers'\r\nimport {InteractionParticipantsList} from '../InteractionParticipantsList/InteractionParticipantsList'\r\n\r\n\r\ninterface CallConferenceParties {\r\n    isHost: boolean | undefined\r\n    callParties: CallParty[] | undefined\r\n}\r\n\r\nexport const CallConferenceParties: React.FC<CallConferenceParties> = ({isHost, callParties = []}) => {\r\n    const participantsListData = getParticipantsListData({callParties})\r\n    const {removeCallParty} = useInteractionStateMethods()\r\n\r\n    const onRemoveItem = useCallback((id: string) => {\r\n        const party = callParties.find(i => i.id === id)\r\n        if (party) {\r\n            removeCallParty(party)\r\n        }\r\n    }, [removeCallParty, callParties])\r\n\r\n    return (\r\n        <InteractionParticipantsList\r\n            onRemoveItem={onRemoveItem}\r\n            canRemove={!!isHost}\r\n            participantsItems={participantsListData}\r\n        />\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionChatStateMethods} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getChatParties} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {getParticipantsListData} from '../InteractionParticipantsList/helpers'\r\nimport {InteractionParticipantsList} from '../InteractionParticipantsList/InteractionParticipantsList'\r\n\r\n\r\nexport const ChatConferenceParties = () => {\r\n    const interactionId = useInteractionId()\r\n    const chatParties = useAssociatedChatInteractionProp(interactionId, getChatParties)\r\n    const participantsListData = getParticipantsListData({chatParties})\r\n    const {removePartyFromChat} = useInteractionChatStateMethods()\r\n\r\n    const onRemoveItem = useCallback ((id: string) => {\r\n        const party = chatParties?.find(p => p.party_id === id)\r\n        if (party && party.party_id && party.item_id) {\r\n            removePartyFromChat({partyId: party.party_id, itemId: party.item_id})\r\n        }\r\n    }, [chatParties, removePartyFromChat])\r\n\r\n    return (\r\n        <InteractionParticipantsList\r\n            isChat\r\n            onRemoveItem={onRemoveItem}\r\n            participantsItems={participantsListData}\r\n        />\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone, getInitials} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactDetailsOpener} from '@bpinc/ad-interaction-state-hooks'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Avatar} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const WorkitemDisplayContent: React.FC = () => {\r\n    const t = useLocalizationState('t')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const openContactDetails = useContactDetailsOpener()\r\n\r\n    assertDefined(activeItem)\r\n    assertDefined(activeItem.workitemData)\r\n\r\n    const {\r\n        firstName: listFirstName,\r\n        lastName: listLastName,\r\n    } = activeItem.workitemData.contactInfo\r\n    const listFullName = formatFullName(listFirstName, listLastName)\r\n    const listDisplayName = listFullName || t.GLOBAL.anonymous()\r\n\r\n    const contactId = activeItem.contactId\r\n    const {data: contactData, isLoading: contactLoading} = useContact(contactId) ?? {}\r\n    const {\r\n        firstName: contactFirstName,\r\n        lastName: contactLastName,\r\n        primaryPhone,\r\n        primaryEmail,\r\n    } = contactData ?? {}\r\n\r\n    const contactFullName = formatFullName(contactFirstName, contactLastName)\r\n    const contactPrimaryPhoneNumber = formatPhone(primaryPhone?.phone)\r\n    const contactPrimaryEmailAddress = primaryEmail?.emailAddress\r\n    const contactDisplayName =\r\n        contactFullName ||\r\n        contactPrimaryPhoneNumber ||\r\n        contactPrimaryEmailAddress ||\r\n        t.GLOBAL.anonymous()\r\n\r\n    const avatarUrl = getAvatarUrl({contactId})\r\n    const avatarInitials = getInitials(contactFirstName, contactLastName)\r\n\r\n    const handleAvatarClick = useEvent(() => {\r\n        openContactDetails({contactId})\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"my-2 ml-4 mr-6 truncate body text-primary-on-primary\">\r\n                <span data-testid=\"list-record-name\">\r\n                    {listDisplayName}\r\n                </span>\r\n            </div>\r\n            {contactId && !contactLoading && (\r\n                <div className=\"mx-4 my-2 flex items-center gap-2\">\r\n                    <Avatar\r\n                        type=\"contact\"\r\n                        src={avatarUrl}\r\n                        fallback={avatarInitials}\r\n                        tooltip={t.CALL_DETAILS_FORM.contact_details_link_tooltip()}\r\n                        onClick={handleAvatarClick}\r\n                    />\r\n                    <div className=\"truncate font-semibold body text-primary-on-primary\">\r\n                        <span data-testid=\"name\">\r\n                            {contactDisplayName}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isCallConference, isChatConference, isNeedToShowWorkitemUI} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {ActiveItem} from './ActiveItem'\r\nimport {CallConferenceParties} from './CallConferenceParties'\r\nimport {ChatConferenceParties} from './ChatConferenceParties'\r\nimport {WorkitemDisplayContent} from './WorkitemDisplayContent'\r\n\r\n\r\nexport const ActiveInteractionTop: React.FC = React.memo(() => {\r\n    const interactionId = useInteractionId()\r\n\r\n    const activeItemIsCallConference = useInteractionProp(interactionId, isCallConference)\r\n    const activeItemIsChatConference = useInteractionProp(interactionId, isChatConference)\r\n    const parties = useInteractionProp(interactionId, activeItem => activeItem?.parties)\r\n    const isHost = useInteractionProp(interactionId, activeItem => activeItem?.isConferenceHost)\r\n    const needToShowWorkitemUI = useInteractionProp(interactionId, isNeedToShowWorkitemUI)\r\n\r\n    if (needToShowWorkitemUI) {\r\n        return <WorkitemDisplayContent />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!activeItemIsChatConference && !activeItemIsCallConference && <ActiveItem />}\r\n            {activeItemIsCallConference && (\r\n                <CallConferenceParties isHost={isHost} callParties={parties} />\r\n            )}\r\n            {activeItemIsChatConference && <ChatConferenceParties />}\r\n        </>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\n\r\nimport {\r\n    useInteractionChatData,\r\n    useInteractionChatStateConnector,\r\n    useInteractionChatStateMethods,\r\n    useInteractionChatStateSelector,\r\n    useWebRtcConfig,\r\n} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallHandler} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRescueState} from '@bpinc/ad-rescue-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {IconCobrowsing} from '@bpinc/lib-icons'\r\nimport {MuteButton, TransferButton} from '@bpinc/lib-interaction-buttons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {\r\n    CircleButton,\r\n    IconCamera,\r\n    IconCameraOff,\r\n    IconEndWebCall,\r\n    IconRemoteAssist,\r\n    IconStartWebCall,\r\n    IconVoiceInbound,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal, useShowSlidingModalChecker} from '@bpinc/lib-sliding-modal-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {CircleButton as LegacyCircleButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useOpenRescueModal} from '../../../../modals'\r\nimport {CompleteButton} from './CompleteButton'\r\nimport {RemoteAssistButton} from './RemoteAssistButton'\r\n\r\n\r\ninterface ChatButtonsProps {\r\n    onClose: (arg0: React.MouseEvent) => void\r\n}\r\n\r\nexport const ChatButtons: React.FC<ChatButtonsProps> = ({onClose}) => {\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const interactionId = useInteractionId()\r\n    const showTransferModal = useShowSlidingModalChecker(interactionId, 'transfer')\r\n    const {t} = useLocalizationState()\r\n    const activeItem = useInteraction(interactionId)\r\n    const handleCall = useCallHandler()\r\n    const {\r\n        createRtcCall: createChatCall,\r\n        stopRtcCall: stopChatCall,\r\n        toggleRtcCallDevice: toggleChatCallDevice,\r\n        requestCobrowsing,\r\n    } = useInteractionChatStateMethods()\r\n    const webRtcConfig = useWebRtcConfig()\r\n    const activeChatId = getInteractionStepId(activeItem)\r\n    const chatData = useInteractionChatData(activeChatId)\r\n    const {tenantFeatures, privileges} = useSessionState()\r\n    const interactionChatStateConnector = useInteractionChatStateConnector()\r\n\r\n    const phone = activeItem?.displayData.number\r\n    const cobrowsingWidgetKey = chatData?.cobrowsingWidgetKey\r\n    const isCobrowsingActive = chatData?.cobrowsingActive\r\n    const chatCall = chatData?.call\r\n    const doesAnotherChatWithCallExist = useInteractionChatStateSelector(s =>\r\n        Object.keys(s.chatData).some(id => id !== activeChatId && s.chatData[id].call?.isConfirmed),\r\n    )\r\n\r\n    const isChatCallActive = !!chatCall?.isConfirmed\r\n    const remoteAssistEnabled = !!tenantFeatures?.nativeRemoteAssistEnabled && !!privileges.SYS_USE_REMOTE_ASSIST\r\n    const chatInDeliveredState = activeItem?.state === 'delivered' || activeItem?.state === 'hold'\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionChatStateConnector.dispenser.subscribe({\r\n            onCobrowsingStarted: cobrowsingPayload => {\r\n                if (cobrowsingPayload.cobrowsingLink) {\r\n                    window.open(cobrowsingPayload.cobrowsingLink, '_blank', '')\r\n                }\r\n            },\r\n        })\r\n        return () => subscription.unsubscribe()\r\n    }, [interactionChatStateConnector])\r\n\r\n    const handleCallClick = useCallback(\r\n        function handleCallClickCallback() {\r\n            handleCall({\r\n                phone,\r\n                contactId: activeItem?.contactId,\r\n                userId: activeItem?.userId,\r\n                firstName: activeItem?.displayData?.firstName,\r\n                lastName: activeItem?.displayData?.lastName,\r\n                origination: 'interaction',\r\n            })\r\n        },\r\n        [\r\n            activeItem?.contactId,\r\n            activeItem?.displayData?.firstName,\r\n            activeItem?.displayData?.lastName,\r\n            activeItem?.userId,\r\n            handleCall,\r\n            phone,\r\n        ],\r\n    )\r\n\r\n    const handleChatCallStart = useCallback(\r\n        function handleChatCallStartCallback() {\r\n            createChatCall({chatId: activeChatId, isConfirmed: true})\r\n        },\r\n        [activeChatId, createChatCall],\r\n    )\r\n\r\n    const handleChatCallClose = useCallback(\r\n        function handleChatCallCloseCallback() {\r\n            stopChatCall({chatId: activeChatId})\r\n        },\r\n        [activeChatId, stopChatCall],\r\n    )\r\n\r\n    const handleChatCallToggleAudio = useCallback(\r\n        function handleChatCallToggleAudioCallback() {\r\n            if (chatCall) {\r\n                toggleChatCallDevice({\r\n                    chatId: activeChatId,\r\n                    device: 'audio',\r\n                    enabled: !chatCall.withAudio,\r\n                })\r\n            }\r\n        },\r\n        [activeChatId, toggleChatCallDevice, chatCall],\r\n    )\r\n\r\n    const handleChatCallToggleVideo = useCallback(\r\n        function handleChatCallToggleVideoCallback() {\r\n            if (chatCall) {\r\n                toggleChatCallDevice({\r\n                    chatId: activeChatId,\r\n                    device: 'video',\r\n                    enabled: !chatCall.withVideo,\r\n                })\r\n            }\r\n        },\r\n        [activeChatId, toggleChatCallDevice, chatCall],\r\n    )\r\n\r\n    const handleCobrowsingClick = useCallback(\r\n        function handleCobrowsingClickCallback() {\r\n            if (activeChatId && !isCobrowsingActive && activeItem?.state === 'delivered') {\r\n                requestCobrowsing(activeChatId)\r\n            }\r\n        },\r\n        [activeChatId, isCobrowsingActive, activeItem, requestCobrowsing],\r\n    )\r\n\r\n    const toggleTransfer = useCallback(\r\n        function toggleTransferCallback() {\r\n            openInteractionSlidingModal(interactionId, 'transfer')\r\n        },\r\n        [openInteractionSlidingModal, interactionId],\r\n    )\r\n\r\n    const openRescueModal = useOpenRescueModal()\r\n    const {isEnabled: isRescueEnabled} = useRescueState()\r\n\r\n    const handleRescueClick = useCallback(() => {\r\n        openRescueModal({type: 'chat'})\r\n    }, [openRescueModal])\r\n\r\n    return (\r\n        <div className=\"flex size-full items-center justify-between\">\r\n            <div className=\"flex h-7 items-center gap-2.5\">\r\n                {chatInDeliveredState && (\r\n                    <TransferButton\r\n                        iconClassName=\"icon-fade\"\r\n                        isActive={showTransferModal}\r\n                        onClick={toggleTransfer}\r\n                        tooltip={t.EXTERNAL_CHAT.invite_dialog_label()}\r\n                    />\r\n                )}\r\n                {chatInDeliveredState && isChatCallActive && (\r\n                    <>\r\n                        <MuteButton\r\n                            isActive={!chatCall?.withAudio}\r\n                            onClick={handleChatCallToggleAudio}\r\n                            data-testid=\"webrtc-mute-button\"\r\n                            data-muted={!chatCall?.withAudio || undefined}\r\n                        />\r\n                        <CircleButton\r\n                            isActive={!chatCall?.withVideo}\r\n                            onClick={handleChatCallToggleVideo}\r\n                            tooltip={{content:\r\n                                chatCall?.withVideo\r\n                                    ? t.CALL_DETAILS_FORM.voip_video_on_tooltip()\r\n                                    : t.CALL_DETAILS_FORM.voip_video_off_tooltip(),\r\n                            }}\r\n                            data-testid=\"webrtc-video-button\"\r\n                            data-video-active={chatCall?.withVideo || undefined}\r\n                        >\r\n                            {chatCall?.withVideo\r\n                                ? <IconCamera className=\"size-4.5 icon-fade\" />\r\n                                : <IconCameraOff className=\"size-4.5 icon-fade\" />\r\n                            }\r\n                        </CircleButton>\r\n                    </>\r\n                )}\r\n                {chatInDeliveredState && (\r\n                    <>\r\n                        {cobrowsingWidgetKey && (\r\n                            <LegacyCircleButton\r\n                                active={isCobrowsingActive && activeItem?.state === 'delivered'}\r\n                                onClick={handleCobrowsingClick}\r\n                                tooltip={t.INTERNAL_CHAT.chat_cobrowsing_button_tooltip()}\r\n                                data-testid=\"request-cobrowsing-button\"\r\n                                clickThrottle={500}\r\n                            >\r\n                                <IconCobrowsing />\r\n                            </LegacyCircleButton>\r\n                        )}\r\n\r\n                        {isRescueEnabled && !remoteAssistEnabled && (\r\n                            <CircleButton\r\n                                onClick={handleRescueClick}\r\n                                tooltip={{content: t.CALL_DETAILS_FORM.button_remote_access_tooltip()}}\r\n                                data-testid=\"remote-assist-button\"\r\n                            >\r\n                                <IconRemoteAssist />\r\n                            </CircleButton>\r\n                        )}\r\n\r\n                        {remoteAssistEnabled && <RemoteAssistButton />}\r\n                    </>\r\n                )}\r\n            </div>\r\n            <div className=\"flex h-7 items-center\">\r\n                {/*TO DO: add clickThrottle={500} when we will refactor button in jskit-ui*/}\r\n                {chatInDeliveredState && (webRtcConfig || isChatCallActive) && (\r\n                    <>\r\n                        <CircleButton\r\n                            className=\"mr-2\"\r\n                            onClick={isChatCallActive ? handleChatCallClose : handleChatCallStart}\r\n                            tooltip={{content: isChatCallActive\r\n                                ? t.CALL_DETAILS_FORM.interaction_endCall()\r\n                                : t.EXTERNAL_CHAT.button_start_web_call_tooltip(),\r\n                            }}\r\n                            disabled={!isChatCallActive ? doesAnotherChatWithCallExist : false}\r\n                            data-testid={isChatCallActive ? 'webrtc-end-call-button' : 'webrtc-call-button'}\r\n                        >\r\n                            {isChatCallActive\r\n                                ? <IconEndWebCall className=\"size-5\" />\r\n                                : <IconStartWebCall className=\"size-5\" />\r\n                            }\r\n                        </CircleButton>\r\n                        <CircleButton\r\n                            disabled={!phone}\r\n                            className=\"mr-2 h-7 w-12 rounded-xs\"\r\n                            onClick={handleCallClick}\r\n                            tooltip={{content: t.CALL_DETAILS_FORM.voip_start_tooltip()}}\r\n                            data-testid=\"call-button\"\r\n                        >\r\n                            <IconVoiceInbound className={tcn('size-5', {'icon-disabled': !phone})} />\r\n                        </CircleButton>\r\n                    </>\r\n                )}\r\n                <CompleteButton isChat handleCloseClick={onClose} item={activeItem} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useSubscribeForUserDetails, useUserDetailsState} from '@bpinc/ad-user-details-state-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\n\r\nconst {AgentSupervisorControlsLoader} = createComponentLoader('supervision', () => import('supervision'), 'AgentSupervisorControls')\r\n\r\ntype SupervisorButtonsProps = {\r\n    item: Item\r\n}\r\n\r\nexport const SupervisorButtons: React.FC<SupervisorButtonsProps> = ({item}) => {\r\n    const selfUserId = useSessionState('userId')\r\n\r\n    const userIds = useMemo(() => {\r\n        const chatUserIds = (item.allChatParties || [])\r\n            .filter(p => p.user_id && p.is_qm !== '1' && p.user_id !== selfUserId)\r\n            .map(p => p.user_id || '')\r\n\r\n        const callUserIds = (item.allParties || [])\r\n            .filter(p => p.userId && p.role !== 'supervisor' && p.userId !== selfUserId)\r\n            .map(p => p.userId || '')\r\n\r\n        return [...chatUserIds, ...callUserIds]\r\n    }, [item.allChatParties, item.allParties, selfUserId])\r\n\r\n    useSubscribeForUserDetails(userIds)\r\n\r\n    const qmMonitoredItemId = item.scenarioData?.qmMonitoredItemId\r\n    assertDefined(qmMonitoredItemId)\r\n\r\n    const userId = useUserDetailsState(s => {\r\n        const itemUserMap = userIds.reduce<Record<string, string>>((result, id) => {\r\n            const {userId: userDataId, items} = s.userDetails[id]?.data || {}\r\n            if (!userDataId || !items?.length) {\r\n                return result\r\n            }\r\n            items.forEach(i => {\r\n                result[i.id] = userDataId\r\n            })\r\n            return result\r\n        }, {})\r\n\r\n        return itemUserMap[qmMonitoredItemId]\r\n    })\r\n\r\n    if (!userId) {\r\n        return null\r\n    }\r\n\r\n    return <AgentSupervisorControlsLoader userId={userId} itemId={qmMonitoredItemId} />\r\n}\r\n","import {useContact} from '@bpinc/ad-contacts-state-context'\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getContactId,\r\n    getGlobalInteractionId,\r\n    getPhoneFromItem,\r\n    getServiceId,\r\n    getServiceNameFromItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/ad-navigation-state-context'\r\nimport {useAuthorizedSession} from '@bpinc/ad-session-context'\r\nimport {useTimezonesState} from '@bpinc/ad-timezones-state-context'\r\nimport type {CalendarContact, CalendarEventDetails} from '@bpinc/cal-request-urls'\r\nimport {useCalendarStateMethods} from '@bpinc/cal-state-context'\r\nimport {getUserTimezone, useEvent} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {IconAddEvent} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined, withoutUndefinedKeys} from '@bpinc/lib-types-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport type {MoreOption} from './useMoreButtons'\r\n\r\n\r\nexport const useScheduleReminderOption = () => {\r\n    const {GLOBAL: i18n} = useLocalizationState('t')\r\n    const {localTimezone} = useTimezonesState()\r\n    const {selectEvent} = useCalendarStateMethods()\r\n    const {userId, firstName, lastName} = useAuthorizedSession()\r\n    const interactionId = useInteractionId()\r\n    const item = useInteraction(interactionId)\r\n    const goTo = useNavigationState('goTo')\r\n    const {formatFullName} = useFormatting()\r\n\r\n    const contactId = getContactId(item)\r\n    const contact = useContact(contactId)\r\n\r\n    const itemPhoneNumber = getPhoneFromItem(item)\r\n\r\n    const itemContactPhone = contact?.data\r\n        ? contact.data.nonEmptyPhones?.find(phone => phone.phone === itemPhoneNumber)\r\n        : undefined\r\n    const itemContactData: CalendarContact | undefined = contact?.data ? {\r\n        id: contactId,\r\n        first_name: contact.data.firstName,\r\n        last_name: contact.data.lastName,\r\n        create: false,\r\n        calendar_phone: itemContactPhone,\r\n    } : undefined\r\n\r\n    const userName = formatFullName(firstName, lastName)\r\n    const timezone = localTimezone.length ? localTimezone : getUserTimezone()\r\n\r\n    const handleScheduleReminderClick = useEvent(() => {\r\n        assertDefined(item)\r\n\r\n        const newCalendarEvent: CalendarEventDetails = withoutUndefinedKeys({\r\n            _temporaryId: uuid(),\r\n            startTime: Date.now(),\r\n            endTime: hourAfter(Date.now()),\r\n            userId,\r\n            userName,\r\n\r\n            number: itemPhoneNumber,\r\n            email: item.displayData.email,\r\n            name: item.displayData.displayName,\r\n            serviceId: getServiceId(item),\r\n            serviceName: getServiceNameFromItem(item),\r\n            globalInteractionId: getGlobalInteractionId(item),\r\n\r\n            // screenpop: ???,\r\n            screenpopSize: 0,\r\n\r\n            listLinkId: item.workitemData?.listLinkId,\r\n            listRecordId: item.workitemData?.listRecordId,\r\n\r\n            assignees: [{\r\n                userId,\r\n                displayText: userName,\r\n                type: 'user',\r\n            }],\r\n            contacts: itemContactData ? [itemContactData] : [],\r\n\r\n            allDay: false,\r\n            completed: false,\r\n            remindIn: 10,\r\n            remindInUnit: 'MINUTES',\r\n            timezone,\r\n            title: '',\r\n        })\r\n\r\n        // TODO: set interaction.disposition.calendarEntryExists = true\r\n        goTo(AppRoutes.calendar)\r\n        selectEvent(newCalendarEvent)\r\n    })\r\n\r\n\r\n    return {\r\n        onClick: handleScheduleReminderClick,\r\n        tooltip: i18n.button_followUpActivity_tooltip(),\r\n        'data-testid': 'schedule-interaction-event-button',\r\n        Icon: IconAddEvent,\r\n    } satisfies MoreOption\r\n}\r\n\r\nfunction hourAfter(timestamp: number): number {\r\n    return timestamp + 3_600_000\r\n}\r\n","import React, {useCallback, useRef} from 'react'\r\n\r\nimport {SmList} from '@bpinc/lib-external-ui-elements'\r\nimport {useBoolean, useOutsideClick} from '@bpinc/lib-helpers'\r\nimport {CircleButton, IconMore} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useMoreButtons} from './useMoreButtons'\r\n\r\n\r\nexport const ShowMoreButton: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const showMoreList = useRef<HTMLDivElement>(null)\r\n    const {value: show, toggle: toggleShow} = useBoolean(false)\r\n\r\n    useOutsideClick({\r\n        ref: showMoreList,\r\n        handler: () => {\r\n            toggleShow(false)\r\n        },\r\n    })\r\n\r\n    const openShowMoreList = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            if (!show) {\r\n                e.nativeEvent.stopImmediatePropagation()\r\n                toggleShow(true)\r\n            }\r\n        },\r\n        [show, toggleShow],\r\n    )\r\n\r\n\r\n    const moreButtons = useMoreButtons(toggleShow)\r\n    if (!moreButtons.length) {\r\n        return null\r\n    }\r\n\r\n    if (moreButtons.length === 1) {\r\n        const [{Icon, tooltip, ...props}] = moreButtons\r\n\r\n        return (\r\n            <CircleButton {...props} tooltip={{content: tooltip}}>\r\n                {Icon && <Icon className=\"flex size-4 items-center justify-center\" />}\r\n            </CircleButton>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div ref={showMoreList}>\r\n            <CircleButton\r\n                isActive={show}\r\n                tooltip={{content: t.GLOBAL.show_more()}}\r\n                onMouseDown={openShowMoreList}\r\n                data-testid=\"show-more-button\"\r\n            >\r\n                <IconMore className=\"icon-fade\" />\r\n            </CircleButton>\r\n            <div>\r\n                {show && (\r\n                    <SmList\r\n                        className=\"absolute z-[200] min-w-[168px] rounded border border-main-border bg-white\"\r\n                        verticalAlign=\"middle\"\r\n                        data-testid=\"more-buttons-list\"\r\n                    >\r\n                        {moreButtons.map(button => {\r\n                            const {Icon} = button\r\n                            return (\r\n                                <SmList.Item\r\n                                    as=\"button\"\r\n                                    key={button['data-testid']}\r\n                                    data-testid={button['data-testid']}\r\n                                    aria-label={button.tooltip}\r\n                                    className={tcn('relative flex h-[37px] cursor-pointer items-center bg-transparent',\r\n                                        'w-full gap-x-2 border-none px-3 py-2.5 text-primary-on-primary hover:bg-menu-bg-hover')}\r\n                                    onClick={button.onClick}\r\n                                    disabled={button.disabled}\r\n                                >\r\n                                    {Icon && <Icon className=\"size-4\" />}\r\n                                    <SmList.Content className=\"caption-s\">\r\n                                        {button.tooltip}\r\n                                    </SmList.Content>\r\n                                </SmList.Item>\r\n                            )\r\n                        })}\r\n                    </SmList>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useIntegrationApiStateMethods, useIntegrationApiStateRef} from '@bpinc/ad-integration-api-state-context'\r\nimport {useInteraction, useInteractions, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    getGlobalInteractionId,\r\n    getMainItem,\r\n    getServiceId,\r\n    hasConsultCalls,\r\n    isCallConference,\r\n    isChatConference,\r\n    isConsultCall,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport type {CallParty, CustomTransferData} from '@bpinc/ad-interaction-state-types'\r\nimport {usePrerecordedMessagesList} from '@bpinc/ad-prerecorded-messages-state-context'\r\nimport {useRemoteAssistState, useRemoteAssistStateMethods} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useRescueState} from '@bpinc/ad-rescue-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {SmICONS} from '@bpinc/lib-external-ui-elements'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {IconRemoteAssist, IconScreenshare} from '@bpinc/lib-jskit-ui'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useOpenRescueModal} from '../../../../modals'\r\nimport {useScheduleReminderOption} from './useScheduleReminderOption'\r\n\r\nimport styles from '../../styles/InteractionsPage.module.less'\r\n\r\n\r\ntype SendScreenReceiver = {\r\n    userItemId: string\r\n    userId: string\r\n}\r\n\r\nexport type MoreOption = {\r\n    onClick: () => void\r\n    tooltip: string\r\n    className?: string\r\n    activeClassName?: string\r\n    'data-testid': string\r\n    iconName?: SmICONS //semantic icon name\r\n    Icon?: SVGRComponent\r\n    active?: boolean\r\n    disabled?: boolean\r\n}\r\n\r\nexport function useMoreButtons(toggleList: Toggle) {\r\n    const {t} = useLocalizationState()\r\n    const integrationApiStateRef = useIntegrationApiStateRef()\r\n    const {requestTransferData} = useIntegrationApiStateMethods()\r\n    const {sendScreenPopData} = useInteractionStateMethods()\r\n    const customRecordings = usePrerecordedMessagesList()\r\n    const interactionId = useInteractionId()\r\n    const items = useInteractions()\r\n    const activeItem = useInteraction(interactionId)\r\n    const {isEnabled: isRescueEnabled} = useRescueState()\r\n    const {tenantFeatures, privileges} = useSessionState()\r\n    const {openRemoteAssist} = useRemoteAssistStateMethods()\r\n    const {items: raItems} = useRemoteAssistState()\r\n    const openRescueModal = useOpenRescueModal()\r\n    const isCommunicator = useIsCommunicator()\r\n\r\n    const serviceId = getServiceId(activeItem)\r\n    const globalInteractionId = getGlobalInteractionId(activeItem)\r\n    const remoteAssistEnabled = !!tenantFeatures?.nativeRemoteAssistEnabled && !!privileges.SYS_USE_REMOTE_ASSIST\r\n    const itemRaSession = globalInteractionId ? raItems[globalInteractionId] : undefined\r\n    const raSessionEstablished = !!itemRaSession?.sessionId\r\n    const raSessionPin = itemRaSession?.pin\r\n    const raSessionId = itemRaSession?.sessionId\r\n\r\n    const giidRef = useAsRef(globalInteractionId)\r\n    const activeItemRef = useAsRef(activeItem)\r\n    const raSessionPinRef = useAsRef(raSessionPin)\r\n    const raSessionIdRef = useAsRef(raSessionId)\r\n    const callInDeliveredState = activeItem?.state === 'delivered' || activeItem?.state === 'hold'\r\n    const callInWrapUpState = activeItem?.state === 'wrap_up' || activeItem?.state === 'wrap_up_hold'\r\n    const showScheduleReminderButton =\r\n        (callInDeliveredState || callInWrapUpState) &&\r\n        privileges.CAN_USE_CALENDAR &&\r\n        !isCommunicator\r\n    const scheduleReminderOption = useScheduleReminderOption()\r\n\r\n    const handleRescueClick = useCallback(() => {\r\n        openRescueModal({type: 'voice'})\r\n        toggleList(false)\r\n    }, [openRescueModal, toggleList])\r\n\r\n    const handleRemoteAssistClick = useCallback(() => {\r\n        if (!giidRef.current) {\r\n            return\r\n        }\r\n        openRemoteAssist(\r\n            {\r\n                globalInteractionId: giidRef.current,\r\n                popup: true,\r\n            },\r\n            {\r\n                action: 'create',\r\n                giid: giidRef.current,\r\n                mediaType: activeItemRef.current?.mediaType || 'unknown',\r\n                caseId: activeItemRef.current?.emailData?.caseId,\r\n                contactId: activeItemRef.current?.contactId,\r\n                clientFirstName: activeItemRef.current?.displayData.firstName,\r\n                clientLastName: activeItemRef.current?.displayData.lastName,\r\n                clientDisplayName: activeItemRef.current?.displayData.displayName,\r\n            },\r\n        )\r\n    }, [giidRef, activeItemRef, openRemoteAssist])\r\n\r\n    const mainItemId = getMainItem(items, activeItem)?.id\r\n    const activeItemHasConsultCalls = hasConsultCalls(activeItem)\r\n    const activeItemIsConsultCall = isConsultCall(activeItem)\r\n    const activeItemParties = activeItem?.parties\r\n    const activeItemIsCallConference = isCallConference(activeItem)\r\n    const activeItemIsChatConference = isChatConference(activeItem)\r\n    const activeItemHaveAgents = !!activeItemParties?.some(party => !!party.userId)\r\n\r\n    const canSendScreen = useMemo(() => {\r\n        return (\r\n            activeItemHasConsultCalls ||\r\n            activeItemIsConsultCall ||\r\n            activeItemIsCallConference ||\r\n            activeItemIsChatConference ||\r\n            activeItemHaveAgents\r\n        )\r\n    }, [\r\n        activeItemHasConsultCalls,\r\n        activeItemIsConsultCall,\r\n        activeItemIsCallConference,\r\n        activeItemIsChatConference,\r\n        activeItemHaveAgents,\r\n    ])\r\n\r\n    const sendScreen = useCallback(\r\n        async (receivers: SendScreenReceiver[]) => {\r\n            if (mainItemId && receivers.length) {\r\n                let customData: CustomTransferData = {}\r\n                if (integrationApiStateRef.current.isAvailable) {\r\n                    try {\r\n                        customData = await requestTransferData(mainItemId)\r\n                    } catch {\r\n                        /**/\r\n                    }\r\n                }\r\n                receivers.forEach(({userItemId, userId}) =>\r\n                    sendScreenPopData({\r\n                        targetItemId: mainItemId,\r\n                        userId,\r\n                        userItemId,\r\n                        customData,\r\n                        raSessionPin: raSessionPinRef.current,\r\n                        raSessionId: raSessionIdRef.current,\r\n                    }),\r\n                )\r\n            }\r\n        },\r\n        [mainItemId, integrationApiStateRef, sendScreenPopData, requestTransferData, raSessionPinRef, raSessionIdRef],\r\n    )\r\n\r\n    const prepareSendScreen = useCallback(async () => {\r\n        toggleList(false)\r\n\r\n        if (activeItem) {\r\n            let receivers: SendScreenReceiver[] | null = null\r\n            if (\r\n                activeItemIsCallConference ||\r\n                activeItemIsChatConference ||\r\n                activeItemIsConsultCall ||\r\n                activeItemHaveAgents\r\n            ) {\r\n                if (activeItem.parties) {\r\n                    receivers = activeItem.parties\r\n                        .filter(({theirItemId, userId}) => theirItemId && userId)\r\n                        .map(({theirItemId, userId}) => ({\r\n                            userItemId: theirItemId,\r\n                            userId,\r\n                        }))\r\n                        .filter(party => !!party.userId) as SendScreenReceiver[]\r\n                }\r\n            } else if (activeItemHasConsultCalls) {\r\n                receivers = (\r\n                    activeItem.displayData\r\n                        .hasConsultCalls!.flatMap(itemId => items.find(item => item.id === itemId)?.parties)\r\n                        .filter(party => party?.theirItemId && party?.userId) as CallParty[]\r\n                ).map(({theirItemId, userId}) => ({\r\n                    userItemId: theirItemId!,\r\n                    userId: userId!,\r\n                }))\r\n            }\r\n            if (receivers) {\r\n                await sendScreen(receivers)\r\n            }\r\n        }\r\n    }, [\r\n        toggleList,\r\n        activeItem,\r\n        activeItemIsCallConference,\r\n        activeItemIsChatConference,\r\n        activeItemIsConsultCall,\r\n        activeItemHaveAgents,\r\n        activeItemHasConsultCalls,\r\n        items,\r\n        sendScreen,\r\n    ])\r\n\r\n    return useMemo(\r\n        function memoizeMoreButtons() {\r\n            const moreButtons: MoreOption[] = []\r\n\r\n            if (remoteAssistEnabled) {\r\n                moreButtons.push({\r\n                    className: styles.rescue,\r\n                    onClick: handleRemoteAssistClick,\r\n                    tooltip: t.INTERNAL_CHAT.chat_remote_assist(),\r\n                    active: false,\r\n                    Icon: IconRemoteAssist,\r\n                    'data-testid': 'remote-assist-button',\r\n                    disabled: raSessionEstablished,\r\n                })\r\n            } else if (isRescueEnabled) {\r\n                moreButtons.push({\r\n                    className: styles.rescue,\r\n                    onClick: handleRescueClick,\r\n                    tooltip: t.CALL_DETAILS_FORM.button_remote_access_tooltip(),\r\n                    active: false,\r\n                    Icon: IconRemoteAssist,\r\n                    'data-testid': 'remote-assist-button',\r\n                })\r\n            }\r\n\r\n            if (canSendScreen) {\r\n                moreButtons.push({\r\n                    tooltip: t.CALL_DETAILS_FORM.interaction_sendScreen_tooltip(),\r\n                    active: false,\r\n                    onClick: prepareSendScreen,\r\n                    Icon: IconScreenshare,\r\n                    'data-testid': 'send-screen-button',\r\n                })\r\n            }\r\n\r\n            if (showScheduleReminderButton) {\r\n                moreButtons.push(scheduleReminderOption)\r\n            }\r\n\r\n            return moreButtons\r\n        },\r\n        [\r\n            scheduleReminderOption,\r\n            showScheduleReminderButton,\r\n            serviceId,\r\n            remoteAssistEnabled,\r\n            isRescueEnabled,\r\n            customRecordings.length,\r\n            canSendScreen,\r\n            handleRemoteAssistClick,\r\n            t.INTERNAL_CHAT,\r\n            t.CALL_DETAILS_FORM,\r\n            t.PLAY_CANNED_PROMPTS_DIALOG_BOX,\r\n            raSessionEstablished,\r\n            handleRescueClick,\r\n            prepareSendScreen,\r\n        ],\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useCallButtonsHandlers} from '@bpinc/ad-interaction-state-hooks'\r\nimport {showMergeButton, showTransferButton} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {HoldButton, MuteButton, RecordButton, TransferButton} from '@bpinc/lib-interaction-buttons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {\r\n    CircleButton,\r\n    IconCompleteTransferFilled,\r\n    IconDialpad,\r\n    IconLeave,\r\n    IconMerge,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {useOpenInteractionSlidingModal, useShowSlidingModalChecker} from '@bpinc/lib-sliding-modal-context'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {CompleteButton} from './CompleteButton'\r\nimport {ShowMoreButton} from './ShowMoreButton'\r\n\r\n\r\ntype Props = {\r\n    onClose: (e: React.MouseEvent) => void\r\n}\r\nexport const VoiceCallButtons: React.FC<Props> = ({onClose}) => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const openInteractionSlidingModal = useOpenInteractionSlidingModal()\r\n    const showTransferModal = useShowSlidingModalChecker(interactionId, 'transfer')\r\n    const showKeypadModal = useShowSlidingModalChecker(interactionId, 'keypad')\r\n    const {phoneDeviceCapabilities} = useSessionState()\r\n    const activeItem = useInteraction(interactionId)\r\n    const isHost = activeItem?.isConferenceHost\r\n\r\n    const {\r\n        showRecordButton,\r\n        isCallEstablished,\r\n        isMuted,\r\n        isRecording,\r\n        isOnHold,\r\n        isRecordingMuted,\r\n        isCallConference,\r\n        isLoading,\r\n        handleHoldClick,\r\n        handleMuteClick,\r\n        handleMergeClick,\r\n        handleTransferClick,\r\n        handleLeaveConference,\r\n        handleRecordClick,\r\n    } = useCallButtonsHandlers()\r\n\r\n    const toggleTransfer = useCallback(\r\n        function toggleTransferCallback() {\r\n            openInteractionSlidingModal(interactionId, 'transfer')\r\n        },\r\n        [interactionId, openInteractionSlidingModal],\r\n    )\r\n\r\n    const toggleKeypad = useCallback(\r\n        function toggleKeypadCallback() {\r\n            openInteractionSlidingModal(interactionId, 'keypad')\r\n        },\r\n        [interactionId, openInteractionSlidingModal],\r\n    )\r\n\r\n    const showConferenceButtons =\r\n        (isCallConference && isHost) || showMergeButton(activeItem) || showTransferButton(activeItem)\r\n\r\n    const holdButtonDisabled = !isCallEstablished ||\r\n        (isOnHold ? !phoneDeviceCapabilities.canRetrieve : !phoneDeviceCapabilities.canHold)\r\n\r\n    const callInDeliveredState = activeItem?.state === 'delivered' || activeItem?.state === 'hold'\r\n\r\n    const renderLeaveIcon = () => {\r\n        return (<IconLeave className=\"size-5 [&_path]:stroke-neutral-0\" />)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-auto items-center justify-between\">\r\n            <div className=\"flex items-center gap-2.5\">\r\n                {callInDeliveredState && (\r\n                    <HoldButton\r\n                        iconClassName=\"icon-fade\"\r\n                        isActive={isOnHold}\r\n                        isLoading={isLoading.onHold}\r\n                        onClick={handleHoldClick}\r\n                        holdStartTime={activeItem?.displayData?.holdStartTime}\r\n                        disabled={holdButtonDisabled}\r\n                    />\r\n                )}\r\n\r\n                {callInDeliveredState && showRecordButton && (\r\n                    <RecordButton\r\n                        isLoading={isLoading.recording}\r\n                        isActive={isRecording}\r\n                        onClick={handleRecordClick}\r\n                        disabled={!isCallEstablished || isOnHold || isRecordingMuted}\r\n                        data-testid=\"call-recording-button\"\r\n                        data-recording-active={isRecording || undefined}\r\n                    />\r\n                )}\r\n\r\n                {callInDeliveredState && (\r\n                    <>\r\n                        <MuteButton\r\n                            isActive={isMuted}\r\n                            isLoading={isLoading.muted}\r\n                            onClick={handleMuteClick}\r\n                            disabled={!isCallEstablished}\r\n                        />\r\n                        <TransferButton\r\n                            isActive={showTransferModal}\r\n                            onClick={toggleTransfer}\r\n                            iconClassName=\"icon-fade\"\r\n                        />\r\n                    </>\r\n                )}\r\n                {callInDeliveredState && showConferenceButtons && (\r\n                    <>\r\n                        {showMergeButton(activeItem) && (\r\n                            <CircleButton\r\n                                onClick={handleMergeClick}\r\n                                tooltip={{content: t.CALL_DETAILS_FORM.interaction_merge()}}\r\n                                data-testid=\"merge-button\"\r\n                            >\r\n                                <IconMerge className=\"size-4.5 icon-fade\" />\r\n                            </CircleButton>\r\n                        )}\r\n                        {showTransferButton(activeItem) && (\r\n                            <CircleButton\r\n                                onClick={handleTransferClick}\r\n                                tooltip={{content: t.CALL_DETAILS_FORM.interaction_complete()}}\r\n                                data-testid=\"complete-transfer-button\"\r\n                            >\r\n                                <IconCompleteTransferFilled className=\"size-4.5 icon-fade\" />\r\n                            </CircleButton>\r\n                        )}\r\n                    </>\r\n                )}\r\n                {callInDeliveredState && <ShowMoreButton />}\r\n            </div>\r\n            <div className=\"flex h-7 items-center gap-2\">\r\n                <CircleButton\r\n                    tooltip={{content: t.ADDRESS_BOOK_AREA.addressBook_dial()}}\r\n                    isActive={showKeypadModal}\r\n                    onClick={toggleKeypad}\r\n                    data-testid=\"show-dialpad-button\"\r\n                    className=\"h-7 w-12 rounded-xs\"\r\n                >\r\n                    <IconDialpad className=\"icon-fade\" />\r\n                </CircleButton>\r\n                {isCallConference && isHost && (\r\n                    <CircleButton\r\n                        onClick={handleLeaveConference}\r\n                        tooltip={{content: t.CALL_DETAILS_FORM.interaction_leaveConference()}}\r\n                        data-testid=\"leave-conference-button\"\r\n                        className=\"h-7 w-12 rounded-xs\"\r\n                    >\r\n                        <IconLeave className=\"size-5 icon-error\" />\r\n                    </CircleButton>\r\n                )}\r\n                <CompleteButton\r\n                    isDestructive\r\n                    item={activeItem}\r\n                    handleCloseClick={onClose}\r\n                    renderIcon={!isHost && isCallConference ? renderLeaveIcon : undefined}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\n\r\nimport {useInteraction, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useSystemDisposition} from '@bpinc/ad-interaction-state-hooks'\r\nimport type {Disposition} from '@bpinc/ad-services-dispositions-types'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {CircleButton} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useScheduleReminderOption} from './useScheduleReminderOption'\r\n\r\n\r\ninterface WorkItemButtonsProps {\r\n    onClose: (e: React.MouseEvent, disposition?: Disposition) => void\r\n}\r\n\r\nfunction isDisposition(disposition: Disposition | null): disposition is Disposition {\r\n    return !!disposition\r\n}\r\n\r\nexport const WorkItemButtons: React.FC<WorkItemButtonsProps> = ({onClose}) => {\r\n    const t = useLocalizationState('t')\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const {setDisposition} = useInteractionStateMethods()\r\n    const dispositionForSkip = useSystemDisposition('skipped')\r\n\r\n    const scheduleReminderButton = useScheduleReminderOption()\r\n\r\n    const onSkipClick = useEvent((e: React.MouseEvent) => {\r\n        if (isDisposition(dispositionForSkip) && interactionId) {\r\n            setDisposition({\r\n                itemId: interactionId,\r\n                disposition: dispositionForSkip,\r\n            })\r\n        }\r\n        onClose(e, dispositionForSkip || undefined)\r\n    })\r\n\r\n    assertDefined(activeItem)\r\n\r\n    return (\r\n        <div className=\"flex flex-auto items-center justify-between\">\r\n            <div className=\"flex items-center gap-2.5\">\r\n                <CircleButton\r\n                    data-testid={scheduleReminderButton['data-testid']}\r\n                    tooltip={{content: scheduleReminderButton.tooltip}}\r\n                    onClick={scheduleReminderButton.onClick}\r\n                >\r\n                    <scheduleReminderButton.Icon className=\"size-4.5 icon-fade\" />\r\n                </CircleButton>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n                <Button\r\n                    variant=\"secondary\"\r\n                    size=\"sm\"\r\n                    onClick={onClose}\r\n                    className=\"h-7\"\r\n                    data-testid=\"complete-button\"\r\n                >\r\n                    {t.CALL_DETAILS_FORM.interaction_completeACW()}\r\n                </Button>\r\n                {!!dispositionForSkip && (\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        size=\"sm\"\r\n                        onClick={onSkipClick}\r\n                        className=\"h-7 text-on-error\"\r\n                        data-testid=\"skip-workitem-button\"\r\n                    >\r\n                        {t.CALL_DETAILS_FORM.interaction_endWorkItem()}\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {atom} from 'jotai'\r\nimport {atomWithReducer, selectAtom} from 'jotai/utils'\r\n\r\nimport type {Message} from '@bpinc/ad-prerecorded-messages-state-types'\r\n\r\n\r\ntype SelectedMessagesState = {\r\n    selectedMessage: Message | undefined\r\n    messagesOrder: string[]\r\n}\r\n\r\ntype Action = SelectedMessagesAction | RevalidateMessagesAction\r\n\r\ntype SelectedMessagesAction = {\r\n    type: 'selectMessage'\r\n    payload: {\r\n        selectedMessage: Message\r\n    }\r\n}\r\n\r\ntype RevalidateMessagesAction = {\r\n    type: 'revalidateMessages'\r\n    payload: {\r\n        existingMessages: Message[]\r\n    }\r\n}\r\n\r\nfunction reducer(prev: SelectedMessagesState, action: Action) {\r\n    switch (action.type) {\r\n        case 'selectMessage':\r\n            return action.payload.selectedMessage === prev.selectedMessage\r\n                ? prev\r\n                : {\r\n                    selectedMessage: action.payload.selectedMessage,\r\n                    messagesOrder: [\r\n                        action.payload.selectedMessage.id,\r\n                        ...prev.messagesOrder.filter(\r\n                            message =>\r\n                                message !== action.payload.selectedMessage.id,\r\n                        ),\r\n                    ],\r\n                }\r\n        case 'revalidateMessages': {\r\n            const existingMessagesById = action.payload.existingMessages.reduce(\r\n                (acc, message) => {\r\n                    acc[message.id] = message\r\n                    return acc\r\n                },\r\n                {} as Record<string, Message>,\r\n            )\r\n\r\n            const missingMessages = action.payload.existingMessages\r\n                .filter(message => !prev.messagesOrder.includes(message.id))\r\n                .map(message => message.id)\r\n\r\n            const messagesOrder = [\r\n                ...prev.messagesOrder.filter(m => existingMessagesById[m]),\r\n                ...missingMessages,\r\n            ]\r\n\r\n            return {\r\n                selectedMessage:\r\n                    prev.selectedMessage &&\r\n                    existingMessagesById[prev.selectedMessage.id]\r\n                        ? prev.selectedMessage\r\n                        : action.payload.existingMessages[0],\r\n                messagesOrder,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const selectedMessageStateAtom = atomWithReducer<SelectedMessagesState, Action>(\r\n    {\r\n        selectedMessage: undefined,\r\n        messagesOrder: [],\r\n    },\r\n    reducer,\r\n)\r\n\r\nexport const selectedMessageAtom = selectAtom(\r\n    selectedMessageStateAtom,\r\n    state => state.selectedMessage,\r\n)\r\n\r\nexport const messageOrderAtom = selectAtom(\r\n    selectedMessageStateAtom,\r\n    state => state.messagesOrder,\r\n)\r\n\r\nexport const modalSelectedMessageAtom = atom<Message | undefined>(undefined)\r\n","import React from 'react'\r\n\r\nimport type {Message} from '@bpinc/ad-prerecorded-messages-state-types'\r\nimport {IconCheck24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\n\r\ninterface PrerecordedItemProps {\r\n    prompt: Message\r\n    selected: boolean\r\n    onClick: (message: Message) => void\r\n}\r\n\r\nexport const PrerecordedItem: React.FC<PrerecordedItemProps> = ({\r\n    prompt,\r\n    selected,\r\n    onClick,\r\n}) => {\r\n    return (\r\n        <li\r\n            data-selected={selected}\r\n            className={tcn(\r\n                'group',\r\n                'text-primary-on-primary',\r\n                'truncate',\r\n                'hover:state-layer-mix-dark-on-white-1',\r\n                'focus:state-layer-mix-dark-on-white-1',\r\n                'transition-colors',\r\n                'state-layer-bg-main-bg',\r\n                'data-[selected=true]:state-layer-mix-teal-on-white-1',\r\n                'data-[selected=true]:hover:state-layer-mix-teal-on-white-2',\r\n                'data-[selected=true]:focus:state-layer-mix-teal-on-white-2',\r\n            )}\r\n        >\r\n            <button\r\n                className=\"flex w-full items-center justify-between gap-2 px-4 py-3 leading-[24px]\"\r\n                onClick={() => onClick(prompt)}\r\n            >\r\n                {prompt.name}\r\n                <IconCheck24 className=\"hidden group-data-[selected=true]:block\" />\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {useAtom} from 'jotai'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePrerecordedMessagesState,\r\n    usePrerecordedMessagesStateMethods,\r\n} from '@bpinc/ad-prerecorded-messages-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {modalSelectedMessageAtom} from './atoms'\r\nimport {PrerecordedItem} from './PrerecordedItem'\r\n\r\n\r\nexport const PrerecordedList: React.FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const serviceId = useInteractionProp(interactionId, getServiceId)\r\n    const {list, serviceMessages} = usePrerecordedMessagesState()\r\n    const {getServiceMessages} = usePrerecordedMessagesStateMethods()\r\n\r\n    useEffect(() => {\r\n        if (!serviceId) {\r\n            return\r\n        }\r\n        getServiceMessages(serviceId)\r\n    }, [getServiceMessages, serviceId])\r\n\r\n\r\n    const currentServiceMessages = serviceId ? serviceMessages[serviceId] : undefined\r\n    const [selected, setSelected] = useAtom(modalSelectedMessageAtom)\r\n\r\n    const promptsTitleClassName = tcn(\r\n        'p-4 uppercase caption-s text-neutral-disabled',\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!selected) {\r\n            setSelected(currentServiceMessages?.[0] || list[0])\r\n        }\r\n    }, [currentServiceMessages, list, selected, serviceId, serviceMessages, setSelected])\r\n\r\n    if (currentServiceMessages?.length && list.length) {\r\n        return (\r\n            <>\r\n                <h2 className={promptsTitleClassName}>\r\n                    {t.PLAY_CANNED_PROMPTS_DIALOG_BOX.canned_prompts()}\r\n                </h2>\r\n                <ul>\r\n                    {currentServiceMessages.map(prompt => (\r\n                        <PrerecordedItem\r\n                            selected={selected?.id === prompt.id}\r\n                            onClick={setSelected}\r\n                            prompt={prompt}\r\n                            key={prompt.id}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n\r\n                <h2 className={promptsTitleClassName}>\r\n                    {t.PLAY_CANNED_PROMPTS_DIALOG_BOX.custom_prompts()}\r\n                </h2>\r\n                <ul>\r\n                    {list.map(prompt => (\r\n                        <PrerecordedItem\r\n                            selected={selected?.id === prompt.id}\r\n                            onClick={setSelected}\r\n                            prompt={prompt}\r\n                            key={prompt.id}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (currentServiceMessages?.length) {\r\n        return (\r\n            <ul>\r\n                {currentServiceMessages.map(prompt => (\r\n                    <PrerecordedItem\r\n                        selected={selected?.id === prompt.id}\r\n                        onClick={setSelected}\r\n                        prompt={prompt}\r\n                        key={prompt.id}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {list.map(prompt => (\r\n                <PrerecordedItem\r\n                    selected={selected?.id === prompt.id}\r\n                    onClick={setSelected}\r\n                    prompt={prompt}\r\n                    key={prompt.id}\r\n                />\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\nimport {Button} from '@servicepattern/ui'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\nimport {flow} from 'lodash-es'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePrerecordedMessagesState,\r\n    usePrerecordedMessagesStateMethods,\r\n} from '@bpinc/ad-prerecorded-messages-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Modal} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport type {CommonModalProps} from '@bpinc/state-modals-types'\r\n\r\nimport {modalSelectedMessageAtom, selectedMessageStateAtom} from './atoms'\r\nimport {PrerecordedList} from './PrerecordedList'\r\n\r\n\r\nexport const PrerecordedMessagesModal: FC<CommonModalProps> = ({\r\n    onClose,\r\n    ...props\r\n}) => {\r\n    const selectedMessage = useAtomValue(modalSelectedMessageAtom)\r\n\r\n    const t = useLocalizationState('t')\r\n    const interactionId = useInteractionId()\r\n    const interactionStepId = useInteractionProp(\r\n        interactionId,\r\n        getInteractionStepId,\r\n    )\r\n    const playingPrompts = usePrerecordedMessagesState('playingPrompts')\r\n\r\n    const playingPromptId = playingPrompts[interactionStepId]?.promptId\r\n\r\n    const {playPrompt, stopPlayingPrompt, stopAndPlayPrompt} =\r\n    usePrerecordedMessagesStateMethods()\r\n\r\n    const dispatch = useSetAtom(selectedMessageStateAtom)\r\n\r\n    function selectedPromptIsPlaying() {\r\n        return selectedMessage && selectedMessage.id === playingPromptId\r\n    }\r\n\r\n    function onPlayClick() {\r\n        assertDefined(selectedMessage)\r\n\r\n        if (selectedPromptIsPlaying()) {\r\n            stopPlayingPrompt(interactionStepId)\r\n        } else {\r\n            dispatch({type: 'selectMessage', payload: {selectedMessage}})\r\n\r\n            return playingPromptId\r\n                ? stopAndPlayPrompt({itemId: interactionId, interactionStepId, promptId: selectedMessage.id})\r\n                : playPrompt({\r\n                    itemId: interactionId,\r\n                    interactionStepId,\r\n                    promptId: selectedMessage.id,\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal {...props} onClose={onClose}>\r\n            <Modal.Header>{t.VOICE_CALL.prerecorded_messages()}</Modal.Header>\r\n            <Modal.Content className=\"px-3 pt-0 [&_ul]:m-0 [&_ul]:p-0\">\r\n                <PrerecordedList />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button variant=\"ghost\" onClick={() => onClose()}>\r\n                    {t.GLOBAL.cancel()}\r\n                </Button>\r\n                {!playingPromptId && (\r\n                    <Button\r\n                        variant=\"secondary\"\r\n                        onClick={flow(onPlayClick, onClose)}\r\n                    >\r\n                        {t.VOICE_CALL.prerecorded_messages_play_and_leave()}\r\n                    </Button>\r\n                )}\r\n                <Button onClick={onPlayClick} variant=\"primary\">\r\n                    {selectedPromptIsPlaying()\r\n                        ? t.GLOBAL.stop()\r\n                        : t.GLOBAL.play()}\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","//TODO: COMPONENT IS STILL IN PROGRESS, PLEASE DON'T PAY ATTENTION TO IT\r\nimport type {FC} from 'react'\r\nimport React, {useCallback, useEffect, useMemo} from 'react'\r\nimport {useAtom} from 'jotai'\r\nimport {sortBy} from 'lodash-es'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId, getServiceId} from '@bpinc/ad-interaction-state-methods'\r\nimport {\r\n    usePrerecordedMessagesState,\r\n    usePrerecordedMessagesStateMethods,\r\n} from '@bpinc/ad-prerecorded-messages-state-context'\r\nimport type {Message} from '@bpinc/ad-prerecorded-messages-state-types'\r\nimport {useBoolean, useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {ButtonDropdown, CircleButton, IconPlay16, IconStop16} from '@bpinc/lib-jskit-ui'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\nimport {useModalComponentOpener} from '@bpinc/state-modals-context'\r\n\r\nimport {selectedMessageStateAtom} from './atoms'\r\nimport {PrerecordedMessagesModal} from './PrerecordedMessagesModal'\r\n\r\n\r\nconst SHOW_MESSAGES_COUNT = 4\r\n\r\nfunction sortMessagesByOrder(messages: Message[], order: string[]): Message[] {\r\n    const orderMap = new Map(order.map((id, index) => [id, index]))\r\n    return sortBy(messages, message => orderMap.get(message.id))\r\n}\r\n\r\nexport const PrerecordedMessages: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const interactionId = useInteractionId()\r\n    const interactionStepId = useInteractionProp(\r\n        interactionId,\r\n        getInteractionStepId,\r\n    )\r\n    const serviceId = useInteractionProp(interactionId, getServiceId)\r\n\r\n    const {list, serviceMessages, isLoading, playingPrompts} =\r\n        usePrerecordedMessagesState()\r\n    const {playPrompt, stopPlayingPrompt, getServiceMessages} =\r\n        usePrerecordedMessagesStateMethods()\r\n\r\n    const [{selectedMessage, messagesOrder}, dispatch] = useAtom(\r\n        selectedMessageStateAtom,\r\n    )\r\n\r\n    const isPlayingNow = useCallback(\r\n        (prompt: Message) =>\r\n            prompt.id === playingPrompts[interactionStepId]?.promptId,\r\n        [interactionStepId, playingPrompts],\r\n    )\r\n\r\n    const handlePlayButtonClick = useCallback(\r\n        function playCallback() {\r\n            assertDefined(selectedMessage?.id)\r\n            assertDefined(interactionId)\r\n\r\n            if (isPlayingNow(selectedMessage)) {\r\n                stopPlayingPrompt(interactionStepId)\r\n            } else {\r\n                playPrompt({\r\n                    itemId: interactionId,\r\n                    interactionStepId,\r\n                    promptId: selectedMessage?.id,\r\n                })\r\n            }\r\n        },\r\n        [\r\n            interactionId,\r\n            interactionStepId,\r\n            isPlayingNow,\r\n            playPrompt,\r\n            selectedMessage,\r\n            stopPlayingPrompt,\r\n        ],\r\n    )\r\n\r\n    const finalList = useMemo(\r\n        () => [...list, ...((serviceId && serviceMessages[serviceId]) || [])],\r\n        [list, serviceId, serviceMessages],\r\n    )\r\n\r\n    useEffect(\r\n        function selectFirstMessage() {\r\n            if (!isLoading && finalList.length && !selectedMessage) {\r\n                dispatch({\r\n                    type: 'revalidateMessages',\r\n                    payload: {existingMessages: finalList},\r\n                })\r\n            }\r\n        },\r\n        [dispatch, finalList, isLoading, selectedMessage],\r\n    )\r\n\r\n    useEffect(\r\n        function initializeServiceMessages() {\r\n            if (!serviceId) {\r\n                return\r\n            }\r\n            getServiceMessages(serviceId)\r\n        },\r\n        [getServiceMessages, serviceId],\r\n    )\r\n\r\n    const dropdownOpened = useBoolean()\r\n\r\n    useEscapeManager(dropdownOpened.setFalse, {\r\n        enabled: dropdownOpened.value,\r\n    })\r\n\r\n    const openPrerecordedMessagesModal = useModalComponentOpener(\r\n        PrerecordedMessagesModal,\r\n    )\r\n\r\n    if (!selectedMessage) {\r\n        return null\r\n    }\r\n\r\n    const options = sortMessagesByOrder(finalList, messagesOrder).slice(\r\n        0,\r\n        SHOW_MESSAGES_COUNT,\r\n    )\r\n\r\n    return (\r\n        <div className=\"flex items-center gap-2 pb-1 pt-2\">\r\n            <CircleButton\r\n                disabled={!selectedMessage.id}\r\n                onClick={handlePlayButtonClick}\r\n            >\r\n                {isPlayingNow(selectedMessage) ? (\r\n                    <IconStop16 className=\"size-4.5\" />\r\n                ) : (\r\n                    <IconPlay16 className=\"size-4.5\" />\r\n                )}\r\n            </CircleButton>\r\n            <ButtonDropdown\r\n                open={dropdownOpened.value}\r\n                onOpenChange={dropdownOpened.toggle}\r\n                align=\"start\"\r\n                contentClassName=\"min-w-[232px]\"\r\n                options={\r\n                    <>\r\n                        <ButtonDropdown.Label className=\"font-semibold caption-s text-neutral-on-secondary\">\r\n                            {t.VOICE_CALL.prerecorded_messages_recents()}\r\n                        </ButtonDropdown.Label>\r\n                        {options.map(message => {\r\n                            const isSelected =\r\n                                selectedMessage.id === message.id\r\n                            return (\r\n                                <ButtonDropdown.Item\r\n                                    data-selected={isSelected}\r\n                                    aria-selected={isSelected}\r\n                                    key={message.id}\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            type: 'selectMessage',\r\n                                            payload: {\r\n                                                selectedMessage: message,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    {message.name}\r\n                                </ButtonDropdown.Item>\r\n                            )\r\n                        })}\r\n                        {finalList.length > options.length && (\r\n                            <ButtonDropdown.Item\r\n                                className=\"border-t py-4 border-default\"\r\n                                onClick={() => openPrerecordedMessagesModal()}\r\n                            >\r\n                                {t.VOICE_CALL.prerecorded_messages_more_messages()}\r\n                            </ButtonDropdown.Item>\r\n                        )}\r\n                    </>\r\n                }\r\n                button={{\r\n                    className: 'h-7 px-2.5',\r\n                    tooltip: t.VOICE_CALL.prerecorded_messages(),\r\n                    variant: 'ghost',\r\n                }}\r\n                chevronClassName=\"-ml-1\"\r\n            >\r\n                {selectedMessage.name}\r\n            </ButtonDropdown>\r\n        </div>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {\r\n    isCall,\r\n    isExternalChat,\r\n    isNeedToShowWorkitemUI,\r\n    isQualityManagementItem,\r\n} from '@bpinc/ad-interaction-state-methods'\r\nimport {useDisconnectButtonClickHandler} from '@bpinc/lib-helpers-ui'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {ChatButtons} from '../buttons/ChatButtons'\r\nimport {SupervisorButtons} from '../buttons/SupervisorButtons'\r\nimport {VoiceCallButtons} from '../buttons/VoiceCallButtons'\r\nimport {WorkItemButtons} from '../buttons/WorkItemButtons'\r\nimport {PrerecordedMessages} from './prerecorded-messages'\r\n\r\n\r\nexport const InteractionButtons: React.FC = React.memo(() => {\r\n    const interactionId = useInteractionId()\r\n    const activeItem = useInteraction(interactionId)\r\n    const handleDisconnectButtonClick = useDisconnectButtonClickHandler()\r\n\r\n    const onCloseInteraction = useCallback(\r\n        function onCloseCallback(event: SyntheticEvent) {\r\n            return handleDisconnectButtonClick(activeItem, {event})\r\n        },\r\n        [handleDisconnectButtonClick, activeItem],\r\n    )\r\n\r\n    if (isNeedToShowWorkitemUI(activeItem)) {\r\n        return (\r\n            <div className=\"flex items-center px-4 py-2\">\r\n                <WorkItemButtons onClose={onCloseInteraction} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col px-4\">\r\n            {isCall(activeItem) && <PrerecordedMessages />}\r\n            <div className=\"flex flex-auto items-center py-2\">\r\n                {isExternalChat(activeItem) && (\r\n                    <ChatButtons onClose={onCloseInteraction} />\r\n                )}\r\n                {isCall(activeItem) && (\r\n                    <VoiceCallButtons onClose={onCloseInteraction} />\r\n                )}\r\n            </div>\r\n            {isQualityManagementItem(activeItem) && (\r\n                <SupervisorButtons item={activeItem} />\r\n            )}\r\n        </div>\r\n    )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"interactionVideoWarning\":\"communicator_InteractionVideoWarning_interactionVideoWarning_oOaDY\",\"interactionVideoWarningItem\":\"communicator_InteractionVideoWarning_interactionVideoWarningItem_0ZfCp\"};","import React, {useCallback, useEffect, useRef, useState} from 'react'\r\nimport {debounce} from 'lodash-es'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {MINIMAL_PROFILING_VALUE, useCPUProfiling} from './useCPUProfiling'\r\n\r\nimport styles from './InteractionVideoWarning.module.less'\r\n\r\n\r\nexport const InteractionVideoWarning: React.FC<{\r\n    localStream?: MediaStream\r\n}> = ({\r\n    localStream,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    const [hasMicError, setHasMicError] = useState(false)\r\n    const [hasPerformanceError, setHasPerformanceError] = useState(false)\r\n\r\n    const debouncedClearMicError = useRef(debounce(() => {\r\n        setHasMicError(false)\r\n    }, 2000)).current\r\n\r\n    const debouncedClearPerformanceError = useRef(debounce(() => {\r\n        setHasPerformanceError(false)\r\n    }, 2000)).current\r\n\r\n    const showError = useCallback((type: 'mic' | 'performance') => {\r\n        if (type === 'mic') {\r\n            setHasMicError(true)\r\n            debouncedClearMicError()\r\n        }\r\n        if (type === 'performance') {\r\n            setHasPerformanceError(true)\r\n            debouncedClearPerformanceError()\r\n        }\r\n    }, [debouncedClearMicError, debouncedClearPerformanceError])\r\n\r\n    const getAndResetProfilingValue = useCPUProfiling()\r\n\r\n    useEffect(() => {\r\n        const audioTrack = localStream?.getAudioTracks()[0]\r\n\r\n        const intervalId = setInterval(() => {\r\n            if (\r\n                audioTrack?.muted\r\n                || !audioTrack?.enabled\r\n                || audioTrack.readyState === 'ended'\r\n            ) {\r\n                showError('mic')\r\n            }\r\n\r\n            const profilingValue = getAndResetProfilingValue()\r\n            if (profilingValue < MINIMAL_PROFILING_VALUE) {\r\n                showError('performance')\r\n            }\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        }\r\n    }, [getAndResetProfilingValue, localStream, showError])\r\n\r\n    return (\r\n        <div className={styles.interactionVideoWarning}>\r\n            {hasMicError && (\r\n                <div className={styles.interactionVideoWarningItem}>\r\n                    {t.ERROR_MESSAGES.microphone_muted()}\r\n                </div>\r\n            )}\r\n\r\n            {hasPerformanceError && (\r\n                <div className={styles.interactionVideoWarningItem}>\r\n                    {t.ERROR_MESSAGES.low_cpu()}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import {useCallback, useEffect, useRef} from 'react'\r\n\r\n\r\nexport const MINIMAL_PROFILING_VALUE = 100\r\n\r\nexport function useCPUProfiling() {\r\n    const profilingValueRef = useRef(0)\r\n\r\n    useEffect(() => {\r\n        let wasUnmounted = false\r\n\r\n        async function runProfilling() {\r\n            const tick = () => new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    profilingValueRef.current++\r\n                    resolve(profilingValueRef.current)\r\n\r\n                    if (!wasUnmounted) {\r\n                        tick()\r\n                    }\r\n                })\r\n            })\r\n\r\n            profilingValueRef.current = 0\r\n            tick()\r\n        }\r\n\r\n        runProfilling()\r\n\r\n        return () => {\r\n            wasUnmounted = true\r\n        }\r\n    }, [])\r\n\r\n    const getAndResetProfilingValue = useCallback(() => {\r\n        const savedProfilingValue = profilingValueRef.current\r\n        profilingValueRef.current = 0\r\n\r\n        return savedProfilingValue\r\n    }, [])\r\n\r\n    return getAndResetProfilingValue\r\n}\r\n","import type {MutableRefObject} from 'react'\r\nimport React, {useEffect, useRef} from 'react'\r\n\r\nimport {useInteractionChatDataSelector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useWebRtcState} from '@bpinc/ad-webrtc-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {InteractionVideoWarning} from './InteractionVideoWarning'\r\n\r\nimport styles from '../../styles/InteractionsPage.module.less'\r\n\r\n\r\nconst connectStream = (\r\n    ref: MutableRefObject<HTMLVideoElement | null>,\r\n    stream?: MediaStream,\r\n): () => void => {\r\n    const el = ref.current\r\n    if (el && stream) el.srcObject = stream\r\n    return () => el && el.removeAttribute('srcObject')\r\n}\r\n\r\nexport const InteractionVideo: React.FC = React.memo(() => {\r\n    const {streams} = useWebRtcState()\r\n    const interactionId = useInteractionId()\r\n    const activeChatId = useAssociatedChatInteractionProp(interactionId, getInteractionStepId)\r\n    const chatCall = useInteractionChatDataSelector(activeChatId, s => s?.call)\r\n    const {localStreamId, remoteStreamId} = chatCall || {}\r\n    const externalVideoRef = useRef<HTMLVideoElement | null>(null)\r\n    const internalVideoRef = useRef<HTMLVideoElement | null>(null)\r\n\r\n    const localStream = localStreamId ? streams[localStreamId] : undefined\r\n    const remoteStream = remoteStreamId ? streams[remoteStreamId] : undefined\r\n\r\n    useEffect(\r\n        () => connectStream(internalVideoRef, localStream),\r\n        [localStream],\r\n    )\r\n    useEffect(\r\n        () => connectStream(externalVideoRef, remoteStream),\r\n        [remoteStream],\r\n    )\r\n\r\n    return (\r\n        <div className={tcn(styles.interactionVideo, 'px-4')}>\r\n            <div className={styles.interactionVideoExternal}>\r\n                <video\r\n                    ref={externalVideoRef}\r\n                    controls={false}\r\n                    playsInline\r\n                    autoPlay\r\n                />\r\n            </div>\r\n            <div className={styles.interactionVideoInternal}>\r\n                <video\r\n                    ref={internalVideoRef}\r\n                    controls={false}\r\n                    playsInline\r\n                    autoPlay\r\n                    muted\r\n                />\r\n            </div>\r\n\r\n            <InteractionVideoWarning localStream={localStream} />\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport {useInteractionChatDataSelector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useAssociatedChatInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {useRecentActivityHistoryUploader} from '../../hooks/useRecentActivityHistoryUploader'\r\nimport {ActiveInteractionTitle} from './ActiveInteractionTitle'\r\nimport {ActiveInteractionTop} from './ActiveInteractionTop'\r\nimport {InteractionButtons} from './InteractionButtons'\r\nimport {InteractionVideo} from './InteractionVideo'\r\n\r\n\r\nexport const ActiveInteractionControlPanel: React.FC = React.memo(() => {\r\n    const interactionId = useInteractionId()\r\n    const chatInteractionStepId = useAssociatedChatInteractionProp(interactionId, getInteractionStepId)\r\n    const chatCallHasVideo = useInteractionChatDataSelector(\r\n        chatInteractionStepId,\r\n        s => !!s?.call?.localStreamId || !!s?.call?.remoteStreamId,\r\n    )\r\n\r\n    useRecentActivityHistoryUploader()\r\n\r\n    return (\r\n        <div className=\"flex flex-col\" data-testid=\"interaction-header\">\r\n            <ActiveInteractionTitle />\r\n            <ActiveInteractionTop />\r\n            <InteractionButtons />\r\n            {chatCallHasVideo && <InteractionVideo />}\r\n        </div>\r\n    )\r\n})\r\n","import {useCallback, useEffect} from 'react'\r\n\r\nimport {useActivityHistoryByContactId} from '@bpinc/ad-contacts-state-context'\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useContactActivityHistory} from '@bpinc/ad-interaction-state-hooks'\r\nimport {getContactId} from '@bpinc/ad-interaction-state-methods'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useInteractionUIChatType} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nconst UPDATE_ACTIVITY_HISTORY_TIMEOUT = 3000\r\n\r\nexport function useRecentActivityHistoryUploader() {\r\n    const {getMessages} = useContactActivityHistory()\r\n    const {clearRemovedAssociatedItem} = useInteractionStateMethods()\r\n    const interactionId = useInteractionId()\r\n    const type = useInteractionUIChatType(interactionId)\r\n    const contactId = useInteractionProp(interactionId, getContactId)\r\n    const contactActivityHistoryRef = useAsRef(useActivityHistoryByContactId(contactId))\r\n    const associatedItemWasJustRemoved = useInteractionProp(interactionId, activeItem => !!activeItem?.removedAssociatedItemId)\r\n\r\n    const typeRef = useAsRef(type)\r\n    const contactIdRef = useAsRef(contactId)\r\n    const associatedItemWasJustRemovedRef = useAsRef(associatedItemWasJustRemoved)\r\n\r\n\r\n    const loadMessages = useCallback(\r\n        function loadMessagesCallback() {\r\n            getMessages({\r\n                contactId: contactIdRef.current,\r\n                type: typeRef.current,\r\n                checkForLatestMessages: true,\r\n            }).catch(err => {\r\n                bpLogger.error(err || 'Error while trying to load new messages')\r\n            })\r\n        },\r\n        [contactIdRef, getMessages, typeRef],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const {isLoading, messages} = contactActivityHistoryRef.current || {}\r\n        if (\r\n            !isLoading &&\r\n            contactId &&\r\n            !!messages?.length &&\r\n            interactionId\r\n        ) {\r\n            if (associatedItemWasJustRemovedRef.current) {\r\n                setTimeout(() => {\r\n                    clearRemovedAssociatedItem(interactionId)\r\n                    loadMessages()\r\n                }, UPDATE_ACTIVITY_HISTORY_TIMEOUT)\r\n            } else {\r\n                loadMessages()\r\n            }\r\n        }\r\n    }, [contactId, interactionId, loadMessages, clearRemovedAssociatedItem, associatedItemWasJustRemovedRef, contactActivityHistoryRef])\r\n}\r\n","import type {FC} from 'react'\r\nimport React, {useCallback} from 'react'\r\n\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../styles/InteractionsPage.module.less'\r\n\r\n\r\nexport const ChatInWindowPlaceholder: FC = () => {\r\n    const {t} = useLocalizationState()\r\n    const itemId = useInteractionId()\r\n    const setState = useInteractionUIItemStateSetter()\r\n\r\n    const handleUnpin = useCallback(\r\n        function handleUnpinCallback() {\r\n            setState(itemId, s => ({...s, chatView: 'embedded'}))\r\n        },\r\n        [itemId, setState],\r\n    )\r\n    return (\r\n        <>\r\n            <div className={styles.chatInWindowPlaceholder}>\r\n                <p className={styles.chatInWindowPlaceholderText}>{t.INTERNAL_CHAT.chat_in_popup_message()}</p>\r\n                <Button linkLike onClick={handleUnpin}>\r\n                    {t.INTERNAL_CHAT.unpin()}\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {usePrevious} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useAutoSelectTranscriptTab(itemId: string) {\r\n    const interactionId = useInteractionId()\r\n    const hasVoiceTranscriptOrSuggestions = useInteractionProp(\r\n        interactionId,\r\n        i => !!i?.voiceTranscript || !!i?.botSuggestions,\r\n    )\r\n\r\n    const previousHasVoiceTranscriptOrSuggestions = usePrevious(\r\n        hasVoiceTranscriptOrSuggestions,\r\n    )\r\n    const setItemState = useInteractionUIItemStateSetter()\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !previousHasVoiceTranscriptOrSuggestions &&\r\n            hasVoiceTranscriptOrSuggestions\r\n        ) {\r\n            setItemState(itemId, oldState => ({\r\n                ...oldState,\r\n                activeTab: 'transcript',\r\n            }))\r\n        }\r\n    }, [\r\n        itemId,\r\n        hasVoiceTranscriptOrSuggestions,\r\n        setItemState,\r\n        previousHasVoiceTranscriptOrSuggestions,\r\n    ])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useInitialTabFromPageParams(itemId: string | undefined) {\r\n    const {activePage, removePageParam} = useNavigationState()\r\n    const setItemState = useInteractionUIItemStateSetter()\r\n\r\n    useEffect(() => {\r\n        const currentTab = activePage?.params?.currentTab\r\n        if (currentTab && itemId) {\r\n            setItemState(itemId, state => ({...state, activeTab: currentTab}))\r\n            removePageParam('currentTab')\r\n        }\r\n    }, [itemId, activePage?.params?.currentTab, setItemState, removePageParam])\r\n}\r\n","import type {MouseEvent} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {IconOpenDetached} from '@bpinc/lib-icons'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {Button} from '@bpinc/lib-ui-elements'\r\nimport type {InteractionTab} from '@bpinc/state-interaction-ui'\r\nimport {useAvailableInteractionTabsController, useInteractionUIAvailableTabs} from '@bpinc/state-interaction-ui'\r\nimport type {MessagesDeclaration} from '@bpinc/state-localization'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst tabClassName = tcn('min-w-0 flex-auto grow-0 px-2.5')\r\n\r\nconst TABS_ORDER: InteractionTab[] = [\r\n    'transcript',\r\n    'all',\r\n    'calls',\r\n    'messages',\r\n    'workitemContacts',\r\n    'workitemDetails',\r\n    'workitemHistory',\r\n    'crm',\r\n    'resolution',\r\n]\r\n\r\ntype Tab = {\r\n    id: InteractionTab\r\n    content: React.ReactNode\r\n    title: string\r\n    className?: string\r\n}\r\n\r\nexport function useTabs(): Tab[] {\r\n    const interactionId = useInteractionId()\r\n\r\n    useAvailableInteractionTabsController(interactionId)\r\n\r\n    const {t} = useLocalizationState()\r\n    const availableTabs = useInteractionUIAvailableTabs(interactionId)\r\n    const transcriptTab = useTranscriptTab(t)\r\n    const allInteractionsTab = useAllInteractionsTab(t)\r\n    const callInteractionsTab = useCallInteractionsTab(t)\r\n    const messageInteractionsTab = useMessageInteractionsTab(t)\r\n    const crmTab = useCrmTab(t)\r\n    const workitemContactsTab = useWorkitemContactsTab(t)\r\n    const workitemDetailsTab = useWorkitemDetailsTab(t)\r\n    const workitemHistoryTab = useWorkitemHistoryTab(t)\r\n    const resolutionTab = useResolutionTab(t)\r\n\r\n    const tabsMap = useMemo<Record<InteractionTab, Tab>>(() => ({\r\n        transcript: transcriptTab,\r\n        all: allInteractionsTab,\r\n        calls: callInteractionsTab,\r\n        messages: messageInteractionsTab,\r\n        crm: crmTab,\r\n        workitemContacts: workitemContactsTab,\r\n        workitemDetails: workitemDetailsTab,\r\n        workitemHistory: workitemHistoryTab,\r\n        resolution: resolutionTab,\r\n    }), [\r\n        transcriptTab,\r\n        allInteractionsTab,\r\n        callInteractionsTab,\r\n        messageInteractionsTab,\r\n        crmTab,\r\n        workitemContactsTab,\r\n        workitemDetailsTab,\r\n        workitemHistoryTab,\r\n        resolutionTab,\r\n    ])\r\n\r\n    return useMemo(() => {\r\n        return TABS_ORDER.reduce<Tab[]>((arr, tabId) => {\r\n            if (availableTabs[tabId]) {\r\n                arr.push(tabsMap[tabId])\r\n            }\r\n            return arr\r\n        }, [])\r\n    }, [availableTabs, tabsMap])\r\n}\r\n\r\nfunction useTranscriptTab(t: MessagesDeclaration): Tab {\r\n    const {serverOrigin} = useSessionState()\r\n    const interactionId = useInteractionId()\r\n    const interactionStepId = useInteractionProp(interactionId, getInteractionStepId)\r\n    const label = t.HOME_SCREEN.interaction_tab_label_transcript()\r\n\r\n    const openDetachedTranscriptWindow = useCallback((evt: MouseEvent) => {\r\n        evt.stopPropagation()\r\n        const params = new URLSearchParams({\r\n            interactionStepId: interactionStepId,\r\n        })\r\n\r\n        window.open(`${serverOrigin}/agent/voice-transcript-app?${params.toString()}`)\r\n    }, [serverOrigin, interactionStepId])\r\n\r\n    return useMemo(() => ({\r\n        content: (\r\n            <div className=\"flex min-w-0 flex-auto items-center\">\r\n                <span className=\"flex-auto truncate\">{label}</span>\r\n                <Button\r\n                    transparent\r\n                    className=\"group ml-4\"\r\n                    onClick={openDetachedTranscriptWindow}\r\n                >\r\n                    <IconOpenDetached\r\n                        className=\"transition-all duration-300 group-hover:[&_g]:stroke-primary-legacy group-hover:[&_path]:fill-primary-legacy\"\r\n                    />\r\n                </Button>\r\n            </div>\r\n        ),\r\n        title: label,\r\n        id: 'transcript',\r\n    }), [label, openDetachedTranscriptWindow])\r\n}\r\n\r\nfunction useAllInteractionsTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_label_all_interactions()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'all',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useCallInteractionsTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_label_calls()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'calls',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useMessageInteractionsTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_label_messages()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'messages',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useCrmTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_label_crm()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'crm',\r\n        title: label,\r\n        className: tcn(tabClassName, 'ml-auto'),\r\n    }), [label])\r\n}\r\n\r\nfunction useWorkitemContactsTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_workitem_contacts()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'workitemContacts',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useWorkitemDetailsTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_workitem_details()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'workitemDetails',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useWorkitemHistoryTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_workitem_history()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'workitemHistory',\r\n        title: label,\r\n    }), [label])\r\n}\r\n\r\nfunction useResolutionTab(t: MessagesDeclaration): Tab {\r\n    const label = t.HOME_SCREEN.interaction_tab_label_resolution()\r\n    return useMemo(() => ({\r\n        content: <span className=\"truncate\">{label}</span>,\r\n        id: 'resolution',\r\n        title: label,\r\n        className: tcn(tabClassName, 'ml-auto'),\r\n    }), [label])\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {useTimerById} from '@bpinc/ad-timers-context'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {cutMilliseconds, useEvent, useTimer} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {SelectionItem} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport type PhoneNumberItemProps = {\r\n    number: string\r\n    label: string\r\n    suggested: boolean\r\n    disabled: boolean\r\n}\r\n\r\nexport const PhoneNumberItem: React.FC<PhoneNumberItemProps> = ({\r\n    number,\r\n    label,\r\n    suggested,\r\n    disabled,\r\n}) => {\r\n\r\n    const {CALL_DETAILS_FORM: i18n} = useLocalizationState('t')\r\n    const activeItemId = useInteractionId()\r\n    assertDefined(activeItemId)\r\n    const {dialWorkitem} = useInteractionStateMethods()\r\n\r\n    const formattedNumber = formatPhone(number)\r\n    const autoDialTimer = useTimerById(`workitemAutoDial/${activeItemId}`)\r\n\r\n    const uiTimerValue = useTimer(autoDialTimer?.endTime, {countdown: true, format: cutMilliseconds})\r\n\r\n    const title = (\r\n        <div>\r\n            {suggested && <span className=\"absolute left-[5px] top-4.5 size-1.5 rounded-full bg-warning\" />}\r\n            <span className=\"font-semibold body text-primary-on-primary\">{label}</span>\r\n        </div>\r\n    )\r\n    const body = (\r\n        <span data-testid=\"phone\" className=\"body text-neutral-on-secondary\">\r\n            {formattedNumber}\r\n        </span>\r\n    )\r\n    const autoDialIndicator = suggested && uiTimerValue\r\n        ? (\r\n            <div className=\"h-5 rounded bg-teal-on-white-1 px-2\">\r\n                <span className=\"font-semibold caption-s text-primary-on-primary\">\r\n                    {i18n.workitem_auto_dial_message_text(String(uiTimerValue ?? 0))}\r\n                </span>\r\n            </div>\r\n        )\r\n        : null\r\n\r\n    const clickHandler = useEvent(() => {\r\n        dialWorkitem({\r\n            workitemItemId: activeItemId,\r\n            phoneNumber: number,\r\n        })\r\n    })\r\n\r\n    return (\r\n        <ContactListItem\r\n            as={SelectionItem}\r\n            title={title}\r\n            titleRight={autoDialIndicator}\r\n            body={body}\r\n            onClick={clickHandler}\r\n            disabled={disabled}\r\n            tooltip={disabled ? undefined : i18n.workitem_phone_number_call_tooltip()}\r\n            containerProps={{\r\n                focusOnSelection: true,\r\n                touchedOnly: true,\r\n                'data-testid': 'phone-number-item',\r\n                'data-disabled': disabled || undefined,\r\n                'data-suggested': suggested || undefined,\r\n            }}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {SelectionContainer} from '@bpinc/lib-ui-elements'\r\n\r\nimport {PhoneNumberItem} from './PhoneNumberItem'\r\nimport {usePreviewRecordPhoneNumbers} from './usePreviewRecordPhoneNumbers'\r\n\r\n\r\nexport const WorkitemContacts: React.FC = () => {\r\n\r\n    const phoneNumbers = usePreviewRecordPhoneNumbers()\r\n\r\n    return (\r\n        <SelectionContainer className=\"scrollbar-on-hover mx-4 mt-2 overflow-auto\">\r\n            {/* without this extra wrapper with filled background \"scrollbar-on-hover\" produces visual artifacts */}\r\n            <div className=\"bg-primary-background\">\r\n                {phoneNumbers.map(numberData => (\r\n                    <PhoneNumberItem key={numberData.number} {...numberData} />\r\n                ))}\r\n            </div>\r\n        </SelectionContainer>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\nimport type {PhoneNumberItemProps} from './PhoneNumberItem'\r\n\r\n\r\nexport function usePreviewRecordPhoneNumbers() {\r\n    const activeItemId = useInteractionId()\r\n    const workitemData = useInteractionProp(activeItemId, item => item?.workitemData)\r\n    assertDefined(workitemData)\r\n\r\n    return useMemo(() => {\r\n        return workitemData.contactInfo.addresses\r\n            .filter(item => item.type === 'phone')\r\n            .map<PhoneNumberItemProps>(item => ({\r\n                number: item.value,\r\n                label: item.label,\r\n                suggested: item.value === workitemData.suggestedPhone,\r\n                disabled: item.allowed !== 'yes',\r\n            }))\r\n    }, [workitemData.contactInfo.addresses, workitemData.suggestedPhone])\r\n}\r\n","import React from 'react'\r\n\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nexport const WorkitemDetails: React.FC = () => {\r\n\r\n    const activeItemId = useInteractionId()\r\n    const workitemData = useInteractionProp(activeItemId, item => item?.workitemData)\r\n    assertDefined(workitemData)\r\n    const {fullInfo} = workitemData.contactInfo\r\n\r\n    return (\r\n        <div className=\"scrollbar-on-hover m-4 mt-2 overflow-auto\">\r\n            {fullInfo.map(({name, value}) => (\r\n                <div key={name} className=\"flex gap-6 border-b px-1 py-4 bg-primary-background border-disabled\">\r\n                    <div className=\"line-clamp-[13] w-[120px] shrink-0 font-semibold body text-primary-on-primary\">\r\n                        {name}\r\n                    </div>\r\n                    <div className=\"line-clamp-[13] grow body text-primary-on-primary\">\r\n                        {value}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const EmptyActivityHistoryView: React.FC = () => {\r\n    const {ACTIVITY_HISTORY: i18n} = useLocalizationState('t')\r\n\r\n    return (\r\n        <div className=\"flex h-full flex-col items-center justify-center gap-2.5\">\r\n            <div className=\"heading-m text-neutral-on-secondary\">\r\n                {i18n.empty_activity_message_title()}\r\n            </div>\r\n            <div className=\"body-m text-neutral-fade\">\r\n                {i18n.empty_activity_message_description()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport produce from 'immer'\r\n\r\nimport {useContactsState} from '@bpinc/ad-contacts-state-context'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {getContactId} from '@bpinc/ad-interaction-state-methods'\r\nimport {ExternalChat} from '@bpinc/lib-chat-ui'\r\nimport {useEvent} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Chip} from '@bpinc/lib-jskit-ui'\r\nimport {array} from '@bpinc/lib-types-helpers'\r\nimport type {ActivityHistoryFilter} from '@bpinc/state-interaction-ui'\r\nimport {activityFilters, useInteractionUIChatType, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {EmptyActivityHistoryView} from './EmptyActivityHistoryView'\r\n\r\n\r\nfunction assertFilterType(value: string): asserts value is ActivityHistoryFilter {\r\n    if (!array(activityFilters).includes(value)) {\r\n        throw Error(`\"assertFilterType\" failed: ${value} is not filter type`)\r\n    }\r\n}\r\n\r\nexport const WorkitemHistory: React.FC = () => {\r\n\r\n    const {CALL_DETAILS_FORM: i18n} = useLocalizationState('t')\r\n    const activeItemId = useInteractionId()\r\n    const contactId = useInteractionProp(activeItemId, getContactId)\r\n    const selectedFilter = useInteractionUIChatType(activeItemId)\r\n    const setInteractionUIItemState = useInteractionUIItemStateSetter()\r\n\r\n    const activityHistory = useContactsState('activityHistory')\r\n    const emptyHistory = !activityHistory[contactId]?.messages.length\r\n\r\n    const filterDisplayLabels = {\r\n        'all': i18n.workitem_history_filter_all(),\r\n        'calls': i18n.workitem_history_filter_calls(),\r\n        'messages': i18n.workitem_history_filter_messages(),\r\n    }\r\n\r\n    const handleFilterClick = useEvent((e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const {value} = e.currentTarget.dataset\r\n        if (!value) {\r\n            return\r\n        }\r\n        assertFilterType(value)\r\n        setInteractionUIItemState(activeItemId, produce(state => {\r\n            state.activityFilter = value\r\n        }))\r\n    })\r\n\r\n    if (emptyHistory) {\r\n        return <EmptyActivityHistoryView />\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex h-full flex-col overflow-hidden\">\r\n            <div className=\"flex gap-2 px-4 py-2 shadow-2 bg-primary-background\">\r\n                {activityFilters.map(filterType => (\r\n                    <Chip\r\n                        key={filterType}\r\n                        variant=\"interactive\"\r\n                        data-value={filterType}\r\n                        active={filterType === selectedFilter}\r\n                        onClick={handleFilterClick}\r\n                    >\r\n                        {filterDisplayLabels[filterType]}\r\n                    </Chip>\r\n                ))}\r\n            </div>\r\n            <ExternalChat itemId={activeItemId} />\r\n        </div>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {Chat} from '@bpinc/lib-chat-ui'\r\nimport type {InteractionTab} from '@bpinc/state-interaction-ui'\r\n\r\nimport {CrmScreen, Resolution} from '../../../resolution'\r\nimport {WorkitemContacts} from './workitem/WorkitemContacts'\r\nimport {WorkitemDetails} from './workitem/WorkitemDetails'\r\nimport {WorkitemHistory} from './workitem/WorkitemHistory'\r\n\r\n\r\ntype Props = {\r\n    activeChatId: string\r\n    activeTab: InteractionTab\r\n}\r\n\r\nexport const InteractionTabContent: FC<Props> = React.memo(React.forwardRef<HTMLDivElement, Props>((\r\n    {activeTab, activeChatId},\r\n    ref,\r\n) => {\r\n\r\n    const tabContent = routeTabContent()\r\n\r\n    function routeTabContent() {\r\n        switch (activeTab) {\r\n            case 'transcript':\r\n            case 'all':\r\n            case 'calls':\r\n            case 'messages':\r\n                return <Chat itemId={activeChatId} scope=\"communicator\" />\r\n            case 'crm':\r\n                return <CrmScreen />\r\n            case 'resolution':\r\n                return <Resolution className=\"px-4\" />\r\n            case 'workitemContacts':\r\n                return <WorkitemContacts />\r\n            case 'workitemDetails':\r\n                return <WorkitemDetails />\r\n            case 'workitemHistory':\r\n                return <WorkitemHistory />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            className=\"flex h-0 flex-auto flex-col overflow-auto p-0\"\r\n            data-testid=\"interaction-body\"\r\n        >\r\n            {tabContent}\r\n        </div>\r\n    )\r\n}))\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {TabsContent, TabsList, TabsRoot, TabsTrigger} from '@servicepattern/ui'\r\n\r\nimport {useAssociatedChatInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport type {InteractionTab} from '@bpinc/state-interaction-ui'\r\nimport {useInteractionUIActiveTab, useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\nimport {useAutoSelectResolutionTab} from '../hooks/useAutoSelectResolutionTab'\r\nimport {useAutoSelectTranscriptTab} from '../hooks/useAutoSelectTranscriptTab'\r\nimport {useInitialTabFromPageParams} from '../hooks/useInitialTabFromPageParams'\r\nimport {useTabs} from '../hooks/useTabs'\r\nimport {InteractionTabContent} from './InteractionTabContent'\r\n\r\n\r\nexport const InteractionTabs: React.FC = React.memo(function InteractionTabs() {\r\n    const tabs = useTabs()\r\n    const setItemState = useInteractionUIItemStateSetter()\r\n    const interactionId = useInteractionId()\r\n\r\n    const activeChatId = useAssociatedChatInteractionId(interactionId)\r\n    assertDefined(activeChatId)\r\n\r\n    const activeTab = useInteractionUIActiveTab(activeChatId)\r\n\r\n    useInitialTabFromPageParams(activeChatId)\r\n    useAutoSelectTranscriptTab(activeChatId)\r\n    useAutoSelectResolutionTab(setItemState)\r\n\r\n    const handleTabChange = useCallback((newTabId: InteractionTab) => {\r\n        setItemState(activeChatId, oldState => ({...oldState, activeTab: newTabId}))\r\n    }, [activeChatId, setItemState])\r\n\r\n    // When activeTab is not in tabs, set first tab as active\r\n    useEffect(() => {\r\n        const hasActiveTab = tabs.some(it => it.id === activeTab)\r\n\r\n        if (!hasActiveTab) {\r\n            const firstTabId = tabs[0]?.id\r\n            setItemState(activeChatId, oldState => ({...oldState, activeTab: firstTabId}))\r\n        }\r\n    }, [activeChatId, activeTab, tabs, setItemState])\r\n\r\n    return (\r\n        <TabsRoot\r\n            value={activeTab}\r\n            data-test-id=\"interaction-tabs\"\r\n            className=\"flex h-full grow flex-col overflow-hidden\"\r\n        >\r\n            <TabsList className=\"w-full shrink-0 px-4\">\r\n                {tabs.map(tab => (\r\n                    <TabsTrigger\r\n                        key={tab.id}\r\n                        value={tab.id}\r\n                        className={tab.className}\r\n                        triggerClassName=\"py-2\"\r\n                        onClick={() => handleTabChange(tab.id)}\r\n                        isSelected={tab.id === activeTab}\r\n                        data-test-id={`tab-${tab.id}`}\r\n                    >\r\n                        {tab.content}\r\n                    </TabsTrigger>\r\n                ))}\r\n            </TabsList>\r\n\r\n            <TabsContent value={activeTab} className=\"flex grow flex-col overflow-auto\" asChild>\r\n                <InteractionTabContent activeChatId={activeChatId} activeTab={activeTab} />\r\n            </TabsContent>\r\n        </TabsRoot>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {useInteractionProp, useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {isAfterCallWork} from '@bpinc/ad-interaction-state-methods'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport type {InteractionUIItemStateUpdater} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useAutoSelectResolutionTab(setItemState: InteractionUIItemStateUpdater): void {\r\n    const interactionId = useInteractionId()\r\n    const {notifications} = useNotificationsState()\r\n    const itemInWrapUpState = useInteractionProp(interactionId, isAfterCallWork)\r\n    const {activateItem} = useInteractionStateMethods()\r\n    useEffect(() => {\r\n        if (itemInWrapUpState) {\r\n            setItemState(interactionId, oldState => ({\r\n                ...oldState,\r\n                activeTab: 'resolution',\r\n            }))\r\n        }\r\n    }, [interactionId, itemInWrapUpState, setItemState])\r\n\r\n    const errorAboutMissingDisposition = notifications[Notifications.DispositionNotSelectedError]\r\n    const isCommunicator = useIsCommunicator()\r\n    const interactionIdRef = useAsRef(interactionId)\r\n    const setCommunicatorFloatingState = useCommunicatorUIState(s => s.setFloatingState)\r\n\r\n    useEffect(() => {\r\n        if (errorAboutMissingDisposition) {\r\n            if (!isCommunicator) {\r\n                setCommunicatorFloatingState(s => s === 'closed' ? 'floating' : s)\r\n            }\r\n\r\n            if (errorAboutMissingDisposition.interactionId && interactionIdRef.current !== errorAboutMissingDisposition.interactionId) {\r\n                activateItem(errorAboutMissingDisposition.interactionId)\r\n            }\r\n\r\n            setItemState(interactionIdRef.current, oldState => ({\r\n                ...oldState,\r\n                activeTab: 'resolution',\r\n            }))\r\n        }\r\n    }, [isCommunicator, setCommunicatorFloatingState, activateItem, errorAboutMissingDisposition, interactionIdRef, setItemState])\r\n}\r\n","import React from 'react'\r\n\r\nimport {formatChatDate} from '@bpinc/ad-formatting-helpers'\r\nimport {useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {SystemMessageUI} from '@bpinc/lib-chat-ui'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport styles from '../styles/InteractionsPage.module.less'\r\n\r\n\r\nexport const InternalScenarioMessages = () => {\r\n    const interactionId = useInteractionId()\r\n    const messages = useInteractionProp(interactionId, activeItem => activeItem?.internalMessageData?.messages)\r\n    return (\r\n        <div className={styles.scenarioMessages} data-testid=\"interaction-body\">\r\n            {messages?.filter(m => m.text)?.map((message, i) => (\r\n                <>\r\n                    <p className=\"pb-1 pl-4 pt-2 text-xs text-chat-name\">{formatChatDate(message.timestamp)}</p>\r\n                    <SystemMessageUI className=\"pt-0\" key={i}>\r\n                        {message.text}\r\n                    </SystemMessageUI>\r\n                </>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {useAssociatedChatInteractionId, useInteractionProp} from '@bpinc/ad-interaction-state-context'\r\nimport {isInternalMessage} from '@bpinc/ad-interaction-state-methods'\r\nimport {useInteractionId} from '@bpinc/lib-interaction-context'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {useInteractionUIStateItemSelector} from '@bpinc/state-interaction-ui'\r\n\r\nimport {ChatInWindowPlaceholder} from './ChatInWindowPlaceholder'\r\nimport {InteractionTabs} from './InteractionTabs'\r\nimport {InternalScenarioMessages} from './InternalScenarioMessages'\r\n\r\n\r\nexport const ActiveInteractionContentArea: React.FC = () => {\r\n    const interactionId = useInteractionId()\r\n    const activeChatId = useAssociatedChatInteractionId(interactionId)\r\n    assertDefined(activeChatId) // is it safe assertion?\r\n    const activeItemIsInternalMessage = useInteractionProp(interactionId, isInternalMessage)\r\n    const chatView = useInteractionUIStateItemSelector(activeChatId, s => s?.chatView)\r\n\r\n    if (activeItemIsInternalMessage) {\r\n        return <InternalScenarioMessages />\r\n    }\r\n\r\n    if (chatView === 'embedded') {\r\n        return <InteractionTabs />\r\n    }\r\n\r\n    return <ChatInWindowPlaceholder />\r\n}\r\n","import React from 'react'\r\n\r\nimport {useAssociatedChatInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {useNonAssertedInteractionId} from '@bpinc/lib-interaction-context'\r\n\r\nimport {InteractionsSlidingModalsList} from '../../../sliding-modal'\r\nimport {ActiveInteractionControlPanel} from './active-interaction/ActiveInteractionControlPanel'\r\nimport {ActiveInteractionContentArea} from './ActiveInteractionContentArea'\r\n\r\n\r\nexport const InteractionsPage = React.memo(function InteractionsPage() {\r\n    const interactionId = useNonAssertedInteractionId()\r\n    const activeChatId = useAssociatedChatInteractionId(interactionId)\r\n\r\n\r\n    if (!activeChatId) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative flex grow flex-col\" data-interaction-page>\r\n            <div className=\"flex h-full w-full shrink-0 flex-col bg-primary-background\">\r\n                <ActiveInteractionControlPanel />\r\n                <ActiveInteractionContentArea />\r\n            </div>\r\n            <InteractionsSlidingModalsList />\r\n        </div>\r\n    )\r\n})\r\n","import {useChatUnread, usePersonalMessagesUnreadAmount} from '@bpinc/ad-interaction-chat-state-context'\r\nimport {useInternalChatTotalUnread} from '@bpinc/ad-interaction-internal-chat-state-context'\r\n\r\n\r\nexport function useUnreadAmount() {\r\n    const unreadExternal = useChatUnread()\r\n    const unreadPersonalMessagesAmount = usePersonalMessagesUnreadAmount()\r\n\r\n    const unreadInternal = useInternalChatTotalUnread()\r\n\r\n    return unreadPersonalMessagesAmount + unreadExternal + unreadInternal\r\n}\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {TabsList, TabsRoot, TabsTrigger} from '@servicepattern/ui'\r\n\r\nimport {useBrowserTabMetaInfo} from '@bpinc/ad-current-tab-data-context'\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {\r\n    IconCalendar,\r\n    IconDialpad,\r\n    IconDirectory,\r\n    IconInteractionDetails,\r\n    IconRecent,\r\n    IconStar24,\r\n} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {MissedCallsBadge, UnreadBadge} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useUnreadAmount} from '../hooks/useUnreadAmount'\r\n\r\n\r\nconst recentBadgeStyles = tcn('absolute right-0 top-0 !h-4 !w-4 translate-x-1/2')\r\n\r\nexport const MainPageNav: React.FC = React.memo(function MainPageNav() {\r\n    const {t} = useLocalizationState()\r\n    const privileges = useSessionState('privileges')\r\n    const tabMetaInfo = useBrowserTabMetaInfo()\r\n\r\n    const {setActivePage, noVisibleInteractionsOnMainPannel} = useNavigationState()\r\n\r\n    const activePage = useNavigationState('activePage')\r\n\r\n    const unreadAmount = useUnreadAmount()\r\n    const missedCallsAmount = useInteractionStateSelector(s => s.missedCallsAmount)\r\n\r\n    const navTabs = useMemo(() => {\r\n        const listInner = [\r\n            {\r\n                id: AppRoutes.Interactions,\r\n                testId: 'nav-active-interaction',\r\n                title: t.ADDRESS_BOOK_AREA.active_interaction() as string,\r\n                className: tcn(`flex w-12 justify-center`),\r\n                disabled: noVisibleInteractionsOnMainPannel,\r\n                content: (\r\n                    <IconInteractionDetails\r\n                        className={getInteractionTabSVGStyles()}\r\n                    />\r\n                ),\r\n            },\r\n            {\r\n                id: AppRoutes.Directory,\r\n                testId: 'nav-directory',\r\n                title: t.ADDRESS_BOOK_AREA.addressBook_directory() as string,\r\n                className: tcn(`flex w-12 justify-center`),\r\n                content: <IconDirectory className={getSVGStylesIfActive(AppRoutes.Directory)} />,\r\n            },\r\n        ]\r\n\r\n        listInner.push({\r\n            id: AppRoutes.Dial,\r\n            testId: 'nav-dial',\r\n            title: t.ADDRESS_BOOK_AREA.addressBook_dial(),\r\n            className: tcn(`flex w-12 justify-center`),\r\n            content: <IconDialpad className={getSVGStylesIfActive(AppRoutes.Dial)} />,\r\n        })\r\n\r\n        if (privileges.SYS_USE_FAVORITES_TAB) {\r\n            listInner.push({\r\n                id: AppRoutes.Favorites,\r\n                testId: 'nav-favorites',\r\n                title: t.ADDRESS_BOOK_AREA.addressBook_favorites(),\r\n                className: tcn(`flex w-12 justify-center`),\r\n                content: <IconStar24 className={getSVGStylesIfActive(AppRoutes.Favorites)} />,\r\n            })\r\n        }\r\n\r\n        if (privileges.SYS_USE_RECENT_TAB) {\r\n            listInner.push({\r\n                id: AppRoutes.Recents,\r\n                testId: 'nav-recents',\r\n                title: t.ADDRESS_BOOK_AREA.addressBook_recents(),\r\n                className: tcn(`flex w-12 justify-center`),\r\n                content: (\r\n                    <>\r\n                        <IconRecent className={getSVGStylesIfActive(AppRoutes.Recents)} />\r\n                        <UnreadBadge className={recentBadgeStyles} unreadAmount={unreadAmount} />\r\n                        {!unreadAmount && <MissedCallsBadge className={recentBadgeStyles} amount={missedCallsAmount} />}\r\n                    </>\r\n                ),\r\n            })\r\n        }\r\n\r\n\r\n        if (tabMetaInfo?.app === 'adc' && privileges.CAN_USE_CALENDAR) {\r\n            listInner.push({\r\n                id: AppRoutes.Calendar,\r\n                testId: 'nav-calendar',\r\n                title: t.ADDRESS_BOOK_AREA.addressBook_calendar(),\r\n                className: tcn(`flex w-12 justify-center`),\r\n                content: <IconCalendar className={getSVGStylesIfActive(AppRoutes.Calendar)} />,\r\n            })\r\n        }\r\n\r\n        return listInner\r\n\r\n        function getSVGStylesIfActive(page: AppRoutes) {\r\n            return page === activePage.name ? 'svg-color-primary' : 'svg-color-neutral-600'\r\n        }\r\n\r\n        function getInteractionTabSVGStyles() {\r\n            const isInteractionTabActive = AppRoutes.Interactions === activePage.name\r\n            return tcn({\r\n                'svg-color-primary': isInteractionTabActive,\r\n                'svg-color-neutral-600': !isInteractionTabActive && !noVisibleInteractionsOnMainPannel,\r\n                'svg-color-neutral-400': noVisibleInteractionsOnMainPannel,\r\n            })\r\n        }\r\n    }, [\r\n        t.ADDRESS_BOOK_AREA,\r\n        privileges.SYS_USE_FAVORITES_TAB,\r\n        privileges.SYS_USE_RECENT_TAB,\r\n        privileges.CAN_USE_CALENDAR,\r\n        tabMetaInfo?.app,\r\n        missedCallsAmount,\r\n        unreadAmount,\r\n        activePage.name,\r\n        noVisibleInteractionsOnMainPannel,\r\n    ])\r\n\r\n    const onTabChange = useCallback((newTabID: string) => {\r\n        const newPage = newTabID as AppRoutes\r\n        setActivePage({name: newPage})\r\n    }, [setActivePage])\r\n\r\n    return (\r\n        <TabsRoot>\r\n            <TabsList\r\n                className=\"justify-center gap-6\"\r\n                data-testid=\"bottom-nav\"\r\n                topBorder\r\n            >\r\n                {navTabs.map(tab => (\r\n                    <TabsTrigger\r\n                        key={tab.id}\r\n                        value={tab.id}\r\n                        onClick={() => onTabChange(tab.id)}\r\n                        isSelected={tab.id === activePage.name}\r\n                        className={tab.className}\r\n                        data-testid={tab.testId}\r\n                        topBorder\r\n                        disabled={tab.disabled}\r\n                        triggerClassName=\"flex items-center justify-center p-3\"\r\n                    >\r\n                        {tab.content}\r\n                    </TabsTrigger>\r\n                ))}\r\n            </TabsList>\r\n        </TabsRoot>\r\n    )\r\n})\r\n","import React from 'react'\r\n\r\nimport {useIsCommunicator} from '@bpinc/ad-current-tab-data-context'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nexport const MainPageTitle: React.FC = () => {\r\n    const {activePage} = useNavigationState()\r\n    const isCommunicator = useIsCommunicator()\r\n    const {ADDRESS_BOOK_AREA: i18n} = useLocalizationState('t')\r\n\r\n    const pageTitles: Partial<Record<AppRoutes, string>> = {\r\n        [AppRoutes.Calendar]: i18n.addressBook_calendar(),\r\n        [AppRoutes.ContactDetails]: i18n.addressBook_contact_details(),\r\n        [AppRoutes.Cases]: i18n.addressBook_cases(),\r\n        [AppRoutes.Dial]: i18n.addressBook_dial_pad(),\r\n        [AppRoutes.Directory]: i18n.addressBook_directory(),\r\n        [AppRoutes.Favorites]: i18n.addressBook_favorites(),\r\n        [AppRoutes.KnowledgeBase]: i18n.addressBook_knowledge_base(),\r\n        [AppRoutes.Recents]: i18n.addressBook_recents(),\r\n        [AppRoutes.Help]: i18n.addressBook_help(),\r\n    }\r\n\r\n    // TODO: I think this component should be moved to the specific page components\r\n    if (\r\n        isCommunicator ||\r\n        activePage.name === AppRoutes.Interactions ||\r\n        activePage.name === AppRoutes.ContactDetails\r\n    ) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex shrink-0 items-center p-4\">\r\n            <span data-testid=\"page-title\" className=\"uppercase tracking-[0.8px] caption-xs text-neutral-disabled\">\r\n                {pageTitles[activePage.name]?.toUpperCase()}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"outerWrapper\":\"communicator_MainPage_outerWrapper_F6z1g\",\"wrapper\":\"communicator_MainPage_wrapper_krWum\",\"invisible\":\"communicator_MainPage_invisible_FSqHH\",\"sidebar\":\"communicator_MainPage_sidebar_hJQGa\",\"item\":\"communicator_MainPage_item_MWSjp\",\"itemLink\":\"communicator_MainPage_itemLink_WjiTq\",\"itemActive_recent\":\"communicator_MainPage_itemActive_recent_esr5r\",\"itemActive_favorites\":\"communicator_MainPage_itemActive_favorites_6aHjZ\",\"itemActive_directory\":\"communicator_MainPage_itemActive_directory_nNRPC\",\"itemActive_dialpad\":\"communicator_MainPage_itemActive_dialpad_bXLh5\",\"itemActive_calendar\":\"communicator_MainPage_itemActive_calendar_TYzDh\",\"itemActive_help\":\"communicator_MainPage_itemActive_help_l1tNv\",\"itemActive_knowledge-base\":\"communicator_MainPage_itemActive_knowledge-base_3uT73\",\"icon\":\"communicator_MainPage_icon_EJpVq\",\"header\":\"communicator_MainPage_header_p07Ex\",\"pageTitle\":\"communicator_MainPage_pageTitle_qDD83\",\"headerTop\":\"communicator_MainPage_headerTop_ooG9j\",\"agentState\":\"communicator_MainPage_agentState_RoOuK\",\"agentStateText\":\"communicator_MainPage_agentStateText_mW5t2\",\"rightButtons\":\"communicator_MainPage_rightButtons_pq4RG\",\"popout\":\"communicator_MainPage_popout_jC9Xu\",\"directChat\":\"communicator_MainPage_directChat_QBPZh\",\"hamburger\":\"communicator_MainPage_hamburger_icTEV\",\"pusher\":\"communicator_MainPage_pusher_PK6bH\",\"content\":\"communicator_MainPage_content_1YjJW\",\"offlineBar\":\"communicator_MainPage_offlineBar_umrUd\",\"offlineErrorMessage\":\"communicator_MainPage_offlineErrorMessage_52imi\",\"knowledgeBase\":\"communicator_MainPage_knowledgeBase_QPE4T\",\"notifications\":\"communicator_MainPage_notifications_uzeh4\",\"mainMenuIconWrapper\":\"communicator_MainPage_mainMenuIconWrapper_veOLm\",\"errorFallback\":\"communicator_MainPage_errorFallback_vSke3\",\"copiedLabel\":\"communicator_MainPage_copiedLabel_1VjWY\",\"fade-out\":\"communicator_MainPage_fade-out_d4CAy\",\"inNotification\":\"communicator_MainPage_inNotification_OS8Q6\",\"directChatLinkCopyNotification\":\"communicator_MainPage_directChatLinkCopyNotification_Ge1YS\"};","import type {FC} from 'react'\r\nimport React, {memo} from 'react'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmMessage} from '@bpinc/lib-external-ui-elements'\r\nimport {ErrorBoundary} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {Calendar} from '../../calendar'\r\nimport {Cases} from '../../cases'\r\nimport {ContactDetails} from '../../contact-details'\r\nimport {Dialpad} from '../../dialpad'\r\nimport {Directory} from '../../directory'\r\nimport {Favorites} from '../../favorites'\r\nimport {InteractionsPage} from '../../interactions'\r\nimport {GlobalKB} from '../../kb'\r\nimport {Recent} from '../../recent'\r\nimport {GlobalSlidingModalsList} from '../../sliding-modal'\r\nimport {HelpPage} from './HelpPage'\r\nimport {MainPageNav} from './MainPageNav'\r\nimport {MainPageTitle} from './MainPageTitle'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\nconst ErrorFallback: React.FC<{ errorMessage: string }> = ({\r\n    errorMessage,\r\n}) => {\r\n    const {t} = useLocalizationState()\r\n\r\n    return (\r\n        <SmMessage\r\n            className={styles.errorFallback}\r\n            error\r\n            header={t.ERROR_MESSAGES.unhandled_router_error()}\r\n            content={\r\n                process.env.NODE_ENV === 'development' &&\r\n                `Error info: ${errorMessage}`\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nfunction wrapWithErrorBoundary(Component: React.FC) {\r\n    return (\r\n        <ErrorBoundary fallback={ErrorFallback}>\r\n            <Component />\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nconst mainPageContentConfig: Record<AppRoutes, React.ReactElement> = {\r\n    [AppRoutes.Recents]: wrapWithErrorBoundary(Recent),\r\n    [AppRoutes.Dial]: wrapWithErrorBoundary(Dialpad),\r\n    [AppRoutes.Favorites]: wrapWithErrorBoundary(Favorites),\r\n    [AppRoutes.Directory]: wrapWithErrorBoundary(Directory),\r\n    [AppRoutes.Interactions]: wrapWithErrorBoundary(InteractionsPage),\r\n    [AppRoutes.Cases]: wrapWithErrorBoundary(Cases),\r\n    [AppRoutes.ContactDetails]: wrapWithErrorBoundary(ContactDetails),\r\n    [AppRoutes.KnowledgeBase]: wrapWithErrorBoundary(GlobalKB),\r\n    [AppRoutes.Help]: wrapWithErrorBoundary(HelpPage),\r\n    [AppRoutes.Calendar]: wrapWithErrorBoundary(Calendar),\r\n}\r\n\r\nexport const CommunicatorContent: FC = memo(function CommunicatorContent() {\r\n    const {activePage} = useNavigationState()\r\n\r\n    return (\r\n        <>\r\n            <MainPageTitle />\r\n            <div\r\n                className=\"relative z-0 flex w-full shrink grow flex-col overflow-hidden\"\r\n                data-testid=\"communicator_content\"\r\n            >\r\n                {mainPageContentConfig[activePage.name]}\r\n            </div>\r\n            <MainPageNav />\r\n            <GlobalSlidingModalsList />\r\n        </>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {useAtomValue} from 'jotai'\r\n\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\n\r\nimport {ServiceSelect} from '../../components/ServiceSelect'\r\nimport {isPadOpenAtom} from '../atoms'\r\nimport {useSearchQueryFromPageParams} from '../hooks/useSearchQueryFromPageParams'\r\nimport {DialpadButtons} from './DialpadButtons'\r\nimport {DialpadContacts} from './DialpadContacts'\r\nimport {DialpadForm} from './DialpadForm'\r\nimport {useAccessibleShortcuts} from './useAccessibleShortcuts'\r\n\r\n\r\nexport const Dialpad: React.FC = () => {\r\n    const activeInteractionId = useActiveInteractionId()\r\n\r\n    const isPadOpen = useAtomValue(isPadOpenAtom)\r\n\r\n    useSearchQueryFromPageParams()\r\n    useAccessibleShortcuts()\r\n\r\n    return (\r\n        <div\r\n            className=\"relative flex flex-1 flex-col overflow-hidden\"\r\n            data-testid=\"dialpad\"\r\n        >\r\n\r\n            <div className=\"px-4 pt-2\">\r\n                <ServiceSelect itemId={activeInteractionId} />\r\n            </div>\r\n\r\n            <div\r\n                className={tcn('flex flex-1 flex-col overflow-y-hidden pb-[50px] pl-4 pr-0.5 pt-[7px]', {\r\n                    'pb-[350px]': isPadOpen,\r\n                })}\r\n            >\r\n                <DialpadForm />\r\n                <DialpadContacts />\r\n            </div>\r\n\r\n            <DialpadButtons />\r\n        </div>\r\n    )\r\n}\r\n","import {useLayoutEffect} from 'react'\r\n\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\n\r\n\r\nexport function useSearchQueryFromPageParams() {\r\n    const {searchValue, setSearchValue} = useCommunicatorUIState('dialpad')\r\n    const {\r\n        activePage: {params: pageParams},\r\n        cleanPageParams,\r\n    } = useNavigationState()\r\n    const searchQuery = pageParams?.searchQuery\r\n\r\n    useLayoutEffect(() => {\r\n        if (!searchValue && searchQuery) {\r\n            setSearchValue(searchQuery)\r\n        }\r\n        cleanPageParams()\r\n    }, [searchValue, searchQuery, setSearchValue, cleanPageParams])\r\n}\r\n","import {useCallback} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useEventListener} from '@bpinc/lib-helpers'\r\nimport {useFavoritesState} from '@bpinc/state-favorites-context'\r\n\r\nimport {useFilteredAndSortedFavoritesList} from '../../favorites'\r\nimport {useHandlers} from '../hooks/useHandlers'\r\n\r\n\r\nexport function useAccessibleShortcuts() {\r\n    const {onChatClick} = useHandlers()\r\n    const favoritesList = useFavoritesState('favoritesList')\r\n    const setSearchValue = useCommunicatorUIState(s => s.dialpad.setSearchValue)\r\n    const sortedAndFilterFavoritesList = useFilteredAndSortedFavoritesList({favoritesList})\r\n\r\n    const onKeyPress = useCallback(\r\n        function onKeyPressCallback(keyboardEvent: KeyboardEvent) {\r\n            const numPressed = Number(keyboardEvent.code?.match(/^(Numpad|Digit)([1-9])$/)?.[2])\r\n\r\n            if (numPressed && keyboardEvent.altKey && keyboardEvent.shiftKey) {\r\n                searchFavoriteNumber()\r\n            }\r\n\r\n            switch (keyboardEvent.code) {\r\n                case 'KeyS':\r\n                    if (keyboardEvent.altKey && keyboardEvent.shiftKey) {\r\n                        return onChatClick()\r\n                    }\r\n                    break\r\n            }\r\n\r\n            function searchFavoriteNumber() {\r\n                const favoritesIndex = numPressed - 1\r\n                const favoritesItem = sortedAndFilterFavoritesList[favoritesIndex].item\r\n                const phoneChannel = favoritesItem.channels.find(({channelType}) => channelType === 'phone')\r\n\r\n                if (phoneChannel?.number) {\r\n                    const dialpadInput = document.querySelector('[data-testid=\"dialpad-input\"] input')\r\n                    if (dialpadInput) {\r\n                        setSearchValue(phoneChannel.number)\r\n                        ;(dialpadInput as HTMLInputElement).focus()\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        [onChatClick, setSearchValue, sortedAndFilterFavoritesList],\r\n    )\r\n\r\n    useEventListener('keydown', onKeyPress)\r\n}\r\n","import React from 'react'\r\n\r\nimport {useActiveInteractionId} from '@bpinc/ad-interaction-state-context'\r\n\r\nimport {ServiceSelect} from '../../components/ServiceSelect'\r\nimport type {FavoritesListProps} from '../types'\r\nimport {FavoritesList} from './FavoritesList'\r\n\r\n\r\nexport const Favorites: React.FC<FavoritesListProps> = props => {\r\n\r\n    const activeInteractionId = useActiveInteractionId()\r\n\r\n    return (\r\n        <div\r\n            className=\"flex h-full min-h-0 flex-auto flex-col gap-2.5 px-4 pt-2\"\r\n            data-testid=\"favorites\"\r\n        >\r\n            <ServiceSelect itemId={activeInteractionId} />\r\n            <FavoritesList {...props} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {DirectoryTabs} from './DirectoryTabs'\r\n\r\n\r\nexport const Directory: React.FC = () => {\r\n    return (\r\n        <div\r\n            className=\"flex h-full min-h-0 flex-auto flex-col\"\r\n            data-testid=\"directory\"\r\n        >\r\n            <DirectoryTabs />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {get} from 'lodash-es'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\n\r\nimport {Case} from './Case'\r\nimport {Email} from './Email'\r\n\r\n\r\nexport const Cases = () => {\r\n    const {activePage} = useNavigationState()\r\n    const id = get(activePage.params, 'id')\r\n    const emailId = get(activePage.params, 'emailId')\r\n\r\n    if (emailId) return <Email id={emailId} />\r\n\r\n    if (id) return <Case id={id} />\r\n\r\n    bpLogger.error('You are trying to open a case page without providing the case ID.')\r\n    return null\r\n}\r\n","import React from 'react'\r\n\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\n\r\nimport {DirectoryEntry} from './Internal/DirectoryEntry'\r\nimport {User} from './Internal/User'\r\nimport {External} from './External'\r\n\r\n\r\nexport const ContactDetails: React.FC = () => {\r\n    const {activePage} = useNavigationState()\r\n    const {contactId, userId, entryId} = activePage.params ?? {}\r\n\r\n    if (contactId) {\r\n        return <External contactId={contactId} />\r\n    }\r\n    if (entryId) {\r\n        return <DirectoryEntry entryId={entryId} />\r\n    }\r\n    if (userId) {\r\n        return <User userId={userId} />\r\n    }\r\n\r\n    bpLogger.error('You are trying to open a contact details page without providing a proper ID.')\r\n    return null\r\n}\r\n","import {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {Help} from '@bpinc/lib-help-ui'\r\n\r\n\r\nexport const HelpPage = () => {\r\n    const addPageParams = useNavigationState('addPageParams')\r\n    return <Help addPageParams={addPageParams} />\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"listWrapper\":\"communicator_Notifications_listWrapper_NVyLi\",\"listItem\":\"communicator_Notifications_listItem_5BLxr\"};","import React, {cloneElement, isValidElement, useMemo} from 'react'\r\n\r\nimport {SmMessage, SmTransition} from '@bpinc/lib-external-ui-elements'\r\nimport {useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {truthy} from '@bpinc/lib-types-helpers'\r\nimport {AriaStatus} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from './Notifications.module.less'\r\n\r\n\r\nconst LIMIT = 3\r\n\r\ntype Props = {\r\n    omit?: string[]\r\n    show?: string[]\r\n    className?: string\r\n}\r\n\r\nconst duration = {hide: 0, show: 300}\r\n\r\n// TODO: remove <ServiceSelect /> from this component, move it to prop or content\r\nexport const Notifications: React.FC<Props> = ({omit, show, className}) => {\r\n    const {\r\n        notifications: notifications,\r\n        methods: {hideNotificationById},\r\n    } = useNotificationsState()\r\n\r\n    const notificationsToRender = useMemo(() => {\r\n        let filteredList = truthy(Object.values(notifications)).filter(n => !n.delayed)\r\n\r\n        if (show) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return show.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        if (omit) {\r\n            filteredList = filteredList.filter(notification => {\r\n                return !omit.includes(notification.id)\r\n            })\r\n        }\r\n\r\n        return filteredList.slice(0, LIMIT)\r\n    }, [notifications, omit, show])\r\n\r\n    return (\r\n        <div className={tcn(className, styles.listWrapper)}>\r\n            <SmTransition.Group animation=\"fade down\" duration={duration}>\r\n                {notificationsToRender.map(notification => {\r\n                    let content: React.ReactNode\r\n\r\n                    if (notification.content) {\r\n                        content = isValidElement(notification.content)\r\n                            ? cloneElement(notification.content, {onHide: () => hideNotificationById(notification.id)})\r\n                            : notification.content\r\n                    } else {\r\n                        content = notification.message\r\n                    }\r\n\r\n                    return (\r\n                        <div key={notification.id} className={styles.listItem}>\r\n                            <div>\r\n                                <SmMessage\r\n                                    onDismiss={\r\n                                        notification.closable\r\n                                            ? () => hideNotificationById(notification.id)\r\n                                            : undefined\r\n                                    }\r\n                                    content={content}\r\n                                    error={notification.type === 'error'}\r\n                                    info={notification.type === 'info'}\r\n                                    warning={notification.type === 'warning'}\r\n                                    success={notification.type === 'success'}\r\n                                />\r\n                            </div>\r\n                            <AriaStatus>{content}</AriaStatus>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </SmTransition.Group>\r\n        </div>\r\n    )\r\n}\r\n","import type {ComponentProps} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\n\r\nimport {useAgentStateSelectedOption} from '@bpinc/ad-agent-state-context'\r\nimport {useGetAvatarUrl} from '@bpinc/ad-contacts-state-hooks'\r\nimport {useInteractionChatData} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {ChatDataObject} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInternalChats} from '@bpinc/ad-interaction-internal-chat-state-context'\r\nimport type {InternalChatItems} from '@bpinc/ad-interaction-internal-chat-state-types'\r\nimport {useActiveInteractionProp, useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {useIsOffline} from '@bpinc/ad-offline-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AgentStatusIcon} from '@bpinc/lib-agent-state-ui'\r\nimport {AvatarLegacy, getAvatarType} from '@bpinc/lib-avatar-ui'\r\nimport {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {isHTMLButtonElement} from '@bpinc/lib-html-utils'\r\nimport {\r\n    IconNavDial,\r\n    IconNavDirectory,\r\n    IconNavFavorites,\r\n    IconNavRecents,\r\n    IconNavSettings,\r\n} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\ninterface Props {\r\n    activePageName: string\r\n    onMenuItemClick: (name: AppRoutes, params?: Record<string, unknown>) => void\r\n    onSettingsClick: () => void\r\n    onAgentStateClick: () => void\r\n    onInteractionClick: (item: Item) => void\r\n}\r\n\r\nconst getUnread = (item: Item, externalItems: ChatDataObject, internalItems: InternalChatItems) => {\r\n    const userId = item.internalChatData && item.internalChatData.userId\r\n    const interactionStepId = getInteractionStepId(item)\r\n    const unreadExternal = interactionStepId && externalItems[interactionStepId] && externalItems[interactionStepId].unread\r\n    const unreadInternal = userId && internalItems[userId] && internalItems[userId].unreadAmount\r\n    return unreadExternal || unreadInternal || 0\r\n}\r\n\r\nconst AppMinimized: React.FC<Props> = props => {\r\n    const {activePageName, onMenuItemClick, onSettingsClick, onAgentStateClick, onInteractionClick} = props\r\n    const {isLoggedIn} = useSessionState()\r\n    const isOffline = useIsOffline()\r\n    const {t} = useLocalizationState()\r\n    const interactions = useInteractions()\r\n    const getAvatarUrl = useGetAvatarUrl()\r\n    const externalItems = useInteractionChatData()\r\n    const internalItems = useInternalChats()\r\n    const activeItemMediaType = useActiveInteractionProp(i => i?.mediaType)\r\n    const selectedAgentStatusOption = useAgentStateSelectedOption()\r\n    const handleItemKeyPress = useCallback((e: React.KeyboardEvent) => {\r\n        // Enter, Space\r\n        if (e.key === 'Enter' || e.key === ' ') {\r\n            const button = e.target\r\n            if (!isHTMLButtonElement(button)) {\r\n                return\r\n            }\r\n            e.preventDefault()\r\n            button.click()\r\n        }\r\n    }, [])\r\n\r\n    const mainMenuItems = useMemo(() => {\r\n        return [\r\n            {route: AppRoutes.Recents, name: t.ADDRESS_BOOK_AREA.addressBook_recents(), Icon: IconNavRecents},\r\n            {route: AppRoutes.Favorites, name: t.ADDRESS_BOOK_AREA.addressBook_favorites(), Icon: IconNavFavorites},\r\n            {route: AppRoutes.Directory, name: t.ADDRESS_BOOK_AREA.addressBook_directory(), Icon: IconNavDirectory},\r\n            {route: AppRoutes.Dial, name: t.ADDRESS_BOOK_AREA.addressBook_dial(), Icon: IconNavDial},\r\n        ].map(item => {\r\n            return {...item, onClick: () => onMenuItemClick(item.route)}\r\n        })\r\n    }, [onMenuItemClick, t.ADDRESS_BOOK_AREA])\r\n\r\n    const interactionCallbacks = useMemo(() => interactions.map(item => ({\r\n        onClick: () => onInteractionClick(item),\r\n    })), [interactions, onInteractionClick])\r\n\r\n    const itemStyles = tcn('h-9 w-9 justify-center p-0 [&:not(:last-child)]:mb-2')\r\n\r\n    return (\r\n        <div className=\"h-full w-11 p-1 outline outline-1 outline-main-border\">\r\n            {isLoggedIn ? (\r\n                <SmMenu vertical secondary>\r\n                    <SmMenu.Item\r\n                        as=\"button\"\r\n                        className={tcn(itemStyles, '[&_img]:h-7 [&_img]:w-7')}\r\n                        name=\"AgentState\"\r\n                        onClick={onAgentStateClick}\r\n                    >\r\n                        <AgentStatusIcon\r\n                            busyMediaType={activeItemMediaType}\r\n                            agentStatusOption={selectedAgentStatusOption}\r\n                            isOffline={isOffline}\r\n                        />\r\n                    </SmMenu.Item>\r\n                    {mainMenuItems.map(({Icon, name, onClick, route}) => (\r\n                        <SmMenu.Item\r\n                            as=\"button\"\r\n                            className={itemStyles}\r\n                            key={name}\r\n                            name={name}\r\n                            onClick={onClick}\r\n                            active={activePageName === route}\r\n                            onKeyPress={handleItemKeyPress}\r\n                        >\r\n                            <Icon />\r\n                        </SmMenu.Item>\r\n                    ))}\r\n                    <SmMenu.Item\r\n                        as=\"button\"\r\n                        className={itemStyles}\r\n                        name=\"Settings\"\r\n                        onClick={onSettingsClick}\r\n                        onKeyPress={handleItemKeyPress}\r\n                    >\r\n                        <IconNavSettings />\r\n                    </SmMenu.Item>\r\n                    {interactions.map((item, i) => {\r\n                        const {\r\n                            displayData,\r\n                            internalChatData,\r\n                            externalChatData,\r\n                            userId,\r\n                            contactId,\r\n                        } = item\r\n                        const emiUserType = item.displayData?.emiUserType\r\n                        const isChat = item.mediaType === 'chat' || !!internalChatData || !!externalChatData\r\n                        const unread = getUnread(item, externalItems, internalItems)\r\n                        let firstName, lastName\r\n\r\n                        if (externalChatData || internalChatData) {\r\n                            const data = externalChatData || internalChatData\r\n                            firstName = data!.firstName\r\n                            lastName = data!.lastName\r\n                        } else {\r\n                            firstName = displayData.firstName\r\n                            lastName = displayData.lastName\r\n                        }\r\n\r\n                        const avatarProps: ComponentProps<typeof AvatarLegacy> = {\r\n                            firstName,\r\n                            lastName,\r\n                            url: getAvatarUrl({\r\n                                userId: userId,\r\n                                contactId: contactId,\r\n                                userType: emiUserType,\r\n                                photoUrl: item.displayData?.emiPhotoUrl,\r\n                            }),\r\n                            headPhones: !!userId,\r\n                            interactionIcon: isChat ? unread || 'chat' : 'phone',\r\n                            size: 28,\r\n                            type: getAvatarType(userId, contactId, emiUserType),\r\n                        }\r\n\r\n                        return (\r\n                            <SmMenu.Item\r\n                                as=\"button\"\r\n                                className={itemStyles}\r\n                                key={item.id}\r\n                                name={String(Math.random())}\r\n                                onClick={interactionCallbacks[i].onClick}\r\n                                onKeyPress={handleItemKeyPress}\r\n                            >\r\n                                <AvatarLegacy {...avatarProps} />\r\n                            </SmMenu.Item>\r\n                        )\r\n                    })}\r\n                </SmMenu>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {AppMinimized}\r\n","import type {ModalVisualParams} from '@bpinc/state-modals-types'\r\n\r\n/** Default visual properties of modals */\r\nexport const defaultModalsConfig: ModalVisualParams & {__ts__: number} = {\r\n    /** Date when default config was set */\r\n    __ts__: Date.now(),\r\n    notification: {\r\n        compact: false,\r\n        hideWhileActiveInteraction: true,\r\n    },\r\n    calendar_event_notification: {},\r\n    quality_management_monitor: {\r\n        position: undefined,\r\n    },\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getGlobalInteractionId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useRemoteAssistStateConnector} from '@bpinc/ad-remote-assist-state-context'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useInteractionUIItemStateSetter} from '@bpinc/state-interaction-ui'\r\n\r\n\r\nexport function useRemoteAssistStateSubscription() {\r\n    const connector = useRemoteAssistStateConnector()\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    const setItemState = useInteractionUIItemStateSetter()\r\n\r\n    useEffect(\r\n        function remoteAssistStateSubscription() {\r\n            const subscription = connector.dispenser.subscribe({\r\n                onSessionStarted: ({globalInteractionId, clientUrl}) => {\r\n                    const realItem = itemsRef.current.find(item => {\r\n                        return getGlobalInteractionId(item) === globalInteractionId\r\n                    })\r\n                    const internalChatItem = itemsRef.current.find(item => {\r\n                        return item.id === globalInteractionId\r\n                    })\r\n                    const item = realItem ?? internalChatItem\r\n                    if (!item) {\r\n                        return\r\n                    }\r\n                    setItemState(item.id, itemState => ({\r\n                        ...itemState,\r\n                        chatMessage: itemState.chatMessage + ' ' + clientUrl,\r\n                    }))\r\n                },\r\n            })\r\n            return () => subscription.unsubscribe()\r\n        },\r\n        [connector, setItemState, itemsRef],\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useIntegrationApiStateMethods} from '@bpinc/ad-integration-api-state-context'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\nimport {useBPClientStateSubscription} from './useBPClientStateSubscription'\r\nimport {useIntegrationApiSubscription} from './useIntegrationApiSubscription'\r\nimport {useInteractionChatStateSubscription} from './useInteractionChatStateSubscription'\r\nimport {useInteractionStateSubscription} from './useInteractionStateSubscription'\r\nimport {useRemoteAssistStateSubscription} from './useRemoteAssistStateSubscription'\r\n\r\n\r\ninterface Params {\r\n    toggleSettings: Toggle\r\n    toggleRightPanel: Toggle\r\n    isMinimized: boolean\r\n    setIsMinimized: StateSetter<boolean>\r\n}\r\nexport function useStateSubscriptions({toggleRightPanel, toggleSettings, isMinimized, setIsMinimized}: Params) {\r\n    /*\r\n        Subscriptions\r\n    */\r\n    useInteractionStateSubscription()\r\n    useInteractionChatStateSubscription()\r\n    useBPClientStateSubscription()\r\n    useRemoteAssistStateSubscription()\r\n    useIntegrationApiSubscription({toggleRightPanel, toggleSettings, setIsMinimized})\r\n\r\n    /*\r\n        Dispatchers\r\n    */\r\n    const {widgetMinimizedChange} = useIntegrationApiStateMethods()\r\n\r\n    useEffect(() => {\r\n        widgetMinimizedChange(isMinimized)\r\n    }, [widgetMinimizedChange, isMinimized])\r\n}\r\n","import {useCallback, useEffect} from 'react'\r\n\r\nimport {useInteractionStateConnector} from '@bpinc/ad-interaction-state-context'\r\nimport {AppRoutes, useNavigationStateRef} from '@bpinc/lib-communicator-navigation-state'\r\n\r\n\r\nexport function useInteractionStateSubscription() {\r\n    const navigationStateRef = useNavigationStateRef()\r\n    const interactionStateConnector = useInteractionStateConnector()\r\n    const openInteractionsPage = useCallback(\r\n        function openInteractionsPageCallback() {\r\n            const {activePage, setActivePage} = navigationStateRef.current\r\n            if (activePage.name !== AppRoutes.Interactions) {\r\n                setActivePage({\r\n                    name: AppRoutes.Interactions,\r\n                })\r\n            }\r\n        },\r\n        [navigationStateRef],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const subscription = interactionStateConnector?.dispenser.subscribe({\r\n            onItemAccepted: openInteractionsPage,\r\n            onActiveItemChanged: openInteractionsPage,\r\n        })\r\n        return () => subscription?.unsubscribe()\r\n    }, [\r\n        interactionStateConnector?.dispenser,\r\n        navigationStateRef,\r\n        openInteractionsPage,\r\n    ])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useInteractionChatStateConnector} from '@bpinc/ad-interaction-chat-state-context'\r\nimport type {CobrowsingStartedData, SwitchItemChannelData} from '@bpinc/ad-interaction-chat-state-types'\r\nimport {useInteractions} from '@bpinc/ad-interaction-state-context'\r\nimport {getInteractionStepId} from '@bpinc/ad-interaction-state-methods'\r\nimport {useAsRef} from '@bpinc/lib-helpers'\r\nimport {useOpenChannel} from '@bpinc/lib-helpers-ui'\r\n\r\n\r\nexport function useInteractionChatStateSubscription() {\r\n    const connector = useInteractionChatStateConnector()\r\n    const items = useInteractions()\r\n    const itemsRef = useAsRef(items)\r\n    const openChannel = useOpenChannel()\r\n\r\n    useEffect(() => {\r\n        const subscription = connector.dispenser.subscribe({\r\n            onSwitchItemChannel: openChannelOnSwitch,\r\n            onCobrowsingStarted: openCobrowsingWindow,\r\n        })\r\n\r\n        return () => {\r\n            subscription.unsubscribe()\r\n        }\r\n\r\n        function openChannelOnSwitch({interactionStepId, channel}: SwitchItemChannelData) {\r\n            const item = itemsRef.current.find(it => {\r\n                return getInteractionStepId(it) === interactionStepId\r\n            })\r\n            if (!item) {\r\n                return\r\n            }\r\n            openChannel(channel, item.id)\r\n        }\r\n\r\n        function openCobrowsingWindow(cobrowsingPayload: CobrowsingStartedData) {\r\n            cobrowsingPayload.cobrowsingLink && window.open(cobrowsingPayload.cobrowsingLink, '_blank', '')\r\n        }\r\n\r\n    }, [connector.dispenser, itemsRef, openChannel])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useBpClientStateConnector} from '@bpinc/ad-bpclient-state-context'\r\nimport {AppRoutes, useNavigationStateRef} from '@bpinc/lib-communicator-navigation-state'\r\n\r\n\r\nexport function useBPClientStateSubscription() {\r\n    const connector = useBpClientStateConnector()\r\n    const navigationStateRef = useNavigationStateRef()\r\n    useEffect(\r\n        function bpClientSubscription() {\r\n            const {setActivePage} = navigationStateRef.current\r\n            const subscription = connector?.dispenser.subscribe({\r\n                onNavigateToInteraction: () => {\r\n                    setActivePage({name: AppRoutes.Interactions})\r\n                },\r\n            })\r\n            return () => subscription?.unsubscribe()\r\n        },\r\n        [connector, navigationStateRef],\r\n    )\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useIntegrationApiStateConnector} from '@bpinc/ad-integration-api-state-context'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\nimport type {StateSetter} from '@bpinc/lib-types-helpers'\r\n\r\n\r\ninterface Params {\r\n    toggleSettings: Toggle\r\n    toggleRightPanel: Toggle\r\n    setIsMinimized: StateSetter<boolean>\r\n}\r\n\r\nexport function useIntegrationApiSubscription({toggleRightPanel, toggleSettings, setIsMinimized}: Params) {\r\n    const integrationApiConnector = useIntegrationApiStateConnector()\r\n\r\n    useEffect(() => {\r\n        const subscription = integrationApiConnector.dispenser.subscribe({\r\n            onSetWidgetMinimized,\r\n        })\r\n\r\n        return () => {\r\n            subscription.unsubscribe()\r\n        }\r\n\r\n\r\n        function onSetWidgetMinimized(widgetMinimized: boolean) {\r\n            if (widgetMinimized) {\r\n                toggleSettings(false)\r\n                toggleRightPanel(false)\r\n            }\r\n            setIsMinimized(widgetMinimized)\r\n            return Promise.resolve()\r\n        }\r\n    }, [integrationApiConnector.dispenser, setIsMinimized, toggleRightPanel, toggleSettings])\r\n}\r\n","import type React from 'react'\r\nimport {useCallback, useMemo} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\n\r\n\r\nexport function useHandlers() {\r\n    const {toggleRightPanel, toggleSettings} = useCommunicatorUIState(['toggleRightPanel', 'toggleSettings'])\r\n\r\n    const closeMenu = useCallback(\r\n        function closeMenuCallback() {\r\n            toggleSettings(false)\r\n            toggleRightPanel(false)\r\n        },\r\n        [toggleRightPanel, toggleSettings],\r\n    )\r\n\r\n    const openSettingsMenu = useCallback(\r\n        function openSettingsMenuCallback() {\r\n            toggleSettings(true)\r\n            toggleRightPanel(true)\r\n        },\r\n        [toggleSettings, toggleRightPanel],\r\n    )\r\n\r\n    const handleMenuKeyPress = useCallback(\r\n        (e: React.KeyboardEvent) => {\r\n            if (['Escape'].includes(e.key)) {\r\n                e.preventDefault()\r\n                closeMenu()\r\n            }\r\n        },\r\n        [closeMenu],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                toggleSettings,\r\n                closeMenu,\r\n                openSettingsMenu,\r\n                handleMenuKeyPress,\r\n            }\r\n        },\r\n        [\r\n            toggleSettings,\r\n            closeMenu,\r\n            openSettingsMenu,\r\n            handleMenuKeyPress,\r\n        ],\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\n\r\nimport {SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {isHTMLButtonElement} from '@bpinc/lib-html-utils'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useEnabledInOffline} from '@bpinc/lib-ui-elements'\r\n\r\nimport type {MenuItemParams} from '../hooks/useSettingsMenu'\r\n\r\nimport styles from '../../../styles/MainPage.module.less'\r\n\r\n\r\ninterface SettingsMenuItemProps extends MenuItemParams {\r\n    activePage: string\r\n    id: string\r\n}\r\n\r\nexport const MenuItem: React.FC<SettingsMenuItemProps> = ({\r\n    allowRender = true,\r\n    id,\r\n    onClick,\r\n    enabledOffline,\r\n    children,\r\n    isLink,\r\n    page,\r\n    activePage,\r\n    disabled,\r\n    disabledTitle,\r\n}) => {\r\n    const handleItemKeyPress = useCallback((e: React.KeyboardEvent) => {\r\n        if (['Enter', ' '].includes(e.key)) {\r\n            const button = e.target\r\n            if (!isHTMLButtonElement(button)) {\r\n                return\r\n            }\r\n            e.preventDefault()\r\n            button.click()\r\n        }\r\n    }, [])\r\n\r\n    const isActive = page === activePage\r\n\r\n    const propsWithOffline = useEnabledInOffline(enabledOffline, {\r\n        className: tcn(styles.item, {[styles.itemLink]: isLink, [styles[`itemActive_${id}`]]: isActive}),\r\n        onClick,\r\n    })\r\n\r\n    if (!allowRender) return null\r\n\r\n    return (\r\n        <SmMenu.Item\r\n            onKeyPress={handleItemKeyPress}\r\n            as=\"button\"\r\n            role=\"menuitem\"\r\n            disabled={disabled}\r\n            title={disabled ? disabledTitle : undefined}\r\n            data-testid=\"menu-item-button\"\r\n            data-item={id}\r\n            data-element=\"menu-item\"\r\n            data-active={isActive || undefined}\r\n            {...propsWithOffline}\r\n        >\r\n            {children}\r\n        </SmMenu.Item>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport type {SmMenuProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {useMenuKeysHandler} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useMainMenu} from '../hooks/useMainMenu'\r\nimport {MenuItem} from './MenuItem'\r\n\r\n\r\ninterface MainMenuProps {\r\n    menuProps: SmMenuProps\r\n    toggleSettings: (forceOpenedOrEvent?: boolean | SyntheticEvent) => void\r\n    onMenuItemClick: (name: AppRoutes, params?: Record<string, unknown>) => void\r\n    activePageName: AppRoutes\r\n}\r\n\r\nexport const MainMenu: React.FC<MainMenuProps> = ({\r\n    menuProps,\r\n    toggleSettings,\r\n    onMenuItemClick,\r\n    activePageName,\r\n}) => {\r\n    const mainMenu = useMainMenu({onMenuItemClick, toggleSettings})\r\n    const handlerMenuKeys = useMenuKeysHandler('menu-item', 'menu-container', true)\r\n    return (\r\n        <SmMenu data-element=\"menu-container\" {...menuProps} data-testid=\"menu\" onKeyDown={handlerMenuKeys}>\r\n            {mainMenu.map(({children, ...props}) => (\r\n                <MenuItem\r\n                    {...props}\r\n                    key={props.key}\r\n                    id={props.key}\r\n                    activePage={activePageName}\r\n                >\r\n                    {children}\r\n                </MenuItem>\r\n            ))}\r\n        </SmMenu>\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React, {useCallback, useMemo} from 'react'\r\n\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport {\r\n    IconHelp,\r\n    IconKnowledgeBase,\r\n    IconNavCalendar,\r\n    IconNavDial,\r\n    IconNavDirectory,\r\n    IconNavFavorites,\r\n    IconNavRecents,\r\n    IconNavSettings,\r\n} from '@bpinc/lib-icons'\r\nimport type {SVGRComponent} from '@bpinc/lib-types-helpers'\r\nimport {MissedCallsBadge, UnreadBadge} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useUnreadAmount} from '../../../hooks/useUnreadAmount'\r\nimport type {MenuItemKey, MenuItemParams} from './useSettingsMenu'\r\n\r\nimport styles from '../../../styles/MainPage.module.less'\r\n\r\n\r\ninterface UseMainMenuParams {\r\n    onMenuItemClick: (name: AppRoutes, params?: Record<string, unknown>) => void\r\n    toggleSettings: (forceOpenedOrEvent?: boolean | SyntheticEvent) => void\r\n}\r\n\r\nexport function useMainMenu({onMenuItemClick, toggleSettings}: UseMainMenuParams): MenuItemParams[] {\r\n    const {t} = useLocalizationState()\r\n    const {privileges} = useSessionState()\r\n    const missedCallsAmount = useInteractionStateSelector(s => s.missedCallsAmount)\r\n\r\n    const unreadAmount = useUnreadAmount()\r\n\r\n    const getMenuItemContentWithIconAndName = useCallback(function getMenuItemContentCallback(\r\n        Icon: SVGRComponent,\r\n        name: string,\r\n        misseCallsAmount?: number,\r\n        unread?: number,\r\n    ) {\r\n        return (\r\n            <>\r\n                <div className={styles.mainMenuIconWrapper}>\r\n                    <Icon className={styles.icon} />\r\n                    <UnreadBadge className={styles.unread} unreadAmount={unread} />\r\n                </div>\r\n                <span data-testid=\"menu-item-text\">{name}</span>\r\n                <MissedCallsBadge className=\"ml-4\" amount={misseCallsAmount} />\r\n            </>\r\n        )\r\n    },\r\n    [])\r\n\r\n    const navigateTo = useCallback(\r\n        function navigateToCallback(route: AppRoutes) {\r\n            return function clickHandler() {\r\n                onMenuItemClick(route)\r\n            }\r\n        },\r\n        [onMenuItemClick],\r\n    )\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            const items: MenuItemParams[] = []\r\n\r\n            if (privileges.SYS_USE_RECENT_TAB) {\r\n                items.push({\r\n                    key: 'recent' as MenuItemKey,\r\n                    page: AppRoutes.Recents,\r\n                    onClick: navigateTo(AppRoutes.Recents),\r\n                    children: getMenuItemContentWithIconAndName(\r\n                        IconNavRecents,\r\n                        t.ADDRESS_BOOK_AREA.addressBook_recents(),\r\n                        missedCallsAmount,\r\n                        unreadAmount,\r\n                    ),\r\n                    enabledOffline: true,\r\n                })\r\n            }\r\n\r\n            if (privileges.SYS_USE_FAVORITES_TAB) {\r\n                items.push({\r\n                    key: 'favorites' as MenuItemKey,\r\n                    page: AppRoutes.Favorites,\r\n                    onClick: navigateTo(AppRoutes.Favorites),\r\n                    children: getMenuItemContentWithIconAndName(\r\n                        IconNavFavorites,\r\n                        t.ADDRESS_BOOK_AREA.addressBook_favorites(),\r\n                    ),\r\n                    enabledOffline: true,\r\n                })\r\n            }\r\n\r\n            items.push(\r\n                {\r\n                    key: 'directory' as MenuItemKey,\r\n                    page: AppRoutes.Directory,\r\n                    onClick: navigateTo(AppRoutes.Directory),\r\n                    children: getMenuItemContentWithIconAndName(\r\n                        IconNavDirectory,\r\n                        t.ADDRESS_BOOK_AREA.addressBook_directory(),\r\n                    ),\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'dialpad' as MenuItemKey,\r\n                    page: AppRoutes.Dial,\r\n                    onClick: navigateTo(AppRoutes.Dial),\r\n                    children: getMenuItemContentWithIconAndName(IconNavDial, t.ADDRESS_BOOK_AREA.addressBook_dial()),\r\n                    enabledOffline: true,\r\n                })\r\n\r\n            if (privileges.CAN_USE_CALENDAR) {\r\n                items.push({\r\n                    key: 'calendar' as MenuItemKey,\r\n                    page: AppRoutes.Calendar,\r\n                    onClick: navigateTo(AppRoutes.Calendar),\r\n                    children: getMenuItemContentWithIconAndName(\r\n                        IconNavCalendar,\r\n                        t.ADDRESS_BOOK_AREA.addressBook_calendar(),\r\n                    ),\r\n                    enabledOffline: true,\r\n                })\r\n            }\r\n\r\n            items.push({\r\n                key: 'knowledge-base' as MenuItemKey,\r\n                page: AppRoutes.KnowledgeBase,\r\n                onClick: navigateTo(AppRoutes.KnowledgeBase),\r\n                children: getMenuItemContentWithIconAndName(IconKnowledgeBase, t.KNOWLEDGE_BASE.kb_heading()),\r\n            },\r\n            {\r\n                key: 'settings' as MenuItemKey,\r\n                onClick: toggleSettings,\r\n                children: getMenuItemContentWithIconAndName(IconNavSettings, t.GLOBAL.settings()),\r\n                enabledOffline: true,\r\n            },\r\n            {\r\n                key: 'help' as MenuItemKey,\r\n                page: AppRoutes.Help,\r\n                onClick: navigateTo(AppRoutes.Help),\r\n                children: getMenuItemContentWithIconAndName(IconHelp, t.GLOBAL.help()),\r\n                enabledOffline: true,\r\n            },\r\n            )\r\n\r\n            return items\r\n        },\r\n        [\r\n            privileges.SYS_USE_RECENT_TAB,\r\n            privileges.SYS_USE_FAVORITES_TAB,\r\n            privileges.CAN_USE_CALENDAR,\r\n            navigateTo,\r\n            getMenuItemContentWithIconAndName,\r\n            t.ADDRESS_BOOK_AREA,\r\n            t.KNOWLEDGE_BASE,\r\n            t.GLOBAL,\r\n            toggleSettings,\r\n            missedCallsAmount,\r\n            unreadAmount,\r\n        ],\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"communicator_UserProfilePreview_name_TgrHj\",\"phone\":\"communicator_UserProfilePreview_phone_Zy4sD\",\"link\":\"communicator_UserProfilePreview_link_GVBLo\"};","import React, {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useUserProfileState} from '@bpinc/ad-user-profile-state-context'\r\nimport {ContactListItem} from '@bpinc/lib-contact-list-item-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from './UserProfilePreview.module.less'\r\n\r\n\r\nexport const UserProfilePreview: React.FC = () => {\r\n    const {formatFullName} = useFormatting()\r\n    const {persistentAvatar} = useUserProfileState()\r\n    const {firstName, lastName, userId, phoneNumber = '_'} = useSessionState()\r\n\r\n    const {t} = useLocalizationState()\r\n\r\n    const avatar = useMemo(() => {\r\n        return {\r\n            firstName,\r\n            lastName,\r\n            url: persistentAvatar?.src,\r\n        }\r\n    }, [firstName, lastName, persistentAvatar?.src])\r\n\r\n    const title = (\r\n        <>\r\n            <span className={styles.name} data-testid=\"name\">\r\n                {formatFullName(firstName, lastName)}\r\n            </span>\r\n            <span className={styles.phone} data-testid=\"extension\">\r\n                {t.USER_PROFILE.sidebar_ext(phoneNumber)}\r\n            </span>\r\n        </>\r\n    )\r\n    const body = (\r\n        <span className={styles.link} data-testid=\"menu-item-text\">\r\n            {t.USER_PROFILE.sidebar_profile_link()}\r\n        </span>\r\n    )\r\n\r\n    return <ContactListItem as=\"div\" avatarProps={avatar} title={title} body={body} userId={userId} isFitted isLowRise />\r\n}\r\n","import type {ReactNode, SyntheticEvent} from 'react'\r\nimport React, {useMemo} from 'react'\r\n\r\nimport {useInteractionState} from '@bpinc/ad-interaction-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport type {ItemState} from '@bpinc/ad-transport-types'\r\nimport type {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {UserProfilePreview} from '../components/UserProfilePreview'\r\nimport {useSettingsHandlers} from './useSettingsHandlers'\r\n\r\n\r\ninterface UseSettingsMenuParams {\r\n    toggleSettings: (forceOpenedOrEvent?: boolean | SyntheticEvent) => void\r\n    closeMenu: () => void\r\n    openSettingsMenu: () => void\r\n}\r\n\r\nconst menuItemKeys = [\r\n    'recent',\r\n    'favorites',\r\n    'directory',\r\n    'dialpad',\r\n    'knowledge-base',\r\n    'settings',\r\n    'help',\r\n    'user-profile',\r\n    'back',\r\n    'phone-device',\r\n    'audio-devices',\r\n    'change-password',\r\n    'predefined-chat-messages',\r\n    'preferences',\r\n    'emi-accounts',\r\n    'prerecorded-messages',\r\n    'keyboard_shortcuts',\r\n    'ringtones',\r\n    'about',\r\n    'logout',\r\n    'calendar',\r\n] as const\r\nexport type MenuItemKey = typeof menuItemKeys[number]\r\n\r\nexport interface MenuItemParams {\r\n    key: MenuItemKey\r\n    onClick: (evt: SyntheticEvent) => void\r\n    children: ReactNode\r\n    enabledOffline?: boolean\r\n    isLink?: boolean\r\n    allowRender?: boolean\r\n    page?: AppRoutes\r\n    disabled?: boolean\r\n    disabledTitle?: string\r\n}\r\n\r\nconst activeCallStates: ItemState[] = ['IVR', 'delivery_pending', 'delivered', 'hold']\r\n\r\nexport function useSettingsMenu({\r\n    toggleSettings,\r\n    closeMenu,\r\n    openSettingsMenu,\r\n}: UseSettingsMenuParams): MenuItemParams[] {\r\n    const {\r\n        isSsoEnabled,\r\n        phoneType,\r\n        tenantFeatures,\r\n    } = useSessionState()\r\n    const {items} = useInteractionState()\r\n    const {t} = useLocalizationState()\r\n\r\n    const hasActiveCalls = items.some(item =>\r\n        item.mediaType === 'voice' &&\r\n        item.state &&\r\n        activeCallStates.includes(item.state),\r\n    )\r\n\r\n    const isAudioDevicesLinkVisible = !!phoneType && [\r\n        'phone_type_browser',\r\n        'phone_type_soft_secure',\r\n        'phone_type_soft_unsecure',\r\n    ].includes(phoneType)\r\n\r\n    const isEMIAvailable = !!tenantFeatures?.msTeamsIntegrationEnabled\r\n\r\n    const {\r\n        handlePrerecordedMessagesClick,\r\n        handlePreferencesClick,\r\n        handleUserProfileClick,\r\n        handleAboutClick,\r\n        handleKeyboardShortcutsClick,\r\n        handleLogoutClick,\r\n        handleChangePasswordClick,\r\n        handlePhoneSelectionClick,\r\n        handleAudioDevicesClick,\r\n        handlePredefinedMessagesClick,\r\n        handleRingtonesAndAlertsVolumeClick,\r\n        handleEMIAccountsClick,\r\n    } = useSettingsHandlers({closeMenu, openSettingsMenu, hasActiveCalls})\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return [\r\n                {\r\n                    key: 'user-profile',\r\n                    onClick: handleUserProfileClick,\r\n                    children: <UserProfilePreview />,\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'back',\r\n                    onClick: toggleSettings,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_go_back()}\r\n                        </span>\r\n                    ),\r\n                    isLink: true,\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'phone-device',\r\n                    onClick: handlePhoneSelectionClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_phoneDevice()}\r\n                        </span>\r\n                    ),\r\n                    disabled: hasActiveCalls,\r\n                    disabledTitle: t.SETTINGS.menu_phone_devices_disabled_tooltip(),\r\n                },\r\n                {\r\n                    key: 'audio-devices',\r\n                    onClick: handleAudioDevicesClick,\r\n                    allowRender: isAudioDevicesLinkVisible,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_audioDevices()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'change-password',\r\n                    onClick: handleChangePasswordClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.CHANGE_PASSWORD_DIALOG_BOX.changePassword_heading()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'predefined-chat-messages',\r\n                    onClick: handlePredefinedMessagesClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_chatCannedResponses()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'preferences',\r\n                    onClick: handlePreferencesClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_preferences()}\r\n                        </span>\r\n                    ),\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'emi-accounts',\r\n                    onClick: handleEMIAccountsClick,\r\n                    allowRender: isEMIAvailable,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.UNDEFINED.tab_enterprise_messaging_accounts_heading()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'prerecorded-messages',\r\n                    onClick: handlePrerecordedMessagesClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.VOICE_PROMPTS_DIALOG_BOX.edit_voice_prompts_heading()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'keyboard_shortcuts',\r\n                    onClick: handleKeyboardShortcutsClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_shortcuts()}\r\n                        </span>\r\n                    ),\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'ringtones',\r\n                    onClick: handleRingtonesAndAlertsVolumeClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_ringtone_volume()}\r\n                        </span>\r\n                    ),\r\n                },\r\n                {\r\n                    key: 'about',\r\n                    onClick: handleAboutClick,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.SETTINGS.settings_menu_about()}\r\n                        </span>\r\n                    ),\r\n                    enabledOffline: true,\r\n                },\r\n                {\r\n                    key: 'logout',\r\n                    onClick: handleLogoutClick,\r\n                    allowRender: !isSsoEnabled,\r\n                    children: (\r\n                        <span data-testid=\"menu-item-text\">\r\n                            {t.GLOBAL.logout()}\r\n                        </span>\r\n                    ),\r\n                },\r\n            ]\r\n        },\r\n        [\r\n            handleAboutClick,\r\n            handleAudioDevicesClick,\r\n            handleChangePasswordClick,\r\n            handleEMIAccountsClick,\r\n            handleKeyboardShortcutsClick,\r\n            handleLogoutClick,\r\n            handlePhoneSelectionClick,\r\n            handlePredefinedMessagesClick,\r\n            handlePreferencesClick,\r\n            handlePrerecordedMessagesClick,\r\n            handleRingtonesAndAlertsVolumeClick,\r\n            handleUserProfileClick,\r\n            hasActiveCalls,\r\n            isAudioDevicesLinkVisible,\r\n            isEMIAvailable,\r\n            isSsoEnabled,\r\n            toggleSettings,\r\n            t,\r\n        ],\r\n    )\r\n}\r\n","import {useCallback, useMemo} from 'react'\r\n\r\nimport {useSessionStateMethods} from '@bpinc/ad-session-context'\r\nimport {\r\n    useOpenAboutModal,\r\n    useOpenAudioDevicesModal,\r\n    useOpenChangePasswordModal,\r\n    useOpenEMIAccountsModal,\r\n    useOpenKeyboardShortcutsModal,\r\n    useOpenLogoutModal,\r\n    useOpenPredefinedMessagesModal,\r\n    useOpenPreferencesModal,\r\n    useOpenPrerecordedMessagesModal,\r\n    useOpenUserProfileModal,\r\n    useOpenVolumeModal,\r\n} from '@bpinc/lib-modals-ui'\r\n\r\n\r\ninterface UseHandlersParams {\r\n    closeMenu(): void\r\n    openSettingsMenu(): void\r\n    hasActiveCalls: boolean\r\n}\r\n\r\nexport function useSettingsHandlers(params: UseHandlersParams) {\r\n    const {hasActiveCalls, closeMenu, openSettingsMenu} = params\r\n    const {startPhoneTypeSelection} = useSessionStateMethods()\r\n    const openChangePasswordModal = useOpenChangePasswordModal()\r\n    const openLogoutModal = useOpenLogoutModal()\r\n    const openEMIAccountsModal = useOpenEMIAccountsModal()\r\n    const openUserProfileModal = useOpenUserProfileModal()\r\n    const openKeyboardShortcutsModal = useOpenKeyboardShortcutsModal()\r\n    const openPredefinedMessagesModal = useOpenPredefinedMessagesModal()\r\n    const openVolumeModal = useOpenVolumeModal()\r\n    const openPreferencesModal = useOpenPreferencesModal()\r\n    const openAboutModal = useOpenAboutModal()\r\n    const openAudioDevicesModal = useOpenAudioDevicesModal()\r\n    const openPrerecordedMessagesModal = useOpenPrerecordedMessagesModal()\r\n\r\n    const handlePredefinedMessagesClick = useCallback(\r\n        function handlePredefinedMessagesClickCb() {\r\n            closeMenu()\r\n            openPredefinedMessagesModal(undefined, {\r\n                afterClose: openSettingsMenu,\r\n            })\r\n        },\r\n        [closeMenu, openPredefinedMessagesModal, openSettingsMenu],\r\n    )\r\n\r\n    const handlePhoneSelectionClick = useCallback(() => {\r\n        if (hasActiveCalls) {\r\n            return\r\n        }\r\n        closeMenu()\r\n        startPhoneTypeSelection()\r\n    }, [hasActiveCalls, closeMenu, startPhoneTypeSelection])\r\n\r\n    const handleAudioDevicesClick = useCallback(() => {\r\n        closeMenu()\r\n        openAudioDevicesModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openAudioDevicesModal, openSettingsMenu])\r\n\r\n    const handleChangePasswordClick = useCallback(() => {\r\n        closeMenu()\r\n        openChangePasswordModal({}, {afterClose: openSettingsMenu})\r\n    }, [closeMenu, openChangePasswordModal, openSettingsMenu])\r\n\r\n    const handleLogoutClick = useCallback(() => {\r\n        closeMenu()\r\n        openLogoutModal(undefined, {afterClose: openSettingsMenu})\r\n    }, [closeMenu, openLogoutModal, openSettingsMenu])\r\n\r\n    const handleUserProfileClick = useCallback(() => {\r\n        closeMenu()\r\n        openUserProfileModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openSettingsMenu, openUserProfileModal])\r\n\r\n    const handleAboutClick = useCallback(() => {\r\n        closeMenu()\r\n        openAboutModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openAboutModal, openSettingsMenu])\r\n\r\n    const handleKeyboardShortcutsClick = useCallback(() => {\r\n        closeMenu()\r\n        openKeyboardShortcutsModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openKeyboardShortcutsModal, openSettingsMenu])\r\n\r\n    const handlePrerecordedMessagesClick = useCallback(() => {\r\n        closeMenu()\r\n        openPrerecordedMessagesModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openPrerecordedMessagesModal, openSettingsMenu])\r\n\r\n    const handlePreferencesClick = useCallback(() => {\r\n        closeMenu()\r\n        openPreferencesModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openPreferencesModal, openSettingsMenu])\r\n\r\n    const handleEMIAccountsClick = useCallback(() => {\r\n        closeMenu()\r\n        openEMIAccountsModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openEMIAccountsModal, openSettingsMenu])\r\n\r\n    const handleRingtonesAndAlertsVolumeClick = useCallback(() => {\r\n        closeMenu()\r\n        openVolumeModal(undefined, {\r\n            afterClose: openSettingsMenu,\r\n        })\r\n    }, [closeMenu, openSettingsMenu, openVolumeModal])\r\n\r\n    return useMemo(\r\n        function memoizeOutput() {\r\n            return {\r\n                closeMenu,\r\n                handlePrerecordedMessagesClick,\r\n                handlePreferencesClick,\r\n                handleUserProfileClick,\r\n                handleAboutClick,\r\n                handleKeyboardShortcutsClick,\r\n                handleLogoutClick,\r\n                handleChangePasswordClick,\r\n                handlePhoneSelectionClick,\r\n                handleAudioDevicesClick,\r\n                handlePredefinedMessagesClick,\r\n                handleRingtonesAndAlertsVolumeClick,\r\n                handleEMIAccountsClick,\r\n            }\r\n        },\r\n        [\r\n            closeMenu,\r\n            handleChangePasswordClick,\r\n            handleLogoutClick,\r\n            handlePhoneSelectionClick,\r\n            handleAudioDevicesClick,\r\n            handlePredefinedMessagesClick,\r\n            handlePrerecordedMessagesClick,\r\n            handlePreferencesClick,\r\n            handleUserProfileClick,\r\n            handleAboutClick,\r\n            handleKeyboardShortcutsClick,\r\n            handleRingtonesAndAlertsVolumeClick,\r\n            handleEMIAccountsClick,\r\n        ],\r\n    )\r\n}\r\n","import type {SyntheticEvent} from 'react'\r\nimport React from 'react'\r\n\r\nimport type {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport type {SmMenuProps} from '@bpinc/lib-external-ui-elements'\r\nimport {SmMenu} from '@bpinc/lib-external-ui-elements'\r\nimport {useMenuKeysHandler} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useSettingsMenu} from '../hooks/useSettingsMenu'\r\nimport {MenuItem} from './MenuItem'\r\n\r\n\r\ninterface SettingsMenuProps {\r\n    menuProps: SmMenuProps\r\n    toggleSettings: (forceOpenedOrEvent?: boolean | SyntheticEvent) => void\r\n    closeMenu: () => void\r\n    openSettingsMenu: () => void\r\n    activePageName: AppRoutes\r\n}\r\n\r\nexport const SettingsMenu: React.FC<SettingsMenuProps> = ({\r\n    menuProps,\r\n    toggleSettings,\r\n    closeMenu,\r\n    openSettingsMenu,\r\n    activePageName,\r\n}) => {\r\n    const settingsMenu = useSettingsMenu({toggleSettings, closeMenu, openSettingsMenu})\r\n\r\n    const handlerMenuKeys = useMenuKeysHandler('menu-item', 'menu-container', true)\r\n\r\n    return (\r\n        <SmMenu data-element=\"menu-container\" {...menuProps} onKeyDown={handlerMenuKeys}>\r\n            {settingsMenu.map(({children, ...props}) => (\r\n                <MenuItem\r\n                    {...props}\r\n                    key={props.key}\r\n                    id={props.key}\r\n                    activePage={activePageName}\r\n                >\r\n                    {children}\r\n                </MenuItem>\r\n            ))}\r\n        </SmMenu>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport type {AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SmSidebar} from '@bpinc/lib-external-ui-elements'\r\nimport {FocusTrap} from '@bpinc/lib-ui-elements'\r\n\r\nimport {useHandlers} from './hooks/useHandlers'\r\nimport {useSidebarRightContent} from './hooks/useSidebarRightContent'\r\n\r\nimport styles from '../../styles/MainPage.module.less'\r\n\r\n\r\nexport interface SidebarRightProps {\r\n    activePageName: AppRoutes\r\n    onMenuItemClick(name: AppRoutes, params?: Record<string, unknown>): void\r\n}\r\n\r\nexport const SidebarRight: React.FC<SidebarRightProps> = React.memo(props => {\r\n    const rightPanelOpened = useCommunicatorUIState('rightPanelOpened')\r\n    const {closeMenu} = useHandlers()\r\n    const content = useSidebarRightContent(props)\r\n\r\n    return (\r\n        <SmSidebar\r\n            className={styles.sidebar}\r\n            animation=\"overlay\"\r\n            direction=\"right\"\r\n            visible={rightPanelOpened}\r\n            onHide={closeMenu}\r\n            data-page-section=\"sidebar sidebar_right\"\r\n            data-testid=\"right-sidebar\"\r\n        >\r\n            <FocusTrap\r\n                enabled={rightPanelOpened}\r\n                delayFocus={500} // sidebar opening animation duration\r\n            >\r\n                {content}\r\n            </FocusTrap>\r\n        </SmSidebar>\r\n    )\r\n})\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\n\r\nimport {MainMenu} from '../components/MainMenu'\r\nimport {SettingsMenu} from '../components/SettingsMenu'\r\nimport type {SidebarRightProps} from '../SidebarRight'\r\nimport {useHandlers} from './useHandlers'\r\n\r\n\r\nexport function useSidebarRightContent(props: SidebarRightProps) {\r\n    const {settingsOpened, toggleSettings} = useCommunicatorUIState(['settingsOpened', 'toggleSettings'])\r\n    const {activePageName, onMenuItemClick} = props\r\n\r\n    const {closeMenu, openSettingsMenu, handleMenuKeyPress} = useHandlers()\r\n\r\n    const menuProps = useMemo(\r\n        function memoizeMenuProps() {\r\n            return {\r\n                vertical: true,\r\n                secondary: true,\r\n                onKeyDown: handleMenuKeyPress,\r\n            }\r\n        },\r\n        [handleMenuKeyPress],\r\n    )\r\n\r\n    if (settingsOpened) {\r\n        return (\r\n            <SettingsMenu\r\n                menuProps={menuProps}\r\n                toggleSettings={toggleSettings}\r\n                closeMenu={closeMenu}\r\n                openSettingsMenu={openSettingsMenu}\r\n                activePageName={activePageName}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <MainMenu\r\n            menuProps={menuProps}\r\n            toggleSettings={toggleSettings}\r\n            onMenuItemClick={onMenuItemClick}\r\n            activePageName={activePageName}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\ninterface AriaDescriptionProps {\r\n    displayName?: string\r\n    contact?: string\r\n    serviceName?: string\r\n    type: 'chat' | 'workitem'\r\n}\r\n\r\nexport const AriaDescription: React.FC<AriaDescriptionProps> = ({displayName, serviceName, type}) => {\r\n    return (\r\n        <>\r\n            {displayName && (\r\n                <div aria-live=\"assertive\" role=\"alert\" className=\"aria-description\">\r\n                    {type === 'chat' ? 'Chat from ' : serviceName}\r\n                    {' '}\r\n                    {displayName}\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"overlayContainer\":\"communicator_CompactNotificationModal_overlayContainer_aP5A4\",\"notificationList\":\"communicator_CompactNotificationModal_notificationList_HFXNj\",\"notificationItem\":\"communicator_CompactNotificationModal_notificationItem_QCXHz\",\"notificationItemContent\":\"communicator_CompactNotificationModal_notificationItemContent_0tp8z\",\"background\":\"communicator_CompactNotificationModal_background_ixU4Q\",\"content\":\"communicator_CompactNotificationModal_content_eI0tj\",\"displayRow\":\"communicator_CompactNotificationModal_displayRow_VeD2C\",\"chatIcon\":\"communicator_CompactNotificationModal_chatIcon_lZXmL\",\"displayName\":\"communicator_CompactNotificationModal_displayName_xG1sv\",\"phoneNumber\":\"communicator_CompactNotificationModal_phoneNumber_61rE1\",\"controlsRow\":\"communicator_CompactNotificationModal_controlsRow_h2CjZ\",\"control\":\"communicator_CompactNotificationModal_control_GfyHn\",\"serviceRow\":\"communicator_CompactNotificationModal_serviceRow_25nnh\",\"invertedButton\":\"communicator_CompactNotificationModal_invertedButton_uaLGd\"};","import React, {useCallback} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport {getServiceNameFromItem, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {SmButton, SmList, SmListItem} from '@bpinc/lib-external-ui-elements'\r\nimport {IconCampaignNotification, IconChatNotification} from '@bpinc/lib-icons'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useDisplayName} from '../hooks/useDisplayName'\r\nimport {AriaDescription} from './AriaDescription'\r\n\r\nimport styles from '../styles/CompactNotificationModal.module.less'\r\n\r\n\r\nexport const NotificationItem: React.FC<Item> = item => {\r\n    const {id: itemId} = item\r\n    const displayName = useDisplayName(item)\r\n    const serviceName = getServiceNameFromItem(item)\r\n\r\n    const {\r\n        rejectItem,\r\n        acceptItem,\r\n        activateItem,\r\n        dialWorkitem,\r\n    } = useInteractionStateMethods()\r\n    const {t} = useLocalizationState()\r\n    const {activePage, setActivePage} = useNavigationState()\r\n\r\n    const onReject = useCallback(() => {\r\n        rejectItem(itemId)\r\n    }, [rejectItem, itemId])\r\n\r\n    const onAccept = useCallback(() => {\r\n        acceptItem(itemId)\r\n    }, [acceptItem, itemId])\r\n\r\n    const onAcceptAndOpen = useCallback(() => {\r\n        acceptItem(itemId)\r\n        activateItem(itemId)\r\n        if (activePage.name !== AppRoutes.Interactions) {\r\n            setActivePage({name: AppRoutes.Interactions})\r\n        }\r\n    }, [acceptItem, activateItem, itemId, activePage, setActivePage])\r\n\r\n    const onDial = useCallback(() => {\r\n        onAcceptAndOpen()\r\n        dialWorkitem({\r\n            workitemItemId: itemId,\r\n        })\r\n    }, [dialWorkitem, itemId, onAcceptAndOpen])\r\n\r\n    return (\r\n        <SmListItem className={styles.notificationItem}>\r\n            <SmList.Content className={styles.notificationItemContent}>\r\n                <div className={styles.background} />\r\n                <div className={styles.content}>\r\n                    {isWorkItem(item) && serviceName && <div className={styles.serviceRow}>{serviceName}</div>}\r\n                    <div className={styles.displayRow}>\r\n                        <SmList.Icon className={styles.chatIcon}>\r\n                            {isWorkItem(item) ? <IconCampaignNotification /> : <IconChatNotification />}\r\n                        </SmList.Icon>\r\n                        <div className={styles.displayName}>{displayName}</div>\r\n                        {isWorkItem(item) && <div className={styles.phoneNumber}>{item.displayData.number}</div>}\r\n                    </div>\r\n                    <div className={styles.controlsRow}>\r\n                        <div>\r\n                            <SmButton data-testid=\"reject-button\" negative size=\"small\" className={styles.control} onClick={onReject}>\r\n                                {t.INCOMING_CALL_DIALOG_BOX.incomingInteraction_reject()}\r\n                            </SmButton>\r\n                        </div>\r\n                        <div>\r\n                            <SmButton positive size=\"small\" data-testid=\"accept-button\" className={styles.control} onClick={onAccept}>\r\n                                {t.INCOMING_CALL_DIALOG_BOX.incomingInteraction_accept()}\r\n                            </SmButton>\r\n                            {isWorkItem(item) ? (\r\n                                <SmButton size=\"small\" className={tcn(styles.control, styles.invertedButton)} onClick={onDial}>\r\n                                    {t.INCOMING_CALL_DIALOG_BOX.dial_number()}\r\n                                </SmButton>\r\n                            ) : (\r\n                                <SmButton positive size=\"small\" className={styles.control} onClick={onAcceptAndOpen}>\r\n                                    {t.INCOMING_CALL_DIALOG_BOX.button_accept_and_open_label()}\r\n                                </SmButton>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <AriaDescription type={isWorkItem(item) ? 'workitem' : 'chat'} serviceName={serviceName} displayName={displayName} />\r\n            </SmList.Content>\r\n        </SmListItem>\r\n    )\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useFormatting} from '@bpinc/ad-formatting-context'\r\nimport {formatPhone} from '@bpinc/ad-formatting-helpers'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\n\r\n\r\nexport function useDisplayName(modalItem: Item) {\r\n    const {formatFullName, getNamesFromDisplayName} = useFormatting()\r\n\r\n    return useMemo(function memoizeName() {\r\n        const {firstName: callFirstName, lastName: callLastName, number = '', displayName = '', email} = modalItem.displayData || {}\r\n        const contact = email || formatPhone(number)\r\n        const chatFirstName = modalItem?.externalChatData?.firstName\r\n        const chatLastName = modalItem?.externalChatData?.lastName\r\n\r\n        const [firstNameFromDisplayName, lastNameFromDisplayName] = getNamesFromDisplayName(displayName)\r\n        const firstName = firstNameFromDisplayName || callFirstName || chatFirstName\r\n        const lastName = lastNameFromDisplayName || callLastName || chatLastName\r\n        const fullName = displayName || formatFullName(firstName, lastName)\r\n\r\n        return fullName || contact\r\n    }, [formatFullName, getNamesFromDisplayName, modalItem.displayData, modalItem?.externalChatData?.firstName, modalItem?.externalChatData?.lastName])\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {useInteractions, useModalInteractionIds} from '@bpinc/ad-interaction-state-context'\r\nimport {isDeliveryPending, isExternalChat, isInternalChat, isWorkItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {SmList} from '@bpinc/lib-external-ui-elements'\r\n\r\nimport {NotificationItem} from './NotificationItem'\r\n\r\nimport styles from '../styles/CompactNotificationModal.module.less'\r\n\r\n\r\nexport const CompactNotificationModal: React.FC = () => {\r\n    const items = useInteractions()\r\n    const modalItemIds = useModalInteractionIds()\r\n    const subsequentModalItems = useMemo(\r\n        () =>\r\n            modalItemIds.reduce<Item[]>((arr, modalItemId) => {\r\n                const foundItem = items.find(item => item.id === modalItemId)\r\n                if (\r\n                    items.length > 1 &&\r\n                    foundItem &&\r\n                    isDeliveryPending(foundItem) &&\r\n                    (isExternalChat(foundItem) || isInternalChat(foundItem) || isWorkItem(foundItem))\r\n                ) {\r\n                    arr.push(foundItem)\r\n                }\r\n                return arr\r\n            }, []),\r\n        [modalItemIds, items],\r\n    )\r\n\r\n    const notificationItemsUI = useMemo(() => {\r\n        return subsequentModalItems.map(modalItem => {\r\n            return <NotificationItem key={modalItem.id} {...modalItem} />\r\n        })\r\n    }, [subsequentModalItems])\r\n\r\n    return (\r\n        <div className={styles.overlayContainer}>\r\n            <SmList className={styles.notificationList}>{notificationItemsUI}</SmList>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef} from 'react'\r\n\r\nimport {useInteractionModalsAutoOpener} from '@bpinc/lib-interaction-ui-hooks'\r\n\r\n\r\nexport const InteractionModalsAutoOpener: React.FC = () => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    useInteractionModalsAutoOpener(ref)\r\n\r\n    return (\r\n        <div ref={ref} />\r\n    )\r\n}\r\n","import React, {useMemo} from 'react'\r\n\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useDirectoryUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {DIRECTORY_TABS_INDEXES} from '@bpinc/lib-communicator-ui-types'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\n\r\nconst {CalendarUserSelectLoader} = createComponentLoader('calendar', () => import('calendar'), 'CalendarUserSelect')\r\n\r\nexport const useNavigationTitle = (): string | JSX.Element => {\r\n    const {t} = useLocalizationState()\r\n    const directoryCreateContactMode = useDirectoryUIState(s =>\r\n        s.createContactMode && s.tabIndex === DIRECTORY_TABS_INDEXES.external,\r\n    )\r\n    const {activePage} = useNavigationState()\r\n\r\n    const titles: {[route: string]: string | JSX.Element} = useMemo(() => ({\r\n        [AppRoutes.Recents]: t.ADDRESS_BOOK_AREA.addressBook_recents(),\r\n        [AppRoutes.Dial]: t.ADDRESS_BOOK_AREA.addressBook_dial(),\r\n        [AppRoutes.Favorites]: t.ADDRESS_BOOK_AREA.addressBook_favorites(),\r\n        [AppRoutes.Directory]: directoryCreateContactMode\r\n            ? t.CONTACT.create_contact()\r\n            : t.ADDRESS_BOOK_AREA.addressBook_directory(),\r\n        [AppRoutes.Cases]: t.CRM.crm_case_tab(),\r\n        //[AppRoutes.KnowledgeBase]: t.KNOWLEDGE_BASE.kb_heading(),\r\n        [AppRoutes.Interactions]: '',\r\n        [AppRoutes.Calendar]: <CalendarUserSelectLoader className=\"left-[-140px]\" />,\r\n        [AppRoutes.ContactDetails]: t.ADDRESS_BOOK_AREA.contact(),\r\n    }),\r\n    [directoryCreateContactMode, t])\r\n\r\n    return titles[activePage.name]\r\n}\r\n","import React, {useCallback, useState} from 'react'\r\n\r\nimport {SmLabel} from '@bpinc/lib-external-ui-elements'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\ntype Props = {\r\n    url: string\r\n}\r\n\r\nexport const DirectChatLinkSafariNotification: React.FC<Props> = ({url}) => {\r\n    const {t} = useLocalizationState()\r\n    const [copyLinkBadgeTrigger, setCopyLinkBadgeTrigger] = useState(0)\r\n\r\n    const onNotificationClick = useCallback(() => {\r\n        clipboard.copy(url)\r\n        setCopyLinkBadgeTrigger(c => ++c)\r\n    }, [url])\r\n\r\n    return (\r\n        <div className={styles.directChatLinkCopyNotification} onClick={onNotificationClick}>\r\n            <span>\r\n                {t.HOME_SCREEN.direct_chat_copy_link_safari_notification()}\r\n            </span>\r\n            {!!copyLinkBadgeTrigger && (\r\n                <SmLabel\r\n                    key={copyLinkBadgeTrigger}\r\n                    pointing=\"left\"\r\n                    className={tcn(styles.copiedLabel, styles.inNotification)}\r\n                >\r\n                    {t.HOME_SCREEN.direct_chat_invitation_link_copied_label()}\r\n                </SmLabel>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useState} from 'react'\r\n\r\nimport {platformInfo} from '@bpinc/ad-build-and-platform-info'\r\nimport {useIntegrationApiState, useIntegrationApiStateMethods} from '@bpinc/ad-integration-api-state-context'\r\nimport {useInteractionStateSelector} from '@bpinc/ad-interaction-state-context'\r\nimport type {DirectChatInvitationRequest} from '@bpinc/ad-request-urls'\r\nimport {apiRequests} from '@bpinc/ad-request-urls'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {ActiveStatusControlCommunicator} from '@bpinc/lib-agent-state-ui'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SmHeader, SmIcon, SmLabel} from '@bpinc/lib-external-ui-elements'\r\nimport {clipboard} from '@bpinc/lib-helpers'\r\nimport {IconDirectChatInvitation} from '@bpinc/lib-icons'\r\nimport {Notifications, useNotificationsState} from '@bpinc/lib-notifications-context'\r\nimport {OfflineBar} from '@bpinc/lib-offline-state-ui'\r\nimport {MissedCallsBadge, SemanticButton} from '@bpinc/lib-ui-elements'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {useNavigationTitle} from '../../hooks'\r\nimport {InteractionBar} from '../../interactions'\r\nimport {DirectChatLinkSafariNotification} from './DirectChatLinkSafariNotification'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\nexport const MainPageHeader: React.FC = () => {\r\n    const {\r\n        toggleRightPanel,\r\n        toggleLeftPanel,\r\n    } = useCommunicatorUIState(['toggleLeftPanel', 'toggleRightPanel'])\r\n    const {t} = useLocalizationState()\r\n    const missedCallsAmount = useInteractionStateSelector(s => s.missedCallsAmount)\r\n    const {activePage, setActivePage} = useNavigationState()\r\n    const title = useNavigationTitle()\r\n    const {serverOrigin, userId, privileges} = useSessionState()\r\n    const {showNotification} = useNotificationsState('methods')\r\n    const {integrationKey} = useIntegrationApiState()\r\n    const {requestRecordOnScreen} = useIntegrationApiStateMethods()\r\n\r\n    const [chatLinkRequestInProcess, setChatLinkRequestInProcess] = useState(false)\r\n    const [copyLinkBadgeTrigger, setCopyLinkBadgeTrigger] = useState(0)\r\n\r\n    const handleMenuItemClick = useCallback(() => {\r\n        setActivePage({name: AppRoutes.Interactions})\r\n    }, [setActivePage])\r\n\r\n    const requestDirectChatLink = useCallback(async () => {\r\n        if (!userId) {\r\n            return\r\n        }\r\n        setChatLinkRequestInProcess(true)\r\n\r\n        const requestBody: DirectChatInvitationRequest = {userId}\r\n        if (integrationKey) {\r\n            const crmRecord = await requestRecordOnScreen()\r\n            requestBody.params = {\r\n                crmType: integrationKey,\r\n                crmObjectType: crmRecord?.type,\r\n                crmObjectId: crmRecord?.id,\r\n            }\r\n        }\r\n\r\n        apiRequests(serverOrigin)\r\n            .requestDirectChatInvitationLink({requestBody})\r\n            .then(({URL, expiresIn}) => {\r\n                if (platformInfo.browser === 'safari') {\r\n                    showNotification({\r\n                        type: 'success',\r\n                        id: Notifications.DirectChatSafariConfirmation,\r\n                        duration: expiresIn * 1000,\r\n                        closable: true,\r\n                        content: <DirectChatLinkSafariNotification url={URL} />,\r\n                    })\r\n                    return\r\n                }\r\n                clipboard.copy(URL)\r\n                setCopyLinkBadgeTrigger(c => ++c)\r\n            })\r\n            .catch(e => {\r\n                console.error('Unable to get direct chat invitation link:', e)\r\n            })\r\n            .finally(() => setChatLinkRequestInProcess(false))\r\n    }, [userId, serverOrigin, integrationKey, requestRecordOnScreen, showNotification])\r\n\r\n    return (\r\n        <>\r\n            {activePage.name !== AppRoutes.Interactions && <InteractionBar action={handleMenuItemClick} />}\r\n\r\n            <header className={styles.header} role=\"none\">\r\n                <div className={styles.headerTop}>\r\n                    <div className={styles.agentState}>\r\n                        <ActiveStatusControlCommunicator toggleLeftPanel={toggleLeftPanel} />\r\n                    </div>\r\n\r\n                    <SmHeader as=\"h3\" className={styles.pageTitle} role=\"heading\" aria-level=\"1\">\r\n                        {title}\r\n                    </SmHeader>\r\n\r\n                    <div className={styles.rightButtons}>\r\n                        {privileges.DIRECT_CHAT_INVITATION && (\r\n                            <>\r\n                                {!!copyLinkBadgeTrigger && (\r\n                                    <SmLabel\r\n                                        key={copyLinkBadgeTrigger}\r\n                                        pointing=\"right\"\r\n                                        className={styles.copiedLabel}\r\n                                    >\r\n                                        {t.HOME_SCREEN.direct_chat_invitation_link_copied_label()}\r\n                                    </SmLabel>\r\n                                )}\r\n                                <SemanticButton\r\n                                    className={styles.directChat}\r\n                                    onClick={requestDirectChatLink}\r\n                                    tooltip={t.HOME_SCREEN.request_direct_chat_invitation_link_button_tooltip()}\r\n                                    data-key=\"direct-chat-invitation-button\"\r\n                                    enabledInOffline={false}\r\n                                    disabled={chatLinkRequestInProcess}\r\n                                    basic\r\n                                    icon\r\n                                    compact\r\n                                >\r\n                                    <IconDirectChatInvitation />\r\n                                </SemanticButton>\r\n                            </>\r\n                        )}\r\n                        <SemanticButton\r\n                            className={styles.hamburger}\r\n                            onClick={toggleRightPanel}\r\n                            tooltip={t.HOME_SCREEN.menu_icon_tooltip()}\r\n                            data-testid=\"menu-button\"\r\n                            basic\r\n                            enabledInOffline\r\n                            icon\r\n                            compact\r\n                        >\r\n                            <SmIcon name=\"bars\" />\r\n                            <MissedCallsBadge\r\n                                className=\"absolute bottom-0 right-0 translate-x-1/3 translate-y-1/3\"\r\n                                amount={missedCallsAmount}\r\n                            />\r\n                        </SemanticButton>\r\n                    </div>\r\n                </div>\r\n                <OfflineBar className={styles.offlineBar} />\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n","import {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {InteractionContextProvider} from '@bpinc/lib-interaction-context'\r\nimport {useNonParalleledDeliveredItems, useSelectedItems} from '@bpinc/lib-interaction-ui-hooks'\r\n\r\nimport {InteractionsList} from '../../interactions'\r\n\r\n\r\nexport const MainPageInteractionsList = () => {\r\n    const deliveredNonParalleledItemIds = useNonParalleledDeliveredItems()\r\n    const {selectedItemId, setSelectedItemId} = useSelectedItems(deliveredNonParalleledItemIds)\r\n\r\n    const {activePage} = useNavigationState()\r\n\r\n    if (activePage.name !== AppRoutes.Interactions) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <InteractionContextProvider interactionId={selectedItemId}>\r\n            <InteractionsList\r\n                itemIds={deliveredNonParalleledItemIds}\r\n                selectedItemId={selectedItemId}\r\n                setSelectedItemId={setSelectedItemId}\r\n            />\r\n        </InteractionContextProvider>\r\n    )\r\n}\r\n","import React, {useCallback} from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport {AgentStatuses} from '@bpinc/lib-agent-state-ui'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SmSidebar} from '@bpinc/lib-external-ui-elements'\r\nimport {useEscapeManager} from '@bpinc/lib-helpers'\r\nimport {FocusTrap} from '@bpinc/lib-ui-elements'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\nexport const SidebarLeft: React.FC = React.memo(function SidebarLeft() {\r\n    const {\r\n        leftPanelOpened,\r\n        toggleLeftPanel,\r\n    } = useCommunicatorUIState([\r\n        'leftPanelOpened',\r\n        'toggleLeftPanel',\r\n    ])\r\n\r\n    const closeSideBar = useCallback(() => toggleLeftPanel(false), [toggleLeftPanel])\r\n\r\n    useEscapeManager(closeSideBar, {enabled: leftPanelOpened})\r\n\r\n    return (\r\n        <SmSidebar\r\n            animation=\"overlay\"\r\n            direction=\"left\"\r\n            onHide={closeSideBar}\r\n            visible={leftPanelOpened}\r\n            className={cn('overflow-hidden', styles.sidebar)}\r\n            data-page-section=\"sidebar sidebar_left\"\r\n            data-testid=\"left-sidebar\"\r\n        >\r\n            <FocusTrap\r\n                enabled={leftPanelOpened}\r\n                delayFocus={500} // sidebar opening animation duration\r\n                className=\"flex h-full flex-col\"\r\n            >\r\n                <AgentStatuses closePanel={closeSideBar} />\r\n            </FocusTrap>\r\n        </SmSidebar>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {DndProvider} from 'react-dnd'\r\nimport {HTML5Backend} from 'react-dnd-html5-backend'\r\n\r\nimport {useAppDefaultSettings} from '@bpinc/ad-local-settings-context'\r\nimport type {ActivePage, AppRoutes} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {SmSegment, SmSidebar} from '@bpinc/lib-external-ui-elements'\r\nimport {useIncomingChatMessageAudioNotifications} from '@bpinc/lib-helpers-ui'\r\nimport {Notifications} from '@bpinc/lib-notifications-ui'\r\nimport {useInteractionNotifications} from '@bpinc/lib-system-notifications'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {createComponentLoader} from '@bpinc/lib-ui-elements'\r\n\r\nimport {AppMinimized} from '../../app-minimized'\r\nimport {defaultModalsConfig} from '../constants'\r\nimport {useStateSubscriptions} from '../hooks/state-subscription/useStateSubscriptions'\r\nimport {useAppConfigCheckers} from '../hooks/useAppConfigCheckers'\r\nimport {useClosePanelsOnNotifications} from '../hooks/useClosePanelsOnNofification'\r\nimport {useMinimized} from '../hooks/useMinimized'\r\nimport {useModulesImportByPrivileges} from '../hooks/useModulesImportByPrivileges'\r\nimport {useOpenSettingsOnPhoneSelectionDialogClosed} from '../hooks/useOpenSettingsOnPhoneSelectionDialogClosed'\r\nimport {SidebarRight} from './SideBarRight/SidebarRight'\r\nimport {CommunicatorContent} from './CommunicatorContent'\r\nimport {CompactNotificationModal} from './CompactNotificationModal'\r\nimport {InteractionModalsAutoOpener} from './InteractionModalsAutoOpener'\r\nimport {MainPageHeader} from './MainPageHeader'\r\nimport {MainPageInteractionsList} from './MainPageInteractionsList'\r\nimport {SidebarLeft} from './SidebarLeft'\r\n\r\nimport styles from '../styles/MainPage.module.less'\r\n\r\n\r\nconst {CalendarModalsAutoOpenerLoader} = createComponentLoader(\r\n    'calendar',\r\n    () => import('calendar'),\r\n    'CalendarModalsAutoOpener',\r\n)\r\n\r\nexport const MainPage: React.FC = React.memo(function MainPage() {\r\n    const {\r\n        leftPanelOpened,\r\n        rightPanelOpened,\r\n        toggleLeftPanel,\r\n        toggleRightPanel,\r\n        toggleSettings,\r\n    } = useCommunicatorUIState([\r\n        'leftPanelOpened',\r\n        'rightPanelOpened',\r\n        'toggleLeftPanel',\r\n        'toggleRightPanel',\r\n        'toggleSettings',\r\n    ])\r\n\r\n    const {activePage, setActivePage} = useNavigationState()\r\n\r\n    useAppConfigCheckers()\r\n    useClosePanelsOnNotifications()\r\n    useAppDefaultSettings({\r\n        modals: defaultModalsConfig,\r\n    })\r\n    useOpenSettingsOnPhoneSelectionDialogClosed()\r\n    useInteractionNotifications()\r\n    useIncomingChatMessageAudioNotifications(true)\r\n    useModulesImportByPrivileges()\r\n\r\n    const onMenuItemClick = useCallback(\r\n        (name: AppRoutes, params?: Record<string, unknown>) => {\r\n            const page: ActivePage = {name}\r\n\r\n            if (params) page.params = params\r\n\r\n            setActivePage(page)\r\n            toggleRightPanel(false)\r\n        },\r\n        [toggleRightPanel, setActivePage],\r\n    )\r\n\r\n    const {\r\n        isMinimized,\r\n        setIsMinimized,\r\n        onMinimizedAgentStateClick,\r\n        onMinimizedInteractionClick,\r\n        onMinimizedMenuItemClick,\r\n        onMinimizedSettingsClick,\r\n    } = useMinimized({\r\n        toggleLeftPanel,\r\n        toggleRightPanel,\r\n        toggleSettings,\r\n        onMenuItemClick,\r\n    })\r\n\r\n    useStateSubscriptions({\r\n        isMinimized,\r\n        toggleRightPanel,\r\n        toggleSettings,\r\n        setIsMinimized,\r\n    })\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            {isMinimized && (\r\n                <AppMinimized\r\n                    activePageName={activePage.name}\r\n                    onMenuItemClick={onMinimizedMenuItemClick}\r\n                    onSettingsClick={onMinimizedSettingsClick}\r\n                    onAgentStateClick={onMinimizedAgentStateClick}\r\n                    onInteractionClick={onMinimizedInteractionClick}\r\n                />\r\n            )}\r\n            <SmSegment.Group\r\n                className={tcn(\r\n                    styles.outerWrapper,\r\n                    isMinimized && styles.invisible,\r\n                )}\r\n                data-page-section=\"main-page\"\r\n                id=\"mainContainer\"\r\n            >\r\n                <Notifications className={styles.notifications} />\r\n                <SmSidebar.Pushable\r\n                    as={SmSegment.Group}\r\n                    className={styles.wrapper}\r\n                >\r\n                    <SidebarLeft />\r\n                    <SidebarRight\r\n                        activePageName={activePage.name}\r\n                        onMenuItemClick={onMenuItemClick}\r\n                    />\r\n\r\n                    <SmSidebar.Pusher\r\n                        data-page-section=\"main-content\"\r\n                        dimmed={leftPanelOpened || rightPanelOpened}\r\n                        className={styles.pusher}\r\n                    >\r\n                        <MainPageHeader />\r\n                        <MainPageInteractionsList />\r\n                        <CommunicatorContent />\r\n                    </SmSidebar.Pusher>\r\n                    <CompactNotificationModal />\r\n                </SmSidebar.Pushable>\r\n            </SmSegment.Group>\r\n            <InteractionModalsAutoOpener />\r\n            <CalendarModalsAutoOpenerLoader />\r\n        </DndProvider>\r\n    )\r\n})\r\n","import {useEffect} from 'react'\r\n\r\nimport {useAppConfigStateMethods} from '@bpinc/ad-app-config-state-context'\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useAppConfigCheckers() {\r\n    const {checkWhetherToRenderReportProblemButton} = useAppConfigStateMethods()\r\n    const {isLoggedIn, tenantId} = useSessionState()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn && tenantId) {\r\n\r\n            checkWhetherToRenderReportProblemButton(tenantId)\r\n        }\r\n    }, [checkWhetherToRenderReportProblemButton, isLoggedIn, tenantId])\r\n\r\n}\r\n","import {useMemo} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\n\r\n\r\nexport function useModulesImportByPrivileges() {\r\n    const privileges = useSessionState('privileges')\r\n\r\n    useMemo(() => {\r\n        if (privileges.CAN_START_INTERNAL_CHAT) {\r\n            import('chatCenter')\r\n        }\r\n\r\n        if (privileges.CAN_USE_CALENDAR) {\r\n            import('calendar')\r\n        }\r\n\r\n    }, [privileges.CAN_START_INTERNAL_CHAT, privileges.CAN_USE_CALENDAR])\r\n}\r\n","import {useEffect} from 'react'\r\n\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useModalsState} from '@bpinc/state-modals-context'\r\n\r\n\r\nexport function useClosePanelsOnNotifications(): void {\r\n    const {toggleRightPanel, toggleLeftPanel} = useCommunicatorUIState(['toggleLeftPanel', 'toggleRightPanel'])\r\n    const hasNotification = useModalsState(\r\n        ({modals}) => modals.some(modal => modal.id === 'notification'),\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (hasNotification) {\r\n            toggleRightPanel(false)\r\n            toggleLeftPanel(false)\r\n        }\r\n    }, [hasNotification, toggleRightPanel, toggleLeftPanel])\r\n}\r\n","import {useEffect, useRef} from 'react'\r\n\r\nimport {useSessionState} from '@bpinc/ad-session-context'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\n\r\n\r\nexport function useOpenSettingsOnPhoneSelectionDialogClosed() {\r\n    const {offerPhoneSelection} = useSessionState()\r\n    const prevOfferPhoneSelection = useRef<unknown>()\r\n    const {toggleRightPanel, toggleSettings} = useCommunicatorUIState(['toggleRightPanel', 'toggleSettings'])\r\n\r\n    useEffect(() => {\r\n        // closed phone selection dialog\r\n        if (prevOfferPhoneSelection.current && !offerPhoneSelection) {\r\n            toggleRightPanel(true)\r\n            toggleSettings(true)\r\n        }\r\n        prevOfferPhoneSelection.current = offerPhoneSelection\r\n\r\n        // do not track methods change\r\n        // eslint-disable-next-line\r\n    }, [offerPhoneSelection])\r\n}\r\n","import {useCallback, useState} from 'react'\r\n\r\nimport {useInteractionStateMethods} from '@bpinc/ad-interaction-state-context'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport type {ActivePage} from '@bpinc/lib-communicator-navigation-state'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport type {Toggle} from '@bpinc/lib-helpers'\r\n\r\n\r\ninterface Params {\r\n    toggleSettings: Toggle\r\n    toggleRightPanel: Toggle\r\n    toggleLeftPanel: Toggle\r\n    onMenuItemClick: (name: AppRoutes, params?: Record<string, unknown>) => void\r\n}\r\n\r\nexport function useMinimized({toggleSettings, toggleLeftPanel, onMenuItemClick, toggleRightPanel}: Params) {\r\n    const [isMinimized, setIsMinimized] = useState<boolean>(false)\r\n\r\n    const {activateItem: activateInteractionItem} = useInteractionStateMethods()\r\n\r\n    const setActivePage = useNavigationState('setActivePage')\r\n\r\n    const onMinimizedMenuItemClick = useCallback(\r\n        (name: AppRoutes, params?: Record<string, unknown>) => {\r\n            setIsMinimized(false)\r\n            onMenuItemClick(name, params)\r\n        },\r\n        [onMenuItemClick],\r\n    )\r\n\r\n    const onMinimizedSettingsClick = useCallback(() => {\r\n        setIsMinimized(false)\r\n        toggleRightPanel(true)\r\n        toggleSettings(true)\r\n    }, [toggleRightPanel, toggleSettings])\r\n\r\n    const onMinimizedAgentStateClick = useCallback(() => {\r\n        setIsMinimized(false)\r\n        toggleLeftPanel(true)\r\n    }, [toggleLeftPanel])\r\n\r\n    const onMinimizedInteractionClick = useCallback(\r\n        (item: Item) => {\r\n            setIsMinimized(false)\r\n            activateInteractionItem(item.id)\r\n\r\n            const page: ActivePage = {\r\n                name: AppRoutes.Interactions,\r\n            }\r\n\r\n            if (item.userId) page.params = {userId: item.userId}\r\n            if (item.contactId) page.params = {contactId: item.contactId}\r\n\r\n            setActivePage(page)\r\n        },\r\n        [activateInteractionItem, setActivePage],\r\n    )\r\n\r\n    return {\r\n        isMinimized,\r\n        setIsMinimized,\r\n        onMinimizedMenuItemClick,\r\n        onMinimizedSettingsClick,\r\n        onMinimizedAgentStateClick,\r\n        onMinimizedInteractionClick,\r\n        onMenuItemClick,\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport {useUIState} from '@bpinc/ad-ui-context'\r\nimport {SmContainer} from '@bpinc/lib-external-ui-elements'\r\nimport {ToastProvider} from '@bpinc/lib-jskit-ui'\r\nimport {Modals} from '@bpinc/lib-modals-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {AriaStatuses} from '@bpinc/lib-ui-elements'\r\n\r\nimport {MainPage} from '../../../main-page'\r\n\r\n\r\nexport const App: React.FC = () => {\r\n    const {isTabNavHighlighted} = useUIState()\r\n\r\n    return (\r\n        <SmContainer\r\n            className={tcn('relative bg-main-bg text-main', {\r\n                '[&_*:focus-within]:!outline-none [&_*:focus]:!outline-none': !isTabNavHighlighted,\r\n                '[&_*:focus-within]:!outline-0 [&_*:focus]:!outline-0': !isTabNavHighlighted,\r\n            })}\r\n        >\r\n            <ToastProvider>\r\n                <MainPage />\r\n                <Modals />\r\n                <AriaStatuses />\r\n            </ToastProvider>\r\n        </SmContainer>\r\n    )\r\n}\r\n","import type {ScreenRecordingState} from '@bpinc/ad-bpclient-state-types'\r\nimport type {DIDNumber} from '@bpinc/ad-did-types'\r\nimport type {DirectoryObject, TeamUserInfo} from '@bpinc/ad-directory-state-types'\r\nimport {getItemNotes, getPhoneParties} from '@bpinc/ad-interaction-state-methods'\r\nimport type {Item} from '@bpinc/ad-interaction-state-types'\r\nimport {getPlaybackUrl, getRecordingUrl} from '@bpinc/ad-request-urls'\r\nimport type {Disposition, Service} from '@bpinc/ad-services-dispositions-types'\r\nimport type {PhoneCapabilities, ServerErrorSource} from '@bpinc/ad-session-types'\r\nimport type {\r\n    CallDirection,\r\n    CallParty,\r\n    ChatParty,\r\n    ChatPartyType,\r\n    DIDNumber as ApiDIDNumber,\r\n    DispositionData,\r\n    InteractionActivityData,\r\n    InteractionData,\r\n    InteractionState,\r\n    InteractionType,\r\n    PhoneCapabilities as ApiPhoneCapabilities,\r\n    ScreenRecordingState as ApiScreenRecordingState,\r\n    ServerErrorCodes,\r\n    ServerErrorData,\r\n    ServiceData,\r\n    Team,\r\n    User,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {chatPartyTypes, serverErrorCodes} from '@bpinc/adapters-public-api-types'\r\nimport {array, withoutUndefinedKeys} from '@bpinc/lib-types-helpers'\r\n\r\n\r\nconst convertItem = (\r\n    serverOrigin: string,\r\n    item: Item,\r\n    formatFullName: (firstName: string, lastName: string) => string,\r\n): InteractionData => {\r\n    const data: InteractionData = {\r\n        interactionId: item.id,\r\n        globalInteractionId: item.scenarioData?.globalInteractionId,\r\n        state: item.state as InteractionState,\r\n        type: item.mediaType as InteractionType,\r\n        phoneNumber: item.displayData.number,\r\n        email: item.displayData.email,\r\n        callDirection: item.direction as CallDirection,\r\n        callMuted: item.callData?.muted ?? false,\r\n        callRecording: item.displayData.isRecording ?? false,\r\n        startTime: item.displayData.deliveredStartTime,\r\n        endTime: item.displayData.acwStartTime,\r\n        duration: item.displayData.deliveredStartTime &&\r\n            item.displayData.acwStartTime &&\r\n            Math.floor(\r\n                (item.displayData.acwStartTime - item.displayData.deliveredStartTime) / 1000,\r\n            ) || undefined,\r\n        description: getItemNotes(item).join('\\n'),\r\n        disposition: item.dispositionData?.disposition?.name,\r\n        service: item.scenarioData?.serviceName,\r\n        playbackUrl: item.playbackUrl ? getPlaybackUrl(serverOrigin, item.playbackUrl) : undefined,\r\n        recordingUrl: item.scenarioData?.interactionStepId\r\n            ? getRecordingUrl(serverOrigin, item.scenarioData.interactionStepId)\r\n            : undefined,\r\n        DNIS: item.callData?.destination,\r\n        ANI: item.callData?.fromNumber,\r\n        callParties: (getPhoneParties(item) || []).map<CallParty>(party => ({\r\n            id: party.id,\r\n            name: party.name,\r\n            phone: party.phone,\r\n            userId: party.userId,\r\n        })),\r\n        chatParties: (item.chatParties || [])\r\n            .filter(cp => array(chatPartyTypes).includes(cp.type))\r\n            .map<ChatParty>(cp => ({\r\n                id: cp.party_id,\r\n                type: cp.type as ChatPartyType,\r\n                name: formatFullName(cp.first_name || '', cp.last_name || ''),\r\n                userId: cp.user_id,\r\n                contactId: cp.contact_id,\r\n                email: cp.email,\r\n                phone: cp.phone,\r\n            })),\r\n        attachedData: item.scenarioData?.attachedData || {},\r\n        origination: item.origination,\r\n\r\n        subject: '',\r\n        associatedObjects: {\r\n            list: item.associatedObjects?.list ?? [],\r\n            selected: item.associatedObjects?.selected ?? [],\r\n        },\r\n    }\r\n    return withoutUndefinedKeys(data)\r\n}\r\n\r\nconst convertActivity = (serverOrigin: string, item: Item): InteractionActivityData => {\r\n    const data: InteractionActivityData = {\r\n        interactionId: item.id,\r\n        globalInteractionId: item.scenarioData?.globalInteractionId,\r\n        state: item.state as InteractionState,\r\n        type: item.mediaType as InteractionType,\r\n        associatedObjects: {\r\n            list: item.associatedObjects?.list ?? [],\r\n            selected: item.associatedObjects?.selected ?? [],\r\n        },\r\n        phoneNumber: item.displayData.number,\r\n        email: item.displayData.email,\r\n        callDirection: item.direction as CallDirection,\r\n        startTime: item.displayData.deliveredStartTime,\r\n        endTime: item.displayData.acwStartTime,\r\n        duration: item.displayData.deliveredStartTime &&\r\n            item.displayData.acwStartTime &&\r\n            Math.floor(\r\n                (item.displayData.acwStartTime - item.displayData.deliveredStartTime) / 1000,\r\n            ) || undefined,\r\n        description: (getItemNotes(item) ?? []).join('\\n'),\r\n        disposition: item.dispositionData?.disposition?.name,\r\n        service: item.scenarioData?.serviceName,\r\n        playbackUrl: item.playbackUrl ? getPlaybackUrl(serverOrigin, item.playbackUrl) : undefined,\r\n        recordingUrl: item.scenarioData?.interactionStepId\r\n            ? getRecordingUrl(serverOrigin, item.scenarioData.interactionStepId)\r\n            : undefined,\r\n        DNIS: item.callData?.destination,\r\n        ANI: item.callData?.fromNumber,\r\n        attachedData: item.scenarioData?.attachedData || {},\r\n        origination: item.origination,\r\n\r\n        subject: '',\r\n        callParties: [],\r\n        chatParties: [],\r\n        callMuted: false,\r\n        callRecording: false,\r\n    }\r\n    return withoutUndefinedKeys(data)\r\n}\r\n\r\nfunction convertTeam(directoryObject: DirectoryObject): Team {\r\n    return {\r\n        id: directoryObject.id,\r\n        displayName: directoryObject.name,\r\n        isSupervised: !!directoryObject.supervised,\r\n        usersCount: directoryObject.usersCount,\r\n    }\r\n}\r\n\r\nfunction convertTeamMember(user: TeamUserInfo): User {\r\n    return {\r\n        id: user.userId,\r\n        teamId: user.teamId,\r\n        phone: user.extension,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        state: user.isLogged\r\n            ? user.agentState === '' ? 'supervising' : user.agentState\r\n            : 'offline',\r\n    }\r\n}\r\n\r\nfunction convertService(service: Service): ServiceData {\r\n    return {\r\n        id: service.id,\r\n        name: service.name,\r\n        useDispositions: service.useDispositions,\r\n        requireDisposition: service.requireDispositions,\r\n    }\r\n}\r\n\r\nfunction convertDIDNumber(didNumber: DIDNumber): ApiDIDNumber {\r\n    return {\r\n        id: didNumber.id,\r\n        number: didNumber.externalNumber.toString(),\r\n        isSMS: didNumber.isSMS,\r\n        isVoice: didNumber.isVoice,\r\n    }\r\n}\r\n\r\nfunction convertDisposition(disposition: Disposition): DispositionData {\r\n    return {\r\n        id: disposition.id,\r\n        code: disposition.code,\r\n        name: disposition.name,\r\n        type: disposition.type,\r\n    }\r\n}\r\n\r\nfunction convertScreenRecordingState(state: ScreenRecordingState): ApiScreenRecordingState {\r\n    return {\r\n        allowed: state.vncInit,\r\n        active: state.started,\r\n        muted: state.muted,\r\n    }\r\n}\r\n\r\nfunction err(\r\n    name: keyof ServerErrorCodes,\r\n    message?: string,\r\n): ServerErrorData {\r\n    return {\r\n        code: serverErrorCodes[name],\r\n        name,\r\n        timestamp: Date.now(),\r\n        message: message || 'Message undefined',\r\n    }\r\n}\r\nfunction convertServerError(source: ServerErrorSource, code: number, message?: string): ServerErrorData {\r\n    switch (source) {\r\n        case 'auth': {\r\n            switch (code) {\r\n                case 1:\r\n                    return err('invalid_credentials', message)\r\n                case 2:\r\n                    return err('other_user_logged_with_phone', message)\r\n                case 3:\r\n                    return err('invalid_token', message)\r\n                case 4:\r\n                    return err('user_already_logged_in', message)\r\n                case 5:\r\n                    return err('logged_users_limit_reached', message)\r\n                case 6:\r\n                    return err('tenant_disabled', message)\r\n                case 12:\r\n                    return err('already_logged_in_with_the_same_session', message)\r\n            }\r\n            break\r\n        }\r\n        case 'agentServer': {\r\n            switch (code) {\r\n                case 1:\r\n                    return err('forced_logout_by_other_client', message)\r\n                case 2:\r\n                    return err('not_enough_privileges', message)\r\n                case 3:\r\n                    return err('invalid_request', message)\r\n                case 4:\r\n                    return err('phone_not_registered', message)\r\n                case 5:\r\n                    return err('phone_not_in_dial_plan', message)\r\n                case 6:\r\n                    return err('not_enough_privileges', message)\r\n                case 7:\r\n                    return err('forced_logout_by_supervisor', message)\r\n                case 8:\r\n                    return err('tenant_disabled', message)\r\n                case 9:\r\n                    return err('phone_not_registered', message)\r\n                case 10:\r\n                    return err('destination_user_not_logged', message)\r\n                case 11:\r\n                    return err('user_disabled_or_deleted', message)\r\n            }\r\n            break\r\n        }\r\n        case '3pcc': {\r\n            return err('sip_server_error', message)\r\n        }\r\n    }\r\n    return err('unknown_error', message)\r\n}\r\n\r\nfunction convertPhoneCapabilities(caps: PhoneCapabilities): ApiPhoneCapabilities {\r\n    return {\r\n        canAnswer: !!caps.canAnswer,\r\n        canDial: !!caps.canDial,\r\n        canHold: !!caps.canHold,\r\n        canRetrieve: !!caps.canRetrieve,\r\n    }\r\n}\r\n\r\nexport {\r\n    convertActivity,\r\n    convertDIDNumber,\r\n    convertDisposition,\r\n    convertItem,\r\n    convertPhoneCapabilities,\r\n    convertScreenRecordingState,\r\n    convertServerError,\r\n    convertService,\r\n    convertTeam,\r\n    convertTeamMember,\r\n}\r\n","import type {IntegrationApiStateTrackerEvents} from '@bpinc/ad-integration-api-state-types'\r\nimport type {EventDispatch} from '@bpinc/lib-typed-events'\r\nimport {assertDefined} from '@bpinc/lib-types-helpers'\r\nimport {uuid} from '@bpinc/lib-uuid'\r\n\r\n\r\ntype PendingRequest<Params = any, Ret = any> = {\r\n    resolve: (data: Ret) => void\r\n    reject: (error: string) => void\r\n    payload: Params\r\n    id: string\r\n}\r\n\r\ntype ApiDispatcher = Omit<EventDispatch<IntegrationApiStateTrackerEvents>, 'onInitialState' | 'onChange'>\r\n\r\ntype PendingRequests = {\r\n    [Key in keyof ApiDispatcher]?: PendingRequest[]\r\n}\r\n\r\nclass ApiRequestTracker {\r\n\r\n    private readonly pendingRequests: PendingRequests = {}\r\n\r\n    constructor(private timeout: number) {}\r\n\r\n    public newPendingRequest<Key extends keyof ApiDispatcher>(\r\n        requestType: Key,\r\n        payload: Parameters<ApiDispatcher[Key]>,\r\n    ): Promise<ReturnType<ApiDispatcher[Key]> extends (...args: any[]) => Promise<infer R> ? R : void> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.pendingRequests[requestType]) {\r\n                this.pendingRequests[requestType] = []\r\n            }\r\n            const pendingRequest = {\r\n                id: uuid(),\r\n                resolve,\r\n                reject,\r\n                payload,\r\n            }\r\n            const requestsOfType = this.pendingRequests[requestType]\r\n            assertDefined(requestsOfType)\r\n            requestsOfType.push(pendingRequest)\r\n\r\n            setTimeout(() => {\r\n                const delIndex = requestsOfType.indexOf(pendingRequest)\r\n                if (delIndex !== -1) {\r\n                    reject(\r\n                        'Agent Desktop is unable to complete your ' +\r\n                        `request in the specified timeout ${this.timeout} ms`,\r\n                    )\r\n                }\r\n            }, this.timeout)\r\n        })\r\n    }\r\n\r\n    public resolvePendingRequest<Key extends keyof ApiDispatcher>(\r\n        requestType: Key,\r\n        data: ReturnType<ApiDispatcher[Key]> extends Promise<infer T> ? T : never,\r\n        requestId: string,\r\n    ): void {\r\n        const requestData = (this.pendingRequests[requestType]! || []).find(req => req.id === requestId)\r\n        if (!requestData) {\r\n            return\r\n        }\r\n        const delIndex = this.pendingRequests[requestType]!.indexOf(requestData)\r\n        if (delIndex !== -1) {\r\n            requestData.resolve(data)\r\n            this.pendingRequests[requestType]!.splice(delIndex, 1)\r\n        }\r\n    }\r\n\r\n    public rejectPendingRequest<Key extends keyof ApiDispatcher>(\r\n        requestType: Key,\r\n        error: string,\r\n        requestId: string,\r\n    ): void {\r\n        const requestsOfType = this.pendingRequests[requestType]\r\n        const requestData = requestsOfType?.find(req => req.id === requestId)\r\n        if (!requestsOfType || !requestData) {\r\n            return\r\n        }\r\n        const delIndex = requestsOfType.indexOf(requestData)\r\n        if (delIndex !== -1) {\r\n            requestData.reject(error)\r\n            requestsOfType.splice(delIndex, 1)\r\n        }\r\n    }\r\n\r\n    public resolveAllPendingRequests<Key extends keyof ApiDispatcher>(\r\n        requestType: Key,\r\n        data: ReturnType<ApiDispatcher[Key]> extends Promise<infer T> ? T : never,\r\n    ): void {\r\n        this.pendingRequests[requestType]?.forEach(requestData => {\r\n            this.resolvePendingRequest(requestType, data, requestData.id)\r\n        })\r\n    }\r\n\r\n    public rejectAllPendingRequests<Key extends keyof ApiDispatcher>(\r\n        requestType: Key,\r\n        error: string,\r\n    ): void {\r\n        this.pendingRequests[requestType]?.forEach(requestData => {\r\n            this.rejectPendingRequest(requestType, error, requestData.id)\r\n        })\r\n    }\r\n}\r\n\r\nfunction createApiRequestTracker(timeout: number) {\r\n    return new ApiRequestTracker(timeout)\r\n}\r\n\r\nexport {createApiRequestTracker}\r\n","import {isEqual} from 'lodash-es'\r\n\r\nimport type {AgentStateData} from '@bpinc/ad-agent-state-types'\r\nimport type {BPClientStateData} from '@bpinc/ad-bpclient-state-types'\r\nimport {getInitialBPClientState} from '@bpinc/ad-bpclient-state-types'\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {getInitialDidState} from '@bpinc/ad-did-types'\r\nimport {getInitialDirectoryState} from '@bpinc/ad-directory-state-types'\r\nimport type {ErrorType} from '@bpinc/ad-error-types'\r\nimport {\r\n    getDIDNumberErrorRaw,\r\n    getMessageErrorsRaw,\r\n    getNumberErrorsRaw,\r\n    getServiceErrorsRaw,\r\n} from '@bpinc/ad-error-validation-logic'\r\nimport {formatFullName as formatFullNameBase} from '@bpinc/ad-formatting-helpers'\r\nimport type {IntegrationApiStateData} from '@bpinc/ad-integration-api-state-types'\r\nimport {ApiError, getInitialIntegrationApiState, resultError} from '@bpinc/ad-integration-api-state-types'\r\nimport {getGlobalInteractionId, getInteractionStepId, getMainItem} from '@bpinc/ad-interaction-state-methods'\r\nimport type {InteractionStateData, Item} from '@bpinc/ad-interaction-state-types'\r\nimport {getInitialInteractionState} from '@bpinc/ad-interaction-state-types'\r\nimport {bpLogger} from '@bpinc/ad-persistent-logger'\r\nimport {getInitialRASharedState} from '@bpinc/ad-remote-assist-state-types'\r\nimport {getInitialServicesDispositionsState} from '@bpinc/ad-services-dispositions-types'\r\nimport type {AgentPrivilegeType, SessionData} from '@bpinc/ad-session-types'\r\nimport {getInitialSessionState} from '@bpinc/ad-session-types'\r\nimport {getInitialTimezonesState} from '@bpinc/ad-timezones-state-types'\r\nimport type {ItemState} from '@bpinc/ad-transport-types'\r\nimport type {\r\n    AgentState as ApiAgentState,\r\n    ChatChannelType,\r\n    CustomTransferData,\r\n    DispositionTarget,\r\n    InitiateResult as ApiInitiateResult,\r\n    InteractionAssociatedObjectData,\r\n    InteractionScreen,\r\n    LoginData,\r\n    PhoneDeviceData,\r\n    RescheduleData,\r\n    ResultError,\r\n} from '@bpinc/adapters-public-api-types'\r\nimport {getErrorMessage, isBefore} from '@bpinc/lib-helpers'\r\nimport type {EventSubscription} from '@bpinc/lib-typed-events'\r\nimport {typedKeys} from '@bpinc/lib-types-helpers'\r\n\r\nimport {\r\n    convertActivity,\r\n    convertDIDNumber,\r\n    convertDisposition,\r\n    convertItem,\r\n    convertPhoneCapabilities,\r\n    convertScreenRecordingState,\r\n    convertServerError,\r\n    convertService,\r\n    convertTeam,\r\n    convertTeamMember,\r\n} from './converters'\r\nimport {createApiRequestTracker} from './pending-requests'\r\n\r\n\r\nconst API_REQUEST_TIMEOUT = process.env.NODE_ENV === 'production' ? 5000 : 50_000\r\n\r\nexport type UISpecificRefValue = {\r\n    getDIDNumber: () => string | undefined\r\n    setDIDNumber: (didNumber?: string) => void\r\n    getService: () => string | undefined\r\n    setService: (service?: string) => void\r\n    setChatMessageSuggestion: (message: string, allowOverwrite: boolean, interactionId: string) => void\r\n    showInteractionPage: () => void\r\n    deferredDial?: (number: string) => void\r\n}\r\n\r\nconst adErrorToApiError: Record<ErrorType, ResultError> = {\r\n    noChatInService: resultError('no_chat_in_service', 'Selected service has not associated chat entry'),\r\n    noChannelInService: resultError('no_channel_in_service', 'No service selected or service is not suitable for this action'),\r\n    noNumber: resultError('empty_number', 'Number is empty'),\r\n    noService: resultError('no_service', 'Service is required, but not selected'),\r\n    selfCall: resultError('self_call', 'Recursive call to yourself'),\r\n    noDIDPermissionsSMS: resultError('no_permissions_did_sms', 'No permissions to start SMS chat with a selected DID number'),\r\n    noDIDPermissionsCall: resultError('no_permissions_did_call', 'No permissions to start SMS chat with a selected DID number'),\r\n    messageTooBig: resultError('invalid_args', 'A single message size exceeded its limit'),\r\n}\r\n\r\nconst bpLog = bpLogger.withPrefix('@API_con')\r\n\r\nexport const connectIntegrationApiAuthorized = (\r\n    {currentTabDataProvider, integrationApiConnector, sessionConnector}: BaseConnectors,\r\n    {sharedConnectors}: AuthorizedConnectors,\r\n    ref: {current: UISpecificRefValue},\r\n): EventSubscription[] => {\r\n\r\n    const interactionStateMethods = sharedConnectors.interactionStateConnector.dispatch\r\n    const agentStateMethods = sharedConnectors.agentStateConnector.dispatch\r\n    const directoryStateMethods = sharedConnectors.directoryStateConnector.dispatch\r\n    const servicesDispositionsStateMethods = sharedConnectors.servicesDispositionsStateConnector.dispatch\r\n    const didNumbersStateMethods = sharedConnectors.didStateConnector.dispatch\r\n    const bpClientStateMethods = sharedConnectors.bpClientStateConnector.dispatch\r\n    const interactionChatStateMethods = sharedConnectors.interactionChatStateConnector.dispatch\r\n\r\n    const apiRequestTracker = createApiRequestTracker(API_REQUEST_TIMEOUT)\r\n\r\n    let newUnknownItems: Record<string, boolean> = {}\r\n    let apiDispatchedItems: Record<string, boolean> = {}\r\n    let transferredDataItems: Record<string, boolean> = {}\r\n    let agentState: AgentStateData = {}\r\n    let interactionState = getInitialInteractionState()\r\n    let sessionState = getInitialSessionState()\r\n    let servicesDispositionsState = getInitialServicesDispositionsState()\r\n    let didNumbersState = getInitialDidState()\r\n    let timezonesState = getInitialTimezonesState()\r\n    let directoryState = getInitialDirectoryState()\r\n    let bpClientState = getInitialBPClientState()\r\n    let remoteAssistState = getInitialRASharedState()\r\n    let apiState = getInitialIntegrationApiState()\r\n\r\n    const formatFullName = (firstName: string, lastName: string) => formatFullNameBase(sessionState.displayNameFormat, firstName, lastName)\r\n\r\n    const validate = (type: 'call' | 'smsChat', phoneNumber: string): ResultError[] => {\r\n        const options = type === 'call' ? {skip: ['noChatInService' as const]} : {}\r\n        const interactionType: 'call' | 'sms' = type === 'call' ? 'call' : 'sms'\r\n        const selectedService = ref.current.getService()\r\n        const selectedDIDNumber = ref.current.getDIDNumber()\r\n        const serviceDIDErrors = selectedDIDNumber\r\n            ? getDIDNumberErrorRaw({\r\n                options: {...options, interactionType},\r\n                selectedDIDNumber,\r\n                didNumbers: didNumbersState.didNumbers,\r\n            })\r\n            : getServiceErrorsRaw({\r\n                options,\r\n                selectedService,\r\n                services: servicesDispositionsState.services,\r\n                serviceRequiredForOutboundCall: servicesDispositionsState.serviceRequiredForOutboundCall,\r\n            })\r\n        const errors = [\r\n            ...serviceDIDErrors,\r\n            ...getNumberErrorsRaw({\r\n                options: {number: phoneNumber},\r\n                selfPhoneNumber: sessionState.phoneNumber,\r\n            }),\r\n        ]\r\n        return errors.map(err => adErrorToApiError[err])\r\n    }\r\n\r\n    const getItem = (interactionId?: string) => {\r\n        const activeItem = interactionState.items.find(item => item.id === interactionState.activeItemId)\r\n        const item = interactionId\r\n            ? interactionState.items.find(currItem => currItem.id === interactionId)\r\n            : activeItem\r\n        if (!item) {\r\n            throw new ApiError(\r\n                'no_interaction',\r\n                interactionId\r\n                    ? `No interaction with id \"${interactionId}\"`\r\n                    : 'No active interaction',\r\n            )\r\n        }\r\n        return item\r\n    }\r\n\r\n    const getRemoteAssistSessionPin = (item: Item): string | undefined => {\r\n        const globalInteractionId = getGlobalInteractionId(item)\r\n        return globalInteractionId\r\n            ? remoteAssistState.items[globalInteractionId]?.pin\r\n            : undefined\r\n    }\r\n\r\n    const getRemoteAssistSessionId = (item: Item): string | undefined => {\r\n        const globalInteractionId = getGlobalInteractionId(item)\r\n        return globalInteractionId\r\n            ? remoteAssistState.items[globalInteractionId]?.sessionId\r\n            : undefined\r\n    }\r\n\r\n    const requireLogin = () => {\r\n        if (!sessionState.isLoggedIn) {\r\n            throw new ApiError('not_logged_in', 'You are not logged in')\r\n        }\r\n    }\r\n\r\n    const requirePrivileges = (...privileges: AgentPrivilegeType[]) => {\r\n        if (privileges.some(privilege => !sessionState.privileges[privilege])) {\r\n            throw new ApiError('not_enough_privileges', 'Not allowed')\r\n        }\r\n    }\r\n\r\n    const onAgentStateChange = (newAgentState: AgentStateData) => {\r\n        if (\r\n            agentState.state !== newAgentState.state ||\r\n            agentState.notReadyReason !== newAgentState.notReadyReason ||\r\n            !!agentState.reservedForIncomingInteraction !== !!newAgentState.reservedForIncomingInteraction\r\n        ) {\r\n            integrationApiConnector.dispatch.agentStateChange({\r\n                state: !newAgentState.state ? 'supervising' : newAgentState.state,\r\n                reservedForIncomingInteraction: !!newAgentState.reservedForIncomingInteraction,\r\n                notReadyReason: newAgentState.notReadyReason,\r\n            })\r\n        }\r\n    }\r\n    const agentStateSubscription = sharedConnectors.agentStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            onAgentStateChange(newState)\r\n            agentState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            const newState = {...agentState, ...stateUpdate}\r\n            onAgentStateChange(newState)\r\n            agentState = newState\r\n        },\r\n    })\r\n\r\n    const onInteractionStateChange = (newInteractionState: Partial<InteractionStateData>) => {\r\n        if (interactionState.activeItemId && !newInteractionState.activeItemId) {\r\n            integrationApiConnector.dispatch.activeInteractionSwitched(null)\r\n        }\r\n    }\r\n    const onInteractionItemNewOrChange = (item: Item) => {\r\n        try {\r\n            if (item.state === 'queued') {\r\n                return\r\n            }\r\n            if (apiDispatchedItems[item.id]) {\r\n                const oldItem = interactionState.items.find(i => i.id === item.id)\r\n                const oldInteractionData = oldItem && convertItem(sessionState.serverOrigin, oldItem, formatFullName)\r\n                const newInteractionData = convertItem(sessionState.serverOrigin, item, formatFullName)\r\n                if (!isEqual(oldInteractionData, newInteractionData)) {\r\n                    integrationApiConnector.dispatch.interactionStateChange(newInteractionData)\r\n                }\r\n            } else {\r\n                apiDispatchedItems[item.id] = true\r\n                newUnknownItems[item.id] = true\r\n\r\n                integrationApiConnector.dispatch.newInteraction(convertItem(sessionState.serverOrigin, item, formatFullName))\r\n            }\r\n            if (item.mediaType && item.mediaType !== 'unknown' && newUnknownItems[item.id]) {\r\n                const associatedCrmRecords = apiState.pendingAssociatedObjects[item.mediaType as string]?.objects\r\n                if (associatedCrmRecords) {\r\n                    integrationApiConnector.dispatch.removePendingAssociatedObjects(item.mediaType as string)\r\n                    associatedCrmRecords.forEach(crmRecord => {\r\n                        interactionStateMethods.addAssociatedObject(item.id, crmRecord, {force: true, primary: false})\r\n                    })\r\n                }\r\n                delete newUnknownItems[item.id]\r\n            }\r\n        } catch (err) {\r\n            bpLog.error('onInteractionItemChange error:', getErrorMessage(err))\r\n        }\r\n    }\r\n    const interactionStateSubscription = sharedConnectors.interactionStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            newUnknownItems = {}\r\n            apiDispatchedItems = {}\r\n            transferredDataItems = {}\r\n            newState.items.forEach(item => onInteractionItemNewOrChange(item))\r\n            onInteractionStateChange(newState)\r\n            interactionState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            onInteractionStateChange(stateUpdate)\r\n            interactionState = {...interactionState, ...stateUpdate}\r\n        },\r\n        onNewItem: item => {\r\n            onInteractionItemNewOrChange(item)\r\n        },\r\n        onItemChanged: item => {\r\n            onInteractionItemNewOrChange(item)\r\n        },\r\n        onItemRemoved: item => {\r\n            try {\r\n                delete newUnknownItems[item.id]\r\n                delete apiDispatchedItems[item.id]\r\n                delete transferredDataItems[item.id]\r\n\r\n                const interactionData = convertItem(sessionState.serverOrigin, item, formatFullName)\r\n                integrationApiConnector.dispatch.interactionRemoved(interactionData)\r\n\r\n                const activityData = convertActivity(apiState.integrationKey ?? '', item)\r\n                integrationApiConnector.dispatch.saveActivityRecord(activityData)\r\n            } catch (err) {\r\n                bpLog.error('onItemRemoved error:', getErrorMessage(err))\r\n            }\r\n        },\r\n        onActivateItemAttempt: activeItem => {\r\n            const {integrationKey} = apiState\r\n            if (integrationKey) {\r\n                const mainItem = getMainItem(interactionState.items, activeItem)\r\n                const prevMainItem = getMainItem(\r\n                    interactionState.items,\r\n                    interactionState.items.find(item => {\r\n                        return item.id === interactionState.activeItemId\r\n                    }),\r\n                )\r\n                if (\r\n                    mainItem && mainItem.activeCrmScreen &&\r\n                        mainItem.activeCrmScreen[integrationKey] &&\r\n                        mainItem.id !== prevMainItem?.id\r\n                ) {\r\n                    integrationApiConnector.dispatch.showScreen(mainItem.activeCrmScreen[integrationKey], activeItem.id)\r\n                }\r\n            }\r\n        },\r\n        onActiveItemChanged: activeItem => {\r\n            integrationApiConnector.dispatch.activeInteractionSwitched(activeItem.id)\r\n        },\r\n    })\r\n\r\n    const servicesDispositionsStateSubscription = sharedConnectors.servicesDispositionsStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            servicesDispositionsState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            servicesDispositionsState = {...servicesDispositionsState, ...stateUpdate}\r\n        },\r\n    })\r\n\r\n    const didNumbersStateSubscription = sharedConnectors.didStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            didNumbersState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            didNumbersState = {...didNumbersState, ...stateUpdate}\r\n        },\r\n    })\r\n\r\n    const onSessionStateChange = (prevSessionState: SessionData, newSessionState: SessionData) => {\r\n        if (newSessionState.phoneDeviceCapabilities) {\r\n            const oldCaps = convertPhoneCapabilities(prevSessionState.phoneDeviceCapabilities)\r\n            const newCaps = convertPhoneCapabilities(newSessionState.phoneDeviceCapabilities)\r\n            if (\r\n                oldCaps.canRetrieve !== newCaps.canRetrieve ||\r\n                oldCaps.canHold !== newCaps.canHold ||\r\n                oldCaps.canDial !== newCaps.canDial ||\r\n                oldCaps.canAnswer !== newCaps.canAnswer\r\n            ) {\r\n                integrationApiConnector.dispatch.phoneCapabilitiesChange(newCaps)\r\n            }\r\n        }\r\n        if (!prevSessionState.loginError && newSessionState.loginError) {\r\n            apiRequestTracker.rejectAllPendingRequests('onLogin', newSessionState.loginError)\r\n        }\r\n    }\r\n    const sessionStateSubscription = sessionConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            if (newState.isLoggedIn) {\r\n                apiRequestTracker.resolveAllPendingRequests('onLogin', undefined)\r\n                integrationApiConnector.dispatch.login({\r\n                    isLoggedIn: true,\r\n                    agentId: newState.userId!,\r\n                    username: newState.loginId!,\r\n                    sessionId: newState.sessionId!,\r\n                })\r\n            }\r\n            const prevState = sessionState\r\n            onSessionStateChange(prevState, newState)\r\n            sessionState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            const prevState = sessionState\r\n            sessionState = {...sessionState, ...stateUpdate}\r\n            onSessionStateChange(prevState, sessionState)\r\n        },\r\n        onLogin: session => {\r\n            apiRequestTracker.resolveAllPendingRequests('onLogin', undefined)\r\n            integrationApiConnector.dispatch.login({\r\n                isLoggedIn: true,\r\n                agentId: session.userId!,\r\n                username: session.loginId!,\r\n                sessionId: session.sessionId!,\r\n            })\r\n        },\r\n        onLogout: () => {\r\n            integrationApiConnector.dispatch.logout()\r\n        },\r\n        onServerError: (source, code, message) => {\r\n            integrationApiConnector.dispatch.serverError(\r\n                convertServerError(source, code, message),\r\n            )\r\n        },\r\n        onBadCallQualityAlert: (callId: string, alert: boolean) => {\r\n            integrationApiConnector.dispatch.callAudioQualityAlert(callId, alert)\r\n        },\r\n    })\r\n\r\n    const timezonesStateSubscription = sharedConnectors.timezonesStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            timezonesState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            timezonesState = {...timezonesState, ...stateUpdate}\r\n        },\r\n    })\r\n\r\n    const directoryStateSubscription = sharedConnectors.directoryStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            directoryState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            directoryState = {...directoryState, ...stateUpdate}\r\n        },\r\n    })\r\n\r\n    const onBpClientStateChange = (newBpClientState: BPClientStateData) => {\r\n        const oldSRState = convertScreenRecordingState(bpClientState.screenRecording)\r\n        const newSRState = convertScreenRecordingState(newBpClientState.screenRecording)\r\n        if (\r\n            oldSRState.allowed !== newSRState.allowed ||\r\n            oldSRState.active !== newSRState.active ||\r\n            oldSRState.muted !== newSRState.muted\r\n        ) {\r\n            integrationApiConnector.dispatch.screenRecordingStateChange(newSRState)\r\n        }\r\n        if (\r\n            bpClientState.softphone.ready !== newBpClientState.softphone.ready ||\r\n            bpClientState.softphone.error !== newBpClientState.softphone.error\r\n        ) {\r\n            integrationApiConnector.dispatch.softphoneStatusChange(\r\n                newBpClientState.softphone.ready,\r\n                newBpClientState.softphone.error,\r\n            )\r\n        }\r\n        if (\r\n            bpClientState.audioDevice.input !== newBpClientState.audioDevice.input ||\r\n            bpClientState.audioDevice.output !== newBpClientState.audioDevice.output\r\n        ) {\r\n            integrationApiConnector.dispatch.audioDeviceChange(\r\n                newBpClientState.audioDevice.input,\r\n                newBpClientState.audioDevice.output,\r\n            )\r\n        }\r\n    }\r\n    const bpClientStateSubscription = sharedConnectors.bpClientStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            onBpClientStateChange(newState)\r\n            bpClientState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            const newState = {...bpClientState, ...stateUpdate}\r\n            onBpClientStateChange(newState)\r\n            bpClientState = newState\r\n        },\r\n    })\r\n\r\n    const remoteAssistStateSubscription = sharedConnectors.remoteAssistStateConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            remoteAssistState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            remoteAssistState = {...remoteAssistState, ...stateUpdate}\r\n        },\r\n    })\r\n\r\n    const onIntegrationApiStateChange = (newApiState: IntegrationApiStateData) => {\r\n        if (apiState.isAvailable !== newApiState.isAvailable) {\r\n            currentTabDataProvider.setIntegrationApiActive(newApiState.isAvailable)\r\n        }\r\n    }\r\n    const integrationApiOriginalSubscription = integrationApiConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            onIntegrationApiStateChange(newState)\r\n            apiState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            const newState = {...apiState, ...stateUpdate}\r\n            onIntegrationApiStateChange(newState)\r\n            apiState = newState\r\n        },\r\n    })\r\n\r\n    const onGetConfig = () => {\r\n        switch (apiState.integrationKey) {\r\n            case 'salesforce':\r\n                return Promise.resolve({clickAction: 'call'})\r\n            default:\r\n                return Promise.resolve({})\r\n        }\r\n    }\r\n\r\n    const onStartCall = (phonenumber: string, initialObjects: InteractionAssociatedObjectData[]): Promise<ApiInitiateResult> => {\r\n        requireLogin()\r\n\r\n        const adapterParams = apiState.adapterUrlParams\r\n        const deferredDial = adapterParams && adapterParams['deferredDial']\r\n\r\n        const associatedObjects = initialObjects.map(crmObject => ({\r\n            ...crmObject,\r\n            source: apiState.integrationKey || '',\r\n        }))\r\n\r\n        if (deferredDial && deferredDial !== '0' && ref.current.deferredDial && associatedObjects.length) {\r\n            integrationApiConnector.dispatch.setDeferredDialData({\r\n                number: phonenumber,\r\n                objects: associatedObjects,\r\n            })\r\n            ref.current.deferredDial(phonenumber)\r\n\r\n            return Promise.resolve({id: null})\r\n\r\n        } else {\r\n\r\n            const errors = validate('call', phonenumber)\r\n            if (errors.length) {\r\n                throw new ApiError(errors[0].name, errors[0].message)\r\n            }\r\n            ref.current.showInteractionPage()\r\n            return interactionStateMethods.initiateCall({\r\n                phone: phonenumber,\r\n                accessNumberId: ref.current.getDIDNumber(),\r\n                serviceId: ref.current.getService(),\r\n                associatedRecords: associatedObjects,\r\n                origination: 'integration-api',\r\n            }).then(result => ({\r\n                id: result.id,\r\n                error: result.error?.message,\r\n            }))\r\n        }\r\n    }\r\n\r\n    const onStartChat = (\r\n        channel: ChatChannelType,\r\n        address: string,\r\n        initialObjects: InteractionAssociatedObjectData[],\r\n    ): Promise<ApiInitiateResult> => {\r\n        requireLogin()\r\n\r\n        const adapterParams = apiState.adapterUrlParams\r\n        const deferredDial = adapterParams && adapterParams['deferredDial']\r\n\r\n        const associatedObjects = initialObjects.map(crmObject => ({\r\n            ...crmObject,\r\n            source: apiState.integrationKey || '',\r\n        }))\r\n\r\n        if (deferredDial && deferredDial !== '0' && ref.current.deferredDial && associatedObjects.length) {\r\n            integrationApiConnector.dispatch.setDeferredDialData({\r\n                number: address,\r\n                objects: associatedObjects,\r\n            })\r\n            ref.current.deferredDial(address)\r\n\r\n            return Promise.resolve({id: null})\r\n\r\n        } else {\r\n            if (channel === 'sms') {\r\n                const errors = validate('smsChat', address)\r\n                if (errors.length) {\r\n                    throw new ApiError(errors[0].name, errors[0].message)\r\n                }\r\n            }\r\n            const promise = interactionStateMethods.initiateChat({\r\n                address,\r\n                channel,\r\n                serviceId: ref.current.getService()!, // service is checked by validation procedure\r\n                accessNumberId: ref.current.getDIDNumber(),\r\n                origination: 'integration-api',\r\n            })\r\n            if (associatedObjects) {\r\n                integrationApiConnector.dispatch.addPendingAssociatedObjects('chat', associatedObjects)\r\n            }\r\n            ref.current.showInteractionPage()\r\n            return promise.then(result => ({\r\n                id: result.id,\r\n                error: result.error?.message,\r\n            }))\r\n        }\r\n    }\r\n\r\n    const onStartEmail = (_email: string, _initialObjects: InteractionAssociatedObjectData[]): Promise<ApiInitiateResult> => {\r\n        requireLogin()\r\n        throw new ApiError('api_method_not_implemented', 'Email interactions is not implemented')\r\n        // if (initialObject) {\r\n        //     jsApi.addPendingAssociatedObjects('email', initialObject)\r\n        // }\r\n    }\r\n\r\n    const onGetAgentState = () => {\r\n        requireLogin()\r\n        return Promise.resolve({\r\n            state: !agentState.state ? 'supervising' as const : agentState.state,\r\n            reservedForIncomingInteraction: !!agentState.reservedForIncomingInteraction,\r\n            notReadyReason: agentState.notReadyReason,\r\n        })\r\n    }\r\n\r\n    const onSetAgentState = (state: ApiAgentState, notReadyReason?: string) => {\r\n        requireLogin()\r\n        requirePrivileges('SYS_RECEIVE_AUTOMATICALLY_DISTRIBUTED_CALLS')\r\n        if (state === 'not_ready' && !notReadyReason) {\r\n            throw new ApiError('invalid_args', 'not_ready state requires notReadyReason to be present')\r\n        }\r\n        if (state === 'not_ready' && notReadyReason && !agentState.notReadyReasons?.includes(notReadyReason)) {\r\n            throw new ApiError('invalid_args', `Unknown not ready reason: \"${notReadyReason}\"`)\r\n        }\r\n        agentStateMethods.setState({\r\n            state: state === 'supervising' ? '' : state,\r\n            reason: notReadyReason,\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSwitchActiveInteraction = (interactionId: string) => {\r\n        requireLogin()\r\n        getItem(interactionId)\r\n        interactionStateMethods.activateItem(interactionId)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetVariable = (key: string, value: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.setScenarioVariables(\r\n            {[key]: value},\r\n            getInteractionStepId(item),\r\n        )\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetVariables = (keys: string[], interactionId?: string): Promise<Record<string, string>> => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n\r\n        return interactionStateMethods.getScenarioVariables({\r\n            itemId: item.id,\r\n            variableNames: keys,\r\n        })\r\n    }\r\n\r\n    const onLeaveInteraction = (interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const state = item ? item.state : ''\r\n        if (state === 'delivered' || state === 'hold' || state === 'delivery_pending' || state === 'IVR') {\r\n            interactionStateMethods.disconnectItem(item.id)\r\n        } else {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                `The interaction is in the '${state}' state and cannot be terminated.`,\r\n            )\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onCompleteInteraction = (interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const state = item?.state || ''\r\n        const internalChatData = item?.internalChatData || ''\r\n        const serviceId = item.scenarioData?.serviceId || item.workitemData?.serviceId\r\n        const currentService = serviceId ? servicesDispositionsState?.services[serviceId] : undefined\r\n        const requireDisposition = currentService?.requireDispositions\r\n        const selectedDisposition = item.dispositionData?.disposition\r\n        const rescheduleDate = item.dispositionData?.disposition?.rescheduleFrom\r\n\r\n        if (requireDisposition && !selectedDisposition) {\r\n            throw new ApiError(\r\n                'no_disposition',\r\n                'Cannot complete interaction without a set disposition. It is required.',\r\n            )\r\n        }\r\n\r\n        if (rescheduleDate && isBefore(rescheduleDate)) {\r\n            throw new ApiError(\r\n                'invalid_request',\r\n                'Reschedule date is in the past.',\r\n            )\r\n        }\r\n\r\n        if (internalChatData) {\r\n            interactionStateMethods.agentChatClose(item.id)\r\n        }\r\n        if (\r\n            state === 'wrap_up' ||\r\n            state === 'wrap_up_hold' ||\r\n            (item.callData && item.callData.callState === 'failed') ||\r\n            (item.mediaType === 'workitem' && state === 'delivered')\r\n        ) {\r\n            interactionStateMethods.completeItem(item.id)\r\n        } else {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                `The interaction is in the \"${state}\" state and cannot be completed.`,\r\n            )\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onLeaveAndCompleteInteraction = (disposition?: string, note?: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (!(['delivered', 'hold', 'delivery_pending', 'IVR'] as ItemState[]).includes(item.state!)) {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                `The interaction is in the '${item.state}' state and cannot be terminated.`,\r\n            )\r\n        }\r\n        const serviceId = item.scenarioData?.serviceId || item.workitemData?.serviceId\r\n        const serviceData = Object.values(servicesDispositionsState.services).find(service => service.id === serviceId)\r\n        if (!serviceData) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Unable to get service (id: \"${serviceId}\") info for requested interaction (id: \"${item.id}\")`,\r\n            )\r\n        }\r\n        if (serviceData.requireDispositions && !disposition) {\r\n            throw new ApiError(\r\n                'no_disposition',\r\n                `Interaction with service \"${serviceData.name}\" requires disposition`,\r\n            )\r\n        }\r\n        if (disposition) {\r\n            const dispositions = Object.values(servicesDispositionsState?.dispositions[serviceData.id] ?? {})\r\n\r\n            const requestedDisposition = dispositions.find(disp => {\r\n                return [disp.id, disp.code, disp.name].includes(disposition)\r\n            })\r\n\r\n            if (!requestedDisposition) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `There is no disposition with id/code/name \"${disposition}\" for service \"${serviceData.name}\"`,\r\n                )\r\n            }\r\n            interactionStateMethods.setDisposition({\r\n                itemId: item.id,\r\n                disposition: {\r\n                    id: requestedDisposition.id,\r\n                    name: requestedDisposition.name,\r\n                },\r\n            })\r\n        }\r\n        if (note) {\r\n            interactionStateMethods.addNote({itemId: item.id, note})\r\n        }\r\n        setTimeout(() => {\r\n            interactionStateMethods.disconnectItem(item.id)\r\n            setTimeout(() => {\r\n                interactionStateMethods.completeItem(item.id)\r\n            })\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetServicesList = () => {\r\n        requireLogin()\r\n        const storedServices = Object.values(servicesDispositionsState.services)\r\n        if (storedServices.length) {\r\n            servicesDispositionsStateMethods.requestServices()\r\n            return Promise.resolve(storedServices.map(service => convertService(service)))\r\n        }\r\n        return servicesDispositionsStateMethods.requestServices().then(services => {\r\n            return services?.map(service => convertService(service)) ?? []\r\n        })\r\n    }\r\n\r\n    const onGetService = () => {\r\n        requireLogin()\r\n        const serviceId = ref.current.getService()\r\n        if (!serviceId) {\r\n            return Promise.resolve(null)\r\n        }\r\n        const serviceData = servicesDispositionsState.services[serviceId]\r\n        if (!serviceData) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                'Unable to resolve selected service. Try to refresh services list data.',\r\n            )\r\n        }\r\n        return Promise.resolve(convertService(serviceData))\r\n    }\r\n\r\n    const onSetService = (service: string | null) => {\r\n        requireLogin()\r\n        if (service === null) {\r\n            ref.current.setService()\r\n            return Promise.resolve()\r\n        }\r\n        const services = Object.values(servicesDispositionsState.services)\r\n        const serviceById = services.find(srv => srv.id === service)\r\n        if (serviceById) {\r\n            ref.current.setService(serviceById.id)\r\n        } else {\r\n            const serviceByName = services.find(srv => srv.name === service)\r\n            if (!serviceByName) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `There is no service with id/name \"${service}\"`,\r\n                )\r\n            }\r\n            ref.current.setService(serviceByName.id)\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetDIDNumbersList = () => {\r\n        requireLogin()\r\n        const didNumbers = Object.values(didNumbersState.didNumbers)\r\n        if (didNumbers.length) {\r\n            didNumbersStateMethods.requestDIDNumbers(undefined)\r\n            return Promise.resolve(didNumbers.map(didNumber => convertDIDNumber(didNumber)))\r\n        }\r\n        return didNumbersStateMethods.requestDIDNumbers(sessionState.phoneNumber)\r\n            .then(numbers => {\r\n                return numbers?.map(didNumber => convertDIDNumber(didNumber)) ?? []\r\n            })\r\n    }\r\n\r\n    const onGetDIDNumber = () => {\r\n        requireLogin()\r\n        const didNumberId = ref.current.getDIDNumber()\r\n        if (!didNumberId) {\r\n            return Promise.resolve(null)\r\n        }\r\n        const didNumberData = didNumbersState.didNumbers[didNumberId]\r\n        if (!didNumberData) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                'Unable to resolve selected did number. Try to refresh did numbers list data.',\r\n            )\r\n        }\r\n        return Promise.resolve(convertDIDNumber(didNumberData))\r\n    }\r\n\r\n    const onSetDIDNumber = (did: string | null) => {\r\n        requireLogin()\r\n        if (did === null) {\r\n            ref.current.setDIDNumber()\r\n            return Promise.resolve()\r\n        }\r\n        const didNumbers = Object.values(didNumbersState.didNumbers)\r\n        const didNumberById = didNumbers.find(didNumber => didNumber.id === did)\r\n        if (didNumberById) {\r\n            ref.current.setDIDNumber(didNumberById.id)\r\n        } else {\r\n            const didNumberByNumber = didNumbers.find(didNumber => {\r\n                return didNumber.externalNumber.toString() === did\r\n            })\r\n            if (!didNumberByNumber) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `There is no DID number with id/number \"${did}\"`,\r\n                )\r\n            }\r\n            ref.current.setDIDNumber(didNumberByNumber.id)\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetDispositionsList = ({service, interactionId}: DispositionTarget) => {\r\n        requireLogin()\r\n        let serviceId: string | undefined = service\r\n        if (!service) {\r\n            const item = getItem(interactionId)\r\n            serviceId = item.scenarioData?.serviceId || item.workitemData?.serviceId\r\n        }\r\n        if (!serviceId) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                'Service associated with active interaction not found',\r\n            )\r\n        }\r\n        const services = Object.values(servicesDispositionsState.services)\r\n        if (services.length) {\r\n            const serviceData = services.find(srv => {\r\n                return srv.id === serviceId || srv.name === serviceId\r\n            })\r\n            if (!serviceData) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `There is no service with id/name \"${service}\"`,\r\n                )\r\n            }\r\n            serviceId = serviceData.id\r\n        } else {\r\n            servicesDispositionsStateMethods.requestServices()\r\n        }\r\n        const dispositions = Object.values(servicesDispositionsState.dispositions[serviceId] || {})\r\n        if (dispositions.length) {\r\n            servicesDispositionsStateMethods.requestServiceDispositions(serviceId)\r\n            return Promise.resolve(dispositions.map(disposition => convertDisposition(disposition)))\r\n        }\r\n        return servicesDispositionsStateMethods.requestServiceDispositions(serviceId).then(disps => {\r\n            return disps?.map(disposition => convertDisposition(disposition)) ?? []\r\n        })\r\n    }\r\n\r\n    const onSetDisposition = (disposition: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const serviceId = item.scenarioData?.serviceId || item.workitemData?.serviceId\r\n        const serviceData = Object.values(servicesDispositionsState?.services ?? {}).find(srv => {\r\n            return srv.id === serviceId\r\n        })\r\n        if (!serviceData) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Unable to get service (id: \"${serviceId}\") info for requested interaction (id: \"${item.id}\")`,\r\n            )\r\n        }\r\n        const dispositions = Object.values(servicesDispositionsState?.dispositions[serviceData.id] ?? {})\r\n\r\n        const requestedDisposition = dispositions.find(disp => {\r\n            return [disp.id, disp.code, disp.name].includes(disposition)\r\n        })\r\n\r\n        if (!requestedDisposition) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `There is no disposition with id/code/name \"${disposition}\" for service \"${serviceData.name}\"`,\r\n            )\r\n        }\r\n        interactionStateMethods.setDisposition({\r\n            itemId: item.id,\r\n            disposition: {\r\n                id: requestedDisposition.id,\r\n                name: requestedDisposition.name,\r\n            },\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onAddInteractionAssociatedObject = (object: InteractionAssociatedObjectData, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const dataWithIntegrationKey = {\r\n            ...object,\r\n            source: apiState.integrationKey || '',\r\n        }\r\n        interactionStateMethods.addAssociatedObject(item.id, dataWithIntegrationKey)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetInteractionActiveScreen = (screen: InteractionScreen, interactionId?: string) => {\r\n        requireLogin()\r\n        const integrationKey = apiState.integrationKey\r\n        if (integrationKey === null) {\r\n            return Promise.resolve()\r\n        }\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.setActiveCrmScreen(item.id, integrationKey, screen)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onConsultCall = (phone: string) => {\r\n        requireLogin()\r\n        const adapterParams = apiState.adapterUrlParams\r\n        const deferredDial = adapterParams && adapterParams['deferredDial']\r\n        if (deferredDial && deferredDial !== '0' && ref.current.deferredDial) {\r\n            ref.current.deferredDial(phone)\r\n        } else {\r\n            const errors = validate('call', phone)\r\n            if (errors.length) {\r\n                throw new ApiError(errors[0].name, errors[0].message)\r\n            }\r\n            interactionStateMethods.initiateCall({\r\n                phone,\r\n                serviceId: ref.current.getService(),\r\n                accessNumberId: ref.current.getDIDNumber(),\r\n                origination: 'integration-api',\r\n            })\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onBlindTransfer = (phone: string, customTransferData?: CustomTransferData, interactionId?: string) => {\r\n        requireLogin()\r\n        requirePrivileges('CAN_TRANSFER')\r\n\r\n        const item = getItem(interactionId)\r\n        const raSessionPin = getRemoteAssistSessionPin(item)\r\n        const raSessionId = getRemoteAssistSessionId(item)\r\n\r\n        transferredDataItems[item.id] = true\r\n        interactionStateMethods.updateScreenPopData({\r\n            itemId: item.id,\r\n            customData: customTransferData,\r\n            raSessionPin,\r\n            raSessionId,\r\n        })\r\n        interactionStateMethods.blindTransfer({item, phone})\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onTransfer = (customTransferData?: CustomTransferData) => {\r\n        requireLogin()\r\n        requirePrivileges('CAN_TRANSFER')\r\n\r\n        const activeItemId = interactionState.activeItemId\r\n        const activeItem = getItem(activeItemId)\r\n        const consultMainItemId = activeItem.displayData.isConsultCall\r\n        const mainItem = consultMainItemId ? getItem(consultMainItemId) : activeItem\r\n\r\n        const raSessionPin = getRemoteAssistSessionPin(mainItem)\r\n        const raSessionId = getRemoteAssistSessionId(mainItem)\r\n\r\n        transferredDataItems[mainItem.id] = true\r\n        interactionStateMethods.updateScreenPopData({\r\n            itemId: mainItem.id,\r\n            customData: customTransferData,\r\n            raSessionPin,\r\n            raSessionId,\r\n        })\r\n        interactionStateMethods.completeTransfer()\r\n\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onAddNote = (note: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.addNote({itemId: item.id, note})\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onUpdateNote = (note: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.updateNote({itemId: item.id, note})\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onReplaceNote = (note: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.replaceNote({itemId: item.id, note})\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onLogin = ({username, password, tenant}: LoginData, force = false) => {\r\n        if (sessionState.isLoggedIn) {\r\n            throw new ApiError('not_suitable_state', 'You are already in logged in state')\r\n        }\r\n        if (sessionState.isAuthorizing) {\r\n            throw new ApiError('not_suitable_state', 'Login procedure in process now')\r\n        }\r\n        if (force) {\r\n            sessionConnector.dispatch.forceLogin()\r\n        } else {\r\n            sessionConnector.dispatch.login({\r\n                loginId: username,\r\n                password,\r\n                domain: tenant || location.host,\r\n            })\r\n        }\r\n        return apiRequestTracker.newPendingRequest(\r\n            'onLogin',\r\n            [{username, password, tenant}, force],\r\n        )\r\n    }\r\n\r\n    const onLogout = () => {\r\n        requireLogin()\r\n        sessionConnector.dispatch.logout()\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetRescheduleWindow = (rescheduleData: RescheduleData, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const timezoneId = rescheduleData.timezoneCode\r\n        if (timezoneId) {\r\n            const timezone = timezonesState.allTimezones.find(tz => tz.id === timezoneId)\r\n            if (!timezone) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `Unknown timezone with code \"${timezoneId}\"`,\r\n                )\r\n            }\r\n        }\r\n        interactionStateMethods.setDispositionReschedule(item.id, {\r\n            rescheduleTimezone: timezoneId,\r\n            reschedulePhone: rescheduleData.numberToDial,\r\n            rescheduleFrom: rescheduleData.fromTime,\r\n            rescheduleTo: rescheduleData.untilTime,\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetPhoneDevicesList = () => {\r\n        requireLogin()\r\n        return Promise.resolve(typedKeys(sessionState.availablePhoneTypes))\r\n    }\r\n\r\n    const onGetPhoneDevice = () => {\r\n        requireLogin()\r\n        const selectedPhoneDevice = sessionState.phoneType\r\n        if (!selectedPhoneDevice) {\r\n            throw new ApiError(\r\n                'logged_without_phone',\r\n                'Selected phone is undefined',\r\n            )\r\n        }\r\n        return Promise.resolve({\r\n            type: selectedPhoneDevice,\r\n            phone: ['phone_type_external', 'phone_type_hard_custom'].includes(selectedPhoneDevice)\r\n                ? sessionState.phoneNumber\r\n                : undefined,\r\n        })\r\n    }\r\n\r\n    const onSetPhoneDevice = ({type, phone}: PhoneDeviceData) => {\r\n        requireLogin()\r\n        const availablePhoneDevices = Object.keys(sessionState.availablePhoneTypes)\r\n        if (!availablePhoneDevices.includes(type)) {\r\n            throw new ApiError(\r\n                'banned',\r\n                `Phone device \"${type}\" is not available`,\r\n            )\r\n        }\r\n        sessionConnector.dispatch.submitPhoneTypeSelection({\r\n            phoneType: type,\r\n            phoneNumber: phone,\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetLoginState = () => {\r\n        return Promise.resolve({\r\n            isLoggedIn: sessionState.isLoggedIn || false,\r\n            agentId: sessionState.userId,\r\n            username: sessionState.loginId,\r\n            sessionId: sessionState.sessionId,\r\n        })\r\n    }\r\n\r\n    const onSendDtmf = (dtmf: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n\r\n        if (item.mediaType !== 'voice' || !item.callData?.callId) {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                'Dtmf is applicable only for voice calls, ' +\r\n                    `but the interaction \"${item.id}\" is of a type \"${item.mediaType}\"`,\r\n            )\r\n        }\r\n        if (item.state !== 'delivered') {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                'Dtmf is applicable only for active calls, ' +\r\n                    `but the interaction \"${item.id}\" is in the state \"${item.state}\"`,\r\n            )\r\n        }\r\n        interactionStateMethods.sendDtmf({\r\n            dtmf,\r\n            callId: item.callData.callId,\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onAcceptInteraction = (interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (item.state !== 'delivery_pending') {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                'To be accepted interaction must be in a \"delivery_pending\" state, ' +\r\n                    `but the interaction \"${item.id}\" is in the \"${item.state}\" state`,\r\n            )\r\n        }\r\n        interactionStateMethods.acceptItem(item.id)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onRejectInteraction = (interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (item.state !== 'delivery_pending') {\r\n            throw new ApiError(\r\n                'not_suitable_state',\r\n                'To be rejected interaction must be in a \"delivery_pending\" state, ' +\r\n                    `but the interaction \"${item.id}\" is in the \"${item.state}\" state`,\r\n            )\r\n        }\r\n        interactionStateMethods.rejectItem(item.id)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onInviteToCallConference = (phone: string, customTransferData?: CustomTransferData, interactionId?: string) => {\r\n        requireLogin()\r\n        requirePrivileges('CAN_TRANSFER')\r\n\r\n        const item = getItem(interactionId)\r\n        const raSessionPin = getRemoteAssistSessionPin(item)\r\n\r\n        transferredDataItems[item.id] = true\r\n        interactionStateMethods.updateScreenPopData({\r\n            itemId: item.id,\r\n            customData: customTransferData,\r\n            raSessionPin,\r\n        })\r\n        interactionStateMethods.singleStepConference({\r\n            phone,\r\n            serviceId: ref.current.getService(),\r\n            accessNumberId: ref.current.getDIDNumber(),\r\n        })\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onRemoveFromCallConference = (partyId: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        const partyForRemoval = (item.parties || []).find(party => party.id === partyId)\r\n        if (!partyForRemoval) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Could not find party \"${partyId}\" for the interaction \"${item.id}\"`,\r\n            )\r\n        }\r\n        interactionStateMethods.removeCallParty(partyForRemoval)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onDestroyCallConference = (interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        interactionStateMethods.destroyCallConference(item.id)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onInviteToChatConference = (partyId: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (!item.scenarioData?.interactionStepId) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Could not find interaction step id in the interaction \"${item.id}\"`,\r\n            )\r\n        }\r\n        interactionChatStateMethods.inviteToChat({itemId: item.scenarioData.interactionStepId, partyId})\r\n    }\r\n\r\n    const onRemoveFromChatConference = (partyId: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (!item.scenarioData?.interactionStepId) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Could not find interaction step id in the interaction \"${item.id}\"`,\r\n            )\r\n        }\r\n\r\n        const partyForRemoval = (item.chatParties || []).find(party => party.party_id === partyId)\r\n        if (!partyForRemoval) {\r\n            throw new ApiError(\r\n                'object_not_found',\r\n                `Could not find chat party \"${partyId}\" for the interaction \"${item.id}\"`,\r\n            )\r\n        }\r\n        interactionChatStateMethods.removePartyFromChat({itemId: item.scenarioData.interactionStepId, partyId: partyForRemoval.party_id})\r\n    }\r\n\r\n    const onMergeAllCallsIntoConference = (customTransferData?: CustomTransferData) => {\r\n        requireLogin()\r\n        getItem()\r\n        const mainItem = interactionState.items.find(item => !!item.displayData.hasConsultCalls?.length)\r\n\r\n        if (mainItem) {\r\n            const raSessionPin = getRemoteAssistSessionPin(mainItem)\r\n\r\n            transferredDataItems[mainItem.id] = true\r\n            interactionStateMethods.updateScreenPopData({\r\n                itemId: mainItem.id,\r\n                customData: customTransferData,\r\n                raSessionPin,\r\n            })\r\n        }\r\n        interactionStateMethods.mergeAllCallsIntoConference()\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetTeams = () => {\r\n        requireLogin()\r\n        if (directoryState.teams.length) {\r\n            directoryStateMethods.getAgentTeams()\r\n            return Promise.resolve(directoryState.teams.map(team => convertTeam(team)))\r\n        }\r\n        return directoryStateMethods.getAgentTeams().then(teams => {\r\n            return teams.map(team => convertTeam(team))\r\n        })\r\n    }\r\n\r\n    const onGetTeamMembers = (teamId: string) => {\r\n        requireLogin()\r\n        if (directoryState.teams.length) {\r\n            const team = directoryState.teams.find(currTeam => currTeam.id === teamId)\r\n            if (!team) {\r\n                throw new ApiError(\r\n                    'object_not_found',\r\n                    `Team with id \"${teamId}\" is not found`,\r\n                )\r\n            }\r\n        } else {\r\n            directoryStateMethods.getAgentTeams()\r\n        }\r\n        return directoryStateMethods.requestTeamUsers(teamId).then(users => {\r\n            return users.map(user => convertTeamMember(user))\r\n        })\r\n    }\r\n\r\n    const onSetCallHold = (state: boolean, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (state) {\r\n            interactionStateMethods.holdItem(item.id)\r\n        } else {\r\n            interactionStateMethods.resumeItem(item.id)\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetCallRecording = (state: boolean, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (state) {\r\n            requirePrivileges('CAN_START_RECORDING')\r\n            interactionStateMethods.recordCall(item.id)\r\n        } else {\r\n            requirePrivileges('CAN_STOP_RECORDING')\r\n            interactionStateMethods.stopRecordingCall(item.id)\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetCallMute = (state: boolean, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (state) {\r\n            interactionStateMethods.muteItem(item.id)\r\n        } else {\r\n            interactionStateMethods.unmuteItem(item.id)\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onSetScreenRecordingMute = (state: boolean) => {\r\n        requireLogin()\r\n        if (!bpClientState.screenRecording.vncInit) {\r\n            throw new ApiError(\r\n                'banned',\r\n                'Screen Recording is not allowed for the current user',\r\n            )\r\n        }\r\n        bpClientStateMethods.setScreenRecordingMute(state)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetScreenRecordingState = () => {\r\n        requireLogin()\r\n        return Promise.resolve(convertScreenRecordingState(bpClientState.screenRecording))\r\n    }\r\n\r\n    const onSendChatMessage = (message: string, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (item.itemKind === 'scenario' && item.mediaType === 'chat') {\r\n\r\n            const channel = item.externalChatData?.channel || 'sms'\r\n            const errors = getMessageErrorsRaw({options: {message, channel}})\r\n                .map(err => adErrorToApiError[err])\r\n\r\n            if (errors.length) {\r\n                throw new ApiError(errors[0].name, errors[0].message)\r\n            }\r\n\r\n            const itemId = item.scenarioData?.interactionStepId\r\n            if (itemId) {\r\n                interactionChatStateMethods.sendMessage({\r\n                    text: message,\r\n                    type: 'message',\r\n                    itemId,\r\n                    channel: item.externalChatData?.channel,\r\n                })\r\n            }\r\n            return Promise.resolve()\r\n        } else {\r\n            throw new ApiError(\r\n                'invalid_args',\r\n                `Invalid interaction type  for sending chat service. id=${interactionId} kind=${item.itemKind} mediaType=${item.mediaType}`,\r\n            )\r\n        }\r\n    }\r\n\r\n    const onSuggestChatMessage = (message: string, allowOverwrite?: boolean, interactionId?: string) => {\r\n        requireLogin()\r\n        const item = getItem(interactionId)\r\n        if (item.mediaType !== 'chat') {\r\n            throw new ApiError('invalid_args', `Interaction isn't a chat. id=${interactionId} mediaType=${item.mediaType}`)\r\n        }\r\n        ref.current.setChatMessageSuggestion(message, !!allowOverwrite, item.id)\r\n        return Promise.resolve()\r\n    }\r\n\r\n    const onGetAgentNotReadyReasons = () => {\r\n        requireLogin()\r\n        return Promise.resolve(agentState.notReadyReasons ?? [])\r\n    }\r\n\r\n    const onActivatePage = () => {\r\n        currentTabDataProvider.activateTab()\r\n    }\r\n\r\n    const onGetInteractionsState = () => {\r\n        requireLogin()\r\n        return {\r\n            activeInteractionId: interactionState.activeItemId ?? null,\r\n            interactions: interactionState.items.map(item => {\r\n                return convertItem(sessionState.serverOrigin, item, formatFullName)\r\n            }),\r\n        }\r\n    }\r\n\r\n    const onSetCallRecordingMute = (mute: boolean, interactionId?: string | 'all') => {\r\n        requireLogin()\r\n\r\n        if (interactionId === 'all') {\r\n            interactionState.items.forEach(setRecordingMuteForItem)\r\n        } else {\r\n            const item = getItem(interactionId)\r\n            setRecordingMuteForItem(item)\r\n        }\r\n\r\n        function setRecordingMuteForItem(item: Item) {\r\n            if (item.displayData.isRecording) {\r\n                if (mute && !item.displayData.isRecordingMuted) {\r\n                    interactionStateMethods.muteCallRecording(getInteractionStepId(item))\r\n                }\r\n                if (!mute && item.displayData.isRecordingMuted) {\r\n                    interactionStateMethods.unmuteCallRecording(getInteractionStepId(item))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const integrationApiSubscription = integrationApiConnector.dispenser.subscribe({\r\n        onGetConfig,\r\n        onStartCall,\r\n        onStartChat,\r\n        onStartEmail,\r\n        onGetAgentState,\r\n        onSetAgentState,\r\n        onSwitchActiveInteraction,\r\n        onSetVariable,\r\n        onGetVariables,\r\n        onLeaveInteraction,\r\n        onCompleteInteraction,\r\n        onLeaveAndCompleteInteraction,\r\n        onGetServicesList,\r\n        onGetService,\r\n        onSetService,\r\n        onGetDIDNumbersList,\r\n        onGetDIDNumber,\r\n        onSetDIDNumber,\r\n        onGetDispositionsList,\r\n        onSetDisposition,\r\n        onAddInteractionAssociatedObject,\r\n        onSetInteractionActiveScreen,\r\n        onConsultCall,\r\n        onBlindTransfer,\r\n        onTransfer,\r\n        onAddNote,\r\n        onUpdateNote,\r\n        onReplaceNote,\r\n        onLogin,\r\n        onLogout,\r\n        onSetRescheduleWindow,\r\n        onGetPhoneDevicesList,\r\n        onGetPhoneDevice,\r\n        onSetPhoneDevice,\r\n        onGetLoginState,\r\n        onSendDtmf,\r\n        onAcceptInteraction,\r\n        onRejectInteraction,\r\n        onInviteToCallConference,\r\n        onRemoveFromCallConference,\r\n        onDestroyCallConference,\r\n        onInviteToChatConference,\r\n        onRemoveFromChatConference,\r\n        onMergeAllCallsIntoConference,\r\n        onGetTeams,\r\n        onGetTeamMembers,\r\n        onSetCallHold,\r\n        onSetCallRecording,\r\n        onSetCallMute,\r\n        onSetScreenRecordingMute,\r\n        onGetScreenRecordingState,\r\n        onSendChatMessage,\r\n        onSuggestChatMessage,\r\n        onGetAgentNotReadyReasons,\r\n        onActivatePage,\r\n        onGetInteractionsState,\r\n        onSetCallRecordingMute,\r\n        onSetDialCandidates: () => {},\r\n    })\r\n\r\n    return [\r\n        agentStateSubscription,\r\n        interactionStateSubscription,\r\n        servicesDispositionsStateSubscription,\r\n        didNumbersStateSubscription,\r\n        sessionStateSubscription,\r\n        timezonesStateSubscription,\r\n        directoryStateSubscription,\r\n        bpClientStateSubscription,\r\n        remoteAssistStateSubscription,\r\n        integrationApiOriginalSubscription,\r\n        integrationApiSubscription,\r\n    ]\r\n}\r\n","import type {ReactElement} from 'react'\r\nimport React, {useCallback, useEffect, useRef} from 'react'\r\n\r\nimport type {AuthorizedConnectors, BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {useDIDNumberState} from '@bpinc/ad-did-number-context'\r\nimport {ApiError} from '@bpinc/ad-integration-api-state-types'\r\nimport {useInteractionStateRef} from '@bpinc/ad-interaction-state-context'\r\nimport {useServiceState} from '@bpinc/ad-service-context'\r\nimport type {UISpecificRefValue} from '@bpinc/lib-communicator-integration-api-connection'\r\nimport {connectIntegrationApiAuthorized} from '@bpinc/lib-communicator-integration-api-connection'\r\nimport {AppRoutes, useNavigationState} from '@bpinc/lib-communicator-navigation-state'\r\nimport {useCommunicatorUIState} from '@bpinc/lib-communicator-ui-context'\r\nimport {useInteractionUIState} from '@bpinc/state-interaction-ui'\r\n\r\n\r\ntype IntegrationApiInitializerProps = {\r\n    baseConnectors: BaseConnectors\r\n    authorizedConnectors: AuthorizedConnectors\r\n    children: ReactElement\r\n}\r\n\r\nexport const IntegrationApiAuthorizedInitializer: React.FC<IntegrationApiInitializerProps> = ({\r\n    baseConnectors,\r\n    authorizedConnectors,\r\n    children,\r\n}) => {\r\n    const {selectedService, setService} = useServiceState()\r\n    const {selectedDIDNumber, setDIDNumber} = useDIDNumberState()\r\n    const {items, setItemState} = useInteractionUIState()\r\n    const interactionStateRef = useInteractionStateRef()\r\n    const setChatMessageSuggestion = useCallback((message: string, allowOverwrite: boolean, interactionId: string) => {\r\n        const item = items[interactionId]\r\n        if (!item) {\r\n            throw new ApiError('no_interaction', `No interaction with id \"${interactionId}\"`)\r\n        }\r\n        if (item.chatMessage && !allowOverwrite) {\r\n            throw new ApiError('banned', 'Not allowed to overwrite the existing message')\r\n        }\r\n        setItemState(interactionId, oldState => ({\r\n            ...oldState,\r\n            chatMessage: message,\r\n        }))\r\n    }, [items, setItemState])\r\n\r\n    const setDialPadValue = useCommunicatorUIState(s => s.dialpad.setSearchValue)\r\n    const setActivePage = useNavigationState('setActivePage')\r\n\r\n    const deferredDial = useCallback((number: string) => {\r\n        setDialPadValue(number)\r\n        setActivePage({name: AppRoutes.Dial})\r\n    }, [setDialPadValue, setActivePage])\r\n\r\n    const showInteractionPage = useCallback(() => {\r\n        setActivePage({name: AppRoutes.Interactions})\r\n    }, [setActivePage])\r\n\r\n    const uiSpecificRef = useRef<UISpecificRefValue>({\r\n        getService: () => selectedService,\r\n        setService: s => setService(s),\r\n        getDIDNumber: () => selectedDIDNumber,\r\n        setDIDNumber: (number?: string) => setDIDNumber(number),\r\n        setChatMessageSuggestion,\r\n        deferredDial,\r\n        showInteractionPage,\r\n    })\r\n\r\n    useEffect(() => {\r\n        uiSpecificRef.current = {\r\n            getDIDNumber: () => selectedDIDNumber,\r\n            setDIDNumber: (number?: string) => setDIDNumber(number),\r\n            getService: () => selectedService,\r\n            setService: (service?: string) => setService(service, interactionStateRef.current?.activeItem?.id),\r\n            setChatMessageSuggestion,\r\n            deferredDial,\r\n            showInteractionPage,\r\n        }\r\n    }, [\r\n        interactionStateRef,\r\n        selectedService,\r\n        setService,\r\n        deferredDial,\r\n        selectedDIDNumber,\r\n        setDIDNumber,\r\n        setChatMessageSuggestion,\r\n        showInteractionPage,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        const subscriptions = connectIntegrationApiAuthorized(baseConnectors, authorizedConnectors, uiSpecificRef)\r\n        return () => {\r\n            subscriptions.forEach(s => s.unsubscribe())\r\n        }\r\n    }, [baseConnectors, authorizedConnectors])\r\n\r\n    return <>{children}</>\r\n}\r\n","import type {BaseConnectors} from '@bpinc/ad-connected-state-types'\r\nimport {ApiError} from '@bpinc/ad-integration-api-state-types'\r\nimport {getInitialSessionState} from '@bpinc/ad-session-types'\r\nimport type {LoginData} from '@bpinc/adapters-public-api-types'\r\n\r\nimport {convertServerError} from './converters'\r\nimport {createApiRequestTracker} from './pending-requests'\r\n\r\n\r\nconst API_REQUEST_TIMEOUT = 5000\r\n\r\nexport const connectIntegrationApiBase = ({integrationApiConnector, sessionConnector}: BaseConnectors) => {\r\n\r\n    const apiRequestTracker = createApiRequestTracker(API_REQUEST_TIMEOUT)\r\n    let sessionState = getInitialSessionState()\r\n\r\n    const sessionStateSubscription = sessionConnector.dispenser.subscribe({\r\n        onInitialState: newState => {\r\n            if (newState.isLoggedIn) {\r\n                apiRequestTracker.resolveAllPendingRequests('onLogin', undefined)\r\n                integrationApiConnector.dispatch.login({\r\n                    isLoggedIn: true,\r\n                    agentId: newState.userId!,\r\n                    username: newState.loginId!,\r\n                    sessionId: newState.sessionId!,\r\n                })\r\n            }\r\n            const prevState = sessionState\r\n            if (!prevState.loginError && newState.loginError) {\r\n                apiRequestTracker.rejectAllPendingRequests('onLogin', newState.loginError)\r\n            }\r\n            sessionState = {...newState}\r\n        },\r\n        onChange: stateUpdate => {\r\n            const prevState = sessionState\r\n            sessionState = {...sessionState, ...stateUpdate}\r\n            if (!prevState.loginError && sessionState.loginError) {\r\n                apiRequestTracker.rejectAllPendingRequests('onLogin', sessionState.loginError)\r\n            }\r\n        },\r\n        onLogin: session => {\r\n            apiRequestTracker.resolveAllPendingRequests('onLogin', undefined)\r\n            integrationApiConnector.dispatch.login({\r\n                isLoggedIn: true,\r\n                agentId: session.userId!,\r\n                username: session.loginId!,\r\n                sessionId: session.sessionId!,\r\n            })\r\n        },\r\n        onServerError: (source, code, message) => {\r\n            integrationApiConnector.dispatch.serverError(\r\n                convertServerError(source, code, message),\r\n            )\r\n        },\r\n    })\r\n\r\n    const onLogin = ({username, password, tenant}: LoginData, force = false) => {\r\n        if (sessionState.isLoggedIn) {\r\n            throw new ApiError('not_suitable_state', 'You are already in logged in state')\r\n        }\r\n        if (sessionState.isAuthorizing) {\r\n            throw new ApiError('not_suitable_state', 'Login procedure in process now')\r\n        }\r\n        if (force) {\r\n            sessionConnector.dispatch.forceLogin()\r\n        } else {\r\n            sessionConnector.dispatch.login({\r\n                loginId: username,\r\n                password,\r\n                domain: tenant || location.host,\r\n            })\r\n        }\r\n        return apiRequestTracker.newPendingRequest(\r\n            'onLogin',\r\n            [{username, password, tenant}, force],\r\n        )\r\n    }\r\n\r\n    const onGetLoginState = () => {\r\n        return Promise.resolve({\r\n            isLoggedIn: sessionState.isLoggedIn || false,\r\n            agentId: sessionState.userId,\r\n            username: sessionState.loginId,\r\n            sessionId: sessionState.sessionId,\r\n        })\r\n    }\r\n\r\n    const throwNotLoggedIn = (): never => {\r\n        throw new ApiError('not_logged_in', 'You are not logged in')\r\n    }\r\n\r\n    const integrationApiSubscription = integrationApiConnector.dispenser.subscribe({\r\n        onLogin,\r\n        onGetLoginState,\r\n\r\n        onLogout: throwNotLoggedIn,\r\n        onAcceptInteraction: throwNotLoggedIn,\r\n        onAddInteractionAssociatedObject: throwNotLoggedIn,\r\n        onAddNote: throwNotLoggedIn,\r\n        onBlindTransfer: throwNotLoggedIn,\r\n        onCompleteInteraction: throwNotLoggedIn,\r\n        onConsultCall: throwNotLoggedIn,\r\n        onDestroyCallConference: throwNotLoggedIn,\r\n        onGetAgentNotReadyReasons: throwNotLoggedIn,\r\n        onGetAgentState: throwNotLoggedIn,\r\n        onGetConfig: throwNotLoggedIn,\r\n        onGetDIDNumber: throwNotLoggedIn,\r\n        onGetDIDNumbersList: throwNotLoggedIn,\r\n        onGetDispositionsList: throwNotLoggedIn,\r\n        onGetPhoneDevice: throwNotLoggedIn,\r\n        onGetPhoneDevicesList: throwNotLoggedIn,\r\n        onGetScreenRecordingState: throwNotLoggedIn,\r\n        onGetService: throwNotLoggedIn,\r\n        onGetServicesList: throwNotLoggedIn,\r\n        onGetTeamMembers: throwNotLoggedIn,\r\n        onGetTeams: throwNotLoggedIn,\r\n        onGetVariables: throwNotLoggedIn,\r\n        onInviteToCallConference: throwNotLoggedIn,\r\n        onLeaveAndCompleteInteraction: throwNotLoggedIn,\r\n        onLeaveInteraction: throwNotLoggedIn,\r\n        onMergeAllCallsIntoConference: throwNotLoggedIn,\r\n        onRejectInteraction: throwNotLoggedIn,\r\n        onRemoveFromCallConference: throwNotLoggedIn,\r\n        onReplaceNote: throwNotLoggedIn,\r\n        onSendChatMessage: throwNotLoggedIn,\r\n        onSendDtmf: throwNotLoggedIn,\r\n        onSetAgentState: throwNotLoggedIn,\r\n        onSetCallHold: throwNotLoggedIn,\r\n        onSetCallMute: throwNotLoggedIn,\r\n        onSetCallRecording: throwNotLoggedIn,\r\n        onSetDIDNumber: throwNotLoggedIn,\r\n        onSetDisposition: throwNotLoggedIn,\r\n        onSetInteractionActiveScreen: throwNotLoggedIn,\r\n        onSetPhoneDevice: throwNotLoggedIn,\r\n        onSetRescheduleWindow: throwNotLoggedIn,\r\n        onSetScreenRecordingMute: throwNotLoggedIn,\r\n        onSetService: throwNotLoggedIn,\r\n        onSetVariable: throwNotLoggedIn,\r\n        onSetWidgetMinimized: throwNotLoggedIn,\r\n        onStartCall: throwNotLoggedIn,\r\n        onStartChat: throwNotLoggedIn,\r\n        onStartEmail: throwNotLoggedIn,\r\n        onSuggestChatMessage: throwNotLoggedIn,\r\n        onSwitchActiveInteraction: throwNotLoggedIn,\r\n        onTransfer: throwNotLoggedIn,\r\n        onUpdateNote: throwNotLoggedIn,\r\n    })\r\n\r\n    return [sessionStateSubscription, integrationApiSubscription]\r\n}\r\n","import React, {useEffect} from 'react'\r\n\r\nimport type {BaseConnectorsConsumerComponent} from '@bpinc/lib-authorization-module'\r\nimport {connectIntegrationApiBase} from '@bpinc/lib-communicator-integration-api-connection'\r\n\r\n\r\nexport const IntegrationApiBaseInitializer: BaseConnectorsConsumerComponent = ({baseConnectors, children}) => {\r\n    useEffect(() => {\r\n        const subscriptions = connectIntegrationApiBase(baseConnectors)\r\n        return () => {\r\n            subscriptions.forEach(s => s.unsubscribe())\r\n        }\r\n    }, [baseConnectors])\r\n\r\n    return <>{children}</>\r\n}\r\n","// Communicator's root component rendered as a standalone application\r\nimport React from 'react'\r\n\r\nimport {createPlatformSpecific} from '@bpinc/ad-platform-specific-web-impl'\r\nimport {AuthorizationModule} from '@bpinc/lib-authorization-module'\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\n\r\nimport {standaloneProviders} from '../constants'\r\nimport {App} from './App/App'\r\nimport {IntegrationApiAuthorizedInitializer} from './IntegrationApiAuthorizedInitializer'\r\nimport {IntegrationApiBaseInitializer} from './IntegrationApiBaseInitializer'\r\n\r\n\r\nconst CommunicatorStandaloneProviders = createProviderWrapper(standaloneProviders)\r\n\r\nexport const CommunicatorApp: React.FC = () => {\r\n    return (\r\n        <AuthorizationModule\r\n            platformSpecific={createPlatformSpecific('adc')}\r\n            app=\"adc\"\r\n            BaseConnectorsConsumer={IntegrationApiBaseInitializer}\r\n            appRemoteName=\"communicator\"\r\n        >\r\n            {(baseConnectors, authorizedConnectors) => (\r\n                <CommunicatorStandaloneProviders>\r\n                    <IntegrationApiAuthorizedInitializer\r\n                        baseConnectors={baseConnectors}\r\n                        authorizedConnectors={authorizedConnectors}\r\n                    >\r\n                        <App />\r\n                    </IntegrationApiAuthorizedInitializer>\r\n                </CommunicatorStandaloneProviders>\r\n            )}\r\n        </AuthorizationModule>\r\n    )\r\n}\r\n","import type {FC} from 'react'\r\nimport React from 'react'\r\n\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\nimport {InteractionContextProvider} from '@bpinc/lib-interaction-context'\r\nimport {useNonParalleledDeliveredItems, useSelectedItems} from '@bpinc/lib-interaction-ui-hooks'\r\n\r\nimport {InteractionsList} from '../../../interactions'\r\nimport {CommunicatorContent} from '../../../main-page/'\r\nimport {providers} from '../../constants'\r\nimport type {CommunicatorProps} from '../../types'\r\n\r\n\r\nconst CommunicatorProviders = createProviderWrapper(providers)\r\n\r\n\r\n/** Communicator's component built into AgentDesktop */\r\nexport const CommunicatorWidget: FC<CommunicatorProps> = () => {\r\n    const deliveredNonParalleledItemIds = useNonParalleledDeliveredItems()\r\n    const {selectedItemId, setSelectedItemId} = useSelectedItems(deliveredNonParalleledItemIds)\r\n\r\n    return (\r\n        <CommunicatorProviders>\r\n            <InteractionContextProvider interactionId={selectedItemId}>\r\n                <InteractionsList\r\n                    itemIds={deliveredNonParalleledItemIds}\r\n                    selectedItemId={selectedItemId}\r\n                    setSelectedItemId={setSelectedItemId}\r\n                />\r\n                <CommunicatorContent />\r\n            </InteractionContextProvider>\r\n        </CommunicatorProviders>\r\n    )\r\n}\r\n","import {type FC, useEffect, useRef} from 'react'\r\nimport {useAtomValue, useSetAtom} from 'jotai'\r\n\r\nimport {useInteraction} from '@bpinc/ad-interaction-state-context'\r\nimport {useCommunicatorUIState} from '@bpinc/ad-main-page-ui-context'\r\nimport {createProviderWrapper} from '@bpinc/lib-helpers'\r\nimport {InteractionContextProvider} from '@bpinc/lib-interaction-context'\r\nimport {ButtonIcon, IconClose24} from '@bpinc/lib-jskit-ui'\r\nimport {tcn} from '@bpinc/lib-tailwind-classnames'\r\nimport {parallelItemsAtom, parallelItemsCountAtom} from '@bpinc/state-interaction-ui'\r\nimport {useLocalizationState} from '@bpinc/state-localization-context'\r\n\r\nimport {InteractionsPage} from '../../../interactions'\r\nimport {parallelChatProviders} from '../../constants'\r\nimport type {ParallelChatInteractionProps} from '../../types'\r\n\r\n\r\nconst ParallelChatInteractionProviders = createProviderWrapper(parallelChatProviders)\r\n\r\nexport const ParallelChatInteraction: FC<ParallelChatInteractionProps> = ({\r\n    parallelItem,\r\n}) => {\r\n    const {INTERACTIONS, KNOWLEDGE_BASE} = useLocalizationState('t')\r\n    const item = useInteraction(parallelItem.activeItemId)\r\n    const parallelItemsDispatch = useSetAtom(parallelItemsAtom)\r\n    const parallelItemsCount = useAtomValue(parallelItemsCountAtom)\r\n    const setParallelInteractionsWidth = useCommunicatorUIState(\r\n        s => s.setParallelInteractionsWidth,\r\n    )\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        const element = ref.current\r\n        if (!element) return\r\n\r\n        element.style.opacity = '1'\r\n\r\n        return () => {\r\n            ref.current?.style.setProperty('opacity', '0')\r\n        }\r\n    }, [])\r\n\r\n    if (!item || !parallelItem.activeItemId) {\r\n        return (\r\n            <div\r\n                ref={ref}\r\n                className=\"ml-2 transition-all bg-secondary-container-variant1\"\r\n            >\r\n                <div\r\n                    className={tcn(\r\n                        'flex w-full items-center justify-between px-4 py-2',\r\n                        'border-b border-neutral-100 bg-primary-background',\r\n                    )}\r\n                >\r\n                    <div className=\"uppercase caption-xs text-neutral-disabled\">\r\n                        {INTERACTIONS.interaction_details()}\r\n                    </div>\r\n                    <ButtonIcon\r\n                        tooltip={KNOWLEDGE_BASE.close_tab_text()}\r\n                        onClick={() => {\r\n                            parallelItemsDispatch({\r\n                                type: 'remove',\r\n                                payload: {index: parallelItem.index},\r\n                            })\r\n                            const decreaseWidthFactor = parallelItemsCount + 1\r\n                            setParallelInteractionsWidth(\r\n                                w => w - w / decreaseWidthFactor,\r\n                            )\r\n                        }}\r\n                        className=\"p-0\"\r\n                    >\r\n                        <IconClose24 className=\"!size-6\" />\r\n                    </ButtonIcon>\r\n                </div>\r\n                <div className=\"flex h-full flex-col items-center justify-center\">\r\n                    <h1 className=\"heading-s text-neutral-on-secondary\">{INTERACTIONS.no_new_interactions()}</h1>\r\n                    <p className=\"text-neutral-fade\">{INTERACTIONS.next_message_interaction_show()}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={tcn(\r\n                'flex flex-col',\r\n                'ml-2 flex-auto shrink-0 overflow-hidden',\r\n                'border-2 border-t-[6px] transition-all duration-300 border-on-primary',\r\n                'has-[:focus-within]:border-2 has-[:focus-within]:border-t-[6px] has-[:focus-within]:border-primary',\r\n            )}\r\n        >\r\n            <InteractionContextProvider interactionId={parallelItem.activeItemId} isParallelInteractionContext>\r\n                <ParallelChatInteractionProviders>\r\n                    <InteractionsPage />\r\n                </ParallelChatInteractionProviders>\r\n            </InteractionContextProvider>\r\n        </div>\r\n    )\r\n}\r\n"],"names":["CrmRecordItem","record","checked","handleChange","useLocalizationState","t","useIntegrationApiStateMethods","openRecord","interactionId","useInteractionId","handleChangeCallback","useCallback","id","handleRecordClick","source","inNewTab","li","className","SmCheckbox","onChange","data-testid","undefined","div","onClick","title","DISPOSITION","resolution_crm_object_click_tooltip","displayName","CrmRecords","useInteractionStateMethods","toggleAssociatedActivityRecord","useInteractionProp","activeItem","associatedObjects","list","selected","touched","primary","recordId","assertDefined","h4","resolution_crm_objects_new_label","ul","map","includes","length","resolution_crm_objects_empty_label","CrmScreen","React","useSearchDisposition","options","items","fn","fnRef","itemId","useInteractionUIState","setItemState","searchValue","dispositionSearch","setSearch","value","oldState","useRef","current","args","optionsFilteredBySearch","useMemo","searchValueMatchesDispositionFilter","disposition","isGroupLabel","label","toLowerCase","searchValueMatchesDisposition","filter","reduce","removeEmptyGroupLabelsReducer","dispositions","index","dispositionsList","nextDisposition","isEmptyGroupLabel","push","tcn","classnames","twMerge","cn","DispositionsListItem","props","highlight","onSelect","selectDisposition","resolutionsListItemClassName","data-selectable","tabIndex","highlighted","text","DispositionsAccordion","panels","listItemProps","panel","acc","array","addPanelToPanels","content","element","key","useAccordionPanels","useState","p","visiblePanels","setVisiblePanels","prevPanels","usePrevious","useEffect","initialPanels","setVisiblePanelsDuringSearch","visiblePanelsDuringSearch","matchingPanels","some","item","produce","draft","forEach","Accordion","type","onValueChange","IconChevronRight16","span","c","DispositionsList","SmList","divided","verticalAlign","dispositionOption","DispositionSelect","dispositionsListClassName","accordion","useDispositionSelect","dispositionRequired","defaultOption","searchOpened","useBoolean","dispositionNotSelectedError","useNotificationsState","Notifications","handleSelect","useEvent","option","setFalse","inputRef","popoverContentRef","focusInput","focus","setTrue","Popover","open","onOpenChange","toggle","asChild","e","preventDefault","onKeyDown","selectedElement","selectNextItem","direction","selectableItems","Array","from","querySelectorAll","selectedIndex","findIndex","i","hasAttribute","setAttribute","removeAttribute","nextIndex","scrollIntoView","openWithSelection","setTimeout","currentTarget","dataset","state","validOptions","o","querySelector","HTMLElement","click","stopPropagation","match","FieldLayout","error","message","GLOBAL","required","FieldFrame","focused","Boolean","rightPrefix","IconArrowDown16","Input","ref","placeholder","select_disposition","autoFocus","target","onBlur","selectedDisposition","aria-label","disposition_search_input_hint","sideOffset","collisionPadding","onOpenAutoFocus","NOTES_MAX_LENGTH","ResolutionNote","layoutClassName","synchronizedNotes","getItemLastNote","note","setNote","updateNote","debouncedSetNoteSynched","debounce","setNoteSynched","showNotification","hideNotificationById","interactionStateConnector","useInteractionStateConnector","subscription","dispenser","subscribe","onNoteUpdated","newNote","unsubscribe","event","notes","validatedNotes","tags","notes_length_error_text","String","substring","handleBlur","evt","TextAreaField","textAreaClassName","write_a_note","useFavoriteTimeZoneInitializer","additionalOnInitializeHandler","allTimezones","useAllTimezones","favoriteTimezones","useFavoritesTimezones","timezonesMethods","useTimezonesStateMethods","activeInteraction","useInteraction","suggestedTimezone","get","suggestedTimezoneData","find","tz","suggestedTimeZoneId","addToFavorites","rescheduleDateFormat","CallProblemModal","input","isHTMLInputElement","selectedOption","setProblem","onClose","other","reportProblemItem","itemIsAfterCallWork","isAfterCallWork","CALL_DETAILS_FORM","rcp_option_poor_voice","rcp_option_silent","rcp_option_dropped","disabled","rcp_option_other","interactionStepId","getInteractionStepId","problem","Modal","size","aria-labelledby","role","rcp_heading","SmForm","Radio","name","SemanticButton","tooltip","WINDOW_POPUP_TITLES_AND_MESSAGES","window_buttonCancel","enabledInOffline","button_call_problem_report_label","getLink","code","RescueModal","onLinkPaste","noop","getErrorText","errorCode","ERROR_MESSAGES","rescue_modal_no_tech_console_running","rescue_modal_unknown_error","useRescueState","pinCode","useRescueStateMethods","requestPinCode","links","desktop","mobile","handleGenerateNewPinClick","handleDesktopPaste","handleMobilePaste","REMOTE_ASSIST_DIALOG_BOX","remote_assist_heading","styles","SmMessage","table","tbody","tr","td","remote_assist_paste_into_chat_text_desktop","a","href","rel","IconInsert","remote_assist_paste_into_chat_text_mobile","remote_assist_manual_url_text","remote_assist_manual_url_address","SmButton","basic","remote_assist_create_another_pin_button","window_buttonClose","useOpenRescueModal","useModalComponentOpener","TimezonesModal","searchString","setSearchString","selectedTimezoneId","setSelectedTimezoneId","filteredTimezones","useTimezonesState","fullName","indexOf","selectAndClose","timezoneSearchChangeHandler","HTMLInputElement","filteredTimezonesCallbacks","onDoubleClick","window_timezones_heading","InputField","window_timezones_filter_label","window_timezones_filter_placeholder","IconCheck24","Button","variant","window_buttonSelect","useTimeZonesModalOpener","openTimezonesModal","useOptions","favoriteTimeZones","slice","ftz","Math","abs","timezone","SHOW_MORE_TIMEZONES","TimeZoneDropdown","selectedTimeZone","openFullTimezonesList","useHandleChange","SelectField","CALENDAR_EVENT_FORM","show_timezones_label","initialState","date","timeFrom","timeTo","phoneOn","rescheduleTimeFormat","dispositionRescheduleDatetimeFormat","convert","serverFormToClient","rescheduleFrom","reschedulePhone","rescheduleTimezone","rescheduleTo","formState","formatDate","clientFormToServer","currentState","rescheduleData","dateFrom","convertToDayjs","dateTo","add","isAfter","isValid","format","phoneToOption","phone","DispositionRescheduleForm","syncedFormState","getItemDisposition","setFormState","setDispositionReschedule","RESCHEDULE","rsc_afternoon","getDateAndTime","newTime","newDate","addTime","Date","getHours","rsc_evening","rsc_tomorrowMorning","rsc_tomorrowAfternoon","rsc_tomorrowEvening","rsc_in1hour","rsc_in2hours","useRescheduleFormOptions","activeItemNumber","getPhoneFromItem","suggestedPhones","uniq","displayData","number","truthy","suggestedPhoneOptions","setSuggestedPhoneOptions","suggestedPhoneOptionsRef","useAsRef","onDispositionRescheduleUpdated","innerItemId","data","s","setRescheduleFormState","rescheduleForm","handleInitializeFavoriteTimeZone","firstSuggestedPhone","selectTimezone","timezoneId","timezoneData","selectedTimezoneData","mOffset","Number","standardOffset","isNaN","updatedState","setSyncedFormState","handleDateChange","_evt","Error","handleTimeFromChange","handleTimeToChange","handlePhoneOnChange","optionsCallbacks","handleDateTimeBlur","fieldName","_","handleDateBlur","partial","handleTimeFromBlur","handleTimeToBlur","smallPickerClassName","h3","reschedule_call","TriggerDropdown","button","isOpened","Tooltip","show_date_suggestions_label","next_call_date","DateInput","getLongDateFormat","dateFormat","closable","animation","popupPosition","localization","navigator","language","label_date","TimeInput","toUpperCase","timeFormat","time_from_label","to","time_to_label","time_zone","SearchableSelectField","allowCustomValue","phone_number_label","useRescheduleFormState","getItemState","sessionData","useSessionState","useCalendarStateMethods","saveCalendarEventDetails","submittingState","setSubmittingState","closeModalAfterSuccessTimeoutRef","userId","firstName","lastName","displayNameFormat","openInteractionSlidingModal","useOpenInteractionSlidingModal","showRescheduleModal","useShowSlidingModalChecker","activeItemId","getEmptyItemUIState","remindIn","remindInUnit","completed","contacts","newRescheduleForm","clearTimeout","useContactsStateMethods","getContact","saveWorkItemContact","contactData","createContact","phoneType","PhoneTypes","contactId","phoneId","phones","then","catch","err","console","useContactRecordInitializer","_e","handleContactRecordChange","darft","splice","handleContactNameChangeFactory","handleContactPhoneChangeFactory","handleContactPhoneTypeChangeFactory","handleContactCreateContactChangeFactory","handleContactPhoneIdChangeFactory","handleRemindAmountChange","handleRemindUnitsChange","handleCompletedCheckboxChange","handleTitleChange","handleNotesChange","handleTimeZoneSelect","dateFromFormatted","dateToFormatted","handleCancelClick","handleSubmitClick","params","currentRescheduleForm","dateFromInner","dateToInner","startTime","valueOf","endTime","globalInteractionId","getGlobalInteractionId","serviceId","getServiceId","firstContact","workitemData","listLinkId","listRecordId","screenPopUrl","screenPopData","web","url","screenPop","action","URL","popup","popUponAnswer","keepPopupOpenAfterFinish","secondaryUrls","salesforce","object_id","contactRecord","addPhone","addresses","addressLine1","addressLine2","rest","address_line1","address_line2","alerts","calendar_phone","company_id","companyId","company_name","companyName","contact_type","create","dob","emails","email_address","emailAddress","first_name","last_name","segment","web_url","webUrl","_id","Id","oid","email","screenpop","JSON","stringify","screenpopSize","serviceName","getServiceNameFromItem","userName","formatFullName","rescheduleFormStateToPostCalendarEventParams","handlers","contactHandlersFactories","OTHER_PHONE_OPTION_VALUE","ContactPhonesDropdown","contact","contactHandlers","useFormatting","formatPhoneType","contactPhones","formatPhone","useContactPhoneOptions","contact_on_label","control","Dropdown","handleContactPhoneIdChange","OtherPhoneFormGroup","Object","values","handleContactPhoneChange","SmInput","handleContactPhoneTypeChange","ExistingContactRecord","useContactsState","getAvatarUrl","useGetAvatarUrl","avatarUrl","SmSegment","isLoading","Loader","color","active","AvatarLegacy","NonExistingContactRecord","handleContactNameChange","contact_name_placeholder","contact_create_box_label","handleContactCreateContactChange","ContactRecord","ContactRecords","CompletedCheckBox","interaction_state_completed","Reminder","amountValue","unitsValue","handleAmountChange","handleUnitsChange","time_units_minutes","time_units_hours","time_units_days","label_reminder","selection","RescheduleDateTimeBlock","date_from_label","label_time","date_to_label","RescheduleForm","dateTimeState","every","identity","useCurrentDatesInitializer","IconSuccess","event_title","button_save_text","button_cancel_text","label_timezone","SmTextArea","label_note","useShowDispositionRescheduleForm","activeItemIsWorkItem","isWorkItem","isWorkitemCall","dispositionType","useServicesDispositionsState","dispositionsData","selectedDispositionData","useSelectedDispositionType","Resolution","useDispositionsSettings","useDispositions","showDispositionRescheduleForm","linkUrl","searchParams","append","location","hostname","CURRENT_DOMAIN_AUTH_URL","toString","DOMAIN_AUTHORIZATION_MODAL_ID","linkClass","EXTENSION_ID","EXTENSION_ID_FF","PLUGIN_ID","ModalContent","isExtAvailable","install","INSTALLATION_PROCESS","useInstallationMethods","installChromeExtension","installFirefoxExtension","installBPClientPlugin","chromeLink","document","getElementById","firefoxLink","pluginLink","addEventListener","removeEventListener","i18n","install_updateHeader","platformInfo","install_installHeader","install_installHeaderChrome","install_installHeaderFirefox","dangerouslySetInnerHTML","__html","browserName","serverOrigin","isChrome","isFirefox","isSafari","linkHref","URL_EXTENSION_INSTALLER_CHROME","URL_EXTENSION_INSTALLER_FIREFOX","URL_MAC_PLUGIN","bp_client_old_extension_version","br","bp_client_update_extension_part1","bp_client_update_extension_text","bp_client_update_extension_part2","reloadPage","reload","PHONE_OUT_OF_SERVICE_ERROR_DELAY","useInteractionNotifications","emiData","getMsTeamsError","errorText","incomingEMIErrorMessageCodes","msteams_access_token_error_message","communicator_msteams_refresh_token_expired_error_message","msteams_disabled","communicator_msteams_reset_by_admin_message","msteams_user_deleted","msteams_unsufficient_privileges","msteams","errorMessage","onItemCompleted","isCallWithoutCallId","notification_callWithNoAnswer_networkProblem","getTime","useFailedCallNotification","useAgentState","notReadyReason","stateSetDate","systemNotReadyReasons","updateNotification","noAnswer","time","notification_agentInNotReadyNoAnswer","useInteractionNotAcceptedNotification","phoneDeviceIn","device_detected","duration","device_empty","showDelay","usePhoneDeviceNotDetectedNotification","useSessionStateMethods","startPhoneTypeSelection","phoneTypeErrorCode","AUTHORIZATION_DIALOG_LABELS","auth_message_undefinedExtension","usePhoneTypeErrorNotification","reservedForIncomingInteraction","isLoggedIn","callback_reservation_header","useReservedForIncomingInteractionNotification","interactionChatStateConnector","useInteractionChatStateConnector","onWebRtcError","chat_web_rtc_invalid_ice_server","chat_web_rtc_answer_timeout","chat_web_rtc_only_1_call_simultaneously","useWebRtcCallInChatErrorNotifications","favoritesStateConnector","useFavoritesStateConnector","FAVORITES","onLimitReachedError","favorites_limit_reached_error","useFavoritesLimitReachedError","useSystemNotifications","bpClientConnector","useModalsStateMethods","openModal","closeModal","onShowDomainAuthorizationDialog","onHideDomainAuthorizationDialog","showOfflineAlert","offlineErrorMessages","isOffline","useBpClientStateConnector","bp_client_not_authorized_header","body","bp_client_not_authorized_message_part1","domainAuthentificationErrorAnchor","bp_client_not_authorized_message_part2","actions","closeThisModal","window_buttonOk","isExtensionAvailable","useBpClientState","onInstallationRequired","window_title_warning","ok","useInstallationRequiredPopup","useOfflineStateMethods","setShowOfflineAlert","useOfflineStateDataShowOfflineAlert","useOfflineErrorMessages","useIsOffline","onHide","onShowExtensionIsOldDialog","useOutdatedBrowserExtensionPopup","isClientOutdated","useAppConfigState","reload_confirm_new_msg_part1","reload_confirm_action_button_text","reload_confirm_new_msg_part2","useOutdatedClientNotification","sessionStateConnector","useSessionStateConnector","isHelperAppInstanceCreated","onUpdateCapabilities","caps","canDial","bpLogger","window_messages_virtual_phone_not_available","window_messages_phone_not_available","window_messages_helper_app_not_available","onServerError","phoneIsNotRegistered","onThreePCCServerGone","window_messages_3pcc_server_connectionLost","onThreePCCServerReady","usePhoneOutOfServiceNotification","sipServer","prevSipServerRef","usePreviousValueRef","useSipServerDisconnectedNotification","checkConnectionSpeed","fetch","method","cache","finally","slow_connection","interval","setInterval","clearInterval","useSlowNetworkNotification","isDomainAuthorized","domain_authentication_error_part1","domain_authentication_error_part2","useUnauthorizedDomainNotification","AuthorizedConnectorsConsumers","baseConnectors","authorizedConnectors","children","ForceLogout","forceLogoutInfo","closeForceLogout","loggedOutBy","loggedOutTime","timestamp","padded","isOpen","aria-describedby","window_title_information","incomingErrorMessageCodes","sessionWasOverwritten","forcedLogout","account_has_been_disabled","forceLogoutReason","getContent","UnauthorizedUI","tabRole","useCurrentTabRole","authChecked","showLoginDialog","offerForceLogin","showAppLoader","showLoginPage","showForceLogout","showForceLogin","LoginPage","ForceLogin","AuthorizationUIRouter","AuthorizedProviders","BaseConnectorsConsumers","BaseConnectorsConsumer","TopLevelProviders","app","platformSpecific","BaseProviders","NotificationsStateProvider","AuthorizationModule","appRemoteName","AppStyleSelector","defaultState","isAttachmentsListReady","getAttachmentsList","addAttachment","removeAttachment","clearAttachmentsList","initializeAttachmentsList","fileRejections","setFileRejections","useAttachmentsState","uploadFile","handleError","getFormData","attachments","setAttachments","pendingRequestsCancelersRef","requestQueueRef","pendingAmount","getCanceler","attachmentsGroupId","removeCancelers","removeCanceler","cancelCurrentRequest","cancel","attachmentsRef","sessionId","domain","loginId","updateAttachments","setter","currentAttachments","updatedAttachments","removeRequestFromQueue","addNewAttachment","newAttachment","uuid","castDraft","updateAttachment","attachment","processNextRequestQueueItem","queue","file","canceler","shift","FormData","tenant","token","user","fileName","fileType","onSuccess","fileData","onError","errors","removeAttachmentsList","attachmentsList","generateUrl","attachmentId","no_disposition","query","keys","join","useAttachmentLink","attachmentGroupId","attachmentsData","getFilesPromises","getFileFromUrl","Promise","all","files","ChatAttachmentsUIContext","createContext","bodyFormData","ChatAttachmentsUIStateProvider","useUploadChatFile","useOnItemRemoved","Provider","createUIStateSelectorHook","useChatAttachmentsUIState","EmailAttachmentsUIContext","useEmailAttachmentsUIState","mapChannel","channel","chat_type_sms","chat_type_web","chat_type_telegram","chat_type_line","chat_type_twitter","chat_type_facebook","chat_type_wechat","chat_type_nexmo","chat_type_viber","chat_type_whatsapp","chat_type_remote_assist","initialOption","useChannel","channelOptions","chatActiveItem","raItems","useNonAssertedInteractionId","useAssociatedChatInteraction","services","allOutboundChatChannels","outboundChatChannels","useDIDNumberState","selectedDIDNumber","useServiceState","selectedService","useRemoteAssistState","itemChannel","getChannel","itemService","messengers","getMessengers","originalChannel","externalChatData","raSessionActive","clientState","contactExists","localizedChannelOptions","itemChannelOption","addOption","flow","property","addOriginalChannelOption","outboundChannelAvailable","service","isCall","outboundChannels","isChatService","filterOutboundOptions","openChannel","useOpenChannel","selectedChannel","setSelectedChannel","selectedPhone","setSelectedPhone","getSelectedChannel","getSelectedPhone","selectCurrentItemChannel","channels","resetChannel","resetSelectedChannel","touchedState","setTouchedState","isTouched","setIsTouched","useOnLogout","resetTouched","setSelectedChannelImpl","contextName","throwNoProviderError","ChannelStateContext","ChannelStateProvider","channelState","useChannelState","useContext","useLinkOpener","useScreenPopStateMethods","addTabs","browserTabInfo","useBrowserTabMetaInfo","appType","saveOpenedSuggestionUrl","suggestion","suggestionURL","openURLIn","tabId","msgId","formatHTMLAsOneLineString","window","normalizeExternalURL","isChatMessageDate","isHistoryMessage","isActivityMessageGroup","displayType","isChatMessage","isVoiceTranscriptMessage","voiceTranscriptMessageTypes","isExternalChatMessageDate","isVoiceTranscriptSuggestion","isCallOrVoiceTranscript","mediaType","isHistoryCallMessage","isScrollAtBottom","scrollNode","scrollTop","clientHeight","scrollHeight","getMessageId","msg","chatMessageData","getExternalChatMessageId","partyId","isExternalChatMessage","getActivitiyMessageGroupMessageId","getExternalChatMessageDisplayType","getScenarioMessageId","geHistoryMessageId","findFirstVisibleItemWithOffset","startIndex","messages","offset","offsetTop","getFileErrors","getFileNameAndExtension","extension","CHAT_PROHIBITED_EXTENSIONS","ErrorCode","EXTERNAL_CHAT","invalid_file_extension_error","getFileRejection","activityToChatMessage","selfUserId","activity","parties","activityMessages","party","partyType","userParty","createdTime","isSelf","partyUserShortTypeToActivityMessageGroup","getDispositionTitle","disposition_message_title","VOICE_CALL","getHtmlMessageText","htmlContent","messageTextElem","createElement","innerHTML","style","opacity","position","display","zIndex","elementText","innerText","remove","getExternalChatMessageDisplayName","users","isErrorExternalChatMessage","getExternalChatFileData","fileId","fileError","fileIsMasked","fileProgress","refMsgId","isHistoryFileMessageMessage","getGroupChatAvatar","chatData","p2pUser","session","members","avatarType","isAgent","getTeamChatAvatar","avatar","member","m","constructUserPictureUrl","getP2PChatAvatar","isOnline","presenceState","onlineStatusIcon","getUserStatusIcon","ChatMessagesContext","hasSelection","setHasSelection","selectedMessages","getClipboardBuffer","setClipboardBuffer","scrollContainer","ChatMessagesContextProvider","clipboardBuffer","setSelectedMessages","firstSelectedMessageRef","interactionChanged","useValueUpdated","useEventListener","MouseEvent","lastSelectedMessageId","getNearestMessageId","firstSelectedMessageIndex","lastSelectedMessageIndex","indexes","sort","b","getSelection","range","rangeCount","getRangeAt","forwardSelection","firstElement","lastElement","startElement","endElement","setStartBefore","startContainer","setEndAfter","endContainer","setBaseAndExtent","startOffset","endOffset","mouseDownHandler","onMouseDown","useChatMessages","useContextSelector","useChatSelectedMessages","useChatGetClipboardBuffer","useChatSetClipboardBuffer","useChatScrollContainer","closest","Node","parentElement","getAttribute","MessageAction","buttonProps","useGetFormattedClipboardMessage","useUserDetailsState","interaction","sessionUser","messageData","callParty","chartParty","chatParties","party_id","messageText","full","disposition_message_service_name","getDispositionText","userOrContactName","page","external_chat_customer_navigates_to","isMissedCall","ACTIVITY_HISTORY","call_message_missed","call_message_incoming_text","call_message_outgoing_text","getHistoryOrChatMessageText","getMessageData","getRangeMessageId","commonElement","commonAncestorContainer","nodeType","ELEMENT_NODE","getCommonAncestorElement","getElementMessageId","messageElement","uniqueMessageIdSelector","messageId","maskSelectedHistory","fragment","extractContents","tempSpan","getFragmentWithinSpanNode","Mask","createDocumentFragment","childNodes","node","appendChild","insertNode","maskSelectedText","maskedTextChunks","updatedMaskedTextChunks","extendUnmasked","unmaskedSpan","revealUnmasked","classList","unmaskedText","originalText","maskedText","nodeCopy","cloneNode","isMasked","isAnchorTag","contains","nodeName","html","htmlClone","revealUnmaskedInner","htmlInner","textChunkId","unmasked","stringToHTMLFragment","replaceWith","htmlElement","equalUniqueMessageId","id1","id2","composedMessageUniqueId","composedChatMessage","getMaskedText","uniqueMessageId","getMessageTextElement","WithUnmaskAction","unmaskPopupWrapperRef","popupRect","setPopupRect","unmaskChunkId","setUnmaskChunkId","unmaskMessageId","setUnmaskMessageId","maskedMessageNodeRef","useInteractionChatStateMethods","maskMessage","masked","useInteractionChatDataSelector","togglePopup","maskedMessageNode","isHTMLElement","unmaskElementMessageId","getBoundingClientRect","toggleShow","unmaskPopupWrapperNode","handleUnmask","messageToUnmask","unmaskedTextChunk","textChunks","unmaskedTextChunkHTML","coordinates","top","y","left","x","Popup","show","placement","contentClassName","data-visible","onClickOutside","mountNode","IconUnmask","EMAIL","button_unMaskSelectedText_text","WithSelectionActions","withMaskAction","getPopupContent","withMask","privileges","updateActivityHistoryMessageText","getFormatClipboardMessage","isCommunicator","useIsCommunicator","setKBFloatingState","useMainPageUIState","useKbBridgeMethods","setupInteractionKB","selectedText","selectionData","selectedMessage","handleSearchKnowledgeBaseClick","IconKnowledgeBase","search","CAN_MASK_INTERACTION_CONTENT","maskedMessageBeforeMasking","maskActivityHistoryMessages","getContactId","masking_failed_error_message","getErrorMessage","selectedMessageNode","updatedTextChunks","IconMask","mask","textToCopy","textToAddToCopyBuffer","res","info","clipboard","writeText","IconCopy","copy","newClipboardData","IconAddToCopy","add_to_copy","useSelectionActions","onSelectionChange","WithSelectionPopup","popupContentClassName","ChatMessagesSelectionActions","WithAttachmentMaskAction","canMask","maskFile","itemContactId","isActiveChat","toggleFileMask","fileIds","activity_history_file_masking_error","useFileMasker","useActiveChatChecker","unmask","WithHoverOverActions","triggerHtmlProps","getFormattedClipboardMessage","handleCopyToClipboard","result","handleAddToClipboard","container","collisionBoundary","side","align","hideWhenDetached","useBotSuggestions","botSuggestionSelector","createSelector","associatedItems","getAssociatedItems","flatMap","innerItem","botSuggestions","selectBotSuggestions","useInteractionStateSelector","useBotSuggestionsByType","voice","isChat","chat","selectBotSuggestionsByType","predefinedMessagesSearchAtom","atom","predefinedSearchInsertPositionAtom","chatPopupContentAtom","attachmentButtonElementAtom","UploadErrorModal","handleClose","onCloseCallback","rejection","totalFilesAmount","attachmentButton","useAtomValue","errorMessages","r","CHAT_CENTER","upload_failed","InlineAlert","failed_to_upload","mimeTypeToExternalChatFileType","AttachmentUI","isFailed","select_files","useInitiateChatByAttachment","chatItem","hideNotificationsByTag","contactMessengers","errorValidation","useErrorValidation","initiateChat","associatedChatServiceId","getAssociatedChatServiceId","address","messenger","getServiceAndDIDNumbersErrors","didNumber","interactionType","getChannelError","accessNumberId","origination","Dropzone","dragCounterRef","onDragEnter","onDragLeave","useShowChecker","onDrop","useInteractions","shouldInitiateChat","isPotentialInteraction","acceptedFiles","useOnDrop","useDropzone","validator","getRootProps","getInputProps","openUploadErrorModal","acceptedFilesLengthRef","drop_files_here","drag_and_drop_subtitle","useFirstUnreadMessage","useInteractionChatData","first","isRead","ScrollToFirstUnreadBadge","unreadMessagesClicked","setUnreadMessagesClicked","scrollAtBottom","setScrollAtBottom","scrollerApi","useInteractionUIChatScrollerApi","firstUnreadMessageId","onNewMessage","newMessage","item_id","scrollAtBottomThrottled","throttle","handleClick","scrollTo","transparent","unread_messages_button_text","SmIcon","useKeyDatesInserter","getTimestamp","additionalConditions","messagesArray","currentTime","nextTime","areSameDays","formatChatDate","useActivitiesMessagesTillCreatedTime","latestCreatedTime","activitiesMessages","activitiesListByContactId","useActivitiesState","useActivitiesStateMethods","getActivitiesList","activitiesList","useActivitiesAsMessages","finalLatestCreatedTime","useMessagesList","messagesList","addUserId","partiesList","getChatParties","currentParty","user_id","maskedMessage","updatedMessage","localizeSystemMessage","eventType","needLocalization","partyName","qmMode","external_chat_party_coaching","msgHasDisplayTypes","displayTypes","useNormalizedChatMessages","normalizedChatMessages","normalizedMessage","CallMessageVoiceTranscript","voiceTranscriptMessage","contactName","nonContactName","sanitizedText","useChatMessageSanitizer","messageHTML","useInnerHTML","section","endTimestamp","TranscriptDropdown","contentVoiceTranscript","isOpenModal","transcriptOptions","handleCloseView","openGlobalSlidingModal","useOpenGlobalSlidingModal","closeGlobalSlidingModal","useCloseGlobalSlidingModal","iconClassName","handleOpenViewTranscript","handleCloseViewTranscript","optionName","close_transcript_option","view_transcript_option","renderIcon","IconViewTranscript","download_transcript_option","IconDownloadTranscript","useTranscriptOptions","modal","onFocus","ButtonIcon","call_message_collapse_voice_transcript","call_message_expand_voice_transcript","IconTranscriptOptions","CallMessageRecording","hasVoiceTranscript","recordingLink","sentiment","ariaLabel","containerClassName","audioPlayerClassName","hasVoiceRecording","voiceTranscript","useContentVoiceTranscript","renderTranscriptDropdown","data-missed","IconMissedCall16","aria-hidden","IconInteractionCall","call_message_duration_aria","Sentiment","call_message_created_time_aria","AudioPlayer","isNewAudioPlayerUI","src","skipUnmount","playerGroupTag","CHAT_VOICE_RECORDING_PLAYER_GROUP","pauseGroupWhenPlaying","renderOptionalNode","EmptyCallMessage","CallMessageContent","call_message_incoming_aria_label","call_message_outgoing_aria_label","EmailMessage","caseId","caseNumber","caseTitle","setActivePage","useNavigationState","AppRoutes","RemoteAssistMessage","privateIp","publicIp","osVersion","durationValue","getMomentUTC","privateIpValue","remote_assist_empty_private_ip_display_value","publicIpValue","remote_assist_empty_public_ip_display_value","osVersionValue","remote_assist_empty_os_version_display_value","IconRemoteAssistSession","remote_assist_title","remote_assist_duration_label","remote_assist_os_version_label","remote_assist_private_ip_label","remote_assist_public_ip_label","activityHistoryToHistoryMessageReducer","call","formatCallDuration","counterpartDuration","selfUser","wasMissedByParty","partyFailureCause","transcript","total","isTranscriptMessage","omit","getHistoryChatMessage","confidence","sentimentScore","getSentimentFrom","getHistoryVoiceTranscriptMessage","getHistoryCallMessage","isMessage","isFile","now","getHistoryFileMessage","isEmail","getHistoryEmailMessage","isRemoteAssistSession","selfAgent","lastAgent","toSorted","user1","user2","agent","getHistoryRemoteAssistMessage","mapActivityToActivityHistoryItems","notUndefined","v","partyData","pickBy","fulfillMessages","activityItem","nickName","useNormalizedHistoryMessages","activityHistory","activities","previousActivity","previousActivityData","activityHistoryItem","activityHistoryMessages","previousActivityMessages","next","defaultBotSuggestions","filterMessagesByTypeAndStartTime","allowMessage","predicate","cleanKeyDates","lastIndex","filterReducer","useMessagesLoader","fetchMore","contactActivityHistoryRef","useActivityHistoryByContactId","getMessagesRef","useContactActivityHistory","getMessages","reachedLimitByMedia","chatTypeToMedia","resolve","useFetchMoreExternalMessages","hasActiveRequest","errorsCountRef","fetchData","NoMessages","allActivityHistoryLoaded","useExternalActivityHistoryLoaded","searchForOlder","activityHistoryIsLoading","INTERNAL_CHAT","chat_history_no_recent_found","chat_history_no_recent_while_loading","chat_history_search_for_older","NoMessagesPlaceholder","avatarClassName","MessageAvatar","isScenarioAvatar","isConference","showUserAvatar","getUserPictureUrl","useGetUserPictureUrl","split","Avatar","MessageContent","isError","combinedClassName","SelectionItem","data-message-id-selection","focusOnSelection","touchedOnly","WithTopInfo","isOutgoing","isSystemMessage","sendTime","showTime","showName","siblingClassName","IconRobot","system_message","WithOptionalNameAndAvatar","callUsers","isFullWidth","messageClassName","withoutBorder","isLink","isActivityGroup","isNotes","isDisposition","isHistory","isTextMessage","isCallConference","isCustomMessage","isScenario","isScenarioMessage","finalDirection","finalUserId","messageItemClassName","data-disposition","data-email","data-error","data-file","data-incoming","data-link","data-notes","data-outgoing","data-remote-assist-session","data-text-message","dotStyles","DotsTransforming","TypingIndicator","typingParty","display_name_placeholder","agent_is_typing","party_is_typing","replace","TypingParties","rangeRef","messagesRef","bottom","typingParties","getTypingParties","hasTypingParties","lastRenderedItem","endIndex","lastMessageIndex","isLastMessageRenderedRef","behavior","block","VirtualizedMessages","renderMessage","useInteractionUIItemStateSetter","virtuosoRef","initialRender","ChannelIcon","getChannelImageIcon","loadMoreMessages","scrollToLast","scrollToIndex","messagesPrevRef","messagesLengthChanged","useLayoutEffect","useSaveScrollPositionEffect","initialScrollPosition","setInteractionUIState","firstUnreadMessageIdRef","topItemRef","useInteractionUIChatTypeTopItemId","tabTopItemId","useInitialScrollPosition","generateMessageKey","_index","channelTitle","renderHeader","virtuosoComponents","Header","Footer","setListRange","onHeightChange","height","debouncedOnHeightChange","onTopStateChange","atTop","messageRenderer","Virtuoso","followOutput","itemContent","computeItemKey","atTopStateChange","initialTopMostItemIndex","customScrollParent","components","rangeChanged","totalListHeightChanged","increaseViewportBy","MessageTopInfo","gapBeforeTime","finalGapBeforeTime","default","data-value","ErrorMessage","DispositionMessage","messageContentClassName","rowMessageClassName","IconACWDisposition24","disposition_title","disposition_message_name","NotesMessage","IconAgentNotes","agent_notes_title","ActivityMessageGroup","dispositionTitle","useDispositionTitle","Message","closeButton","isHtml","iconSrc","transcriptMessage","isSuggestion","botSuggestionIcon","isCurrentChatTranscriptMessage","smsIcon","whatsappIcon","facebookIcon","lineIcon","telegramIcon","twitterIcon","viberIcon","webChatIcon","wechatIcon","getTranscriptMessageIcon","openLink","bubbleElement","onClickCapture","Svg","parseTranscriptLinksAsHTML","parsedUrl","chatMessageToVoiceTranscript","BotSuggestion","isHTMLSuggestion","isLinkSuggestion","DateMessage","useMarkAsReadVisibilitySensor","isDIDChat","itemInteractionStepId","itemGlobalInteractionId","historyMessageGlobalInteractionId","pageIsVisible","usePageVisibility","markMessageAsRead","markPersonalMessageAsRead","unreadActivityHistory","useInteractionChatStateSelector","unreadPersonalMessages","visibilitySensorIsActive","useIntersectionObserver","root","enabled","isIntersecting","markAsRead","visible","AttachmentFileMessage","attachmentRef","fileLink","Attachment","link","withDownloadButton","AudioFileMessage","showDownloadButton","ImageFileMessage","senderName","htmlImageProps","useEscapeManager","Dialog","img","alt","IconClose24","FileMessageContent","markAsReadData","queryString","paramsToQueryString","requestUrls","fileIsLoading","FileProgress","progress","attachmentText","chat_removedAttachment_label","del","FileMessage","isAudioFile","InviteMessage","inviteId","removeInviteFromChat","useHandleCancelInviteClick","data-invitation","external_chat_party_inviting","negative","LocationMessage","latitude","longitude","googleMapsUrl","SmImage","iconLocation","location_message_icon_tooltip","as","OutboundMessagingCampaignMessage","serviceAddress","topInfo","sanitizedMessage","messageInnerHTML","data-outgoing-campaign","IconOutboundCampaign","PageLinkMessage","useContact","useActiveInteraction","contact_id","displayNameContact","externalChatName","displayNameText","IconSendInvitation","navigate_to","Link","VoiceTranscriptConfidence","h","rgb","floor","round","hsv2rgb","backgroundColor","confidenceGrade","confidencePercentage","call_message_transcript_confidence_high","call_message_transcript_confidence_medium","call_message_transcript_confidence_low","data-confidence-low","data-confidence-medium","data-confidence-high","PlainMessage","interactionItemId","isHistoryVoiceTranscriptMessage","allowedAttributes","CHAT_MESSAGE_ALLOWED_ATTRIBUTES","allowedTags","CHAT_MESSAGE_ALLOWED_TAGS","chatSentimentsOn","useChatSentimentsOn","data-message-id","data-global-interaction-id","useGetTextContentSystemMessage","getTypeReceivedData","useGetTypeReceivedData","external_chat_party_coaching_new","received","external_chat_file_sent_new","SystemMessage","getTextContentSystemMessage","getSystemMessageIcon","IconJoin","IconLeaveParty","data-system","ExternalChatMessage","serviceType","isHistoryOutboundMessagingCampaignMessage","isHistoryEmailMessage","isSystemExternalChatMessage","isInviteExternalChatMessage","isLocationExternalChatMessage","isHistoryRemoteAssistMessage","ErrorBoundaryFallback","VirtualizedExternalMessages","scenarioData","isDID","data-message","ErrorBoundary","fallback","ExternalMessages","setScrollNode","useInteractionUIChatType","botSuggestionsByType","typeToMediaFilter","calls","insertKeyDates","normalizedHistoryMessages","activityCreatedTimeByMedia","filteredByTypeMessages","orderBy","messagesWithDates","useNormalizedMessagesWithDates","itemIsACW","itemsIds","isSelectableMessage","itemsIdsRef","itemsProvider","onItemSelect","selectionOrigin","SelectionContainer","startFrom","itemsListProvider","searchResult","setSearchResult","showBotSuggestions","toggleBotSuggestions","showSMS","toggleSMS","showTranscript","toggleTranscript","VoiceTranscriptUIContext","VoiceTranscriptStateProvider","contextValue","useVoiceTranscriptUIState","Filters","messagesContent","searchLocal","setSearchLocal","highlightIndex","setHighlightIndex","setDebouncedSearch","innerValue","filteredResults","entries","marksCount","reverse","markers","handleHighlight","handleSearch","SearchField","search_transcript","SearchResultsSwitcher","VOICE_TRANSCRIPT","bot_suggestion_btn_tooltip","IconIntentFilled","sms_btn_tooltip","IconMessageExternal","transcript_btn_tooltip","IconVoiceTranscript","useVoiceTranscriptVisibleMessages","chatMessages","chatMessage","ChatMessage","restProps","SearchResultHighlight","highlightedMarkElem","markElement","data-message-highlight","VirtualizedVoiceTranscriptMessages","isHTML","emptyChatMessages","emptyTranscript","emptySuggestions","VoiceTranscript","filtersClassName","visibleMessages","normalizeByUrlParser","parsedText","highlightHTML","textToHighlight","RegExp","escapeRegExp","useVoiceTranscriptMessagesContentMap","VoiceTranscriptMessages","callItem","getAssociatedCallItem","ChannelSelector","useAssociatedChatInteractionProp","phoneNumber","itemHasMultiplyPhones","hasMultiplyPhones","defaultChannel","getChannelWhenMultiplyPhones","test","currentItemTouched","useInitializeDefaultChannelEffect","SelectedIcon","finalDisabled","onEscapeKeyDown","renderChannel","Icon","data-selected","aria-selected","PhoneOption","CircleButton","IconArrowDown8","TEXT_AREA_DATA_ID","ChatTextArea","currentMessage","handleKeyDown","isExternalChat","sendCurrentMessage","partyWithoutAddress","itemKind","dependencies","timerValue","setTimerValue","isTyping","setTyping","isSending","setSendingValue","sendAgentIsTyping","sendAgentIsNotTyping","currentTimerValue","timeout","useAgentTypingDetect","isSmsChannel","startsWith","useAttachmentsList","sendButtonDisabled","trim","contentEditableRef","hasMultipleLines","setHasMultipleLines","contentEditableROEntry","useResizeObserver","lineHeight","parseFloat","getComputedStyle","computeHeight","useHasMultipleLines","AttachmentsList","attachmentsListGroupId","ContentEditable","message_input_placeholder","plainTextOnly","data-id","send_message_btn_tooltip","IconSendFilled","InvisibleAttachButton","buttonElementAtom","setAttachmentButtonElement","useSetAtom","handleUploadFiles","getFilesFromEvent","getLocalizedFileError","fileRejection","validFiles","not","addFilesToAttachmentsList","useDidUnmount","onFileClick","selectFiles","innerButtonElement","setInnerButtonElement","InvisibleAttachButtonWithInput","HTMLButtonElement","onFileInputClick","isDisabled","InvisinbleAttachButtonUI","withFileInput","useAtom","chatPopupContent","setChatPopupContent","predefinedSearchInsertPosition","setPredefinedSearchInsertPoisition","predefinedMessagesSearch","setPredefinedMessagesSearch","sendMessage","addMessageToPending","sendFile","didNumbers","useDidState","associatedCallsNumber","callData","incoming","fromNumber","destination","sameNumberWithAssociatedCall","isOutboundInteraction","callHasSmsDIDNumber","isSMS","associatedChatService","setCurrentMessage","setMessage","resetCurrentMessage","sendCurrentPotentialMessage","sendCurrentExternalMessage","condenseNewLines","tryToParseCommandsInCurrentMessage","words","chat_channel_invite_bad_format","inviteChannel","messengerTypes","chat_channel_invite_unknown_messenger","messageErrors","getMessageErrors","handleSelectPredefinedMessage","moveCursorToTheEnd","setCursorPosition","exitPredefinedMessages","textareaElement","cursorPosition","getCursorPosition","shiftKey","ctrlKey","handleTextareaChange","el","updateMessage","textAreaSelector","getMessage","textAreaNode","dataToAdd","offsetToFocus","nodeToFocus","selectionNodeInner","selectionOffset","textContent","selectionInner","differentNodesSelected","getFirstNode","getLastNode","textSelected","getSelectionStartIndex","getSelectionEndIndex","Selection","selectionNode","selectionElement","TEXT_NODE","textAreaSelected","setNodeAndOffsetToFocus","deleteSelected","requestAnimationFrame","keepCursorAtTheCurrentPosition","lastChild","setCursorToTheEnd","createRange","setStart","setEnd","removeAllRanges","addRange","useMessageUpdater","useControlsOptions","commandButton","openKB","IconSentimentGood","add_emoji","shortcut","IconAttachment","IconPredefinedMessage","predefined_messages","knowledge_base","getChatMessagesElement","ChatForm","chatFormRef","useCommunicatorUIState","activeInteractionId","parseVariables","itemIsInboundExternalChat","isInboundInteraction","usePredefinedChatMessageState","greetings","usePredefinedChatMessageStateMethods","resetGreeting","useGreetings","useChatResponsesVariablesParser","itemIsExternalChat","useSmsMessageCounter","enableSmsCharacterCount","getCharCount","msgCount","charCount","charsPerSegment","sms_messages_number","messagesElementEntry","controlsOptions","controlsDropdownOpen","smsMessageCounterEnabled","smsMessageCounter","data-chat-actions-menu","IconPlus24","EmojiPopup","onSelectEmoji","emojiChar","emoji","ViewPredefinedMessages","maxHeight","contentRect","PREDEFINED_MESSAGES_MAX_OFFSET","ExternalChat","isChatFormVisible","isPotentialItem","iqQmMonitorMode","isQualityManagementItemInMonitorMode","isOngoingCall","isExternalContactCall","isDelivered","isOnHold","isDeliveredChat","isOutboundChat","isAfterCallWorkChat","needToShowWorkitemUI","isNeedToShowWorkitemUI","CAN_START_EXTERNAL_CHAT","useChatFormVisible","activityHistoryExists","loadMessages","useChatIsLoading","isInitLoadingExternal","isLoadingExternal","activitiesIsLoading","activitiesInitialLoading","isInitialLoading","ChatMessages","unmountPlayers","playerGroup","suggestions","alreadyOpened","openedBotSuggestionsUrls","getSuggestionsToOpen","opened","autoOpenURL","suggestionsToOpen","openSuggestions","useBotSuggestionsLinksAutoOpener","createComponentLoader","ChatCenterInteractionLoader","Chat","scope","groupChatId","groupChatMembers","SystemMessageUI","IconCogwheel","scrollAtTheTopNative","defaultScrollStateData","recent","directory","internal","external","favorites","SCROLL_KEYS","tab","eventsToTrack","WebUserActivityTracker","useUserActivityStateMethods","registerActivity","throttledRegisterActivity","parallelChatProviders","SlidingModalContextProvider","DIDNumberStateProvider","providers","ActiveInteractionContextProvider","useScrollStateProviderBuilder","CountrySelectorStateProvider","standaloneProviders","ServiceStateProvider","InteractionUIStateProvider","NavigationStateProvider","ShortcutsProvider","UIContextProvider","CommunicatorUIProvider","CalendarNavigationLoader","CalendarViewSelectLoader","CalendarViewTitleLoader","CalendarHeader","CalendarBodyLoader","getNameFromParty","Info","ChatTranscriptMessage","messageNode","formatName","getFileLink","CASE_MESSAGE","party_joined","party_left","useMessage","fileMessage","isValidElement","textMessageNormalizedByURLParser","textMessageHTML","formatTime","Disposition","heading","prefixed","ChatPreview","chats","useCaseState","isOutbound","partyExternal","partyInternal","fromFirstName","fromLastName","handledByFirstName","handledByLastName","noteContentClassName","messagesByPartyId","isDefined","currParty","ContactListItem","avatarProps","isAlignedToRight","isFitted","EmailAttachment","attachmentURL","getAttachmentUrl","EmailContent","setContent","innerHtmlObject","sanitizeHtml","EmailPreview","emailData","receivers","toAddresses","emailTitle","subject","emailInfo","NotesPreview","Reporter","reporterId","reporterFirstName","reporterLastName","getContactPictureUrl","useGetContactPictureUrl","VoicePreview","recordings","scrollRef","partyContact","contactFirstName","contactLastName","agentFirstName","agentLastName","agentName","iconPhone","recording","Case","goBack","cases","useCaseStateMethods","getCase","assignments","assignedTo","personal","getAssignee","handleEmailOpen","emailId","caseListItemClassName","icon","compact","status","categoryName","onOpenClick","Email","getEmail","fromAddresses","formatEmail","serviceFilter","notUserSelectable","serviceToOption","didNumberToOption","normalizer","didNumberInner","externalNumber","ServiceSelect","trackVisibility","labeled","setSelectedOption","setServiceSelectorVisibility","setDIDNumber","setService","localizeDIDNumber","useDIDNumberLocalization","itemServiceId","itemServiceName","getServiceName","serviceOptions","availableServices","updateSelectValue","clearable","inPortal","select","service_selector_no_value","service_selector_label","isExternalUser","isDirectoryEntry","isMsTeamsChannel","userType","isMsTeamsUser","getNamesFromDisplayName","avatarPhotoUrl","photoUrl","MS_TEAMS_CHANNEL_AVATAR_FIRST_NAME","MS_TEAMS_CHANNEL_AVATAR_LAST_NAME","avatarInitials","getInitials","isHuntGroupEntry","isStaticVoiceEntry","isStaticEmailEntry","getAvatarType","LibAvatar","AgentControls","onCall","useCallHandler","phoneDeviceCapabilities","openActivityHistory","useActivityHistoryOpener","handleChat","handleCall","navigateToInteractionsPage","CONTACT","button_initiate_chat_text","IconChat","button_start_call_text","IconPhone24","DirectoryEntryControls","handlePhoneChannelInteraction","media","favoritesButton","isScenarioChatEntry","channelType","isEmailServiceEntry","DirectoryContactChannelFavoriteButton","onPhoneInteraction","AddEmailModal","onConfirm","addEmail","formatEmailType","EmailTypes","setValue","add_email_heading","add_email_description_1","add_email_description_2","add_email_description_3","add_email_description_4","add_email_email_type_placeholder","isStringInEnum","add_email_description_5","add_email_confirmation_button","useOpenAddEmailModal","AddPhoneModal","formattedPhone","add_phone_heading","add_phone_description_1","add_phone_description_2","add_phone_description_3","add_phone_description_4","add_phone_phone_type_placeholder","add_phone_description_5","add_phone_confirmation_button","useOpenAddPhoneModal","getId","getPhone","primaryPhone","getFirstName","getLastName","ExternalUserControls","interactionStateMethods","isUseButtonVisible","useActiveInteractionProp","handleUse","openAddEmailModal","openAddPhoneModal","getContactDetails","phoneIsAbsent","checkingPhone","allParties","theirItemId","partyPhone","firstNameComputed","partyFirstName","lastNameComputed","partyLastName","isMessengerChannel","force","reject","useHandleUseContact","createPotentialItem","initiateCallParams","contactToShortContact","UNDEFINED","button_use_contact_title","iconUseContact","InteractionDropdown","searchMode","callParams","trigger","handleCallClick","openerRef","MsTeamsChannelControls","channelId","MsTeamsChatControls","ContactDetailsControls","createLeadMappingStringToFormValueMap","formValues","formDefinition","form","nonLayoutFields","layout","pages","fields","flat","field","staticType","checkIsLayout","mappingString","leadMappingString","mapping","getFormElementMappingString","it","FormBuilderButton","changeFormPageId","actionCases","dataKey","mappingToFormValues","initiateCall","canStartExternalChatPrivilege","startAction","actionCallback","actionCase","checkConditions","conditions","startCallAction","numberToCall","skip","startSMSChatAction","numberToSMS","messageToSMS","searchKBAction","searchText","changeFormPageAction","handleDisconnectButtonClick","useDisconnectButtonClickHandler","completeItemAction","itemWithTheSameContactId","completeAfterDisconnect","openInteractionsPageOnError","sendDispositionAction","dispositionName","dispositionsObject","dispositionToSelect","setDisposition","completeItem","sendDisposition","startCall","startSMSChat","searchKB","changeFormPage","useButtonHandlers","hasPrivileges","useButtonPrivilegesChecker","isConditionsPassed","useButtonActionConditionsChecker","data-form-field","data-field-type","data-disabled","Image","finalStyle","minHeight","Spacer","flexShrink","FormElementView","image","isStaticEntry","additionalControls","ariaId1","useId","ariaId2","viewListItemClassName","elementType","elementValue","alert","renderTextFormElement","renderLink","data-type","data-clickable","MergeContactRadioField","radioValue","defaultValue","internal_messages_field_value","MessengerView","useController","RadioFieldRaw","onGoBack","h1","DirectoryEntry","entryId","useActiveInteractionId","directoryEntries","useDirectoryState","entryData","entry","isScenarioVoiceEntry","description_field_label","favoritesChannel","phone_field_label","type_field_label","email_field_label","User","getUserDetailsOnce","useUserDetailsOnceGetter","searchResults","emiUsers","userDetails","useUserDetailsById","dialpadSearchInternalUsers","dialpad","msTeamsUsers","MS_TEAMS_CHATS_CATEGORY_ID","msTeamsChannels","MS_TEAMS_CHANNELS_CATEGORY_ID","useInternalUserData","emiUserType","emiPhotoUrl","userIds","msTeamsPhones","numberType","Title","Content","unsaved_warning_message","Actions","handleContinue","button_cancel_contact_text","continue","noValueLabel","DEFAULT_LABEL","labelClassName","errorClassName","selectProps","newValue","renderElement","SelectFieldRaw","FieldRawConstructor","FieldConstructor","TextFieldRaw","TextField","RemoveRow","handleRemove","data-index","IconCloseCircle","AddressFieldArrayContent","typeClassName","formatAddressType","optionsAddressStates","STATES","optionsAddressTypes","AddressTypes","typeField","FORMS","address_type","addressLine1Field","address_line_1","addressLine2Field","address_line_2","cityField","city","stateField","zipField","zip","AddRow","AddButtonIcon","initialValues","addButtonText","handleAdd","add_entry_button_tooltip","FieldArrayItem","FieldArray","renderComponents","useFieldArray","INITIAL_VALUES","postcode","AddressFieldArray","IconAddAddress","ViewItem","viewStyle","AddressListField","pageItem","FormBuilderContext","view","getValues","getPageItemCSSProperties","editStyle","TextArea","inputClassName","minRows","maxRows","wrapperClassName","htmlFor","TextAreaUI","GeneralTextFormField","multiline","getFormElementStyle","AmountField","viewValue","hideEmpty","emptyText","initialLinesNumber","ButtonField","properties","Checkbox","CheckboxFieldBase","CheckboxField","isChecked","classNames","crossOutWhenChecked","intentCheckOnly","SmRef","innerRef","DateTimeBase","DatePicker","DateTimeField","fieldValue","displayFormat","EmailField","hidden","HiddenFieldRaw","SelectAndTextFieldRow","fieldState","idFieldName","selectFieldName","textFieldName","textFiledRules","inputType","rules","idField","selectField","textField","EmailFieldArray","emailValidationRules","useEmailValidationRules","optionsEmailTypes","IconAddEmail","EmailListField","ImageField","LabelField","runtimeVariables","parseTemplateToString","LinkField","initialValue","MESSENGERS_WITH_USER_NAME","MessengerFieldItem","userNameFieldName","typeFiledName","userIdFieldName","accountIdFieldName","availableMessengers","userNameDefault","accountIdDefault","userIdDefault","accountField","useWatch","currentType","showUserName","getMessengerName","useGetMessengerName","userNameField","accountIdField","contact_messenger","contact_messenger_user_id_placeholder","userIdField","contact_messenger_username_placeholder","user_name","account_id","MessengersFieldArray","removeItem","IconAddMessenger","MessengersField","useInteractionChatState","NotesField","PhoneLink","phoneClickHandler","data-phone","PhoneField","PhonesFieldArray","phoneValidationRules","usePhoneValidationRules","optionsPhoneTypes","IconAddPhone","PhoneListField","listValue","listNameDataItems","selectedOptionId","SelectFieldBase","SpacerField","TextFormField","FormElementResolver","isConditionMet","intents","isFieldWithConditions","useConditionalFieldCheck","customType","warn","CompactForm","pageIndex","pageFields","flatFields","FormLayout","contentItem","isRecuriveFormLayout","calculateContainerStyle","WideForm","pageLayouts","transformFormDefinitionsToLayout","pageLayout","FormBuilder","variables","onFormAvailable","defaultValues","shouldResetOnChange","useForm","mode","reValidateMode","isMountedRef","reset","watch","formCSSVariables","getFormCSSVariables","process","ExternalEditControls","toggleEditMode","saveContactDetails","contactDetailsFormDefinition","useContactFormDefinition","handleSave","dirtyValues","getDirtyValues","dirtyFields","save_error","handleSubmit","flatContactDetails","newDetails","unflatten","button_cancel_contact_title","button_save_contact_title","button_save_contact_text","ExternalEdit","details","createFormValues","setForm","h2","external_contact","useFormElements","formFields","createFormElement","NON_FORKABLE_FIELDS","useFormElementsToViews","elements","srcValues","isMergeMode","updatedElements","updatedValues","updatedSrcValues","unshift","full_name","newFullName","mergeNamesInSingleField","addMergeField","srcValue","distValue","messengersElem","parseMessengers","srcPhones","phoneItem","srcEmails","emailItem","srcAddresses","typedValue","optionValue","birthday","contact_deleting_confirmation","handleConfirm","useViewModeHandlers","deleteContact","getDirectLink","useGetDirectLink","handleCopyLink","handleDelete","delete_error","getDeleteWarningModal","handleMerge","srcContactDetails","onMerge","ExternalViewMoreButton","linkClick","setLinkClicks","externalMoreButtonOptions","openInCRM","copySharableLink","n","mergeToExisting","open_in_crm","copy_shareable_link","merge_to_existing","useExternalMoreButtonOptions","ButtonDropdown","IconMenu24","SmLabel","pointing","copied_confirmation_label_text","ExternalViewControls","EDIT_CONTACTS","button_edit_contact_title","IconEdit24","DELETE_CONTACTS","button_delete_contact_title","IconDelete24","button_delete_contact_text","ExternalView","formElements","ExternalContactFieldFavoriteButton","External","formDefinitionsLoading","getContactFormsDefinitions","contactDetailsUpdating","contactDetailsLoading","handleGoBack","editMode","getGoBackWarningModal","open_error","isLoaderShown","EditingContactControls","noActiveState","IconPhone","EditingContactDetailsHeader","recentItem","GoBackButton","RecentFavoriteButton","messengerId","ContactPreview","initialsClassName","useOnSubmit","distContactDetails","submitting","setSubmitting","contactsStateMethods","onSubmit","submitValues","updatedDetails","splitNames","bothContactDetails","flatten","VALIDATION","CONTACT_MERGE_ERROR","MergeContactsForm","mergeFormPreparing","merge_form_title","relaxed","merge_contacts","getOption","SmDropdown","MergeContacts","useSearchContactState","setDistContactDetails","setMergeFormPreparing","searchQuery","setSearchQuery","contactsAreLoading","setContactsAreLoading","setOptions","searchQueryRef","getContactsList","searchQueryInner","isOutdated","checkingSearchQuery","getContactList","debouncedGetContactsList","handleSearchChange","selectedContact","methods","fluid","loading","search_contact_to_merge","onSearchChange","menuClassName","contactDetailsToContactShortType","isPadOpenAtom","selectedItemIdAtom","phoneInputAtom","contactsListMethodsAtom","isInternalContact","isCategoryItem","getDisplayName","digits","letterByCode","fromPairs","letter","digit","getLetter","sanitizePhone","splitParts","colonValue","digitizePhone","usePhoneNumberFormatter","countrySelectorValue","useCountrySelectorState","ALL_COUNTRIES_ID","formattedNumber","phoneNumberFormatter","success","removeLeadingPlus","formatted","E164","meta","useFormatedPhone","formatPhoneNumber","digitizedNumber","countryCodeSource","isValidPhoneNumber","countryCodeSourceFromPrefix","PhoneNumberUtilCountryCodeSource","useInternalContacts","checkSelfUser","useDirectoryStateMethods","findContacts","privilegesLoaded","internalContacts","internalContactsInner","CAN_VIEW_DIRECTORY","PHONE_NUMBER_VALID_SYMBOLS_REGEX","isInternalContactExtension","getInternalContactsByQuery","partialRight","internalContactsLoading","useQueryContacts","selectedItemId","skipSearch","useExternalContacts","contactList","contactListLoading","getExternalContactsByQuery","externalContacts","externalContactsLoading","categoryItems","categoryEntries","categoryItemsInner","useCategoryItems","isDebouncing","setIsDebouncing","activePage","prevPage","pageParams","typingTimeout","getContacts","useContactsLoader","allContacts","composedList","nextItem","localeCompare","sensitivity","scheduledSetInputCaretPos","useHandlers","isPadOpen","setIsPadOpen","setSelectedItemId","setSearchValue","phoneInput","integrationApiStateRef","useIntegrationApiStateRef","localSettings","useLocalSettings","toggleDialpad","closeDialpad","openDialpad","noNumber","DIAL_PAD","error_empty_number","onInputValueChange","contactsLength","initiateInteractionParams","updateCaretPosition","start","end","getInputCaretPos","newCaretPos","pos","setValueIntoCaretPosition","setInputCaretPos","callId","isDeliveredCall","onButtonClick","sendDtmf","dtmf","initiateChatWith","restoreLastDialedNumber","onChatClick","callNumber","getNumberErrors","deferredDialData","associatedRecords","objects","onCallClick","onContactSelect","newPos","KeyPadButtonContent","additionalValue","LongPressButton","onHold","timer","setTimer","keyPressed","setKeyPressed","onTimeIsUp","timerId","stop","onEnterOrSpacePress","handler","isKeyDown","startByKey","stopByKey","onMouseUp","onTouchStart","onTouchEnd","onKeyDownCapture","onKeyUp","keyCode","KeyPad","handleButtonClick","allowLetterBasedDialing","onKeyPress","isSelectOrTextField","activeElement","altKey","useLetterBasedDialing","buttons","letter2","letter3","letter4","letter5","letter6","letter7","letter8","letter9","holdAction","dialpadButtonClassName","row","DialpadButtons","handleWheel","deltaY","IconDialpad","IconArrowDown24","IconArrowUp24","hide_controls_label","onWheel","CreateContactForm","setIsLoading","renderWithOptionalPostfix","useDirectoryUIState","toggleCreateContactMode","setCreateContactFormValues","createContactFormValues","pauseSymbolsValidationRules","usePauseSymbolsValidation","phoneRules","merge","usePersistedFormValues","clearPersistedValues","emptyDirectoryUIState","setPersistedValues","controlledUnmountRef","CONTACT_CREATION_ERROR","contact_first_name","contact_last_name","contact_phone","contact_email","MessengerFieldBase","withoutPadding","create_contact","create_and_open_in_crm","useDirectoryFirstFoundItemAutoSelector","setFirstFoundItemId","getDirectoryItemUniqueId","useDirectorySearch","searchFunction","debounceTimeout","isDebounceProcessing","setIsDebounceProcessing","searchEvent","useDirectoryEntryOnlineStatus","huntGroupId","useServiceDetailsState","serviceDetails","huntGroupsDetails","huntGroupDetails","agentsReady","agentsLogged","phonesRegistered","DirectoryEntryBody","IconPhone16Filled","IconEmail16","transferMode","onChat","onEmail","onDetails","showCallButton","showChatButton","showEmailButton","handleEmail","handleDetails","IconRoundChat16Filled","button_send_email_text","button_show_contact_details_text","onPressed","IconInformation","HuntGroupMetrics","metrics","DIRECTORY","displayMetrics","logged_in","phones_registered","metric","ServiceMetrics","primaryMetric","secondaryMetric","serverMetricName","inCallsWaiting","waiting","seconds","inMaxWaitTime","toHHMMSS","max_wait","inEwt","ewt","serviceLevel","svc_level","ready","getDisplayMetrics","DirectoryEntryMetrics","huntGroupMetrics","serviceMetrics","transferNumberInput","transferControlsStyle","showFavoriteButton","onlineStatus","DirectoryFavoriteButton","forContactListItem","stats","controls","handleDoubleClick","keyHandlerElement","containerProps","ExternalContactBody","ExternalContactInteractionButtonIcon","popupOpen","optionsExtractor","OptionComponent","onPopupOpenChange","htmlProps","loadFullContactDataAndContinue","keyDownHandler","fullContactData","data-focused","iconRight","IconArrowUp16","ExternalContactControls","callPopupOpen","setCallPopupOpen","chatPopupOpen","setChatPopupOpen","emailPopupOpen","setEmailPopupOpen","externalContact","EmailOption","ExternalContact","noControls","controlsPopupOpen","setControlsPopupOpen","ExternalContactFavoriteButton","callButtonRef","forceHover","InteractionButtonIcon","InternalUserControls","callOptions","internalUser","chatOptions","emailOptions","UserOnlineStatus","tenantFeatures","useReducer","forceUpdate","stateDuration","getStateDuration","rtDataEnabled","UserStatusLabel","formatDurationShort","yellow","green","red","gray","dark","AGENT_STATE_CONTROL","isLogged","presence_offline","acdState","isSuper","presence_available","userHasItemOfType","acd_busy_call","acd_busy_chat","acd_busy_email","acd_busy","getInteractionBusyStatus","presence_dnd","acd_supervision","acd_ready","reason","acd_not_ready","acd_acw_long","capacity","userHasActiveCapacityOfType","capacityItem","usedSlots","presence_away","InternalUser","rtUserDetails","mountTimestamp","isSearchUser","lastUpdated","userStatusIcon","photoId","MsTeamsChannel","MsTeamsUserControls","primaryPhoneNumber","getMsTeamsUserPrimaryPhoneNumber","phoneData","hasChat","MsTeamsUser","sanitizeText","prepareHighlightFormattedPhone","DirectoryItem","listNode","observer","isVisible","useSubscribeForUserDetails","isUserWithDetails","useSubscribeForServiceDetails","useSubscribeForHuntGroupDetails","isHuntGroup","useSubscribeForUserOrServiceDetails","userComponent","ExternalUsersHeader","iconLeft","IconPlus16","create_new_contact_button_text","CONTACT_KEYWORDS_REGEX","defaultFilter","ExternalUsers","selectedId","scrollParent","withCreateContact","searchInputRef","isHighlighted","defaultTransferMode","useDefaultTransferMode","rawTransferMode","contactListLoaded","contactListByChunks","contactListByChunksLoading","getContactListByChunks","createCaseEmail","useExternalUserHighlight","openContactDetails","useContactDetailsOpener","hasQuery","finalContactList","isDebouncingSearch","q","getContactKey","_idx","scrollSnapshotData","useVirtualScrollDataManager","contactsIds","contactsIdsRef","fetchMoreContacts","lastContact","limit","emailParams","renderContact","isSelected","emptyMessage","no_results_external_for_query","no_results_external","done","focusContactElement","showPlaceholder","elem","ContactListPlaceholder","amount","circular","endReached","restoreStateFrom","createContactMode","MOVE_KEYS","teamFilter","teamId","omitSelfInTeams","teams","selfTeamId","team","usersCount","DirectoryItems","listRef","innerListRef","finalListRef","showControls","userTypeOrder","sortByUserType","aIndex","bIndex","getName","sortByName","getFormattedName","bind","aName","bName","SearchResults","filteredSearchResults","filteredDirectoryEntries","emi","sortByFormattedName","planeFilteredDirectoryEntries","log","directoryEntriesFromSearch","omitSelfInUsers","usersFromSearch","arr","categoryKey","Fragment","directoryFolderTypes","getActiveGroupStorageName","isSearchMode","DirectoryFolderTitle","folderItem","childrenCount","assertEmiCategoryId","getFolderChildrenCount","showCount","Highlight","stringComparison","DirectoryFolderItem","filteredUsers","filteredEmiUsers","toggleDirectoryFolder","itemsList","useUsersList","folderClickHandler","IconChevron","IconChevronDown16","data-element","aria-expanded","aria-controls","useContentHandlers","useDirectoryFoldersList","filteredCategories","emiCategories","directoryCategories","sortByNameAsc","getSearchResultsAsOneList","getItemsAsOneList","categories","useChatPartyUsersFilter","useCallPartyUsersFilter","EMPTY_OPEN_FOLDERS","diff","added","removed","Internal","directoryStateMethods","isTeamsLoading","useOpenFoldersState","queryChanged","openFolders","setOpenFolders","searchOpenFolders","setSearchOpenFolders","set","useFilteredDirectoryState","useDirectorySearchResultsState","msTeamsUserFilter","msTeamsChannelFilter","_channel","count","msteamsUsers","u","msteamsChannels","usersWithoutCurrentUser","mapValues","category","usersWithoutSelf","chatUsersFilter","callUsersFilter","useFilteredUsers","foldersList","getAgentTeams","isInitialLoadRef","addedItems","addedTeamsToLoad","addedEmiCategoryIds","ids","emiCategoryId","getCategoryUsers","openedItems","teamsToLoad","getLoggedUsers","useTeamMembersLoader","selector","retrievedOpenedTeamsFromLocalStorage","retrievedFromLocalStorage","setRetrievedFromLocalStorage","useOpenedTeamsRetrieverFromLocalStorage","retrieveScrollCondition","useNativeScrollDataManager","folderId","newList","newDiff","useToggleDirectoryFolder","too_many_results_found","no_results_internal_for_query","no_results_internal","directoryHandlerKeys","directoryItems","currentFocusIndex","combineDirectoryNavigationByArrows","currentElement","internalItems","lastInternalItem","externalItems","externalItemHeader","firstExternalItem","singleClickTimeout","Combined","isExternalVisible","setIsExternalVisible","externalContactsList","isInternalLoading","isExternalLoading","toggleExternalVisibility","openedExternalFolderBecauseOfSearchRef","useExternalContactFolderOpenerForSearchMode","setScrollParent","internalSearchResultCount","no_results_for_query","data-combined-directory","external_contacts","DIRECTORY_TABS","invert","DIRECTORY_TABS_INDEXES","DirectorySearchControls","setSelected","firstFoundItemId","directoryTab","targetItem","getDirectoryItemPhoneBySearch","getDirectoryItemContactId","getDirectoryItemUserId","handleChatClick","forceSearchForContact","getDirectoryItemPhone","search_field_placeholder","SearchForInteractionControls","callButtonDisabled","isPhone","chatButtonDisabled","DirectoryTabs","handleTabChange","nativeEvent","detail","callbacks","getDirectoryItemFirstName","getDirectoryItemLastName","tabs","ADDRESS_BOOK_AREA","tab_directory_internal","tab_directory_external","onTabChange","newTabId","newTabIndex","selectedTabId","TabsRoot","TabsList","TabsTrigger","triggerClassName","TabsContent","data-key","useDialCandidatesPhonesDropdown","handleSinglePhoneCall","dropdownState","useDropdown","onPhoneClick","getPhoneOption","persist","CrmDialCandidate","candidate","displayNameParts","displayNameWithoutPrefix","firstPhone","businessPhone","getFirstPhone","selectOnBlur","clickThrottle","CrmDialCandidates","dialpadNumber","useIntegrationApiState","isAvailable","dialCandidates","DialpadContacts","setScrollNodeRef","setContactsListMethods","contactsListMethods","scrollToFirst","handleContactSelect","pattern","dialNumber","handleCloseDialpad","leading","onScroll","PhoneInput","setInputRef","contactsFound","setCountrySelectorValue","countrySelectorRecent","addCountryToRecent","showCountryPrefixError","country","useUserProfileState","userProfile","onCountryCodeChange","newCountryCode","DEFAULT_COUNTRY_RECENT_ID","countryCode","countryPhoneValue","onChangeDialNumber","countries","countriesInner","popCountryOnTop","foundIndex","region","prefix","callCenterCountryCode","recentCountryCodes","handleInputKeyDown","CountryPhoneField","invalid_number_error_text","searchFieldPlaceholder","country_selector_search_input_placeholder","recentTitle","country_selector_recent","countriesTitle","country_selector_countries","allCountriesTitle","country_selector_all_countries_title","DialpadForm","useFilteredAndSortedFavoritesList","favoritesList","isFavoritesMultiMediaChannel","hiddenMedia","isFavoritesUserItem","isFavoritesDirectoryEntryItem","item1","item2","FavoriteItemBody","isFavoritesInternalChannel","isFavoritesPhoneChannel","Phone","isFavoritesEmailChannel","isFavoritesMessengerChannel","messengerType","IconComponent","FavoriteControls","onDetailsClick","FavoriteItemStats","emiUserId","getUniqueChannelId","numberId","useAvatar","anyUserId","directoryEntryOnlineStatus","isFavoritesEmiItem","FavoritesListItem","useEmiItemStatus","emiOwnerId","disableReasonMessage","relatedEMIUser","emiUser","useSubscribeForFavoriteItemDetails","FavoriteChannelButton","FavoritesList","useFavoritesState","handleDetailsClick","CONTACT_POPUP","afterCallSideEffectCallback","contact_msteams_no_chat","useItemClickHandler","sortedAndFilterFavoritesList","useEmiItemStatusCurried","listItem","InteractionBarUnread","unreadPersonalMessagesAmountByContactId","sumUnreadReducerPersonalChats","unread","totalUnread","useChatUnread","useInternalChatTotalUnread","InteractionsCount","interactions","interactionsCount","isInternalChat","history","interaction_bar_calls_label","interaction_bar_chats_label","interaction_bar_contact_activities_label","InteractionBar","reservedForIncomingInteractionTimeout","useActiveOrLastInteraction","activateItem","useInteractionBarDisplayName","deliveredStartTime","iconType","getMediaIcon","InteractionMediaIcon","showPotentialInteractionIcon","InteractionTimer","useAccessibleShortcuts","currentPage","getItemCoordsByIndex","goToPage","navigateOverInteractionsByNumbers","currentPagedIndex","elt","navigateOverInteractionsByArrows","pagedIndex","useParallelChats","getLocation","isParalleled","useIsParallelInteractionContext","showParallelControls","hasEnoughSpaceForParallelItem","parallelItemsHaveEnoughSpaceAtom","parallelItems","parallelItemsAtom","parallelItemsDispatch","setParallelInteractionsWidth","openParallelChat","payload","activeId","associatedItemIds","w","closeParallelChat","showOpenParallelChatButton","showCloseParallelChatButton","CompleteInteractionButton","EndButton","withStateLayer","INTERACTIONS","EndCallButton","isDestructive","interaction_endCall","IconEndCall","EndChatButton","HoldButton","isActive","holdStartTime","interaction_retrieve","interaction_hold","data-on-hold","motion","animate","paddingRight","IconHold16","IconPause16","AnimatePresence","initial","width","exit","micVolumeManager","MicrophoneVolume","MicrophoneIcon","muted","microphoneRef","startAnalysis","volume","svg","breakpoint","stopAnalysis","IconMute16","IconVoiceVolume","MuteButton","unmute_tooltip","mute_tooltip","data-muted","RecordButton","interaction_recordStop_tooltip","interaction_recordStart_tooltip","data-recording-active","IconRecordingActive16","IconRecording16","TransferButton","interaction_initiate_transfer","IconForward16","CompleteButton","handleCloseClick","small","useCompleteButtonTexts","button_close_tooltip","interaction_completeACW","complete_interaction","isChatConference","interaction_leaveConference","isConferenceHost","interaction_endConference","interaction_endChat","IconCheck16","FlagButton","optimisticActive","flagItem","isFlagged","useOptimisticActivation","optimisticIsFlagged","toggleOptimistigIsFlagged","FlagMode","SHORTCUTS_DIALOG_BOX","shortcuts_alt_shift_m","shortcuts_alt_m","data-flagged","IconFlag16","InternalChatWindowButton","setState","popupItemId","useInteractionPopupItemIdSelector","chatView","button_open_popup_tooltip","IconChatDock","Unread","unreadAmount","customerWaitTimer","showTimerProgressBar","textAmount","common","showInFocusClassName","showOutFocusClassName","ButtonsOnHover","totalChatSentiment","isEmbeddedChatView","useInteractionUIStateItemSelector","showFlagButton","showExternalChatWindowButton","isExternalCall","showInternalChatWindowButton","isPotentialInternalInteraction","isAfterCallWorkState","useUnread","withTimer","setStartTime","useTimer","cutMilliseconds","useUnreadHelper","acl_after_call_work_label","KNOWLEDGE_BASE","new_tab_button_tooltip","IconChatPanelOpen","Connecting","dial_request_status_long_connection","DisplayText","useDisplayContent","contactDisplayName","useContactDisplayName","callConfDisplayText","HOME_SCREEN","interaction_call_conference_label","chatConfDisplayText","interaction_chat_conference_label","interactionDisplayName","chatFirstName","chatLastName","anonymous","Failed","dial_request_status_failed","InteractionTypeImage","IconOutboundPreview16","isContact","IconInternalChat16","IconConferenceChat16","IconAfterCallWorkAD","isInternalMessage","IconConferenceCall16","IconOutboundCall16","useInteractionTypeIcon","IconAndTimer","showTimer","stateStartTime","failed","useShowTimerChecker","isTimerShown","isCallOnHold","isAfterCallWorkItem","renderTimer","ended","MonitorIcon","IconMonitor","isQualityManagementItemInWhisperMode","IconCoaching","InteractionsListItem","prolongedConnection","handleKeyPress","data-active","AnimatedInteractionsList","isInteractionsListShown","useSlidingModalState","getInteractionModalData","contentRef","setContentRef","resizeObserver","contentHeight","setContentHeight","InteractionsListResizer","min","onResize","onReset","startHeightRef","minRef","isDrag","setIsDrag","onDragStart","onDrag","initialOffset","newHeight","max","Draggable","tw","previewClassName","DragItemTypes","Pagination","goNextPage","goPreviousPage","showNext","showPrev","prevAmount","nextAmount","SmMenu","bulk_button_previous","bulk_button_next","InteractionsList","itemIds","setHeight","isHeightCustomized","setIsHeightCustomized","menuRef","setMenuRef","menuResizeObserver","detectedHeight","menuStyle","resetHeightOnItemsChange","onManualResize","onResetCustomHeight","usePagination","setCurrentPage","totalAmountRef","paginationIsEnabledRef","MAX_INTERACTIONS_PER_PAGE","numberOfPages","ceil","isLastPage","isFirstPage","pagedItems","paginationIsEnabled","paginationProps","handleItemClick","COMMUNICATION_PANEL","active_interactions","useCommunicatorContentHeight","communicatorContentHeight","setCommunicatorContentHeight","communicatorContent","communicatorContentObserver","ResizeObserver","observe","disconnect","useCommunicatorNavbarHeight","bottomNav","CalendarEventFormLoader","CalendarEventSlidingModal","closing","selectedEvent","useCalendarState","closeEventForm","SlidingModal","header","CALENDAR_EVENT_MODAL","MergeContactsSlidingModal","stateAtom","atomWithReducer","_prev","RECENT","dispatch","conference_details_input_placeholder","useConfPartiesToString","confPartiesToString","RecentConferenceItem","userData","RecentConferenceModalContent","displayDate","description","isRecentCallConference","conference_call_details_description_text","conference_chat_details_description_text","RecentConferenceSlidingModal","chatParams","footer","VoiceTranscriptModal","headerClassName","showIconClose","GlobalSlidingModalsListItem","topOffset","navBarHeight","useGlobalModalStyles","GlobalSlidingModalsList","visibleGlobalModals","typedKeys","globalModalsData","checkAllowToSendDtmf","itemState","KeypadModalContent","useDtmfInputStateAndHandlers","inputValue","setInputValue","delay","setDelay","activeItemCallId","allowToSendDtmf","sendDTMFs","DTMFs","delayMs","pendingDtmf","handleInputChange","newInputValue","isInvalidDtmfInput","getDTMFs","prevInputValue","newInputValueInner","sameBeginning","getSameBeginning","DTMFsAsString","DTMFsToSend","DTMFSToQueue","DTMFsToQueue","sameBeginningCurrent","prevValue","prevComasAmount","getComasAmount","newComasAmount","string","decreaseDelay","millisecondsToSubtract","getComasAmountDifference","currentdelay","decreaseDelayWhenComaIsRemoved","localDelay","queueDTMFs","moveCaretToTheEnd","selectionStart","selectionEnd","preventToMoveLeft","KeypadModal","keypad","KBPageLoader","features","openInNewTab","GlobalKB","memo","kbBridge","useKbBridgeConnector","assertKBBridgeInterface","SlidingPanelContext","tv","base","variants","false","slots","overlay","innerContainer","close","InteractionKB","tooltipPlacement","KnowledgeBaseSlidingModal","focusTrap","rescheduleSlidingModalContent","FocusTrap","RescheduleSlidingModal","button_schedule_followup_label","selectedActionAtom","searchAtom","dialNumberAtom","ActionButton","setAction","useCloseInteractionSlidingModal","dial_consult_button_tooltip","selectedIcon","IconPhone24Filled","optionIcon","blind_transfer_button_tooltip","IconCompleteTransferFilled","IconCompleteTransfer","dial_conference_button_tooltip","IconConferenceCall24","IconConference","transferHandlers","useTransferHandlers","SplitButtonDropdown","actionButton","consultCallHandler","blindTransferHandler","singleStepConferenceHandler","TransferModalFooter","setDialNumber","fieldClassName","channel_favorites_phone_icon_tooltip","defaultExternalFilter","useFilteredList","renderContext","recentList","externalFilter","useRecentUIState","deferredSearchValue","useDeferredValue","searchValueFilter","combinedFilter","isEMIUser","hasAgentsInChatConferenceMode","isCallWithSelf","isNotAPartyOfActiveInteraction","filterByType","lastUniqueData","sameContactChats","contactIds","numbers","names","unique","isChatUnique","r1","r2","uniqueData","extractRecentItemUniqueData","repeatCount","incrementRecentItemRepeatCount","itemTypeToTabType","answered","CrmObjectListItem","crmObject","showScreenPopOnClick","CRMObjectsList","crmObjects","ExternalContactInteractionButton","IdentifiedContactContent","onEmailClick","shortContactData","IconPhone16","IconRoundChat16","IconEmailEnvelope16","selectDispositions","Set","selectServicesString","selectDispositionsString","servicesString","dispositionsString","EmailAddressValidator","validate","this","emailPattern","EMAIL_REGEX","DEFAULT_SORTING_FIELD","tabsAtom","queueType","closeable","selectedTabIdAtom","createColumnHelper","createStore","DEFAULT_SEARCH_TAB","searchPageTabsAtom","searchPageActiveTabIdAtom","mergingContactsAtom","sortBy","asc","useSearchPageTabsActions","setTabs","activeTabId","setActiveTabId","handleTabOpen","handleTabClose","handleTabUpdate","currentTabs","useContactsActions","mergingContacts","setMergingContacts","canAddContactForMerge","addContactForMerge","removeContactFromMerge","closeContactsMerge","useMergeContactsActions","handleContactOpen","newTab","onEditMode","edit","handleContactCreate","initialData","onContactCreated","handleContactCreateCancel","useUpdateContactWithRecentChannel","CreateContactOptionsButton","closeHovercard","handleAddToExisting","handleAddNewContact","addNewContact","goTo","useRecentStateMethods","linkWithContact","updateContactWithRecentChannel","openQuickAddModal","QuickAddModal","openAddToExistingModal","AddToExistingModal","recentToNewContact","contactOptions","quick_add","new_contact","add_to_existing","MoreOptions","UnidentifiedContactContent","WithRecentContactCard","floatingState","hovercardOpened","hovercardClosing","setHovercardState","HoverCard","onExitComplete","avoidCollisions","transform","transition","ease","RecentItemAvatar","sessionRef","useSessionStateRef","groupChatData","getUserId","useDirectoryUser","isRecentExtChatConference","isRecentGroupChat","isRecentEmail","online","headPhones","rootStyles","iconStyles","isMissed","true","defaultVariants","textStyles","RecentItemBody","partiesToString","groupChatMembersToString","durationBlock","isRecentInternalChat","lastMessageAuthor","lastMessage","isRecentExternalChat","external_chat_party_joined_new","external_chat_party_left_new","isRecentCall","isRecentWorkitem","RecentItemControls","crmObjectsListOpened","toggleShowCrmObjectsList","cleanNumber","showDetailsButton","chatId","handleCrmObjectsClick","associatedCRMObjects","button_show_crm_objects_text","button_show_crm_objects_text_short","RecentItemTitle","innerTitle","subTitleClassName","titleClassName","conference_title_text","chatDisplayName","emailDisplayName","unidentified","isGroupChat","RecentItemUnreadIndicator","internalInteractionId","currentItem","getInteractionId","associatedActiveChatInteractionStepId","isExternalChatConference","activeChatUnreadAmount","internalChatUnreadAmount","useInternalChatUnread","groupChatUnreadAmount","useGroupChatTotalUnread","personalMessagesUnreadAmount","usePersonalMessagesUnreadAmount","isRecentChat","digitsNumber","RecentListItem","useAuthorizedSession","chatMembers","secondParty","isIncoming","clickActionAvailable","isClickActionAvailable","datetime","unreadIndicator","bottomContent","ownerId","titleRight","bodyRight","RecentList","useRecentState","isUsersRequestedRef","tryInitiateCall","handleEmailClick","showRecentConferenceModal","openRecentConferenceModal","scrollPositionRef","useTransferRecentConferenceScrollManager","recentsList","isRecentDirectoryEntryItem","filteredList","prevTabIndex","tabIndexChanged","firstItem","alreadySelected","useItemAutoSelector","no_recent_interactions_found_for","no_recent_interactions_found","RecentSearchControls","selectedItem","testId","TabContent","selectedTab","activeItemIsExternalChat","recentsType","recentFilter","favoritesFilter","directoryFilter","paneWrapperClassName","SearchInput","transfer_search_placeholder","onRecentClick","DirectoryInternal","DirectoryCombined","InteractionsTransfer","handleKeypadKeyEnterKeyDown","keyboardEvent","transferTabIndex","handleTransferTabChange","addressBook_recents","addressBook_favorites","addressBook_directory","TransferModal","isACW","closeInteractionSlidingModal","showTransferModal","setLabel","invite_dialog_label","consult_conference_blind_transfer","useHeader","footerClassName","InteractionsSlidingModalsListItem","InteractionsSlidingModalsList","visibleInteractionModals","interactionModalsData","isOpenTransferModal","handleToggleTransferModal","useActiveTransferModalOpener","ActiveInteractionTitle","interaction_details","IconDivider","close_tab_text","IconChatPanelClose","CallButton","button_initiate_call_tooltip","RemoteAssistButton","useRemoteAssistStateMethods","openRemoteAssist","raId","raPopupExists","raIdRef","activeItemRef","handleRemoteAssistClick","giid","clientFirstName","clientLastName","clientDisplayName","chat_remote_assist","IconRemoteAssist","ReportProblemButton","showModal","useModalsState","modals","openCallProblemModal","renderReportProblemButton","report_a_call_problem","IconWarning16","ChatMembersButtonProviderLoader","ActiveInteractionTopButtons","showReportProblemButton","itemNumber","remoteAssistEnabled","nativeRemoteAssistEnabled","SYS_USE_REMOTE_ASSIST","showRemoteAssistButton","showChatMembersButton","isPotentialGroupChat","isInternalInteraction","ActiveItemAvatar","isClickable","useItemNames","callFirstName","callLastName","interactionIcon","handleAvatarClick","contact_details_link_tooltip","ActiveItemDisplayName","ActiveItemPhone","phoneName","ActiveItem","isMultiuserGroupChat","useIsMultiuserGroupChat","notEmptyDisplayName","showFavoritesButton","InteractionFavoriteButton","useDisplayNameParticipant","partyDisplayName","callPartyName","displayNameLocal","showPhone","showEmail","getParticipantsListData","callParties","useDisplayNamesParticipants","participantItems","useContacts","DisconnectButton","InteractionParticipantsListItem","onRemoveItem","canRemove","is_qm","getDisplayInfo","isSupervisor","showDisconnectButton","handleDisconnect","MultiAvatar","avatarItemsProps","avatarsItems","leftItemsCount","avatarParticipantsList","NewAvatarUI","SelfItem","self_item_name","InteractionParticipantsList","participantsItems","displayNames","countOfParticipants","RCollapsible","count_members","CallConferenceParties","isHost","participantsListData","removeCallParty","ChatConferenceParties","removePartyFromChat","WorkitemDisplayContent","contactInfo","listDisplayName","primaryEmail","contactFullName","contactPrimaryPhoneNumber","contactPrimaryEmailAddress","contactLoading","ActiveInteractionTop","activeItemIsCallConference","activeItemIsChatConference","ChatButtons","createRtcCall","stopRtcCall","toggleRtcCallDevice","requestCobrowsing","webRtcConfig","useWebRtcConfig","activeChatId","cobrowsingWidgetKey","isCobrowsingActive","cobrowsingActive","chatCall","doesAnotherChatWithCallExist","isConfirmed","isChatCallActive","chatInDeliveredState","onCobrowsingStarted","cobrowsingPayload","cobrowsingLink","handleChatCallStart","createChatCall","handleChatCallClose","stopChatCall","handleChatCallToggleAudio","toggleChatCallDevice","device","withAudio","handleChatCallToggleVideo","withVideo","handleCobrowsingClick","toggleTransfer","openRescueModal","isEnabled","handleRescueClick","voip_video_on_tooltip","voip_video_off_tooltip","data-video-active","IconCamera","IconCameraOff","LegacyCircleButton","chat_cobrowsing_button_tooltip","IconCobrowsing","isRescueEnabled","button_remote_access_tooltip","button_start_web_call_tooltip","IconEndWebCall","IconStartWebCall","voip_start_tooltip","IconVoiceInbound","AgentSupervisorControlsLoader","SupervisorButtons","chatUserIds","allChatParties","callUserIds","qmMonitoredItemId","userDataId","useScheduleReminderOption","localTimezone","selectEvent","itemPhoneNumber","itemContactPhone","nonEmptyPhones","itemContactData","getUserTimezone","newCalendarEvent","withoutUndefinedKeys","_temporaryId","assignees","displayText","allDay","button_followUpActivity_tooltip","IconAddEvent","ShowMoreButton","showMoreList","useOutsideClick","openShowMoreList","stopImmediatePropagation","moreButtons","toggleList","getMainItem","requestTransferData","sendScreenPopData","customRecordings","usePrerecordedMessagesList","itemRaSession","raSessionEstablished","raSessionPin","pin","raSessionId","giidRef","raSessionPinRef","raSessionIdRef","callInDeliveredState","callInWrapUpState","showScheduleReminderButton","CAN_USE_CALENDAR","scheduleReminderOption","mainItemId","activeItemHasConsultCalls","hasConsultCalls","activeItemIsConsultCall","isConsultCall","activeItemParties","activeItemHaveAgents","canSendScreen","sendScreen","customData","userItemId","targetItemId","prepareSendScreen","interaction_sendScreen_tooltip","IconScreenshare","PLAY_CANNED_PROMPTS_DIALOG_BOX","useMoreButtons","show_more","IconMore","VoiceCallButtons","showKeypadModal","useCallButtonsHandlers","showRecordButton","isCallEstablished","isMuted","isRecording","isRecordingMuted","handleHoldClick","handleMuteClick","handleMergeClick","handleTransferClick","handleLeaveConference","toggleKeypad","showConferenceButtons","showMergeButton","showTransferButton","holdButtonDisabled","canRetrieve","canHold","interaction_merge","IconMerge","interaction_complete","addressBook_dial","IconLeave","WorkItemButtons","dispositionForSkip","useSystemDisposition","scheduleReminderButton","onSkipClick","interaction_endWorkItem","selectedMessageStateAtom","messagesOrder","prev","existingMessagesById","existingMessages","missingMessages","modalSelectedMessageAtom","selectAtom","PrerecordedItem","prompt","PrerecordedList","usePrerecordedMessagesState","serviceMessages","usePrerecordedMessagesStateMethods","getServiceMessages","currentServiceMessages","promptsTitleClassName","canned_prompts","custom_prompts","PrerecordedMessagesModal","playingPrompts","selectedPromptIsPlaying","playingPromptId","onPlayClick","stopAndPlayPrompt","promptId","playPrompt","stopPlayingPrompt","prerecorded_messages","prerecorded_messages_play_and_leave","play","PrerecordedMessages","isPlayingNow","handlePlayButtonClick","finalList","dropdownOpened","openPrerecordedMessagesModal","order","orderMap","Map","IconStop16","IconPlay16","prerecorded_messages_recents","prerecorded_messages_more_messages","chevronClassName","InteractionButtons","onCloseInteraction","isQualityManagementItem","InteractionVideoWarning","profilingValueRef","localStream","hasMicError","setHasMicError","hasPerformanceError","setHasPerformanceError","debouncedClearMicError","debouncedClearPerformanceError","showError","getAndResetProfilingValue","wasUnmounted","runProfilling","tick","savedProfilingValue","audioTrack","getAudioTracks","intervalId","readyState","microphone_muted","low_cpu","connectStream","stream","srcObject","InteractionVideo","useWebRtcState","streams","localStreamId","remoteStreamId","externalVideoRef","internalVideoRef","remoteStream","video","playsInline","autoPlay","ActiveInteractionControlPanel","chatInteractionStepId","chatCallHasVideo","clearRemovedAssociatedItem","associatedItemWasJustRemoved","removedAssociatedItemId","typeRef","contactIdRef","associatedItemWasJustRemovedRef","checkForLatestMessages","useRecentActivityHistoryUploader","ChatInWindowPlaceholder","handleUnpin","chat_in_popup_message","linkLike","unpin","useAutoSelectTranscriptTab","hasVoiceTranscriptOrSuggestions","previousHasVoiceTranscriptOrSuggestions","activeTab","useInitialTabFromPageParams","removePageParam","currentTab","tabClassName","TABS_ORDER","useTabs","useAvailableInteractionTabsController","availableTabs","useInteractionUIAvailableTabs","transcriptTab","interaction_tab_label_transcript","openDetachedTranscriptWindow","URLSearchParams","IconOpenDetached","useTranscriptTab","allInteractionsTab","interaction_tab_label_all_interactions","useAllInteractionsTab","callInteractionsTab","interaction_tab_label_calls","useCallInteractionsTab","messageInteractionsTab","interaction_tab_label_messages","useMessageInteractionsTab","crmTab","interaction_tab_label_crm","useCrmTab","workitemContactsTab","interaction_tab_workitem_contacts","useWorkitemContactsTab","workitemDetailsTab","interaction_tab_workitem_details","useWorkitemDetailsTab","workitemHistoryTab","interaction_tab_workitem_history","useWorkitemHistoryTab","resolutionTab","interaction_tab_label_resolution","useResolutionTab","tabsMap","crm","workitemContacts","workitemDetails","workitemHistory","resolution","PhoneNumberItem","suggested","dialWorkitem","autoDialTimer","useTimerById","uiTimerValue","countdown","autoDialIndicator","workitem_auto_dial_message_text","clickHandler","workitemItemId","workitem_phone_number_call_tooltip","WorkitemContacts","phoneNumbers","suggestedPhone","allowed","numberData","WorkitemDetails","fullInfo","EmptyActivityHistoryView","empty_activity_message_title","empty_activity_message_description","WorkitemHistory","selectedFilter","setInteractionUIItemState","emptyHistory","filterDisplayLabels","workitem_history_filter_all","workitem_history_filter_calls","workitem_history_filter_messages","handleFilterClick","activityFilters","assertFilterType","activityFilter","filterType","Chip","InteractionTabContent","tabContent","routeTabContent","InteractionTabs","useAssociatedChatInteractionId","useInteractionUIActiveTab","notifications","itemInWrapUpState","errorAboutMissingDisposition","interactionIdRef","setCommunicatorFloatingState","setFloatingState","useAutoSelectResolutionTab","firstTabId","data-test-id","InternalScenarioMessages","internalMessageData","ActiveInteractionContentArea","activeItemIsInternalMessage","InteractionsPage","data-interaction-page","useUnreadAmount","unreadExternal","recentBadgeStyles","MainPageNav","tabMetaInfo","noVisibleInteractionsOnMainPannel","missedCallsAmount","navTabs","isInteractionTabActive","getSVGStylesIfActive","listInner","active_interaction","IconInteractionDetails","IconDirectory","SYS_USE_FAVORITES_TAB","IconStar24","SYS_USE_RECENT_TAB","IconRecent","UnreadBadge","MissedCallsBadge","addressBook_calendar","IconCalendar","newTabID","topBorder","MainPageTitle","pageTitles","addressBook_contact_details","addressBook_cases","addressBook_dial_pad","addressBook_knowledge_base","addressBook_help","ErrorFallback","unhandled_router_error","wrapWithErrorBoundary","Component","mainPageContentConfig","resetMissedCalls","cleanPageParams","numPressed","phoneChannel","dialpadInput","searchFavoriteNumber","addPageParams","Help","CommunicatorContent","hide","notificationsToRender","delayed","notification","SmTransition","cloneElement","onDismiss","warning","AriaStatus","AppMinimized","activePageName","onMenuItemClick","onSettingsClick","onAgentStateClick","onInteractionClick","useInternalChats","activeItemMediaType","selectedAgentStatusOption","useAgentStateSelectedOption","handleItemKeyPress","isHTMLButtonElement","mainMenuItems","route","IconNavRecents","IconNavFavorites","IconNavDirectory","IconNavDial","interactionCallbacks","itemStyles","vertical","secondary","AgentStatusIcon","busyMediaType","agentStatusOption","IconNavSettings","internalChatData","unreadInternal","getUnread","random","defaultModalsConfig","__ts__","hideWhileActiveInteraction","calendar_event_notification","quality_management_monitor","useRemoteAssistStateSubscription","connector","useRemoteAssistStateConnector","itemsRef","onSessionStarted","clientUrl","realItem","internalChatItem","useStateSubscriptions","navigationStateRef","openInteractionsPage","toggleRightPanel","toggleSettings","isMinimized","setIsMinimized","useNavigationStateRef","onItemAccepted","onActiveItemChanged","onSwitchItemChannel","onNavigateToInteraction","useBPClientStateSubscription","integrationApiConnector","useIntegrationApiStateConnector","onSetWidgetMinimized","widgetMinimized","useIntegrationApiSubscription","widgetMinimizedChange","closeMenu","openSettingsMenu","handleMenuKeyPress","MenuItem","allowRender","enabledOffline","disabledTitle","propsWithOffline","useEnabledInOffline","data-item","MainMenu","menuProps","mainMenu","getMenuItemContentWithIconAndName","misseCallsAmount","navigateTo","IconNavCalendar","kb_heading","settings","IconHelp","help","useMainMenu","handlerMenuKeys","useMenuKeysHandler","UserProfilePreview","persistentAvatar","USER_PROFILE","sidebar_ext","sidebar_profile_link","isLowRise","activeCallStates","useSettingsMenu","isSsoEnabled","useInteractionState","hasActiveCalls","isAudioDevicesLinkVisible","isEMIAvailable","msTeamsIntegrationEnabled","useSettingsHandlers","openChangePasswordModal","useOpenChangePasswordModal","openLogoutModal","useOpenLogoutModal","openEMIAccountsModal","useOpenEMIAccountsModal","openUserProfileModal","useOpenUserProfileModal","openKeyboardShortcutsModal","useOpenKeyboardShortcutsModal","openPredefinedMessagesModal","useOpenPredefinedMessagesModal","openVolumeModal","useOpenVolumeModal","openPreferencesModal","useOpenPreferencesModal","openAboutModal","useOpenAboutModal","openAudioDevicesModal","useOpenAudioDevicesModal","useOpenPrerecordedMessagesModal","handlePredefinedMessagesClick","afterClose","handlePhoneSelectionClick","handleAudioDevicesClick","handleChangePasswordClick","handleLogoutClick","handleUserProfileClick","handleAboutClick","handleKeyboardShortcutsClick","handlePrerecordedMessagesClick","handlePreferencesClick","handleEMIAccountsClick","handleRingtonesAndAlertsVolumeClick","SETTINGS","settings_menu_go_back","settings_menu_phoneDevice","menu_phone_devices_disabled_tooltip","settings_menu_audioDevices","CHANGE_PASSWORD_DIALOG_BOX","changePassword_heading","settings_menu_chatCannedResponses","settings_menu_preferences","tab_enterprise_messaging_accounts_heading","VOICE_PROMPTS_DIALOG_BOX","edit_voice_prompts_heading","settings_menu_shortcuts","settings_menu_ringtone_volume","settings_menu_about","logout","SettingsMenu","settingsMenu","SidebarRight","rightPanelOpened","settingsOpened","useSidebarRightContent","SmSidebar","data-page-section","delayFocus","AriaDescription","aria-live","NotificationItem","modalItem","firstNameFromDisplayName","lastNameFromDisplayName","rejectItem","acceptItem","onReject","onAccept","onAcceptAndOpen","onDial","SmListItem","IconCampaignNotification","IconChatNotification","INCOMING_CALL_DIALOG_BOX","incomingInteraction_reject","positive","incomingInteraction_accept","dial_number","button_accept_and_open_label","CompactNotificationModal","modalItemIds","useModalInteractionIds","subsequentModalItems","modalItemId","foundItem","isDeliveryPending","notificationItemsUI","InteractionModalsAutoOpener","useInteractionModalsAutoOpener","CalendarUserSelectLoader","DirectChatLinkSafariNotification","copyLinkBadgeTrigger","setCopyLinkBadgeTrigger","onNotificationClick","direct_chat_copy_link_safari_notification","direct_chat_invitation_link_copied_label","MainPageHeader","toggleLeftPanel","directoryCreateContactMode","titles","CRM","crm_case_tab","useNavigationTitle","integrationKey","requestRecordOnScreen","chatLinkRequestInProcess","setChatLinkRequestInProcess","handleMenuItemClick","requestDirectChatLink","requestBody","crmRecord","crmType","crmObjectType","crmObjectId","apiRequests","requestDirectChatInvitationLink","expiresIn","ActiveStatusControlCommunicator","SmHeader","aria-level","DIRECT_CHAT_INVITATION","request_direct_chat_invitation_link_button_tooltip","IconDirectChatInvitation","menu_icon_tooltip","OfflineBar","MainPageInteractionsList","deliveredNonParalleledItemIds","useNonParalleledDeliveredItems","useSelectedItems","InteractionContextProvider","SidebarLeft","leftPanelOpened","closeSideBar","AgentStatuses","closePanel","CalendarModalsAutoOpenerLoader","MainPage","tenantId","useAppConfigStateMethods","checkWhetherToRenderReportProblemButton","hasNotification","useClosePanelsOnNotifications","useAppDefaultSettings","offerPhoneSelection","prevOfferPhoneSelection","useOpenSettingsOnPhoneSelectionDialogClosed","useIncomingChatMessageAudioNotifications","CAN_START_INTERNAL_CHAT","useMinimized","onMinimizedMenuItemClick","onMinimizedSettingsClick","onMinimizedAgentStateClick","onMinimizedInteractionClick","activateInteractionItem","DndProvider","backend","HTML5Backend","dimmed","App","useUIState","isTabNavHighlighted","SmContainer","ToastProvider","Modals","AriaStatuses","convertItem","callDirection","callMuted","callRecording","acwStartTime","getItemNotes","dispositionData","playbackUrl","getPlaybackUrl","recordingUrl","getRecordingUrl","DNIS","ANI","getPhoneParties","cp","chatPartyTypes","attachedData","convertTeam","directoryObject","isSupervised","supervised","convertService","requireDisposition","requireDispositions","convertDIDNumber","isVoice","convertDisposition","convertScreenRecordingState","vncInit","started","serverErrorCodes","convertServerError","convertPhoneCapabilities","canAnswer","ApiRequestTracker","pendingRequests","newPendingRequest","requestType","pendingRequest","requestsOfType","resolvePendingRequest","requestId","requestData","req","delIndex","rejectPendingRequest","resolveAllPendingRequests","rejectAllPendingRequests","createApiRequestTracker","adErrorToApiError","noChatInService","resultError","noChannelInService","noService","selfCall","noDIDPermissionsSMS","noDIDPermissionsCall","messageTooBig","bpLog","connectIntegrationApiAuthorized","currentTabDataProvider","sessionConnector","sharedConnectors","agentStateMethods","agentStateConnector","directoryStateConnector","servicesDispositionsStateMethods","servicesDispositionsStateConnector","didNumbersStateMethods","didStateConnector","bpClientStateMethods","bpClientStateConnector","interactionChatStateMethods","apiRequestTracker","newUnknownItems","apiDispatchedItems","transferredDataItems","agentState","interactionState","getInitialInteractionState","sessionState","getInitialSessionState","servicesDispositionsState","getInitialServicesDispositionsState","didNumbersState","getInitialDidState","timezonesState","getInitialTimezonesState","directoryState","getInitialDirectoryState","bpClientState","getInitialBPClientState","remoteAssistState","getInitialRASharedState","apiState","getInitialIntegrationApiState","formatFullNameBase","getService","getDIDNumber","getDIDNumberErrorRaw","getServiceErrorsRaw","serviceRequiredForOutboundCall","serviceDIDErrors","getNumberErrorsRaw","selfPhoneNumber","getItem","currItem","ApiError","getRemoteAssistSessionPin","getRemoteAssistSessionId","requireLogin","requirePrivileges","privilege","onAgentStateChange","newAgentState","agentStateChange","agentStateSubscription","onInitialState","newState","stateUpdate","onInteractionStateChange","newInteractionState","activeInteractionSwitched","onInteractionItemNewOrChange","oldItem","oldInteractionData","newInteractionData","isEqual","interactionStateChange","newInteraction","associatedCrmRecords","pendingAssociatedObjects","removePendingAssociatedObjects","addAssociatedObject","interactionStateSubscription","onNewItem","onItemChanged","onItemRemoved","interactionData","interactionRemoved","activityData","convertActivity","saveActivityRecord","onActivateItemAttempt","mainItem","prevMainItem","activeCrmScreen","showScreen","servicesDispositionsStateSubscription","didNumbersStateSubscription","onSessionStateChange","prevSessionState","newSessionState","oldCaps","newCaps","phoneCapabilitiesChange","loginError","sessionStateSubscription","login","agentId","username","prevState","onLogin","onLogout","serverError","onBadCallQualityAlert","callAudioQualityAlert","timezonesStateSubscription","timezonesStateConnector","directoryStateSubscription","onBpClientStateChange","newBpClientState","oldSRState","screenRecording","newSRState","screenRecordingStateChange","softphone","softphoneStatusChange","audioDevice","output","audioDeviceChange","bpClientStateSubscription","remoteAssistStateSubscription","remoteAssistStateConnector","onIntegrationApiStateChange","newApiState","setIntegrationApiActive","integrationApiOriginalSubscription","integrationApiSubscription","onGetConfig","clickAction","onStartCall","phonenumber","initialObjects","adapterParams","adapterUrlParams","deferredDial","setDeferredDialData","showInteractionPage","onStartChat","promise","addPendingAssociatedObjects","onStartEmail","_email","_initialObjects","onGetAgentState","onSetAgentState","notReadyReasons","onSwitchActiveInteraction","onSetVariable","setScenarioVariables","onGetVariables","getScenarioVariables","variableNames","onLeaveInteraction","disconnectItem","onCompleteInteraction","currentService","rescheduleDate","isBefore","agentChatClose","callState","onLeaveAndCompleteInteraction","serviceData","requestedDisposition","disp","addNote","onGetServicesList","storedServices","requestServices","onGetService","onSetService","serviceById","srv","serviceByName","onGetDIDNumbersList","requestDIDNumbers","onGetDIDNumber","didNumberId","didNumberData","onSetDIDNumber","did","didNumberById","didNumberByNumber","onGetDispositionsList","requestServiceDispositions","disps","onSetDisposition","onAddInteractionAssociatedObject","object","dataWithIntegrationKey","onSetInteractionActiveScreen","screen","setActiveCrmScreen","onConsultCall","onBlindTransfer","customTransferData","updateScreenPopData","blindTransfer","onTransfer","consultMainItemId","completeTransfer","onAddNote","onUpdateNote","onReplaceNote","replaceNote","password","isAuthorizing","forceLogin","host","onSetRescheduleWindow","timezoneCode","numberToDial","fromTime","untilTime","onGetPhoneDevicesList","availablePhoneTypes","onGetPhoneDevice","selectedPhoneDevice","onSetPhoneDevice","submitPhoneTypeSelection","onGetLoginState","onSendDtmf","onAcceptInteraction","onRejectInteraction","onInviteToCallConference","singleStepConference","onRemoveFromCallConference","partyForRemoval","onDestroyCallConference","destroyCallConference","onInviteToChatConference","inviteToChat","onRemoveFromChatConference","onMergeAllCallsIntoConference","mergeAllCallsIntoConference","onGetTeams","onGetTeamMembers","currTeam","requestTeamUsers","convertTeamMember","onSetCallHold","holdItem","resumeItem","onSetCallRecording","recordCall","stopRecordingCall","onSetCallMute","muteItem","unmuteItem","onSetScreenRecordingMute","setScreenRecordingMute","onGetScreenRecordingState","onSendChatMessage","getMessageErrorsRaw","onSuggestChatMessage","allowOverwrite","setChatMessageSuggestion","onGetAgentNotReadyReasons","onActivatePage","activateTab","onGetInteractionsState","onSetCallRecordingMute","mute","setRecordingMuteForItem","muteCallRecording","unmuteCallRecording","onSetDialCandidates","IntegrationApiAuthorizedInitializer","interactionStateRef","useInteractionStateRef","setDialPadValue","uiSpecificRef","subscriptions","IntegrationApiBaseInitializer","throwNotLoggedIn","connectIntegrationApiBase","CommunicatorStandaloneProviders","createProviderWrapper","CommunicatorApp","createPlatformSpecific","CommunicatorProviders","CommunicatorWidget","ParallelChatInteractionProviders","ParallelChatInteraction","parallelItem","parallelItemsCount","parallelItemsCountAtom","setProperty","isParallelInteractionContext","decreaseWidthFactor","no_new_interactions","next_message_interaction_show"],"sourceRoot":""}