!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s=2)}({"../../node_modules/lodash/fromPairs.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/lodash/fromPairs.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r}},"../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},"../../node_modules/uuid/lib/rng-browser.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/rng-browser.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},"../../node_modules/uuid/v4.js":
/*!*************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/v4.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lib/rng */"../../node_modules/uuid/lib/rng-browser.js"),o=n(/*! ./lib/bytesToUuid */"../../node_modules/uuid/lib/bytesToUuid.js");e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var s=0;s<16;++s)t[i+s]=a[s];return t||o(a)}},"../adapters-public-api-types/dist/types.js":
/*!****************************************!*\
  !*** .-public-api-types/dist/types.js ***!
  \****************************************/
/*! exports provided: requestMessages, callbackMessages, responseSuffix, requestResponseMessages, callbackResponseMessages, resultErrorCodes, serverErrorCodes, agentStates, interactionStates, interactionTypes, chatChannelTypes, callDirections, phoneDevices, dispositionTypes, chatPartyTypes, interactionOriginations, phoneTypes */function(e,t,n){"use strict";n.r(t),n.d(t,"requestMessages",(function(){return r})),n.d(t,"callbackMessages",(function(){return o})),n.d(t,"responseSuffix",(function(){return i})),n.d(t,"requestResponseMessages",(function(){return a})),n.d(t,"callbackResponseMessages",(function(){return s})),n.d(t,"resultErrorCodes",(function(){return c})),n.d(t,"serverErrorCodes",(function(){return l})),n.d(t,"agentStates",(function(){return u})),n.d(t,"interactionStates",(function(){return d})),n.d(t,"interactionTypes",(function(){return p})),n.d(t,"chatChannelTypes",(function(){return E})),n.d(t,"callDirections",(function(){return _})),n.d(t,"phoneDevices",(function(){return f})),n.d(t,"dispositionTypes",(function(){return h})),n.d(t,"chatPartyTypes",(function(){return T})),n.d(t,"interactionOriginations",(function(){return C})),n.d(t,"phoneTypes",(function(){return g}));var r=["GET_LOGIN_STATE","LOGIN","LOGOUT","GET_AGENT_STATE","SET_AGENT_STATE","ACCEPT_INTERACTION","REJECT_INTERACTION","START_CALL","START_CHAT","START_EMAIL","SEND_DTMF","CONSULT_CALL","BLIND_TRANSFER","TRANSFER","LEAVE_INTERACTION","COMPLETE_INTERACTION","LEAVE_AND_COMPLETE_INTERACTION","SWITCH_ACTIVE_INTERACTION","INVITE_TO_CALL_CONFERENCE","REMOVE_FROM_CALL_CONFERENCE","DESTROY_CALL_CONFERENCE","INVITE_TO_CHAT_CONFERENCE","REMOVE_FROM_CHAT_CONFERENCE","MERGE_ALL_CALLS_INTO_CONFERENCE","GET_TEAMS","GET_TEAM_MEMBERS","GET_SERVICES_LIST","GET_SERVICE","SET_SERVICE","GET_DID_LIST","GET_DID","SET_DID","GET_DISPOSITIONS_LIST","SET_DISPOSITION","SET_RESCHEDULE","ADD_NOTE","UPDATE_NOTE","REPLACE_NOTE","GET_CONFIG","GET_VARIABLES","SET_VARIABLE","ADD_INTERACTION_ASSOCIATED_OBJECT","SET_INTERACTION_ACTIVE_SCREEN","GET_PHONE_DEVICES_LIST","GET_PHONE_DEVICE","SET_PHONE_DEVICE","SET_CALL_HOLD","SET_CALL_RECORDING","SET_CALL_MUTE","SET_SCREEN_RECORDING_MUTE","GET_SCREEN_RECORDING_STATE","SET_WIDGET_MINIMIZED","SEND_CHAT_MESSAGE","SUGGEST_CHAT_MESSAGE","GET_AGENT_NOT_READY_REASONS","ACTIVATE_PAGE","GET_INTERACTIONS_STATE","SET_CALL_RECORDING_MUTE","SET_DIAL_CANDIDATES"],o={ON_LOGIN:{needResponse:!1},ON_LOGOUT:{needResponse:!1},ON_NEW_INTERACTION:{needResponse:!1},ON_INTERACTION_REMOVED:{needResponse:!1},ON_INTERACTION_STATE_CHANGE:{needResponse:!1},ON_ACTIVE_INTERACTION_SWITCHED:{needResponse:!1},ON_AGENT_STATE_CHANGE:{needResponse:!1},ON_REQUEST_TRANSFER_DATA:{needResponse:!0},ON_LOAD_TRANSFER_DATA:{needResponse:!1},ON_GET_KNOWLEDGE_BASE_FOLDER:{needResponse:!0},ON_SEARCH_KNOWLEDGE_BASE:{needResponse:!0},ON_GET_KNOWLEDGE_BASE_ARTICLE:{needResponse:!0},ON_OPEN_RECORD:{needResponse:!1},ON_SEARCH_RECORDS:{needResponse:!1},ON_SHOW_SCREEN:{needResponse:!1},ON_SCREEN_RECORDING_STATE_CHANGE:{needResponse:!1},ON_WIDGET_MINIMIZED_CHANGE:{needResponse:!1},ON_SERVER_ERROR:{needResponse:!1},ON_SOFTPHONE_STATUS_CHANGE:{needResponse:!1},ON_AUDIO_DEVICE_CHANGE:{needResponse:!1},ON_PHONE_CAPABILITIES_CHANGE:{needResponse:!1},ON_CALL_AUDIO_QUALITY_ALERT:{needResponse:!1},ON_WEB_SCREEN_POP_CUSTOM:{needResponse:!0},ON_SAVE_ACTIVITY_RECORD:{needResponse:!1},ON_VALIDATE_ASSOCIATED_RECORDS:{needResponse:!0},ON_REQUEST_RECORD_INFO:{needResponse:!0},ON_REQUEST_RECORD_ON_SCREEN:{needResponse:!0}},i="_RESPONSE",a=r.map((function(e){return e+i})),s=Object.keys(o).reduce((function(e,t){return o[t].needResponse&&e.push(t+i),e}),[]),c={not_enough_privileges:1,not_logged_in:2,invalid_args:3,logged_without_phone:4,banned:5,api_not_answer:6,invalid_request:7,timeout:8,no_chat_in_service:9,empty_number:10,no_service:11,self_call:12,no_interaction:13,api_method_not_implemented:14,not_suitable_state:15,no_disposition:16,object_not_found:17,no_permissions_did_sms:18,no_permissions_did_call:19,no_channel_in_service:20,unknown_error:99},l={forced_logout_by_other_client:100,forced_logout_by_supervisor:101,invalid_request:102,phone_not_registered:103,phone_not_in_dial_plan:104,tenant_disabled:105,destination_user_not_logged:106,user_disabled_or_deleted:107,user_already_logged_in:108,invalid_credentials:109,other_user_logged_with_phone:110,invalid_token:111,logged_users_limit_reached:112,already_logged_in_with_the_same_session:113,not_enough_privileges:114,sip_server_error:200,unknown_error:300},u=["supervising","ready","not_ready","busy","after_call_work"],d=["unknown","queued","ivr","wrap_up","wrap_up_hold","delivered","delivery_pending","hold","completed"],p=["voice","chat","email"],E=["telegram","line","facebook","web","nexmo","sms","viber","twitter","wechat","whatsapp"],_=["inbound","outbound"],f=["phone_type_browser","phone_type_external","phone_type_hard_custom","phone_type_hard_default","phone_type_nailed","phone_type_none","phone_type_soft_secure","phone_type_microsoft_teams","phone_type_soft_unsecure"],h=["SUCCESS","FAILURE","CONTINUE","SPAM","DO_NOT_CALL"],T=["internal","external"],C=["dialpad","dialpad-search","directory","recent","favorites","workitem","interaction","contact-profile","help","conference","auto","integration-api"],g=["mobile","business","home","fax","other"]},"../lib-uuid/dist/index.js":
/*!*********************************!*\
  !*** ../lib-uuid/dist/index.js ***!
  \*********************************/
/*! exports provided: uuid */function(e,t,n){"use strict";n.r(t);var r=n(/*! uuid/v4 */"../../node_modules/uuid/v4.js"),o=n.n(r);n.d(t,"uuid",(function(){return o.a}))},"./src/adc-client-api.ts":
/*!*******************************!*\
  !*** ./src/adc-client-api.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AgentDesktopClientAPIImpl=void 0;var o=r(n(/*! lodash/fromPairs */"../../node_modules/lodash/fromPairs.js")),i=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),a=n(/*! @bpinc/lib-uuid */"../lib-uuid/dist/index.js"),s=n(/*! ./utils */"./src/utils/index.ts"),c=function(){if(window.document.currentScript)return window.document.currentScript.src;var e=document.getElementsByTagName("script");return e[e.length-1].src}(),l=s.utils.extractURLParams(window.location.href).adcUrl||new URL(c).origin,u=function(){function e(e){var t=this;void 0===e&&(e={}),this.maximizedIframeWidth=null,this.adcFrame=null,this.adcFrameOrigin="",this.pendingMessages=[],this.integrationKey=e.integrationKey||a.uuid(),this.connectionEstablished=!1,this.adcIsReady=!1,this.messageLoggers=[],this.disableNewInteractionPopup=!!e.disableNewInteractionPopup,this.messageHandlers=o.default(Object.keys(i.callbackMessages).map((function(e){return[e,[]]}))),this.responseCallbacks=o.default(i.requestMessages.map((function(e){return[e+i.responseSuffix,{}]}))),this.prepareAdcIframe(e),this.registerListeners(),this.on("ON_WIDGET_MINIMIZED_CHANGE",(function(e){t.adcFrame&&(e?(t.maximizedIframeWidth=t.adcFrame.getAttribute("width"),t.adcFrame.setAttribute("width","44px")):t.adcFrame.setAttribute("width",t.maximizedIframeWidth||""))})),this.on("ON_WEB_SCREEN_POP_CUSTOM",(function(){return!1})),this.on("ON_VALIDATE_ASSOCIATED_RECORDS",(function(){return{valid:!0}}))}return e.prototype.injectMessageLogger=function(e){this.messageLoggers.push(e)},e.prototype.prepareAdcIframe=function(e){if(e.adcFrame){var t=e.adcFrame;t instanceof HTMLIFrameElement&&t.src?this.adcFrame=t:console.error("@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\n","Valid Communicator iframe would be created automatically")}if(!this.adcFrame){var n=null;if(e.mountRoot){var r=e.mountRoot;r instanceof HTMLElement?n=r:console.error("@@@ `mountRoot` is not HTMLElement.\n","Communicator iframe would be mounted to the `document.body` as a fallback scenario")}n||(n=document.body),this.adcFrame=document.createElement("iframe"),this.adcFrame.title="Agent Desktop Communicator",this.adcFrame.id="adc_frame",this.adcFrame.style.border="none",this.adcFrame.allow="microphone; camera; geolocation",this.adcFrame.onerror=function(){console.error("@@@ Adapter failure: unable to load AD Communicator")},e.standalone?(this.adcFrame.width="1",this.adcFrame.height="1",this.adcFrame.style.zIndex="-1000",this.adcFrame.style.position="absolute",this.adcFrame.style.top="-1000px",this.adcFrame.style.left="-1000px",this.adcFrame.src=l+"/agent/communicator/no-ui/"+location.search):(this.adcFrame.style.width="500px",this.adcFrame.style.height="100%",this.adcFrame.src=l+"/agent/communicator/"+location.search),n.appendChild(this.adcFrame)}this.adcFrameOrigin=new URL(this.adcFrame.src).origin},e.prototype.handleIncomingMessage=function(e,t,n){var r,o,a=this;console.log("@@@ Handle: ",e,t,n);var c=this.messageHandlers[e];if(c.length){var l=c.map((function(t){try{return t.apply(void 0,n)}catch(t){console.error('@@@ Error in the event "'+e+'" handler:',t)}}));(null===(o=i.callbackMessages[e])||void 0===o?void 0:o.needResponse)&&s.utils.waitResolveAll(l).then((function(n){var r=n.reduce((function(e,t){return"fulfilled"===t.status&&void 0!==t.value&&e.push(t.value),e}),[]),o=r.length?r[r.length-1]:void 0;a.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[o]})}))}else(null===(r=i.callbackMessages[e])||void 0===r?void 0:r.needResponse)&&this.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[],noHandlers:!0})},e.prototype.registerListeners=function(){var e=this;window.addEventListener("message",(function(t){var n;if(t.origin===e.adcFrameOrigin){var r=t.data||{},o=r.type,a=r.uid,s=r.params;if(o){t.stopImmediatePropagation();try{if("hello"===o){e.messageLoggers.forEach((function(e){return e(o,s)})),e.connectionEstablished=!0;var c={uid:a,type:"hi",params:[e.integrationKey,location.search,e.disableNewInteractionPopup]};if(!(null===(n=e.adcFrame)||void 0===n?void 0:n.contentWindow))throw new Error("adcFrame is not defined - that should not be possible");return e.messageLoggers.forEach((function(e){return e(c.type,c.params)})),void e.adcFrame.contentWindow.postMessage(c,e.adcFrameOrigin)}if("ready"===o)return e.messageLoggers.forEach((function(e){return e(o,s)})),e.adcIsReady=!0,void setTimeout((function(){e.pendingMessages.forEach((function(t){e.postMessageToAdc(t)})),e.pendingMessages=[]}));if(!e.adcIsReady)return;if(Object.keys(i.callbackMessages).includes(o))e.messageLoggers.forEach((function(e){return e(o,s)})),e.handleIncomingMessage(o,a,s);else if(i.requestResponseMessages.includes(o)){e.messageLoggers.forEach((function(e){return e(o,s)}));var l=e.responseCallbacks[o];if(l&&l[a]){var u=l[a];delete l[a],Promise.resolve().then((function(){return u(s)}))}}}catch(t){console.error("@@@ Error: ",t.message)}}}}))},e.prototype.runResponseTimeoutWatch=function(e,t,n){var r=this;setTimeout((function(){var o=r.responseCallbacks[e+i.responseSuffix];if(o[t]){delete o[t];var a='Response from Communicator for event "'+e+"\" wasn't received in the specified timeout 20000 ms";console.error("@@@ "+a),n({status:"error",error:{code:6,name:"api_not_answer",message:a}})}}),2e4)},e.prototype.postMessageToAdc=function(e){null!==this.adcFrame&&this.adcFrame.contentWindow&&this.adcIsReady?(this.messageLoggers.forEach((function(t){return t(e.type,e.params)})),"LOGIN"===e.type?console.log("@@@ ADAPTER SEND MESSAGE: LOGIN"):console.log("@@@ ADAPTER SEND MESSAGE: ",e),this.adcFrame.contentWindow.postMessage(e,this.adcFrameOrigin)):(console.log("@@@ ADAPTER: ADC is not ready, add pending message:",e),this.pendingMessages.push(e))},e.prototype.apiCall=function(e,t){var n=this;return new Promise((function(r){var o=a.uuid();n.postMessageToAdc({uid:o,type:e,params:t}),n.responseCallbacks[e+i.responseSuffix][o]=r,n.runResponseTimeoutWatch(e,o,r)}))},e.prototype.getLoginState=function(){return this.apiCall("GET_LOGIN_STATE")},e.prototype.login=function(e,t){return this.apiCall("LOGIN",[e,t])},e.prototype.logout=function(){return this.apiCall("LOGOUT")},e.prototype.getAgentState=function(){return this.apiCall("GET_AGENT_STATE")},e.prototype.setAgentState=function(e,t){return this.apiCall("SET_AGENT_STATE",[e,t])},e.prototype.acceptInteraction=function(e){return this.apiCall("ACCEPT_INTERACTION",[e])},e.prototype.rejectInteraction=function(e){return this.apiCall("REJECT_INTERACTION",[e])},e.prototype.startCall=function(e,t){return this.apiCall("START_CALL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.startChat=function(e,t,n){return this.apiCall("START_CHAT",[e,t,n?n instanceof Array?n:[n]:[]])},e.prototype.startEmail=function(e,t){return this.apiCall("START_EMAIL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.sendDtmf=function(e,t){return this.apiCall("SEND_DTMF",[e,t])},e.prototype.consultCall=function(e){return this.apiCall("CONSULT_CALL",[e])},e.prototype.blindTransfer=function(e,t,n){return this.apiCall("BLIND_TRANSFER",[e,t,n])},e.prototype.transfer=function(e){return this.apiCall("TRANSFER",[e])},e.prototype.leaveInteraction=function(e){return this.apiCall("LEAVE_INTERACTION",[e])},e.prototype.completeInteraction=function(e){return this.apiCall("COMPLETE_INTERACTION",[e])},e.prototype.leaveAndCompleteInteraction=function(e,t,n){return this.apiCall("LEAVE_AND_COMPLETE_INTERACTION",[e,t,n])},e.prototype.switchActiveInteraction=function(e){return this.apiCall("SWITCH_ACTIVE_INTERACTION",[e])},e.prototype.inviteToCallConference=function(e,t,n){return this.apiCall("INVITE_TO_CALL_CONFERENCE",[e,t,n])},e.prototype.removeFromCallConference=function(e,t){return this.apiCall("REMOVE_FROM_CALL_CONFERENCE",[e,t])},e.prototype.destroyCallConference=function(e){return this.apiCall("DESTROY_CALL_CONFERENCE",[e])},e.prototype.inviteToChatConference=function(e,t){return this.apiCall("INVITE_TO_CHAT_CONFERENCE",[e,t])},e.prototype.removeFromChatConference=function(e,t){return this.apiCall("REMOVE_FROM_CHAT_CONFERENCE",[e,t])},e.prototype.mergeAllCallsIntoConference=function(e){return this.apiCall("MERGE_ALL_CALLS_INTO_CONFERENCE",[e])},e.prototype.getTeams=function(){return this.apiCall("GET_TEAMS")},e.prototype.getTeamMembers=function(e){return this.apiCall("GET_TEAM_MEMBERS",[e])},e.prototype.getServicesList=function(){return this.apiCall("GET_SERVICES_LIST",[])},e.prototype.getService=function(){return this.apiCall("GET_SERVICE",[])},e.prototype.setService=function(e){return this.apiCall("SET_SERVICE",[e])},e.prototype.getDIDNumbersList=function(){return this.apiCall("GET_DID_LIST",[])},e.prototype.getDIDNumber=function(){return this.apiCall("GET_DID",[])},e.prototype.setDIDNumber=function(e){return this.apiCall("SET_DID",[e])},e.prototype.getDispositionsList=function(e){return this.apiCall("GET_DISPOSITIONS_LIST",[e])},e.prototype.setDisposition=function(e,t){return this.apiCall("SET_DISPOSITION",[e,t])},e.prototype.addNote=function(e,t){return this.apiCall("ADD_NOTE",[e,t])},e.prototype.updateNote=function(e,t){return this.apiCall("UPDATE_NOTE",[e,t])},e.prototype.replaceNote=function(e,t){return this.apiCall("REPLACE_NOTE",[e,t])},e.prototype.setRescheduleWindow=function(e,t){return this.apiCall("SET_RESCHEDULE",[e,t])},e.prototype.getConfig=function(){return this.apiCall("GET_CONFIG")},e.prototype.setVariable=function(e,t,n){return this.apiCall("SET_VARIABLE",[e,t,n])},e.prototype.getVariables=function(e,t){return this.apiCall("GET_VARIABLES",[e,t])},e.prototype.addInteractionAssociatedObject=function(e,t){return this.apiCall("ADD_INTERACTION_ASSOCIATED_OBJECT",[e,t])},e.prototype.setInteractionActiveScreen=function(e,t){return this.apiCall("SET_INTERACTION_ACTIVE_SCREEN",[e,t])},e.prototype.getPhoneDevicesList=function(){return this.apiCall("GET_PHONE_DEVICES_LIST",[])},e.prototype.getPhoneDevice=function(){return this.apiCall("GET_PHONE_DEVICE",[])},e.prototype.setPhoneDevice=function(e){return this.apiCall("SET_PHONE_DEVICE",[e])},e.prototype.setCallHold=function(e,t){return this.apiCall("SET_CALL_HOLD",[e,t])},e.prototype.setCallRecording=function(e,t){return this.apiCall("SET_CALL_RECORDING",[e,t])},e.prototype.setCallMute=function(e,t){return this.apiCall("SET_CALL_MUTE",[e,t])},e.prototype.setScreenRecordingMute=function(e){return this.apiCall("SET_SCREEN_RECORDING_MUTE",[e])},e.prototype.getScreenRecordingState=function(){return this.apiCall("GET_SCREEN_RECORDING_STATE")},e.prototype.setWidgetMinimized=function(e){return this.apiCall("SET_WIDGET_MINIMIZED",[e])},e.prototype.sendChatMessage=function(e,t){return this.apiCall("SEND_CHAT_MESSAGE",[e,t])},e.prototype.suggestChatMessage=function(e,t,n){return this.apiCall("SUGGEST_CHAT_MESSAGE",[e,t,n])},e.prototype.getAgentNotReadyReasons=function(){return this.apiCall("GET_AGENT_NOT_READY_REASONS")},e.prototype.activatePage=function(){return this.apiCall("ACTIVATE_PAGE",[])},e.prototype.getInteractionsState=function(){return this.apiCall("GET_INTERACTIONS_STATE",[])},e.prototype.setCallRecordingMute=function(e,t){return this.apiCall("SET_CALL_RECORDING_MUTE",[e,t])},e.prototype.setDialCandidates=function(e){return this.apiCall("SET_DIAL_CANDIDATES",[e])},e.prototype.on=function(e,t){this.messageHandlers[e].push(t)},e.prototype.remove=function(e,t){var n=this.messageHandlers[e].indexOf(t);-1!==n&&this.messageHandlers[e].splice(n,1)},e}();t.AgentDesktopClientAPIImpl=u,window.brightpattern={AdApi:u}},"./src/integrations/msdyn365/loadExternalApi.ts":
/*!******************************************************!*\
  !*** ./src/integrations/msdyn365/loadExternalApi.ts ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadCrmApi=void 0;var r=n(/*! ../../utils */"./src/utils/index.ts"),o=window.location.href,i=r.utils.extractURLParams(o).crmDomain;i.startsWith("https://")||(i="https://"+i),t.loadCrmApi=new Promise((function(e,t){i||t("Missing required URL parameter 'crmDomain'");var n=document.createElement("script");document.head.insertAdjacentElement("beforeend",n),n.addEventListener("load",e),n.addEventListener("error",t),n.dataset.crmurl=i,n.dataset.cifid="CIFMainLibrary",n.type="text/javascript",n.src=i+"/webresources/Widget/msdyn_ciLibrary.js"}))},"./src/integrations/omnichannel/index.ts":
/*!***********************************************!*\
  !*** ./src/integrations/omnichannel/index.ts ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(/*! ./integration */"./src/integrations/omnichannel/integration.ts").registerOmnichannelIntegration()},"./src/integrations/omnichannel/integration.ts":
/*!*****************************************************!*\
  !*** ./src/integrations/omnichannel/integration.ts ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerOmnichannelIntegration=t.activityTables=void 0;var a=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),s=n(/*! ../../adc-client-api */"./src/adc-client-api.ts"),c=n(/*! ../msdyn365/loadExternalApi */"./src/integrations/msdyn365/loadExternalApi.ts"),l=n(/*! ../../utils */"./src/utils/index.ts");t.activityTables={voice:"phonecall",chat:"bpattern_messaging_session",email:"email"};var u=function(e){return e.filter((function(e){return!!e.content})).map((function(e){return{id:e.knowledgearticleid,type:"article",title:e.title,text:e.content}}))},d={};t.registerOmnichannelIntegration=function(){var e,n=new s.AgentDesktopClientAPIImpl({integrationKey:"omnichannel"}),p=[];c.loadCrmApi.then((function(){console.log("##############Microsoft.CIFramework: ",window.Microsoft),console.log("###READY!STEADY!GO!");var s=window.Microsoft.CIFramework,c=null,E=function(e){if("string"==typeof e){try{var t=JSON.parse(e);if(t&&t.message)return t.message}catch(e){}return e}return e&&e.message||e};s.setMode(1).catch((function(e){return console.error("#ERROR-CRM-SET-MODE: ",E(e))})),s.setWidth(500).catch((function(e){return console.error("#ERROR-CRM-SET-WIDTH: ",E(e))})),n.on("ON_LOGIN",(function(e){return o(void 0,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return c=e,[4,s.setClickToAct(!0)];case 1:return t.sent(),[2]}}))}))})),n.on("ON_LOGOUT",(function(){return o(void 0,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,s.setClickToAct(!1)];case 1:return e.sent(),[2]}}))}))})),n.getLoginState().then((function(e){"success"===e.status?c=e.data:console.warn("### Cannot get login state data:",e.error)}));var _=function(e,t){return o(void 0,void 0,void 0,(function(){var n,r;return i(this,(function(o){switch(o.label){case 0:console.log("#SCREEN-POP (CREATE-TAB):",t,", id: ",e),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,s.createTab({templateName:"entityrecord",templateParameters:{entityName:t,entityId:e},isFocused:!0})];case 2:return n=o.sent(),console.log("#Result: ",n),[3,4];case 3:return r=o.sent(),console.error("#ERROR-SCREEN-POP: ",r.message),[3,4];case 4:return[2]}}))}))};n.on("ON_OPEN_RECORD",(function(e){return _(e.id,e.type)})),n.on("ON_SEARCH_RECORDS",(function(e){var t,n,r;return n=e.text,void 0===(r=(null===(t=e.types)||void 0===t?void 0:t.length)?e.types[0]:void 0)&&(r="contact"),o(void 0,void 0,void 0,(function(){var e,t;return i(this,(function(o){switch(o.label){case 0:console.log("#PREY!PREY! This is the search for: ",n),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,s.renderSearchPage(r,n)];case 2:return e=o.sent(),console.log("#CrmSearchResult: ",e),[3,4];case 3:return t=o.sent(),console.error("#ERROR-CRM-SEARCH: ",E(t)),[3,4];case 4:return[2]}}))}))}));var f=function(e,n){var r={subject:"Bright Pattern "+n.type,description:n.description,actualstart:n.startTime?new Date(n.startTime).toUTCString():void 0,actualend:n.endTime?new Date(n.endTime).toUTCString():void 0,actualdurationminutes:n.duration?Math.ceil(n.duration/60):0,bpattern_interaction_id:n.interactionId,bpattern_global_interaction_id:n.globalInteractionId||"",bpattern_agent:c?c.username:void 0,bpattern_service:n.service,bpattern_disposition:n.disposition,bpattern_recording_url:n.playbackUrl,bpattern_dnis:n.DNIS,bpattern_ani:n.ANI};return e===t.activityTables.voice&&(r.phonenumber=n.phoneNumber,r.directioncode=n.callDirection&&("outbound"===n.callDirection?"true":"false")),r},h=function(e,n){return o(void 0,void 0,void 0,(function(){var o,a,c,l,u,p,E,_,h,T,C,g;return i(this,(function(i){switch(i.label){case 0:return[4,s.getEntityMetadata(n.type)];case 1:if(o=i.sent(),a=JSON.parse(o),c=t.activityTables[e.type],l={},console.log("#METADATA: ",a),d[n.type]=a.DisplayName,u=null,p=a.EntitySetName,E=a.LogicalName,(_=a.OneToManyRelationships)&&_._collection)try{u=_._collection.find((function(e){var t=e.ReferencingEntity,n=e.ReferencingAttribute;return t===c&&"regardingobjectid"===n}))}catch(e){console.log("#Error in the potentially dangerous place!")}return p&&u?(h=u.ReferencingEntityNavigationPropertyName,T=h+"@odata.bind",C="/"+p+"("+n.id+")",l[T]=C):E?(T="regardingobjectid_"+E+"_"+c+"@odata.bind",C="/"+p+"("+n.id+")",l[T]=C):console.warn("#regardingobjectid reference is note detected"),g=r(r({},f(c,e)),l),console.log("#ACTIVITY OBJECT: ",g),[2,s.createRecord(c,JSON.stringify(g))]}}))}))};n.on("ON_INTERACTION_REMOVED",(function(t){e&&t.interactionId===e.interactionId&&(e.interactionId=null)})),n.on("ON_SAVE_ACTIVITY_RECORD",(function(e){return function(e){return o(void 0,void 0,void 0,(function(){var n,r,o,a,c,l;return i(this,(function(i){switch(i.label){case 0:console.log("# SAVE-ACTIVITY-HISTORY: ",e),n=null!==(l=e.associatedObjects.selected[0])&&void 0!==l?l:void 0,r=n&&e.associatedObjects.list.find((function(e){return e.id===n})),console.log("# regarding to object: ",r),i.label=1;case 1:return i.trys.push([1,5,,6]),r?[4,h(e,r)]:[3,3];case 2:return i.sent(),[3,4];case 3:c=t.activityTables[e.type],o=f(c,e),console.log("#Activity without regarding obj: ",o),s.createRecord(c,JSON.stringify(o)),i.label=4;case 4:return[3,6];case 5:return a=i.sent(),console.warn("Error while saving activity history record with regarding object: ",a),c=t.activityTables[e.type],s.createRecord(c,JSON.stringify(f(c,e))),[3,6];case 6:return[2]}}))}))}(e)})),n.on("ON_ACTIVE_INTERACTION_SWITCHED",(function(t){console.log("# Interaction switched, id: ",t),console.log("# sessions:",p);var n=p.find((function(e){return e.interactionId===t}));n?e!==n&&(e=n,console.log("# REQUEST FOCUS SESSION"),s.requestFocusSession(n.sessionId)):e=null}));var T="";s.addHandler("onpagenavigate",(function(t){return o(void 0,void 0,void 0,(function(){var n;return i(this,(function(r){return c?((null==e?void 0:e.interactionId)&&(n=JSON.parse(t),console.log("#NAVIGATION: ",n),e.urlHistory.push(n.value),T=n.value),[2,Promise.resolve()]):[2,Promise.resolve()]}))}))}));s.addHandler("onclicktoact",(function(e){return o(void 0,void 0,void 0,(function(){var t,r,o,u,p,E,_,f,h,T,C,g;return i(this,(function(i){switch(i.label){case 0:if(console.log("#CLICK"),!c)return[2,Promise.resolve()];t=JSON.parse(e),console.log("#CLICK-TO-ACT: ",t),i.label=1;case 1:return i.trys.push([1,9,,10]),(r=t.entityId).length&&"{"===r[0]&&(r=r.slice(1)),r.length&&"}"===r[r.length-1]&&(r=r.slice(0,r.length-1)),[4,s.createSession({templateName:"bpo_call_session",templateParameters:{omnichannel_customer360:{entityId:r,entityName:t.entityLogicalName}}})];case 2:o=i.sent(),console.log("#SESSION ID: ",o),s.setWidth(500),u=null,i.label=3;case 3:return i.trys.push([3,5,,6]),[4,s.retrieveRecord(t.entityLogicalName,r)];case 4:return p=i.sent(),u=JSON.parse(p),[3,6];case 5:return E=i.sent(),console.error("#RETRIEVE-RECORD-ERROR: ",E),[3,6];case 6:return console.log("#entity: ",u),_=u&&(u.title||u.fullname||u.name||u.subject)||r,s.setSessionTitle({sessionId:o,customer:_}),d[t.entityLogicalName]?[3,8]:[4,s.getEntityMetadata(t.entityLogicalName)];case 7:f=i.sent(),h=JSON.parse(f),d[t.entityLogicalName]=h.DisplayName,i.label=8;case 8:return T=d[t.entityLogicalName],C={id:r,type:t.entityLogicalName,displayName:_,displayType:T,customFields:{}},function(e,t){for(var r=!1,o=0,i=a.chatChannelTypes;o<i.length;o++){var s=i[o];e.value.startsWith(s+":")&&(n.startChat(s,e.value.substring(s.length+1)),r=!0)}if(!r){if(l.utils.startsWithAny(e.name,["phone_","new_phone_","bpattern_phone_"]))n.startCall(e.value,t),r=!0;else for(var c=0,u=a.chatChannelTypes;c<u.length;c++)s=u[c],l.utils.startsWithAny(e.name,[s+"_","new_"+s+"_","bpattern_"+s+"_"])&&(n.startChat(s,e.value,t),r=!0);if(!r)switch(e.format){case"Phone":default:n.startCall(e.value,t);break;case"SMS":n.startChat("sms",e.value,t);break;case"Email":n.startEmail(e.value,t)}}}(t,C),s.setAgentPresence("busy"),[3,10];case 9:return g=i.sent(),console.log("#click-to-act Error: ",g),[3,10];case 10:return[2,Promise.resolve()]}}))}))})),n.on("ON_NEW_INTERACTION",(function(){s.getMode().then((function(e){0===e&&s.setMode(1).catch((function(e){return console.error("#ERROR-CRM-SET-MODE: ",E(e))}))})).catch((function(e){return console.error("#ERROR-CRM-GET-MODE: ",E(e))})),T="pseudo-url",o(void 0,void 0,void 0,(function(){var t;return i(this,(function(r){return t=T,[2,new Promise((function(r,a){var c=1,l=function(){return o(void 0,void 0,void 0,(function(){var o,u,p,E,_,f,h,C;return i(this,(function(i){switch(i.label){case 0:return T!==t?(r(),[2]):(null==e?void 0:e.interactionId)?[4,s.getEnvironment()]:(console.warn("No need to get entity: currentInteraction is undefined"),r(),[2]);case 1:return o=i.sent(),u=JSON.parse(o),console.log("#ENTITY-ENVIRONMENT ATTEMPT #"+c+": ",u),u.dashboardType||u.pagetype&&"entityrecord"!==u.pagetype?(r(),[2]):u.id&&u.etn?({id:u.id,type:u.etn},n.setInteractionActiveScreen({recordId:u.id,recordType:u.etn}),[4,s.retrieveRecord(u.etn,u.id)]):[3,5];case 2:return p=i.sent(),E=JSON.parse(p),console.log("#obj-entity: ",E),_=E.title||E.fullname||E.name||E.subject||u.id,d[u.etn]?[3,4]:[4,s.getEntityMetadata(u.etn)];case 3:f=i.sent(),h=JSON.parse(f),d[u.etn]=h.DisplayName,i.label=4;case 4:return C=d[u.etn],n.addInteractionAssociatedObject({id:u.id,type:u.etn,displayName:_,displayType:C,customFields:{}}),e&&e.objectList.push({objectId:u.id,objectType:u.etn,displayName:_}),r(),[3,6];case 5:++c>10?a("ERROR: Can't get CRM entity data"):setTimeout(l,1e3),i.label=6;case 6:return[2]}}))}))};l()}))]}))})).then((function(){}))})),n.on("ON_GET_KNOWLEDGE_BASE_FOLDER",(function(e){var t=e.language;return o(void 0,void 0,void 0,(function(){var e,n,r;return i(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,s.searchAndOpenRecords("knowledgearticle","?$select=content,title&$expand=languagelocaleid($select=code)&$filter=statecode eq 3"+(void 0===t||"none"===t?"":" and startswith(languagelocaleid/code, '"+t+"')"),!0)];case 1:return e=o.sent(),n=Object.values(JSON.parse(e)),console.log("KB folder content:",n),[2,u(n)];case 2:return r=o.sent(),console.error("KB Folder: cif.searchAndOpenRecords error:",E(r)),[3,3];case 3:return[2,[]]}}))}))})),n.on("ON_SEARCH_KNOWLEDGE_BASE",(function(e,t){return o(void 0,void 0,void 0,(function(){var n,r,o;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,s.searchAndOpenRecords("knowledgearticle","?$select=content,title&$expand=languagelocaleid($select=code)&$filter=statecode eq 3 "+(void 0===t||"none"===t?"":"and startswith(languagelocaleid/code, '"+t+"') ")+"and (contains(content, '"+e+"') or contains(keywords, '"+e+"') or contains(description, '"+e+"') or contains(title, '"+e+"'))",!0)];case 1:return n=i.sent(),r=Object.values(JSON.parse(n)),console.log("#CRM-SEARCH-RESULT: ",r),[2,u(r)];case 2:return o=i.sent(),console.error("#ERROR-CRM-ODATA-KB-SEARCH: ",E(o)),[3,3];case 3:return[2,[]]}}))}))})),n.on("ON_GET_KNOWLEDGE_BASE_ARTICLE",(function(e){return o(void 0,void 0,void 0,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,s.searchAndOpenRecords("knowledgearticle","?$select=articlepublicnumber,createdon,content,description,isinternal,keywords,modifiedon,statecode,statuscode,title,versionnumber,createdby,modifiedby,_createdby_value,_modifiedby_value,_ownerid_value,_parentarticlecontentid_value,_rootarticleid_value,_subjectid_value&$expand=languagelocaleid($select=code),transactioncurrencyid($select=isocurrencycode),owningbusinessunit($select=name)&$filter=knowledgearticleid eq '"+e+"'",!0)];case 1:return t=o.sent(),(n=Object.values(JSON.parse(t))).length?(console.log("#CRM-KB-ARTICLE: ",n[0]),[2,(i=n[0],i.content?{id:i.knowledgearticleid,title:i.title,keywords:i.keywords||"",answer:i.content,notes:i.description||"",language:i.languagelocaleid.code,createdByUser:i["_createdby_value@OData.Community.Display.V1.FormattedValue"],lastEditedByUser:i["_modifiedby_value@OData.Community.Display.V1.FormattedValue"],customFields:{}}:null)]):[2,null];case 2:return r=o.sent(),console.error("#ERROR-CRM-ODATA-KB-ARTICLE: ",E(r)),[3,3];case 3:return[2,null]}var i}))}))})),s.addHandler("onSessionSwitched",(function(t){return o(void 0,void 0,void 0,(function(){var r,o;return i(this,(function(i){switch(i.label){case 0:return r=JSON.parse(t),console.log("### ON-SESSION-SWITCHED: ",r),console.log("### current session: ",e?e.sessionId:"NO"),r.focused&&e&&e.sessionId!==r.sessionId?(null==(o=p.find((function(e){return e.sessionId===r.sessionId})))?void 0:o.interactionId)?(console.log("#call switchActiveInteraction (middle) for session: ",o),[4,n.switchActiveInteraction(o.interactionId)]):[3,2]:[3,3];case 1:return"success"===i.sent().status&&(e=o),[3,3];case 2:console.error("### SMTHG GOES WRONG"),i.label=3;case 3:return[2]}}))}))})),s.addHandler("onSessionClosed",(function(t){return o(void 0,void 0,void 0,(function(){var r,o,a;return i(this,(function(i){switch(i.label){case 0:return r=JSON.parse(t),console.log("### ON-SESSION-CLOSED: ",r),(null==(o=p.find((function(e){return e.sessionId===r.sessionId})))?void 0:o.interactionId)?[4,n.completeInteraction(o.interactionId)]:[3,2];case 1:"success"===i.sent().status&&(a=p.indexOf(o),p.splice(a,1),e===o&&(e=p.length?p[p.length-1]:null)),i.label=2;case 2:return[2]}}))}))})),s.addHandler("onmodechanged",(function(e){if(n.adcFrame){switch(JSON.parse(e).value){case 0:n.setWidgetMinimized(!0);break;case 1:n.setWidgetMinimized(!1)}return Promise.resolve()}})),n.on("ON_WIDGET_MINIMIZED_CHANGE",(function(e){s.setMode(e?0:1).catch((function(e){console.error("#ERROR-CRM-SET-MODE: ",E(e))}))})),n.on("ON_SHOW_SCREEN",(function(e){e&&e.recordId&&e.recordType&&_(e.recordId,e.recordType)}))})).catch((function(e){console.error("Can't load Channel Integration Framework client API library: ",e)}))}},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utils=void 0;t.utils={extractURLParams:function(e){var t={};if(e)try{var n=e.split("?").slice(1).join("?");if(n.length)n.split("&").reduce((function(e,t){var n=t.split("=");n.length&&(e[decodeURIComponent(n.shift())]=decodeURIComponent(n.join("=")));return e}),t)}catch(t){console.error("Unable to parse URL parameters: ",e)}return t},capitalize:function(e){return e.replace(/^\w/,(function(e){return e.toUpperCase()}))},findLast:function(e,t){for(var n=e.length-1;n>=0;n--)if(t(e[n]))return e[n];return null},shallowObjEqual:function(e,t){for(var n in e)if(!(n in t)||e[n]!==t[n])return!1;for(var n in t)if(!(n in e)||t[n]!==e[n])return!1;return!0},waitResolveAll:function(e){return new Promise((function(t,n){if(e.length){var r=0,o=new Array(e.length);e.map((function(e){return e instanceof Promise?e:Promise.resolve(e)})).forEach((function(n,i){n.then((function(e){o[i]={status:"fulfilled",value:e}})).catch((function(e){o[i]={status:"rejected",reason:e}})).finally((function(){++r===e.length&&t(o)}))}))}else t([])}))},startsWithAny:function(e,t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(e.startsWith(o))return!0}return!1},splitWords:function(e){return e.trim().split(/(?=[A-Z])/).map((function(e){return e.trim()})).join(" ")}}},2:
/*!*****************************************************!*\
  !*** multi ./src/integrations/omnichannel/index.ts ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! C:\Users\Dev\Documents\projects\Agent_old\packages\adapters\src\integrations\omnichannel\index.ts */"./src/integrations/omnichannel/index.ts")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,