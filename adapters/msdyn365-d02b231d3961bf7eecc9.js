!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s=1)}({"../../node_modules/lodash/fromPairs.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/lodash/fromPairs.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r}},"../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,i=n;return[i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],"-",i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]],i[e[r++]]].join("")}},"../../node_modules/uuid/lib/rng-browser.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/rng-browser.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},"../../node_modules/uuid/v4.js":
/*!*************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/v4.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lib/rng */"../../node_modules/uuid/lib/rng-browser.js"),i=n(/*! ./lib/bytesToUuid */"../../node_modules/uuid/lib/bytesToUuid.js");e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var s=0;s<16;++s)t[o+s]=a[s];return t||i(a)}},"../adapters-public-api-types/dist/types.js":
/*!****************************************!*\
  !*** .-public-api-types/dist/types.js ***!
  \****************************************/
/*! exports provided: requestMessages, callbackMessages, responseSuffix, requestResponseMessages, callbackResponseMessages, resultErrorCodes, serverErrorCodes, agentStates, interactionStates, interactionTypes, chatChannelTypes, callDirections, phoneDevices, dispositionTypes, chatPartyTypes, interactionOriginations, phoneTypes */function(e,t,n){"use strict";n.r(t),n.d(t,"requestMessages",(function(){return r})),n.d(t,"callbackMessages",(function(){return i})),n.d(t,"responseSuffix",(function(){return o})),n.d(t,"requestResponseMessages",(function(){return a})),n.d(t,"callbackResponseMessages",(function(){return s})),n.d(t,"resultErrorCodes",(function(){return c})),n.d(t,"serverErrorCodes",(function(){return u})),n.d(t,"agentStates",(function(){return l})),n.d(t,"interactionStates",(function(){return d})),n.d(t,"interactionTypes",(function(){return p})),n.d(t,"chatChannelTypes",(function(){return _})),n.d(t,"callDirections",(function(){return f})),n.d(t,"phoneDevices",(function(){return E})),n.d(t,"dispositionTypes",(function(){return h})),n.d(t,"chatPartyTypes",(function(){return T})),n.d(t,"interactionOriginations",(function(){return C})),n.d(t,"phoneTypes",(function(){return m}));var r=["GET_LOGIN_STATE","LOGIN","LOGOUT","GET_AGENT_STATE","SET_AGENT_STATE","ACCEPT_INTERACTION","REJECT_INTERACTION","START_CALL","START_CHAT","START_EMAIL","SEND_DTMF","CONSULT_CALL","BLIND_TRANSFER","TRANSFER","LEAVE_INTERACTION","COMPLETE_INTERACTION","LEAVE_AND_COMPLETE_INTERACTION","SWITCH_ACTIVE_INTERACTION","INVITE_TO_CALL_CONFERENCE","REMOVE_FROM_CALL_CONFERENCE","DESTROY_CALL_CONFERENCE","INVITE_TO_CHAT_CONFERENCE","REMOVE_FROM_CHAT_CONFERENCE","MERGE_ALL_CALLS_INTO_CONFERENCE","GET_TEAMS","GET_TEAM_MEMBERS","GET_SERVICES_LIST","GET_SERVICE","SET_SERVICE","GET_DID_LIST","GET_DID","SET_DID","GET_DISPOSITIONS_LIST","SET_DISPOSITION","SET_RESCHEDULE","ADD_NOTE","UPDATE_NOTE","REPLACE_NOTE","GET_CONFIG","GET_VARIABLES","SET_VARIABLE","ADD_INTERACTION_ASSOCIATED_OBJECT","SET_INTERACTION_ACTIVE_SCREEN","GET_PHONE_DEVICES_LIST","GET_PHONE_DEVICE","SET_PHONE_DEVICE","SET_CALL_HOLD","SET_CALL_RECORDING","SET_CALL_MUTE","SET_SCREEN_RECORDING_MUTE","GET_SCREEN_RECORDING_STATE","SET_WIDGET_MINIMIZED","SEND_CHAT_MESSAGE","SUGGEST_CHAT_MESSAGE","GET_AGENT_NOT_READY_REASONS","ACTIVATE_PAGE","GET_INTERACTIONS_STATE","SET_CALL_RECORDING_MUTE","SET_DIAL_CANDIDATES"],i={ON_LOGIN:{needResponse:!1},ON_LOGOUT:{needResponse:!1},ON_NEW_INTERACTION:{needResponse:!1},ON_INTERACTION_REMOVED:{needResponse:!1},ON_INTERACTION_STATE_CHANGE:{needResponse:!1},ON_ACTIVE_INTERACTION_SWITCHED:{needResponse:!1},ON_AGENT_STATE_CHANGE:{needResponse:!1},ON_REQUEST_TRANSFER_DATA:{needResponse:!0},ON_LOAD_TRANSFER_DATA:{needResponse:!1},ON_GET_KNOWLEDGE_BASE_FOLDER:{needResponse:!0},ON_SEARCH_KNOWLEDGE_BASE:{needResponse:!0},ON_GET_KNOWLEDGE_BASE_ARTICLE:{needResponse:!0},ON_OPEN_RECORD:{needResponse:!1},ON_SEARCH_RECORDS:{needResponse:!1},ON_SHOW_SCREEN:{needResponse:!1},ON_SCREEN_RECORDING_STATE_CHANGE:{needResponse:!1},ON_WIDGET_MINIMIZED_CHANGE:{needResponse:!1},ON_SERVER_ERROR:{needResponse:!1},ON_SOFTPHONE_STATUS_CHANGE:{needResponse:!1},ON_AUDIO_DEVICE_CHANGE:{needResponse:!1},ON_PHONE_CAPABILITIES_CHANGE:{needResponse:!1},ON_CALL_AUDIO_QUALITY_ALERT:{needResponse:!1},ON_WEB_SCREEN_POP_CUSTOM:{needResponse:!0},ON_SAVE_ACTIVITY_RECORD:{needResponse:!1},ON_VALIDATE_ASSOCIATED_RECORDS:{needResponse:!0},ON_REQUEST_RECORD_INFO:{needResponse:!0},ON_REQUEST_RECORD_ON_SCREEN:{needResponse:!0}},o="_RESPONSE",a=r.map((function(e){return e+o})),s=Object.keys(i).reduce((function(e,t){return i[t].needResponse&&e.push(t+o),e}),[]),c={not_enough_privileges:1,not_logged_in:2,invalid_args:3,logged_without_phone:4,banned:5,api_not_answer:6,invalid_request:7,timeout:8,no_chat_in_service:9,empty_number:10,no_service:11,self_call:12,no_interaction:13,api_method_not_implemented:14,not_suitable_state:15,no_disposition:16,object_not_found:17,no_permissions_did_sms:18,no_permissions_did_call:19,no_channel_in_service:20,unknown_error:99},u={forced_logout_by_other_client:100,forced_logout_by_supervisor:101,invalid_request:102,phone_not_registered:103,phone_not_in_dial_plan:104,tenant_disabled:105,destination_user_not_logged:106,user_disabled_or_deleted:107,user_already_logged_in:108,invalid_credentials:109,other_user_logged_with_phone:110,invalid_token:111,logged_users_limit_reached:112,already_logged_in_with_the_same_session:113,not_enough_privileges:114,sip_server_error:200,unknown_error:300},l=["supervising","ready","not_ready","busy","after_call_work"],d=["unknown","queued","ivr","wrap_up","wrap_up_hold","delivered","delivery_pending","hold","completed"],p=["voice","chat","email"],_=["telegram","line","facebook","web","nexmo","sms","viber","twitter","wechat","whatsapp"],f=["inbound","outbound"],E=["phone_type_browser","phone_type_external","phone_type_hard_custom","phone_type_hard_default","phone_type_nailed","phone_type_none","phone_type_soft_secure","phone_type_microsoft_teams","phone_type_soft_unsecure"],h=["SUCCESS","FAILURE","CONTINUE","SPAM","DO_NOT_CALL"],T=["internal","external"],C=["dialpad","dialpad-search","directory","recent","favorites","workitem","interaction","contact-profile","help","conference","auto","integration-api"],m=["mobile","business","home","fax","other"]},"../lib-uuid/dist/index.js":
/*!*********************************!*\
  !*** ../lib-uuid/dist/index.js ***!
  \*********************************/
/*! exports provided: uuid */function(e,t,n){"use strict";n.r(t);var r=n(/*! uuid/v4 */"../../node_modules/uuid/v4.js"),i=n.n(r);n.d(t,"uuid",(function(){return i.a}))},"./src/adc-client-api.ts":
/*!*******************************!*\
  !*** ./src/adc-client-api.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AgentDesktopClientAPIImpl=void 0;var i=r(n(/*! lodash/fromPairs */"../../node_modules/lodash/fromPairs.js")),o=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),a=n(/*! @bpinc/lib-uuid */"../lib-uuid/dist/index.js"),s=n(/*! ./utils */"./src/utils/index.ts"),c=function(){if(window.document.currentScript)return window.document.currentScript.src;var e=document.getElementsByTagName("script");return e[e.length-1].src}(),u=s.utils.extractURLParams(window.location.href).adcUrl||new URL(c).origin,l=function(){function e(e){var t=this;void 0===e&&(e={}),this.maximizedIframeWidth=null,this.adcFrame=null,this.adcFrameOrigin="",this.pendingMessages=[],this.integrationKey=e.integrationKey||a.uuid(),this.connectionEstablished=!1,this.adcIsReady=!1,this.messageLoggers=[],this.disableNewInteractionPopup=!!e.disableNewInteractionPopup,this.messageHandlers=i.default(Object.keys(o.callbackMessages).map((function(e){return[e,[]]}))),this.responseCallbacks=i.default(o.requestMessages.map((function(e){return[e+o.responseSuffix,{}]}))),this.prepareAdcIframe(e),this.registerListeners(),this.on("ON_WIDGET_MINIMIZED_CHANGE",(function(e){t.adcFrame&&(e?(t.maximizedIframeWidth=t.adcFrame.getAttribute("width"),t.adcFrame.setAttribute("width","44px")):t.adcFrame.setAttribute("width",t.maximizedIframeWidth||""))})),this.on("ON_WEB_SCREEN_POP_CUSTOM",(function(){return!1})),this.on("ON_VALIDATE_ASSOCIATED_RECORDS",(function(){return{valid:!0}}))}return e.prototype.injectMessageLogger=function(e){this.messageLoggers.push(e)},e.prototype.prepareAdcIframe=function(e){if(e.adcFrame){var t=e.adcFrame;t instanceof HTMLIFrameElement&&t.src?this.adcFrame=t:console.error("@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\n","Valid Communicator iframe would be created automatically")}if(!this.adcFrame){var n=null;if(e.mountRoot){var r=e.mountRoot;r instanceof HTMLElement?n=r:console.error("@@@ `mountRoot` is not HTMLElement.\n","Communicator iframe would be mounted to the `document.body` as a fallback scenario")}n||(n=document.body),this.adcFrame=document.createElement("iframe"),this.adcFrame.title="Agent Desktop Communicator",this.adcFrame.id="adc_frame",this.adcFrame.style.border="none",this.adcFrame.allow="microphone; camera; geolocation",this.adcFrame.onerror=function(){console.error("@@@ Adapter failure: unable to load AD Communicator")},e.standalone?(this.adcFrame.width="1",this.adcFrame.height="1",this.adcFrame.style.zIndex="-1000",this.adcFrame.style.position="absolute",this.adcFrame.style.top="-1000px",this.adcFrame.style.left="-1000px",this.adcFrame.src=u+"/agent/communicator/no-ui/"+location.search):(this.adcFrame.style.width="500px",this.adcFrame.style.height="100%",this.adcFrame.src=u+"/agent/communicator/"+location.search),n.appendChild(this.adcFrame)}this.adcFrameOrigin=new URL(this.adcFrame.src).origin},e.prototype.handleIncomingMessage=function(e,t,n){var r,i,a=this;console.log("@@@ Handle: ",e,t,n);var c=this.messageHandlers[e];if(c.length){var u=c.map((function(t){try{return t.apply(void 0,n)}catch(t){console.error('@@@ Error in the event "'+e+'" handler:',t)}}));(null===(i=o.callbackMessages[e])||void 0===i?void 0:i.needResponse)&&s.utils.waitResolveAll(u).then((function(n){var r=n.reduce((function(e,t){return"fulfilled"===t.status&&void 0!==t.value&&e.push(t.value),e}),[]),i=r.length?r[r.length-1]:void 0;a.postMessageToAdc({uid:t,type:e+o.responseSuffix,params:[i]})}))}else(null===(r=o.callbackMessages[e])||void 0===r?void 0:r.needResponse)&&this.postMessageToAdc({uid:t,type:e+o.responseSuffix,params:[],noHandlers:!0})},e.prototype.registerListeners=function(){var e=this;window.addEventListener("message",(function(t){var n;if(t.origin===e.adcFrameOrigin){var r=t.data||{},i=r.type,a=r.uid,s=r.params;if(i){t.stopImmediatePropagation();try{if("hello"===i){e.messageLoggers.forEach((function(e){return e(i,s)})),e.connectionEstablished=!0;var c={uid:a,type:"hi",params:[e.integrationKey,location.search,e.disableNewInteractionPopup]};if(!(null===(n=e.adcFrame)||void 0===n?void 0:n.contentWindow))throw new Error("adcFrame is not defined - that should not be possible");return e.messageLoggers.forEach((function(e){return e(c.type,c.params)})),void e.adcFrame.contentWindow.postMessage(c,e.adcFrameOrigin)}if("ready"===i)return e.messageLoggers.forEach((function(e){return e(i,s)})),e.adcIsReady=!0,void setTimeout((function(){e.pendingMessages.forEach((function(t){e.postMessageToAdc(t)})),e.pendingMessages=[]}));if(!e.adcIsReady)return;if(Object.keys(o.callbackMessages).includes(i))e.messageLoggers.forEach((function(e){return e(i,s)})),e.handleIncomingMessage(i,a,s);else if(o.requestResponseMessages.includes(i)){e.messageLoggers.forEach((function(e){return e(i,s)}));var u=e.responseCallbacks[i];if(u&&u[a]){var l=u[a];delete u[a],Promise.resolve().then((function(){return l(s)}))}}}catch(t){console.error("@@@ Error: ",t.message)}}}}))},e.prototype.runResponseTimeoutWatch=function(e,t,n){var r=this;setTimeout((function(){var i=r.responseCallbacks[e+o.responseSuffix];if(i[t]){delete i[t];var a='Response from Communicator for event "'+e+"\" wasn't received in the specified timeout 20000 ms";console.error("@@@ "+a),n({status:"error",error:{code:6,name:"api_not_answer",message:a}})}}),2e4)},e.prototype.postMessageToAdc=function(e){null!==this.adcFrame&&this.adcFrame.contentWindow&&this.adcIsReady?(this.messageLoggers.forEach((function(t){return t(e.type,e.params)})),"LOGIN"===e.type?console.log("@@@ ADAPTER SEND MESSAGE: LOGIN"):console.log("@@@ ADAPTER SEND MESSAGE: ",e),this.adcFrame.contentWindow.postMessage(e,this.adcFrameOrigin)):(console.log("@@@ ADAPTER: ADC is not ready, add pending message:",e),this.pendingMessages.push(e))},e.prototype.apiCall=function(e,t){var n=this;return new Promise((function(r){var i=a.uuid();n.postMessageToAdc({uid:i,type:e,params:t}),n.responseCallbacks[e+o.responseSuffix][i]=r,n.runResponseTimeoutWatch(e,i,r)}))},e.prototype.getLoginState=function(){return this.apiCall("GET_LOGIN_STATE")},e.prototype.login=function(e,t){return this.apiCall("LOGIN",[e,t])},e.prototype.logout=function(){return this.apiCall("LOGOUT")},e.prototype.getAgentState=function(){return this.apiCall("GET_AGENT_STATE")},e.prototype.setAgentState=function(e,t){return this.apiCall("SET_AGENT_STATE",[e,t])},e.prototype.acceptInteraction=function(e){return this.apiCall("ACCEPT_INTERACTION",[e])},e.prototype.rejectInteraction=function(e){return this.apiCall("REJECT_INTERACTION",[e])},e.prototype.startCall=function(e,t){return this.apiCall("START_CALL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.startChat=function(e,t,n){return this.apiCall("START_CHAT",[e,t,n?n instanceof Array?n:[n]:[]])},e.prototype.startEmail=function(e,t){return this.apiCall("START_EMAIL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.sendDtmf=function(e,t){return this.apiCall("SEND_DTMF",[e,t])},e.prototype.consultCall=function(e){return this.apiCall("CONSULT_CALL",[e])},e.prototype.blindTransfer=function(e,t,n){return this.apiCall("BLIND_TRANSFER",[e,t,n])},e.prototype.transfer=function(e){return this.apiCall("TRANSFER",[e])},e.prototype.leaveInteraction=function(e){return this.apiCall("LEAVE_INTERACTION",[e])},e.prototype.completeInteraction=function(e){return this.apiCall("COMPLETE_INTERACTION",[e])},e.prototype.leaveAndCompleteInteraction=function(e,t,n){return this.apiCall("LEAVE_AND_COMPLETE_INTERACTION",[e,t,n])},e.prototype.switchActiveInteraction=function(e){return this.apiCall("SWITCH_ACTIVE_INTERACTION",[e])},e.prototype.inviteToCallConference=function(e,t,n){return this.apiCall("INVITE_TO_CALL_CONFERENCE",[e,t,n])},e.prototype.removeFromCallConference=function(e,t){return this.apiCall("REMOVE_FROM_CALL_CONFERENCE",[e,t])},e.prototype.destroyCallConference=function(e){return this.apiCall("DESTROY_CALL_CONFERENCE",[e])},e.prototype.inviteToChatConference=function(e,t){return this.apiCall("INVITE_TO_CHAT_CONFERENCE",[e,t])},e.prototype.removeFromChatConference=function(e,t){return this.apiCall("REMOVE_FROM_CHAT_CONFERENCE",[e,t])},e.prototype.mergeAllCallsIntoConference=function(e){return this.apiCall("MERGE_ALL_CALLS_INTO_CONFERENCE",[e])},e.prototype.getTeams=function(){return this.apiCall("GET_TEAMS")},e.prototype.getTeamMembers=function(e){return this.apiCall("GET_TEAM_MEMBERS",[e])},e.prototype.getServicesList=function(){return this.apiCall("GET_SERVICES_LIST",[])},e.prototype.getService=function(){return this.apiCall("GET_SERVICE",[])},e.prototype.setService=function(e){return this.apiCall("SET_SERVICE",[e])},e.prototype.getDIDNumbersList=function(){return this.apiCall("GET_DID_LIST",[])},e.prototype.getDIDNumber=function(){return this.apiCall("GET_DID",[])},e.prototype.setDIDNumber=function(e){return this.apiCall("SET_DID",[e])},e.prototype.getDispositionsList=function(e){return this.apiCall("GET_DISPOSITIONS_LIST",[e])},e.prototype.setDisposition=function(e,t){return this.apiCall("SET_DISPOSITION",[e,t])},e.prototype.addNote=function(e,t){return this.apiCall("ADD_NOTE",[e,t])},e.prototype.updateNote=function(e,t){return this.apiCall("UPDATE_NOTE",[e,t])},e.prototype.replaceNote=function(e,t){return this.apiCall("REPLACE_NOTE",[e,t])},e.prototype.setRescheduleWindow=function(e,t){return this.apiCall("SET_RESCHEDULE",[e,t])},e.prototype.getConfig=function(){return this.apiCall("GET_CONFIG")},e.prototype.setVariable=function(e,t,n){return this.apiCall("SET_VARIABLE",[e,t,n])},e.prototype.getVariables=function(e,t){return this.apiCall("GET_VARIABLES",[e,t])},e.prototype.addInteractionAssociatedObject=function(e,t){return this.apiCall("ADD_INTERACTION_ASSOCIATED_OBJECT",[e,t])},e.prototype.setInteractionActiveScreen=function(e,t){return this.apiCall("SET_INTERACTION_ACTIVE_SCREEN",[e,t])},e.prototype.getPhoneDevicesList=function(){return this.apiCall("GET_PHONE_DEVICES_LIST",[])},e.prototype.getPhoneDevice=function(){return this.apiCall("GET_PHONE_DEVICE",[])},e.prototype.setPhoneDevice=function(e){return this.apiCall("SET_PHONE_DEVICE",[e])},e.prototype.setCallHold=function(e,t){return this.apiCall("SET_CALL_HOLD",[e,t])},e.prototype.setCallRecording=function(e,t){return this.apiCall("SET_CALL_RECORDING",[e,t])},e.prototype.setCallMute=function(e,t){return this.apiCall("SET_CALL_MUTE",[e,t])},e.prototype.setScreenRecordingMute=function(e){return this.apiCall("SET_SCREEN_RECORDING_MUTE",[e])},e.prototype.getScreenRecordingState=function(){return this.apiCall("GET_SCREEN_RECORDING_STATE")},e.prototype.setWidgetMinimized=function(e){return this.apiCall("SET_WIDGET_MINIMIZED",[e])},e.prototype.sendChatMessage=function(e,t){return this.apiCall("SEND_CHAT_MESSAGE",[e,t])},e.prototype.suggestChatMessage=function(e,t,n){return this.apiCall("SUGGEST_CHAT_MESSAGE",[e,t,n])},e.prototype.getAgentNotReadyReasons=function(){return this.apiCall("GET_AGENT_NOT_READY_REASONS")},e.prototype.activatePage=function(){return this.apiCall("ACTIVATE_PAGE",[])},e.prototype.getInteractionsState=function(){return this.apiCall("GET_INTERACTIONS_STATE",[])},e.prototype.setCallRecordingMute=function(e,t){return this.apiCall("SET_CALL_RECORDING_MUTE",[e,t])},e.prototype.setDialCandidates=function(e){return this.apiCall("SET_DIAL_CANDIDATES",[e])},e.prototype.on=function(e,t){this.messageHandlers[e].push(t)},e.prototype.remove=function(e,t){var n=this.messageHandlers[e].indexOf(t);-1!==n&&this.messageHandlers[e].splice(n,1)},e}();t.AgentDesktopClientAPIImpl=l,window.brightpattern={AdApi:l}},"./src/integrations/msdyn365/index.ts":
/*!********************************************!*\
  !*** ./src/integrations/msdyn365/index.ts ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(/*! ./integration */"./src/integrations/msdyn365/integration.ts").registerMSDynIntegration()},"./src/integrations/msdyn365/integration.ts":
/*!**************************************************!*\
  !*** ./src/integrations/msdyn365/integration.ts ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMSDynIntegration=t.activityTables=void 0;var s=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),c=n(/*! ../../adc-client-api */"./src/adc-client-api.ts"),u=n(/*! ./loadExternalApi */"./src/integrations/msdyn365/loadExternalApi.ts"),l=n(/*! ../../utils */"./src/utils/index.ts"),d="contact",p="contact",_="contactid";t.activityTables={voice:"phonecall",chat:"bpattern_messaging_session",email:"email"};var f={business2:"business",home2:"home",mobilephone:"mobile",telephone1:"other",telephone2:"other"},E=function(e){return e.filter((function(e){return!!e.content})).map((function(e){return{id:e.knowledgearticleid,type:"article",title:e.title,text:e.content}}))},h={},T="@ADAPTER",C=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.log.apply(console,a([T],e))},m=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.info.apply(console,a([T],e))},y=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.warn.apply(console,a([T],e))},g=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.error.apply(console,a([T],e))};t.registerMSDynIntegration=function(){u.loadCrmApi.then((function(){var e=window.Microsoft.CIFramework;if(!e)return g("window.Microsoft.CIFramework is undefined. Please, check and fix the adapter configuration and reload this page.");var t=new c.AgentDesktopClientAPIImpl({integrationKey:"dynamicscrm"}),n=!1,r=!1,u=null,T=null,v=null,N=null,A={},O="call",R=function(e){if("string"==typeof e){try{var t=JSON.parse(e);if(t&&t.message)return t.message}catch(e){}return e}return e&&e.message||e};function S(){return n&&r}function I(){S()&&N&&(b(N),N=null)}function b(e){if(v=e,!S())return N=e,void m("Skip opened object: adapter not initialized");(null==u?void 0:u.isLoggedIn)?T?t.addInteractionAssociatedObject(e):m("Skip opened object: no interaction"):m("Skip opened object: user is not logged in")}e.setMode(1).catch((function(e){return g("cif.setMode error:",R(e))})),e.setWidth(500).catch((function(e){return g("cif.setWidth error:",R(e))})),function(){i(this,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:return[4,e.getEntityMetadata(p)];case 1:return t=r.sent(),n=JSON.parse(t),Object.values(n.OneToManyRelationships).forEach((function(e){var t=e.ReferencedEntity,n=e.ReferencedAttribute,r=e.ReferencingEntity,i=e.ReferencingAttribute,o=e.RelationshipType;t===p&&n===_&&0===o&&(A[r]||(A[r]=[]),A[r].push(i))})),m("contact relationships:",A),[2]}}))}))}(),function(){var t;i(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return[4,e.getEnvironment()];case 1:return n=o.sent(),r=JSON.parse(n),C("Get MS Dynamics environment data:",r),i=JSON.parse(r.customParams),O=null!==(t=i.click_to_call_action)&&void 0!==t?t:"call",C("Click to call action:",O),[2]}}))}))}(),t.on("ON_LOGIN",(function(t){return i(void 0,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return u=t,[4,e.setClickToAct(!0)];case 1:return n.sent(),[2]}}))}))})),t.on("ON_LOGOUT",(function(){return i(void 0,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,e.setClickToAct(!1)];case 1:return t.sent(),[2]}}))}))})),t.getLoginState().then((function(e){"success"===e.status?(m("Initial login state:",e.data),u=e.data,n=!0,I()):y("Unable to get login state:",e.error)})),t.getInteractionsState().then((function(e){"success"===e.status?(m("Initial interactions state:",e.data),T=e.data.activeInteractionId,r=!0,I()):("not_logged_in"===e.error.name&&(T=null,r=!0,I()),y("Unable to get interactions state:",e.error))}));var D=function(t,n){return i(void 0,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:C("Entity screen pop: ",n,", id: ",t),o.label=1;case 1:return o.trys.push([1,3,,4]),v&&v.id===t&&v.type===n?(C("Skip screen-pop - the object is already opened"),[2]):[4,e.openForm(JSON.stringify({entityId:t,entityName:n}))];case 2:return r=o.sent(),C("cif.openForm result:",r),M(),[3,4];case 3:return i=o.sent(),g("cif.openForm error:",R(i)),[3,4];case 4:return[2]}}))}))};t.on("ON_OPEN_RECORD",(function(e){return D(e.id,e.type)})),t.on("ON_SEARCH_RECORDS",(function(t){var n,r,a;return r=t.text,void 0===(a=(null===(n=t.types)||void 0===n?void 0:n.length)?t.types[0]:void 0)&&(a=d),i(void 0,void 0,void 0,(function(){var t,n;return o(this,(function(i){switch(i.label){case 0:C("Search screen pop, query:",r),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,e.renderSearchPage(a,r)];case 2:return t=i.sent(),C("cif.renderSearchPage result:",t),[3,4];case 3:return n=i.sent(),g("cif.renderSearchPage error:",R(n)),[3,4];case 4:return[2]}}))}))}));function L(t,n,r){return i(this,void 0,void 0,(function(){var i,a,s,c;return o(this,(function(o){switch(o.label){case 0:return i=r.title||r.fullname||r.name||r.subject||t,h[n]?[3,2]:[4,e.getEntityMetadata(n)];case 1:a=o.sent(),s=JSON.parse(a),h[n]=s.DisplayName,o.label=2;case 2:return c=h[n],[2,{displayName:c+": "+i,displayType:c}]}}))}))}function w(t,n){return i(this,void 0,void 0,(function(){var r,i,a,s,c;return o(this,(function(o){switch(o.label){case 0:return[4,e.retrieveRecord(n,t)];case 1:return r=o.sent(),i=JSON.parse(r),[4,L(t,n,i)];case 2:return a=o.sent(),s=a.displayName,c=a.displayType,[2,{associatedObject:{id:t,type:n,displayName:s,displayType:c,customFields:{}},entityData:i}]}}))}))}function M(){return i(this,void 0,void 0,(function(){var n,r,s,c,u;return o(this,(function(l){switch(l.label){case 0:return[4,e.getEnvironment()];case 1:return n=l.sent(),r=JSON.parse(n),C("Getting environment:",r),!r.dashboardType&&"entityrecord"===(null==r?void 0:r.pagetype)&&r.id&&r.etn?(t.setInteractionActiveScreen({recordId:r.id,recordType:r.etn}),[4,w(r.id,r.etn)]):(t.setDialCandidates([]),[2]);case 2:return s=l.sent(),c=s.associatedObject,u=s.entityData,C("Found entity on the screen:",u),c?(b(c),function(n,r){var s;i(this,void 0,void 0,(function(){var i,c,u,l,d,_,f,E;return o(this,(function(o){switch(o.label){case 0:return i=[],c=[n],n.type!==p?[3,2]:[4,G(r,c)];case 1:return(E=o.sent())&&i.push(E),[3,7];case 2:if(!(null===(s=A[n.type])||void 0===s?void 0:s.length))return[3,7];u=0,l=A[n.type],o.label=3;case 3:return u<l.length?(d=l[u],(_=r[(h=d,"_"+h+"_value")])?[4,e.retrieveRecord(p,_)]:[3,6]):[3,7];case 4:return f=o.sent(),[4,G(JSON.parse(f),a([],c))];case 5:(E=o.sent())&&i.push(E),o.label=6;case 6:return u++,[3,3];case 7:return t.setDialCandidates(i),[2]}var h}))}))}(c,u),[2]):[2]}}))}))}function G(e,t){var n;return i(this,void 0,void 0,(function(){var r,i,a;return o(this,(function(o){switch(o.label){case 0:return r=null!==(n=e.emailaddress1)&&void 0!==n?n:void 0,i=Object.keys(f).reduce((function(t,n){return e[n]&&t.push({type:f[n],number:e[n]}),t}),[]),r||i.length?[4,L(e[_],p,e)]:[2,null];case 1:return a=o.sent().displayName,[2,{id:e[_],displayName:a,email:r,phones:i,associatedObjects:t}]}}))}))}t.on("ON_INTERACTION_REMOVED",(function(e){e.interactionId===T&&(T=null)})),t.on("ON_ACTIVE_INTERACTION_SWITCHED",(function(e){T=e})),t.on("ON_REQUEST_RECORD_INFO",(function(e){var t=e.id,n=e.type;return i(void 0,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,w(t,n)];case 1:return[2,e.sent().associatedObject];case 2:return e.sent(),[2,null];case 3:return[2]}}))}))})),t.on("ON_REQUEST_RECORD_ON_SCREEN",(function(){return i(void 0,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:if(!v)return[2,null];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,w(v.id,v.type)];case 2:return[2,e.sent().associatedObject];case 3:return e.sent(),[2,null];case 4:return[2]}}))}))})),e.addHandler("onpagenavigate",(function(e){return i(void 0,void 0,void 0,(function(){var t;return o(this,(function(n){return t=JSON.parse(e),C("Navigation detected:",t),M(),[2,Promise.resolve()]}))}))}));e.addHandler("onclicktoact",(function(e){return i(void 0,void 0,void 0,(function(){var n,r,i,a,c,d;return o(this,(function(o){switch(o.label){case 0:if(C("Click to act handler"),!u)return y("Adapter is not logged in"),[2,Promise.resolve()];n=JSON.parse(e),C("Click to act data:",n),(r=n.entityId).length&&"{"===r[0]&&(r=r.slice(1)),r.length&&"}"===r[r.length-1]&&(r=r.slice(0,r.length-1)),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,w(r,n.entityLogicalName)];case 2:return i=o.sent(),a=i.associatedObject,c=i.entityData,C("Clicked entity:",c),a?(function(e,n){for(var r=n?[n]:[],i=0,o=s.chatChannelTypes;i<o.length;i++){var a=o[i];if(e.value.startsWith(a+":"))return t.startChat(a,e.value.substring(a.length+1))}if(l.utils.startsWithAny(e.name,["phone_","new_phone_","bpattern_phone_"]))return t.startCall(e.value,r);for(var c=0,u=s.chatChannelTypes;c<u.length;c++){var d=[(a=u[c])+"_","new_"+a+"_","bpattern_"+a+"_"];if(l.utils.startsWithAny(e.name,d))return t.startChat(a,e.value,r)}"Email"===e.format?t.startEmail(e.value,r):"SMS"===e.format||"chat"===O?t.startChat("sms",e.value,r):t.startCall(e.value,r)}(n,a),[3,4]):[2];case 3:return d=o.sent(),g("Click to act handler error:",d),[3,4];case 4:return[2,Promise.resolve()]}}))}))})),t.on("ON_NEW_INTERACTION",(function(t){return i(void 0,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:if(e.getMode().then((function(t){0===t&&e.setMode(1).catch((function(e){return g("cif.setMode error",R(e))}))})).catch((function(e){return g("cif.getMode error:",R(e))})),"dialpad"!==t.origination)return[3,4];C("Interaction initiated from Dialpad:",t.phoneNumber),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,e.searchAndOpenRecords(d,"?$select=contactid&$filter=mobilephone eq '"+t.phoneNumber+"' or telephone1 eq '"+t.phoneNumber+"' or telephone2 eq '"+t.phoneNumber+"' or telephone3 eq '"+t.phoneNumber+"'",!1)];case 2:return r.sent(),[3,4];case 3:return n=r.sent(),g("Dialpad interaction: cif.searchAndOpenRecords error:",R(n)),[3,4];case 4:return M(),[2]}}))}))})),t.on("ON_GET_KNOWLEDGE_BASE_FOLDER",(function(t){var n=t.language;return i(void 0,void 0,void 0,(function(){var t,r,i;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,e.searchAndOpenRecords("knowledgearticle","?$select=content,title&$expand=languagelocaleid($select=code)&$filter=statecode eq 3"+(void 0===n||"none"===n?"":" and startswith(languagelocaleid/code, '"+n+"')"),!0)];case 1:return t=o.sent(),r=Object.values(JSON.parse(t)),C("KB folder content:",r),[2,E(r)];case 2:return i=o.sent(),g("KB Folder: cif.searchAndOpenRecords error:",R(i)),[3,3];case 3:return[2,[]]}}))}))})),t.on("ON_SEARCH_KNOWLEDGE_BASE",(function(t,n){return i(void 0,void 0,void 0,(function(){var r,i,a;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,e.searchAndOpenRecords("knowledgearticle","?$select=content,title&$expand=languagelocaleid($select=code)&$filter=statecode eq 3 "+(void 0===n||"none"===n?"":"and startswith(languagelocaleid/code, '"+n+"') ")+"and (contains(content, '"+t+"') or contains(keywords, '"+t+"') or contains(description, '"+t+"') or contains(title, '"+t+"'))",!0)];case 1:return r=o.sent(),i=Object.values(JSON.parse(r)),C("KB search result:",i),[2,E(i)];case 2:return a=o.sent(),g("KB Search: cif.searchAndOpenRecords error:",R(a)),[3,3];case 3:return[2,[]]}}))}))})),t.on("ON_GET_KNOWLEDGE_BASE_ARTICLE",(function(t){return i(void 0,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),[4,e.searchAndOpenRecords("knowledgearticle","?$select=articlepublicnumber,createdon,content,description,isinternal,keywords,modifiedon,statecode,statuscode,title,versionnumber,createdby,modifiedby,_createdby_value,_modifiedby_value,_ownerid_value,_parentarticlecontentid_value,_rootarticleid_value,_subjectid_value&$expand=languagelocaleid($select=code),transactioncurrencyid($select=isocurrencycode),owningbusinessunit($select=name)&$filter=knowledgearticleid eq '"+t+"'",!0)];case 1:return n=o.sent(),(r=Object.values(JSON.parse(n))).length?(C("Found CRM KB article:",r[0]),[2,(a=r[0],a.content?{id:a.knowledgearticleid,title:a.title,keywords:a.keywords||"",answer:a.content,notes:a.description||"",language:a.languagelocaleid.code,createdByUser:a["_createdby_value@OData.Community.Display.V1.FormattedValue"],lastEditedByUser:a["_modifiedby_value@OData.Community.Display.V1.FormattedValue"],customFields:{}}:null)]):[2,null];case 2:return i=o.sent(),g("Search article: cif.searchAndOpenRecords:",R(i)),[3,3];case 3:return[2,null]}var a}))}))})),e.addHandler("onmodechanged",(function(e){if(t.adcFrame){switch(JSON.parse(e).value){case 0:t.setWidgetMinimized(!0);break;case 1:t.setWidgetMinimized(!1)}return Promise.resolve()}})),t.on("ON_WIDGET_MINIMIZED_CHANGE",(function(t){e.setMode(t?0:1).catch((function(e){g("cif.setMode error:",R(e))}))})),t.on("ON_SHOW_SCREEN",(function(e){e&&e.recordId&&e.recordType&&D(e.recordId,e.recordType)}))})).catch((function(e){g("Can't load Channel Integration Framework client API library: ",e)}))}},"./src/integrations/msdyn365/loadExternalApi.ts":
/*!******************************************************!*\
  !*** ./src/integrations/msdyn365/loadExternalApi.ts ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadCrmApi=void 0;var r=n(/*! ../../utils */"./src/utils/index.ts"),i=window.location.href,o=r.utils.extractURLParams(i).crmDomain;o.startsWith("https://")||(o="https://"+o),t.loadCrmApi=new Promise((function(e,t){o||t("Missing required URL parameter 'crmDomain'");var n=document.createElement("script");document.head.insertAdjacentElement("beforeend",n),n.addEventListener("load",e),n.addEventListener("error",t),n.dataset.crmurl=o,n.dataset.cifid="CIFMainLibrary",n.type="text/javascript",n.src=o+"/webresources/Widget/msdyn_ciLibrary.js"}))},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utils=void 0;t.utils={extractURLParams:function(e){var t={};if(e)try{var n=e.split("?").slice(1).join("?");if(n.length)n.split("&").reduce((function(e,t){var n=t.split("=");n.length&&(e[decodeURIComponent(n.shift())]=decodeURIComponent(n.join("=")));return e}),t)}catch(t){console.error("Unable to parse URL parameters: ",e)}return t},capitalize:function(e){return e.replace(/^\w/,(function(e){return e.toUpperCase()}))},findLast:function(e,t){for(var n=e.length-1;n>=0;n--)if(t(e[n]))return e[n];return null},shallowObjEqual:function(e,t){for(var n in e)if(!(n in t)||e[n]!==t[n])return!1;for(var n in t)if(!(n in e)||t[n]!==e[n])return!1;return!0},waitResolveAll:function(e){return new Promise((function(t,n){if(e.length){var r=0,i=new Array(e.length);e.map((function(e){return e instanceof Promise?e:Promise.resolve(e)})).forEach((function(n,o){n.then((function(e){i[o]={status:"fulfilled",value:e}})).catch((function(e){i[o]={status:"rejected",reason:e}})).finally((function(){++r===e.length&&t(i)}))}))}else t([])}))},startsWithAny:function(e,t){for(var n=0,r=t;n<r.length;n++){var i=r[n];if(e.startsWith(i))return!0}return!1},splitWords:function(e){return e.trim().split(/(?=[A-Z])/).map((function(e){return e.trim()})).join(" ")}}},1:
/*!**************************************************!*\
  !*** multi ./src/integrations/msdyn365/index.ts ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! C:\Users\Dev\Documents\projects\Agent_old\packages\adapters\src\integrations\msdyn365\index.ts */"./src/integrations/msdyn365/index.ts")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,