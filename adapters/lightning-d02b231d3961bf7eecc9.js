!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s=0)}({"../../node_modules/lodash/fromPairs.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/lodash/fromPairs.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r}},"../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},"../../node_modules/uuid/lib/rng-browser.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/rng-browser.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},"../../node_modules/uuid/v4.js":
/*!*************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/v4.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lib/rng */"../../node_modules/uuid/lib/rng-browser.js"),o=n(/*! ./lib/bytesToUuid */"../../node_modules/uuid/lib/bytesToUuid.js");e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[i+a]=s[a];return t||o(s)}},"../adapters-public-api-types/dist/types.js":
/*!****************************************!*\
  !*** .-public-api-types/dist/types.js ***!
  \****************************************/
/*! exports provided: requestMessages, callbackMessages, responseSuffix, requestResponseMessages, callbackResponseMessages, resultErrorCodes, serverErrorCodes, agentStates, interactionStates, interactionTypes, chatChannelTypes, callDirections, phoneDevices, dispositionTypes, chatPartyTypes, interactionOriginations, phoneTypes */function(e,t,n){"use strict";n.r(t),n.d(t,"requestMessages",(function(){return r})),n.d(t,"callbackMessages",(function(){return o})),n.d(t,"responseSuffix",(function(){return i})),n.d(t,"requestResponseMessages",(function(){return s})),n.d(t,"callbackResponseMessages",(function(){return a})),n.d(t,"resultErrorCodes",(function(){return u})),n.d(t,"serverErrorCodes",(function(){return c})),n.d(t,"agentStates",(function(){return l})),n.d(t,"interactionStates",(function(){return p})),n.d(t,"interactionTypes",(function(){return d})),n.d(t,"chatChannelTypes",(function(){return f})),n.d(t,"callDirections",(function(){return h})),n.d(t,"phoneDevices",(function(){return _})),n.d(t,"dispositionTypes",(function(){return E})),n.d(t,"chatPartyTypes",(function(){return C})),n.d(t,"interactionOriginations",(function(){return T})),n.d(t,"phoneTypes",(function(){return g}));var r=["GET_LOGIN_STATE","LOGIN","LOGOUT","GET_AGENT_STATE","SET_AGENT_STATE","ACCEPT_INTERACTION","REJECT_INTERACTION","START_CALL","START_CHAT","START_EMAIL","SEND_DTMF","CONSULT_CALL","BLIND_TRANSFER","TRANSFER","LEAVE_INTERACTION","COMPLETE_INTERACTION","LEAVE_AND_COMPLETE_INTERACTION","SWITCH_ACTIVE_INTERACTION","INVITE_TO_CALL_CONFERENCE","REMOVE_FROM_CALL_CONFERENCE","DESTROY_CALL_CONFERENCE","INVITE_TO_CHAT_CONFERENCE","REMOVE_FROM_CHAT_CONFERENCE","MERGE_ALL_CALLS_INTO_CONFERENCE","GET_TEAMS","GET_TEAM_MEMBERS","GET_SERVICES_LIST","GET_SERVICE","SET_SERVICE","GET_DID_LIST","GET_DID","SET_DID","GET_DISPOSITIONS_LIST","SET_DISPOSITION","SET_RESCHEDULE","ADD_NOTE","UPDATE_NOTE","REPLACE_NOTE","GET_CONFIG","GET_VARIABLES","SET_VARIABLE","ADD_INTERACTION_ASSOCIATED_OBJECT","SET_INTERACTION_ACTIVE_SCREEN","GET_PHONE_DEVICES_LIST","GET_PHONE_DEVICE","SET_PHONE_DEVICE","SET_CALL_HOLD","SET_CALL_RECORDING","SET_CALL_MUTE","SET_SCREEN_RECORDING_MUTE","GET_SCREEN_RECORDING_STATE","SET_WIDGET_MINIMIZED","SEND_CHAT_MESSAGE","SUGGEST_CHAT_MESSAGE","GET_AGENT_NOT_READY_REASONS","ACTIVATE_PAGE","GET_INTERACTIONS_STATE","SET_CALL_RECORDING_MUTE","SET_DIAL_CANDIDATES"],o={ON_LOGIN:{needResponse:!1},ON_LOGOUT:{needResponse:!1},ON_NEW_INTERACTION:{needResponse:!1},ON_INTERACTION_REMOVED:{needResponse:!1},ON_INTERACTION_STATE_CHANGE:{needResponse:!1},ON_ACTIVE_INTERACTION_SWITCHED:{needResponse:!1},ON_AGENT_STATE_CHANGE:{needResponse:!1},ON_REQUEST_TRANSFER_DATA:{needResponse:!0},ON_LOAD_TRANSFER_DATA:{needResponse:!1},ON_GET_KNOWLEDGE_BASE_FOLDER:{needResponse:!0},ON_SEARCH_KNOWLEDGE_BASE:{needResponse:!0},ON_GET_KNOWLEDGE_BASE_ARTICLE:{needResponse:!0},ON_OPEN_RECORD:{needResponse:!1},ON_SEARCH_RECORDS:{needResponse:!1},ON_SHOW_SCREEN:{needResponse:!1},ON_SCREEN_RECORDING_STATE_CHANGE:{needResponse:!1},ON_WIDGET_MINIMIZED_CHANGE:{needResponse:!1},ON_SERVER_ERROR:{needResponse:!1},ON_SOFTPHONE_STATUS_CHANGE:{needResponse:!1},ON_AUDIO_DEVICE_CHANGE:{needResponse:!1},ON_PHONE_CAPABILITIES_CHANGE:{needResponse:!1},ON_CALL_AUDIO_QUALITY_ALERT:{needResponse:!1},ON_WEB_SCREEN_POP_CUSTOM:{needResponse:!0},ON_SAVE_ACTIVITY_RECORD:{needResponse:!1},ON_VALIDATE_ASSOCIATED_RECORDS:{needResponse:!0},ON_REQUEST_RECORD_INFO:{needResponse:!0},ON_REQUEST_RECORD_ON_SCREEN:{needResponse:!0}},i="_RESPONSE",s=r.map((function(e){return e+i})),a=Object.keys(o).reduce((function(e,t){return o[t].needResponse&&e.push(t+i),e}),[]),u={not_enough_privileges:1,not_logged_in:2,invalid_args:3,logged_without_phone:4,banned:5,api_not_answer:6,invalid_request:7,timeout:8,no_chat_in_service:9,empty_number:10,no_service:11,self_call:12,no_interaction:13,api_method_not_implemented:14,not_suitable_state:15,no_disposition:16,object_not_found:17,no_permissions_did_sms:18,no_permissions_did_call:19,no_channel_in_service:20,unknown_error:99},c={forced_logout_by_other_client:100,forced_logout_by_supervisor:101,invalid_request:102,phone_not_registered:103,phone_not_in_dial_plan:104,tenant_disabled:105,destination_user_not_logged:106,user_disabled_or_deleted:107,user_already_logged_in:108,invalid_credentials:109,other_user_logged_with_phone:110,invalid_token:111,logged_users_limit_reached:112,already_logged_in_with_the_same_session:113,not_enough_privileges:114,sip_server_error:200,unknown_error:300},l=["supervising","ready","not_ready","busy","after_call_work"],p=["unknown","queued","ivr","wrap_up","wrap_up_hold","delivered","delivery_pending","hold","completed"],d=["voice","chat","email"],f=["telegram","line","facebook","web","nexmo","sms","viber","twitter","wechat","whatsapp"],h=["inbound","outbound"],_=["phone_type_browser","phone_type_external","phone_type_hard_custom","phone_type_hard_default","phone_type_nailed","phone_type_none","phone_type_soft_secure","phone_type_microsoft_teams","phone_type_soft_unsecure"],E=["SUCCESS","FAILURE","CONTINUE","SPAM","DO_NOT_CALL"],C=["internal","external"],T=["dialpad","dialpad-search","directory","recent","favorites","workitem","interaction","contact-profile","help","conference","auto","integration-api"],g=["mobile","business","home","fax","other"]},"../lib-uuid/dist/index.js":
/*!*********************************!*\
  !*** ../lib-uuid/dist/index.js ***!
  \*********************************/
/*! exports provided: uuid */function(e,t,n){"use strict";n.r(t);var r=n(/*! uuid/v4 */"../../node_modules/uuid/v4.js"),o=n.n(r);n.d(t,"uuid",(function(){return o.a}))},"./src/adc-client-api.ts":
/*!*******************************!*\
  !*** ./src/adc-client-api.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AgentDesktopClientAPIImpl=void 0;var o=r(n(/*! lodash/fromPairs */"../../node_modules/lodash/fromPairs.js")),i=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),s=n(/*! @bpinc/lib-uuid */"../lib-uuid/dist/index.js"),a=n(/*! ./utils */"./src/utils/index.ts"),u=function(){if(window.document.currentScript)return window.document.currentScript.src;var e=document.getElementsByTagName("script");return e[e.length-1].src}(),c=a.utils.extractURLParams(window.location.href).adcUrl||new URL(u).origin,l=function(){function e(e){var t=this;void 0===e&&(e={}),this.maximizedIframeWidth=null,this.adcFrame=null,this.adcFrameOrigin="",this.pendingMessages=[],this.integrationKey=e.integrationKey||s.uuid(),this.connectionEstablished=!1,this.adcIsReady=!1,this.messageLoggers=[],this.disableNewInteractionPopup=!!e.disableNewInteractionPopup,this.messageHandlers=o.default(Object.keys(i.callbackMessages).map((function(e){return[e,[]]}))),this.responseCallbacks=o.default(i.requestMessages.map((function(e){return[e+i.responseSuffix,{}]}))),this.prepareAdcIframe(e),this.registerListeners(),this.on("ON_WIDGET_MINIMIZED_CHANGE",(function(e){t.adcFrame&&(e?(t.maximizedIframeWidth=t.adcFrame.getAttribute("width"),t.adcFrame.setAttribute("width","44px")):t.adcFrame.setAttribute("width",t.maximizedIframeWidth||""))})),this.on("ON_WEB_SCREEN_POP_CUSTOM",(function(){return!1})),this.on("ON_VALIDATE_ASSOCIATED_RECORDS",(function(){return{valid:!0}}))}return e.prototype.injectMessageLogger=function(e){this.messageLoggers.push(e)},e.prototype.prepareAdcIframe=function(e){if(e.adcFrame){var t=e.adcFrame;t instanceof HTMLIFrameElement&&t.src?this.adcFrame=t:console.error("@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\n","Valid Communicator iframe would be created automatically")}if(!this.adcFrame){var n=null;if(e.mountRoot){var r=e.mountRoot;r instanceof HTMLElement?n=r:console.error("@@@ `mountRoot` is not HTMLElement.\n","Communicator iframe would be mounted to the `document.body` as a fallback scenario")}n||(n=document.body),this.adcFrame=document.createElement("iframe"),this.adcFrame.title="Agent Desktop Communicator",this.adcFrame.id="adc_frame",this.adcFrame.style.border="none",this.adcFrame.allow="microphone; camera; geolocation",this.adcFrame.onerror=function(){console.error("@@@ Adapter failure: unable to load AD Communicator")},e.standalone?(this.adcFrame.width="1",this.adcFrame.height="1",this.adcFrame.style.zIndex="-1000",this.adcFrame.style.position="absolute",this.adcFrame.style.top="-1000px",this.adcFrame.style.left="-1000px",this.adcFrame.src=c+"/agent/communicator/no-ui/"+location.search):(this.adcFrame.style.width="500px",this.adcFrame.style.height="100%",this.adcFrame.src=c+"/agent/communicator/"+location.search),n.appendChild(this.adcFrame)}this.adcFrameOrigin=new URL(this.adcFrame.src).origin},e.prototype.handleIncomingMessage=function(e,t,n){var r,o,s=this;console.log("@@@ Handle: ",e,t,n);var u=this.messageHandlers[e];if(u.length){var c=u.map((function(t){try{return t.apply(void 0,n)}catch(t){console.error('@@@ Error in the event "'+e+'" handler:',t)}}));(null===(o=i.callbackMessages[e])||void 0===o?void 0:o.needResponse)&&a.utils.waitResolveAll(c).then((function(n){var r=n.reduce((function(e,t){return"fulfilled"===t.status&&void 0!==t.value&&e.push(t.value),e}),[]),o=r.length?r[r.length-1]:void 0;s.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[o]})}))}else(null===(r=i.callbackMessages[e])||void 0===r?void 0:r.needResponse)&&this.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[],noHandlers:!0})},e.prototype.registerListeners=function(){var e=this;window.addEventListener("message",(function(t){var n;if(t.origin===e.adcFrameOrigin){var r=t.data||{},o=r.type,s=r.uid,a=r.params;if(o){t.stopImmediatePropagation();try{if("hello"===o){e.messageLoggers.forEach((function(e){return e(o,a)})),e.connectionEstablished=!0;var u={uid:s,type:"hi",params:[e.integrationKey,location.search,e.disableNewInteractionPopup]};if(!(null===(n=e.adcFrame)||void 0===n?void 0:n.contentWindow))throw new Error("adcFrame is not defined - that should not be possible");return e.messageLoggers.forEach((function(e){return e(u.type,u.params)})),void e.adcFrame.contentWindow.postMessage(u,e.adcFrameOrigin)}if("ready"===o)return e.messageLoggers.forEach((function(e){return e(o,a)})),e.adcIsReady=!0,void setTimeout((function(){e.pendingMessages.forEach((function(t){e.postMessageToAdc(t)})),e.pendingMessages=[]}));if(!e.adcIsReady)return;if(Object.keys(i.callbackMessages).includes(o))e.messageLoggers.forEach((function(e){return e(o,a)})),e.handleIncomingMessage(o,s,a);else if(i.requestResponseMessages.includes(o)){e.messageLoggers.forEach((function(e){return e(o,a)}));var c=e.responseCallbacks[o];if(c&&c[s]){var l=c[s];delete c[s],Promise.resolve().then((function(){return l(a)}))}}}catch(t){console.error("@@@ Error: ",t.message)}}}}))},e.prototype.runResponseTimeoutWatch=function(e,t,n){var r=this;setTimeout((function(){var o=r.responseCallbacks[e+i.responseSuffix];if(o[t]){delete o[t];var s='Response from Communicator for event "'+e+"\" wasn't received in the specified timeout 20000 ms";console.error("@@@ "+s),n({status:"error",error:{code:6,name:"api_not_answer",message:s}})}}),2e4)},e.prototype.postMessageToAdc=function(e){null!==this.adcFrame&&this.adcFrame.contentWindow&&this.adcIsReady?(this.messageLoggers.forEach((function(t){return t(e.type,e.params)})),"LOGIN"===e.type?console.log("@@@ ADAPTER SEND MESSAGE: LOGIN"):console.log("@@@ ADAPTER SEND MESSAGE: ",e),this.adcFrame.contentWindow.postMessage(e,this.adcFrameOrigin)):(console.log("@@@ ADAPTER: ADC is not ready, add pending message:",e),this.pendingMessages.push(e))},e.prototype.apiCall=function(e,t){var n=this;return new Promise((function(r){var o=s.uuid();n.postMessageToAdc({uid:o,type:e,params:t}),n.responseCallbacks[e+i.responseSuffix][o]=r,n.runResponseTimeoutWatch(e,o,r)}))},e.prototype.getLoginState=function(){return this.apiCall("GET_LOGIN_STATE")},e.prototype.login=function(e,t){return this.apiCall("LOGIN",[e,t])},e.prototype.logout=function(){return this.apiCall("LOGOUT")},e.prototype.getAgentState=function(){return this.apiCall("GET_AGENT_STATE")},e.prototype.setAgentState=function(e,t){return this.apiCall("SET_AGENT_STATE",[e,t])},e.prototype.acceptInteraction=function(e){return this.apiCall("ACCEPT_INTERACTION",[e])},e.prototype.rejectInteraction=function(e){return this.apiCall("REJECT_INTERACTION",[e])},e.prototype.startCall=function(e,t){return this.apiCall("START_CALL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.startChat=function(e,t,n){return this.apiCall("START_CHAT",[e,t,n?n instanceof Array?n:[n]:[]])},e.prototype.startEmail=function(e,t){return this.apiCall("START_EMAIL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.sendDtmf=function(e,t){return this.apiCall("SEND_DTMF",[e,t])},e.prototype.consultCall=function(e){return this.apiCall("CONSULT_CALL",[e])},e.prototype.blindTransfer=function(e,t,n){return this.apiCall("BLIND_TRANSFER",[e,t,n])},e.prototype.transfer=function(e){return this.apiCall("TRANSFER",[e])},e.prototype.leaveInteraction=function(e){return this.apiCall("LEAVE_INTERACTION",[e])},e.prototype.completeInteraction=function(e){return this.apiCall("COMPLETE_INTERACTION",[e])},e.prototype.leaveAndCompleteInteraction=function(e,t,n){return this.apiCall("LEAVE_AND_COMPLETE_INTERACTION",[e,t,n])},e.prototype.switchActiveInteraction=function(e){return this.apiCall("SWITCH_ACTIVE_INTERACTION",[e])},e.prototype.inviteToCallConference=function(e,t,n){return this.apiCall("INVITE_TO_CALL_CONFERENCE",[e,t,n])},e.prototype.removeFromCallConference=function(e,t){return this.apiCall("REMOVE_FROM_CALL_CONFERENCE",[e,t])},e.prototype.destroyCallConference=function(e){return this.apiCall("DESTROY_CALL_CONFERENCE",[e])},e.prototype.inviteToChatConference=function(e,t){return this.apiCall("INVITE_TO_CHAT_CONFERENCE",[e,t])},e.prototype.removeFromChatConference=function(e,t){return this.apiCall("REMOVE_FROM_CHAT_CONFERENCE",[e,t])},e.prototype.mergeAllCallsIntoConference=function(e){return this.apiCall("MERGE_ALL_CALLS_INTO_CONFERENCE",[e])},e.prototype.getTeams=function(){return this.apiCall("GET_TEAMS")},e.prototype.getTeamMembers=function(e){return this.apiCall("GET_TEAM_MEMBERS",[e])},e.prototype.getServicesList=function(){return this.apiCall("GET_SERVICES_LIST",[])},e.prototype.getService=function(){return this.apiCall("GET_SERVICE",[])},e.prototype.setService=function(e){return this.apiCall("SET_SERVICE",[e])},e.prototype.getDIDNumbersList=function(){return this.apiCall("GET_DID_LIST",[])},e.prototype.getDIDNumber=function(){return this.apiCall("GET_DID",[])},e.prototype.setDIDNumber=function(e){return this.apiCall("SET_DID",[e])},e.prototype.getDispositionsList=function(e){return this.apiCall("GET_DISPOSITIONS_LIST",[e])},e.prototype.setDisposition=function(e,t){return this.apiCall("SET_DISPOSITION",[e,t])},e.prototype.addNote=function(e,t){return this.apiCall("ADD_NOTE",[e,t])},e.prototype.updateNote=function(e,t){return this.apiCall("UPDATE_NOTE",[e,t])},e.prototype.replaceNote=function(e,t){return this.apiCall("REPLACE_NOTE",[e,t])},e.prototype.setRescheduleWindow=function(e,t){return this.apiCall("SET_RESCHEDULE",[e,t])},e.prototype.getConfig=function(){return this.apiCall("GET_CONFIG")},e.prototype.setVariable=function(e,t,n){return this.apiCall("SET_VARIABLE",[e,t,n])},e.prototype.getVariables=function(e,t){return this.apiCall("GET_VARIABLES",[e,t])},e.prototype.addInteractionAssociatedObject=function(e,t){return this.apiCall("ADD_INTERACTION_ASSOCIATED_OBJECT",[e,t])},e.prototype.setInteractionActiveScreen=function(e,t){return this.apiCall("SET_INTERACTION_ACTIVE_SCREEN",[e,t])},e.prototype.getPhoneDevicesList=function(){return this.apiCall("GET_PHONE_DEVICES_LIST",[])},e.prototype.getPhoneDevice=function(){return this.apiCall("GET_PHONE_DEVICE",[])},e.prototype.setPhoneDevice=function(e){return this.apiCall("SET_PHONE_DEVICE",[e])},e.prototype.setCallHold=function(e,t){return this.apiCall("SET_CALL_HOLD",[e,t])},e.prototype.setCallRecording=function(e,t){return this.apiCall("SET_CALL_RECORDING",[e,t])},e.prototype.setCallMute=function(e,t){return this.apiCall("SET_CALL_MUTE",[e,t])},e.prototype.setScreenRecordingMute=function(e){return this.apiCall("SET_SCREEN_RECORDING_MUTE",[e])},e.prototype.getScreenRecordingState=function(){return this.apiCall("GET_SCREEN_RECORDING_STATE")},e.prototype.setWidgetMinimized=function(e){return this.apiCall("SET_WIDGET_MINIMIZED",[e])},e.prototype.sendChatMessage=function(e,t){return this.apiCall("SEND_CHAT_MESSAGE",[e,t])},e.prototype.suggestChatMessage=function(e,t,n){return this.apiCall("SUGGEST_CHAT_MESSAGE",[e,t,n])},e.prototype.getAgentNotReadyReasons=function(){return this.apiCall("GET_AGENT_NOT_READY_REASONS")},e.prototype.activatePage=function(){return this.apiCall("ACTIVATE_PAGE",[])},e.prototype.getInteractionsState=function(){return this.apiCall("GET_INTERACTIONS_STATE",[])},e.prototype.setCallRecordingMute=function(e,t){return this.apiCall("SET_CALL_RECORDING_MUTE",[e,t])},e.prototype.setDialCandidates=function(e){return this.apiCall("SET_DIAL_CANDIDATES",[e])},e.prototype.on=function(e,t){this.messageHandlers[e].push(t)},e.prototype.remove=function(e,t){var n=this.messageHandlers[e].indexOf(t);-1!==n&&this.messageHandlers[e].splice(n,1)},e}();t.AgentDesktopClientAPIImpl=l,window.brightpattern={AdApi:l}},"./src/integrations/lightning/LightningAPIWrapper.ts":
/*!***********************************************************!*\
  !*** ./src/integrations/lightning/LightningAPIWrapper.ts ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.LightningAPI=void 0;var s="CSIMIntegrationTest",a="saveActivityObject",u="saveActivityAttribute",c="getCredentials",l="requestPhoneData",p=function(){function e(){var e=this;this.apex={saveActivity:function(t){return e.runApex({apexClass:s,methodName:a,methodParams:t})},saveActivityAttribute:function(t,n,r){var o="objectId="+t+"&key="+n+"&value="+r;return e.runApex({apexClass:s,methodName:u,methodParams:o})},geContactDetails:function(t){return e.runApex({apexClass:s,methodName:c,methodParams:t})},requestPhoneData:function(t,n){var r="objectType="+t+"&objectId="+n;return e.runApex({apexClass:s,methodName:l,methodParams:r})}},this.clickToDialHandlers=[],this.focusHandlers=[],this.focusHandlers=[],this.workStartHandlers=[],this.registerHandlers(),this.notifyInitializationComplete()}return e.prototype.registerHandlers=function(){var e=this;window.sforce.opencti.onClickToDial({listener:function(t){"error"in t?(console.error("clickToDial return error: ",t.error),e.onClickToDial(null,t.error)):e.onClickToDial(t)}}),window.sforce.opencti.onNavigationChange({listener:function(t){e.onNavigationChange(t)}}),window.sforce.opencti.hvs.onWorkStart({listener:function(t){e.onWorkStart(t)}})},e.prototype.onClickToDial=function(e,t){this.clickToDialHandlers.forEach((function(n){return n(e,t)}))},e.prototype.onNavigationChange=function(e){this.focusHandlers.forEach((function(t){return t(e)}))},e.prototype.onWorkStart=function(e){this.workStartHandlers.forEach((function(t){return t(e)}))},e.prototype.addOnClickToDialHandler=function(e){this.clickToDialHandlers.push(e)},e.prototype.addOnNavigationChangeHandler=function(e){this.focusHandlers.push(e)},e.prototype.addOnWorkStartHandler=function(e){this.workStartHandlers.push(e)},e.prototype.notifyInitializationComplete=function(){window.sforce.opencti.notifyInitializationComplete({callback:function(e){e.success?console.log("notifyInitializationComplete: successful"):console.error("notifyInitializationComplete: error")}})},e.prototype.apiCall=function(e,t){return new Promise((function(n,o){e(r({callback:function(e){e.success?n(e.returnValue):o(e.errors)}},t))}))},e.prototype.disableClickToDial=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.disableClickToDial)]}))}))},e.prototype.enableClickToDial=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.enableClickToDial)]}))}))},e.prototype.getCallCenterSettings=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.getCallCenterSettings)]}))}))},e.prototype.getAppViewInfo=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.getAppViewInfo)]}))}))},e.prototype.getSoftphoneLayout=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.getSoftphoneLayout)]}))}))},e.prototype.completeWork=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.hvs.completeWork,e)]}))}))},e.prototype.isSoftphonePanelVisible=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.isSoftphonePanelVisible).then((function(e){return e.visible}))]}))}))},e.prototype.refreshView=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.apiCall(window.sforce.opencti.refreshView)]}))}))},e.prototype.saveLog=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.saveLog,{value:e})]}))}))},e.prototype.screenPop=function(e,t,n){return o(this,void 0,void 0,(function(){return i(this,(function(r){return[2,this.apiCall(window.sforce.opencti.screenPop,{type:e,params:t,defaultFieldValues:n})]}))}))},e.prototype.searchAndScreenPop=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.searchAndScreenPop,e)]}))}))},e.prototype.setSoftphoneItemIcon=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphoneItemIcon,{key:e})]}))}))},e.prototype.setSoftphoneItemLabel=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphoneItemLabel,{label:e})]}))}))},e.prototype.setSoftphonePanelHeight=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphonePanelHeight,{heightPX:e})]}))}))},e.prototype.setSoftphonePanelIcon=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphonePanelIcon,{key:e})]}))}))},e.prototype.setSoftphonePanelLabel=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphonePanelLabel,{label:e})]}))}))},e.prototype.setSoftphonePanelVisibility=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphonePanelVisibility,{visible:e})]}))}))},e.prototype.setSoftphonePanelWidth=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.setSoftphonePanelWidth,{widthPX:e})]}))}))},e.prototype.subscribe=function(e,t){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,new Promise((function(n,r){window.sforce.opencti.subscribe({channelName:e,listener:t,callback:function(e){e.success?n(e.subscription):r(e.errors)}})}))]}))}))},e.prototype.unsubscribe=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.unsubscribe,{subscription:e})]}))}))},e.prototype.publish=function(e,t){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,this.apiCall(window.sforce.opencti.publish,{channelName:e,message:t})]}))}))},e.prototype.runApex=function(e){return o(this,void 0,void 0,(function(){return i(this,(function(t){return[2,this.apiCall(window.sforce.opencti.runApex,e).then((function(e){var t=e.runApex;return JSON.parse(t.replaceAll("'",'"')).result}))]}))}))},e}();t.LightningAPI=p},"./src/integrations/lightning/guards.ts":
/*!**********************************************!*\
  !*** ./src/integrations/lightning/guards.ts ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assertUrlData=void 0,t.assertUrlData=function(e){if(!function(e){return"object"==typeof e&&null!==e}(e)||!("url"in e))throw Error("Data is not url data: "+JSON.stringify(e))}},"./src/integrations/lightning/index.ts":
/*!*********************************************!*\
  !*** ./src/integrations/lightning/index.ts ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(/*! ./integration */"./src/integrations/lightning/integration.ts").registerSalesforceIntegration()},"./src/integrations/lightning/integration.ts":
/*!***************************************************!*\
  !*** ./src/integrations/lightning/integration.ts ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},s=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.registerSalesforceIntegration=void 0;var a=n(/*! ./loadExternalApi */"./src/integrations/lightning/loadExternalApi.ts"),u=n(/*! ./LightningAPIWrapper */"./src/integrations/lightning/LightningAPIWrapper.ts"),c=n(/*! ../../adc-client-api */"./src/adc-client-api.ts"),l=n(/*! ../../utils */"./src/utils/index.ts"),p=n(/*! ./guards */"./src/integrations/lightning/guards.ts"),d=["Contract","Campaign","Account","Asset","Case","Solution","Opportunity"],f=["Contact","Lead"],h={inbound:"Inbound",outbound:"Outbound"},_={voice:"Call",chat:"Chat",email:"Email"},E={Phone:"business",BusinessPhone:"business",MobilePhone:"mobile",HomePhone:"home",Fax:"fax",OtherPhone:"other"},C="@ADAPTER",T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.log.apply(console,s([C],e))},g=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.info.apply(console,s([C],e))},y=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.warn.apply(console,s([C],e))},v=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return console.error.apply(console,s([C],e))};t.registerSalesforceIntegration=function(){a.loadCrmApi.then((function(){T("Salesforce OpenCTI API object:",window.sforce.opencti);var e=null,t=null,n=!1,s=!1,a=!1,C=null,m=new u.LightningAPI,A=new c.AgentDesktopClientAPIImpl({integrationKey:"salesforce"});g("Initialize Adapter"),m.setSoftphonePanelHeight(800).catch((function(e){return v("setSoftphonePanelHeight error:",e)})),m.setSoftphonePanelWidth(502).catch((function(e){return v("setSoftphonePanelWidth error:",e)})),m.setSoftphonePanelVisibility(!0).catch((function(e){return v("setSoftphonePanelVisibility error:",e)})),m.getCallCenterSettings().then((function(e){g("sfConfig:",C=e)})).catch((function(e){return v("getCallCenterSettings error:",e)})),A.on("ON_LOGIN",(function(e){n=e.isLoggedIn,m.enableClickToDial().catch((function(e){return v("enableClickToDial error:",e)}))})),A.on("ON_LOGOUT",(function(){n=!1,m.disableClickToDial().catch((function(e){return v("disableClickToDial error:",e)}))})),A.getLoginState().then((function(e){"success"===e.status?(g("Initial login state:",e.data),n=e.data.isLoggedIn,s=!0,n&&m.enableClickToDial().catch((function(e){return v("enableClickToDial error:",e)}))):y("Unable to get login state:",e.error)})),A.getInteractionsState().then((function(t){"success"===t.status?(g("Initial interactions state:",t.data),e=t.data.activeInteractionId,a=!0):("not_logged_in"===t.error.name&&(e=null,a=!0),y("Unable to get interactions state:",t.error))})),A.on("ON_OPEN_RECORD",(function(e){var t=e.id;return r(void 0,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:g("object screen pop:",t),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,m.screenPop("sobject",{recordId:t})];case 2:return e=r.sent(),g('screenPop["sobject"] result:',e),[3,4];case 3:return n=r.sent(),v('screenPop["sobject"] error',n),[3,4];case 4:return[2]}}))}))})),A.on("ON_SEARCH_RECORDS",(function(e){var t=e.text;return r(void 0,void 0,void 0,(function(){var e,n;return o(this,(function(r){switch(r.label){case 0:g("search screen pop:",t),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,m.screenPop("search",{searchString:t})];case 2:return e=r.sent(),g('screenPop["search"] result:',e),[3,4];case 3:return n=r.sent(),v('screenPop["search"] error:',n),[3,4];case 4:return[2]}}))}))})),A.on("ON_SHOW_SCREEN",(function(e){return r(void 0,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:p.assertUrlData(e),g("show screen:",e.url),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,m.screenPop("url",{url:e.url})];case 2:return t=r.sent(),g('screenPop["url"] result:',t),[3,4];case 3:return n=r.sent(),v('screenPop["url"] error:',n),[3,4];case 4:return[2]}}))}))})),A.on("ON_VALIDATE_ASSOCIATED_RECORDS",(function(e,t){return{valid:!0}})),A.on("ON_REQUEST_RECORD_ON_SCREEN",(function(){return r(void 0,void 0,void 0,(function(){return o(this,(function(e){return[2,null!=t?t:null]}))}))}));function S(t){s&&a?n?e?A.addInteractionAssociatedObject(t):g("Skip opened object: no interaction"):g("Skip opened object: user is not logged in"):g("Skip opened object: adapter not initialized")}A.on("ON_SAVE_ACTIVITY_RECORD",(function(e){return t=e,r(void 0,void 0,void 0,(function(){var e,n,r,i,s,a,u,c,p,E,C,T,y,A,S,I,N,O;return o(this,(function(o){switch(o.label){case 0:g("save activity:",t),e=t.associatedObjects,n=e.selected,r=e.list,i=n.reduce((function(e,t){var n=r.find((function(e){return e.id===t}));return n&&e.push(n),e}),[]),s=i.find((function(e){var t;return f.includes(null!==(t=e.type)&&void 0!==t?t:"")})),a=l.utils.findLast(r,(function(e){var t;return f.includes(null!==(t=e.type)&&void 0!==t?t:"")})),u=s||a,c=i.find((function(e){var t;return d.includes(null!==(t=e.type)&&void 0!==t?t:"")})),p=l.utils.findLast(r,(function(e){var t;return d.includes(null!==(t=e.type)&&void 0!==t?t:"")})),C=(null==(E=c||p)?void 0:E.displayType)||(null==u?void 0:u.displayType),T=C?C+": "+t.service:null!==(S=t.service)&&void 0!==S?S:"",y={entityApiName:"Task",ActivityDate:(b=new Date(null!==(I=t.startTime)&&void 0!==I?I:Date.now()),R=b.getTimezoneOffset(),D=new Date(b.getTime()+6e4*R),D.getFullYear()+"-"+("0"+(D.getMonth()+1)).slice(-2)+"-"+("0"+D.getDate()).slice(-2)+" "+("0"+D.getHours()).slice(-2)+":"+("0"+D.getMinutes()).slice(-2)+":"+("0"+D.getSeconds()).slice(-2)),CallDisposition:t.disposition,CallDurationInSeconds:t.duration,CallObject:t.globalInteractionId,CallType:t.callDirection&&h[t.callDirection]||void 0,Description:t.description,Priority:"Normal",Status:"Completed",Subject:T,Type:_[t.type],WhatId:null!==(N=null==E?void 0:E.id)&&void 0!==N?N:void 0,WhoId:null!==(O=null==u?void 0:u.id)&&void 0!==O?O:void 0,BrightPattern__SPRecordingOrTranscriptURL__c:t.recordingUrl},g("SF activity record:",y),o.label=1;case 1:return o.trys.push([1,4,,5]),[4,m.saveLog(y)];case 2:return o.sent(),[4,m.refreshView()];case 3:return o.sent(),[3,5];case 4:return A=o.sent(),v("saveLog error:",A),[3,5];case 5:return[2]}var b,R,D}))}));var t})),A.on("ON_ACTIVE_INTERACTION_SWITCHED",(function(t){e=t})),m.addOnNavigationChangeHandler((function(n){return r(void 0,void 0,void 0,(function(){return o(this,(function(r){var o,s;return g("SF navigation:",n),n.url&&e&&A.setInteractionActiveScreen({url:n.url}),n.recordId?(S(t={id:n.recordId,type:n.objectType,displayName:n.objectType+": "+n.recordName,displayType:n.objectType,customFields:{isCase:""+d.includes(n.objectType),isContact:""+f.includes(n.objectType)}}),o=t,s=[],m.apex.requestPhoneData(o.type,o.id).then((function(e){if(g("APEX:requestPhoneData result:",e),"string"!=typeof e){var t=e.Id,n=(e.attributes,i(e,["Id","attributes"]));Object.values(n).some((function(e){return!!e}))&&s.push({id:t,displayName:o.displayName,associatedObjects:[o],phones:Object.keys(n).filter((function(e){return!!n[e].trim()})).map((function(e){var t;return{number:n[e],type:null!==(t=E[e])&&void 0!==t?t:"other",displayType:l.utils.splitWords(e)}}))})}})).catch((function(e){v("APEX:requestPhoneData catch:",e)})).finally((function(){A.setDialCandidates(s)}))):t=null,!function(){if(!C)return[];var e=C["/reqGeneralInfo/muteRecordingUrls"];return e?e.split(",").map((function(e){return e.trim()})).filter((function(e){return e})):[]}().some((function(e){return n.url.includes(e)}))?A.setCallRecordingMute(!1,"all"):A.setCallRecordingMute(!0,"all"),[2]}))}))})),m.addOnClickToDialHandler((function(e,t){return r(void 0,void 0,void 0,(function(){var r,i;return o(this,(function(o){switch(o.label){case 0:if(g("SF click-to-dial data:",e),t)return v("SF click-to-dial error:",t),[2];if(!e)return y("SF click-to-dial has empty data!"),[2];if(!n)return[2];r={id:e.recordId,type:e.objectType,displayName:e.objectType+": "+e.recordName,displayType:e.objectType,customFields:{isCase:""+d.includes(e.objectType),isContact:""+f.includes(e.objectType)}},o.label=1;case 1:return o.trys.push([1,3,,4]),[4,A.startCall(e.number,r)];case 2:return o.sent(),[3,4];case 3:return i=o.sent(),v("adApi.startCall return error:",i),[3,4];case 4:return[2]}}))}))})),A.on("ON_NEW_INTERACTION",(function(e){return r(void 0,void 0,void 0,(function(){var t,n;return o(this,(function(r){switch(r.label){case 0:if(m.isSoftphonePanelVisible().then((function(e){e||m.setSoftphonePanelVisibility(!0).catch((function(e){return v("setSoftphonePanelVisibility error:",e)}))})).catch((function(e){return v("isSoftphonePanelVisible error:",e)})),"dialpad"!==e.origination)return[3,6];console.log("manual call handler for:",e.phoneNumber),r.label=1;case 1:return r.trys.push([1,5,,6]),[4,m.searchAndScreenPop({searchParams:e.phoneNumber,callType:"outbound",deferred:!0})];case 2:return t=r.sent(),console.log("SF search result:",t),t.SCREEN_POP_DATA?[4,m.screenPop(t.SCREEN_POP_DATA.type,t.SCREEN_POP_DATA.params,t.SCREEN_POP_DATA.defaultFieldValues)]:[3,4];case 3:r.sent(),r.label=4;case 4:return[3,6];case 5:return n=r.sent(),v("searchAndScreenPop or screenPop error:",n),[3,6];case 6:return[2]}}))}))}))})).catch((function(e){v("Can't initialize OpenCTI Salesforce Lightning API library:",e)}))}},"./src/integrations/lightning/loadExternalApi.ts":
/*!*******************************************************!*\
  !*** ./src/integrations/lightning/loadExternalApi.ts ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadCrmApi=void 0,t.loadCrmApi=new Promise((function(e,t){var n=document.createElement("script");document.head.insertAdjacentElement("beforeend",n),n.addEventListener("load",e),n.addEventListener("error",t),n.type="text/javascript",n.src="libs/opencti_v47.js"}))},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utils=void 0;t.utils={extractURLParams:function(e){var t={};if(e)try{var n=e.split("?").slice(1).join("?");if(n.length)n.split("&").reduce((function(e,t){var n=t.split("=");n.length&&(e[decodeURIComponent(n.shift())]=decodeURIComponent(n.join("=")));return e}),t)}catch(t){console.error("Unable to parse URL parameters: ",e)}return t},capitalize:function(e){return e.replace(/^\w/,(function(e){return e.toUpperCase()}))},findLast:function(e,t){for(var n=e.length-1;n>=0;n--)if(t(e[n]))return e[n];return null},shallowObjEqual:function(e,t){for(var n in e)if(!(n in t)||e[n]!==t[n])return!1;for(var n in t)if(!(n in e)||t[n]!==e[n])return!1;return!0},waitResolveAll:function(e){return new Promise((function(t,n){if(e.length){var r=0,o=new Array(e.length);e.map((function(e){return e instanceof Promise?e:Promise.resolve(e)})).forEach((function(n,i){n.then((function(e){o[i]={status:"fulfilled",value:e}})).catch((function(e){o[i]={status:"rejected",reason:e}})).finally((function(){++r===e.length&&t(o)}))}))}else t([])}))},startsWithAny:function(e,t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(e.startsWith(o))return!0}return!1},splitWords:function(e){return e.trim().split(/(?=[A-Z])/).map((function(e){return e.trim()})).join(" ")}}},0:
/*!***************************************************!*\
  !*** multi ./src/integrations/lightning/index.ts ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! C:\Users\Dev\Documents\projects\Agent_old\packages\adapters\src\integrations\lightning\index.ts */"./src/integrations/lightning/index.ts")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,