!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="./",n(n.s="./src/adc-client-api.ts")}({"../../node_modules/lodash/fromPairs.js":
/*!**********************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/lodash/fromPairs.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r}},"../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},"../../node_modules/uuid/lib/rng-browser.js":
/*!**************************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/lib/rng-browser.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},"../../node_modules/uuid/v4.js":
/*!*************************************************************************!*\
  !*** C:/Users/Dev/Documents/projects/Agent_old/node_modules/uuid/v4.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lib/rng */"../../node_modules/uuid/lib/rng-browser.js"),o=n(/*! ./lib/bytesToUuid */"../../node_modules/uuid/lib/bytesToUuid.js");e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[i+a]=s[a];return t||o(s)}},"../adapters-public-api-types/dist/types.js":
/*!****************************************!*\
  !*** .-public-api-types/dist/types.js ***!
  \****************************************/
/*! exports provided: requestMessages, callbackMessages, responseSuffix, requestResponseMessages, callbackResponseMessages, resultErrorCodes, serverErrorCodes, agentStates, interactionStates, interactionTypes, chatChannelTypes, callDirections, phoneDevices, dispositionTypes, chatPartyTypes, interactionOriginations, phoneTypes */function(e,t,n){"use strict";n.r(t),n.d(t,"requestMessages",(function(){return r})),n.d(t,"callbackMessages",(function(){return o})),n.d(t,"responseSuffix",(function(){return i})),n.d(t,"requestResponseMessages",(function(){return s})),n.d(t,"callbackResponseMessages",(function(){return a})),n.d(t,"resultErrorCodes",(function(){return u})),n.d(t,"serverErrorCodes",(function(){return l})),n.d(t,"agentStates",(function(){return c})),n.d(t,"interactionStates",(function(){return p})),n.d(t,"interactionTypes",(function(){return _})),n.d(t,"chatChannelTypes",(function(){return E})),n.d(t,"callDirections",(function(){return d})),n.d(t,"phoneDevices",(function(){return T})),n.d(t,"dispositionTypes",(function(){return f})),n.d(t,"chatPartyTypes",(function(){return C})),n.d(t,"interactionOriginations",(function(){return h})),n.d(t,"phoneTypes",(function(){return A}));var r=["GET_LOGIN_STATE","LOGIN","LOGOUT","GET_AGENT_STATE","SET_AGENT_STATE","ACCEPT_INTERACTION","REJECT_INTERACTION","START_CALL","START_CHAT","START_EMAIL","SEND_DTMF","CONSULT_CALL","BLIND_TRANSFER","TRANSFER","LEAVE_INTERACTION","COMPLETE_INTERACTION","LEAVE_AND_COMPLETE_INTERACTION","SWITCH_ACTIVE_INTERACTION","INVITE_TO_CALL_CONFERENCE","REMOVE_FROM_CALL_CONFERENCE","DESTROY_CALL_CONFERENCE","INVITE_TO_CHAT_CONFERENCE","REMOVE_FROM_CHAT_CONFERENCE","MERGE_ALL_CALLS_INTO_CONFERENCE","GET_TEAMS","GET_TEAM_MEMBERS","GET_SERVICES_LIST","GET_SERVICE","SET_SERVICE","GET_DID_LIST","GET_DID","SET_DID","GET_DISPOSITIONS_LIST","SET_DISPOSITION","SET_RESCHEDULE","ADD_NOTE","UPDATE_NOTE","REPLACE_NOTE","GET_CONFIG","GET_VARIABLES","SET_VARIABLE","ADD_INTERACTION_ASSOCIATED_OBJECT","SET_INTERACTION_ACTIVE_SCREEN","GET_PHONE_DEVICES_LIST","GET_PHONE_DEVICE","SET_PHONE_DEVICE","SET_CALL_HOLD","SET_CALL_RECORDING","SET_CALL_MUTE","SET_SCREEN_RECORDING_MUTE","GET_SCREEN_RECORDING_STATE","SET_WIDGET_MINIMIZED","SEND_CHAT_MESSAGE","SUGGEST_CHAT_MESSAGE","GET_AGENT_NOT_READY_REASONS","ACTIVATE_PAGE","GET_INTERACTIONS_STATE","SET_CALL_RECORDING_MUTE","SET_DIAL_CANDIDATES"],o={ON_LOGIN:{needResponse:!1},ON_LOGOUT:{needResponse:!1},ON_NEW_INTERACTION:{needResponse:!1},ON_INTERACTION_REMOVED:{needResponse:!1},ON_INTERACTION_STATE_CHANGE:{needResponse:!1},ON_ACTIVE_INTERACTION_SWITCHED:{needResponse:!1},ON_AGENT_STATE_CHANGE:{needResponse:!1},ON_REQUEST_TRANSFER_DATA:{needResponse:!0},ON_LOAD_TRANSFER_DATA:{needResponse:!1},ON_GET_KNOWLEDGE_BASE_FOLDER:{needResponse:!0},ON_SEARCH_KNOWLEDGE_BASE:{needResponse:!0},ON_GET_KNOWLEDGE_BASE_ARTICLE:{needResponse:!0},ON_OPEN_RECORD:{needResponse:!1},ON_SEARCH_RECORDS:{needResponse:!1},ON_SHOW_SCREEN:{needResponse:!1},ON_SCREEN_RECORDING_STATE_CHANGE:{needResponse:!1},ON_WIDGET_MINIMIZED_CHANGE:{needResponse:!1},ON_SERVER_ERROR:{needResponse:!1},ON_SOFTPHONE_STATUS_CHANGE:{needResponse:!1},ON_AUDIO_DEVICE_CHANGE:{needResponse:!1},ON_PHONE_CAPABILITIES_CHANGE:{needResponse:!1},ON_CALL_AUDIO_QUALITY_ALERT:{needResponse:!1},ON_WEB_SCREEN_POP_CUSTOM:{needResponse:!0},ON_SAVE_ACTIVITY_RECORD:{needResponse:!1},ON_VALIDATE_ASSOCIATED_RECORDS:{needResponse:!0},ON_REQUEST_RECORD_INFO:{needResponse:!0},ON_REQUEST_RECORD_ON_SCREEN:{needResponse:!0}},i="_RESPONSE",s=r.map((function(e){return e+i})),a=Object.keys(o).reduce((function(e,t){return o[t].needResponse&&e.push(t+i),e}),[]),u={not_enough_privileges:1,not_logged_in:2,invalid_args:3,logged_without_phone:4,banned:5,api_not_answer:6,invalid_request:7,timeout:8,no_chat_in_service:9,empty_number:10,no_service:11,self_call:12,no_interaction:13,api_method_not_implemented:14,not_suitable_state:15,no_disposition:16,object_not_found:17,no_permissions_did_sms:18,no_permissions_did_call:19,no_channel_in_service:20,unknown_error:99},l={forced_logout_by_other_client:100,forced_logout_by_supervisor:101,invalid_request:102,phone_not_registered:103,phone_not_in_dial_plan:104,tenant_disabled:105,destination_user_not_logged:106,user_disabled_or_deleted:107,user_already_logged_in:108,invalid_credentials:109,other_user_logged_with_phone:110,invalid_token:111,logged_users_limit_reached:112,already_logged_in_with_the_same_session:113,not_enough_privileges:114,sip_server_error:200,unknown_error:300},c=["supervising","ready","not_ready","busy","after_call_work"],p=["unknown","queued","ivr","wrap_up","wrap_up_hold","delivered","delivery_pending","hold","completed"],_=["voice","chat","email"],E=["telegram","line","facebook","web","nexmo","sms","viber","twitter","wechat","whatsapp"],d=["inbound","outbound"],T=["phone_type_browser","phone_type_external","phone_type_hard_custom","phone_type_hard_default","phone_type_nailed","phone_type_none","phone_type_soft_secure","phone_type_microsoft_teams","phone_type_soft_unsecure"],f=["SUCCESS","FAILURE","CONTINUE","SPAM","DO_NOT_CALL"],C=["internal","external"],h=["dialpad","dialpad-search","directory","recent","favorites","workitem","interaction","contact-profile","help","conference","auto","integration-api"],A=["mobile","business","home","fax","other"]},"../lib-uuid/dist/index.js":
/*!*********************************!*\
  !*** ../lib-uuid/dist/index.js ***!
  \*********************************/
/*! exports provided: uuid */function(e,t,n){"use strict";n.r(t);var r=n(/*! uuid/v4 */"../../node_modules/uuid/v4.js"),o=n.n(r);n.d(t,"uuid",(function(){return o.a}))},"./src/adc-client-api.ts":
/*!*******************************!*\
  !*** ./src/adc-client-api.ts ***!
  \*******************************/
/*! no static exports found */function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AgentDesktopClientAPIImpl=void 0;var o=r(n(/*! lodash/fromPairs */"../../node_modules/lodash/fromPairs.js")),i=n(/*! @bpinc/adapters-public-api-types */"../adapters-public-api-types/dist/types.js"),s=n(/*! @bpinc/lib-uuid */"../lib-uuid/dist/index.js"),a=n(/*! ./utils */"./src/utils/index.ts"),u=function(){if(window.document.currentScript)return window.document.currentScript.src;var e=document.getElementsByTagName("script");return e[e.length-1].src}(),l=a.utils.extractURLParams(window.location.href).adcUrl||new URL(u).origin,c=function(){function e(e){var t=this;void 0===e&&(e={}),this.maximizedIframeWidth=null,this.adcFrame=null,this.adcFrameOrigin="",this.pendingMessages=[],this.integrationKey=e.integrationKey||s.uuid(),this.connectionEstablished=!1,this.adcIsReady=!1,this.messageLoggers=[],this.disableNewInteractionPopup=!!e.disableNewInteractionPopup,this.messageHandlers=o.default(Object.keys(i.callbackMessages).map((function(e){return[e,[]]}))),this.responseCallbacks=o.default(i.requestMessages.map((function(e){return[e+i.responseSuffix,{}]}))),this.prepareAdcIframe(e),this.registerListeners(),this.on("ON_WIDGET_MINIMIZED_CHANGE",(function(e){t.adcFrame&&(e?(t.maximizedIframeWidth=t.adcFrame.getAttribute("width"),t.adcFrame.setAttribute("width","44px")):t.adcFrame.setAttribute("width",t.maximizedIframeWidth||""))})),this.on("ON_WEB_SCREEN_POP_CUSTOM",(function(){return!1})),this.on("ON_VALIDATE_ASSOCIATED_RECORDS",(function(){return{valid:!0}}))}return e.prototype.injectMessageLogger=function(e){this.messageLoggers.push(e)},e.prototype.prepareAdcIframe=function(e){if(e.adcFrame){var t=e.adcFrame;t instanceof HTMLIFrameElement&&t.src?this.adcFrame=t:console.error("@@@ `adcFrame` is not HTMLIframeElement or it have no `src` attribute.\n","Valid Communicator iframe would be created automatically")}if(!this.adcFrame){var n=null;if(e.mountRoot){var r=e.mountRoot;r instanceof HTMLElement?n=r:console.error("@@@ `mountRoot` is not HTMLElement.\n","Communicator iframe would be mounted to the `document.body` as a fallback scenario")}n||(n=document.body),this.adcFrame=document.createElement("iframe"),this.adcFrame.title="Agent Desktop Communicator",this.adcFrame.id="adc_frame",this.adcFrame.style.border="none",this.adcFrame.allow="microphone; camera; geolocation",this.adcFrame.onerror=function(){console.error("@@@ Adapter failure: unable to load AD Communicator")},e.standalone?(this.adcFrame.width="1",this.adcFrame.height="1",this.adcFrame.style.zIndex="-1000",this.adcFrame.style.position="absolute",this.adcFrame.style.top="-1000px",this.adcFrame.style.left="-1000px",this.adcFrame.src=l+"/agent/communicator/no-ui/"+location.search):(this.adcFrame.style.width="500px",this.adcFrame.style.height="100%",this.adcFrame.src=l+"/agent/communicator/"+location.search),n.appendChild(this.adcFrame)}this.adcFrameOrigin=new URL(this.adcFrame.src).origin},e.prototype.handleIncomingMessage=function(e,t,n){var r,o,s=this;console.log("@@@ Handle: ",e,t,n);var u=this.messageHandlers[e];if(u.length){var l=u.map((function(t){try{return t.apply(void 0,n)}catch(t){console.error('@@@ Error in the event "'+e+'" handler:',t)}}));(null===(o=i.callbackMessages[e])||void 0===o?void 0:o.needResponse)&&a.utils.waitResolveAll(l).then((function(n){var r=n.reduce((function(e,t){return"fulfilled"===t.status&&void 0!==t.value&&e.push(t.value),e}),[]),o=r.length?r[r.length-1]:void 0;s.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[o]})}))}else(null===(r=i.callbackMessages[e])||void 0===r?void 0:r.needResponse)&&this.postMessageToAdc({uid:t,type:e+i.responseSuffix,params:[],noHandlers:!0})},e.prototype.registerListeners=function(){var e=this;window.addEventListener("message",(function(t){var n;if(t.origin===e.adcFrameOrigin){var r=t.data||{},o=r.type,s=r.uid,a=r.params;if(o){t.stopImmediatePropagation();try{if("hello"===o){e.messageLoggers.forEach((function(e){return e(o,a)})),e.connectionEstablished=!0;var u={uid:s,type:"hi",params:[e.integrationKey,location.search,e.disableNewInteractionPopup]};if(!(null===(n=e.adcFrame)||void 0===n?void 0:n.contentWindow))throw new Error("adcFrame is not defined - that should not be possible");return e.messageLoggers.forEach((function(e){return e(u.type,u.params)})),void e.adcFrame.contentWindow.postMessage(u,e.adcFrameOrigin)}if("ready"===o)return e.messageLoggers.forEach((function(e){return e(o,a)})),e.adcIsReady=!0,void setTimeout((function(){e.pendingMessages.forEach((function(t){e.postMessageToAdc(t)})),e.pendingMessages=[]}));if(!e.adcIsReady)return;if(Object.keys(i.callbackMessages).includes(o))e.messageLoggers.forEach((function(e){return e(o,a)})),e.handleIncomingMessage(o,s,a);else if(i.requestResponseMessages.includes(o)){e.messageLoggers.forEach((function(e){return e(o,a)}));var l=e.responseCallbacks[o];if(l&&l[s]){var c=l[s];delete l[s],Promise.resolve().then((function(){return c(a)}))}}}catch(t){console.error("@@@ Error: ",t.message)}}}}))},e.prototype.runResponseTimeoutWatch=function(e,t,n){var r=this;setTimeout((function(){var o=r.responseCallbacks[e+i.responseSuffix];if(o[t]){delete o[t];var s='Response from Communicator for event "'+e+"\" wasn't received in the specified timeout 20000 ms";console.error("@@@ "+s),n({status:"error",error:{code:6,name:"api_not_answer",message:s}})}}),2e4)},e.prototype.postMessageToAdc=function(e){null!==this.adcFrame&&this.adcFrame.contentWindow&&this.adcIsReady?(this.messageLoggers.forEach((function(t){return t(e.type,e.params)})),"LOGIN"===e.type?console.log("@@@ ADAPTER SEND MESSAGE: LOGIN"):console.log("@@@ ADAPTER SEND MESSAGE: ",e),this.adcFrame.contentWindow.postMessage(e,this.adcFrameOrigin)):(console.log("@@@ ADAPTER: ADC is not ready, add pending message:",e),this.pendingMessages.push(e))},e.prototype.apiCall=function(e,t){var n=this;return new Promise((function(r){var o=s.uuid();n.postMessageToAdc({uid:o,type:e,params:t}),n.responseCallbacks[e+i.responseSuffix][o]=r,n.runResponseTimeoutWatch(e,o,r)}))},e.prototype.getLoginState=function(){return this.apiCall("GET_LOGIN_STATE")},e.prototype.login=function(e,t){return this.apiCall("LOGIN",[e,t])},e.prototype.logout=function(){return this.apiCall("LOGOUT")},e.prototype.getAgentState=function(){return this.apiCall("GET_AGENT_STATE")},e.prototype.setAgentState=function(e,t){return this.apiCall("SET_AGENT_STATE",[e,t])},e.prototype.acceptInteraction=function(e){return this.apiCall("ACCEPT_INTERACTION",[e])},e.prototype.rejectInteraction=function(e){return this.apiCall("REJECT_INTERACTION",[e])},e.prototype.startCall=function(e,t){return this.apiCall("START_CALL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.startChat=function(e,t,n){return this.apiCall("START_CHAT",[e,t,n?n instanceof Array?n:[n]:[]])},e.prototype.startEmail=function(e,t){return this.apiCall("START_EMAIL",[e,t?t instanceof Array?t:[t]:[]])},e.prototype.sendDtmf=function(e,t){return this.apiCall("SEND_DTMF",[e,t])},e.prototype.consultCall=function(e){return this.apiCall("CONSULT_CALL",[e])},e.prototype.blindTransfer=function(e,t,n){return this.apiCall("BLIND_TRANSFER",[e,t,n])},e.prototype.transfer=function(e){return this.apiCall("TRANSFER",[e])},e.prototype.leaveInteraction=function(e){return this.apiCall("LEAVE_INTERACTION",[e])},e.prototype.completeInteraction=function(e){return this.apiCall("COMPLETE_INTERACTION",[e])},e.prototype.leaveAndCompleteInteraction=function(e,t,n){return this.apiCall("LEAVE_AND_COMPLETE_INTERACTION",[e,t,n])},e.prototype.switchActiveInteraction=function(e){return this.apiCall("SWITCH_ACTIVE_INTERACTION",[e])},e.prototype.inviteToCallConference=function(e,t,n){return this.apiCall("INVITE_TO_CALL_CONFERENCE",[e,t,n])},e.prototype.removeFromCallConference=function(e,t){return this.apiCall("REMOVE_FROM_CALL_CONFERENCE",[e,t])},e.prototype.destroyCallConference=function(e){return this.apiCall("DESTROY_CALL_CONFERENCE",[e])},e.prototype.inviteToChatConference=function(e,t){return this.apiCall("INVITE_TO_CHAT_CONFERENCE",[e,t])},e.prototype.removeFromChatConference=function(e,t){return this.apiCall("REMOVE_FROM_CHAT_CONFERENCE",[e,t])},e.prototype.mergeAllCallsIntoConference=function(e){return this.apiCall("MERGE_ALL_CALLS_INTO_CONFERENCE",[e])},e.prototype.getTeams=function(){return this.apiCall("GET_TEAMS")},e.prototype.getTeamMembers=function(e){return this.apiCall("GET_TEAM_MEMBERS",[e])},e.prototype.getServicesList=function(){return this.apiCall("GET_SERVICES_LIST",[])},e.prototype.getService=function(){return this.apiCall("GET_SERVICE",[])},e.prototype.setService=function(e){return this.apiCall("SET_SERVICE",[e])},e.prototype.getDIDNumbersList=function(){return this.apiCall("GET_DID_LIST",[])},e.prototype.getDIDNumber=function(){return this.apiCall("GET_DID",[])},e.prototype.setDIDNumber=function(e){return this.apiCall("SET_DID",[e])},e.prototype.getDispositionsList=function(e){return this.apiCall("GET_DISPOSITIONS_LIST",[e])},e.prototype.setDisposition=function(e,t){return this.apiCall("SET_DISPOSITION",[e,t])},e.prototype.addNote=function(e,t){return this.apiCall("ADD_NOTE",[e,t])},e.prototype.updateNote=function(e,t){return this.apiCall("UPDATE_NOTE",[e,t])},e.prototype.replaceNote=function(e,t){return this.apiCall("REPLACE_NOTE",[e,t])},e.prototype.setRescheduleWindow=function(e,t){return this.apiCall("SET_RESCHEDULE",[e,t])},e.prototype.getConfig=function(){return this.apiCall("GET_CONFIG")},e.prototype.setVariable=function(e,t,n){return this.apiCall("SET_VARIABLE",[e,t,n])},e.prototype.getVariables=function(e,t){return this.apiCall("GET_VARIABLES",[e,t])},e.prototype.addInteractionAssociatedObject=function(e,t){return this.apiCall("ADD_INTERACTION_ASSOCIATED_OBJECT",[e,t])},e.prototype.setInteractionActiveScreen=function(e,t){return this.apiCall("SET_INTERACTION_ACTIVE_SCREEN",[e,t])},e.prototype.getPhoneDevicesList=function(){return this.apiCall("GET_PHONE_DEVICES_LIST",[])},e.prototype.getPhoneDevice=function(){return this.apiCall("GET_PHONE_DEVICE",[])},e.prototype.setPhoneDevice=function(e){return this.apiCall("SET_PHONE_DEVICE",[e])},e.prototype.setCallHold=function(e,t){return this.apiCall("SET_CALL_HOLD",[e,t])},e.prototype.setCallRecording=function(e,t){return this.apiCall("SET_CALL_RECORDING",[e,t])},e.prototype.setCallMute=function(e,t){return this.apiCall("SET_CALL_MUTE",[e,t])},e.prototype.setScreenRecordingMute=function(e){return this.apiCall("SET_SCREEN_RECORDING_MUTE",[e])},e.prototype.getScreenRecordingState=function(){return this.apiCall("GET_SCREEN_RECORDING_STATE")},e.prototype.setWidgetMinimized=function(e){return this.apiCall("SET_WIDGET_MINIMIZED",[e])},e.prototype.sendChatMessage=function(e,t){return this.apiCall("SEND_CHAT_MESSAGE",[e,t])},e.prototype.suggestChatMessage=function(e,t,n){return this.apiCall("SUGGEST_CHAT_MESSAGE",[e,t,n])},e.prototype.getAgentNotReadyReasons=function(){return this.apiCall("GET_AGENT_NOT_READY_REASONS")},e.prototype.activatePage=function(){return this.apiCall("ACTIVATE_PAGE",[])},e.prototype.getInteractionsState=function(){return this.apiCall("GET_INTERACTIONS_STATE",[])},e.prototype.setCallRecordingMute=function(e,t){return this.apiCall("SET_CALL_RECORDING_MUTE",[e,t])},e.prototype.setDialCandidates=function(e){return this.apiCall("SET_DIAL_CANDIDATES",[e])},e.prototype.on=function(e,t){this.messageHandlers[e].push(t)},e.prototype.remove=function(e,t){var n=this.messageHandlers[e].indexOf(t);-1!==n&&this.messageHandlers[e].splice(n,1)},e}();t.AgentDesktopClientAPIImpl=c,window.brightpattern={AdApi:c}},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.utils=void 0;t.utils={extractURLParams:function(e){var t={};if(e)try{var n=e.split("?").slice(1).join("?");if(n.length)n.split("&").reduce((function(e,t){var n=t.split("=");n.length&&(e[decodeURIComponent(n.shift())]=decodeURIComponent(n.join("=")));return e}),t)}catch(t){console.error("Unable to parse URL parameters: ",e)}return t},capitalize:function(e){return e.replace(/^\w/,(function(e){return e.toUpperCase()}))},findLast:function(e,t){for(var n=e.length-1;n>=0;n--)if(t(e[n]))return e[n];return null},shallowObjEqual:function(e,t){for(var n in e)if(!(n in t)||e[n]!==t[n])return!1;for(var n in t)if(!(n in e)||t[n]!==e[n])return!1;return!0},waitResolveAll:function(e){return new Promise((function(t,n){if(e.length){var r=0,o=new Array(e.length);e.map((function(e){return e instanceof Promise?e:Promise.resolve(e)})).forEach((function(n,i){n.then((function(e){o[i]={status:"fulfilled",value:e}})).catch((function(e){o[i]={status:"rejected",reason:e}})).finally((function(){++r===e.length&&t(o)}))}))}else t([])}))},startsWithAny:function(e,t){for(var n=0,r=t;n<r.length;n++){var o=r[n];if(e.startsWith(o))return!0}return!1},splitWords:function(e){return e.trim().split(/(?=[A-Z])/).map((function(e){return e.trim()})).join(" ")}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,